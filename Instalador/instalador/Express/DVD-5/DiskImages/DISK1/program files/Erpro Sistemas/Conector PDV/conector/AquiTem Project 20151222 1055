-- MySQL Administrator dump 1.4
--
-- ------------------------------------------------------
-- Server version	5.5.30


/*!40101 SET @OLD_CHARACTER_SET_CLIENT=@@CHARACTER_SET_CLIENT */;
/*!40101 SET @OLD_CHARACTER_SET_RESULTS=@@CHARACTER_SET_RESULTS */;
/*!40101 SET @OLD_COLLATION_CONNECTION=@@COLLATION_CONNECTION */;
/*!40101 SET NAMES utf8 */;

/*!40014 SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0 */;
/*!40014 SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0 */;
/*!40101 SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='NO_AUTO_VALUE_ON_ZERO' */;


--
-- Create schema conector
--

CREATE DATABASE IF NOT EXISTS conector;
USE conector;

--
-- Temporary table structure for view `vw_conector_autentic`
--
DROP TABLE IF EXISTS `vw_conector_autentic`;
DROP VIEW IF EXISTS `vw_conector_autentic`;
CREATE TABLE `vw_conector_autentic` (
  `idLoja` int(11),
  `razao` varchar(45),
  `idTerminal` int(11),
  `idFinalizadora` int(11),
  `descricao` varchar(30),
  `emissao` datetime,
  `historico` varchar(100),
  `reserva` double,
  `subtotal` decimal(15,2),
  `total` decimal(37,2),
  `idFuncionario` int(11)
);

--
-- Definition of table `administradora`
--

DROP TABLE IF EXISTS `administradora`;
CREATE TABLE `administradora` (
  `idAdministradora` int(11) NOT NULL,
  `razao` varchar(40) NOT NULL,
  `descricao` varchar(20) NOT NULL,
  `taxa` decimal(5,3) NOT NULL,
  `prazo` int(11) NOT NULL,
  `idtypeCartao` int(11) NOT NULL COMMENT '1 - debito\n2 - credito\n3 - voucher\n',
  `cnpj` varchar(14) NOT NULL,
  `ie` varchar(30) DEFAULT NULL,
  `inclusao` date DEFAULT NULL,
  `cep` varchar(8) DEFAULT NULL,
  `rua` varchar(45) DEFAULT NULL,
  `numero` int(11) DEFAULT NULL,
  `bairro` varchar(45) DEFAULT NULL,
  `municipio` varchar(45) DEFAULT NULL,
  `idestado` int(11) NOT NULL,
  `uf` char(2) NOT NULL,
  `inativo` smallint(6) NOT NULL DEFAULT '0',
  `historicoCredito` smallint(6) NOT NULL,
  `historicoDebito` smallint(6) NOT NULL,
  `networkCard` int(11) NOT NULL,
  `networkFix` char(1) NOT NULL DEFAULT 'n' COMMENT 'n - nao\ns - sim',
  `idconectCard` int(11) NOT NULL,
  PRIMARY KEY (`idAdministradora`),
  KEY `fk_administradora_typeCartao1` (`idtypeCartao`),
  KEY `fk_administradora_estado1` (`idestado`,`uf`),
  KEY `fk_administradora_networkCard1` (`networkCard`),
  KEY `fk_administradora_conectCard1` (`idconectCard`),
  CONSTRAINT `fk_administradora_conectCard1` FOREIGN KEY (`idconectCard`) REFERENCES `conectcard` (`idconectCard`) ON DELETE NO ACTION ON UPDATE NO ACTION,
  CONSTRAINT `fk_administradora_estado1` FOREIGN KEY (`idestado`, `uf`) REFERENCES `estado` (`idestado`, `uf`) ON DELETE NO ACTION ON UPDATE NO ACTION,
  CONSTRAINT `fk_administradora_networkCard1` FOREIGN KEY (`networkCard`) REFERENCES `networkcard` (`idnetworkCard`) ON DELETE NO ACTION ON UPDATE NO ACTION,
  CONSTRAINT `fk_administradora_typeCartao1` FOREIGN KEY (`idtypeCartao`) REFERENCES `typecartao` (`idtypeCartao`) ON DELETE NO ACTION ON UPDATE NO ACTION
) ENGINE=InnoDB DEFAULT CHARSET=latin1;

--
-- Dumping data for table `administradora`
--

/*!40000 ALTER TABLE `administradora` DISABLE KEYS */;
/*!40000 ALTER TABLE `administradora` ENABLE KEYS */;


--
-- Definition of trigger `administradoraCliente_last_insert`
--

DROP TRIGGER /*!50030 IF EXISTS */ `administradoraCliente_last_insert`;

DELIMITER $$

CREATE DEFINER = `master`@`localhost` TRIGGER `administradoraCliente_last_insert` AFTER INSERT ON `administradora` FOR EACH ROW begin


select idspedmunicipio from conector.spedmunicipio tab, estado tab1 where  tab.unidadeFederativa=tab1.nome and municipio=new.municipio and tab1.uf=new.uf INTO @spedMunicipio;

select idLoja from system into @store;

SET foreign_key_checks=0;
 SELECT count(*),idCliente FROM juridica where cnpj=NEW.cnpj into @a, @b;
if(@a = 0)then
    SELECT (ifnull(auto_increment,1)) FROM information_schema.`TABLES` where table_schema='conector' and table_name='cliente' into @chaveCliente;
        else
            set @chaveCliente = @b;
            end if;

if(@a = 0)then
insert into
		cliente
			(
				idloja,
				idtipoPessoa,
				idusuario,
				idatividade,
				observacao,
				dataEmissao,
				dataAlteracao,
				idestado,
				uf,
        status,
        idspedMunicipio
			)	values
			(
				@chaveCliente,
				2,
				4,
				6,
				"",
				now(),
				now(),
				new.idestado,
				new.uf,
        new.inativo,
        @spedMunicipio
			);

    

        CALL conector_inc_juridica(new.idAdministradora,new.cnpj,6,new.razao,new.descricao,new.ie,now(),4);
END IF;    
end $$

DELIMITER ;

--
-- Definition of table `aliquota`
--

DROP TABLE IF EXISTS `aliquota`;
CREATE TABLE `aliquota` (
  `idaliquota` char(2) NOT NULL,
  `nome` varchar(30) NOT NULL,
  `aliquota` decimal(15,3) NOT NULL,
  `reducao` decimal(15,3) DEFAULT NULL,
  `tipo` char(1) NOT NULL,
  `cst` char(3) NOT NULL,
  `mesagem` varchar(45) DEFAULT NULL,
  `status` smallint(6) NOT NULL,
  PRIMARY KEY (`idaliquota`),
  UNIQUE KEY `idaliquota_UNIQUE` (`idaliquota`),
  KEY `fk_aliquota_cst1` (`cst`),
  CONSTRAINT `fk_aliquota_cst1` FOREIGN KEY (`cst`) REFERENCES `cst` (`idcst`) ON DELETE NO ACTION ON UPDATE NO ACTION
) ENGINE=InnoDB DEFAULT CHARSET=latin1;

--
-- Dumping data for table `aliquota`
--

/*!40000 ALTER TABLE `aliquota` DISABLE KEYS */;
/*!40000 ALTER TABLE `aliquota` ENABLE KEYS */;


--
-- Definition of table `atividade`
--

DROP TABLE IF EXISTS `atividade`;
CREATE TABLE `atividade` (
  `idatividade` int(11) NOT NULL AUTO_INCREMENT,
  `descricao` varchar(45) NOT NULL,
  PRIMARY KEY (`idatividade`)
) ENGINE=InnoDB DEFAULT CHARSET=latin1;

--
-- Dumping data for table `atividade`
--

/*!40000 ALTER TABLE `atividade` DISABLE KEYS */;
/*!40000 ALTER TABLE `atividade` ENABLE KEYS */;


--
-- Definition of table `autentic_cx`
--

DROP TABLE IF EXISTS `autentic_cx`;
CREATE TABLE `autentic_cx` (
  `idLoja` int(11) NOT NULL,
  `idFuncionario` int(11) NOT NULL,
  `idTerminal` int(11) NOT NULL,
  `idfinalizadora` int(11) NOT NULL,
  `emissao` datetime NOT NULL,
  `historico` varchar(100) NOT NULL,
  `total` decimal(15,3) NOT NULL,
  `reserva` double NOT NULL,
  PRIMARY KEY (`idLoja`,`idFuncionario`,`idTerminal`,`idfinalizadora`,`emissao`),
  KEY `fk_autentic_cx_loja1` (`idLoja`),
  KEY `fk_autentic_cx_funcionario1` (`idFuncionario`),
  KEY `fk_autentic_cx_terminal1` (`idTerminal`),
  KEY `fk_autentic_cx_finalizadora1` (`idfinalizadora`),
  CONSTRAINT `fk_autentic_cx_finalizadora1` FOREIGN KEY (`idfinalizadora`) REFERENCES `finalizadora` (`idfinalizadora`) ON DELETE NO ACTION ON UPDATE NO ACTION,
  CONSTRAINT `fk_autentic_cx_funcionario1` FOREIGN KEY (`idFuncionario`) REFERENCES `funcionario` (`idfuncionario`) ON DELETE NO ACTION ON UPDATE NO ACTION,
  CONSTRAINT `fk_autentic_cx_loja1` FOREIGN KEY (`idLoja`) REFERENCES `loja` (`idloja`) ON DELETE NO ACTION ON UPDATE NO ACTION,
  CONSTRAINT `fk_autentic_cx_terminal1` FOREIGN KEY (`idTerminal`) REFERENCES `terminal` (`idterminal`) ON DELETE NO ACTION ON UPDATE NO ACTION
) ENGINE=InnoDB DEFAULT CHARSET=latin1;

--
-- Dumping data for table `autentic_cx`
--

/*!40000 ALTER TABLE `autentic_cx` DISABLE KEYS */;
/*!40000 ALTER TABLE `autentic_cx` ENABLE KEYS */;


--
-- Definition of table `avalista`
--

DROP TABLE IF EXISTS `avalista`;
CREATE TABLE `avalista` (
  `cliente` int(11) NOT NULL,
  `avalista` int(11) NOT NULL,
  PRIMARY KEY (`cliente`,`avalista`),
  KEY `fk_avalista_cliente2` (`avalista`),
  CONSTRAINT `fk_avalista_cliente1` FOREIGN KEY (`cliente`) REFERENCES `cliente` (`idcliente`) ON DELETE NO ACTION ON UPDATE NO ACTION,
  CONSTRAINT `fk_avalista_cliente2` FOREIGN KEY (`avalista`) REFERENCES `cliente` (`idcliente`) ON DELETE NO ACTION ON UPDATE NO ACTION
) ENGINE=InnoDB DEFAULT CHARSET=latin1;

--
-- Dumping data for table `avalista`
--

/*!40000 ALTER TABLE `avalista` DISABLE KEYS */;
/*!40000 ALTER TABLE `avalista` ENABLE KEYS */;


--
-- Definition of table `banco`
--

DROP TABLE IF EXISTS `banco`;
CREATE TABLE `banco` (
  `idbanco` int(11) NOT NULL,
  `Nome` varchar(30) NOT NULL,
  `digito` char(1) DEFAULT NULL,
  `status` smallint(6) NOT NULL DEFAULT '0',
  PRIMARY KEY (`idbanco`)
) ENGINE=InnoDB DEFAULT CHARSET=latin1;

--
-- Dumping data for table `banco`
--

/*!40000 ALTER TABLE `banco` DISABLE KEYS */;
/*!40000 ALTER TABLE `banco` ENABLE KEYS */;


--
-- Definition of table `bof`
--

DROP TABLE IF EXISTS `bof`;
CREATE TABLE `bof` (
  `texto` varchar(400) DEFAULT NULL
) ENGINE=InnoDB DEFAULT CHARSET=latin1;

--
-- Dumping data for table `bof`
--

/*!40000 ALTER TABLE `bof` DISABLE KEYS */;
/*!40000 ALTER TABLE `bof` ENABLE KEYS */;


--
-- Definition of table `boleto`
--

DROP TABLE IF EXISTS `boleto`;
CREATE TABLE `boleto` (
  `idboleto` double NOT NULL AUTO_INCREMENT,
  `cedente` int(11) NOT NULL,
  `sacador` int(11) NOT NULL,
  `codBarra` varchar(44) DEFAULT NULL,
  `banco` varchar(3) NOT NULL,
  `moeda` varchar(1) NOT NULL,
  `agencia` varchar(4) NOT NULL,
  `nossoNumero` varchar(11) NOT NULL,
  `convenio` varchar(8) NOT NULL,
  `valor` varchar(10) NOT NULL,
  `vencimentoValue` varchar(4) NOT NULL,
  `dv1` varchar(1) NOT NULL,
  `dv2` varchar(1) NOT NULL,
  `dv3` varchar(1) NOT NULL,
  `dvFull` varchar(1) NOT NULL,
  `carteira` varchar(2) NOT NULL,
  `emissao` date NOT NULL,
  `vencimento` date NOT NULL,
  `pagamento` varchar(8) DEFAULT '00000000',
  `batimento` char(1) NOT NULL DEFAULT 'n',
  `valorPago` decimal(15,3) NOT NULL DEFAULT '0.000',
  `multa` decimal(15,3) NOT NULL DEFAULT '0.000',
  `multaDiaria` decimal(15,3) NOT NULL DEFAULT '0.000',
  `desconto` decimal(15,3) NOT NULL DEFAULT '0.000',
  `acrescimo` decimal(15,3) NOT NULL DEFAULT '0.000',
  `messagem` blob,
  `especial` varchar(2) DEFAULT NULL,
  `nr_documento` varchar(10) DEFAULT NULL,
  `dataDocumento` date DEFAULT NULL,
  `tipoBaixa` varchar(2) DEFAULT NULL COMMENT 'c - caixa\np - cheque\nb - banco',
  `bancoBaixa` int(11) DEFAULT NULL,
  `caixaBaixa` int(11) DEFAULT NULL,
  `finalizadoraRecebimento` int(11) DEFAULT NULL,
  `origem` varchar(15) NOT NULL,
  `flagAlteracao` date DEFAULT NULL,
  `reserva` double DEFAULT NULL,
  `parcela` int(11) DEFAULT NULL,
  `historico` varchar(100) DEFAULT NULL,
  `conta` int(11) NOT NULL,
  `idFuncionario` int(11) NOT NULL DEFAULT '0',
  `idTerminal` int(11) NOT NULL DEFAULT '0',
  `usuarioInc` int(11) NOT NULL DEFAULT '0',
  `usuarioBaixa` int(11) NOT NULL DEFAULT '0',
  `flagPagamento` varchar(1) NOT NULL DEFAULT 'n',
  `chave_nota` double DEFAULT NULL,
  PRIMARY KEY (`idboleto`),
  UNIQUE KEY `codBarra_UNIQUE` (`codBarra`),
  KEY `fk_boleto_loja1` (`cedente`),
  KEY `fk_boleto_cliente1` (`sacador`),
  CONSTRAINT `fk_boleto_cliente1` FOREIGN KEY (`sacador`) REFERENCES `cliente` (`idcliente`) ON DELETE NO ACTION ON UPDATE NO ACTION,
  CONSTRAINT `fk_boleto_loja1` FOREIGN KEY (`cedente`) REFERENCES `loja` (`idloja`) ON DELETE NO ACTION ON UPDATE NO ACTION
) ENGINE=InnoDB DEFAULT CHARSET=latin1;

--
-- Dumping data for table `boleto`
--

/*!40000 ALTER TABLE `boleto` DISABLE KEYS */;
/*!40000 ALTER TABLE `boleto` ENABLE KEYS */;


--
-- Definition of table `caixa`
--

DROP TABLE IF EXISTS `caixa`;
CREATE TABLE `caixa` (
  `idcaixa` double NOT NULL AUTO_INCREMENT,
  `descricao` varchar(30) NOT NULL,
  `abertura` date DEFAULT NULL,
  `fechamento` date DEFAULT NULL,
  `inativo` smallint(6) NOT NULL DEFAULT '0',
  `saldoInicial` decimal(15,3) NOT NULL DEFAULT '0.000',
  `idloja` int(11) NOT NULL,
  `zeraCaixa` char(1) NOT NULL DEFAULT 'n',
  `caixaAberto` char(1) NOT NULL DEFAULT 's',
  `permiteNegativo` char(1) NOT NULL DEFAULT 's',
  PRIMARY KEY (`idcaixa`),
  KEY `fk_caixa_loja1` (`idloja`),
  CONSTRAINT `fk_caixa_loja1` FOREIGN KEY (`idloja`) REFERENCES `loja` (`idloja`) ON DELETE NO ACTION ON UPDATE NO ACTION
) ENGINE=InnoDB DEFAULT CHARSET=latin1;

--
-- Dumping data for table `caixa`
--

/*!40000 ALTER TABLE `caixa` DISABLE KEYS */;
/*!40000 ALTER TABLE `caixa` ENABLE KEYS */;


--
-- Definition of table `caixacorrente`
--

DROP TABLE IF EXISTS `caixacorrente`;
CREATE TABLE `caixacorrente` (
  `idcaixaCorrente` double NOT NULL AUTO_INCREMENT,
  `usuario` int(11) NOT NULL,
  `data` date NOT NULL,
  `caixa` double NOT NULL,
  `loja` int(11) NOT NULL,
  `tipo` varchar(3) NOT NULL COMMENT 'A - ABERTURA CAIXA\nR - RECEBIMENTO [QUALQUER TIPO DE RECEBIMENTO] [LACAMENTO DE CAIXA]\nP - PAGAMENTOS [QUALQUER TIPO DE PAGAMENTO]\nC - CREDITO DIVERSOS\nG - CARGA DE VALORES\nV - OUTROS RECEBIMENTOS\nJ - COBRAÇO DE "JUROS"\nD - DEBITOS DIVERSOS [TRANSFERENCIA',
  `historico` varchar(50) DEFAULT NULL,
  `valor` decimal(15,3) NOT NULL DEFAULT '0.000',
  `reserva` double DEFAULT NULL,
  `valorTransportadora` decimal(15,3) NOT NULL DEFAULT '0.000',
  `tipoTessouraria` varchar(1) DEFAULT NULL,
  `chaveBanco` int(11) DEFAULT NULL,
  `chaveCaixa` int(11) DEFAULT NULL,
  `observacao` blob,
  `origem` varchar(10) DEFAULT NULL COMMENT 'CAIXA\nRECEBER\nCONVENIO\nCONTA',
  PRIMARY KEY (`idcaixaCorrente`),
  KEY `fk_caixaCorrente_usuario1` (`usuario`),
  KEY `fk_caixaCorrente_caixa1` (`caixa`),
  KEY `fk_caixaCorrente_loja1` (`loja`),
  KEY `fk_caixaCorrente_data` (`data`),
  KEY `idx_caixa_det_tipo_dc` (`tipo`,`data`,`caixa`),
  CONSTRAINT `fk_caixaCorrente_caixa1` FOREIGN KEY (`caixa`) REFERENCES `caixa` (`idcaixa`) ON DELETE NO ACTION ON UPDATE NO ACTION,
  CONSTRAINT `fk_caixaCorrente_loja1` FOREIGN KEY (`loja`) REFERENCES `loja` (`idloja`) ON DELETE NO ACTION ON UPDATE NO ACTION,
  CONSTRAINT `fk_caixaCorrente_usuario1` FOREIGN KEY (`usuario`) REFERENCES `usuario` (`idusuario`) ON DELETE NO ACTION ON UPDATE NO ACTION
) ENGINE=InnoDB DEFAULT CHARSET=latin1;

--
-- Dumping data for table `caixacorrente`
--

/*!40000 ALTER TABLE `caixacorrente` DISABLE KEYS */;
/*!40000 ALTER TABLE `caixacorrente` ENABLE KEYS */;


--
-- Definition of table `caixafinalizadora`
--

DROP TABLE IF EXISTS `caixafinalizadora`;
CREATE TABLE `caixafinalizadora` (
  `idcaixaFinalizadora` double NOT NULL AUTO_INCREMENT,
  `caixaCorrente` double NOT NULL,
  `valor` decimal(15,3) NOT NULL,
  `data` date NOT NULL,
  `typeTransaction` varchar(1) NOT NULL COMMENT 'c - credito\nd - debito\n',
  `caixa` double NOT NULL,
  `valorTransportadora` decimal(15,3) NOT NULL DEFAULT '0.000',
  `codigo` int(11) NOT NULL,
  PRIMARY KEY (`idcaixaFinalizadora`),
  KEY `fk_caixaFinalizadora_caixa1` (`caixa`),
  KEY `idx_caixaFinalizadora_data` (`data`),
  KEY `fk_caixaFinalizadora_caixaCorrente1` (`caixaCorrente`),
  KEY `idx_caixaFinalizadora_dc` (`data`,`caixa`),
  CONSTRAINT `fk_caixaFinalizadora_caixa1` FOREIGN KEY (`caixa`) REFERENCES `caixa` (`idcaixa`) ON DELETE NO ACTION ON UPDATE NO ACTION,
  CONSTRAINT `fk_caixaFinalizadora_caixaCorrente1` FOREIGN KEY (`caixaCorrente`) REFERENCES `caixacorrente` (`idcaixaCorrente`) ON DELETE CASCADE ON UPDATE CASCADE
) ENGINE=InnoDB DEFAULT CHARSET=latin1;

--
-- Dumping data for table `caixafinalizadora`
--

/*!40000 ALTER TABLE `caixafinalizadora` DISABLE KEYS */;
/*!40000 ALTER TABLE `caixafinalizadora` ENABLE KEYS */;


--
-- Definition of trigger `caixaFinalizadora_last_insert`
--

DROP TRIGGER /*!50030 IF EXISTS */ `caixaFinalizadora_last_insert`;

DELIMITER $$

CREATE DEFINER = `master`@`localhost` TRIGGER `caixaFinalizadora_last_insert` BEFORE INSERT ON `caixafinalizadora` FOR EACH ROW begin
    if(new.typeTransaction = "D" || new.typeTransaction = "P" || new.typeTransaction = "G") then
        set new.valor = (new.valor * -1);
    end if;
end $$

DELIMITER ;

--
-- Definition of table `caixaregistro`
--

DROP TABLE IF EXISTS `caixaregistro`;
CREATE TABLE `caixaregistro` (
  `caixa` double NOT NULL,
  `data` date NOT NULL,
  `userAbertura` int(11) DEFAULT NULL,
  `userFechamento` int(11) DEFAULT NULL,
  `aberto` char(1) NOT NULL COMMENT 'n - não aberto\ns - sim aberto',
  `fundoTroco` decimal(15,3) NOT NULL DEFAULT '0.000',
  `observacao` varchar(100) DEFAULT NULL,
  `saldoOld` decimal(15,3) NOT NULL DEFAULT '0.000',
  PRIMARY KEY (`caixa`,`data`),
  KEY `fk_caixaRegistro_caixa1` (`caixa`),
  CONSTRAINT `fk_caixaRegistro_caixa1` FOREIGN KEY (`caixa`) REFERENCES `caixa` (`idcaixa`) ON DELETE NO ACTION ON UPDATE NO ACTION
) ENGINE=InnoDB DEFAULT CHARSET=latin1;

--
-- Dumping data for table `caixaregistro`
--

/*!40000 ALTER TABLE `caixaregistro` DISABLE KEYS */;
/*!40000 ALTER TABLE `caixaregistro` ENABLE KEYS */;


--
-- Definition of table `card_bandeira`
--

DROP TABLE IF EXISTS `card_bandeira`;
CREATE TABLE `card_bandeira` (
  `bandeira` double NOT NULL,
  `nome` varchar(45) DEFAULT NULL,
  `alteracao` date DEFAULT NULL,
  `idtypeCartao` int(11) NOT NULL,
  `codigo` int(11) NOT NULL,
  PRIMARY KEY (`bandeira`,`codigo`),
  KEY `fk_card_bandeira_typeCartao1` (`idtypeCartao`),
  KEY `fk_card_bandeira_administradora1` (`codigo`),
  CONSTRAINT `fk_card_bandeira_administradora1` FOREIGN KEY (`codigo`) REFERENCES `administradora` (`idAdministradora`) ON DELETE NO ACTION ON UPDATE NO ACTION,
  CONSTRAINT `fk_card_bandeira_typeCartao1` FOREIGN KEY (`idtypeCartao`) REFERENCES `typecartao` (`idtypeCartao`) ON DELETE NO ACTION ON UPDATE NO ACTION
) ENGINE=InnoDB DEFAULT CHARSET=latin1;

--
-- Dumping data for table `card_bandeira`
--

/*!40000 ALTER TABLE `card_bandeira` DISABLE KEYS */;
/*!40000 ALTER TABLE `card_bandeira` ENABLE KEYS */;


--
-- Definition of table `carga`
--

DROP TABLE IF EXISTS `carga`;
CREATE TABLE `carga` (
  `loja` int(11) NOT NULL,
  `data` date NOT NULL,
  `sequencia_carga` int(11) NOT NULL,
  `terminal` int(11) NOT NULL,
  `cargaType` int(11) DEFAULT NULL,
  `hora_carga` time NOT NULL,
  `hora_carga_proc` time NOT NULL,
  `parcial` smallint(6) NOT NULL COMMENT '0 - geral\n1 - parcial',
  `agendada` date DEFAULT NULL,
  `instalacao` varbinary(100) DEFAULT NULL,
  `expiracao` varbinary(100) DEFAULT NULL,
  `statusCarga` smallint(6) NOT NULL COMMENT '0 - iniciada\n1 - aguardando solicitacao\n2 - pendente\n3 - atualizada\n4 - cancelada',
  `remetente` varchar(45) NOT NULL,
  `versao` varchar(45) NOT NULL,
  `usuario` int(11) NOT NULL,
  `tentativas` int(11) NOT NULL DEFAULT '0',
  `geral` smallint(6) NOT NULL,
  `administradora` smallint(6) NOT NULL,
  `balanca` smallint(6) NOT NULL,
  `fiscal` smallint(6) NOT NULL,
  `finalizadora` smallint(6) NOT NULL,
  `cadastro` smallint(6) NOT NULL,
  `configuracao` smallint(6) NOT NULL,
  `pessoa` smallint(6) NOT NULL,
  `produto` smallint(6) NOT NULL,
  `cep` smallint(6) NOT NULL,
  PRIMARY KEY (`loja`,`data`,`sequencia_carga`,`terminal`),
  CONSTRAINT `fk_carga_loja1` FOREIGN KEY (`loja`) REFERENCES `loja` (`idloja`) ON DELETE NO ACTION ON UPDATE NO ACTION
) ENGINE=InnoDB DEFAULT CHARSET=latin1;

--
-- Dumping data for table `carga`
--

/*!40000 ALTER TABLE `carga` DISABLE KEYS */;
/*!40000 ALTER TABLE `carga` ENABLE KEYS */;


--
-- Definition of trigger `carga_exe_insert`
--

DROP TRIGGER /*!50030 IF EXISTS */ `carga_exe_insert`;

DELIMITER $$

CREATE DEFINER = `master`@`localhost` TRIGGER `carga_exe_insert` BEFORE INSERT ON `carga` FOR EACH ROW begin
    declare i integer;
    declare Varaquisicao date;
    declare Varliberacao date;
    DECLARE done INT DEFAULT FALSE;
    declare VarCnpj varchar(16);
    
        select cnpj from loja where idLoja=new.Loja into VarCnpj;
        select aquisicao,liberacao from licenca_ecf where cnpj=VarCnpj and caixa=new.terminal into Varaquisicao,Varliberacao;
            
            set new.instalacao = Varaquisicao;
            set new.expiracao = Varliberacao;
end $$

DELIMITER ;

--
-- Definition of table `cargofuncao`
--

DROP TABLE IF EXISTS `cargofuncao`;
CREATE TABLE `cargofuncao` (
  `idcargoFuncao` int(11) NOT NULL AUTO_INCREMENT,
  `descricao` varchar(45) NOT NULL,
  PRIMARY KEY (`idcargoFuncao`)
) ENGINE=InnoDB DEFAULT CHARSET=latin1;

--
-- Dumping data for table `cargofuncao`
--

/*!40000 ALTER TABLE `cargofuncao` DISABLE KEYS */;
/*!40000 ALTER TABLE `cargofuncao` ENABLE KEYS */;


--
-- Definition of table `cartao`
--

DROP TABLE IF EXISTS `cartao`;
CREATE TABLE `cartao` (
  `idcartao` double NOT NULL AUTO_INCREMENT,
  `idAdministradora` int(11) NOT NULL,
  `idloja` int(11) NOT NULL,
  `inclusao` date NOT NULL,
  `alteracao` date DEFAULT NULL,
  `cupom` double NOT NULL DEFAULT '0',
  `pedido` double NOT NULL DEFAULT '0',
  `terminal` int(11) NOT NULL DEFAULT '0' COMMENT 'PDV',
  `emissao` date NOT NULL,
  `vencimento` date DEFAULT NULL,
  `pagamento` varchar(8) NOT NULL DEFAULT '00000000',
  `status` char(1) NOT NULL,
  `observacao` varchar(50) DEFAULT NULL,
  `parcela` int(11) NOT NULL,
  `qttyParcela` int(11) NOT NULL,
  `typeCartao` int(11) NOT NULL,
  `bandeira` double DEFAULT NULL,
  `valor` decimal(15,3) NOT NULL,
  `prazo` int(11) NOT NULL,
  `networkCard` int(11) NOT NULL DEFAULT '1',
  `conferencia` varchar(1) NOT NULL DEFAULT 'n' COMMENT 'n = nao conferiu\ns = sim conferiu',
  `origem` char(1) NOT NULL COMMENT 'f - faturamento\nr - recebimento\nc - caixa',
  `batimento` char(1) NOT NULL DEFAULT 'n',
  `envio` char(8) DEFAULT '00000000',
  `idconectCard` int(11) NOT NULL DEFAULT '1',
  `valorLiquido` decimal(15,3) NOT NULL DEFAULT '0.000',
  `taxaValor` decimal(15,3) NOT NULL DEFAULT '0.000',
  `idFuncionario` int(11) NOT NULL DEFAULT '0',
  `chave_nota` double DEFAULT NULL,
  PRIMARY KEY (`idcartao`),
  KEY `fk_cartao_administradora1` (`idAdministradora`),
  KEY `fk_cartao_loja1` (`idloja`),
  KEY `fk_cartao_typeCartao1` (`typeCartao`),
  KEY `fk_cartao_networkCard1` (`networkCard`),
  CONSTRAINT `fk_cartao_administradora1` FOREIGN KEY (`idAdministradora`) REFERENCES `administradora` (`idAdministradora`) ON DELETE NO ACTION ON UPDATE NO ACTION,
  CONSTRAINT `fk_cartao_loja1` FOREIGN KEY (`idloja`) REFERENCES `loja` (`idloja`) ON DELETE NO ACTION ON UPDATE NO ACTION,
  CONSTRAINT `fk_cartao_networkCard1` FOREIGN KEY (`networkCard`) REFERENCES `networkcard` (`idnetworkCard`) ON DELETE NO ACTION ON UPDATE NO ACTION,
  CONSTRAINT `fk_cartao_typeCartao1` FOREIGN KEY (`typeCartao`) REFERENCES `typecartao` (`idtypeCartao`) ON DELETE NO ACTION ON UPDATE NO ACTION
) ENGINE=InnoDB DEFAULT CHARSET=latin1;

--
-- Dumping data for table `cartao`
--

/*!40000 ALTER TABLE `cartao` DISABLE KEYS */;
/*!40000 ALTER TABLE `cartao` ENABLE KEYS */;


--
-- Definition of trigger `cartao_firt_insert`
--

DROP TRIGGER /*!50030 IF EXISTS */ `cartao_firt_insert`;

DELIMITER $$

CREATE DEFINER = `master`@`localhost` TRIGGER `cartao_firt_insert` BEFORE INSERT ON `cartao` FOR EACH ROW begin
    declare adm int default 0;
    select 
            idAdministradora 
                            from system
                                        into adm;
    
    
end $$

DELIMITER ;

--
-- Definition of table `carteira`
--

DROP TABLE IF EXISTS `carteira`;
CREATE TABLE `carteira` (
  `idCarteira` int(11) NOT NULL AUTO_INCREMENT,
  `nome` varchar(30) NOT NULL,
  PRIMARY KEY (`idCarteira`)
) ENGINE=InnoDB DEFAULT CHARSET=latin1;

--
-- Dumping data for table `carteira`
--

/*!40000 ALTER TABLE `carteira` DISABLE KEYS */;
/*!40000 ALTER TABLE `carteira` ENABLE KEYS */;


--
-- Definition of table `categoria`
--

DROP TABLE IF EXISTS `categoria`;
CREATE TABLE `categoria` (
  `idcategoria` int(11) NOT NULL AUTO_INCREMENT,
  `idgrupo` int(11) NOT NULL,
  `idsetor` int(11) NOT NULL,
  `descricao` varchar(45) NOT NULL,
  `status` smallint(6) NOT NULL,
  `nItens` int(11) NOT NULL DEFAULT '0',
  `desconto` decimal(10,3) NOT NULL DEFAULT '0.000',
  `comissao` decimal(10,3) NOT NULL DEFAULT '0.000',
  PRIMARY KEY (`idcategoria`,`idgrupo`,`idsetor`),
  KEY `fk_categoria_grupo1` (`idgrupo`,`idsetor`),
  CONSTRAINT `fk_categoria_grupo1` FOREIGN KEY (`idgrupo`, `idsetor`) REFERENCES `grupo` (`idgrupo`, `idsetor`) ON DELETE NO ACTION ON UPDATE NO ACTION
) ENGINE=InnoDB DEFAULT CHARSET=latin1;

--
-- Dumping data for table `categoria`
--

/*!40000 ALTER TABLE `categoria` DISABLE KEYS */;
/*!40000 ALTER TABLE `categoria` ENABLE KEYS */;


--
-- Definition of table `cepbairro`
--

DROP TABLE IF EXISTS `cepbairro`;
CREATE TABLE `cepbairro` (
  `idcepbairro` int(11) NOT NULL AUTO_INCREMENT,
  `cep` int(11) NOT NULL,
  `idcepCity` int(11) NOT NULL,
  `idestado` int(11) NOT NULL,
  `bairro` varchar(45) NOT NULL,
  `logradouro` varchar(45) NOT NULL,
  `complemento` varchar(60) DEFAULT NULL,
  `uf` char(2) NOT NULL,
  PRIMARY KEY (`idcepbairro`,`cep`),
  UNIQUE KEY `cep_UNIQUE` (`cep`),
  KEY `fk_cepbairro_cepCity1` (`idcepCity`),
  KEY `fk_cepbairro_estado1` (`idestado`),
  CONSTRAINT `fk_cepbairro_cepCity1` FOREIGN KEY (`idcepCity`) REFERENCES `cepcity` (`idcepCity`) ON DELETE NO ACTION ON UPDATE NO ACTION,
  CONSTRAINT `fk_cepbairro_estado1` FOREIGN KEY (`idestado`) REFERENCES `estado` (`idestado`) ON DELETE NO ACTION ON UPDATE NO ACTION
) ENGINE=InnoDB AUTO_INCREMENT=1937526 DEFAULT CHARSET=latin1;

--
-- Dumping data for table `cepbairro`
--

/*!40000 ALTER TABLE `cepbairro` DISABLE KEYS */;
/*!40000 ALTER TABLE `cepbairro` ENABLE KEYS */;


--
-- Definition of table `cepcity`
--

DROP TABLE IF EXISTS `cepcity`;
CREATE TABLE `cepcity` (
  `idcepCity` int(11) NOT NULL AUTO_INCREMENT,
  `nome` varchar(45) NOT NULL,
  `uf` char(2) NOT NULL,
  PRIMARY KEY (`idcepCity`)
) ENGINE=InnoDB DEFAULT CHARSET=latin1;

--
-- Dumping data for table `cepcity`
--

/*!40000 ALTER TABLE `cepcity` DISABLE KEYS */;
/*!40000 ALTER TABLE `cepcity` ENABLE KEYS */;


--
-- Definition of table `cfop`
--

DROP TABLE IF EXISTS `cfop`;
CREATE TABLE `cfop` (
  `cfop` varchar(6) NOT NULL,
  `nome` varchar(30) NOT NULL,
  `tipo` char(1) NOT NULL,
  `modelo` varchar(3) NOT NULL,
  `msg01` varchar(100) DEFAULT NULL,
  `msg02` varchar(100) DEFAULT NULL,
  `status` smallint(6) NOT NULL DEFAULT '0',
  PRIMARY KEY (`cfop`)
) ENGINE=InnoDB DEFAULT CHARSET=latin1;

--
-- Dumping data for table `cfop`
--

/*!40000 ALTER TABLE `cfop` DISABLE KEYS */;
/*!40000 ALTER TABLE `cfop` ENABLE KEYS */;


--
-- Definition of table `cheque`
--

DROP TABLE IF EXISTS `cheque`;
CREATE TABLE `cheque` (
  `idcheque` double NOT NULL AUTO_INCREMENT,
  `banco` int(11) NOT NULL,
  `idloja` int(11) NOT NULL,
  `idcliente` int(11) NOT NULL,
  `typeRecebimento` char(1) NOT NULL DEFAULT 'p' COMMENT 'p - proprio\nt - terceiro',
  `contaCorrente` varchar(12) NOT NULL,
  `serie` varchar(3) DEFAULT NULL,
  `agencia` varchar(12) NOT NULL,
  `typeCheque` char(1) NOT NULL DEFAULT 'v' COMMENT 'v - A vista\np - A prazo',
  `prazo` int(11) NOT NULL,
  `emissao` date NOT NULL,
  `vencimento` date NOT NULL,
  `cityBanco` varchar(50) DEFAULT NULL,
  `numberCheque` varchar(12) NOT NULL,
  `valueCheque` decimal(15,3) NOT NULL DEFAULT '0.000',
  `historico` varchar(100) DEFAULT NULL,
  `typeLancamento` char(2) NOT NULL,
  `pagamento` varchar(8) DEFAULT NULL,
  `observacao` varchar(100) DEFAULT NULL,
  `idUsuarioLiberacao` int(11) DEFAULT NULL,
  `motivoLiberacao` varchar(12) DEFAULT NULL,
  `cmc7` varchar(50) DEFAULT NULL,
  `idusuario` int(11) NOT NULL,
  `alteracao` date DEFAULT NULL,
  `reserva` double NOT NULL,
  `conferencia` varchar(1) NOT NULL DEFAULT 'n' COMMENT 'n = nao conferiu\ns = sim conferiu',
  `origem` char(1) NOT NULL COMMENT 'f - faturamento\nr - recebimento\nc - caixa',
  `cupom` double NOT NULL DEFAULT '0',
  `terminal` int(11) NOT NULL DEFAULT '0',
  `typeBaixa` char(2) DEFAULT NULL COMMENT '00 - conta corrente\n01 - caixa\n02 - cheque emitido\n',
  `caixa` int(11) DEFAULT NULL,
  `contaBaixa` int(11) DEFAULT NULL,
  `flagPagamento` char(1) NOT NULL DEFAULT 'n' COMMENT 'n -  não depositado a receber\ns - depositado recebido\na - cobrança Sem fundo\nu - depositado por custodia',
  `valorPago` decimal(15,3) NOT NULL DEFAULT '0.000',
  `motivo` varchar(4) DEFAULT NULL,
  `idFuncionario` int(11) NOT NULL,
  `finalizadoraCaixa` int(11) DEFAULT NULL,
  `chave_nota` double DEFAULT NULL,
  PRIMARY KEY (`idcheque`),
  KEY `fk_cheque_banco1` (`banco`),
  KEY `fk_cheque_loja1` (`idloja`),
  KEY `fk_cheque_cliente1` (`idcliente`),
  KEY `fk_cheque_typeLancamento1` (`typeLancamento`),
  KEY `fk_cheque_usuario1` (`idusuario`),
  KEY `fk_cheque_funcionario1` (`idFuncionario`),
  CONSTRAINT `fk_cheque_banco1` FOREIGN KEY (`banco`) REFERENCES `banco` (`idbanco`) ON DELETE NO ACTION ON UPDATE NO ACTION,
  CONSTRAINT `fk_cheque_cliente1` FOREIGN KEY (`idcliente`) REFERENCES `cliente` (`idcliente`) ON UPDATE NO ACTION,
  CONSTRAINT `fk_cheque_funcionario1` FOREIGN KEY (`idFuncionario`) REFERENCES `funcionario` (`idfuncionario`) ON DELETE NO ACTION ON UPDATE NO ACTION,
  CONSTRAINT `fk_cheque_loja1` FOREIGN KEY (`idloja`) REFERENCES `loja` (`idloja`) ON DELETE NO ACTION ON UPDATE NO ACTION,
  CONSTRAINT `fk_cheque_typeLancamento1` FOREIGN KEY (`typeLancamento`) REFERENCES `typelancamento` (`idtypeLancamento`) ON DELETE NO ACTION ON UPDATE NO ACTION,
  CONSTRAINT `fk_cheque_usuario1` FOREIGN KEY (`idusuario`) REFERENCES `usuario` (`idusuario`) ON DELETE NO ACTION ON UPDATE NO ACTION
) ENGINE=InnoDB DEFAULT CHARSET=latin1;

--
-- Dumping data for table `cheque`
--

/*!40000 ALTER TABLE `cheque` DISABLE KEYS */;
/*!40000 ALTER TABLE `cheque` ENABLE KEYS */;


--
-- Definition of table `civil`
--

DROP TABLE IF EXISTS `civil`;
CREATE TABLE `civil` (
  `idcivil` int(11) NOT NULL AUTO_INCREMENT,
  `descricao` varchar(45) DEFAULT NULL,
  PRIMARY KEY (`idcivil`)
) ENGINE=InnoDB DEFAULT CHARSET=latin1;

--
-- Dumping data for table `civil`
--

/*!40000 ALTER TABLE `civil` DISABLE KEYS */;
/*!40000 ALTER TABLE `civil` ENABLE KEYS */;


--
-- Definition of table `classmotivo`
--

DROP TABLE IF EXISTS `classmotivo`;
CREATE TABLE `classmotivo` (
  `idClassMotivo` varchar(4) NOT NULL,
  `descricao` varchar(300) NOT NULL,
  PRIMARY KEY (`idClassMotivo`)
) ENGINE=InnoDB DEFAULT CHARSET=latin1;

--
-- Dumping data for table `classmotivo`
--

/*!40000 ALTER TABLE `classmotivo` DISABLE KEYS */;
/*!40000 ALTER TABLE `classmotivo` ENABLE KEYS */;


--
-- Definition of table `cliente`
--

DROP TABLE IF EXISTS `cliente`;
CREATE TABLE `cliente` (
  `idcliente` int(11) NOT NULL AUTO_INCREMENT,
  `idloja` int(11) NOT NULL,
  `idtipoPessoa` int(11) NOT NULL,
  `idusuario` int(11) NOT NULL,
  `idatividade` int(11) NOT NULL,
  `observacao` varchar(100) DEFAULT NULL,
  `dataEmissao` date NOT NULL,
  `dataAlteracao` date NOT NULL,
  `idestado` int(11) NOT NULL,
  `uf` char(2) NOT NULL,
  `status` smallint(6) NOT NULL,
  `idspedMunicipio` int(10) unsigned NOT NULL,
  `idpais` int(11) NOT NULL DEFAULT '30',
  `liberacao` int(11) DEFAULT NULL,
  `idUsuarioAlt` int(11) DEFAULT NULL,
  PRIMARY KEY (`idcliente`,`idatividade`),
  KEY `fk_cliente_loja1` (`idloja`) USING BTREE,
  KEY `fk_cliente_tipoPessoa1` (`idtipoPessoa`),
  KEY `fk_cliente_usuario1` (`idusuario`),
  KEY `fk_cliente_estado1` (`idestado`,`uf`),
  KEY `fk_cliente_atividade1` (`idatividade`),
  KEY `fk_cliente_spedMunicipio1` (`idspedMunicipio`),
  KEY `fk_cliente_pais1` (`idpais`),
  CONSTRAINT `fk_cliente_atividade1` FOREIGN KEY (`idatividade`) REFERENCES `atividade` (`idatividade`) ON DELETE NO ACTION ON UPDATE NO ACTION,
  CONSTRAINT `fk_cliente_loja1` FOREIGN KEY (`idloja`) REFERENCES `loja` (`idloja`) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT `fk_cliente_pais1` FOREIGN KEY (`idpais`) REFERENCES `pais` (`idpais`) ON DELETE NO ACTION ON UPDATE NO ACTION,
  CONSTRAINT `fk_cliente_spedMunicipio1` FOREIGN KEY (`idspedMunicipio`) REFERENCES `spedmunicipio` (`idspedMunicipio`) ON DELETE NO ACTION ON UPDATE NO ACTION,
  CONSTRAINT `fk_cliente_tipoPessoa1` FOREIGN KEY (`idtipoPessoa`) REFERENCES `tipopessoa` (`idtipoPessoa`) ON DELETE NO ACTION ON UPDATE NO ACTION,
  CONSTRAINT `fk_cliente_usuario1` FOREIGN KEY (`idusuario`) REFERENCES `usuario` (`idusuario`) ON DELETE NO ACTION ON UPDATE NO ACTION
) ENGINE=InnoDB DEFAULT CHARSET=latin1;

--
-- Dumping data for table `cliente`
--

/*!40000 ALTER TABLE `cliente` DISABLE KEYS */;
/*!40000 ALTER TABLE `cliente` ENABLE KEYS */;


--
-- Definition of trigger `alter_exe_cliente`
--

DROP TRIGGER /*!50030 IF EXISTS */ `alter_exe_cliente`;

DELIMITER $$

CREATE DEFINER = `master`@`localhost` TRIGGER `alter_exe_cliente` BEFORE UPDATE ON `cliente` FOR EACH ROW begin
    select versaoBanco,versaoSystem,ip_mq from system into @a,@b,@c;

    if(new.idpais <> old.idpais)then

                call conector_exe_alt("MODULO [CLIENTE]", new.idUsuario, concat("INFORMACAO OLD.: " , old.idpais," INFORMACAO NEW.: ", new.idpais), @c, new.idCliente,  @b, "FIELD.: PAIS",new.idCliente);

                        else if(old.idspedMunicipio <> new.idspedMunicipio)then

                                        call conector_exe_alt("MODULO [CLIENTE]", new.idUsuario, concat("INFORMACAO OLD.: " , old.idspedMunicipio," INFORMACAO NEW.: ", new.idspedMunicipio), @c, new.idCliente,  @b, "FIELD COD_MUNICIPIO", null ,new.idCliente);

                end if;
    end if;
end $$

DELIMITER ;

--
-- Definition of table `clientecobranca`
--

DROP TABLE IF EXISTS `clientecobranca`;
CREATE TABLE `clientecobranca` (
  `idClienteCobranca` int(11) NOT NULL AUTO_INCREMENT,
  `idendereco` int(11) NOT NULL,
  `idcliente` int(11) NOT NULL,
  `sequencia` int(11) NOT NULL,
  `default1` smallint(6) NOT NULL DEFAULT '0',
  PRIMARY KEY (`idClienteCobranca`,`idendereco`,`idcliente`,`sequencia`),
  KEY `fk_clienteEntrega_endereco1` (`idendereco`,`idcliente`,`sequencia`),
  CONSTRAINT `fk_clienteEntrega_endereco10` FOREIGN KEY (`idendereco`, `idcliente`, `sequencia`) REFERENCES `endereco` (`idendereco`, `idcliente`, `sequencia`) ON DELETE CASCADE ON UPDATE CASCADE
) ENGINE=InnoDB DEFAULT CHARSET=latin1;

--
-- Dumping data for table `clientecobranca`
--

/*!40000 ALTER TABLE `clientecobranca` DISABLE KEYS */;
/*!40000 ALTER TABLE `clientecobranca` ENABLE KEYS */;


--
-- Definition of table `clienteentrega`
--

DROP TABLE IF EXISTS `clienteentrega`;
CREATE TABLE `clienteentrega` (
  `idClienteEntrega` int(11) NOT NULL AUTO_INCREMENT,
  `idendereco` int(11) NOT NULL,
  `idcliente` int(11) NOT NULL,
  `sequencia` int(11) NOT NULL,
  `default1` smallint(6) NOT NULL DEFAULT '0',
  PRIMARY KEY (`idClienteEntrega`,`idendereco`,`idcliente`,`sequencia`),
  KEY `fk_clienteEntrega_endereco1` (`idendereco`,`idcliente`,`sequencia`),
  CONSTRAINT `fk_clienteEntrega_endereco1` FOREIGN KEY (`idendereco`, `idcliente`, `sequencia`) REFERENCES `endereco` (`idendereco`, `idcliente`, `sequencia`) ON DELETE CASCADE ON UPDATE CASCADE
) ENGINE=InnoDB DEFAULT CHARSET=latin1;

--
-- Dumping data for table `clienteentrega`
--

/*!40000 ALTER TABLE `clienteentrega` DISABLE KEYS */;
/*!40000 ALTER TABLE `clienteentrega` ENABLE KEYS */;


--
-- Definition of table `clienteprofissional`
--

DROP TABLE IF EXISTS `clienteprofissional`;
CREATE TABLE `clienteprofissional` (
  `idClienteProfissional` int(11) NOT NULL AUTO_INCREMENT,
  `idcliente` int(11) NOT NULL,
  `idendereco` int(11) NOT NULL,
  `empresa` varchar(40) DEFAULT NULL,
  `salarioDeclarado` decimal(15,3) NOT NULL DEFAULT '0.000',
  `salarioComprovado` decimal(15,3) NOT NULL DEFAULT '0.000',
  `idprofissao` int(11) NOT NULL,
  `idEscolaridade` int(11) NOT NULL,
  `default1` smallint(6) NOT NULL DEFAULT '0',
  PRIMARY KEY (`idClienteProfissional`,`idcliente`),
  KEY `fk_idClienteProfissional_cliente1` (`idcliente`),
  KEY `fk_idClienteProfissional_profissao1` (`idprofissao`),
  KEY `fk_idClienteProfissional_escolaridade1` (`idEscolaridade`),
  CONSTRAINT `fk_idClienteProfissional_cliente1` FOREIGN KEY (`idcliente`) REFERENCES `cliente` (`idcliente`) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT `fk_idClienteProfissional_escolaridade1` FOREIGN KEY (`idEscolaridade`) REFERENCES `escolaridade` (`idEscolaridade`) ON DELETE NO ACTION ON UPDATE NO ACTION,
  CONSTRAINT `fk_idClienteProfissional_profissao1` FOREIGN KEY (`idprofissao`) REFERENCES `profissao` (`idprofissao`) ON DELETE NO ACTION ON UPDATE NO ACTION
) ENGINE=InnoDB DEFAULT CHARSET=latin1;

--
-- Dumping data for table `clienteprofissional`
--

/*!40000 ALTER TABLE `clienteprofissional` DISABLE KEYS */;
/*!40000 ALTER TABLE `clienteprofissional` ENABLE KEYS */;


--
-- Definition of table `clientereferencia`
--

DROP TABLE IF EXISTS `clientereferencia`;
CREATE TABLE `clientereferencia` (
  `idReferencia` int(11) NOT NULL AUTO_INCREMENT,
  `idcliente` int(11) NOT NULL,
  `idtypeReferencia` int(11) NOT NULL,
  `empresaContato` varchar(40) DEFAULT NULL,
  `contato` varchar(40) DEFAULT NULL,
  `ddd` char(4) DEFAULT NULL,
  `fone` char(8) DEFAULT NULL,
  `ramal` int(11) DEFAULT NULL,
  `data` date NOT NULL,
  `observacao` varchar(100) NOT NULL,
  PRIMARY KEY (`idReferencia`),
  KEY `fk_clienteReferencia_cliente1` (`idcliente`),
  KEY `fk_clienteReferencia_typeReferencia1` (`idtypeReferencia`),
  CONSTRAINT `fk_clienteReferencia_cliente1` FOREIGN KEY (`idcliente`) REFERENCES `cliente` (`idcliente`) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT `fk_clienteReferencia_typeReferencia1` FOREIGN KEY (`idtypeReferencia`) REFERENCES `typereferencia` (`idtypeReferencia`) ON DELETE NO ACTION ON UPDATE NO ACTION
) ENGINE=InnoDB DEFAULT CHARSET=latin1;

--
-- Dumping data for table `clientereferencia`
--

/*!40000 ALTER TABLE `clientereferencia` DISABLE KEYS */;
/*!40000 ALTER TABLE `clientereferencia` ENABLE KEYS */;


--
-- Definition of table `clienterisco`
--

DROP TABLE IF EXISTS `clienterisco`;
CREATE TABLE `clienterisco` (
  `idclienteRisco` int(11) NOT NULL AUTO_INCREMENT,
  `idcliente` int(11) NOT NULL,
  `cooperado` smallint(6) DEFAULT '0',
  `preferencial` smallint(6) DEFAULT '0',
  `limiteCheque` decimal(15,3) NOT NULL DEFAULT '0.000',
  `onlyHourCheque` smallint(6) NOT NULL DEFAULT '0',
  `convenio` int(11) DEFAULT NULL,
  `pagador` int(11) NOT NULL,
  `limiteEstouro` decimal(15,3) NOT NULL DEFAULT '0.000',
  `limiteConvenio` decimal(15,3) NOT NULL DEFAULT '0.000',
  `noteCobrancaConvenio` smallint(6) NOT NULL DEFAULT '0',
  `typePrazo` varchar(1) NOT NULL DEFAULT '0',
  `diaEncerramento` int(11) NOT NULL DEFAULT '0',
  `diaFechamento` int(11) NOT NULL DEFAULT '0',
  `prazoDias` int(11) NOT NULL DEFAULT '0',
  `motivo` varchar(4) DEFAULT NULL,
  `usuarioAceiteCheque` int(11) DEFAULT NULL,
  `dataAceiteCheque` datetime DEFAULT NULL,
  `usuarioAceiteConvenio` int(11) DEFAULT NULL,
  `dataAceiteConvenio` datetime DEFAULT NULL,
  PRIMARY KEY (`idclienteRisco`),
  KEY `fk_clienteRisco_cliente1` (`idcliente`),
  CONSTRAINT `fk_clienteRisco_cliente1` FOREIGN KEY (`idcliente`) REFERENCES `cliente` (`idcliente`) ON DELETE NO ACTION ON UPDATE NO ACTION
) ENGINE=InnoDB DEFAULT CHARSET=latin1;

--
-- Dumping data for table `clienterisco`
--

/*!40000 ALTER TABLE `clienterisco` DISABLE KEYS */;
/*!40000 ALTER TABLE `clienterisco` ENABLE KEYS */;


--
-- Definition of table `cnt`
--

DROP TABLE IF EXISTS `cnt`;
CREATE TABLE `cnt` (
  `idcnt` int(11) NOT NULL AUTO_INCREMENT,
  `descricao` varchar(10) NOT NULL,
  `idfuncionario` int(11) NOT NULL,
  PRIMARY KEY (`idcnt`),
  KEY `fk_cnt_funcionario1` (`idfuncionario`),
  CONSTRAINT `fk_cnt_funcionario1` FOREIGN KEY (`idfuncionario`) REFERENCES `funcionario` (`idfuncionario`) ON DELETE NO ACTION ON UPDATE NO ACTION
) ENGINE=InnoDB DEFAULT CHARSET=latin1;

--
-- Dumping data for table `cnt`
--

/*!40000 ALTER TABLE `cnt` DISABLE KEYS */;
/*!40000 ALTER TABLE `cnt` ENABLE KEYS */;


--
-- Definition of table `comissao`
--

DROP TABLE IF EXISTS `comissao`;
CREATE TABLE `comissao` (
  `idcomissao` double NOT NULL AUTO_INCREMENT,
  `idloja` int(11) NOT NULL,
  `idProduto` int(11) NOT NULL,
  `idfuncionario` int(11) NOT NULL,
  `setor` int(11) NOT NULL,
  `quantidade` decimal(15,3) NOT NULL,
  `priceVenda` decimal(15,3) NOT NULL,
  `priceCusto` decimal(15,3) NOT NULL,
  `priceOriginal` decimal(15,3) NOT NULL,
  `margem` decimal(15,3) NOT NULL,
  `desconto` decimal(15,3) NOT NULL DEFAULT '0.000',
  `typeComissao` int(11) NOT NULL,
  `indice` decimal(15,3) NOT NULL DEFAULT '0.000',
  `data` date NOT NULL,
  `finalizadora` int(11) DEFAULT NULL,
  `metodo` int(11) DEFAULT NULL,
  `documentoFiscal` double DEFAULT NULL,
  `serie` varchar(3) DEFAULT NULL,
  `documentoNaoFiscalReservado` double DEFAULT NULL,
  `hora` time NOT NULL,
  PRIMARY KEY (`idcomissao`,`idloja`,`idProduto`,`idfuncionario`),
  KEY `fk_comissao_loja1` (`idloja`),
  KEY `fk_comissao_produto1` (`idProduto`),
  KEY `fk_comissao_setor1` (`setor`),
  KEY `fk_comissao_typeComissao1` (`typeComissao`),
  KEY `fk_comissao_funcionario1` (`idfuncionario`),
  CONSTRAINT `fk_comissao_funcionario1` FOREIGN KEY (`idfuncionario`) REFERENCES `funcionario` (`idfuncionario`) ON DELETE NO ACTION ON UPDATE NO ACTION,
  CONSTRAINT `fk_comissao_loja1` FOREIGN KEY (`idloja`) REFERENCES `loja` (`idloja`) ON DELETE NO ACTION ON UPDATE NO ACTION,
  CONSTRAINT `fk_comissao_produto1` FOREIGN KEY (`idProduto`) REFERENCES `produto` (`idProduto`) ON DELETE NO ACTION ON UPDATE NO ACTION,
  CONSTRAINT `fk_comissao_setor1` FOREIGN KEY (`setor`) REFERENCES `setor` (`idsetor`) ON DELETE NO ACTION ON UPDATE NO ACTION,
  CONSTRAINT `fk_comissao_typeComissao1` FOREIGN KEY (`typeComissao`) REFERENCES `typecomissao` (`idtypeComissao`) ON DELETE NO ACTION ON UPDATE NO ACTION
) ENGINE=InnoDB DEFAULT CHARSET=latin1;

--
-- Dumping data for table `comissao`
--

/*!40000 ALTER TABLE `comissao` DISABLE KEYS */;
/*!40000 ALTER TABLE `comissao` ENABLE KEYS */;


--
-- Definition of table `comprador`
--

DROP TABLE IF EXISTS `comprador`;
CREATE TABLE `comprador` (
  `idcomprador` int(11) NOT NULL,
  `nome` varchar(45) DEFAULT NULL,
  PRIMARY KEY (`idcomprador`)
) ENGINE=InnoDB DEFAULT CHARSET=latin1;

--
-- Dumping data for table `comprador`
--

/*!40000 ALTER TABLE `comprador` DISABLE KEYS */;
/*!40000 ALTER TABLE `comprador` ENABLE KEYS */;


--
-- Definition of table `condicaopgto`
--

DROP TABLE IF EXISTS `condicaopgto`;
CREATE TABLE `condicaopgto` (
  `idcondicaoPgto` int(11) NOT NULL AUTO_INCREMENT,
  `idfinalizadora` int(11) NOT NULL,
  `descricao` varchar(30) NOT NULL,
  `diasVencimento` int(11) NOT NULL,
  `numeroParcelas` int(11) NOT NULL,
  `status` smallint(6) NOT NULL,
  `vezesIguais` smallint(6) NOT NULL,
  `totalPorcentagem` decimal(15,3) NOT NULL,
  PRIMARY KEY (`idcondicaoPgto`,`idfinalizadora`),
  KEY `fk_codicaoPgto_finalizadora1` (`idfinalizadora`),
  CONSTRAINT `fk_codicaoPgto_finalizadora1` FOREIGN KEY (`idfinalizadora`) REFERENCES `finalizadora` (`idfinalizadora`) ON DELETE NO ACTION ON UPDATE NO ACTION
) ENGINE=InnoDB DEFAULT CHARSET=latin1;

--
-- Dumping data for table `condicaopgto`
--

/*!40000 ALTER TABLE `condicaopgto` DISABLE KEYS */;
/*!40000 ALTER TABLE `condicaopgto` ENABLE KEYS */;


--
-- Definition of trigger `condicaoPgtoParcela_last_insert`
--

DROP TRIGGER /*!50030 IF EXISTS */ `condicaoPgtoParcela_last_insert`;

DELIMITER $$

CREATE DEFINER = `root`@`%` TRIGGER `condicaoPgtoParcela_last_insert` AFTER INSERT ON `condicaopgto` FOR EACH ROW begin

	declare v0 int;
  declare v1 int;
	declare valuePorcentagem numeric(15,5);

	set v0 = 1;
	set v1 = new.diasVencimento;

    set valuePorcentagem = round((new.totalPorcentagem/new.numeroParcelas),5);

    			  WHILE v0 <= new.numeroParcelas DO
                
                  insert into `conector`.`condicaoPgtoParcela` 
                                    (
                                        `idcondicaoPgto`,
                                        `idcondicaoPgtoParcela`,
                                        `idfinalizadora`,
                                        `dias`,
                                        `porcentagem`,
                                        `participaLivro`
                                    )values
                                    (
                                        new.`idcondicaoPgto`,
                                        v0,
                                        new.`idfinalizadora`,
                                        v1,
                                        valuePorcentagem,
                                        true
                                    );
		            SET v0 = v0 + 1;
		            SET v1 = v1 + new.diasVencimento;
		  END WHILE;
end $$

DELIMITER ;

--
-- Definition of trigger `condicaoPgtoParcela_last_update`
--

DROP TRIGGER /*!50030 IF EXISTS */ `condicaoPgtoParcela_last_update`;

DELIMITER $$

CREATE DEFINER = `root`@`%` TRIGGER `condicaoPgtoParcela_last_update` AFTER UPDATE ON `condicaopgto` FOR EACH ROW begin

	declare v0 int;
  declare v1 int;
  declare oldParcelamento int;
	declare valuePorcentagem numeric(15,5);

	set v0 = 1;
	set v1 = new.diasVencimento;
  set oldParcelamento = (select count(idcondicaoPgtoParcela) from condicaoPgtoParcela where idcondicaoPgto=new.idcondicaoPgto);

    set valuePorcentagem = round((new.totalPorcentagem/new.numeroParcelas),5);
    

if(new.numeroParcelas != oldParcelamento)then
    delete from condicaoPgtoParcela where idcondicaoPgto=new.idcondicaoPgto;
    			  WHILE v0 <= new.numeroParcelas DO

                  insert into `conector`.`condicaoPgtoParcela`
                                    (
                                        `idcondicaoPgto`,
                                        `idcondicaoPgtoParcela`,
                                        `idfinalizadora`,
                                        `dias`,
                                        `porcentagem`,
                                        `participaLivro`
                                    )values
                                    (
                                        new.`idcondicaoPgto`,
                                        v0,
                                        new.`idfinalizadora`,
                                        v1,
                                        valuePorcentagem,
                                        true
                                    );
		            SET v0 = v0 + 1;
		            SET v1 = v1 + new.diasVencimento;
		  END WHILE;
          else
            if(valuePorcentagem > 0)then
                update condicaoPgtoParcela set porcentagem=valuePorcentagem where idcondicaoPgto=new.idcondicaoPgto;
            end if;
end if;
end $$

DELIMITER ;

--
-- Definition of table `condicaopgtoparcela`
--

DROP TABLE IF EXISTS `condicaopgtoparcela`;
CREATE TABLE `condicaopgtoparcela` (
  `idcondicaoPgto` int(11) NOT NULL,
  `idcondicaoPgtoParcela` int(11) NOT NULL,
  `idfinalizadora` int(11) NOT NULL,
  `dias` int(10) unsigned NOT NULL,
  `porcentagem` decimal(15,5) NOT NULL,
  `participaLivro` smallint(6) NOT NULL,
  PRIMARY KEY (`idcondicaoPgto`,`idcondicaoPgtoParcela`,`idfinalizadora`),
  KEY `fk_condicaoPgtoParcela_condicaoPgto1` (`idcondicaoPgto`,`idfinalizadora`),
  CONSTRAINT `fk_condicaoPgtoParcela_condicaoPgto1` FOREIGN KEY (`idcondicaoPgto`, `idfinalizadora`) REFERENCES `condicaopgto` (`idcondicaoPgto`, `idfinalizadora`) ON DELETE CASCADE ON UPDATE NO ACTION
) ENGINE=InnoDB DEFAULT CHARSET=latin1;

--
-- Dumping data for table `condicaopgtoparcela`
--

/*!40000 ALTER TABLE `condicaopgtoparcela` DISABLE KEYS */;
/*!40000 ALTER TABLE `condicaopgtoparcela` ENABLE KEYS */;


--
-- Definition of table `conectcard`
--

DROP TABLE IF EXISTS `conectcard`;
CREATE TABLE `conectcard` (
  `idconectCard` int(11) NOT NULL,
  `descricao` varchar(30) NOT NULL,
  `forceConect` char(1) NOT NULL DEFAULT 'n',
  PRIMARY KEY (`idconectCard`)
) ENGINE=InnoDB DEFAULT CHARSET=latin1;

--
-- Dumping data for table `conectcard`
--

/*!40000 ALTER TABLE `conectcard` DISABLE KEYS */;
/*!40000 ALTER TABLE `conectcard` ENABLE KEYS */;


--
-- Definition of table `config_hardware_pdv`
--

DROP TABLE IF EXISTS `config_hardware_pdv`;
CREATE TABLE `config_hardware_pdv` (
  `idterminal` int(11) NOT NULL,
  `hardware` int(11) NOT NULL,
  `portaSerialUsb` varchar(15) DEFAULT NULL,
  `velocidade` int(11) DEFAULT NULL,
  `tamanho` int(11) DEFAULT NULL,
  `paridade` char(1) DEFAULT NULL,
  `bitsParada` int(11) DEFAULT NULL,
  `pinpadCompartilhado` smallint(6) DEFAULT NULL,
  `msgPinPad` varchar(16) DEFAULT NULL,
  `ecfTruncaArr` smallint(6) DEFAULT NULL,
  `teclado_sleep` int(11) DEFAULT NULL,
  `tecladoVisor` smallint(6) DEFAULT NULL,
  `scannerBalanca` smallint(6) DEFAULT NULL,
  PRIMARY KEY (`idterminal`,`hardware`),
  KEY `fk_config_hardware_pdv_hardware1` (`hardware`),
  CONSTRAINT `fk_config_hardware_pdv_hardware1` FOREIGN KEY (`hardware`) REFERENCES `hardware` (`idhardware`) ON DELETE NO ACTION ON UPDATE NO ACTION,
  CONSTRAINT `fk_config_hardware_pdv_terminal1` FOREIGN KEY (`idterminal`) REFERENCES `terminal` (`idterminal`) ON DELETE NO ACTION ON UPDATE NO ACTION
) ENGINE=InnoDB DEFAULT CHARSET=latin1;

--
-- Dumping data for table `config_hardware_pdv`
--

/*!40000 ALTER TABLE `config_hardware_pdv` DISABLE KEYS */;
/*!40000 ALTER TABLE `config_hardware_pdv` ENABLE KEYS */;


--
-- Definition of table `configuracao`
--

DROP TABLE IF EXISTS `configuracao`;
CREATE TABLE `configuracao` (
  `idconfiguracao` int(11) NOT NULL AUTO_INCREMENT,
  `idusuario` int(11) NOT NULL,
  `administradoraCartao` char(1) NOT NULL DEFAULT 'n',
  `banco` char(1) NOT NULL DEFAULT 'n',
  `caixa` char(1) NOT NULL DEFAULT 'n',
  `cargo` char(1) NOT NULL DEFAULT 'n',
  `cep` char(1) NOT NULL DEFAULT 'n',
  `convenios` char(1) NOT NULL DEFAULT 'n',
  `codicaoPgto` char(1) NOT NULL DEFAULT 'n',
  `contaCorrente` char(1) NOT NULL DEFAULT 'n',
  `cliente` char(1) NOT NULL DEFAULT 'n',
  `escolaridade` char(1) NOT NULL DEFAULT 'n',
  `feriados` char(1) NOT NULL DEFAULT 'n',
  `finalizadoras` char(1) NOT NULL DEFAULT 'n',
  `fornecedor` char(1) NOT NULL DEFAULT 'n',
  `funcionario` char(1) NOT NULL DEFAULT 'n',
  `loja` char(1) NOT NULL DEFAULT 'n',
  `metodos` char(1) NOT NULL DEFAULT 'n',
  `profissao` char(1) NOT NULL DEFAULT 'n',
  `representante` char(1) NOT NULL DEFAULT 'n',
  `telefone` char(1) NOT NULL DEFAULT 'n',
  `terminal` char(1) NOT NULL DEFAULT 'n',
  `transportadora` char(1) NOT NULL DEFAULT 'n',
  `usuario` char(1) NOT NULL DEFAULT 'n',
  `veiculo` char(1) NOT NULL DEFAULT 'n',
  `produto` char(1) NOT NULL DEFAULT 'n',
  `setor` char(1) NOT NULL DEFAULT 'n',
  `grupo` char(1) NOT NULL DEFAULT 'n',
  `categoria` char(1) NOT NULL DEFAULT 'n',
  `compra` char(1) NOT NULL DEFAULT 'n',
  `maximo` char(1) NOT NULL DEFAULT 'n',
  `entrada` char(1) NOT NULL DEFAULT 'n',
  `precificacao` char(1) NOT NULL DEFAULT 'n',
  `transferencia` char(1) NOT NULL DEFAULT 'n',
  `movimentacaoEstoque` char(1) NOT NULL DEFAULT 'n',
  `saldoEstoque` char(1) NOT NULL DEFAULT 'n',
  `zeraEstoque` char(1) NOT NULL DEFAULT 'n',
  `operacaoEntrada` char(1) NOT NULL DEFAULT 'n',
  `tipoProduto` char(1) NOT NULL DEFAULT 'n',
  `trocaProduto` char(1) NOT NULL DEFAULT 'n',
  `contasReceber` char(1) NOT NULL DEFAULT 'n',
  `cartaoCredito` char(1) NOT NULL DEFAULT 'n',
  `cheque` char(1) NOT NULL DEFAULT 'n',
  `crediario` char(1) NOT NULL DEFAULT 'n',
  `devolucao` char(1) NOT NULL DEFAULT 'n',
  `caixaCadastro` char(1) NOT NULL DEFAULT 'n',
  `sitegra` char(1) NOT NULL DEFAULT 'n',
  `notaFiscal` char(1) NOT NULL DEFAULT 'n',
  `sped` char(1) NOT NULL DEFAULT 'n',
  `apuracaoImposto` char(1) NOT NULL DEFAULT 'n',
  `mapaResumo` char(1) NOT NULL DEFAULT 'n',
  `cfop` char(1) NOT NULL DEFAULT 'n',
  `aliquotaFiscal` char(1) NOT NULL DEFAULT 'n',
  `operacaoFaturamento` char(1) NOT NULL DEFAULT 'n',
  `controleReservas` char(1) NOT NULL DEFAULT 'n',
  `analiseCredito` char(1) NOT NULL DEFAULT 'n',
  `pdvSingle` char(1) NOT NULL DEFAULT 's',
  `contasPagar` char(1) NOT NULL DEFAULT 'n',
  `trocaSenha` char(1) NOT NULL DEFAULT 'n',
  `liberacao` char(1) NOT NULL DEFAULT 'n',
  `cargas` char(1) NOT NULL DEFAULT 'n',
  `interfacePdv` char(1) NOT NULL DEFAULT 'n',
  `dre` char(1) NOT NULL DEFAULT 'n',
  `fluxoCaixa` char(1) NOT NULL DEFAULT 'n',
  `flashReserva` char(1) NOT NULL DEFAULT 'n',
  `flashVenda` char(1) NOT NULL DEFAULT 'n',
  `relatorios` char(1) NOT NULL DEFAULT 'n',
  `chequeDevolvido` char(1) DEFAULT 's',
  `convenio` char(1) NOT NULL DEFAULT 'n',
  `log` char(1) NOT NULL DEFAULT 'n',
  `inclusao` date NOT NULL,
  `alteracao` date NOT NULL,
  `menuCadastro` smallint(6) NOT NULL DEFAULT '2',
  `menuProduto` smallint(6) NOT NULL DEFAULT '2',
  `menuFinanceiro` smallint(6) NOT NULL DEFAULT '2',
  `menuFiscal` smallint(6) NOT NULL DEFAULT '2',
  `menuFaturamento` smallint(6) NOT NULL DEFAULT '2',
  `menuPagar` smallint(6) NOT NULL DEFAULT '2',
  `menuUtilitario` smallint(6) NOT NULL DEFAULT '2',
  `menuContabil` smallint(6) NOT NULL DEFAULT '2',
  `menuVenda` smallint(6) NOT NULL DEFAULT '2',
  `menuRelatorio` smallint(6) NOT NULL DEFAULT '2',
  `inventario` char(1) NOT NULL DEFAULT 'n',
  `estoqueRede` char(1) NOT NULL DEFAULT 'n',
  `saldoCrediario` char(1) NOT NULL DEFAULT 'n',
  `CrediarioContrato` char(1) NOT NULL DEFAULT 'n',
  `CrediarioResumoContabil` char(1) NOT NULL DEFAULT 'n',
  `CrediarioInadimplencia` char(1) NOT NULL DEFAULT 'n',
  `CrediarioConfiguracao` char(1) NOT NULL DEFAULT 'n',
  `menuBoletos` smallint(6) NOT NULL DEFAULT '1',
  `tableFiscal` char(1) NOT NULL DEFAULT 'n',
  `precoIndividual` char(1) DEFAULT 'n',
  PRIMARY KEY (`idconfiguracao`,`idusuario`),
  KEY `fk_configuracao_usuario1` (`idusuario`),
  CONSTRAINT `fk_configuracao_usuario1` FOREIGN KEY (`idusuario`) REFERENCES `usuario` (`idusuario`) ON DELETE CASCADE ON UPDATE CASCADE
) ENGINE=InnoDB DEFAULT CHARSET=latin1;

--
-- Dumping data for table `configuracao`
--

/*!40000 ALTER TABLE `configuracao` DISABLE KEYS */;
/*!40000 ALTER TABLE `configuracao` ENABLE KEYS */;


--
-- Definition of table `configuracaonotafiscal`
--

DROP TABLE IF EXISTS `configuracaonotafiscal`;
CREATE TABLE `configuracaonotafiscal` (
  `idconfiguracaoNotaFiscal` int(11) NOT NULL,
  `idloja` int(11) NOT NULL,
  `razaoSocialCabecalhoX` smallint(6) DEFAULT NULL,
  `razaoSocialCabecalhoY` smallint(6) DEFAULT NULL,
  `enderecoCabecalhoX` smallint(6) DEFAULT NULL,
  `enderecoCabecalhoY` smallint(6) DEFAULT NULL,
  `bairroCabecalhoX` smallint(6) DEFAULT NULL,
  `bairroCabecalhoY` smallint(6) DEFAULT NULL,
  `cidadeCabecalhoX` smallint(6) DEFAULT NULL,
  `cidadeCabecalhoY` smallint(6) DEFAULT NULL,
  `cepCabecalhoX` smallint(6) DEFAULT NULL,
  `cepCabecalhoY` smallint(6) DEFAULT NULL,
  `estadoCabecalhoX` smallint(6) DEFAULT NULL,
  `estadoCabecalhoY` smallint(6) DEFAULT NULL,
  `telefoneCabecalhoX` smallint(6) DEFAULT NULL,
  `telefoneCabecalhoY` smallint(6) DEFAULT NULL,
  `cnpjCabecalhoX` smallint(6) DEFAULT NULL,
  `cnpjCabecalhoY` smallint(6) DEFAULT NULL,
  `inscricaoEstadualCabecalhoX` smallint(6) DEFAULT NULL,
  `inscricaoEstadualCabecalhoY` smallint(6) DEFAULT NULL,
  `lojaCabecalhoX` smallint(6) DEFAULT NULL,
  `lojaCabecalhoY` smallint(6) DEFAULT NULL,
  `ieStTributarioCabecalhoX` smallint(6) DEFAULT NULL,
  `ieStTributarioCabecalhoY` smallint(6) DEFAULT NULL,
  `inscricaoMunicipalCabecalhoX` smallint(6) DEFAULT NULL,
  `inscricaoMunicipalCabecalhoY` smallint(6) DEFAULT NULL,
  `razaoSocialDestRemX` smallint(6) DEFAULT NULL,
  `razaoSocialDestRemY` smallint(6) DEFAULT NULL,
  `cnpjCpfDestRemX` smallint(6) DEFAULT NULL,
  `cnpjCpfDestRemY` smallint(6) DEFAULT NULL,
  `inscricaoEstadualDestRemX` smallint(6) DEFAULT NULL,
  `inscricaoEstadualDestRemY` smallint(6) DEFAULT NULL,
  `enderecoDestRemX` smallint(6) DEFAULT NULL,
  `enderecoDestRemY` smallint(6) DEFAULT NULL,
  `bairroDestRemX` smallint(6) DEFAULT NULL,
  `bairroDestRemY` smallint(6) DEFAULT NULL,
  `cepDestRemX` smallint(6) DEFAULT NULL,
  `cepDestRemY` smallint(6) DEFAULT NULL,
  `cidadeDestRemX` smallint(6) DEFAULT NULL,
  `cidadeDestRemY` smallint(6) DEFAULT NULL,
  `telefoneDestRemX` smallint(6) DEFAULT NULL,
  `telefoneDestRemY` smallint(6) DEFAULT NULL,
  `estadoDestRemX` smallint(6) DEFAULT NULL,
  `estadoDestRemY` smallint(6) DEFAULT NULL,
  `enderecoCobrancaDestRemX` smallint(6) DEFAULT NULL,
  `enderecoCobrancaDestRemY` smallint(6) DEFAULT NULL,
  `pracaPagamentoDestRemX` smallint(6) DEFAULT NULL,
  `pracaPagamentoDestRemY` smallint(6) DEFAULT NULL,
  `cepCobrancaDestRemX` smallint(6) DEFAULT NULL,
  `cepCobrancaDestRemY` smallint(6) DEFAULT NULL,
  `codigoClienteDestRemX` smallint(6) DEFAULT NULL,
  `codigoClienteDestRemY` smallint(6) DEFAULT NULL,
  `fantasiaEntregaDestRemX` smallint(6) DEFAULT NULL,
  `fantasiaEntregaDestRemY` smallint(6) DEFAULT NULL,
  `enderecoEntregaDestRemX` smallint(6) DEFAULT NULL,
  `enderecoEntregaDestRemY` smallint(6) DEFAULT NULL,
  `bairroEntregaDestRemX` smallint(6) DEFAULT NULL,
  `bairroEntregaDestRemY` smallint(6) DEFAULT NULL,
  `complementoEntregaDestRemX` smallint(6) DEFAULT NULL,
  `complementoEntregaDestRemY` smallint(6) DEFAULT NULL,
  `cepEntregaDestRemX` smallint(6) DEFAULT NULL,
  `cepEntregaDestRemY` smallint(6) DEFAULT NULL,
  `cidadeEntregaDestRemX` smallint(6) DEFAULT NULL,
  `cidadeEntregaDestRemY` smallint(6) DEFAULT NULL,
  `entradaEmissaoX` smallint(6) DEFAULT NULL,
  `entradaEmissaoY` smallint(6) DEFAULT NULL,
  `saidaEmissaoX` smallint(6) DEFAULT NULL,
  `saidaEmissaoY` smallint(6) DEFAULT NULL,
  `numeroNotaEmissaoX` smallint(6) DEFAULT NULL,
  `numeroNotaEmissaoY` smallint(6) DEFAULT NULL,
  `codigoCfopEmissaoX` smallint(6) DEFAULT NULL,
  `codigoCfopEmissaoY` smallint(6) DEFAULT NULL,
  `descricaoCfopEmissaoX` smallint(6) DEFAULT NULL,
  `descricaoCfopEmissaoY` smallint(6) DEFAULT NULL,
  `dataEmissaoEmissaoX` smallint(6) DEFAULT NULL,
  `dataEmissaoEmissaoY` smallint(6) DEFAULT NULL,
  `dataSaidaEmissaoX` smallint(6) DEFAULT NULL,
  `dataSaidaEmissaoY` smallint(6) DEFAULT NULL,
  `horaSaidaEmissaoX` smallint(6) DEFAULT NULL,
  `horaSaidaEmissaoY` smallint(6) DEFAULT NULL,
  `paginaEmissaoX` smallint(6) DEFAULT NULL,
  `paginaEmissaoY` smallint(6) DEFAULT NULL,
  `fatura1FaturamentoX` smallint(6) DEFAULT NULL,
  `fatura1FaturamentoY` smallint(6) DEFAULT NULL,
  `fatura2FaturamentoX` smallint(6) DEFAULT NULL,
  `fatura2FaturamentoY` smallint(6) DEFAULT NULL,
  `fatura3FaturamentoX` smallint(6) DEFAULT NULL,
  `fatura3FaturamentoY` smallint(6) DEFAULT NULL,
  `fatura4FaturamentoX` smallint(6) DEFAULT NULL,
  `fatura4FaturamentoY` smallint(6) DEFAULT NULL,
  `fatura5FaturamentoX` smallint(6) DEFAULT NULL,
  `fatura5FaturamentoY` smallint(6) DEFAULT NULL,
  `fatura6FaturamentoX` smallint(6) DEFAULT NULL,
  `fatura6FaturamentoY` smallint(6) DEFAULT NULL,
  `fatura7FaturamentoX` smallint(6) DEFAULT NULL,
  `fatura7FaturamentoY` smallint(6) DEFAULT NULL,
  `fatura8FaturamentoX` smallint(6) DEFAULT NULL,
  `fatura8FaturamentoY` smallint(6) DEFAULT NULL,
  `fatura9FaturamentoX` smallint(6) DEFAULT NULL,
  `fatura9FaturamentoY` smallint(6) DEFAULT NULL,
  `fatura10FaturamentoX` smallint(6) DEFAULT NULL,
  `fatura10FaturamentoY` smallint(6) DEFAULT NULL,
  `fatura11FaturamentoX` smallint(6) DEFAULT NULL,
  `fatura11FaturamentoY` smallint(6) DEFAULT NULL,
  `fatura12FaturamentoX` smallint(6) DEFAULT NULL,
  `fatura12FaturamentoY` smallint(6) DEFAULT NULL,
  `extenso1FaturamentoX` smallint(6) DEFAULT NULL,
  `extenso1FaturamentoY` smallint(6) DEFAULT NULL,
  `data1FaturamentoX` smallint(6) DEFAULT NULL,
  `data1FaturamentoY` smallint(6) DEFAULT NULL,
  `data2FaturamentoX` smallint(6) DEFAULT NULL,
  `data2FaturamentoY` smallint(6) DEFAULT NULL,
  `data3FaturamentoX` smallint(6) DEFAULT NULL,
  `data3FaturamentoY` smallint(6) DEFAULT NULL,
  `data4FaturamentoX` smallint(6) DEFAULT NULL,
  `data4FaturamentoY` smallint(6) DEFAULT NULL,
  `data5FaturamentoX` smallint(6) DEFAULT NULL,
  `data5FaturamentoY` smallint(6) DEFAULT NULL,
  `data6FaturamentoX` smallint(6) DEFAULT NULL,
  `data6FaturamentoY` smallint(6) DEFAULT NULL,
  `data7FaturamentoX` smallint(6) DEFAULT NULL,
  `data7FaturamentoY` smallint(6) DEFAULT NULL,
  `data8FaturamentoX` smallint(6) DEFAULT NULL,
  `data8FaturamentoY` smallint(6) DEFAULT NULL,
  `data9FaturamentoX` smallint(6) DEFAULT NULL,
  `data9FaturamentoY` smallint(6) DEFAULT NULL,
  `data10FaturamentoX` smallint(6) DEFAULT NULL,
  `data10FaturamentoY` smallint(6) DEFAULT NULL,
  `data11FaturamentoX` smallint(6) DEFAULT NULL,
  `data11FaturamentoY` smallint(6) DEFAULT NULL,
  `data12FaturamentoX` smallint(6) DEFAULT NULL,
  `data12FaturamentoY` smallint(6) DEFAULT NULL,
  `extenso2FaturamentoX` smallint(6) DEFAULT NULL,
  `extenso2FaturamentoY` smallint(6) DEFAULT NULL,
  `valor1FaturamentoX` smallint(6) DEFAULT NULL,
  `valor1FaturamentoY` smallint(6) DEFAULT NULL,
  `valor2FaturamentoX` smallint(6) DEFAULT NULL,
  `valor2FaturamentoY` smallint(6) DEFAULT NULL,
  `valor3FaturamentoX` smallint(6) DEFAULT NULL,
  `valor3FaturamentoY` smallint(6) DEFAULT NULL,
  `valor4FaturamentoX` smallint(6) DEFAULT NULL,
  `valor4FaturamentoY` smallint(6) DEFAULT NULL,
  `valor5FaturamentoX` smallint(6) DEFAULT NULL,
  `valor5FaturamentoY` smallint(6) DEFAULT NULL,
  `valor6FaturamentoX` smallint(6) DEFAULT NULL,
  `valor6FaturamentoY` smallint(6) DEFAULT NULL,
  `valor7FaturamentoX` smallint(6) DEFAULT NULL,
  `valor7FaturamentoY` smallint(6) DEFAULT NULL,
  `valor8FaturamentoX` smallint(6) DEFAULT NULL,
  `valor8FaturamentoY` smallint(6) DEFAULT NULL,
  `valor9FaturamentoX` smallint(6) DEFAULT NULL,
  `valor9FaturamentoY` smallint(6) DEFAULT NULL,
  `valor10FaturamentoX` smallint(6) DEFAULT NULL,
  `valor10FaturamentoY` smallint(6) DEFAULT NULL,
  `valo11FaturamentoX` smallint(6) DEFAULT NULL,
  `valo11FaturamentoY` smallint(6) DEFAULT NULL,
  `valo12FaturamentoX` smallint(6) DEFAULT NULL,
  `valo12FaturamentoY` smallint(6) DEFAULT NULL,
  `emissaoFaturaFaturamentoX` smallint(6) DEFAULT NULL,
  `emissaoFaturaFaturamentoY` smallint(6) DEFAULT NULL,
  `codigoProdutoItensX` smallint(6) DEFAULT NULL,
  `codigoProdutoItensY` smallint(6) DEFAULT NULL,
  `descricaoProdutoItensX` smallint(6) DEFAULT NULL,
  `descricaoProdutoItensY` smallint(6) DEFAULT NULL,
  `tamanhoProdutoItensX` smallint(6) DEFAULT NULL,
  `tamanhoProdutoItensY` smallint(6) DEFAULT NULL,
  `stItensX` smallint(6) DEFAULT NULL,
  `stItensY` smallint(6) DEFAULT NULL,
  `classificacaoFiscalItensX` smallint(6) DEFAULT NULL,
  `classificacaoFiscalItensY` smallint(6) DEFAULT NULL,
  `embalagemItensX` smallint(6) DEFAULT NULL,
  `embalagemItensY` smallint(6) DEFAULT NULL,
  `unidadesItensX` smallint(6) DEFAULT NULL,
  `unidadesItensY` smallint(6) DEFAULT NULL,
  `quantidadeItensX` smallint(6) DEFAULT NULL,
  `quantidadeItensY` smallint(6) DEFAULT NULL,
  `valorUnitarioItensX` smallint(6) DEFAULT NULL,
  `valorUnitarioItensY` smallint(6) DEFAULT NULL,
  `valorTotalItensX` smallint(6) DEFAULT NULL,
  `valorTotalItensY` smallint(6) DEFAULT NULL,
  `aliquotaIcmsItensX` smallint(6) DEFAULT NULL,
  `aliquotaIcmsItensY` smallint(6) DEFAULT NULL,
  `aliquotaIpiItensX` smallint(6) DEFAULT NULL,
  `aliquotaIpiItensY` smallint(6) DEFAULT NULL,
  `valorIpiItensX` smallint(6) DEFAULT NULL,
  `valorIpiItensY` smallint(6) DEFAULT NULL,
  `especificacaoTecnicaItensX` smallint(6) DEFAULT NULL,
  `especificacaoTecnicaItensY` smallint(6) DEFAULT NULL,
  `descontoItensX` smallint(6) DEFAULT NULL,
  `descontoItensY` smallint(6) DEFAULT NULL,
  `valorLiquidoItensX` smallint(6) DEFAULT NULL,
  `valorLiquidoItensY` smallint(6) DEFAULT NULL,
  `referenciaFornecedorItensX` smallint(6) DEFAULT NULL,
  `referenciaFornecedorItensY` smallint(6) DEFAULT NULL,
  `cfopItensX` smallint(6) DEFAULT NULL,
  `cfopItensY` smallint(6) DEFAULT NULL,
  `pesoItensX` smallint(6) DEFAULT NULL,
  `pesoItensY` smallint(6) DEFAULT NULL,
  `mipItensX` smallint(6) DEFAULT NULL,
  `mipItensY` smallint(6) DEFAULT NULL,
  `numeroItensItens` smallint(6) DEFAULT NULL,
  `servicosItensX` smallint(6) DEFAULT NULL,
  `servicosItensY` smallint(6) DEFAULT NULL,
  `valorServicosItensX` smallint(6) DEFAULT NULL,
  `valorServicosItensY` smallint(6) DEFAULT NULL,
  `utilizaPulaLinhaAdicional` smallint(6) DEFAULT NULL,
  `complementoItensX` smallint(6) DEFAULT NULL,
  `complementoItensY` smallint(6) DEFAULT NULL,
  `tituloAdicional1ItensX` smallint(6) DEFAULT NULL,
  `tituloAdicional1ItensY` smallint(6) DEFAULT NULL,
  `valorTituloAdicional1ItensX` smallint(6) DEFAULT NULL,
  `valorTituloAdicional1ItensY` smallint(6) DEFAULT NULL,
  `tituloAdicional2ItensX` smallint(6) DEFAULT NULL,
  `tituloAdicional2ItensY` smallint(6) DEFAULT NULL,
  `valorTituloAdicional2ItensX` smallint(6) DEFAULT NULL,
  `valorTituloAdicional2ItensY` smallint(6) DEFAULT NULL,
  `estadoProdutoItensX` smallint(6) DEFAULT NULL,
  `estadoProdutoItensY` smallint(6) DEFAULT NULL,
  `garantia1ItensX` smallint(6) DEFAULT NULL,
  `garantia1ItensY` smallint(6) DEFAULT NULL,
  `garantia2ItensX` smallint(6) DEFAULT NULL,
  `garantia2ItensY` smallint(6) DEFAULT NULL,
  `baseIcmsCalculosDiversosX` smallint(6) DEFAULT NULL,
  `baseIcmsCalculosDiversosY` smallint(6) DEFAULT NULL,
  `valorIcmsCalculosDiversosX` smallint(6) DEFAULT NULL,
  `valorIcmsCalculosDiversosY` smallint(6) DEFAULT NULL,
  `baseIcmsStCalculosDiversosX` smallint(6) DEFAULT NULL,
  `baseIcmsStCalculosDiversosY` smallint(6) DEFAULT NULL,
  `valorIcmsStCalculosDiversosX` smallint(6) DEFAULT NULL,
  `valorIcmsStCalculosDiversosY` smallint(6) DEFAULT NULL,
  `valorProdutosFinanceiroCalculosDiversosX` smallint(6) DEFAULT NULL,
  `valorProdutosFinanceiroCalculosDiversosY` smallint(6) DEFAULT NULL,
  `valorFreteCalculosDiversosX` smallint(6) DEFAULT NULL,
  `valorFreteCalculosDiversosY` smallint(6) DEFAULT NULL,
  `valorSeguroCalculosDiversosX` smallint(6) DEFAULT NULL,
  `valorSeguroCalculosDiversosY` smallint(6) DEFAULT NULL,
  `valorDespesasCalculosDiversosX` smallint(6) DEFAULT NULL,
  `valorDespesasCalculosDiversosY` smallint(6) DEFAULT NULL,
  `valorIpiCalculosDiversosX` smallint(6) DEFAULT NULL,
  `valorIpiCalculosDiversosY` smallint(6) DEFAULT NULL,
  `valorProdutosCabecalhoCalculosDiversosX` smallint(6) DEFAULT NULL,
  `valorProdutosCabecalhoCalculosDiversosY` smallint(6) DEFAULT NULL,
  `valorTotalNotaCalculosDiversosX` smallint(6) DEFAULT NULL,
  `valorTotalNotaCalculosDiversosY` smallint(6) DEFAULT NULL,
  `acrescimosDiversosX` smallint(6) DEFAULT NULL,
  `acrescimosDiversosY` smallint(6) DEFAULT NULL,
  `descontoDiversosX` smallint(6) DEFAULT NULL,
  `descontoDiversosY` smallint(6) DEFAULT NULL,
  `1linhaServicosDiversosX` smallint(6) DEFAULT NULL,
  `1linhaServicosDiversosY` smallint(6) DEFAULT NULL,
  `2linhaServicosDiversosX` smallint(6) DEFAULT NULL,
  `2linhaServicosDiversosY` smallint(6) DEFAULT NULL,
  `aliquotaIssDiversosX` smallint(6) DEFAULT NULL,
  `aliquotaIssDiversosY` smallint(6) DEFAULT NULL,
  `inscricaoMunicipalDiversosX` smallint(6) DEFAULT NULL,
  `inscricaoMunicipalDiversosY` smallint(6) DEFAULT NULL,
  `valorIssDiversosX` smallint(6) DEFAULT NULL,
  `valorIssDiversosY` smallint(6) DEFAULT NULL,
  `totalServicosDiversosX` smallint(6) DEFAULT NULL,
  `totalServicosDiversosy` smallint(6) DEFAULT NULL,
  `funruralDiversosX` smallint(6) DEFAULT NULL,
  `funruralDiversosY` smallint(6) DEFAULT NULL,
  `impostoRendaDiversosX` smallint(6) DEFAULT NULL,
  `impostoRendaDiversosY` smallint(6) DEFAULT NULL,
  `nomeRazaoTransportadorX` smallint(6) DEFAULT NULL,
  `nomeRazaoTransportadorY` smallint(6) DEFAULT NULL,
  `tipoFreteTransportadorX` smallint(6) DEFAULT NULL,
  `tipoFreteTransportadorY` smallint(6) DEFAULT NULL,
  `placaVeiculoTransportadorX` smallint(6) DEFAULT NULL,
  `placaVeiculoTransportadorY` smallint(6) DEFAULT NULL,
  `estadoPlacaTransportadorX` smallint(6) DEFAULT NULL,
  `estadoPlacaTransportadorY` smallint(6) DEFAULT NULL,
  `cnpjCpfTransportadorX` smallint(6) DEFAULT NULL,
  `cnpjCpfTransportadorY` smallint(6) DEFAULT NULL,
  `enderecoTransportadorX` smallint(6) DEFAULT NULL,
  `enderecoTransportadorY` smallint(6) DEFAULT NULL,
  `cidadeTransportadorX` smallint(6) DEFAULT NULL,
  `cidadeTransportadorY` smallint(6) DEFAULT NULL,
  `estadoTransportadorX` smallint(6) DEFAULT NULL,
  `estadoTransportadorY` smallint(6) DEFAULT NULL,
  `inscricaoEstadualTransportadorX` smallint(6) DEFAULT NULL,
  `inscricaoEstadualTransportadorY` smallint(6) DEFAULT NULL,
  `encarregadoTransferenciaTransportadorX` smallint(6) DEFAULT NULL,
  `encarregadoTransferenciaTransportadorY` smallint(6) DEFAULT NULL,
  `imprimeEncarregadosTransferencia` smallint(6) DEFAULT NULL,
  `quantidadeVolumesComplementosX` smallint(6) DEFAULT NULL,
  `quantidadeVolumesComplementosY` smallint(6) DEFAULT NULL,
  `especieComplementosX` smallint(6) DEFAULT NULL,
  `especieComplementosY` smallint(6) DEFAULT NULL,
  `marcaComplementosX` smallint(6) DEFAULT NULL,
  `marcaComplementosY` smallint(6) DEFAULT NULL,
  `numeroComplementosX` smallint(6) DEFAULT NULL,
  `numeroComplementosY` smallint(6) DEFAULT NULL,
  `pesoBrutoComplementosX` smallint(6) DEFAULT NULL,
  `pesoBrutoComplementosY` smallint(6) DEFAULT NULL,
  `pesoLiquidoComplementosX` smallint(6) DEFAULT NULL,
  `pesoLiquidoComplementosY` smallint(6) DEFAULT NULL,
  `numeroPedidoComplementosX` smallint(6) DEFAULT NULL,
  `numeroPedidoComplementosY` smallint(6) DEFAULT NULL,
  `seuPedidoComplementosX` smallint(6) DEFAULT NULL,
  `seuPedidoComplementosY` smallint(6) DEFAULT NULL,
  `vendedorComplementosX` smallint(6) DEFAULT NULL,
  `vendedorComplementosY` smallint(6) DEFAULT NULL,
  `nomeVendedorComplementosX` smallint(6) DEFAULT NULL,
  `nomeVendedorComplementosY` smallint(6) DEFAULT NULL,
  `produtorComplementosX` smallint(6) DEFAULT NULL,
  `produtorComplementosY` smallint(6) DEFAULT NULL,
  `quantidadeItensComplementosX` smallint(6) DEFAULT NULL,
  `quantidadeItensComplementosY` smallint(6) DEFAULT NULL,
  `numeroCargaComplementosX` smallint(6) DEFAULT NULL,
  `numeroCargaComplementosY` smallint(6) DEFAULT NULL,
  `1LinhaMensagemComplementosX` smallint(6) DEFAULT NULL,
  `1LinhaMensagemComplementosY` smallint(6) DEFAULT NULL,
  `2LinhaMensagemComplementosX` smallint(6) DEFAULT NULL,
  `2LinhaMensagemComplementosY` smallint(6) DEFAULT NULL,
  `3LinhaMensagemComplementosX` smallint(6) DEFAULT NULL,
  `3LinhaMensagemComplementosY` smallint(6) DEFAULT NULL,
  `4LinhaMensagemComplementosX` smallint(6) DEFAULT NULL,
  `4LinhaMensagemComplementosY` smallint(6) DEFAULT NULL,
  `5LinhaMensagemComplementosX` smallint(6) DEFAULT NULL,
  `5LinhaMensagemComplementosY` smallint(6) DEFAULT NULL,
  `1LinhaImpostosComplementosX` smallint(6) DEFAULT NULL,
  `1LinhaImpostosComplementosY` smallint(6) DEFAULT NULL,
  `2LinhaImpostosComplementosX` smallint(6) DEFAULT NULL,
  `2LinhaImpostosComplementosY` smallint(6) DEFAULT NULL,
  `3LinhaImpostosComplementosX` smallint(6) DEFAULT NULL,
  `3LinhaImpostosComplementosY` smallint(6) DEFAULT NULL,
  `numeroNotaCanhotoComplementosX` smallint(6) DEFAULT NULL,
  `numeroNotaCanhotoComplementosY` smallint(6) DEFAULT NULL,
  `vencimentoCanhotoComplementosX` smallint(6) DEFAULT NULL,
  `vencimentoCanhotoComplementosY` smallint(6) DEFAULT NULL,
  `ordemServicoComplementosX` smallint(6) DEFAULT NULL,
  `ordemServicoComplementosY` smallint(6) DEFAULT NULL,
  `nomeOperacaoComplementosX` smallint(6) DEFAULT NULL,
  `nomeOperacaoComplementosY` smallint(6) DEFAULT NULL,
  `reterIssComplementosX` smallint(6) DEFAULT NULL,
  `reterIssComplementosY` smallint(6) DEFAULT NULL,
  `numeroRotaComplementosX` smallint(6) DEFAULT NULL,
  `numeroRotaComplementosY` smallint(6) DEFAULT NULL,
  `notaOrigemComplementosX` smallint(6) DEFAULT NULL,
  `notaOrigemComplementosY` smallint(6) DEFAULT NULL,
  `1LinhaClassificacaoFiscalComplementosX` smallint(6) DEFAULT NULL,
  `1LinhaClassificacaoFiscalComplementosY` smallint(6) DEFAULT NULL,
  `2LinhaClassificacaoFiscalComplementosX` smallint(6) DEFAULT NULL,
  `2LinhaClassificacaoFiscalComplementosY` smallint(6) DEFAULT NULL,
  `3LinhaClassificacaoFiscalComplementosX` smallint(6) DEFAULT NULL,
  `3LinhaClassificacaoFiscalComplementosY` smallint(6) DEFAULT NULL,
  `4LinhaClassificacaoFiscalComplementosX` smallint(6) DEFAULT NULL,
  `4LinhaClassificacaoFiscalComplementosY` smallint(6) DEFAULT NULL,
  `5LinhaClassificacaoFiscalComplementosX` smallint(6) DEFAULT NULL,
  `5LinhaClassificacaoFiscalComplementosY` smallint(6) DEFAULT NULL,
  `6LinhaClassificacaoFiscalComplementosX` smallint(6) DEFAULT NULL,
  `6LinhaClassificacaoFiscalComplementosY` smallint(6) DEFAULT NULL,
  `informacaoComplementarComplementosX` smallint(6) DEFAULT NULL,
  `informacaoComplementarComplementosY` smallint(6) DEFAULT NULL,
  `quantidadeInformacaoComplementarComplementos` smallint(6) DEFAULT NULL,
  `cstImpostosX` smallint(6) DEFAULT NULL,
  `cstImpostosY` smallint(6) DEFAULT NULL,
  `aliquotaImpostosX` smallint(6) DEFAULT NULL,
  `aliquotaImpostosY` smallint(6) DEFAULT NULL,
  `baseIcmsImpostosX` smallint(6) DEFAULT NULL,
  `baseIcmsImpostosY` smallint(6) DEFAULT NULL,
  `valorIcmsImpostosX` smallint(6) DEFAULT NULL,
  `valorIcmsImpostosY` smallint(6) DEFAULT NULL,
  `cfopImpostosX` smallint(6) DEFAULT NULL,
  `cfopImpostosY` smallint(6) DEFAULT NULL,
  `numeroLinhasImpostos` smallint(6) DEFAULT NULL,
  `nomeArquivoNotaFiscal` varchar(15) DEFAULT NULL,
  `status` smallint(6) DEFAULT NULL,
  PRIMARY KEY (`idconfiguracaoNotaFiscal`,`idloja`),
  KEY `fk_configuracaoNotaFiscal_loja1` (`idloja`),
  CONSTRAINT `fk_configuracaoNotaFiscal_loja1` FOREIGN KEY (`idloja`) REFERENCES `loja` (`idloja`) ON DELETE NO ACTION ON UPDATE NO ACTION
) ENGINE=InnoDB DEFAULT CHARSET=latin1;

--
-- Dumping data for table `configuracaonotafiscal`
--

/*!40000 ALTER TABLE `configuracaonotafiscal` DISABLE KEYS */;
/*!40000 ALTER TABLE `configuracaonotafiscal` ENABLE KEYS */;


--
-- Definition of table `conta`
--

DROP TABLE IF EXISTS `conta`;
CREATE TABLE `conta` (
  `idConta` double NOT NULL AUTO_INCREMENT,
  `nome` varchar(30) NOT NULL,
  `idloja` int(11) NOT NULL,
  `banco` int(11) NOT NULL,
  `limite` decimal(15,3) NOT NULL DEFAULT '0.000',
  `tipoConta` varchar(15) DEFAULT NULL,
  `titular` varchar(50) DEFAULT NULL,
  `tarifaContrato` decimal(15,3) NOT NULL,
  `tarifaCustodia` decimal(15,3) NOT NULL,
  `tarifaDescontoCheque` decimal(15,3) NOT NULL,
  `taxaIOF` decimal(15,3) NOT NULL,
  `cedente` varchar(20) DEFAULT NULL,
  `tarifaCobranca` decimal(15,3) NOT NULL,
  `diasCredito` int(11) NOT NULL,
  `permitiConciliarManual` char(1) CHARACTER SET latin2 COLLATE latin2_croatian_ci NOT NULL,
  `especieDoc` varchar(40) DEFAULT NULL,
  `convenio` int(11) DEFAULT NULL,
  `inativo` smallint(6) NOT NULL DEFAULT '0',
  `tipoCobranca` char(1) NOT NULL,
  `codigoTipoConta` int(11) NOT NULL,
  `codDiasProtesto` int(11) NOT NULL,
  `qttyDiasProtesto` int(11) NOT NULL,
  `numeroCheque` varchar(6) DEFAULT NULL,
  `dataFechamento` date DEFAULT NULL,
  `conta` varchar(10) NOT NULL,
  `carteira` int(11) NOT NULL,
  `cidade` varchar(30) DEFAULT NULL,
  `balanco` varchar(1) NOT NULL DEFAULT 'n' COMMENT 'n - nao s - sim',
  `compensacao` varchar(3) DEFAULT NULL,
  `multa` decimal(15,3) NOT NULL DEFAULT '0.000',
  `agencia` varchar(7) DEFAULT NULL,
  `titleCarteiraBank` varchar(15) DEFAULT NULL,
  `messagemCobranca` blob,
  PRIMARY KEY (`idConta`),
  KEY `fk_conta_loja1` (`idloja`),
  KEY `fk_conta_banco1` (`banco`),
  KEY `fk_conta_carteira1` (`carteira`),
  CONSTRAINT `fk_conta_banco1` FOREIGN KEY (`banco`) REFERENCES `banco` (`idbanco`) ON DELETE NO ACTION ON UPDATE NO ACTION,
  CONSTRAINT `fk_conta_carteira1` FOREIGN KEY (`carteira`) REFERENCES `carteira` (`idCarteira`) ON DELETE NO ACTION ON UPDATE NO ACTION,
  CONSTRAINT `fk_conta_loja1` FOREIGN KEY (`idloja`) REFERENCES `loja` (`idloja`) ON DELETE NO ACTION ON UPDATE NO ACTION
) ENGINE=InnoDB DEFAULT CHARSET=latin1;

--
-- Dumping data for table `conta`
--

/*!40000 ALTER TABLE `conta` DISABLE KEYS */;
/*!40000 ALTER TABLE `conta` ENABLE KEYS */;


--
-- Definition of table `contacorrente`
--

DROP TABLE IF EXISTS `contacorrente`;
CREATE TABLE `contacorrente` (
  `idcontaCorrente` int(11) NOT NULL AUTO_INCREMENT,
  `idloja` int(11) NOT NULL,
  `codigo` double NOT NULL,
  `historico` varchar(100) DEFAULT NULL,
  `emissao` date NOT NULL,
  `dataConfirma` date DEFAULT NULL,
  `entrada` date NOT NULL,
  `tipo` varchar(1) NOT NULL COMMENT 'D - Debito\nC - Credito',
  `usuarioAlt` int(11) NOT NULL DEFAULT '0',
  `usuarioBaixa` int(11) NOT NULL DEFAULT '0',
  `usuarioCanc` int(11) NOT NULL DEFAULT '0',
  `usuarioInc` int(11) NOT NULL,
  `vencimento` date NOT NULL,
  `chavePagar` double NOT NULL DEFAULT '0',
  `confirma` varchar(1) DEFAULT 'n' COMMENT 's sim\nn nao',
  `codigoHistorico` smallint(6) NOT NULL,
  `valor` decimal(15,3) NOT NULL DEFAULT '0.000',
  `lancamento` varchar(10) DEFAULT NULL,
  `tipoOrigem` varchar(1) DEFAULT NULL COMMENT 'p pagar\nl pagar lote\nd deposito\nt transferencia\nr receber',
  `chaveDiaria` int(11) DEFAULT NULL,
  PRIMARY KEY (`idcontaCorrente`),
  KEY `fk_contaCorrente_loja1` (`idloja`),
  KEY `fk_contaCorrente_conta1` (`codigo`) USING BTREE,
  CONSTRAINT `fk_contaCorrente_conta1` FOREIGN KEY (`codigo`) REFERENCES `conta` (`idConta`) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT `fk_contaCorrente_loja1` FOREIGN KEY (`idloja`) REFERENCES `loja` (`idloja`) ON DELETE NO ACTION ON UPDATE NO ACTION
) ENGINE=InnoDB DEFAULT CHARSET=latin1;

--
-- Dumping data for table `contacorrente`
--

/*!40000 ALTER TABLE `contacorrente` DISABLE KEYS */;
/*!40000 ALTER TABLE `contacorrente` ENABLE KEYS */;


--
-- Definition of trigger `contaCorrente_last_insert`
--

DROP TRIGGER /*!50030 IF EXISTS */ `contaCorrente_last_insert`;

DELIMITER $$

CREATE DEFINER = `master`@`localhost` TRIGGER `contaCorrente_last_insert` BEFORE INSERT ON `contacorrente` FOR EACH ROW begin
    declare chave int(11) default 0;
      select max(chaveDiaria)
                    from contaCorrente
                                    where codigo=new.codigo and vencimento=new.vencimento
                                                                                    into chave;
    if(chave is null)then set chave = 0; end if;
        set new.chaveDiaria = chave + 1;
end $$

DELIMITER ;

--
-- Definition of trigger `contaCorrente_after_insertUpdate`
--

DROP TRIGGER /*!50030 IF EXISTS */ `contaCorrente_after_insertUpdate`;

DELIMITER $$

CREATE DEFINER = `master`@`localhost` TRIGGER `contaCorrente_after_insertUpdate` AFTER INSERT ON `contacorrente` FOR EACH ROW begin

    declare valorConta decimal(15,3) default 0;
    declare maxDate date default now();
    declare maxChave integer default 0;
    declare chave int(11) default 0;
    declare saldoOld decimal(15,3) default 0;
    declare saldoNew decimal(15,3) default 0;
    
                                                                                      
    if(new.tipo = "D" || new.tipo = "d") then
        set saldoNew = (new.valor * -1);
            else
            set saldoNew = new.valor;
    end if;
                                            INSERT INTO `conector`.`contasaldo`
                                            (
                                                `codigo`,
                                                 saldo,
                                                `vencimento`,
                                                `tipo`,
                                                 conta
                                            )VALUES
                                            (
                                                new.IdContaCorrente,
                                                saldoNew,
                                                now(),
                                                new.Tipo,
                                                new.codigo
                                            );
    
    select count(valor) 
                    from contaCorrente 
                                    where codigo=new.codigo and vencimento=new.vencimento
                                                                                    into valorConta;
                                                                                    if(valorConta is null)then set valorConta=0; end if;
    if(valorConta = 1)then
        select max(vencimento) 
                        from contaCorrente 
                                    where codigo=new.codigo and vencimento < new.vencimento  
                                                                                    into maxDate;
                                                                                    
                                                                                    if(maxDate is null)then 
                                                                                                                     update contaSaldo
                                                                                                                                set saldo = saldoNew
                                                                                                                                            where codigo=new.idContaCorrente; 
                                                                                                    else
                                                                                                            select max(chaveDiaria)
                                                                                                                        from contaCorrente
                                                                                                                                        where codigo=new.codigo and vencimento=maxDate
                                                                                                                                                                                        into maxChave;
                                                                                                            select tab2.saldo
                                                                                                                        from contaCorrente tab1
                                                                                                                        inner join contaSaldo tab2 on(tab1.idContaCorrente = tab2.codigo)
                                                                                                                                        where tab1.codigo=new.codigo and tab1.vencimento=maxDate and tab1.chaveDiaria=maxChave
                                                                                                                                                                                            into saldoOld;
                                                                                                                                                                                                                             update contaSaldo
                                                                                                                                set saldo = (saldoOld + saldoNew)
                                                                                                                                                     where codigo=new.idContaCorrente; 
                                                                                                        end if;
    else
                    select max(chaveDiaria)
                                from contaCorrente
                                                where codigo=new.codigo and vencimento=new.vencimento
                                                                                                    into maxChave;
                                                                                                     if(maxChave > 0)then set maxChave=maxChave - 1; end if;
                    select tab2.saldo
                                from contaCorrente tab1
                                        inner join contaSaldo tab2 on(tab1.idContaCorrente = tab2.codigo)
                                                where tab1.codigo=new.codigo and tab1.vencimento=new.vencimento and tab1.chaveDiaria = maxChave
                                                                                                                    into saldoOld;
                                  update contaSaldo
                                set saldo = (saldoOld + saldoNew)
                                                    where codigo=new.idContaCorrente; 
    end if;
                                  update contaSaldo
                                                 set saldo = (saldo + saldoNew)
                                                                          where conta = new.codigo and 
                                                                                                  vencimento > new.vencimento;
end $$

DELIMITER ;

--
-- Definition of trigger `contaCorrente_last_update`
--

DROP TRIGGER /*!50030 IF EXISTS */ `contaCorrente_last_update`;

DELIMITER $$

CREATE DEFINER = `master`@`localhost` TRIGGER `contaCorrente_last_update` BEFORE UPDATE ON `contacorrente` FOR EACH ROW begin
    declare chave int(11) default 0;
    declare saldoOld decimal(15,3) default 0;
    declare saldoNew decimal(15,3) default 0;
    
    if(new.vencimento = old.vencimento)then
        IF((new.valor <> old.Valor) or(new.tipo <> old.tipo))THEN
            if(new.tipo = "C")then
                set saldoNew = new.Valor;
                    else    
                        set saldoNew = new.Valor * (-1);
            end if;
            if(old.tipo = "C")then
                set saldoOld = old.Valor;
                    else
                      set saldoOld = old.Valor * (-1);
            end if;
                     update contaSaldo, (select idContaCorrente,
                                            chaveDiaria,
                                                vencimento
                                                        from contaCorrente 
                                                                        where 
                                                                            chaveDiaria Is not Null) tab set contaSaldo.saldo =  (saldo - saldoOld + saldoNew) 
                                    where 
                                        contaSaldo.codigo=tab.idContaCorrente and contaSaldo.vencimento= tab.vencimento and
                                        (contaSaldo.conta=new.codigo) and (contaSaldo.vencimento=new.vencimento) and (tab.chaveDiaria > new.chaveDiaria);
          update contaSaldo set saldo = (saldo - saldoOld + saldoNew) where codigo=new.IdContaCorrente;        
        END IF;
    end if;
    
end $$

DELIMITER ;

--
-- Definition of trigger `contaCorrente_after_update`
--

DROP TRIGGER /*!50030 IF EXISTS */ `contaCorrente_after_update`;

DELIMITER $$

CREATE DEFINER = `master`@`localhost` TRIGGER `contaCorrente_after_update` AFTER UPDATE ON `contacorrente` FOR EACH ROW begin
    update contaSaldo 
                    set vencimento = new.vencimento, tipo = new.tipo 
                                                                where codigo=new.idContaCorrente;
end $$

DELIMITER ;

--
-- Definition of trigger `contaCorrente_after_delete`
--

DROP TRIGGER /*!50030 IF EXISTS */ `contaCorrente_after_delete`;

DELIMITER $$

CREATE DEFINER = `master`@`localhost` TRIGGER `contaCorrente_after_delete` BEFORE DELETE ON `contacorrente` FOR EACH ROW begin
    declare saldoOld decimal(15,3) default 0;
    declare saldoNew decimal(15,3) default 0;
    
    if(old.Tipo = "C" or old.Tipo="c")then
            set saldoOld = old.valor;
                else
                    set saldoOld= old.valor * (-1);
    end if;
              update contaSaldo set saldo=(saldo - saldoOld) where conta=old.codigo and vencimento > old.vencimento;
              update contaSaldo, (select idContaCorrente,
                                            chaveDiaria,
                                                vencimento
                                                        from contaCorrente 
                                                                        where 
                                                                            chaveDiaria Is not Null) tab set contaSaldo.saldo =  (saldo - saldoOld) 
                                    where 
                                        contaSaldo.codigo=tab.idContaCorrente and contaSaldo.vencimento= tab.vencimento and
                                        (contaSaldo.conta=old.codigo) and (contaSaldo.vencimento=old.vencimento) and (tab.chaveDiaria > old.chaveDiaria);
    
end $$

DELIMITER ;

--
-- Definition of table `contasaldo`
--

DROP TABLE IF EXISTS `contasaldo`;
CREATE TABLE `contasaldo` (
  `codigo` int(11) NOT NULL,
  `saldo` decimal(15,3) NOT NULL DEFAULT '0.000',
  `vencimento` date NOT NULL,
  `tipo` varchar(1) NOT NULL,
  `conta` int(11) NOT NULL,
  PRIMARY KEY (`codigo`),
  CONSTRAINT `fk_contaSaldo_contaCorrente1` FOREIGN KEY (`codigo`) REFERENCES `contacorrente` (`idcontaCorrente`) ON DELETE CASCADE ON UPDATE CASCADE
) ENGINE=InnoDB DEFAULT CHARSET=latin1;

--
-- Dumping data for table `contasaldo`
--

/*!40000 ALTER TABLE `contasaldo` DISABLE KEYS */;
/*!40000 ALTER TABLE `contasaldo` ENABLE KEYS */;


--
-- Definition of table `contasreceber`
--

DROP TABLE IF EXISTS `contasreceber`;
CREATE TABLE `contasreceber` (
  `idcontasReceber` double NOT NULL AUTO_INCREMENT,
  `cliente` int(11) NOT NULL,
  `fatura` varchar(20) NOT NULL,
  `idloja` int(11) NOT NULL,
  `flagPagamento` varchar(1) NOT NULL,
  `pagamento` date DEFAULT NULL,
  `vencimento` date NOT NULL,
  `emissao` date NOT NULL,
  `reserva` double DEFAULT NULL,
  `usuario` int(11) NOT NULL,
  `finalizadora` int(11) DEFAULT NULL,
  `valorPago` decimal(15,3) NOT NULL DEFAULT '0.000',
  `observacao` varchar(50) DEFAULT NULL,
  `tipoMovimentacao` varchar(1) DEFAULT NULL,
  `conta` double DEFAULT NULL,
  `banco` int(11) DEFAULT NULL,
  `flagAlteracao` date DEFAULT NULL,
  `carteira` int(11) DEFAULT NULL,
  `nossoNumero` varchar(20) DEFAULT NULL,
  `historicoBaixa` varchar(50) DEFAULT NULL,
  `historico` varchar(50) DEFAULT NULL,
  `tarifa` decimal(15,3) DEFAULT NULL,
  `tipoBaixa` varchar(2) DEFAULT NULL,
  `caixa` double DEFAULT NULL,
  `abatimentos` decimal(15,3) NOT NULL DEFAULT '0.000',
  `descontos` decimal(15,3) NOT NULL DEFAULT '0.000',
  `acrescimos` decimal(15,3) NOT NULL DEFAULT '0.000',
  `vencimentoCobranca` date DEFAULT NULL,
  `usuarioBaixa` int(11) DEFAULT NULL,
  `confirmadas` varchar(1) NOT NULL DEFAULT 'n',
  `terminal` int(11) DEFAULT '0',
  `documentoFiscal` double NOT NULL DEFAULT '0',
  `batimento` char(1) DEFAULT 'n',
  `origem` varchar(15) DEFAULT NULL,
  `parcela` int(11) DEFAULT '0',
  `qttyParcela` int(11) DEFAULT '0',
  `valor` decimal(15,3) NOT NULL DEFAULT '0.000',
  `taxa` decimal(15,3) NOT NULL DEFAULT '0.000',
  PRIMARY KEY (`idcontasReceber`),
  KEY `fk_contasReceber_loja1` (`idloja`),
  KEY `fk_contasReceber_cliente1` (`cliente`),
  KEY `fk_contasReceber_carteira1` (`carteira`),
  CONSTRAINT `fk_contasReceber_cliente1` FOREIGN KEY (`cliente`) REFERENCES `cliente` (`idcliente`) ON DELETE NO ACTION ON UPDATE NO ACTION,
  CONSTRAINT `fk_contasReceber_loja1` FOREIGN KEY (`idloja`) REFERENCES `loja` (`idloja`) ON DELETE NO ACTION ON UPDATE NO ACTION
) ENGINE=InnoDB DEFAULT CHARSET=latin1;

--
-- Dumping data for table `contasreceber`
--

/*!40000 ALTER TABLE `contasreceber` DISABLE KEYS */;
/*!40000 ALTER TABLE `contasreceber` ENABLE KEYS */;


--
-- Definition of trigger `contas_last_insert`
--

DROP TRIGGER /*!50030 IF EXISTS */ `contas_last_insert`;

DELIMITER $$

CREATE DEFINER = `master`@`localhost` TRIGGER `contas_last_insert` BEFORE INSERT ON `contasreceber` FOR EACH ROW begin
    declare VarTaxa decimal(15,3) default 0;
        select
                receberTaxa 
                            from
                                system
                                        into VarTaxa;
                                            if(VarTaxa is null)then set VarTaxa=0; end if;
                                            set new.taxa=VarTaxa;
    
end $$

DELIMITER ;

--
-- Definition of table `convenio`
--

DROP TABLE IF EXISTS `convenio`;
CREATE TABLE `convenio` (
  `idconvenio` int(11) NOT NULL AUTO_INCREMENT,
  `razao` varchar(45) NOT NULL,
  `abreviatura` varchar(30) NOT NULL,
  `cnpj` varchar(14) NOT NULL,
  `ie` varchar(30) NOT NULL,
  `abertura` date NOT NULL,
  `limite` decimal(15,3) NOT NULL,
  `diaEncerramento` int(11) NOT NULL,
  `diasUteisEncerramento` smallint(6) NOT NULL DEFAULT '0',
  `diaRecebimento` int(11) NOT NULL,
  `diasUteisRecebimento` smallint(6) NOT NULL DEFAULT '0',
  `porcetagemEstouro` decimal(5,3) NOT NULL,
  `typePrazo` varchar(1) NOT NULL,
  `bloqueado` varchar(1) NOT NULL,
  `taxaLivre` smallint(6) NOT NULL DEFAULT '0',
  `dias` int(11) NOT NULL DEFAULT '0',
  `preFixado` smallint(6) NOT NULL,
  `idspedMunicipio` int(10) unsigned NOT NULL,
  `idcepbairro` int(11) NOT NULL,
  `cep` int(11) NOT NULL,
  `addressLogradouro` varchar(30) NOT NULL,
  `addressBairro` varchar(30) NOT NULL,
  `addressCity` varchar(30) NOT NULL,
  `addressComplemento` varchar(45) NOT NULL,
  `addressNumber` int(11) NOT NULL,
  `uf` varchar(2) NOT NULL,
  `status` smallint(6) NOT NULL DEFAULT '0',
  PRIMARY KEY (`idconvenio`),
  UNIQUE KEY `cnpj_UNIQUE` (`cnpj`),
  KEY `fk_convenio_spedMunicipio1` (`idspedMunicipio`),
  CONSTRAINT `fk_convenio_spedMunicipio1` FOREIGN KEY (`idspedMunicipio`) REFERENCES `spedmunicipio` (`idspedMunicipio`) ON DELETE NO ACTION ON UPDATE NO ACTION
) ENGINE=InnoDB DEFAULT CHARSET=latin1;

--
-- Dumping data for table `convenio`
--

/*!40000 ALTER TABLE `convenio` DISABLE KEYS */;
/*!40000 ALTER TABLE `convenio` ENABLE KEYS */;


--
-- Definition of table `conveniomovimento`
--

DROP TABLE IF EXISTS `conveniomovimento`;
CREATE TABLE `conveniomovimento` (
  `idMovimento` double NOT NULL AUTO_INCREMENT,
  `idcliente` int(11) NOT NULL,
  `idloja` int(11) NOT NULL,
  `empresa` int(11) NOT NULL,
  `emissao` date NOT NULL,
  `vencimento` date NOT NULL,
  `valor` decimal(15,3) NOT NULL DEFAULT '0.000',
  `parcela` int(11) NOT NULL,
  `prazo` int(11) NOT NULL,
  `cupom` double NOT NULL DEFAULT '0',
  `idfuncionario` int(11) NOT NULL,
  `terminal` int(11) NOT NULL,
  `desconto` decimal(15,3) NOT NULL DEFAULT '0.000',
  `juros` decimal(15,3) NOT NULL DEFAULT '0.000',
  `observacao` varchar(200) NOT NULL DEFAULT '""',
  `pagamento` varchar(8) NOT NULL DEFAULT '00000000',
  `qttyParcelas` int(11) NOT NULL,
  `flagAlteracao` date DEFAULT NULL,
  `pedido` double DEFAULT NULL,
  `conferencia` char(1) NOT NULL DEFAULT 'n' COMMENT 'n = nao conferiu\ns = sim conferiu',
  `valorPago` decimal(15,3) NOT NULL DEFAULT '0.000',
  `flagPagamento` varchar(1) DEFAULT 'n',
  `chave_nota` double DEFAULT NULL,
  PRIMARY KEY (`idMovimento`),
  KEY `fk_convenioMovimento_cliente1` (`idcliente`),
  KEY `fk_convenioMovimento_loja1` (`idloja`),
  KEY `fk_convenioMovimento_convenio1` (`empresa`),
  KEY `fk_convenioMovimento_funcionario1` (`idfuncionario`),
  KEY `fk_convenioMovimento_terminal1` (`terminal`),
  CONSTRAINT `fk_convenioMovimento_cliente1` FOREIGN KEY (`idcliente`) REFERENCES `cliente` (`idcliente`) ON DELETE NO ACTION ON UPDATE NO ACTION,
  CONSTRAINT `fk_convenioMovimento_convenio1` FOREIGN KEY (`empresa`) REFERENCES `convenio` (`idconvenio`) ON DELETE NO ACTION ON UPDATE NO ACTION,
  CONSTRAINT `fk_convenioMovimento_funcionario1` FOREIGN KEY (`idfuncionario`) REFERENCES `funcionario` (`idfuncionario`) ON DELETE NO ACTION ON UPDATE NO ACTION,
  CONSTRAINT `fk_convenioMovimento_loja1` FOREIGN KEY (`idloja`) REFERENCES `loja` (`idloja`) ON DELETE NO ACTION ON UPDATE NO ACTION,
  CONSTRAINT `fk_convenioMovimento_terminal1` FOREIGN KEY (`terminal`) REFERENCES `terminal` (`idterminal`) ON DELETE NO ACTION ON UPDATE NO ACTION
) ENGINE=InnoDB DEFAULT CHARSET=latin1;

--
-- Dumping data for table `conveniomovimento`
--

/*!40000 ALTER TABLE `conveniomovimento` DISABLE KEYS */;
/*!40000 ALTER TABLE `conveniomovimento` ENABLE KEYS */;


--
-- Definition of trigger `convenioMov_last_update`
--

DROP TRIGGER /*!50030 IF EXISTS */ `convenioMov_last_update`;

DELIMITER $$

CREATE DEFINER = `master`@`localhost` TRIGGER `convenioMov_last_update` BEFORE UPDATE ON `conveniomovimento` FOR EACH ROW begin
    if(new.flagPagamento = "s") then
        set new.conferencia = "s";
    end if;
end $$

DELIMITER ;

--
-- Definition of table `crediario`
--

DROP TABLE IF EXISTS `crediario`;
CREATE TABLE `crediario` (
  `idcrediario` double NOT NULL AUTO_INCREMENT,
  `idloja` int(11) NOT NULL,
  `idmetodo` int(11) NOT NULL,
  `idcliente` int(11) NOT NULL,
  `idfuncionario` int(11) NOT NULL,
  `emissao` date NOT NULL,
  `valueEntry` decimal(15,3) NOT NULL DEFAULT '0.000',
  `total` decimal(15,3) NOT NULL DEFAULT '0.000',
  `encargos` decimal(15,3) NOT NULL DEFAULT '0.000',
  `status` char(1) NOT NULL DEFAULT '0',
  `observacao` char(200) DEFAULT NULL,
  `entrada` smallint(6) DEFAULT '0',
  `tac` decimal(15,3) NOT NULL DEFAULT '0.000',
  `cet` decimal(15,3) NOT NULL DEFAULT '0.000' COMMENT ' Porcentual da CET ao ano.\n',
  `taxa` decimal(15,3) NOT NULL DEFAULT '0.000',
  `conferencia` char(1) NOT NULL DEFAULT 'n' COMMENT 'n = nao conferiu\ns = sim conferiu',
  `pedido` double NOT NULL DEFAULT '0',
  `batimento` char(1) NOT NULL DEFAULT 'n',
  `parcelamento` int(11) NOT NULL DEFAULT '0',
  `cupom` double NOT NULL DEFAULT '0',
  `terminal` int(11) NOT NULL DEFAULT '0',
  `idUsuarioInc` int(11) DEFAULT '0',
  `idUsuarioLastAlt` int(11) DEFAULT NULL,
  `dateAlt` date DEFAULT NULL,
  `chave_nota` double DEFAULT NULL,
  PRIMARY KEY (`idcrediario`,`idloja`),
  KEY `fk_crediario_funcionario1` (`idfuncionario`),
  KEY `fk_crediario_loja1` (`idloja`),
  KEY `fk_crediario_metodo1` (`idmetodo`),
  KEY `fk_crediario_cliente1` (`idcliente`),
  CONSTRAINT `fk_crediario_cliente1` FOREIGN KEY (`idcliente`) REFERENCES `cliente` (`idcliente`) ON UPDATE NO ACTION,
  CONSTRAINT `fk_crediario_funcionario1` FOREIGN KEY (`idfuncionario`) REFERENCES `funcionario` (`idfuncionario`) ON UPDATE NO ACTION,
  CONSTRAINT `fk_crediario_loja1` FOREIGN KEY (`idloja`) REFERENCES `loja` (`idloja`) ON DELETE NO ACTION ON UPDATE NO ACTION,
  CONSTRAINT `fk_crediario_metodo1` FOREIGN KEY (`idmetodo`) REFERENCES `metodo` (`idmetodo`) ON UPDATE NO ACTION
) ENGINE=InnoDB DEFAULT CHARSET=latin1;

--
-- Dumping data for table `crediario`
--

/*!40000 ALTER TABLE `crediario` DISABLE KEYS */;
/*!40000 ALTER TABLE `crediario` ENABLE KEYS */;


--
-- Definition of trigger `crediario_last_delete`
--

DROP TRIGGER /*!50030 IF EXISTS */ `crediario_last_delete`;

DELIMITER $$

CREATE DEFINER = `master`@`localhost` TRIGGER `crediario_last_delete` AFTER DELETE ON `crediario` FOR EACH ROW begin
                if(old.status = '0')then
                    update pedido set final=1 where idPedido=old.pedido;
                end if;
end $$

DELIMITER ;

--
-- Definition of table `cst`
--

DROP TABLE IF EXISTS `cst`;
CREATE TABLE `cst` (
  `idcst` char(3) NOT NULL,
  `descricao` varchar(80) NOT NULL,
  `calcBc` smallint(6) NOT NULL DEFAULT '1',
  `calcRed` smallint(6) NOT NULL DEFAULT '1',
  `typeCst` char(1) NOT NULL DEFAULT 't' COMMENT 's - substituição\nt - tributado\ni - isenta'' ',
  `modalidade` char(1) NOT NULL DEFAULT 'v' COMMENT 'v - valor da operação\nm - margem valor agregado\np - pauta\nt - tabela preço',
  PRIMARY KEY (`idcst`)
) ENGINE=InnoDB DEFAULT CHARSET=latin1;

--
-- Dumping data for table `cst`
--

/*!40000 ALTER TABLE `cst` DISABLE KEYS */;
/*!40000 ALTER TABLE `cst` ENABLE KEYS */;


--
-- Definition of table `cstcofins`
--

DROP TABLE IF EXISTS `cstcofins`;
CREATE TABLE `cstcofins` (
  `idcstCofins` int(11) NOT NULL AUTO_INCREMENT,
  `codigo` varchar(3) NOT NULL,
  `descricao` varchar(200) NOT NULL,
  PRIMARY KEY (`idcstCofins`),
  UNIQUE KEY `codigo_UNIQUE` (`codigo`)
) ENGINE=InnoDB DEFAULT CHARSET=latin1;

--
-- Dumping data for table `cstcofins`
--

/*!40000 ALTER TABLE `cstcofins` DISABLE KEYS */;
/*!40000 ALTER TABLE `cstcofins` ENABLE KEYS */;


--
-- Definition of table `cstipi`
--

DROP TABLE IF EXISTS `cstipi`;
CREATE TABLE `cstipi` (
  `idcstIpi` int(11) NOT NULL AUTO_INCREMENT,
  `codigo` varchar(3) NOT NULL,
  `descricao` varchar(100) NOT NULL,
  `typeIpi` varchar(1) NOT NULL COMMENT 'e entrada s saida',
  PRIMARY KEY (`idcstIpi`),
  UNIQUE KEY `codigo_UNIQUE` (`codigo`)
) ENGINE=InnoDB DEFAULT CHARSET=latin1;

--
-- Dumping data for table `cstipi`
--

/*!40000 ALTER TABLE `cstipi` DISABLE KEYS */;
/*!40000 ALTER TABLE `cstipi` ENABLE KEYS */;


--
-- Definition of table `cstpis`
--

DROP TABLE IF EXISTS `cstpis`;
CREATE TABLE `cstpis` (
  `idcstPis` int(11) NOT NULL AUTO_INCREMENT,
  `codigo` varchar(3) NOT NULL,
  `descricao` varchar(200) NOT NULL,
  PRIMARY KEY (`idcstPis`),
  UNIQUE KEY `codigo_UNIQUE` (`codigo`)
) ENGINE=InnoDB DEFAULT CHARSET=latin1;

--
-- Dumping data for table `cstpis`
--

/*!40000 ALTER TABLE `cstpis` DISABLE KEYS */;
/*!40000 ALTER TABLE `cstpis` ENABLE KEYS */;


--
-- Definition of table `cstpiscofins`
--

DROP TABLE IF EXISTS `cstpiscofins`;
CREATE TABLE `cstpiscofins` (
  `idcstPisCofins` int(11) NOT NULL AUTO_INCREMENT,
  `codigo` varchar(3) NOT NULL,
  `descricao` varchar(100) NOT NULL,
  PRIMARY KEY (`idcstPisCofins`),
  UNIQUE KEY `codigo_UNIQUE` (`codigo`)
) ENGINE=InnoDB DEFAULT CHARSET=latin1;

--
-- Dumping data for table `cstpiscofins`
--

/*!40000 ALTER TABLE `cstpiscofins` DISABLE KEYS */;
/*!40000 ALTER TABLE `cstpiscofins` ENABLE KEYS */;


--
-- Definition of table `cupom_cabecalho`
--

DROP TABLE IF EXISTS `cupom_cabecalho`;
CREATE TABLE `cupom_cabecalho` (
  `numeroCupom` double NOT NULL,
  `loja` int(11) NOT NULL,
  `terminal` int(11) NOT NULL,
  `dataVenda` date NOT NULL,
  `cliente` int(11) NOT NULL DEFAULT '0',
  `hora` time NOT NULL,
  `acrescimo` decimal(15,3) NOT NULL DEFAULT '0.000',
  `desconto` decimal(15,3) NOT NULL DEFAULT '0.000',
  `cancelados` decimal(15,3) NOT NULL DEFAULT '0.000',
  `totalLiquido` decimal(15,3) NOT NULL,
  `totalBruto` decimal(15,3) NOT NULL,
  `operador` int(11) NOT NULL,
  `situacao` smallint(6) NOT NULL,
  `documentoCPF_CNPJ` varchar(16) NOT NULL,
  `usuario_cancelamento` int(11) DEFAULT NULL,
  `motivo_cancelamento` varchar(45) DEFAULT NULL,
  `totalCancelado` decimal(15,3) DEFAULT NULL,
  `convenio` int(11) DEFAULT NULL,
  `conveniado` double DEFAULT NULL,
  `numero_cartao` varchar(16) DEFAULT NULL,
  `forma_recebimento` int(11) DEFAULT NULL,
  `dataVencimento` date DEFAULT NULL,
  `encargos` decimal(15,3) DEFAULT NULL,
  `diasAtraso` decimal(15,3) DEFAULT NULL,
  `contrato` double DEFAULT NULL,
  `parcela` int(11) DEFAULT NULL,
  `totalParcela` decimal(15,3) DEFAULT NULL,
  `geraEntrega` tinyint(1) DEFAULT NULL,
  `lagradouro_entrega` varchar(45) DEFAULT NULL,
  `datetimefinalvenda` datetime DEFAULT NULL,
  `notaFiscal` varchar(10) DEFAULT NULL,
  `serie` varchar(3) DEFAULT NULL,
  `retorno` varchar(256) DEFAULT NULL,
  `totalItens` decimal(15,3) DEFAULT NULL,
  `pedido` double DEFAULT NULL,
  `ccf` double DEFAULT NULL,
  `cripto` varchar(600) DEFAULT NULL,
  `modelo_ecf` varchar(45) DEFAULT NULL,
  PRIMARY KEY (`numeroCupom`,`loja`,`terminal`,`dataVenda`),
  KEY `fk_cupom_cabecalho_loja1` (`loja`),
  KEY `fk_cupom_cabecalho_terminal1` (`terminal`),
  KEY `fk_cupom_cabecalho_cliente1` (`cliente`),
  KEY `fk_cupom_cabecalho_funcionario1` (`operador`),
  CONSTRAINT `fk_cupom_cabecalho_cliente1` FOREIGN KEY (`cliente`) REFERENCES `cliente` (`idcliente`) ON DELETE NO ACTION ON UPDATE NO ACTION,
  CONSTRAINT `fk_cupom_cabecalho_funcionario1` FOREIGN KEY (`operador`) REFERENCES `funcionario` (`idfuncionario`) ON DELETE NO ACTION ON UPDATE NO ACTION,
  CONSTRAINT `fk_cupom_cabecalho_loja1` FOREIGN KEY (`loja`) REFERENCES `loja` (`idloja`) ON DELETE NO ACTION ON UPDATE NO ACTION,
  CONSTRAINT `fk_cupom_cabecalho_terminal1` FOREIGN KEY (`terminal`) REFERENCES `terminal` (`idterminal`) ON DELETE NO ACTION ON UPDATE NO ACTION
) ENGINE=InnoDB DEFAULT CHARSET=latin1;

--
-- Dumping data for table `cupom_cabecalho`
--

/*!40000 ALTER TABLE `cupom_cabecalho` DISABLE KEYS */;
/*!40000 ALTER TABLE `cupom_cabecalho` ENABLE KEYS */;


--
-- Definition of trigger `cupom_cabecalho_update`
--

DROP TRIGGER /*!50030 IF EXISTS */ `cupom_cabecalho_update`;

DELIMITER $$

CREATE DEFINER = `master`@`localhost` TRIGGER `cupom_cabecalho_update` BEFORE UPDATE ON `cupom_cabecalho` FOR EACH ROW begin

    declare newTotalCanceladoItem decimal(15,3) default 0;
    declare newDiscount decimal(15,3) default 0;
    declare newAcrescimo decimal(15,3) default 0;
    declare newDiscountValue decimal(15,3) default 0;
    declare newAcrescimoValue decimal(15,3) default 0;
    declare newFinalizadora integer;
    declare newValorFinalizadora decimal(15,3) default 0;
    DECLARE done INT DEFAULT FALSE; 
    
                     if(new.desconto > 0)then
                        set newDiscount = new.desconto; 
                            if(newDiscount is null)then set newDiscount = 0; end if;
                                IF(newDiscount > 0)THEN 
                                    select ifnull(max(sequencia),0) from fechamentoCaixa where loja=new.loja and terminal=new.terminal and dataMovimento=new.dataVenda into @a;
                                    if(@a > 0)then
                                        update fechamentoCaixa set desconto=desconto+new.desconto where loja=new.loja and terminal=new.terminal and dataMovimento=new.dataVenda and sequencia=@a;
                                    end if;
                                END IF;
                    end if;
                    
                    if(new.acrescimo > 0)then
                            if(newAcrescimo is null)then set newAcrescimo = 0; end if;
                                IF(newAcrescimo > 0)THEN 
                                            set new.acrescimo=newAcrescimoValue;
                                            
                                END IF;
                    end if;


    select coalesce(sum(total),0) from  conector.cupom_detalhes 
                                                    where numeroCupom=new.numeroCupom and 
                                                          loja=new.loja and 
                                                          terminal=new.terminal and dataVenda=new.`dataVenda` and situacao=2
                                                                                                                into newTotalCanceladoItem;

    if(new.situacao = 2)then

            update conector.fechamentoCaixa
                                            set
                                                cancelado = ((cancelado - (newTotalCanceladoItem)) + new.totalCancelado)
                                                
                                                    where
                                                      dataMovimento=new.`dataVenda` and
                                                      loja = new.loja and
                                                      terminal = new.terminal and funcionario=new.operador;
                                                      
    begin
             DECLARE basicFonte CURSOR for select finalizadora, valor
                                                                    from cupom_Movimento 
                                                                                        where numeroCupom=new.numeroCupom and
                                                                                              loja=new.loja and
                                                                                              terminal=new.terminal and 
                                                                                              dataVenda=new.`dataVenda`;
            DECLARE CONTINUE HANDLER FOR NOT FOUND SET done = TRUE;
            open basicFonte;

            read_loop: LOOP
                            fetch basicFonte into
                                             newFinalizadora,
                                             newValorFinalizadora;

                    IF done THEN
                        LEAVE read_loop;
                    END IF;

                        update conector.movimentoCaixa
                                            set
                                                cancelamento = (cancelamento + newValorFinalizadora)
                                                    where
                                                      dataMovimento=new.`dataVenda` and
                                                      loja = new.loja and
                                                      terminal = new.terminal and funcionario=new.operador and finalizadora=newFinalizadora;
                    end loop;
            close basicFonte;
        end;
    
    end if;                    
                    
end $$

DELIMITER ;

--
-- Definition of table `cupom_detalhes`
--

DROP TABLE IF EXISTS `cupom_detalhes`;
CREATE TABLE `cupom_detalhes` (
  `numeroCupom` double NOT NULL,
  `loja` int(11) NOT NULL,
  `terminal` int(11) NOT NULL,
  `dataVenda` date NOT NULL,
  `sequencia` int(11) NOT NULL,
  `produto` int(11) NOT NULL,
  `barra` bigint(20) NOT NULL,
  `descricaoProduto` varchar(45) NOT NULL,
  `quantidade` decimal(15,3) NOT NULL DEFAULT '0.000',
  `priceVenda` decimal(15,3) NOT NULL DEFAULT '0.000',
  `desconto` decimal(15,3) NOT NULL DEFAULT '0.000',
  `total` decimal(15,3) NOT NULL DEFAULT '0.000',
  `vendedor` int(11) DEFAULT NULL,
  `usuarioCancelamento` int(11) DEFAULT NULL,
  `motivoCancelamento` int(11) DEFAULT NULL,
  `trunca` smallint(6) DEFAULT NULL,
  `icms` decimal(15,3) NOT NULL,
  `tipoCodigo` smallint(6) DEFAULT NULL,
  `unidade` char(3) NOT NULL,
  `valorDesconto` decimal(15,3) DEFAULT NULL,
  `priceCusto` decimal(15,3) DEFAULT NULL,
  `acrescimo` decimal(15,3) DEFAULT NULL,
  `tributacao` char(2) NOT NULL,
  `reserva` double DEFAULT NULL,
  `metodo` int(11) DEFAULT NULL,
  `statusProduto` tinyint(1) DEFAULT NULL COMMENT '0 ativo\n1 inativo\n',
  `codigoProduto` int(11) DEFAULT NULL,
  `valorAcrescimo` decimal(15,3) DEFAULT NULL,
  `situacao` smallint(6) DEFAULT NULL,
  `ippt` varchar(1) NOT NULL,
  `ccf` double NOT NULL,
  `aliquota` decimal(15,3) NOT NULL,
  `tipoTributacao` varchar(1) DEFAULT NULL,
  `cripto` varchar(600) DEFAULT NULL,
  `cfop` varchar(6) DEFAULT NULL,
  `cstIcms` varchar(3) DEFAULT NULL,
  `modelo_ecf` varchar(45) DEFAULT NULL,
  PRIMARY KEY (`numeroCupom`,`loja`,`terminal`,`dataVenda`,`sequencia`,`produto`),
  KEY `fk_cupom_detalhes_terminal1` (`terminal`),
  KEY `fk_cupom_detalhes_produto1` (`produto`),
  KEY `fk_cupom_detalhes_loja1` (`loja`),
  CONSTRAINT `fk_cupom_detalhes_loja1` FOREIGN KEY (`loja`) REFERENCES `loja` (`idloja`) ON DELETE NO ACTION ON UPDATE NO ACTION,
  CONSTRAINT `fk_cupom_detalhes_produto1` FOREIGN KEY (`produto`) REFERENCES `produto` (`idProduto`) ON DELETE NO ACTION ON UPDATE NO ACTION,
  CONSTRAINT `fk_cupom_detalhes_terminal1` FOREIGN KEY (`terminal`) REFERENCES `terminal` (`idterminal`) ON DELETE NO ACTION ON UPDATE NO ACTION
) ENGINE=InnoDB DEFAULT CHARSET=latin1;

--
-- Dumping data for table `cupom_detalhes`
--

/*!40000 ALTER TABLE `cupom_detalhes` DISABLE KEYS */;
/*!40000 ALTER TABLE `cupom_detalhes` ENABLE KEYS */;


--
-- Definition of trigger `cupomdetalhes_last_insert`
--

DROP TRIGGER /*!50030 IF EXISTS */ `cupomdetalhes_last_insert`;

DELIMITER $$

CREATE DEFINER = `root`@`%` TRIGGER `cupomdetalhes_last_insert` BEFORE INSERT ON `cupom_detalhes` FOR EACH ROW BEGIN
declare VarCalcPisCofins smallint;
declare VarAliqPis decimal(15,3);
declare VarAliqCofins decimal(15,3);
declare VarTypePreco char(1);
declare VarCalcMedio smallint;
declare VarPrecoVendaInd char(1);
declare VarItemCodigo double;
declare VarItemSequencia int;
declare VarItemTerminal int;
declare VarItemLojaCupom double;
declare VarItemNumeroCupom double;
declare VarItemValorLiquido decimal(15,3);
declare VarItemCustoBruto decimal(15,3);
declare VarItemPrecoVenda decimal(15,3);
declare VarItemCustoLiquido decimal(15,3);
declare VarItemQttyEstoq decimal(15,3);
declare VarItemDataVenda date;
declare VarItemPeso decimal(15,3);
declare VarItemAliquota decimal(15,3);
declare VarItemValorICMS decimal(15,3);
declare VarItemBaseCalc decimal(15,3);
declare VarItemReduz decimal(15,3);
declare VarItemQtty decimal(15,3);
declare VarItemIDUN INT;
declare VarItemCFOP varchar(6);
declare VarItemCST VARCHAR(3);
declare VarItemCSTPIS varchar(3);
declare VarItemValorPis decimal(15,3);
declare VarItemBasePis decimal(15,3);
declare VarItemCSTCofins varchar(3);
declare VarItemValorCofins decimal(15,3);
declare VarItemBaseCofins decimal(15,3);
declare VarItemDiscount decimal(15,3);
declare VarItemValorDiscount decimal(15,3);
declare VarItemAcrescimo decimal(15,3);
declare VarItemValorAcrescimo decimal(15,3);
declare VarItemValorTotalProduto decimal(15,3);
declare VarItemValorTotalCupom decimal(15,3);
declare VarItemValorTotalLiquido decimal(15,3);
declare VarItemIdFornecedor int;
declare VarItemIdSetor int;
declare VarItemTributacao varchar(2);
declare VarItemTypeAliquota varchar(1);
declare VarItemGenero int;
declare VarItemTrunca varchar(1);
declare VarItemIPPT varchar(1);
declare VarItemOperador int;
declare VarItemCliente int;
declare VarItemSerie varchar(3);
declare VarItemModelo Varchar(3);
declare VarItemVendedor int;
declare VarConfigcalcPisCofins int;
declare VarConfigaliquotaPis decimal(15,3);
declare VarConfigaliquotaCofins decimal(15,3);
declare VarConfigPrecoUnificado char(1);
declare VarConfigCalcMedio smallint;
declare VarHistory varchar(45);
declare VarPrecoPromocional decimal(15,3);
declare VarMetodo int;
declare VarStoreCustoOperacional decimal(15,3);
declare VarItemCustoMedio decimal(15,3);


        declare func integer;
        declare maxSeq integer;
        declare newDiscount decimal(15,3) default 0;
        declare newAcrescimo decimal(15,3) default 0;
        declare newDiscountValue decimal(15,3) default 0;
        declare newAcrescimoValue decimal(15,3) default 0;
        declare typeTributacao varchar(1);
        declare newAliquotaBaseConvert decimal(15,3);
        declare newCstIcms varchar(3);
        declare newCFOP varchar(3);


if((select count(*) from conector.cupom_cabecalho tab where tab.numerocupom=new.numeroCupom and tab.terminal=new.terminal and tab.loja=new.loja ) > 0)then        

           select 
                    round((coalesce(aliquota,0) - (coalesce(aliquota,0)*(coalesce(reducao,0)/100))),2),
                    tipo,
                    cst
                                from aliquota 
                                        where idaliquota=NEW.tributacao into newAliquotaBaseConvert, typeTributacao, newCstIcms;
                                        set new.tipoTributacao=typeTributacao;
                                        set new.aliquota=newAliquotaBaseConvert;
                                        set new.cstIcms = newCstIcms;
                    if(typeTributacao = "s")then
                    SET new.cfop='5403';
                        else
                            set new.cfop='5102';
                    end if;

                    if(new.desconto > 0)then
                        set newDiscount = ifnull(new.desconto,'0'); 
                            if(newDiscount is null)then set newDiscount = 0; end if;
                                IF(newDiscount > 0)THEN 
                                    set newDiscountValue = TRUNCATE((((new.quantidade * coalesce(new.priceVenda))*newDiscount)/100),3); 
                                     if(newDiscountValue is not null)then
                                            set new.valorDesconto=newDiscountValue;
                                            set new.total = (new.total - new.valorDesconto);
                                            select ifnull(max(ifnull(sequencia,'0')),0) from fechamentoCaixa where loja=new.loja and terminal=new.terminal and dataMovimento=new.dataVenda into @a;
                                                if(@a > 0)then
                                                        update fechamentoCaixa set desconto=desconto + new.valordesconto where loja=new.loja and terminal=new.terminal and dataMovimento=new.dataVenda and sequencia=@a;
                                                end if;
                                     end if;
                                END IF;
                    end if;
                    
                    if(new.Acrescimo > 0)then
                            if(newAcrescimo is null)then set newAcrescimo = 0; end if;
                                IF(newAcrescimo > 0)THEN 
                                    set newAcrescimo = TRUNCATE((((new.quantidade * new.priceVenda)*newAcrescimo)/100),3);
                                     if(newAcrescimoValue is not null)then
                                            set new.valorAcrescimo=newAcrescimoValue;
                                            set new.total = (new.total + new.valorAcrescimo);
                                            
                                     end if;
                                END IF;
                    end if;

                select operador from cupom_cabecalho
                             where
                                `dataVenda`=new.`dataVenda` and
                                `loja`=new.`loja` and
                                `terminal`=new.`terminal` and
                                 numeroCupom = new.numeroCupom
                                                            into func;
                select max(ifnull(sequencia,'0')) from fechamentoCaixa
                                          where
                                            dataMovimento=new.`dataVenda` and
                                            loja = new.loja and
                                            terminal = new.terminal and funcionario=func into maxSeq;

                  if(new.statusProduto = 0)then
                   update `conector`.`cupom_cabecalho`
                        set


                          totalLiquido=totalLiquido + (new.quantidade*new.priceCusto),
                          totalBruto=totalBruto + (new.quantidade*new.priceVenda),
                          totalItens=(totalItens+new.quantidade)
                            where
                                `dataVenda`=new.`dataVenda` and
                                `loja`=new.`loja` and
                                `terminal`=new.`terminal` and
                                 numeroCupom = new.numeroCupom;
                                update conector.fechamentoCaixa
                                                            set
                                                            desconto=(desconto + new.ValorDesconto),
                                                            grandeTotalEnd=round((if(coalesce(grandeTotalEnd,0)=0,coalesce(grandeTotalBegin,0),coalesce(grandeTotalEnd,0)) + (new.quantidade*new.priceVenda)),2),
                                                            contadorFinal=new.numeroCupom
                                                                    where
                                                                              dataMovimento=new.`dataVenda` and
                                                                              loja = new.loja and
                                                                              terminal = new.terminal and funcionario=func and
                                                                              sequencia = maxSeq;
                                                     else if(new.statusProduto = 1)then

                       update `conector`.`cupom_cabecalho`
                          set
                            totalCancelado = totalCancelado + (new.quantidade*new.priceVenda)
                            where
                                `dataVenda`=new.`dataVenda` and
                                `loja`=new.`loja` and
                                `terminal`=new.`terminal` and
                                 numeroCupom = new.numeroCupom;

                                update conector.fechamentoCaixa
                                                set
                                                    desconto=(desconto + new.ValorDesconto),
                                                    grandeTotalEnd=round((if(coalesce(grandeTotalEnd,0)=0,coalesce(grandeTotalBegin,0),coalesce(grandeTotalEnd,0)) + (new.quantidade*new.priceVenda)),2),
                                                    contadorFinal=new.numeroCupom,
                                                    cancelado = (cancelado + (new.quantidade*new.priceVenda))
                                                        where
                                                            dataMovimento=new.`dataVenda` and
                                                            loja = new.loja and
                                                            terminal = new.terminal and funcionario=func and
                                                                                        sequencia = maxSeq;
                                                                              
                                                                              update conector.movimentocaixa  
                                                                                            SET valor=(valor-(new.quantidade*new.priceVenda))                                                     
                                                                                                                                where
                                                                                                                                    dataMovimento=new.`dataVenda` and
                                                                                                                                    loja = new.loja and
                                                                                                                                    terminal = new.terminal and
                                                                                                                                    funcionario=func;

    end if;
end if;


SELECT calcPisCofins,
       aliquotaPis,
       aliquotaCofins, custoOperacional FROM LOJA 
                        where idLoja=new.loja
                                into VarConfigcalcPisCofins,VarConfigaliquotaPis,VarConfigaliquotaCofins, VarStoreCustoOperacional;
select precoUnificado,calculaCustoMedio 
                        from system 
                                into VarConfigPrecoUnificado,VarConfigCalcMedio;
                                
                                if(new.reserva > 0)then
                                    select idMetodo from pedido where idPedido=new.reserva into VarMetodo;
                                end if;

                                if(VarMetodo is null)then set VarMetodo = 0; end if;


SELECT
            tab1.`Produto`,
						ifnull(tab1.sequencia,0),
						tab1.terminal,
						tab1.loja,
						tab1.numeroCupom as COO,
            coalesce(round((coalesce(tab5.`custoLiquido`,0) / tab1.quantidade),3),0) as 'Valor_Liquido',
            coalesce(tab5.priceFull,0) as Custo_Bruto,
            coalesce(tab1.priceVenda,0) as 'Preco Venda',
            ifnull(tab5.`custoLiquido`,0) as Custo_Liquido,
            coalesce(tab6.`quantidade`,0) as Estoque,
            tab1.dataVenda,
            0 AS 'Peso',
            coalesce(tab7.aliquota,0),
                                                                        CASE tab7.tipo
                                                                           when 's' then
                                                                                  0
                                                                            when 'i' then
                                                                                  0
                                                                           else
                                                                                 round((((coalesce(tab1.`total`,0) * (1- (coalesce(tab7.reducao,0)/100))) * coalesce(tab7.aliquota,0))/100),3)
                                                                           END as ICMS,
                                                                        CASE tab7.tipo
                                                                           when 's' then
                                                                                  0
                                                                            when 'i' then
                                                                                  0
                                                                           else
                                                                                 round((tab1.`total` * (1- (coalesce(tab7.reducao,0)/100))),3)
                                                                           END  AS 'Base Calculo',
                                                            coalesce(tab7.reducao,0),
                                                            coalesce(tab1.`quantidade`,0),
                                                            tab3.`idunidade`,
                                                            CASE tab7.tipo
                                                                           when 's' then
                                                                                  '5403'
                                                                           else   '5102'
                                                                           END,
                                                            CASE tab7.tipo
                                                                           when 's' then
                                                                                  '060'
                                                                           else   '000'
                                                                           END as 'CST',                                                
                                                tab9.cstPisSaida,
                                                if(tab9.aliquotaDebitoPis > 0, coalesce(tab5.priceFull,0) * ((tab9.aliquotaDebitoPis/100)),0.000) as "Valor Pis",
                                                if(tab8.creditoPis = 's',coalesce(tab5.priceFull,0), 0.000) base_pis,
                                                tab9.cstCofinsSaida,
                                                if(tab9.aliquotaDebitoCofins > 0, coalesce(tab5.priceFull,0) * ((tab9.aliquotaDebitoCofins/100)),0.000) as "Valor Cofins",
                                                if(tab8.creditoCofins = 's',coalesce(tab5.priceFull,0), 0.000) base_cofins,
                                                coalesce(tab1.desconto,0), 
                                                coalesce(tab1.valorDesconto,0),
                                                coalesce(tab1.acrescimo,0), 
                                                coalesce(tab1.valorAcrescimo,0), 
                                                coalesce(tab5.`priceVenda`,0) * Coalesce(tab1.quantidade,0) total_produto,
                                                tab1.`total` as total_cupom,
                                                (coalesce(tab5.`custoLiquido`,0) * coalesce(tab1.quantidade,0)) as total_liquido,
                                                coalesce(tab3.idFornecedor,0),
                                                coalesce(tab3.idSetor,0),
                                                tab4.tributacao,
                                                ifnull(tab7.tipo,"t") as Tipo_aliquota,
                                                tab4.idGenero,
                                                tab5.trunca,
                                                tab4.ippt,
                                                'IF' as Serie,
                                                '2D' as Modelo, tab.operador,
                                                tab.cliente,
                                                coalesce(tab5.precoPromocao,0),
                                                if(tab1.reserva>0, coalesce(tab1.vendedor,0),0), 
                                                tab4.idPisCofins, 
                                                coalesce(tab5.custoMedio,0),
                                                coalesce(tab5.margemLiquida,0),
                                                coalesce(tab5.lucroLiquido,0)
                                                from cupom_cabecalho tab
                                                                            inner join cupom_detalhes tab1 on(tab.numeroCupom = tab1.numeroCupom and tab.loja = tab1.loja and
                                                                                                              tab.terminal = tab1.terminal and tab.dataVenda = tab1.dataVenda)
                                                                            inner join produto tab3 on(tab1.Produto = tab3.idProduto)
                                                                            inner join produtoImpostos tab4 on(tab1.Produto = tab4.idProduto  and tab.Loja = tab4.idLoja)
                                                                            inner join produtoPrice tab5 on(tab1.Produto = tab5.IdProduto  and tab.Loja = tab5.idLoja)
                                                                            inner join produtoEstoques tab6 on(tab1.Produto = tab6.idProduto and tab.Loja = tab6.idLoja)
                                                                            inner join aliquota tab7 on(tab1.tributacao = tab7.idAliquota)
                                                                            inner join pisCofins tab8 on(tab4.idPisCofins = tab8.idPisCofins)
                                                                            inner join pisCofinsAnexo tab9 on(tab4.idPisCofins = tab9.idPisCofins and
                                                                                                              tab9.vigencia = (select max(vigencia)
                                                                                                                                    from pisCofinsAnexo
                                                                                                                                        where idPisCofins=tab8.idPisCofins))
                                                                            inner join cst tab10 on(tab4.cst = tab10.idCst)
                                                                            inner join spedNcm sped on(tab4.spedNcm = sped.idSpedNcm)
                                                                            where tab1.datavenda=new.dataVenda and tab1.numerocupom=new.numeroCupom and tab1.terminal=new.terminal and tab.loja=new.loja and tab1.sequencia=new.sequencia  into
                                                                                     VarItemCodigo,
                                                                                     VarItemSequencia,
                                                                                     VarItemTerminal,
                                                                                     VarItemLojaCupom,
                                                                                     VarItemNumeroCupom,
                                                                                     VarItemValorLiquido,
                                                                                     VarItemCustoBruto,
                                                                                     VarItemPrecoVenda,
                                                                                     VarItemCustoLiquido,
                                                                                     VarItemQttyEstoq,
                                                                                     VarItemDataVenda,
                                                                                     VarItemPeso,
                                                                                     VarItemAliquota,
                                                                                     VarItemValorICMS,
                                                                                     VarItemBaseCalc,
                                                                                     VarItemReduz,
                                                                                     VarItemQtty,
                                                                                     VarItemIDUN,
                                                                                     VarItemCFOP,
                                                                                     VarItemCST,
                                                                                     VarItemCSTPIS,
                                                                                     VarItemValorPis,
                                                                                     VarItemBasePis,
                                                                                     VarItemCSTCofins,
                                                                                     VarItemValorCofins,
                                                                                     VarItemBaseCofins,
                                                                                     VarItemDiscount,
                                                                                     VarItemValorDiscount,
                                                                                     VarItemAcrescimo,
                                                                                     VarItemValorAcrescimo,
                                                                                     VarItemValorTotalProduto,
                                                                                     VarItemValorTotalCupom,
                                                                                     VarItemValorTotalLiquido,
                                                                                     VarItemIdFornecedor,
                                                                                     VarItemIdSetor,
                                                                                     VarItemTributacao,
                                                                                     VarItemTypeAliquota,
                                                                                     VarItemGenero,
                                                                                     VarItemTrunca,
                                                                                     VarItemIPPT,
                                                                                     VarItemSerie,
                                                                                     VarItemModelo,
                                                                                     VarItemOperador, 
                                                                                     VarItemCliente,
                                                                                     VarPrecoPromocional, 
                                                                                     VarItemVendedor,
                                                                                     @idPisCofins,
                                                                                     VarItemCustoMedio, 
                                                                                     @mLiquida, 
                                                                                     @lliquido;
                           
                                            set VarStoreCustoOperacional = ((VarStoreCustoOperacional/100) * VarItemValorTotalProduto);
                                                                                     
                                
                                                                    
    set VarHistory=Concat('CUPOM FISCAL.: ',new.numeroCupom,'2D',' EMISSAO.: ',new.dataVenda,' PRODUTO.: ', ifnull(new.produto,'0') ,' ITEM.: ',ifnull(new.sequencia,''));


                        
                            INSERT INTO `conector`.`produtomovimento`
                            (
                                `idProduto`,
                                `idloja`,
                                 idTerminal,
                                 data,
                                `cupom`,
                                `pessoa`,
                                `custoLiquido`,
                                `fornecedor`,
                                `setor`,
                                `grupo`,
                                `categoria`,
                                `margem`,
                                `lucro`,
                                `precoVenda`,
                                `precoCusto`,
                                `valorTotal`,
                                `icms`,
                                `cofins`,
                                `pis`,
                                `aliquota`,
                                 reducao,
                                `creditoPis`,
                                `creditoCofins`,
                                 sequencia,
                                `promocao`,
                                `time`,
                                `discount`,
                                `vendedor`,
                                `metodo`,
                                `historico`,
                                `qttyCancel`,
                                `precoOriginal`,
                                `finalizadora`,
                                `quantidade`,
                                 custoOperacional,
                                 custoReposicao,
                                 tributacao,
                                 tipoProcesso,
                                 custoTransferencia,
                                 pedido,
                                 nota,
                                 serie,
                                 modelo,
                                 situacao,
                                 aliquotaFim,
                                 tipoAliquota
                                )
                                        VALUES
                                (
                                new.produto,
                                new.loja,
                                new.terminal,
                                now(),
                                VarItemNumeroCupom,
                                VarItemCliente,
                                ifnull(VarItemCustoLiquido,'0'),
                                VarItemIdFornecedor,
                                ifnull(VarItemIdSetor,0),
                                0,
                                0,
                                ifnull(@mLiquida,0),
                                ifnull(@lliquido,0),
                                ifnull(VarItemPrecoVenda,'0'),
                        				ifnull(VarItemCustoBruto,'0'),
                                ifnull(VarItemValorTotalCupom,'0'),
                                ifnull(VarItemValorICMS,'0'),
                                if(VarConfigcalcPisCofins=0,0,VarConfigaliquotaPis),
                                if(VarConfigcalcPisCofins=0,0,VarConfigaliquotaCofins),
                  			        coalesce(VarItemAliquota,0),
                        				coalesce(VarItemReduz,0),
                                coalesce(VarItemValorPis,0),
                                coalesce(VarItemValorCofins,0),
                        				ifnull(VarItemSequencia,'0'),
                        				if(VarPrecoPromocional > 0,'Y','N'),
                        				now(),
                        				ifnull(VarItemDiscount,0),
                                coalesce(VarItemVendedor,0),
                        				coalesce(VarMetodo,0),
                                ifnull(VarHistory,'ORIGEM DESCONHECIDA - CUPOM'),
                                if(new.situacao=1,new.quantidade,0),
                                coalesce(new.priceVenda,0),
                                '0', 
                                coalesce(VarItemQtty,0),
                                coalesce(VarStoreCustoOperacional,0),
                        				'0', 
                                ifnull(VarItemTributacao,''),
                        				'S',
                                0,
                                new.reserva,
                        				new.numeroCupom,
                        				VarItemSerie,
                        				VarItemModelo,
                        				if(new.situacao=1,"02","01"),
                                coalesce(new.aliquota,0),
                                VarItemTypeAliquota

                        );

        call conector_inc_movimentacao(
                                            new.produto,
                                            new.loja,
                                            VarHistory,
                                            '-',
                                            new.quantidade,
                                            0, 
                                            new.numeroCupom,
                                            new.terminal,
                                            VarItemCustoLiquido,
                                            VarItemCustoMedio,
                                            (coalesce(VarItemPrecoVenda,0) - coalesce(VarItemValorDiscount,0)+coalesce(VarItemValorAcrescimo,0)),
                                            @mLiquida,
                                            2,
                                            'PDV-FISCAL'
                                      );

end if;
END $$

DELIMITER ;

--
-- Definition of table `cupom_movimento`
--

DROP TABLE IF EXISTS `cupom_movimento`;
CREATE TABLE `cupom_movimento` (
  `numeroCupom` double NOT NULL,
  `loja` int(11) NOT NULL,
  `terminal` int(11) NOT NULL,
  `dataVenda` date NOT NULL,
  `sequencia` int(11) NOT NULL,
  `finalizadora` int(11) NOT NULL,
  `valor` decimal(15,2) DEFAULT NULL,
  `troco` decimal(15,2) DEFAULT NULL,
  `juros` decimal(15,2) DEFAULT NULL,
  `autentica` smallint(6) DEFAULT '0',
  `convenio` varchar(16) DEFAULT NULL,
  `conveniado` varchar(16) DEFAULT NULL,
  `documento_not_fiscal` double DEFAULT NULL,
  `chequeDeposito` date DEFAULT NULL,
  `chequeNumero` varchar(10) DEFAULT NULL,
  `chequeConta` varchar(10) DEFAULT NULL,
  `chequeAgencia` varchar(10) DEFAULT NULL,
  `documentoCPF_CNPJ` varchar(16) DEFAULT NULL,
  `numeroCartao` varchar(16) DEFAULT NULL,
  `parcelamentoCartao` int(11) DEFAULT NULL,
  `tipoCartao` char(1) DEFAULT NULL,
  `usuario` int(11) DEFAULT NULL,
  `banco` int(11) DEFAULT NULL,
  `ccf` double NOT NULL DEFAULT '0',
  `cripto` varchar(600) DEFAULT NULL,
  `descricaoFinalizadora` varchar(30) DEFAULT NULL,
  `md5_finalizadora` varchar(100) DEFAULT NULL,
  `situacao` varchar(1) DEFAULT NULL,
  `tipoDoc` varchar(1) DEFAULT '1',
  PRIMARY KEY (`numeroCupom`,`loja`,`terminal`,`dataVenda`,`sequencia`),
  KEY `fk_cupom_movimento_loja1` (`loja`),
  KEY `fk_cupom_movimento_terminal1` (`terminal`),
  KEY `fk_cupom_movimento_finalizadora1` (`finalizadora`),
  CONSTRAINT `fk_cupom_movimento_finalizadora1` FOREIGN KEY (`finalizadora`) REFERENCES `finalizadora` (`idfinalizadora`) ON DELETE NO ACTION ON UPDATE NO ACTION,
  CONSTRAINT `fk_cupom_movimento_loja1` FOREIGN KEY (`loja`) REFERENCES `loja` (`idloja`) ON DELETE NO ACTION ON UPDATE NO ACTION,
  CONSTRAINT `fk_cupom_movimento_terminal1` FOREIGN KEY (`terminal`) REFERENCES `terminal` (`idterminal`) ON DELETE NO ACTION ON UPDATE NO ACTION
) ENGINE=InnoDB DEFAULT CHARSET=latin1;

--
-- Dumping data for table `cupom_movimento`
--

/*!40000 ALTER TABLE `cupom_movimento` DISABLE KEYS */;
/*!40000 ALTER TABLE `cupom_movimento` ENABLE KEYS */;


--
-- Definition of trigger `cupom_movimento_last`
--

DROP TRIGGER /*!50030 IF EXISTS */ `cupom_movimento_last`;

DELIMITER $$

CREATE DEFINER = `master`@`localhost` TRIGGER `cupom_movimento_last` BEFORE INSERT ON `cupom_movimento` FOR EACH ROW begin

        declare func integer;
        declare maxSeq integer;

                select operador from cupom_cabecalho
                             where
                                `dataVenda`=new.`dataVenda` and
                                `loja`=new.`loja` and
                                `terminal`=new.`terminal` and
                                 numeroCupom = new.numeroCupom
                                                            into func;

                select max(sequencia) from fechamentoCaixa
                                          where
                                            dataMovimento=new.`dataVenda` and
                                            loja = new.loja and
                                            terminal = new.terminal and funcionario=func into maxSeq;

                                                                  update conector.movimentocaixa
                                                                                                set
                                                                                                    quantidade=(ifnull(quantidade,0) + 1)
                                                                                                                 where
                                                                                                                       dataMovimento=new.`dataVenda` and
                                                                                                                       loja = new.loja and
                                                                                                                                    terminal = new.terminal and funcionario=func and finalizadora=new.finalizadora;
                                                                                                                                    
if (new.finalizadora = 1) then                                                                                                                                    
select ifnull(cliente,0),ifnull(pedido,0), ifnull(operador,0) from cupom_cabecalho where 
numeroCupom=new.numeroCupom and loja=new.loja and terminal=new.terminal and dataVenda=new.dataVenda
into @cliente, @pedido, @operador;

select count(*), coalesce(metodo,0) from cupom_detalhes
where numeroCupom=new.numeroCupom and loja=new.loja and terminal=new.terminal and dataVenda=new.terminal
into @a,@metodo;



replace INTO `conector`.`money`
                                    (
                                        `idpedido`,
                                        `idloja`,
                                        `idfinalizadora`,
                                        `idcliente`,
                                        `idmetodo`,
                                        `idfuncionario`,
                                        `emissao`,
                                        `valorTotal`,
                                         terminal,
                                        `observacao`, faturado,cupom
                                    )
                                                VALUES
                                    (
                                        @pedido,
                                        new.`loja`,
                                        new.finalizadora,
                                        @cliente,
                                        @metodo,
                                        @operador,
                                        new.dataVenda,
                                        new.`valor`,
                                        new.terminal,
                                        "",1, new.numeroCupom
                );
                end if;
end $$

DELIMITER ;

--
-- Definition of table `cupom_relatorio`
--

DROP TABLE IF EXISTS `cupom_relatorio`;
CREATE TABLE `cupom_relatorio` (
  `numeroCupom` double NOT NULL,
  `idloja` int(11) NOT NULL,
  `operador` int(11) NOT NULL,
  `terminal` int(11) NOT NULL,
  `denominacao` varchar(2) NOT NULL,
  `emissao` date NOT NULL,
  `hora` time NOT NULL,
  `gnf` double NOT NULL,
  `cdc` double NOT NULL,
  `grg` double NOT NULL,
  PRIMARY KEY (`numeroCupom`,`idloja`,`operador`,`terminal`),
  KEY `fk_cupom_relatorio_loja1` (`idloja`),
  KEY `fk_cupom_relatorio_funcionario1` (`operador`),
  KEY `fk_cupom_relatorio_terminal1` (`terminal`),
  CONSTRAINT `fk_cupom_relatorio_funcionario1` FOREIGN KEY (`operador`) REFERENCES `funcionario` (`idfuncionario`) ON DELETE NO ACTION ON UPDATE NO ACTION,
  CONSTRAINT `fk_cupom_relatorio_loja1` FOREIGN KEY (`idloja`) REFERENCES `loja` (`idloja`) ON DELETE NO ACTION ON UPDATE NO ACTION,
  CONSTRAINT `fk_cupom_relatorio_terminal1` FOREIGN KEY (`terminal`) REFERENCES `terminal` (`idterminal`) ON DELETE NO ACTION ON UPDATE NO ACTION
) ENGINE=InnoDB DEFAULT CHARSET=latin1;

--
-- Dumping data for table `cupom_relatorio`
--

/*!40000 ALTER TABLE `cupom_relatorio` DISABLE KEYS */;
/*!40000 ALTER TABLE `cupom_relatorio` ENABLE KEYS */;


--
-- Definition of table `cupom_relatorio_meio_pgto`
--

DROP TABLE IF EXISTS `cupom_relatorio_meio_pgto`;
CREATE TABLE `cupom_relatorio_meio_pgto` (
  `numeroCupom` double NOT NULL,
  `idloja` int(11) NOT NULL,
  `operador` int(11) NOT NULL,
  `terminal` int(11) NOT NULL,
  `emissao` date NOT NULL,
  `hora` time NOT NULL,
  `gnf` double NOT NULL,
  `cdc` double NOT NULL,
  `valor` decimal(15,2) NOT NULL DEFAULT '0.00',
  `valorEstorno` decimal(15,2) NOT NULL DEFAULT '0.00',
  `indicadorEstorno` varchar(1) NOT NULL DEFAULT 'n',
  `idfinalizadora` int(11) NOT NULL,
  `chave` double NOT NULL,
  PRIMARY KEY (`numeroCupom`,`idloja`,`operador`,`terminal`,`idfinalizadora`,`chave`),
  KEY `fk_cupom_relatorio_loja1` (`idloja`),
  KEY `fk_cupom_relatorio_funcionario1` (`operador`),
  KEY `fk_cupom_relatorio_terminal1` (`terminal`),
  KEY `fk_cupom_relatorio_meio_pgto_finalizadora1` (`idfinalizadora`),
  CONSTRAINT `fk_cupom_relatorio_funcionario10` FOREIGN KEY (`operador`) REFERENCES `funcionario` (`idfuncionario`) ON DELETE NO ACTION ON UPDATE NO ACTION,
  CONSTRAINT `fk_cupom_relatorio_loja10` FOREIGN KEY (`idloja`) REFERENCES `loja` (`idloja`) ON DELETE NO ACTION ON UPDATE NO ACTION,
  CONSTRAINT `fk_cupom_relatorio_meio_pgto_finalizadora1` FOREIGN KEY (`idfinalizadora`) REFERENCES `finalizadora` (`idfinalizadora`) ON DELETE NO ACTION ON UPDATE NO ACTION,
  CONSTRAINT `fk_cupom_relatorio_terminal10` FOREIGN KEY (`terminal`) REFERENCES `terminal` (`idterminal`) ON DELETE NO ACTION ON UPDATE NO ACTION
) ENGINE=InnoDB DEFAULT CHARSET=latin1;

--
-- Dumping data for table `cupom_relatorio_meio_pgto`
--

/*!40000 ALTER TABLE `cupom_relatorio_meio_pgto` DISABLE KEYS */;
/*!40000 ALTER TABLE `cupom_relatorio_meio_pgto` ENABLE KEYS */;


--
-- Definition of table `dav02`
--

DROP TABLE IF EXISTS `dav02`;
CREATE TABLE `dav02` (
  `chave` double NOT NULL AUTO_INCREMENT,
  `d01` varchar(45) NOT NULL,
  `d02` varchar(45) NOT NULL,
  `d03` varchar(45) NOT NULL,
  `d04` varchar(45) NOT NULL,
  `d05` varchar(45) NOT NULL,
  `d06` varchar(45) NOT NULL,
  `d07` varchar(45) NOT NULL,
  `d08` varchar(45) NOT NULL,
  `d09` varchar(45) NOT NULL,
  `d10` varchar(45) NOT NULL,
  `d11` varchar(45) NOT NULL,
  `d12` varchar(45) NOT NULL,
  `d13` varchar(45) NOT NULL,
  `d14` varchar(45) NOT NULL,
  `d15` varchar(45) NOT NULL,
  `d16` varchar(45) NOT NULL,
  `d17` varchar(45) NOT NULL,
  PRIMARY KEY (`chave`)
) ENGINE=InnoDB DEFAULT CHARSET=latin1;

--
-- Dumping data for table `dav02`
--

/*!40000 ALTER TABLE `dav02` DISABLE KEYS */;
/*!40000 ALTER TABLE `dav02` ENABLE KEYS */;


--
-- Definition of table `dav03`
--

DROP TABLE IF EXISTS `dav03`;
CREATE TABLE `dav03` (
  `chave` double NOT NULL AUTO_INCREMENT,
  `d01` varchar(45) NOT NULL,
  `d02` varchar(45) NOT NULL,
  `d03` varchar(45) NOT NULL,
  `d04` varchar(45) NOT NULL,
  `d05` varchar(45) NOT NULL,
  `d06` varchar(45) NOT NULL,
  `d07` varchar(45) NOT NULL,
  `d08` varchar(45) NOT NULL,
  `d09` varchar(45) NOT NULL,
  `d10` varchar(45) NOT NULL,
  `d11` varchar(45) NOT NULL,
  `d12` varchar(45) NOT NULL,
  `d13` varchar(45) NOT NULL,
  `d14` varchar(45) NOT NULL,
  `d15` varchar(45) NOT NULL,
  `d16` varchar(45) NOT NULL,
  `d17` varchar(45) NOT NULL,
  `d18` varchar(45) NOT NULL,
  PRIMARY KEY (`chave`)
) ENGINE=InnoDB DEFAULT CHARSET=latin1;

--
-- Dumping data for table `dav03`
--

/*!40000 ALTER TABLE `dav03` DISABLE KEYS */;
/*!40000 ALTER TABLE `dav03` ENABLE KEYS */;


--
-- Definition of table `dav04`
--

DROP TABLE IF EXISTS `dav04`;
CREATE TABLE `dav04` (
  `chave` double NOT NULL AUTO_INCREMENT,
  `d01` varchar(45) NOT NULL,
  `d02` varchar(45) NOT NULL,
  `d03` varchar(45) NOT NULL,
  `d04` varchar(45) NOT NULL,
  `d05` varchar(45) NOT NULL,
  `d06` varchar(45) NOT NULL,
  `d07` varchar(45) NOT NULL,
  `d08` varchar(45) NOT NULL,
  `d09` varchar(45) NOT NULL,
  `d10` varchar(45) NOT NULL,
  `d11` varchar(45) NOT NULL,
  `d12` varchar(45) NOT NULL,
  `d13` varchar(45) NOT NULL,
  `d14` varchar(45) NOT NULL,
  `d15` varchar(45) NOT NULL,
  `d16` varchar(45) NOT NULL,
  `d17` varchar(45) NOT NULL,
  `d18` varchar(45) NOT NULL,
  `d19` varchar(45) NOT NULL,
  PRIMARY KEY (`chave`)
) ENGINE=InnoDB DEFAULT CHARSET=latin1;

--
-- Dumping data for table `dav04`
--

/*!40000 ALTER TABLE `dav04` DISABLE KEYS */;
/*!40000 ALTER TABLE `dav04` ENABLE KEYS */;


--
-- Definition of table `denominacao`
--

DROP TABLE IF EXISTS `denominacao`;
CREATE TABLE `denominacao` (
  `iddenominacao` varchar(2) NOT NULL,
  `denomincao` varchar(45) NOT NULL,
  PRIMARY KEY (`iddenominacao`)
) ENGINE=InnoDB DEFAULT CHARSET=latin1;

--
-- Dumping data for table `denominacao`
--

/*!40000 ALTER TABLE `denominacao` DISABLE KEYS */;
/*!40000 ALTER TABLE `denominacao` ENABLE KEYS */;


--
-- Definition of table `dependente`
--

DROP TABLE IF EXISTS `dependente`;
CREATE TABLE `dependente` (
  `cliente` int(11) NOT NULL,
  `dependente` int(11) NOT NULL,
  PRIMARY KEY (`cliente`,`dependente`),
  KEY `fk_dependente_cliente2` (`dependente`),
  CONSTRAINT `fk_dependente_cliente1` FOREIGN KEY (`cliente`) REFERENCES `cliente` (`idcliente`) ON DELETE NO ACTION ON UPDATE NO ACTION,
  CONSTRAINT `fk_dependente_cliente2` FOREIGN KEY (`dependente`) REFERENCES `cliente` (`idcliente`) ON DELETE NO ACTION ON UPDATE NO ACTION
) ENGINE=InnoDB DEFAULT CHARSET=latin1;

--
-- Dumping data for table `dependente`
--

/*!40000 ALTER TABLE `dependente` DISABLE KEYS */;
/*!40000 ALTER TABLE `dependente` ENABLE KEYS */;


--
-- Definition of table `detalhe_reducao`
--

DROP TABLE IF EXISTS `detalhe_reducao`;
CREATE TABLE `detalhe_reducao` (
  `idloja` int(11) NOT NULL,
  `numeroCaixa` varchar(20) NOT NULL,
  `crz` varchar(6) NOT NULL,
  `mf_letra` varchar(1) DEFAULT NULL,
  `modelo` varchar(20) NOT NULL,
  `operador` int(11) NOT NULL,
  `valorAcumulado` decimal(15,2) NOT NULL,
  `totalizador` varchar(7) NOT NULL,
  `cripto` varchar(600) NOT NULL,
  PRIMARY KEY (`idloja`,`numeroCaixa`,`crz`,`totalizador`),
  KEY `fk_detalhe_reducao_funcionario1` (`operador`),
  KEY `fk_detalhe_reducao_loja1` (`idloja`),
  CONSTRAINT `fk_detalhe_reducao_funcionario1` FOREIGN KEY (`operador`) REFERENCES `funcionario` (`idfuncionario`) ON DELETE NO ACTION ON UPDATE NO ACTION,
  CONSTRAINT `fk_detalhe_reducao_loja1` FOREIGN KEY (`idloja`) REFERENCES `loja` (`idloja`) ON DELETE NO ACTION ON UPDATE NO ACTION
) ENGINE=InnoDB DEFAULT CHARSET=latin1;

--
-- Dumping data for table `detalhe_reducao`
--

/*!40000 ALTER TABLE `detalhe_reducao` DISABLE KEYS */;
/*!40000 ALTER TABLE `detalhe_reducao` ENABLE KEYS */;


--
-- Definition of table `detalhe_reducao_aliquota`
--

DROP TABLE IF EXISTS `detalhe_reducao_aliquota`;
CREATE TABLE `detalhe_reducao_aliquota` (
  `idLoja` int(11) NOT NULL,
  `numeroCaixa` varchar(20) NOT NULL,
  `movimento` date NOT NULL,
  `crz` varchar(6) NOT NULL,
  `aliquota` decimal(15,3) NOT NULL,
  `tipo` varchar(1) NOT NULL,
  `base` decimal(15,3) NOT NULL DEFAULT '0.000',
  `reducao` decimal(15,3) DEFAULT '0.000',
  `valor` decimal(15,3) NOT NULL DEFAULT '0.000',
  `cripto` varchar(600) DEFAULT NULL,
  PRIMARY KEY (`idLoja`,`numeroCaixa`,`movimento`,`crz`,`aliquota`,`tipo`)
) ENGINE=InnoDB DEFAULT CHARSET=latin1;

--
-- Dumping data for table `detalhe_reducao_aliquota`
--

/*!40000 ALTER TABLE `detalhe_reducao_aliquota` DISABLE KEYS */;
/*!40000 ALTER TABLE `detalhe_reducao_aliquota` ENABLE KEYS */;


--
-- Definition of table `email`
--

DROP TABLE IF EXISTS `email`;
CREATE TABLE `email` (
  `idemail` double NOT NULL AUTO_INCREMENT,
  `idcliente` int(11) NOT NULL,
  `mail` varchar(70) NOT NULL,
  `padrao` smallint(6) NOT NULL DEFAULT '0',
  PRIMARY KEY (`idemail`),
  UNIQUE KEY `mail_UNIQUE` (`mail`),
  KEY `fk_email_cliente1` (`idcliente`),
  CONSTRAINT `fk_email_cliente1` FOREIGN KEY (`idcliente`) REFERENCES `cliente` (`idcliente`) ON DELETE NO ACTION ON UPDATE NO ACTION
) ENGINE=InnoDB DEFAULT CHARSET=latin1;

--
-- Dumping data for table `email`
--

/*!40000 ALTER TABLE `email` DISABLE KEYS */;
/*!40000 ALTER TABLE `email` ENABLE KEYS */;


--
-- Definition of table `endereco`
--

DROP TABLE IF EXISTS `endereco`;
CREATE TABLE `endereco` (
  `idendereco` int(11) NOT NULL AUTO_INCREMENT,
  `idcliente` int(11) NOT NULL,
  `sequencia` int(11) NOT NULL,
  `cep` int(11) NOT NULL,
  `idcepbairro` int(11) NOT NULL,
  `idenderecoType` int(11) NOT NULL,
  `bairro` varchar(45) DEFAULT NULL,
  `logradouro` varchar(45) DEFAULT NULL,
  `complemento` varchar(60) DEFAULT NULL,
  `municipio` varchar(45) DEFAULT NULL,
  `estado` char(2) NOT NULL,
  `numero` int(11) DEFAULT '0',
  PRIMARY KEY (`idendereco`,`idcliente`,`sequencia`),
  KEY `fk_endereco_enderecoType1` (`idenderecoType`),
  KEY `fk_endereco_cepbairro1` (`idcepbairro`,`cep`),
  KEY `fk_endereco_cliente1` (`idcliente`) USING BTREE,
  CONSTRAINT `fk_endereco_cepbairro1` FOREIGN KEY (`idcepbairro`, `cep`) REFERENCES `cepbairro` (`idcepbairro`, `cep`) ON DELETE NO ACTION ON UPDATE NO ACTION,
  CONSTRAINT `fk_endereco_cliente1` FOREIGN KEY (`idcliente`) REFERENCES `cliente` (`idcliente`) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT `fk_endereco_enderecoType1` FOREIGN KEY (`idenderecoType`) REFERENCES `enderecotype` (`idenderecoType`) ON DELETE NO ACTION ON UPDATE NO ACTION
) ENGINE=InnoDB DEFAULT CHARSET=latin1;

--
-- Dumping data for table `endereco`
--

/*!40000 ALTER TABLE `endereco` DISABLE KEYS */;
/*!40000 ALTER TABLE `endereco` ENABLE KEYS */;


--
-- Definition of trigger `AltEndereco_last_insert`
--

DROP TRIGGER /*!50030 IF EXISTS */ `AltEndereco_last_insert`;

DELIMITER $$

CREATE DEFINER = `master`@`localhost` TRIGGER `AltEndereco_last_insert` AFTER INSERT ON `endereco` FOR EACH ROW begin
  if (new.sequencia = 2) then
      insert into clienteEntrega(idendereco,idCliente,sequencia,default1)values(new.idendereco, new.idcliente, new.sequencia,false);
  end if;
  if (new.sequencia = 3) then
      insert into clienteCobranca(idendereco,idCliente,sequencia,default1)values(new.idendereco, new.idcliente,new.sequencia,false);
  end if;
end $$

DELIMITER ;

--
-- Definition of trigger `alter_exe_endereco`
--

DROP TRIGGER /*!50030 IF EXISTS */ `alter_exe_endereco`;

DELIMITER $$

CREATE DEFINER = `master`@`localhost` TRIGGER `alter_exe_endereco` BEFORE UPDATE ON `endereco` FOR EACH ROW begin
    select versaoBanco,versaoSystem,ip_mq from system into @a,@b,@c;
    select idUsuario from cliente where idCliente=new.idCliente into @d;

    if(new.numero <> old.numero)then

                call conector_exe_alt("MODULO [ENDERECO]", @d, concat("INFORMACAO OLD.: " , old.numero," INFORMACAO NEW.: ", new.numero), @c, 11,  @b, "FIELD.: NUMERO RESIDENTE",null, old.numero);

                        else if(old.bairro <> new.bairro)then

                                        call conector_exe_alt("MODULO [ENDERECO]", @d, concat("INFORMACAO OLD.: " , old.bairro," INFORMACAO NEW.: ", new.bairro), @c, 13,  @b, "FIELD BAIRRO",null, old.bairro);
                                        
                                                                        else if(old.complemento <> new.complemento)then

                                                                                    call conector_exe_alt("MODULO [ENDERECO]", @d, concat("INFORMACAO OLD.: " , 12," INFORMACAO NEW.: ", new.complemento, old.complemento), @c, new.idCliente,  @b, "FIELD COMPLEMENTO",null,new.idEndereco);
                                                                                    
                                                                                        else if(old.bairro <> new.bairro)then

                                                                                                call conector_exe_alt("MODULO [ENDERECO]", @d, concat("INFORMACAO OLD.: " , old.logradouro," INFORMACAO NEW.: ", new.logradouro), @c, 10,  @b, "FIELD LOGRADOURO", old.logradouro,new.idEndereco);
                                                                                        end if;
                                                            end if;

                end if;
    end if;
end $$

DELIMITER ;

--
-- Definition of table `enderecotype`
--

DROP TABLE IF EXISTS `enderecotype`;
CREATE TABLE `enderecotype` (
  `idenderecoType` int(11) NOT NULL AUTO_INCREMENT,
  `descricao` varchar(30) DEFAULT NULL,
  PRIMARY KEY (`idenderecoType`)
) ENGINE=InnoDB DEFAULT CHARSET=latin1;

--
-- Dumping data for table `enderecotype`
--

/*!40000 ALTER TABLE `enderecotype` DISABLE KEYS */;
/*!40000 ALTER TABLE `enderecotype` ENABLE KEYS */;


--
-- Definition of table `entrada`
--

DROP TABLE IF EXISTS `entrada`;
CREATE TABLE `entrada` (
  `identrada` double NOT NULL AUTO_INCREMENT,
  `idloja` int(11) NOT NULL,
  `idcliente` int(11) NOT NULL,
  `cfop` varchar(6) NOT NULL,
  `idOperacao` int(11) NOT NULL,
  `idSituacaoFiscal` char(2) NOT NULL,
  `idCodigoFiscal` int(11) NOT NULL,
  `modNotaFiscal` varchar(3) NOT NULL,
  `idUsuario` int(11) NOT NULL,
  `emissao` date NOT NULL,
  `entrada` date NOT NULL,
  `alteracao` date NOT NULL,
  `idUsuarioAlteracao` int(11) NOT NULL,
  `nr_nota` varchar(10) NOT NULL,
  `serie` varchar(3) NOT NULL,
  `typeNota` varchar(1) NOT NULL COMMENT 'p - produto\nb - bonificacao\ns - serviço',
  `idCompra` double NOT NULL,
  `sumSt` smallint(6) NOT NULL DEFAULT '0',
  `substituicao` decimal(15,3) NOT NULL DEFAULT '0.000',
  `creditoIcms` decimal(15,3) NOT NULL DEFAULT '0.000',
  `bonificacao` decimal(15,3) NOT NULL DEFAULT '0.000',
  `conhecimentoFrete` double NOT NULL DEFAULT '0',
  `idtransportadora` int(11) NOT NULL,
  `sumFrete` smallint(6) NOT NULL DEFAULT '0',
  `frete` decimal(15,3) NOT NULL DEFAULT '0.000',
  `valorFrete` decimal(15,3) NOT NULL DEFAULT '0.000',
  `icmsFrete` decimal(15,3) NOT NULL,
  `vendo` decimal(15,3) NOT NULL DEFAULT '0.000',
  `vendoValor` decimal(15,3) NOT NULL DEFAULT '0.000',
  `incideFinanProduto` smallint(6) NOT NULL DEFAULT '0',
  `financeiro` decimal(15,3) NOT NULL DEFAULT '0.000',
  `financeiroValor` decimal(15,3) NOT NULL DEFAULT '0.000',
  `baseCalculoIcms` decimal(15,3) NOT NULL DEFAULT '0.000',
  `baseCalculoIpi` decimal(15,3) NOT NULL DEFAULT '0.000',
  `valorIcmsSubstuicao` decimal(15,3) NOT NULL DEFAULT '0.000',
  `baseCalculoSubstituicao` decimal(15,3) NOT NULL DEFAULT '0.000',
  `totalProdutoSubstituicao` decimal(15,3) NOT NULL DEFAULT '0.000',
  `valorPis` decimal(15,3) NOT NULL DEFAULT '0.000',
  `valorCofins` decimal(15,3) NOT NULL DEFAULT '0.000',
  `baseCofins` decimal(15,3) NOT NULL DEFAULT '0.000',
  `basePis` decimal(15,3) NOT NULL DEFAULT '0.000',
  `discountFinalNota` smallint(6) NOT NULL DEFAULT '0',
  `valorDesconto` decimal(15,3) NOT NULL DEFAULT '0.000',
  `porcetagemDesconto` decimal(15,3) NOT NULL DEFAULT '0.000',
  `valorDespesasAcessorias` decimal(15,3) NOT NULL DEFAULT '0.000',
  `porcentagemDespesasAcessorias` decimal(15,3) NOT NULL DEFAULT '0.000',
  `typeFrete` char(1) NOT NULL DEFAULT 'c' COMMENT 'c - CIF\nf - FOB\no - OUTROS\ns - SEM FRETE',
  `totalItens` decimal(15,3) NOT NULL DEFAULT '0.000',
  `volume` decimal(15,3) NOT NULL DEFAULT '0.000',
  `valorDivergenciaFinal` decimal(15,3) NOT NULL DEFAULT '0.000',
  `valorTotalCompra` decimal(15,3) NOT NULL DEFAULT '0.000',
  `valorTotalBonificacao` decimal(15,3) NOT NULL DEFAULT '0.000',
  `valorTotalIpi` decimal(15,3) NOT NULL DEFAULT '0.000',
  `valorTotalCustoLiquido` decimal(15,3) NOT NULL DEFAULT '0.000',
  `valorTotalNota` decimal(15,3) NOT NULL DEFAULT '0.000',
  `valorTotalProduto` decimal(15,3) NOT NULL DEFAULT '0.000',
  `valorTotalVenda` decimal(15,3) NOT NULL DEFAULT '0.000',
  `informacaoComplementares` varchar(100) DEFAULT NULL COMMENT 'OBSERVAÇÃO',
  `impApurado` decimal(15,3) NOT NULL DEFAULT '0.000',
  `impInformado` decimal(15,3) NOT NULL DEFAULT '0.000',
  `valueApurado` decimal(15,3) NOT NULL DEFAULT '0.000',
  `valueInformado` decimal(15,3) NOT NULL DEFAULT '0.000',
  `valueIpiApurado` decimal(15,3) NOT NULL DEFAULT '0.000',
  `totalBaseCalculoSubstituicao` decimal(15,3) NOT NULL DEFAULT '0.000' COMMENT 'campo calculado via triggers',
  `totalIcmsST` decimal(15,3) NOT NULL DEFAULT '0.000' COMMENT 'campo calculado via triggers',
  `status` char(1) NOT NULL DEFAULT '0' COMMENT '0 - pedente\n1 - atualizada\n2 - nfePedente\n3 - nfeCancelada\n4 - nfeAutorizada\n5 - cancelada',
  `baseFrete` decimal(15,3) NOT NULL DEFAULT '0.000',
  `chave_nfe` varchar(44) DEFAULT NULL,
  PRIMARY KEY (`identrada`),
  KEY `fk_entrada_loja1` (`idloja`),
  KEY `fk_entrada_cliente1` (`idcliente`),
  KEY `fk_entrada_cfop1` (`cfop`),
  KEY `fk_entrada_operacaoEntrada1` (`idOperacao`),
  KEY `fk_entrada_usuario1` (`idUsuario`),
  KEY `fk_entrada_situacaoFiscal1` (`idSituacaoFiscal`),
  KEY `fk_entrada_table_codigo1` (`idCodigoFiscal`,`modNotaFiscal`),
  CONSTRAINT `fk_entrada_cfop1` FOREIGN KEY (`cfop`) REFERENCES `cfop` (`cfop`) ON DELETE NO ACTION ON UPDATE NO ACTION,
  CONSTRAINT `fk_entrada_cliente1` FOREIGN KEY (`idcliente`) REFERENCES `cliente` (`idcliente`) ON DELETE NO ACTION ON UPDATE NO ACTION,
  CONSTRAINT `fk_entrada_loja1` FOREIGN KEY (`idloja`) REFERENCES `loja` (`idloja`) ON DELETE NO ACTION ON UPDATE NO ACTION,
  CONSTRAINT `fk_entrada_operacaoEntrada1` FOREIGN KEY (`idOperacao`) REFERENCES `operacaoentrada` (`idoperacao`) ON DELETE NO ACTION ON UPDATE NO ACTION,
  CONSTRAINT `fk_entrada_situacaoFiscal1` FOREIGN KEY (`idSituacaoFiscal`) REFERENCES `situacaofiscal` (`idSituacaoFiscal`) ON DELETE NO ACTION ON UPDATE NO ACTION,
  CONSTRAINT `fk_entrada_table_codigo1` FOREIGN KEY (`idCodigoFiscal`, `modNotaFiscal`) REFERENCES `table_codigo` (`idTable_Codigo`, `codigo`) ON DELETE NO ACTION ON UPDATE NO ACTION,
  CONSTRAINT `fk_entrada_usuario1` FOREIGN KEY (`idUsuario`) REFERENCES `usuario` (`idusuario`) ON DELETE NO ACTION ON UPDATE NO ACTION
) ENGINE=InnoDB DEFAULT CHARSET=latin1;

--
-- Dumping data for table `entrada`
--

/*!40000 ALTER TABLE `entrada` DISABLE KEYS */;
/*!40000 ALTER TABLE `entrada` ENABLE KEYS */;


--
-- Definition of trigger `entrada_last_insert`
--

DROP TRIGGER /*!50030 IF EXISTS */ `entrada_last_insert`;

DELIMITER $$

CREATE DEFINER = `master`@`localhost` TRIGGER `entrada_last_insert` AFTER INSERT ON `entrada` FOR EACH ROW begin
        declare VarEstado char(2) default 'MG';
        declare VarAliquota char(2);
        declare VarInCfopSugestao varchar(6);
        declare VarOnCfopSugestao varchar(6);
        declare VarCFOP varchar(6);
    
    if(new.typeNota != 'f' && new.typeNota != 's')then
        if(new.idCompra > 0 && new.idCompra is not null)then
            insert into `conector`.`entradaCompra` (`identrada`, `idpedidoCompra`)values(new.`identrada`, new.idCompra);
            update pedidocompra set entregue=1 where idPedidoCompra=new.idCompra;
        end if;
    end if;
    
 
    
end $$

DELIMITER ;

--
-- Definition of table `entradacompra`
--

DROP TABLE IF EXISTS `entradacompra`;
CREATE TABLE `entradacompra` (
  `identrada` double NOT NULL,
  `idpedidoCompra` double NOT NULL,
  PRIMARY KEY (`identrada`,`idpedidoCompra`),
  KEY `fk_entradaCompra_entrada1` (`identrada`),
  KEY `fk_entradaCompra_pedidoCompra1` (`idpedidoCompra`),
  CONSTRAINT `fk_entradaCompra_entrada1` FOREIGN KEY (`identrada`) REFERENCES `entrada` (`identrada`) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT `fk_entradaCompra_pedidoCompra1` FOREIGN KEY (`idpedidoCompra`) REFERENCES `pedidocompra` (`idpedidoCompra`) ON DELETE NO ACTION ON UPDATE NO ACTION
) ENGINE=InnoDB DEFAULT CHARSET=latin1;

--
-- Dumping data for table `entradacompra`
--

/*!40000 ALTER TABLE `entradacompra` DISABLE KEYS */;
/*!40000 ALTER TABLE `entradacompra` ENABLE KEYS */;


--
-- Definition of trigger `entradaCompra_last_insert`
--

DROP TRIGGER /*!50030 IF EXISTS */ `entradaCompra_last_insert`;

DELIMITER $$

CREATE DEFINER = `master`@`localhost` TRIGGER `entradaCompra_last_insert` AFTER INSERT ON `entradacompra` FOR EACH ROW begin
        declare VarTotalNota decimal(15,3) default 0;
        declare VarTotalCompra decimal(15,3) default 0;
        declare VarCount int(11) default 0;
        declare VarNewParcela decimal(15,3) default 0;
        declare VarStore double default 0;
        declare VarOperacao double default 0;
        declare VarflagSugestaFinanceira smallint;
        
        
        select valorTotalNota, idLoja, idOperacao
                        from entrada
                                where idEntrada = new.idEntrada
                                                    into VarTotalNota, VarStore, VarOperacao;
                                                    if(VarTotalNota is null)then set VarTotalNota=0; end if;
                                                    
                
                                
        
        select flagSugestaFinanceira 
                            from operacaoEntrada 
                                            where idOperacao=VarOperacao
                                                            into VarflagSugestaFinanceira;
        select 
                sum(valorParcela)
                        from conector.pedidocompravencimento 
                                        where idPedidoCompra=new.idPedidoCompra
                                                    into VarTotalCompra;
                                                    if(VarTotalCompra is null)then set VarTotalCompra=0; end if;

        IF(VarflagSugestaFinanceira = 1)THEN
            call conector_update_entradaFinanceiro(new.idEntrada);
        
        select count(*) 
                    from entradaFinanceiro 
                                        where idEntrada = new.idEntrada
                                                            into VarCount;
                                                            if(VarCount is null)then set VarCount=0; end if;
                                                            

        if(VarCount > 0)then
            IF(VarTotalNota > 0)THEN
                if(VarTotalCompra > 0)then
                    IF(VarTotalNota != VarTotalCompra)THEN
                        set VarNewParcela = (VarTotalNota/VarCount);
                        
                            update entradaFinanceiro set valor=VarNewParcela where idEntrada= new.idEntrada;
                            
                    END IF;
                end if;
            END IF;
        end if;
        END IF;  end $$

DELIMITER ;

--
-- Definition of trigger `entradaCompra_last_remove`
--

DROP TRIGGER /*!50030 IF EXISTS */ `entradaCompra_last_remove`;

DELIMITER $$

CREATE DEFINER = `master`@`localhost` TRIGGER `entradaCompra_last_remove` BEFORE DELETE ON `entradacompra` FOR EACH ROW begin
    declare flagStatusNf char(1);
    
        
        delete from entradaFinanceiro where idEntrada=old.idEntrada;
        delete from entradaItem  where idEntrada=old.idEntrada and chaveItemCompra=old.idPedidoCompra;
    
end $$

DELIMITER ;

--
-- Definition of table `entradaconhecimento`
--

DROP TABLE IF EXISTS `entradaconhecimento`;
CREATE TABLE `entradaconhecimento` (
  `identradaConhecimento` double NOT NULL AUTO_INCREMENT,
  `chaveEntrada` double NOT NULL,
  `nr_nota_fiscal` varchar(10) NOT NULL,
  `serie` varchar(3) DEFAULT NULL,
  `cpf_cnpj` varchar(20) NOT NULL,
  `rateio` decimal(15,3) NOT NULL DEFAULT '0.000',
  `valor` decimal(15,3) NOT NULL DEFAULT '0.000',
  PRIMARY KEY (`identradaConhecimento`),
  KEY `fk_entradaConhecimento_entrada1` (`chaveEntrada`),
  CONSTRAINT `fk_entradaConhecimento_entrada1` FOREIGN KEY (`chaveEntrada`) REFERENCES `entrada` (`identrada`) ON DELETE NO ACTION ON UPDATE NO ACTION
) ENGINE=InnoDB DEFAULT CHARSET=latin1;

--
-- Dumping data for table `entradaconhecimento`
--

/*!40000 ALTER TABLE `entradaconhecimento` DISABLE KEYS */;
/*!40000 ALTER TABLE `entradaconhecimento` ENABLE KEYS */;


--
-- Definition of trigger `entradaConhecimento_last_insert`
--

DROP TRIGGER /*!50030 IF EXISTS */ `entradaConhecimento_last_insert`;

DELIMITER $$

CREATE DEFINER = `master`@`localhost` TRIGGER `entradaConhecimento_last_insert` AFTER INSERT ON `entradaconhecimento` FOR EACH ROW begin
    INSERT INTO `conector`.`entradafrete`
    (
        `identrada`,
        `idConhecimento`
    )
        VALUES
    (
        new.chaveEntrada,
        new.idEntradaConhecimento
    );
end $$

DELIMITER ;

--
-- Definition of table `entradafinanceiro`
--

DROP TABLE IF EXISTS `entradafinanceiro`;
CREATE TABLE `entradafinanceiro` (
  `identradaFinanceiro` double NOT NULL AUTO_INCREMENT,
  `identrada` double NOT NULL,
  `idfinalizadora` int(11) NOT NULL,
  `documento` varchar(20) NOT NULL,
  `prazo` int(11) NOT NULL,
  `aceite` date DEFAULT NULL,
  `vencimento` date NOT NULL,
  `competencia` date NOT NULL,
  `emissaoDocumento` date NOT NULL,
  `desconto` decimal(15,3) NOT NULL DEFAULT '0.000',
  `financeiro` decimal(15,3) NOT NULL DEFAULT '0.000',
  `valor` decimal(15,3) NOT NULL DEFAULT '0.000',
  `parcela` varchar(5) NOT NULL DEFAULT '1/1',
  `idbanco` int(11) NOT NULL,
  `nossoNumero` varchar(20) NOT NULL,
  `conta` int(11) NOT NULL DEFAULT '0',
  `cedente` varchar(20) NOT NULL,
  `formaPgto` varchar(2) NOT NULL DEFAULT '00' COMMENT '00 banco\n01 caixa',
  PRIMARY KEY (`identradaFinanceiro`,`identrada`),
  KEY `fk_entradaFinanceiro_entrada1` (`identrada`),
  KEY `fk_entradaFinanceiro_finalizadora1` (`idfinalizadora`),
  CONSTRAINT `fk_entradaFinanceiro_entrada1` FOREIGN KEY (`identrada`) REFERENCES `entrada` (`identrada`) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT `fk_entradaFinanceiro_finalizadora1` FOREIGN KEY (`idfinalizadora`) REFERENCES `finalizadora` (`idfinalizadora`) ON DELETE NO ACTION ON UPDATE NO ACTION
) ENGINE=InnoDB DEFAULT CHARSET=latin1;

--
-- Dumping data for table `entradafinanceiro`
--

/*!40000 ALTER TABLE `entradafinanceiro` DISABLE KEYS */;
/*!40000 ALTER TABLE `entradafinanceiro` ENABLE KEYS */;


--
-- Definition of trigger `entradaFinanceiro_before_insert`
--

DROP TRIGGER /*!50030 IF EXISTS */ `entradaFinanceiro_before_insert`;

DELIMITER $$

CREATE DEFINER = `master`@`localhost` TRIGGER `entradaFinanceiro_before_insert` BEFORE INSERT ON `entradafinanceiro` FOR EACH ROW begin
    declare bank integer default 0;
    
    if(new.idbanco is null)then
        select min(ifnull(idbanco,"0")) from banco into bank; 
        set new.idbanco = bank;
    end if;    
    
end $$

DELIMITER ;

--
-- Definition of table `entradafrete`
--

DROP TABLE IF EXISTS `entradafrete`;
CREATE TABLE `entradafrete` (
  `identrada` double NOT NULL,
  `idConhecimento` double NOT NULL,
  PRIMARY KEY (`identrada`,`idConhecimento`),
  KEY `fk_entradaFrete_entrada1` (`identrada`),
  KEY `fk_entradaFrete_entradaConhecimento1` (`idConhecimento`),
  CONSTRAINT `fk_entradaFrete_entrada1` FOREIGN KEY (`identrada`) REFERENCES `entrada` (`identrada`) ON DELETE NO ACTION ON UPDATE NO ACTION,
  CONSTRAINT `fk_entradaFrete_entradaConhecimento1` FOREIGN KEY (`idConhecimento`) REFERENCES `entradaconhecimento` (`identradaConhecimento`) ON DELETE NO ACTION ON UPDATE NO ACTION
) ENGINE=InnoDB DEFAULT CHARSET=latin1;

--
-- Dumping data for table `entradafrete`
--

/*!40000 ALTER TABLE `entradafrete` DISABLE KEYS */;
/*!40000 ALTER TABLE `entradafrete` ENABLE KEYS */;


--
-- Definition of table `entradaimp`
--

DROP TABLE IF EXISTS `entradaimp`;
CREATE TABLE `entradaimp` (
  `identradaImp` double NOT NULL AUTO_INCREMENT,
  `identrada` double NOT NULL,
  `cfop` varchar(6) NOT NULL,
  `cst` char(3) NOT NULL,
  `aliquota` decimal(15,3) NOT NULL,
  `reducao` decimal(15,3) NOT NULL,
  `valorApurado` decimal(15,3) NOT NULL,
  `valorInformado` decimal(15,3) NOT NULL,
  `impostoApurado` decimal(15,3) NOT NULL,
  `impostoInformado` decimal(15,3) NOT NULL,
  `baseIsentoApurado` decimal(15,3) NOT NULL,
  `baseIsentoInformado` decimal(15,3) NOT NULL,
  `baseIpiApurado` decimal(15,3) NOT NULL,
  `valorIpiApurado` decimal(15,3) NOT NULL,
  `tipo` varchar(1) NOT NULL COMMENT 't - tributado \ni - isenta \nf - substituição \nn - não tributada\n',
  PRIMARY KEY (`identradaImp`,`identrada`),
  KEY `fk_entradaImp_entrada1` (`identrada`),
  KEY `fk_entradaImp_cst1` (`cst`),
  KEY `fk_entradaImp_cfop1` (`cfop`),
  CONSTRAINT `fk_entradaImp_cfop1` FOREIGN KEY (`cfop`) REFERENCES `cfop` (`cfop`) ON DELETE NO ACTION ON UPDATE NO ACTION,
  CONSTRAINT `fk_entradaImp_cst1` FOREIGN KEY (`cst`) REFERENCES `cst` (`idcst`) ON DELETE NO ACTION ON UPDATE NO ACTION,
  CONSTRAINT `fk_entradaImp_entrada1` FOREIGN KEY (`identrada`) REFERENCES `entrada` (`identrada`) ON DELETE CASCADE ON UPDATE CASCADE
) ENGINE=InnoDB DEFAULT CHARSET=latin1;

--
-- Dumping data for table `entradaimp`
--

/*!40000 ALTER TABLE `entradaimp` DISABLE KEYS */;
/*!40000 ALTER TABLE `entradaimp` ENABLE KEYS */;


--
-- Definition of trigger `entradaImp_before_insert`
--

DROP TRIGGER /*!50030 IF EXISTS */ `entradaImp_before_insert`;

DELIMITER $$

CREATE DEFINER = `master`@`localhost` TRIGGER `entradaImp_before_insert` BEFORE INSERT ON `entradaimp` FOR EACH ROW begin

    declare mult numeric(15,3) default 0;
    
    set mult = (new.aliquota * (1-(new.reducao/100)))/100;
    set mult = (new.aliquota)/100;
    set new.impostoApurado = new.valorApurado*mult;
    
end $$

DELIMITER ;

--
-- Definition of trigger `entradaImp_last_insert`
--

DROP TRIGGER /*!50030 IF EXISTS */ `entradaImp_last_insert`;

DELIMITER $$

CREATE DEFINER = `master`@`localhost` TRIGGER `entradaImp_last_insert` AFTER INSERT ON `entradaimp` FOR EACH ROW begin

    declare VarImpostoApurado numeric(15,3) default 0;
    declare VarImpostoInformado numeric(15,3) default 0;
    declare VarValorInformado numeric(15,3) default 0;
    declare VarValorApurado numeric(15,3) default 0;
    declare VarIpi numeric(15,3) default 0;
    
    select 
        sum(valorapurado),sum(valorinformado),
        sum(impostoapurado),sum(impostoinformado), sum(valoripiapurado)
                                                                from entradaImp
                                                                        where idEntrada=new.IdEntrada
                                                                                into VarImpostoApurado,
                                                                                     VarImpostoInformado,
                                                                                     VarValorInformado,
                                                                                     VarValorApurado,
                                                                                     VarIpi;
    if(VarImpostoApurado is null)then set VarImpostoApurado = 0; end if;
    if(VarImpostoInformado is null)then set VarImpostoInformado = 0; end if;
    if(VarValorInformado is null)then set VarValorInformado = 0; end if;
    if(VarValorApurado is null)then set VarValorApurado = 0; end if;
    if(VarIpi is null)then set VarIpi = 0; end if;
    
    update entrada
    set
            impApurado=VarImpostoApurado,
            impInformado=VarImpostoInformado,
            valueInformado=VarValorInformado,
            valueApurado=VarValorApurado,
            valueIpiApurado=VarIpi
    where 
            idEntrada=new.IdEntrada;
    
end $$

DELIMITER ;

--
-- Definition of trigger `entradaImp_before_update`
--

DROP TRIGGER /*!50030 IF EXISTS */ `entradaImp_before_update`;

DELIMITER $$

CREATE DEFINER = `master`@`localhost` TRIGGER `entradaImp_before_update` BEFORE UPDATE ON `entradaimp` FOR EACH ROW begin

    declare mult numeric(15,3) default 0;
    
    set mult = (new.aliquota * (1-(new.reducao/100)))/100;
    set mult = (new.aliquota)/100;
    set new.impostoApurado = new.valorApurado*mult;
    
end $$

DELIMITER ;

--
-- Definition of table `entradaitem`
--

DROP TABLE IF EXISTS `entradaitem`;
CREATE TABLE `entradaitem` (
  `idEntradaItem` double NOT NULL AUTO_INCREMENT,
  `identrada` double NOT NULL,
  `idProduto` int(11) NOT NULL,
  `custoLiquido` decimal(15,3) NOT NULL DEFAULT '0.000',
  `custoBruto` decimal(15,3) NOT NULL DEFAULT '0.000',
  `custoNota` decimal(15,3) NOT NULL DEFAULT '0.000',
  `custoNotaTotal` decimal(15,3) NOT NULL DEFAULT '0.000',
  `custoReposicao` decimal(15,3) NOT NULL DEFAULT '0.000',
  `custoTotal` decimal(15,3) NOT NULL DEFAULT '0.000',
  `discount1` decimal(15,3) NOT NULL DEFAULT '0.000',
  `discount2` decimal(15,3) NOT NULL DEFAULT '0.000',
  `discount3` decimal(15,3) NOT NULL DEFAULT '0.000',
  `discountValue` decimal(15,3) NOT NULL DEFAULT '0.000',
  `acrescimo` decimal(15,3) NOT NULL DEFAULT '0.000',
  `bonificacao` decimal(15,3) NOT NULL DEFAULT '0.000',
  `despesasNaoTributadas` decimal(15,3) NOT NULL DEFAULT '0.000',
  `despesasTributadas` decimal(15,3) NOT NULL DEFAULT '0.000',
  `chaveEmbalagem` int(11) NOT NULL,
  `barra` double NOT NULL,
  `idunidadeMedida` int(11) NOT NULL,
  `entregue` varchar(1) NOT NULL DEFAULT 'n' COMMENT 'n - não entregou\ns - sim entregou',
  `vendo` decimal(15,3) NOT NULL DEFAULT '0.000',
  `financeiro` decimal(15,3) NOT NULL DEFAULT '0.000',
  `frete` decimal(15,3) NOT NULL DEFAULT '0.000',
  `icmsEntrada` decimal(15,3) NOT NULL DEFAULT '0.000',
  `reducaoEntrada` decimal(15,3) NOT NULL DEFAULT '0.000',
  `icmsFrete` decimal(15,3) NOT NULL DEFAULT '0.000',
  `icmsSaida` decimal(15,3) NOT NULL DEFAULT '0.000',
  `reducaoSaida` decimal(15,3) NOT NULL DEFAULT '0.000',
  `ipi` decimal(15,3) NOT NULL DEFAULT '0.000',
  `priceVenda` decimal(15,3) NOT NULL DEFAULT '0.000',
  `quantidade` decimal(15,3) NOT NULL DEFAULT '0.000',
  `sugestao` decimal(15,3) NOT NULL DEFAULT '0.000',
  `valorIpi` decimal(15,3) NOT NULL DEFAULT '0.000',
  `substituicao` decimal(15,3) NOT NULL DEFAULT '0.000',
  `lucro` decimal(15,3) NOT NULL DEFAULT '0.000',
  `lucroValor` decimal(15,3) NOT NULL DEFAULT '0.000',
  `lucroBruto` decimal(15,3) NOT NULL DEFAULT '0.000',
  `quantidadeRecebida` decimal(15,3) NOT NULL DEFAULT '0.000',
  `quantidadePendente` decimal(15,3) NOT NULL DEFAULT '0.000',
  `creditoIcms` decimal(15,3) NOT NULL DEFAULT '0.000',
  `creditoPis` decimal(15,3) NOT NULL DEFAULT '0.000',
  `creditoCofins` decimal(15,3) NOT NULL DEFAULT '0.000',
  `valorFinanceiro` decimal(15,3) NOT NULL DEFAULT '0.000',
  `valorFrete` decimal(15,3) NOT NULL DEFAULT '0.000',
  `sumFrete` smallint(6) NOT NULL DEFAULT '0',
  `numeroNota` varchar(10) NOT NULL DEFAULT '0000000000',
  `serie` varchar(3) DEFAULT NULL,
  `diferencaQtty` decimal(15,3) NOT NULL DEFAULT '0.000',
  `diferencaCustoLiqNota` decimal(15,3) NOT NULL DEFAULT '0.000',
  `diferencaCustoTotalNota` decimal(15,3) NOT NULL DEFAULT '0.000',
  `dateInsert` date NOT NULL,
  `margem` decimal(15,3) NOT NULL DEFAULT '0.000',
  `sumSt` smallint(6) NOT NULL DEFAULT '0',
  `cstIpi` int(11) NOT NULL,
  `cstPis` int(11) NOT NULL,
  `cstCofins` int(11) NOT NULL,
  `cstIcms` char(3) NOT NULL,
  `icmsCreditoSt` decimal(15,3) NOT NULL DEFAULT '0.000',
  `icmsTotalSt` decimal(15,3) NOT NULL DEFAULT '0.000',
  `cfop` varchar(6) NOT NULL,
  `cteInterna` decimal(15,3) NOT NULL DEFAULT '0.000',
  `cteInterestadual` decimal(15,3) NOT NULL DEFAULT '0.000',
  `valorIcmsSubstituicao` decimal(15,3) NOT NULL DEFAULT '0.000',
  `baseCalculoSubstituicao` decimal(15,3) NOT NULL DEFAULT '0.000',
  `basePis` decimal(15,3) NOT NULL DEFAULT '0.000',
  `baseCofins` decimal(15,3) NOT NULL DEFAULT '0.000',
  `valorPis` decimal(15,3) NOT NULL DEFAULT '0.000',
  `valorCofins` decimal(15,3) NOT NULL DEFAULT '0.000',
  `estoque` decimal(15,3) NOT NULL DEFAULT '0.000',
  `valorIpiTotal` decimal(15,3) NOT NULL DEFAULT '0.000',
  `baseIcms` decimal(15,3) NOT NULL DEFAULT '0.000',
  `custoLiquidoAnterior` decimal(15,3) NOT NULL DEFAULT '0.000',
  `lucroAnterior` decimal(15,3) NOT NULL DEFAULT '0.000',
  `custoTransferencia` decimal(15,3) NOT NULL DEFAULT '0.000',
  `bonificacaoValor` decimal(15,3) NOT NULL DEFAULT '0.000',
  `validade` char(8) NOT NULL DEFAULT '00000000',
  `freteValor` decimal(15,3) NOT NULL DEFAULT '0.000',
  `flagRecebe` smallint(6) NOT NULL DEFAULT '0',
  `typeAliquota` varchar(1) NOT NULL DEFAULT 't',
  `porcentagemTransf` decimal(15,3) NOT NULL DEFAULT '0.000',
  `chaveItemCompra` double NOT NULL DEFAULT '0',
  `custoMedio` decimal(15,3) NOT NULL DEFAULT '0.000',
  `novoPrecoVenda` decimal(15,3) DEFAULT NULL,
  `sequencia` int(11) NOT NULL DEFAULT '0',
  `spedNcm` varchar(30) DEFAULT NULL,
  PRIMARY KEY (`idEntradaItem`,`identrada`,`idProduto`),
  KEY `fk_entradaItens_produto1` (`idProduto`),
  KEY `fk_entradaItens_produtoEmbalagem1` (`chaveEmbalagem`,`barra`,`idunidadeMedida`),
  KEY `fk_entradaItens_entrada1` (`identrada`),
  KEY `fk_entradaItem_cfop1` (`cfop`),
  KEY `fk_entradaItem_cstIpi1` (`cstIpi`),
  KEY `fk_entradaItem_cstPis1` (`cstPis`),
  KEY `fk_entradaItem_cstCofins1` (`cstCofins`),
  KEY `fk_entradaItem_cst1` (`cstIcms`),
  CONSTRAINT `fk_entradaItem_cfop1` FOREIGN KEY (`cfop`) REFERENCES `cfop` (`cfop`) ON DELETE NO ACTION ON UPDATE NO ACTION,
  CONSTRAINT `fk_entradaItem_cst1` FOREIGN KEY (`cstIcms`) REFERENCES `cst` (`idcst`) ON DELETE NO ACTION ON UPDATE NO ACTION,
  CONSTRAINT `fk_pedidoCompraItens_copy1_entrada1` FOREIGN KEY (`identrada`) REFERENCES `entrada` (`identrada`) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT `fk_pedidoCompraItens_produto10` FOREIGN KEY (`idProduto`) REFERENCES `produto` (`idProduto`) ON DELETE NO ACTION ON UPDATE NO ACTION,
  CONSTRAINT `fk_pedidoCompraItens_produtoEmbalagem10` FOREIGN KEY (`chaveEmbalagem`, `barra`, `idunidadeMedida`) REFERENCES `produtoembalagem` (`idprodutoEmbalagem`, `barra`, `idunidadeMedida`) ON DELETE NO ACTION ON UPDATE NO ACTION
) ENGINE=InnoDB DEFAULT CHARSET=latin1;

--
-- Dumping data for table `entradaitem`
--

/*!40000 ALTER TABLE `entradaitem` DISABLE KEYS */;
/*!40000 ALTER TABLE `entradaitem` ENABLE KEYS */;


--
-- Definition of trigger `entradaItem_before_insert`
--

DROP TRIGGER /*!50030 IF EXISTS */ `entradaItem_before_insert`;

DELIMITER $$

CREATE DEFINER = `root`@`localhost` TRIGGER `entradaItem_before_insert` BEFORE INSERT ON `entradaitem` FOR EACH ROW begin
        declare seq int;

        set seq = (select count(idEntrada) from entradaItem where idEntrada=new.idEntrada);

        if(seq = 0)then

            set new.sequencia = 1;

                else

                set new.sequencia = seq + 1;

        end if;
end $$

DELIMITER ;

--
-- Definition of trigger `entradaItem_last_insert`
--

DROP TRIGGER /*!50030 IF EXISTS */ `entradaItem_last_insert`;

DELIMITER $$

CREATE DEFINER = `master`@`localhost` TRIGGER `entradaItem_last_insert` AFTER INSERT ON `entradaitem` FOR EACH ROW begin

    declare VarNrImp int default 0;
    declare VarAuxCFOPFrete varchar(6);
    declare VarItens numeric(15,3) default 0;
    declare VarVolume numeric(15,3) default 0;
    declare VarCustoEan numeric(15,3) default 0;     declare VarCustoNota numeric(15,3) default 0;
    declare VarCustoOld numeric(15,3) default 0;
    declare VarCustoFull numeric(15,3) default 0;
    declare VarFullDiscount numeric(15,3) default 0;
    declare VarVenda numeric(15,5) default 0;
    declare VarBaseCalculo numeric(15,3) default 0;
    declare VarImpostoApurado numeric(15,3) default 0;
    declare VarImpostoInformado numeric(15,3) default 0;
    declare VarValorInformado numeric(15,3) default 0;
    declare VarValorApurado numeric(15,3) default 0;
    declare VarIdLoja int default 0;
    declare VarType char(2);
    declare VarCSTICMS char(3);
    declare VarBasePis numeric(15,3) default 0;
    declare VarBaseCofins numeric(15,3) default 0;
    declare VarBaseFrete numeric(15,3) default 0;
    declare VarBaseSubstituicao numeric(15,3) default 0;
    declare VarIcmsSubstituicao numeric(15,3) default 0;
    declare VarFornecedor int(11);
    declare VarSumFrete TINYINT(1);
    declare VarValorPis numeric(15,3) default 0;
    declare VarValorCofins numeric(15,3) default 0;


select
        idLoja, sumFrete
                        from entrada
                                where
                                    idEntrada = new.idEntrada
                                                        into VarIdLoja, VarSumFrete;

CALL conector_inc_entradaPrice(new.idEntradaItem,new.idProduto,VarIdLoja);

select
    count(item.idEntrada),
    ifnull(sum(item.quantidade),0),
    ifnull(sum(item.custoNotaTotal),0),
    ifnull(round(sum(item.quantidade*custoLiquidoAnterior*ean.quantidade),3),0) liquidoAnterior,
    ifnull(round(sum(Item.PriceVenda*item.quantidade*ean.quantidade),3),0) priceVenda,
    ifnull(round(sum(item.quantidade*item.custoLiquido*ean.quantidade),3),0) CustoLiquidoTotal,
    ifnull(round(sum(item.Custobruto*item.quantidade*(1-((1-(item.discount1/100))*(1-(item.discount2/100))*(1-(item.discount3/100))))),3),0) discountFull,
    ifnull(sum(item.BasePis),0),
    ifnull(sum(item.BaseCofins),0),
    ifnull(sum(item.ValorPis),0),
    ifnull(sum(item.ValorCofins),0),
    ifnull(sum(baseCalculoSubstituicao),0),
    ifnull(sum(valorIcmsSubstituicao),0)
from
    entradaItem item
        inner join produtoEmbalagem ean on(item.idProduto = item.idProduto and item.chaveEmbalagem = ean.idProdutoEmbalagem)
where

        ean.defaultCompra = "s" and
        item.idEntrada=new.idEntrada and item.idEntradaItem=new.idEntradaItem
        into VarVolume, VarItens, VarCustoNota, VarCustoOld, VarVenda, VarCustoFull, VarFullDiscount,
        VarBasePis, VarBaseCofins, VarValorPis, VarValorCofins, VarBaseSubstituicao, VarIcmsSubstituicao;

        if(new.reducaoEntrada <> 0)then
            
            set VarBaseCalculo = new.custoNotaTotal * (1 - (new.reducaoEntrada/100));
                else
            
            set VarBaseCalculo = new.custoNotaTotal;
        end if;

           if((new.typeAliquota is not NULL)and(new.typeAliquota <> ''))then
                set VarType = new.typeAliquota;
            else
                select tab2.tipo
                        from produtoImpostos tab1
                        inner join aliquota tab2 on(tab1.Tributacao=tab2.idAliquota)
                where  (tab1.idProduto=new.idProduto) and (tab1.idLoja= VarIdLoja)
                                                                            into VarType;
        end if;

           if (VarType is null) then set VarType='t'; end if;

           select count(identrada)
                            from entradaimp
                                where (idEntrada=new.idEntrada) and (aliquota=new.icmsEntrada) and
                                                         (reducao=new.reducaoEntrada) and
                                                         (tipo=new.typeAliquota) and
                                                         (CFOP = new.cfop) and
                                                         (cst = new.cstIcms)
                                                                        into VarNrImp;

    if(new.flagRecebe = 1)then
        if(VarNrImp = 0)then
           insert into entradaImp(
                    `identrada`,
                    `cfop`,
                    `cst`,
                    `aliquota`,
                    `reducao`,
                    `valorApurado`,
                    `valorInformado`,
                    `impostoApurado`,
                    `impostoInformado`,
                    `baseIsentoApurado`,
                    `baseIsentoInformado`,
                    `baseIpiApurado`,
                    `valorIpiApurado`,
                    `tipo`
                                )values(
                    new.idEntrada,
                    new.cfop,
                    new.cstIcms,
                    new.icmsEntrada,
                    new.reducaoEntrada,
                    VarBaseCalculo,
                    "0.000",
                    "0.000",
                    "0.000",
                    ((new.baseIcms * new.reducaoEntrada)/100),
                    "0.000",
                    "0.000",
                    new.valorIpiTotal,
                    new.TypeAliquota);
            else
                        update  entradaImp
                                set
                                        `valorApurado`=(valorApurado + VarBaseCalculo),
                                        `baseIsentoApurado`=(baseIsentoApurado + ((new.baseIcms * new.reducaoEntrada)/100)),
                                        `valorIpiApurado`=(`valorIpiApurado` + new.valorIpiTotal)
                                where
                                        `identrada`=new.identrada and `cfop`=new.cfop and
                                        `reducao`=new.reducaoEntrada and `aliquota`=new.icmsEntrada and
                                        `cst`=new.cstIcms;
        end if;
   end if;
           if (VarSumFrete = 1) then
    set VarType = "";
    select
        tab.tipo
                from aliquota tab
                                where tab.aliquota=new.icmsFrete and
                                      tab.reducao=0 limit 1
                                                                 into VarType;
    set VarNrImp = 0;
            select
        idCliente
                from entrada
                            where idEntrada=new.IdEntrada into @id;
            select uf
        from cliente
                    where idCliente=@id into @uf;

    if(@uf = "MG") then
        set VarAuxCFOPFrete = "1353";
    else
        set VarAuxCFOPFrete = "2353";
    end if;

    select count(identrada)
                            from entradaimp
                                where (idEntrada=new.idEntrada) and (aliquota=new.icmsFrete) and
                                                         (reducao=0) and
                                                         (tipo=VarType) and
                                                         (CFOP = VarAuxCFOPFrete)
                                                                                        into VarNrImp;

if(VarNrImp = 0)then
    if(new.valorFrete = 0)then
        if(new.baseIcms * (new.frete/100) <> 0)then
            insert into entradaImp(
                    `identrada`,
                    `cfop`,
                    `cst`,
                    `aliquota`,
                    `reducao`,
                    `valorApurado`,
                    `valorInformado`,
                    `impostoApurado`,
                    `impostoInformado`,
                    `baseIsentoApurado`,
                    `baseIsentoInformado`,
                    `baseIpiApurado`,
                    `valorIpiApurado`,
                    `tipo`
                                )values(
                    new.idEntrada,
                    VarAuxCFOPFrete,
                    "000",
                    new.icmsFrete,
                    0,
                    (new.baseIcms * (new.frete/100)),
                    "0.000",
                    "0.000",
                    "0.000",
                    "0.000",
                    "0.000",
                    "0.000",
                    "0.000",
                    VarType);
            end if;
        else
                insert into entradaImp(
                    `identrada`,
                    `cfop`,
                    `cst`,
                    `aliquota`,
                    `reducao`,
                    `valorApurado`,
                    `valorInformado`,
                    `impostoApurado`,
                    `impostoInformado`,
                    `baseIsentoApurado`,
                    `baseIsentoInformado`,
                    `baseIpiApurado`,
                    `valorIpiApurado`,
                    `tipo`
                                )values(
                    new.idEntrada,
                    VarAuxCFOPFrete,
                    "000",
                    new.icmsFrete,
                    0,
                    new.FreteValor,
                    "0.000",
                    "0.000",
                    "0.000",
                    "0.000",
                    "0.000",
                    "0.000",
                    "0.000",
                    VarType);
        end if;
else     if(new.valorFrete = 0)then
        if(new.baseIcms * (new.frete/100) <> 0)then
                            update  entradaImp
                                set
                                        `valorApurado`=(valorApurado + (new.baseIcms * (new.frete/100)))
                                where
                                        `identrada`=new.identrada and `cfop`=VarAuxCFOPFrete and
                                        `reducao`=0 and `aliquota`=new.icmsFrete and
                                        `tipo`=VarType;
        end if;
    else
                                    update  entradaImp
                                    set
                                        `valorApurado`=(valorApurado + (new.freteValor))
                                    where
                                        `identrada`=new.identrada and `cfop`=VarAuxCFOPFrete and
                                        `reducao`=0 and `aliquota`=new.icmsFrete and
                                        `tipo`=VarType;
        end if;
    end if;

end if;
    select
        sum(valorapurado),sum(valorinformado),
        sum(impostoapurado),sum(impostoinformado)
                                                    from entradaImp
                                                                where idEntrada=new.IdEntrada
                                                                    into
                                                                         VarValorInformado,
                                                                         VarValorApurado,
                                                                         VarImpostoApurado,
                                                                         VarImpostoInformado;

    if(VarImpostoApurado is null)then set VarImpostoApurado = 0; end if;
    if(VarImpostoInformado is null)then set VarImpostoInformado = 0; end if;
    if(VarValorInformado is null)then set VarValorInformado = 0; end if;
    if(VarValorApurado is null)then set VarValorApurado = 0; end if;
    if(VarIcmsSubstituicao is null)then set VarIcmsSubstituicao = 0; end if;
    if(VarBaseSubstituicao is null)then set VarBaseSubstituicao = 0; end if;
    if(VarFullDiscount is null)then set VarFullDiscount = 0; end if;

    if(new.flagRecebe = 1)then     update
                entrada
        set
                totalItens=VarItens,
                volume=VarVolume,
                valorTotalVenda=VarVenda,
                valorTotalCustoLiquido=VarCustoFull,
                valueApurado=VarValorApurado,
                valueInformado=VarValorInformado,
                impApurado=VarImpostoApurado,
                impInformado=VarImpostoInformado,
                valorDesconto=VarFullDiscount,
                valorPis=VarValorPis,
                valorCofins=VarValorCofins,
                basePis=VarBasePis,
                baseCofins=VarBaseCofins,
                totalBaseCalculoSubstituicao=VarBaseSubstituicao,
                totalIcmsST=VarIcmsSubstituicao
        where
            idEntrada=new.IdEntrada;
    end if;

end $$

DELIMITER ;

--
-- Definition of trigger `entradaItem_last_delete`
--

DROP TRIGGER /*!50030 IF EXISTS */ `entradaItem_last_delete`;

DELIMITER $$

CREATE DEFINER = `master`@`localhost` TRIGGER `entradaItem_last_delete` AFTER DELETE ON `entradaitem` FOR EACH ROW begin

    declare VarNrImp int default 0;
    declare VarAuxCFOPFrete varchar(6);
    declare VarItens numeric(15,3) default 0;
    declare VarVolume numeric(15,3) default 0;
    declare VarCustoEan numeric(15,3) default 0;     declare VarCustoNota numeric(15,3) default 0;
    declare VarCustoOld numeric(15,3) default 0;
    declare VarCustoFull numeric(15,3) default 0;
    declare VarFullDiscount numeric(15,3) default 0;
    declare VarVenda numeric(15,5) default 0;
    declare VarBaseCalculo numeric(15,3) default 0;
    declare VarBaseCalculoAnt numeric(15,3) default 0;
    declare VarImpostoApurado numeric(15,3) default 0;
    declare VarImpostoInformado numeric(15,3) default 0;
    declare VarValorInformado numeric(15,3) default 0;
    declare VarValorApurado numeric(15,3) default 0;
    declare VarIdLoja int default 0;
    declare VarType char(2);
    declare VarCSTICMS char(3);
    declare VarBasePis numeric(15,3) default 0;
    declare VarBaseCofins numeric(15,3) default 0;
    declare VarBaseFrete numeric(15,3) default 0;
    declare VarBaseSubstituicao numeric(15,3) default 0;
    declare VarIcmsSubstituicao numeric(15,3) default 0;
    declare VarFornecedor int(11);
    declare VarSumFrete TINYINT(1);
    declare VarValorPis numeric(15,3) default 0;
    declare VarValorCofins numeric(15,3) default 0;
select 
        idLoja, sumFrete 
                        from entrada 
                                where 
                                    idEntrada = old.idEntrada
                                                        into VarIdLoja, VarSumFrete;
        if(old.reducaoEntrada = 0)then
                    
                    set VarBaseCalculoAnt = old.custoNotaTotal;      
                else   
                    
                    set VarBaseCalculoAnt = old.custoNotaTotal * (1 - (old.reducaoEntrada/100));            
        end if;

        if((old.typeAliquota is not NULL) and (old.typeAliquota <> ''))then
                set VarType = old.typeAliquota;
            else
                select tab2.tipo
                        from produtoImpostos tab1
                        inner join aliquota tab2 on(tab1.Tributacao=tab2.idAliquota)
                where  (tab1.idProduto=old.idProduto) and (tab1.idLoja= VarIdLoja)
                                                                            into VarType;
        end if;

                update  entradaImp
                                set
                                        `valorApurado`=(valorApurado - VarBaseCalculoAnt),
                                        `valorIpiApurado`=(`valorIpiApurado` - old.valorIpi),
                                        `baseIsentoApurado`=(baseIsentoApurado - ((old.baseIcms * old.reducaoEntrada)/100))
                                where 
                                        `identrada`=old.identrada and 
                                        `reducao`=old.reducaoEntrada and 
                                        `aliquota`=old.icmsEntrada and
                                        `tipo`= VarType and `cfop` is  null;    
        set VarValorApurado = 0;
        
        select sum(`valorApurado`)
                                                from entradaimp
                                                        where (idEntrada=old.idEntrada) and (aliquota=old.icmsEntrada) and
                                                                                            (reducao=old.reducaoEntrada) and 
                                                                                            (tipo=VarType) and
                                                                                            (CFOP is null) 
                                                into VarValorApurado;
      if(VarValorApurado is null)then
        set VarValorApurado = 0;
      end if;
      
      if(VarValorApurado = 0)then
        set VarValorApurado = 0;
        else
        delete
             from entradaimp
                            where (idEntrada=old.idEntrada) and 
                                  (aliquota=old.icmsEntrada) and
                                  (reducao=old.reducaoEntrada) and 
                                  (tipo=VarType) and
                                  (CFOP is null);
      end if;

update  entradaImp
                                set
                                        `valorApurado`=(valorApurado - VarBaseCalculoAnt),
                                        `valorIpiApurado`=(`valorIpiApurado` - old.valorIpi),
                                        `baseIsentoApurado`=(baseIsentoApurado - ((old.baseIcms * old.reducaoEntrada)/100))
                                where 
                                        `identrada`=old.identrada and 
                                        `reducao`=old.reducaoEntrada and 
                                        `aliquota`=old.icmsEntrada and
                                        `tipo`= VarType and `cfop`=old.cfop;    


        
           if (VarSumFrete = 1) then

    set VarType = "";
    
    select 
        tab.tipo 
                from aliquota tab 
                                where tab.aliquota=old.icmsFrete and 
                                      tab.reducao=0 limit 1
                                                                 into VarType;
    set VarNrImp = 0;

select count(identrada)
                            from entradaimp
                                where (idEntrada=old.idEntrada) and (aliquota=old.icmsFrete) and
                                                         (reducao=0) and 
                                                         (tipo=VarType) and
                                                         (CFOP = old.cfop)
                                                                                   into VarNrImp;

if(VarNrImp = 0)then
    if(old.valorFrete = 0)then
        if(old.baseIcms * (old.frete/100) <> 0)then
               update  entradaImp                                 set
                                        `valorApurado`=(valorApurado - (old.baseIcms * (Old.frete/100)))
                                where 
                                        `identrada`=old.identrada and `cfop`=old.`cfop` and
                                        `reducao`=0 and `aliquota`=old.icmsFrete and
                                        `tipo`=VarType;
        end if;
     end if;	
else
		 update  entradaImp
                                 set
                                        `valorApurado`=(valorApurado - old.freteValor)
                                 where 
                                        `identrada`=old.identrada and `cfop`=VarAuxCFOPFrete and
                                        `reducao`=0 and `aliquota`=old.icmsFrete and
                                        `tipo`=VarType;
end if;

end if; 

select
    count(item.idEntrada),
    sum(item.quantidade),
    sum(item.custoNotaTotal),
    round(sum(item.quantidade*custoLiquidoAnterior*ean.quantidade),3) liquidoAnterior,
    round(sum(Item.PriceVenda*item.quantidade*ean.quantidade),3) priceVenda,
    round(sum(item.quantidade*item.custoLiquido*ean.quantidade),3) CustoLiquidoTotal,
    round(sum(item.Custobruto*item.quantidade*(1-((1-(item.discount1/100))*(1-(item.discount2/100))*(1-(item.discount3/100))))),3) discountFull,
    sum(item.BasePis),
    sum(item.BaseCofins),
    sum(item.ValorPis),
    sum(item.ValorCofins),
    sum(baseCalculoSubstituicao),
    sum(valorIcmsSubstituicao)
from
    entradaItem item
        inner join produtoEmbalagem ean on(item.idProduto = item.idProduto and item.chaveEmbalagem = ean.idProdutoEmbalagem)
where
        
        ean.defaultCompra = "s" and
        item.idEntrada=old.idEntrada 
        into VarVolume, VarItens, VarCustoNota, VarCustoOld, VarVenda, VarCustoFull, VarFullDiscount,
        VarBasePis, VarBaseCofins, VarValorPis, VarValorCofins, VarBaseSubstituicao, VarIcmsSubstituicao;
        
        
        if(VarVolume is null)then set VarVolume = 0; end if;
        if(VarItens is null)then set VarItens = 0; end if;
        if(VarCustoNota is null)then set VarCustoNota = 0; end if;
        if(VarCustoOld is null)then set VarCustoOld = 0; end if;
        if(VarVenda is null)then set VarVenda = 0; end if;
        if(VarCustoFull is null)then set VarCustoFull = 0; end if;
        if(VarFullDiscount is null)then set VarFullDiscount = 0; end if;
        if(VarBasePis is null)then set VarBasePis = 0; end if;
        if(VarBaseCofins is null)then set VarBaseCofins = 0; end if;
        if(VarValorPis is null)then set VarValorPis = 0; end if;
        if(VarValorCofins is null)then set VarValorCofins = 0; end if;
        if(VarBaseSubstituicao is null)then set VarBaseSubstituicao = 0; end if;
        if(VarIcmsSubstituicao is null)then set VarIcmsSubstituicao = 0; end if;

        
    select 
        sum(valorapurado),sum(valorinformado),
        sum(impostoapurado),sum(impostoinformado)
                                                    from entradaImp
                                                                where idEntrada=old.IdEntrada
                                                                    into 
                                                                         VarValorInformado,
                                                                         VarValorApurado,
                                                                         VarImpostoApurado,
                                                                         VarImpostoInformado;
                                                                         
    if(VarImpostoApurado is null)then set VarImpostoApurado = 0; end if;
    if(VarImpostoInformado is null)then set VarImpostoInformado = 0; end if;
    if(VarValorInformado is null)then set VarValorInformado = 0; end if;
    if(VarValorApurado is null)then set VarValorApurado = 0; end if;
    if(VarIcmsSubstituicao is null)then set VarIcmsSubstituicao = 0; end if;        
    if(VarBaseSubstituicao is null)then set VarBaseSubstituicao = 0; end if;                 
    if(VarFullDiscount is null)then set VarFullDiscount = 0; end if;
    
    update 
                entrada
        set
                totalItens=VarItens,
                volume=VarVolume, 
                valorTotalVenda=VarVenda,
                valorTotalCustoLiquido=VarCustoFull, 
                valueApurado=VarValorApurado, 
                valueInformado=VarValorInformado, 
                impApurado=VarImpostoApurado, 
                impInformado=VarImpostoInformado,
                valorDesconto=VarFullDiscount, 
                valorPis=VarValorPis, 
                valorCofins=VarValorCofins, 
                basePis=VarBasePis, 
                baseCofins=VarBaseCofins, 
                totalBaseCalculoSubstituicao=VarBaseSubstituicao, 
                totalIcmsST=VarIcmsSubstituicao
        where 
            idEntrada=old.IdEntrada;
    
end $$

DELIMITER ;

--
-- Definition of table `entradaprice`
--

DROP TABLE IF EXISTS `entradaprice`;
CREATE TABLE `entradaprice` (
  `chave` double NOT NULL,
  `loja` int(11) NOT NULL,
  `priceVenda` decimal(15,3) NOT NULL,
  PRIMARY KEY (`chave`,`loja`),
  KEY `fk_entradaPrice_loja1` (`loja`),
  CONSTRAINT `fk_entradaPrice_entradaItem1` FOREIGN KEY (`chave`) REFERENCES `entradaitem` (`idEntradaItem`) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT `fk_entradaPrice_loja1` FOREIGN KEY (`loja`) REFERENCES `loja` (`idloja`) ON DELETE NO ACTION ON UPDATE NO ACTION
) ENGINE=InnoDB DEFAULT CHARSET=latin1;

--
-- Dumping data for table `entradaprice`
--

/*!40000 ALTER TABLE `entradaprice` DISABLE KEYS */;
/*!40000 ALTER TABLE `entradaprice` ENABLE KEYS */;


--
-- Definition of table `escolaridade`
--

DROP TABLE IF EXISTS `escolaridade`;
CREATE TABLE `escolaridade` (
  `idEscolaridade` int(11) NOT NULL,
  `descricao` varchar(45) NOT NULL,
  `status` smallint(6) NOT NULL DEFAULT '0',
  PRIMARY KEY (`idEscolaridade`)
) ENGINE=InnoDB DEFAULT CHARSET=latin1;

--
-- Dumping data for table `escolaridade`
--

/*!40000 ALTER TABLE `escolaridade` DISABLE KEYS */;
/*!40000 ALTER TABLE `escolaridade` ENABLE KEYS */;


--
-- Definition of table `estado`
--

DROP TABLE IF EXISTS `estado`;
CREATE TABLE `estado` (
  `idestado` int(11) NOT NULL AUTO_INCREMENT,
  `nome` varchar(45) NOT NULL,
  `uf` char(2) NOT NULL,
  `icms` decimal(10,3) DEFAULT NULL,
  `flagReducao` char(1) NOT NULL DEFAULT 'n',
  `reducao` decimal(10,3) DEFAULT NULL,
  `codigoUf` int(11) NOT NULL,
  PRIMARY KEY (`idestado`,`uf`)
) ENGINE=InnoDB DEFAULT CHARSET=latin1;

--
-- Dumping data for table `estado`
--

/*!40000 ALTER TABLE `estado` DISABLE KEYS */;
/*!40000 ALTER TABLE `estado` ENABLE KEYS */;


--
-- Definition of table `fatorliberacao`
--

DROP TABLE IF EXISTS `fatorliberacao`;
CREATE TABLE `fatorliberacao` (
  `idfatorLiberacao` int(11) NOT NULL DEFAULT '0',
  `descricao` varchar(30) NOT NULL,
  PRIMARY KEY (`idfatorLiberacao`)
) ENGINE=InnoDB DEFAULT CHARSET=latin1;

--
-- Dumping data for table `fatorliberacao`
--

/*!40000 ALTER TABLE `fatorliberacao` DISABLE KEYS */;
/*!40000 ALTER TABLE `fatorliberacao` ENABLE KEYS */;


--
-- Definition of table `fechamentocaixa`
--

DROP TABLE IF EXISTS `fechamentocaixa`;
CREATE TABLE `fechamentocaixa` (
  `dataMovimento` date NOT NULL,
  `loja` int(11) NOT NULL,
  `terminal` int(11) NOT NULL,
  `sequencia` int(11) NOT NULL,
  `funcionario` int(11) NOT NULL,
  `dataHoraSaida` datetime DEFAULT NULL,
  `grandeTotalBegin` decimal(15,2) NOT NULL DEFAULT '0.00',
  `grandeTotalEnd` decimal(15,2) NOT NULL DEFAULT '0.00',
  `contadorInicial` int(11) DEFAULT NULL,
  `contadorFinal` int(11) DEFAULT NULL,
  `cancelado` decimal(15,2) NOT NULL DEFAULT '0.00',
  `desconto` decimal(15,2) NOT NULL DEFAULT '0.00',
  `numeroCupom` double DEFAULT NULL,
  `numeroClienteAtendidos` int(11) DEFAULT NULL,
  `contadorReducao` int(11) DEFAULT NULL,
  `contadorCancelados` int(11) DEFAULT NULL,
  `contadorNaoFiscal` int(11) DEFAULT NULL,
  `totalNotaFiscal` decimal(15,2) DEFAULT NULL,
  `totalSangrias` decimal(15,2) DEFAULT NULL,
  `cripto` varchar(600) DEFAULT NULL,
  PRIMARY KEY (`dataMovimento`,`loja`,`terminal`,`sequencia`,`funcionario`),
  KEY `fk_fechamentoCaixa_loja1` (`loja`),
  KEY `fk_fechamentoCaixa_terminal1` (`terminal`),
  KEY `fk_fechamentoCaixa_funcionario1` (`funcionario`),
  CONSTRAINT `fk_fechamentoCaixa_funcionario1` FOREIGN KEY (`funcionario`) REFERENCES `funcionario` (`idfuncionario`) ON DELETE NO ACTION ON UPDATE NO ACTION,
  CONSTRAINT `fk_fechamentoCaixa_loja1` FOREIGN KEY (`loja`) REFERENCES `loja` (`idloja`) ON DELETE NO ACTION ON UPDATE NO ACTION,
  CONSTRAINT `fk_fechamentoCaixa_terminal1` FOREIGN KEY (`terminal`) REFERENCES `terminal` (`idterminal`) ON DELETE NO ACTION ON UPDATE NO ACTION
) ENGINE=InnoDB DEFAULT CHARSET=latin1;

--
-- Dumping data for table `fechamentocaixa`
--

/*!40000 ALTER TABLE `fechamentocaixa` DISABLE KEYS */;
/*!40000 ALTER TABLE `fechamentocaixa` ENABLE KEYS */;


--
-- Definition of table `feriado`
--

DROP TABLE IF EXISTS `feriado`;
CREATE TABLE `feriado` (
  `idferiado` int(11) NOT NULL AUTO_INCREMENT,
  `descricao` varchar(30) NOT NULL,
  `idloja` int(11) NOT NULL,
  `feriado` date NOT NULL,
  `todasLoja` smallint(6) NOT NULL DEFAULT '0',
  PRIMARY KEY (`idferiado`),
  UNIQUE KEY `feriado_UNIQUE` (`feriado`),
  KEY `fk_feriado_loja1` (`idloja`),
  CONSTRAINT `fk_feriado_loja1` FOREIGN KEY (`idloja`) REFERENCES `loja` (`idloja`) ON DELETE NO ACTION ON UPDATE NO ACTION
) ENGINE=InnoDB DEFAULT CHARSET=latin1;

--
-- Dumping data for table `feriado`
--

/*!40000 ALTER TABLE `feriado` DISABLE KEYS */;
/*!40000 ALTER TABLE `feriado` ENABLE KEYS */;


--
-- Definition of table `filiacao`
--

DROP TABLE IF EXISTS `filiacao`;
CREATE TABLE `filiacao` (
  `idfiliacao` double NOT NULL AUTO_INCREMENT,
  `cliente` int(11) NOT NULL,
  `consulta` date NOT NULL,
  `nascimento` date DEFAULT NULL,
  `parentesco` varchar(40) DEFAULT NULL,
  `motivo` varchar(200) DEFAULT NULL,
  `nomeRetorno` varchar(45) DEFAULT NULL,
  `documento` varchar(30) DEFAULT NULL COMMENT 'CPF\nCNPJ',
  `banco` int(11) DEFAULT NULL,
  `agencia` varchar(20) DEFAULT NULL,
  `conta` varchar(20) DEFAULT NULL,
  `numeroCheque` varchar(20) DEFAULT NULL,
  `serie` varchar(6) DEFAULT NULL,
  `qttyCheque` int(11) DEFAULT NULL,
  `usuario` int(11) NOT NULL,
  `razaoStore` varchar(45) DEFAULT NULL,
  `instituicao` varchar(30) DEFAULT NULL,
  `servico` int(11) DEFAULT '0',
  PRIMARY KEY (`idfiliacao`),
  KEY `fk_filiacao_cliente1` (`cliente`),
  KEY `fk_filiacao_usuario1` (`usuario`),
  CONSTRAINT `fk_filiacao_cliente1` FOREIGN KEY (`cliente`) REFERENCES `cliente` (`idcliente`) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT `fk_filiacao_usuario1` FOREIGN KEY (`usuario`) REFERENCES `usuario` (`idusuario`) ON DELETE NO ACTION ON UPDATE NO ACTION
) ENGINE=InnoDB DEFAULT CHARSET=latin1;

--
-- Dumping data for table `filiacao`
--

/*!40000 ALTER TABLE `filiacao` DISABLE KEYS */;
/*!40000 ALTER TABLE `filiacao` ENABLE KEYS */;


--
-- Definition of table `finalizadora`
--

DROP TABLE IF EXISTS `finalizadora`;
CREATE TABLE `finalizadora` (
  `idfinalizadora` int(11) NOT NULL AUTO_INCREMENT,
  `descricao` varchar(30) NOT NULL,
  `tac` decimal(9,3) NOT NULL DEFAULT '0.000',
  `trocoMax` decimal(9,3) NOT NULL DEFAULT '0.000',
  `typeFinalizadora` char(1) NOT NULL COMMENT 'A- Dinheiro\nB- Cheque AV\nC-Credito\nD-Debito\nE-Crediario\nF-Vale\nG-Receber\nH-Convenio\nI-Recebimento\nR- Outros\n',
  `cobrancaObrigatoria` smallint(6) NOT NULL DEFAULT '1',
  `taxaObrigatoria` decimal(9,3) NOT NULL DEFAULT '0.000',
  `idFinalizadoraTroco` int(11) NOT NULL DEFAULT '1',
  `typeVenda` char(2) NOT NULL DEFAULT 'AV',
  `flagRestringe` smallint(6) NOT NULL DEFAULT '0' COMMENT 'Verifica Cliente\n',
  `flagVencimento` smallint(6) NOT NULL DEFAULT '0',
  `flagPermitiTroco` smallint(6) NOT NULL DEFAULT '0',
  `flagBoleto` smallint(6) NOT NULL DEFAULT '0' COMMENT 'Imprimi Boleto\n',
  `flagPromissoria` smallint(6) NOT NULL DEFAULT '0' COMMENT 'Imprimi Promissoria\n',
  `flagValorBruto` smallint(6) NOT NULL DEFAULT '0' COMMENT 'Envia receita bruta para o caixa\n',
  `administradora` int(11) DEFAULT '0',
  `status` smallint(6) NOT NULL DEFAULT '0' COMMENT 'Inativa finalizadora\n',
  `finalizadoraCaixa` int(11) DEFAULT NULL,
  PRIMARY KEY (`idfinalizadora`)
) ENGINE=InnoDB DEFAULT CHARSET=latin1;

--
-- Dumping data for table `finalizadora`
--

/*!40000 ALTER TABLE `finalizadora` DISABLE KEYS */;
/*!40000 ALTER TABLE `finalizadora` ENABLE KEYS */;


--
-- Definition of table `fisica`
--

DROP TABLE IF EXISTS `fisica`;
CREATE TABLE `fisica` (
  `idcliente` int(11) NOT NULL,
  `cpf` varchar(12) NOT NULL,
  `idatividade` int(11) NOT NULL,
  `nome` varchar(45) NOT NULL,
  `nascimento` date NOT NULL,
  `idsexo` int(11) NOT NULL,
  `identidade` varchar(30) NOT NULL,
  `idcivil` int(11) NOT NULL,
  `idtipoFornecedor` int(11) NOT NULL DEFAULT '8',
  PRIMARY KEY (`idcliente`,`idatividade`),
  UNIQUE KEY `cpf_UNIQUE` (`cpf`),
  KEY `fk_fisica_sexo1` (`idsexo`),
  KEY `fk_fisica_civil1` (`idcivil`),
  CONSTRAINT `fk_fisica_civil1` FOREIGN KEY (`idcivil`) REFERENCES `civil` (`idcivil`) ON DELETE NO ACTION ON UPDATE NO ACTION,
  CONSTRAINT `fk_fisica_cliente1` FOREIGN KEY (`idcliente`, `idatividade`) REFERENCES `cliente` (`idcliente`, `idatividade`) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT `fk_fisica_sexo1` FOREIGN KEY (`idsexo`) REFERENCES `sexo` (`idsexo`) ON DELETE NO ACTION ON UPDATE NO ACTION
) ENGINE=InnoDB DEFAULT CHARSET=latin1;

--
-- Dumping data for table `fisica`
--

/*!40000 ALTER TABLE `fisica` DISABLE KEYS */;
/*!40000 ALTER TABLE `fisica` ENABLE KEYS */;


--
-- Definition of trigger `alter_exe_fisica`
--

DROP TRIGGER /*!50030 IF EXISTS */ `alter_exe_fisica`;

DELIMITER $$

CREATE DEFINER = `master`@`localhost` TRIGGER `alter_exe_fisica` BEFORE UPDATE ON `fisica` FOR EACH ROW begin
    select versaoBanco,versaoSystem,ip_mq from system into @a,@b,@c;
    select idUsuario from cliente where idCliente=new.idCliente into @d;
    
    if(new.nome <> old.nome)then
    
                call conector_exe_alt("MODULO [CLIENTE]", @d, concat("INFORMACAO OLD.: " , old.nome," INFORMACAO NEW.: ", new.nome), @c, 3,  @b, "FIELD.: NOME", old.nome);
                        else if( old.cpf <> new.cpf)then
                                    
                                    call conector_exe_alt("MODULO [CLIENTE]", @d, concat("INFORMACAO OLD.: " , old.cpf," INFORMACAO NEW.: ", new.cpf), @c, 6,  @b, "FIELD.: CPF", old.cpf);
                        end if;
    end if;
end $$

DELIMITER ;

--
-- Definition of table `fone`
--

DROP TABLE IF EXISTS `fone`;
CREATE TABLE `fone` (
  `idfone` int(11) NOT NULL AUTO_INCREMENT,
  `idcliente` int(11) NOT NULL,
  `idatividade` int(11) NOT NULL,
  `ddd` char(4) NOT NULL DEFAULT '0000',
  `telefone` varchar(8) NOT NULL,
  `ramal` int(11) DEFAULT NULL,
  `idfoneType` int(11) NOT NULL,
  `complemento` varchar(30) DEFAULT NULL,
  `priori` char(1) NOT NULL,
  PRIMARY KEY (`idfone`,`idcliente`,`idatividade`),
  KEY `fk_fone_foneType1` (`idfoneType`),
  KEY `fk_fone_cliente1` (`idcliente`,`idatividade`),
  CONSTRAINT `fk_fone_cliente1` FOREIGN KEY (`idcliente`, `idatividade`) REFERENCES `cliente` (`idcliente`, `idatividade`) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT `fk_fone_foneType1` FOREIGN KEY (`idfoneType`) REFERENCES `fonetype` (`idfoneType`) ON DELETE NO ACTION ON UPDATE NO ACTION
) ENGINE=InnoDB DEFAULT CHARSET=latin1;

--
-- Dumping data for table `fone`
--

/*!40000 ALTER TABLE `fone` DISABLE KEYS */;
/*!40000 ALTER TABLE `fone` ENABLE KEYS */;


--
-- Definition of table `fonetype`
--

DROP TABLE IF EXISTS `fonetype`;
CREATE TABLE `fonetype` (
  `idfoneType` int(11) NOT NULL AUTO_INCREMENT,
  `descricao` varchar(30) NOT NULL,
  PRIMARY KEY (`idfoneType`)
) ENGINE=InnoDB DEFAULT CHARSET=latin1;

--
-- Dumping data for table `fonetype`
--

/*!40000 ALTER TABLE `fonetype` DISABLE KEYS */;
/*!40000 ALTER TABLE `fonetype` ENABLE KEYS */;


--
-- Definition of table `funcao`
--

DROP TABLE IF EXISTS `funcao`;
CREATE TABLE `funcao` (
  `idfuncao` int(11) NOT NULL AUTO_INCREMENT,
  `descricao` varchar(30) NOT NULL,
  `especifica` smallint(6) NOT NULL DEFAULT '0',
  `passwd` varchar(12) DEFAULT '0',
  `discount` decimal(15,3) DEFAULT '0.000',
  PRIMARY KEY (`idfuncao`)
) ENGINE=InnoDB DEFAULT CHARSET=latin1;

--
-- Dumping data for table `funcao`
--

/*!40000 ALTER TABLE `funcao` DISABLE KEYS */;
/*!40000 ALTER TABLE `funcao` ENABLE KEYS */;


--
-- Definition of table `funcionario`
--

DROP TABLE IF EXISTS `funcionario`;
CREATE TABLE `funcionario` (
  `idfuncionario` int(11) NOT NULL AUTO_INCREMENT,
  `nome` varchar(45) NOT NULL,
  `apelido` varchar(12) NOT NULL,
  `nascimento` date NOT NULL,
  `idloja` int(11) NOT NULL,
  `idfuncao` int(11) NOT NULL,
  `passwd` varbinary(30) NOT NULL DEFAULT '0',
  `idcivil` int(11) NOT NULL,
  `idsexo` int(11) NOT NULL,
  `inclusao` datetime NOT NULL,
  `comissaoAvista` decimal(5,3) DEFAULT '0.000',
  `comissaoAprazo` decimal(5,3) DEFAULT '0.000',
  `cpf` varchar(12) DEFAULT NULL,
  `identidade` varchar(21) DEFAULT NULL,
  `email` varchar(45) DEFAULT NULL,
  `pis` varchar(21) DEFAULT NULL,
  `idusuario` int(11) NOT NULL,
  `Admissao` date NOT NULL,
  `demissao` varchar(8) DEFAULT NULL,
  `carteira` varchar(21) DEFAULT NULL,
  `observacao` blob,
  `idPremiacao` int(11) NOT NULL,
  `idMetaVenda` int(11) NOT NULL,
  `idprofissao` int(11) NOT NULL,
  `idEscolaridade` int(11) NOT NULL,
  `status` smallint(6) DEFAULT '0',
  `acessoFiscal` smallint(6) NOT NULL DEFAULT '0',
  `acessoMenuFiscal` smallint(6) NOT NULL DEFAULT '0',
  `crc` varchar(15) DEFAULT NULL,
  `contador_cnpj` varchar(14) DEFAULT NULL,
  PRIMARY KEY (`idfuncionario`),
  UNIQUE KEY `cpf_UNIQUE` (`cpf`,`passwd`) USING BTREE,
  KEY `fk_funcionario_loja1` (`idloja`),
  KEY `fk_funcionario_funcao1` (`idfuncao`),
  KEY `fk_funcionario_civil1` (`idcivil`),
  KEY `fk_funcionario_sexo1` (`idsexo`),
  KEY `fk_funcionario_usuario1` (`idusuario`),
  KEY `fk_funcionario_premiacao1` (`idPremiacao`),
  KEY `fk_funcionario_metaVenda1` (`idMetaVenda`),
  KEY `fk_funcionario_profissao1` (`idprofissao`),
  KEY `fk_funcionario_escolaridade1` (`idEscolaridade`),
  CONSTRAINT `fk_funcionario_civil1` FOREIGN KEY (`idcivil`) REFERENCES `civil` (`idcivil`) ON DELETE NO ACTION ON UPDATE NO ACTION,
  CONSTRAINT `fk_funcionario_escolaridade1` FOREIGN KEY (`idEscolaridade`) REFERENCES `escolaridade` (`idEscolaridade`) ON DELETE NO ACTION ON UPDATE NO ACTION,
  CONSTRAINT `fk_funcionario_funcao1` FOREIGN KEY (`idfuncao`) REFERENCES `funcao` (`idfuncao`) ON DELETE NO ACTION ON UPDATE NO ACTION,
  CONSTRAINT `fk_funcionario_loja1` FOREIGN KEY (`idloja`) REFERENCES `loja` (`idloja`) ON DELETE NO ACTION ON UPDATE NO ACTION,
  CONSTRAINT `fk_funcionario_metaVenda1` FOREIGN KEY (`idMetaVenda`) REFERENCES `metavenda` (`idmetaVenda`) ON DELETE NO ACTION ON UPDATE NO ACTION,
  CONSTRAINT `fk_funcionario_premiacao1` FOREIGN KEY (`idPremiacao`) REFERENCES `premiacao` (`idPremiacao`) ON DELETE NO ACTION ON UPDATE NO ACTION,
  CONSTRAINT `fk_funcionario_profissao1` FOREIGN KEY (`idprofissao`) REFERENCES `profissao` (`idprofissao`) ON DELETE NO ACTION ON UPDATE NO ACTION,
  CONSTRAINT `fk_funcionario_sexo1` FOREIGN KEY (`idsexo`) REFERENCES `sexo` (`idsexo`) ON DELETE NO ACTION ON UPDATE NO ACTION,
  CONSTRAINT `fk_funcionario_usuario1` FOREIGN KEY (`idusuario`) REFERENCES `usuario` (`idusuario`) ON DELETE NO ACTION ON UPDATE NO ACTION
) ENGINE=InnoDB DEFAULT CHARSET=latin1;

--
-- Dumping data for table `funcionario`
--

/*!40000 ALTER TABLE `funcionario` DISABLE KEYS */;
/*!40000 ALTER TABLE `funcionario` ENABLE KEYS */;


--
-- Definition of table `funcionario_endereco`
--

DROP TABLE IF EXISTS `funcionario_endereco`;
CREATE TABLE `funcionario_endereco` (
  `idFuncionarioEndereco` int(11) NOT NULL AUTO_INCREMENT,
  `idfuncionario` int(11) NOT NULL,
  `sequencia` int(11) NOT NULL,
  `cep` int(11) NOT NULL,
  `idcepbairro` int(11) NOT NULL,
  `idenderecoType` int(11) NOT NULL,
  `bairro` varchar(45) DEFAULT NULL,
  `logradouro` varchar(45) DEFAULT NULL,
  `complemento` varchar(60) DEFAULT NULL,
  `municipio` varchar(45) DEFAULT NULL,
  `estado` char(2) NOT NULL,
  `numero` int(11) DEFAULT '0',
  PRIMARY KEY (`idFuncionarioEndereco`,`idfuncionario`,`sequencia`),
  KEY `fk_endereco_enderecoType1` (`idenderecoType`),
  KEY `fk_endereco_cepbairro1` (`idcepbairro`,`cep`),
  KEY `fk_endereco_func_funcionario1` (`idfuncionario`),
  CONSTRAINT `fk_endereco_cepbairro10` FOREIGN KEY (`idcepbairro`, `cep`) REFERENCES `cepbairro` (`idcepbairro`, `cep`) ON DELETE NO ACTION ON UPDATE NO ACTION,
  CONSTRAINT `fk_endereco_enderecoType10` FOREIGN KEY (`idenderecoType`) REFERENCES `enderecotype` (`idenderecoType`) ON DELETE NO ACTION ON UPDATE NO ACTION,
  CONSTRAINT `fk_endereco_func_funcionario1` FOREIGN KEY (`idfuncionario`) REFERENCES `funcionario` (`idfuncionario`) ON DELETE CASCADE ON UPDATE CASCADE
) ENGINE=InnoDB DEFAULT CHARSET=latin1;

--
-- Dumping data for table `funcionario_endereco`
--

/*!40000 ALTER TABLE `funcionario_endereco` DISABLE KEYS */;
/*!40000 ALTER TABLE `funcionario_endereco` ENABLE KEYS */;


--
-- Definition of table `funcionario_fone`
--

DROP TABLE IF EXISTS `funcionario_fone`;
CREATE TABLE `funcionario_fone` (
  `idFuncionarioFone` int(11) NOT NULL AUTO_INCREMENT,
  `idfuncionario` int(11) NOT NULL,
  `ddd` char(4) NOT NULL DEFAULT '0000',
  `telefone` varchar(8) NOT NULL,
  `ramal` int(11) DEFAULT NULL,
  `idfoneType` int(11) NOT NULL,
  `complemento` varchar(30) DEFAULT NULL,
  `priori` char(1) NOT NULL,
  PRIMARY KEY (`idFuncionarioFone`,`idfuncionario`),
  KEY `fk_fone_foneType1` (`idfoneType`),
  KEY `fk_fone_copy1_funcionario1` (`idfuncionario`),
  CONSTRAINT `fk_fone_copy1_funcionario1` FOREIGN KEY (`idfuncionario`) REFERENCES `funcionario` (`idfuncionario`) ON DELETE NO ACTION ON UPDATE NO ACTION,
  CONSTRAINT `fk_fone_foneType10` FOREIGN KEY (`idfoneType`) REFERENCES `fonetype` (`idfoneType`) ON DELETE NO ACTION ON UPDATE NO ACTION
) ENGINE=InnoDB DEFAULT CHARSET=latin1;

--
-- Dumping data for table `funcionario_fone`
--

/*!40000 ALTER TABLE `funcionario_fone` DISABLE KEYS */;
/*!40000 ALTER TABLE `funcionario_fone` ENABLE KEYS */;


--
-- Definition of table `grupo`
--

DROP TABLE IF EXISTS `grupo`;
CREATE TABLE `grupo` (
  `idgrupo` int(11) NOT NULL AUTO_INCREMENT,
  `idsetor` int(11) NOT NULL,
  `idcomprador` int(11) NOT NULL,
  `descricao` varchar(45) DEFAULT NULL,
  `status` smallint(6) DEFAULT NULL,
  PRIMARY KEY (`idgrupo`,`idsetor`),
  KEY `fk_grupo_setor1` (`idsetor`),
  KEY `fk_grupo_comprador1` (`idcomprador`),
  CONSTRAINT `fk_grupo_comprador1` FOREIGN KEY (`idcomprador`) REFERENCES `comprador` (`idcomprador`) ON DELETE NO ACTION ON UPDATE NO ACTION,
  CONSTRAINT `fk_grupo_setor1` FOREIGN KEY (`idsetor`) REFERENCES `setor` (`idsetor`) ON DELETE NO ACTION ON UPDATE NO ACTION
) ENGINE=InnoDB DEFAULT CHARSET=latin1;

--
-- Dumping data for table `grupo`
--

/*!40000 ALTER TABLE `grupo` DISABLE KEYS */;
/*!40000 ALTER TABLE `grupo` ENABLE KEYS */;


--
-- Definition of table `hardware`
--

DROP TABLE IF EXISTS `hardware`;
CREATE TABLE `hardware` (
  `idhardware` int(11) NOT NULL,
  `descricao` varchar(45) NOT NULL,
  `tipoHard` smallint(6) NOT NULL,
  `versao` varchar(20) DEFAULT NULL,
  PRIMARY KEY (`idhardware`)
) ENGINE=InnoDB DEFAULT CHARSET=latin1;

--
-- Dumping data for table `hardware`
--

/*!40000 ALTER TABLE `hardware` DISABLE KEYS */;
/*!40000 ALTER TABLE `hardware` ENABLE KEYS */;


--
-- Definition of table `hardware_ecf`
--

DROP TABLE IF EXISTS `hardware_ecf`;
CREATE TABLE `hardware_ecf` (
  `idhardware_ecf` int(11) NOT NULL,
  `codigo_default_nacional` varchar(8) NOT NULL,
  PRIMARY KEY (`idhardware_ecf`)
) ENGINE=InnoDB DEFAULT CHARSET=latin1;

--
-- Dumping data for table `hardware_ecf`
--

/*!40000 ALTER TABLE `hardware_ecf` DISABLE KEYS */;
/*!40000 ALTER TABLE `hardware_ecf` ENABLE KEYS */;


--
-- Definition of table `historico`
--

DROP TABLE IF EXISTS `historico`;
CREATE TABLE `historico` (
  `idhistorico` int(11) NOT NULL AUTO_INCREMENT,
  `descricao` varchar(30) DEFAULT NULL,
  `tipo` varchar(1) NOT NULL,
  `lancamentoNegativo` varchar(1) DEFAULT NULL,
  `inativa` smallint(6) NOT NULL DEFAULT '0',
  PRIMARY KEY (`idhistorico`)
) ENGINE=InnoDB DEFAULT CHARSET=latin1;

--
-- Dumping data for table `historico`
--

/*!40000 ALTER TABLE `historico` DISABLE KEYS */;
/*!40000 ALTER TABLE `historico` ENABLE KEYS */;


--
-- Definition of table `historicocrediario`
--

DROP TABLE IF EXISTS `historicocrediario`;
CREATE TABLE `historicocrediario` (
  `idHistorico` double NOT NULL AUTO_INCREMENT,
  `parcela_idparcela` double NOT NULL,
  `parcela_idcrediario` double NOT NULL,
  `parcela_idloja` int(11) NOT NULL,
  `parcela_nr_parcela` int(11) NOT NULL,
  `motivo` varchar(30) DEFAULT NULL,
  `data` date NOT NULL,
  `finalizadora` int(11) NOT NULL,
  `valor` decimal(15,3) NOT NULL DEFAULT '0.000',
  `usuario` int(11) NOT NULL,
  `typeHistorico` int(11) NOT NULL COMMENT '0 | ABERTO\n1 | LIQUIDADO\n2 | PARCIAL\n3 | PERCA\n4 | COBRADOR\n5 | CANCELADO\n6 | ESTORNO\n7 | TROCO\n8 | ENTRADA\n9 | PGTO DINHEIRO\n10 | PGTO CHEQUE\n11 | PGTO CARTAO DEBITO\n12 | PGTO CARTAO CREDITO\n13 | PGTO VALE/TICKETS',
  `autenticacao` smallint(6) NOT NULL DEFAULT '0',
  PRIMARY KEY (`idHistorico`,`parcela_idparcela`,`parcela_idcrediario`,`parcela_idloja`,`parcela_nr_parcela`),
  KEY `fk_idHistorico_parcela1` (`parcela_idparcela`,`parcela_idcrediario`,`parcela_idloja`,`parcela_nr_parcela`),
  KEY `fk_idHistorico_finalizadora1` (`finalizadora`),
  KEY `fk_historico_typeHistorico1` (`typeHistorico`),
  KEY `fk_historicoCrediario_funcionario1` (`usuario`),
  CONSTRAINT `fk_historicoCrediario_funcionario1` FOREIGN KEY (`usuario`) REFERENCES `funcionario` (`idfuncionario`) ON DELETE NO ACTION ON UPDATE NO ACTION,
  CONSTRAINT `fk_historico_typeHistorico1` FOREIGN KEY (`typeHistorico`) REFERENCES `typehistorico` (`typeHistorico`) ON DELETE NO ACTION ON UPDATE NO ACTION,
  CONSTRAINT `fk_idHistorico_finalizadora1` FOREIGN KEY (`finalizadora`) REFERENCES `finalizadora` (`idfinalizadora`) ON DELETE NO ACTION ON UPDATE NO ACTION,
  CONSTRAINT `fk_idHistorico_parcela1` FOREIGN KEY (`parcela_idparcela`, `parcela_idcrediario`, `parcela_idloja`, `parcela_nr_parcela`) REFERENCES `parcela` (`idparcela`, `idcrediario`, `idloja`, `nr_parcela`) ON DELETE NO ACTION ON UPDATE NO ACTION
) ENGINE=InnoDB DEFAULT CHARSET=latin1;

--
-- Dumping data for table `historicocrediario`
--

/*!40000 ALTER TABLE `historicocrediario` DISABLE KEYS */;
/*!40000 ALTER TABLE `historicocrediario` ENABLE KEYS */;


--
-- Definition of table `ibptax`
--

DROP TABLE IF EXISTS `ibptax`;
CREATE TABLE `ibptax` (
  `ibptax_id` char(30) NOT NULL,
  `ex` char(1) DEFAULT NULL,
  `tipo` char(1) DEFAULT NULL,
  `descricao` varchar(100) NOT NULL,
  `nacionalfederal` decimal(15,3) NOT NULL DEFAULT '0.000',
  `importadosfederal` decimal(15,3) NOT NULL DEFAULT '0.000',
  `estadual` decimal(15,3) NOT NULL DEFAULT '0.000',
  `municipal` decimal(15,3) NOT NULL DEFAULT '0.000',
  `datain` date NOT NULL,
  `datafim` date NOT NULL,
  `versao` varchar(10) DEFAULT NULL
) ENGINE=InnoDB DEFAULT CHARSET=latin1;

--
-- Dumping data for table `ibptax`
--

/*!40000 ALTER TABLE `ibptax` DISABLE KEYS */;
/*!40000 ALTER TABLE `ibptax` ENABLE KEYS */;


--
-- Definition of table `integracaosophusspc`
--

DROP TABLE IF EXISTS `integracaosophusspc`;
CREATE TABLE `integracaosophusspc` (
  `idintegracaoSophusSPC` int(11) NOT NULL AUTO_INCREMENT,
  `idcliente` int(11) NOT NULL,
  `messagem` varchar(1000) NOT NULL,
  `data` date NOT NULL,
  `usuario` int(11) NOT NULL,
  `servico` int(11) DEFAULT NULL,
  PRIMARY KEY (`idintegracaoSophusSPC`,`idcliente`),
  KEY `fk_integracaoSophusSPC_cliente1` (`idcliente`),
  CONSTRAINT `fk_integracaoSophusSPC_cliente1` FOREIGN KEY (`idcliente`) REFERENCES `cliente` (`idcliente`) ON DELETE NO ACTION ON UPDATE NO ACTION
) ENGINE=InnoDB DEFAULT CHARSET=latin1;

--
-- Dumping data for table `integracaosophusspc`
--

/*!40000 ALTER TABLE `integracaosophusspc` DISABLE KEYS */;
/*!40000 ALTER TABLE `integracaosophusspc` ENABLE KEYS */;


--
-- Definition of table `inventario`
--

DROP TABLE IF EXISTS `inventario`;
CREATE TABLE `inventario` (
  `idinventario` double NOT NULL AUTO_INCREMENT,
  `idloja` int(11) NOT NULL,
  `status` smallint(6) NOT NULL,
  `data` date NOT NULL,
  `nome` varchar(30) NOT NULL,
  `atualizaCustorMedio` smallint(6) NOT NULL,
  `usuario` int(11) NOT NULL,
  `usuarioAtualiza` int(11) DEFAULT NULL,
  `valor` decimal(15,3) NOT NULL,
  `custo` decimal(15,3) NOT NULL,
  `tipo` smallint(6) NOT NULL COMMENT '0 - Fiscal\n1 - NÆo Fiscal',
  `idinventarioMotivo` int(11) NOT NULL,
  `final` smallint(6) NOT NULL DEFAULT '0' COMMENT '0 - todos\n1 - com quantidade\n2 - zerados',
  `tipoEan` varchar(1) DEFAULT '0' COMMENT 'v - Venda\nc - Compra',
  `setorFixo` smallint(6) DEFAULT '0' COMMENT '0 Todos\n1 RedCode',
  `grupoFixo` smallint(6) DEFAULT '0' COMMENT '0 Todos\n1 RedCode',
  `categoriaFixo` smallint(6) DEFAULT '0' COMMENT '0 Todos\n1 RedCode',
  `idFornecedor` double DEFAULT '0',
  PRIMARY KEY (`idinventario`),
  KEY `fk_inventario_loja1` (`idloja`),
  KEY `fk_inventario_inventarioMotivo1` (`idinventarioMotivo`),
  CONSTRAINT `fk_inventario_inventarioMotivo1` FOREIGN KEY (`idinventarioMotivo`) REFERENCES `inventariomotivo` (`idinventarioMotivo`) ON DELETE NO ACTION ON UPDATE NO ACTION,
  CONSTRAINT `fk_inventario_loja1` FOREIGN KEY (`idloja`) REFERENCES `loja` (`idloja`) ON DELETE NO ACTION ON UPDATE NO ACTION
) ENGINE=InnoDB DEFAULT CHARSET=latin1;

--
-- Dumping data for table `inventario`
--

/*!40000 ALTER TABLE `inventario` DISABLE KEYS */;
/*!40000 ALTER TABLE `inventario` ENABLE KEYS */;


--
-- Definition of table `inventariocoletor`
--

DROP TABLE IF EXISTS `inventariocoletor`;
CREATE TABLE `inventariocoletor` (
  `idinventarioColetor` double NOT NULL,
  `idinventario` double NOT NULL,
  `codigoBarra` double DEFAULT NULL,
  `idProduto` double DEFAULT NULL,
  `descricao` varchar(45) DEFAULT NULL,
  `quantidadeEmb` decimal(15,3) DEFAULT NULL,
  `quantidade` decimal(15,3) DEFAULT NULL,
  PRIMARY KEY (`idinventarioColetor`),
  KEY `fk_inventarioColetor_inventario1` (`idinventario`),
  CONSTRAINT `fk_inventarioColetor_inventario1` FOREIGN KEY (`idinventario`) REFERENCES `inventario` (`idinventario`) ON DELETE NO ACTION ON UPDATE NO ACTION
) ENGINE=InnoDB DEFAULT CHARSET=latin1;

--
-- Dumping data for table `inventariocoletor`
--

/*!40000 ALTER TABLE `inventariocoletor` DISABLE KEYS */;
/*!40000 ALTER TABLE `inventariocoletor` ENABLE KEYS */;


--
-- Definition of table `inventarioitem`
--

DROP TABLE IF EXISTS `inventarioitem`;
CREATE TABLE `inventarioitem` (
  `idinventarioItem` double NOT NULL AUTO_INCREMENT,
  `idinventario` double NOT NULL,
  `idProduto` int(11) NOT NULL,
  `quantidadeAtual` decimal(15,3) NOT NULL DEFAULT '0.000',
  `valor` decimal(15,3) NOT NULL DEFAULT '0.000',
  `custoReposicao` decimal(15,3) NOT NULL DEFAULT '0.000',
  `custoLiquido` decimal(15,3) NOT NULL DEFAULT '0.000',
  `precoVenda` decimal(15,3) NOT NULL DEFAULT '0.000',
  `quantidadeEncontrada` decimal(15,3) NOT NULL DEFAULT '0.000',
  `total` decimal(15,3) NOT NULL DEFAULT '0.000',
  `setor` int(11) DEFAULT '0',
  `grupo` int(11) DEFAULT '0',
  `categoria` int(11) DEFAULT '0',
  `fornecedor` double DEFAULT '0',
  `quantidadeDivergente` decimal(15,3) DEFAULT '0.000',
  `valorDivergente` decimal(15,3) DEFAULT '0.000',
  `contagem1` decimal(15,3) DEFAULT '0.000',
  `contagem2` decimal(15,3) DEFAULT '0.000',
  `contagem3` decimal(15,3) DEFAULT '0.000',
  `contagem4` decimal(15,3) DEFAULT '0.000',
  `contagem5` decimal(15,3) DEFAULT '0.000',
  `contagem6` decimal(15,3) DEFAULT '0.000',
  `observacao` varchar(45) DEFAULT NULL,
  `contagemFinalizado` varchar(1) DEFAULT 'N',
  `digitado` varchar(1) DEFAULT 'N',
  `dateInsert` datetime DEFAULT NULL,
  `dateAlteracao` datetime DEFAULT NULL,
  `contador` smallint(5) unsigned NOT NULL DEFAULT '0',
  PRIMARY KEY (`idinventarioItem`),
  KEY `fk_inventarioItem_produto1` (`idProduto`),
  KEY `fk_inventarioItem_inventario1` (`idinventario`),
  CONSTRAINT `fk_inventarioItem_inventario1` FOREIGN KEY (`idinventario`) REFERENCES `inventario` (`idinventario`) ON DELETE NO ACTION ON UPDATE NO ACTION,
  CONSTRAINT `fk_inventarioItem_produto1` FOREIGN KEY (`idProduto`) REFERENCES `produto` (`idProduto`) ON DELETE NO ACTION ON UPDATE NO ACTION
) ENGINE=InnoDB DEFAULT CHARSET=latin1;

--
-- Dumping data for table `inventarioitem`
--

/*!40000 ALTER TABLE `inventarioitem` DISABLE KEYS */;
/*!40000 ALTER TABLE `inventarioitem` ENABLE KEYS */;


--
-- Definition of trigger `inventario_last_insert`
--

DROP TRIGGER /*!50030 IF EXISTS */ `inventario_last_insert`;

DELIMITER $$

CREATE DEFINER = `master`@`localhost` TRIGGER `inventario_last_insert` BEFORE INSERT ON `inventarioitem` FOR EACH ROW begin
select
    round(sum(quantidadeAtual*custoLiquido),2),
    round(sum(quantidadeAtual*precoVenda),2)
          from conector.inventarioItem where idInventario=new.idInventario into @custo,@venda;
          
          update inventario set custo=@custo,valor=@venda where idInventario=new.idInventario;
          
                                          set new.dateInsert = now();
end $$

DELIMITER ;

--
-- Definition of trigger `inventario_last_update`
--

DROP TRIGGER /*!50030 IF EXISTS */ `inventario_last_update`;

DELIMITER $$

CREATE DEFINER = `master`@`localhost` TRIGGER `inventario_last_update` BEFORE UPDATE ON `inventarioitem` FOR EACH ROW begin
                        select contagem1,
                                contagem2,
                                contagem3 from 
                                        inventarioItem where idInventarioItem=new.idInventarioItem
                                                                into @a,@c,@b;
                                            
                        if(new.contagem1 = 0)then
                            set new.contador = new.contador + 1;
                            else if(new.contagem2 = 0)then
                                set new.contagem2 = old.contagem1;
                                set new.contador = new.contador + 1;
                                    else if(new.contagem3 = 0)then
                                set new.contagem3 = old.contagem1;
                                set new.contador = new.contador + 1;
                                        else if(new.contagem4 = 0)then
                                            set new.contagem4 = old.contagem1;
                                            set new.contador = new.contador + 1;
                                                else if(new.contagem5 = 0)then
                                                    set new.contagem5 = old.contagem1;
                                                    set new.contador = new.contador + 1;
                                                        else if(new.contagem6 = 0)then
                                                            set new.contagem6 = old.contagem1;
                                                            set new.contador = new.contador + 1;
                                            end if;
                                        end if;
                                    end if;
                                end if;
                            end if;
                        end if;
                                          set new.dateAlteracao = now();
end $$

DELIMITER ;

--
-- Definition of table `inventariomotivo`
--

DROP TABLE IF EXISTS `inventariomotivo`;
CREATE TABLE `inventariomotivo` (
  `idinventarioMotivo` int(11) NOT NULL AUTO_INCREMENT,
  `descricao` varchar(100) NOT NULL,
  PRIMARY KEY (`idinventarioMotivo`)
) ENGINE=InnoDB DEFAULT CHARSET=latin1;

--
-- Dumping data for table `inventariomotivo`
--

/*!40000 ALTER TABLE `inventariomotivo` DISABLE KEYS */;
/*!40000 ALTER TABLE `inventariomotivo` ENABLE KEYS */;


--
-- Definition of table `juridica`
--

DROP TABLE IF EXISTS `juridica`;
CREATE TABLE `juridica` (
  `idcliente` int(11) NOT NULL,
  `cnpj` varchar(14) NOT NULL,
  `idatividade` int(11) NOT NULL,
  `razao` varchar(45) NOT NULL,
  `fantasia` varchar(45) DEFAULT NULL,
  `ie` varchar(30) NOT NULL,
  `dataAbertura` date DEFAULT NULL,
  `idtipoFornecedor` int(11) NOT NULL,
  PRIMARY KEY (`idcliente`,`idatividade`),
  KEY `fk_juridica_tipoFornecedor1` (`idtipoFornecedor`),
  CONSTRAINT `fk_juridica_cliente1` FOREIGN KEY (`idcliente`, `idatividade`) REFERENCES `cliente` (`idcliente`, `idatividade`) ON DELETE NO ACTION ON UPDATE NO ACTION,
  CONSTRAINT `fk_juridica_tipoFornecedor1` FOREIGN KEY (`idtipoFornecedor`) REFERENCES `tipofornecedor` (`idtipoFornecedor`) ON DELETE NO ACTION ON UPDATE NO ACTION
) ENGINE=InnoDB DEFAULT CHARSET=latin1;

--
-- Dumping data for table `juridica`
--

/*!40000 ALTER TABLE `juridica` DISABLE KEYS */;
/*!40000 ALTER TABLE `juridica` ENABLE KEYS */;


--
-- Definition of trigger `alter_exe_juridica`
--

DROP TRIGGER /*!50030 IF EXISTS */ `alter_exe_juridica`;

DELIMITER $$

CREATE DEFINER = `master`@`localhost` TRIGGER `alter_exe_juridica` BEFORE UPDATE ON `juridica` FOR EACH ROW begin
    select versaoBanco,versaoSystem,ip_mq from system into @a,@b,@c;
    select idUsuario,idLoja from cliente where idCliente=new.idCliente into @d,@e;
    
    if(@e is not null)
    then
    if(new.razao <> old.razao)then
    
                call conector_exe_alt("MODULO [CLIENTE]", @d, concat("INFORMACAO OLD.: " , old.razao," INFORMACAO NEW.: ", new.razao), @c, 3,  @b, "FIELD.: RAZAO", old.razao,NEW.razao);
                
                        else if( old.cnpj <> new.cnpj)then
                                    
                                    call conector_exe_alt("MODULO [CLIENTE]", 
                                                          @d, 
                                                          concat("INFORMACAO OLD.: " , old.cnpj," INFORMACAO NEW.: ", new.cnpj), 
                                                          @c, 
                                                          5,  
                                                          @b, 
                                                          "FIELD.: CNPJ", 
                                                          old.cnpj,new.cnpj);
                                    
                                                            else if( old.ie <> new.ie)then
                                    
                                                                            call conector_exe_alt("MODULO [CLIENTE]", @d, concat("INFORMACAO OLD.: " , 0," INFORMACAO NEW.: ", new.ie), @c, new.idCliente,  @b, "FIELD.: INSCRICAO ESTADUAL","", new.ie);
                                                                                end if;
                        end if;
    end if;
    end if;
end $$

DELIMITER ;

--
-- Definition of table `licenca_adm`
--

DROP TABLE IF EXISTS `licenca_adm`;
CREATE TABLE `licenca_adm` (
  `cnpj` varchar(45) NOT NULL,
  `aquisicao` date NOT NULL,
  `periodoUso` date NOT NULL,
  `password` varbinary(45) DEFAULT NULL,
  `statusPgto` smallint(6) NOT NULL,
  `idloja` int(11) NOT NULL,
  PRIMARY KEY (`cnpj`),
  KEY `fk_licenca_adm_loja1` (`idloja`),
  CONSTRAINT `fk_licenca_adm_loja1` FOREIGN KEY (`idloja`) REFERENCES `loja` (`idloja`) ON DELETE NO ACTION ON UPDATE NO ACTION
) ENGINE=InnoDB DEFAULT CHARSET=latin1;

--
-- Dumping data for table `licenca_adm`
--

/*!40000 ALTER TABLE `licenca_adm` DISABLE KEYS */;
/*!40000 ALTER TABLE `licenca_adm` ENABLE KEYS */;


--
-- Definition of table `licenca_ecf`
--

DROP TABLE IF EXISTS `licenca_ecf`;
CREATE TABLE `licenca_ecf` (
  `caixa` int(11) NOT NULL,
  `cnpj` varchar(16) NOT NULL,
  `numeroSerie` varchar(45) NOT NULL,
  `inativo` smallint(6) NOT NULL DEFAULT '0' COMMENT 'EM USO',
  `aquisicao` date DEFAULT NULL,
  `liberacao` date DEFAULT NULL,
  `modelo` int(11) NOT NULL,
  `situacao` smallint(6) NOT NULL DEFAULT '0',
  `modeloFiscal` varchar(2) DEFAULT NULL,
  PRIMARY KEY (`caixa`,`cnpj`),
  UNIQUE KEY `numeroSerie_UNIQUE` (`numeroSerie`),
  KEY `fk_licenca_ecf_modelo_ecf1` (`modelo`),
  CONSTRAINT `fk_licenca_ecf_modelo_ecf1` FOREIGN KEY (`modelo`) REFERENCES `modelo_ecf` (`idMarca`) ON DELETE NO ACTION ON UPDATE NO ACTION
) ENGINE=InnoDB DEFAULT CHARSET=latin1;

--
-- Dumping data for table `licenca_ecf`
--

/*!40000 ALTER TABLE `licenca_ecf` DISABLE KEYS */;
/*!40000 ALTER TABLE `licenca_ecf` ENABLE KEYS */;


--
-- Definition of trigger `licenca_ecf_last_insert`
--

DROP TRIGGER /*!50030 IF EXISTS */ `licenca_ecf_last_insert`;

DELIMITER $$

CREATE DEFINER = `master`@`localhost` TRIGGER `licenca_ecf_last_insert` AFTER INSERT ON `licenca_ecf` FOR EACH ROW begin
    declare VarStore double default 0;
    declare VarIdTerminal integer;
    
    select idLoja into VarStore from loja where cnpj=new.cnpj;

    replace INTO `conector`.`numeroecf`
        (idloja,
        `serie`)
        VALUES
    (
        VarStore,
        new.numeroSerie
    );

if((select count(*) from conector.terminal tab
                inner join conector.terminalecfconfig tab1 on(tab.idTerminal = tab1.Terminal)
                                                        where tab1.serie=new.numeroSerie) = 0)then
    insert INTO `conector`.`terminal`
    (
        `idloja`,
        `idtypeTerminal`,
         descricao,
        `flagDesconto`,
        `status`,
        `operacao`,
        `multiTarefa`)
    VALUES
    (
        VarStore,
        5,
        concat("ECF. ",new.caixa),
        0,
        NEW.inativo,
        0,
        0
    );

    set VarIdTerminal = last_insert_id();
    
    if(VarIdTerminal is not null)then
        INSERT INTO `conector`.`terminalecfconfig`
(`terminal`,
`caixa`,
`ipCaixa`,
`abeturaTroco`,
`imprimiCheque`,
`timeBlock`,
`blockTime`,
`trocaMercadoria`,
`carneRecebe`,
`codigoEmpresaTef`,
`trocoMax`,
`serie`,
`utilizaTeclado`,
`utilizaTef`,
`utilizaBalanca`,
`utilizaEcf`,
`portTef`,
`portBalanca`,
`portEcf`,
`funcaoProgramada`,
`msgTef`,
`idModeloEcf`,
`statusPdv`,
`autentica`,`typeTef`, alertaSangria, valueSangria)
VALUES
(
    VarIdTerminal,
    new.caixa,
    '127.0.0.1',
    0,
    0,
    0,
    0,
    0,
    0,
    "",
    0,
    new.numeroSerie,
    1,
    0,
    0,
    1,
    "",
    "",
    "",
    1,
    "Conector Sytem...!",
    new.Modelo,
    2,
    1,0,
    0,0);

    end if;
end if;
end $$

DELIMITER ;

--
-- Definition of table `log`
--

DROP TABLE IF EXISTS `log`;
CREATE TABLE `log` (
  `idlog` int(11) NOT NULL AUTO_INCREMENT,
  `data` date DEFAULT NULL,
  `hora` time DEFAULT NULL,
  `operacao` varchar(45) DEFAULT NULL,
  `usuario` int(11) DEFAULT NULL,
  `historico` varchar(200) DEFAULT NULL,
  `ip` varchar(15) DEFAULT NULL,
  `chaveorigem` double DEFAULT NULL,
  `versoes` varchar(20) DEFAULT NULL,
  `detalhes` blob,
  `cont_ant` varchar(45) DEFAULT NULL,
  `chavepai` double DEFAULT NULL,
  PRIMARY KEY (`idlog`)
) ENGINE=InnoDB DEFAULT CHARSET=latin1;

--
-- Dumping data for table `log`
--

/*!40000 ALTER TABLE `log` DISABLE KEYS */;
/*!40000 ALTER TABLE `log` ENABLE KEYS */;


--
-- Definition of table `loja`
--

DROP TABLE IF EXISTS `loja`;
CREATE TABLE `loja` (
  `idloja` int(11) NOT NULL,
  `razao` varchar(45) NOT NULL,
  `abreviatura` varchar(45) DEFAULT NULL,
  `cnpj` varchar(14) NOT NULL,
  `ie` varchar(30) NOT NULL,
  `iemunicipal` varchar(30) DEFAULT NULL,
  `type` char(1) DEFAULT NULL,
  `idestado` int(11) NOT NULL,
  `uf` char(2) NOT NULL,
  `codigoMunicipio` int(10) unsigned NOT NULL,
  `typeLoja` char(1) DEFAULT NULL COMMENT 'p = propria\nf = franquiada\nc = centro de distribuição\nt = troca\na = atacado\nx = almox\n',
  `aliquotaPis` decimal(15,3) NOT NULL DEFAULT '0.000',
  `aliquotaCofins` decimal(15,3) NOT NULL DEFAULT '0.000',
  `controlaEstoque` char(1) NOT NULL DEFAULT 's',
  `typeCalculo` char(1) DEFAULT NULL COMMENT 'lucro bruto(marcap)\nb - sobre o custo\nr - sobre o venda\nlucro liquido\nc - sobre o custo\nl - sobre o venda',
  `empresaTroca` int(11) DEFAULT NULL COMMENT '0',
  `aliquotaInss` decimal(5,3) DEFAULT '0.000',
  `aliquotaIss` decimal(5,3) DEFAULT '0.000',
  `matriz` smallint(6) NOT NULL DEFAULT '0',
  `deposito` smallint(6) NOT NULL DEFAULT '0',
  `serieNota` varchar(3) DEFAULT NULL,
  `numeroNota` int(11) DEFAULT NULL,
  `atualizaCusto` smallint(6) NOT NULL DEFAULT '1',
  `status` smallint(6) NOT NULL,
  `ramo` char(1) NOT NULL COMMENT 'r = lucro real "Todos os impostos e contribuição social "\np = pequeno porte "minimiza os impostos"\ns = "simples minas"\nh = "super simples',
  `idpais` int(11) NOT NULL DEFAULT '30',
  `cnae` varchar(30) DEFAULT NULL,
  `lojaNf` int(11) DEFAULT NULL,
  `ieSubstituicao` varchar(30) DEFAULT NULL,
  `calcPisCofins` smallint(6) NOT NULL DEFAULT '0',
  `contribuicao` decimal(15,3) NOT NULL DEFAULT '0.000',
  `ir` decimal(15,3) NOT NULL DEFAULT '0.000',
  `irMinima` decimal(15,3) NOT NULL DEFAULT '0.000',
  `valorRetencaoPisCofins` decimal(15,3) NOT NULL DEFAULT '0.000',
  `flagCalcAboutSTPisCofins` smallint(6) NOT NULL DEFAULT '0',
  `custoOperacional` decimal(15,3) NOT NULL DEFAULT '0.000',
  `tipoComissao` int(11) DEFAULT NULL,
  `diasDevComissao` smallint(6) DEFAULT '0',
  `nossoNumero` int(11) NOT NULL DEFAULT '0',
  `responsavel` varchar(28) DEFAULT NULL,
  `abertura` date DEFAULT NULL,
  `subSerie` varchar(2) DEFAULT NULL,
  `numeroNotaSerie` double DEFAULT NULL,
  `serieNfce` varchar(3) DEFAULT NULL,
  `numeroNotaConsumidor` double DEFAULT '0',
  `loteNfe` double DEFAULT '0',
  `loteNfce` double DEFAULT '0',
  PRIMARY KEY (`idloja`),
  KEY `fk_loja_estado1` (`idestado`,`uf`),
  KEY `fk_loja_spedMunicipio1` (`codigoMunicipio`),
  KEY `fk_loja` (`idloja`) USING BTREE,
  KEY `fk_loja_pais1` (`idpais`),
  CONSTRAINT `fk_loja` FOREIGN KEY (`idloja`) REFERENCES `loja` (`idloja`) ON DELETE NO ACTION ON UPDATE NO ACTION,
  CONSTRAINT `fk_loja_estado1` FOREIGN KEY (`idestado`, `uf`) REFERENCES `estado` (`idestado`, `uf`) ON DELETE NO ACTION ON UPDATE NO ACTION,
  CONSTRAINT `fk_loja_pais1` FOREIGN KEY (`idpais`) REFERENCES `pais` (`idpais`) ON DELETE NO ACTION ON UPDATE NO ACTION,
  CONSTRAINT `fk_loja_spedMunicipio1` FOREIGN KEY (`codigoMunicipio`) REFERENCES `spedmunicipio` (`idspedMunicipio`) ON DELETE NO ACTION ON UPDATE NO ACTION
) ENGINE=InnoDB DEFAULT CHARSET=latin1;

--
-- Dumping data for table `loja`
--

/*!40000 ALTER TABLE `loja` DISABLE KEYS */;
/*!40000 ALTER TABLE `loja` ENABLE KEYS */;


--
-- Definition of trigger `lojaCliente_last_insert`
--

DROP TRIGGER /*!50030 IF EXISTS */ `lojaCliente_last_insert`;

DELIMITER $$

CREATE DEFINER = `master`@`localhost` TRIGGER `lojaCliente_last_insert` AFTER INSERT ON `loja` FOR EACH ROW begin
select max(idUsuario) from usuario where supervisor=1 into @a;
insert into
		cliente
			(
				idloja,
				idtipoPessoa,
				idusuario,
				idatividade,
				observacao,
				dataEmissao,
				dataAlteracao,
				idestado,
				uf,
        status,
        idspedMunicipio
			)	values
			(
				new.idloja,
				2,
				@a,
				7,
				"",
				now(),
				now(),
				new.idestado,
				new.uf,
        new.status,
        new.codigoMunicipio
			);

    

        CALL conector_inc_juridica(new.idloja,new.cnpj,7,new.razao,new.abreviatura,new.ie,now(),2);
    
        insert into paramentro_crediario(loja)values(new.idLoja);
end $$

DELIMITER ;

--
-- Definition of trigger `alter_exe_store`
--

DROP TRIGGER /*!50030 IF EXISTS */ `alter_exe_store`;

DELIMITER $$

CREATE DEFINER = `master`@`localhost` TRIGGER `alter_exe_store` BEFORE UPDATE ON `loja` FOR EACH ROW begin
    select versaoBanco,versaoSystem,ip_mq from system into @a,@b,@c;
    select idUsuario from cliente where idCliente=new.idloja into @d;
    
    if(new.razao <> old.razao)then
    
                call conector_exe_alt("MODULO [LOJA]", @d, concat("INFORMACAO OLD.: " , old.razao," INFORMACAO NEW.: ", new.razao), @c, new.idLoja,  @b, "FIELD.: RAZAO", new.idLoja);
                        else if( old.cnpj <> new.cnpj)then
                                    
                                    call conector_exe_alt("MODULO [LOJA]", @d, concat("INFORMACAO OLD.: " , old.cnpj," INFORMACAO NEW.: ", new.cnpj), @c, new.idLoja,  @b, "FIELD.: CNPJ", new.idLoja);
                                    
                                                            else if( old.ie <> new.ie)then
                                    
                                                                            call conector_exe_alt("MODULO [LOJA]", @d, concat("INFORMACAO OLD.: " , old.ie," INFORMACAO NEW.: ", new.ie), @c, new.idLoja,  @b, "FIELD.: INSCRICAO ESTADUAL", new.idLoja);
                                                                                end if;
                        end if;
    end if;
end $$

DELIMITER ;

--
-- Definition of table `loja_card`
--

DROP TABLE IF EXISTS `loja_card`;
CREATE TABLE `loja_card` (
  `codigo` int(11) NOT NULL,
  `loja` int(11) NOT NULL,
  `contaCorrente` int(11) NOT NULL DEFAULT '1',
  `fullStore` smallint(6) NOT NULL,
  PRIMARY KEY (`codigo`,`loja`),
  KEY `fk_loja_card_loja1` (`loja`),
  KEY `fk_loja_card_conta1` (`contaCorrente`),
  CONSTRAINT `fk_loja_card_loja1` FOREIGN KEY (`loja`) REFERENCES `loja` (`idloja`) ON DELETE NO ACTION ON UPDATE NO ACTION,
  CONSTRAINT `fk_table1_administradora1` FOREIGN KEY (`codigo`) REFERENCES `administradora` (`idAdministradora`) ON DELETE NO ACTION ON UPDATE NO ACTION
) ENGINE=InnoDB DEFAULT CHARSET=latin1;

--
-- Dumping data for table `loja_card`
--

/*!40000 ALTER TABLE `loja_card` DISABLE KEYS */;
/*!40000 ALTER TABLE `loja_card` ENABLE KEYS */;


--
-- Definition of table `lojaecf`
--

DROP TABLE IF EXISTS `lojaecf`;
CREATE TABLE `lojaecf` (
  `pdvEcf` int(11) NOT NULL,
  `idloja` int(11) DEFAULT NULL,
  `numeroSerie` varchar(45) NOT NULL,
  `inativo` smallint(6) NOT NULL,
  `aquisicao` date DEFAULT NULL,
  `liberacao` date DEFAULT NULL,
  `modelo` int(11) DEFAULT NULL,
  PRIMARY KEY (`pdvEcf`),
  KEY `fk_lojaEcf_loja1` (`idloja`),
  KEY `fk_lojaEcf_modelo_ecf1` (`modelo`),
  CONSTRAINT `fk_lojaEcf_loja1` FOREIGN KEY (`idloja`) REFERENCES `loja` (`idloja`) ON DELETE NO ACTION ON UPDATE NO ACTION,
  CONSTRAINT `fk_lojaEcf_modelo_ecf1` FOREIGN KEY (`modelo`) REFERENCES `modelo_ecf` (`idMarca`) ON DELETE NO ACTION ON UPDATE NO ACTION
) ENGINE=InnoDB DEFAULT CHARSET=latin1;

--
-- Dumping data for table `lojaecf`
--

/*!40000 ALTER TABLE `lojaecf` DISABLE KEYS */;
/*!40000 ALTER TABLE `lojaecf` ENABLE KEYS */;


--
-- Definition of table `lojarelacionamento`
--

DROP TABLE IF EXISTS `lojarelacionamento`;
CREATE TABLE `lojarelacionamento` (
  `idlojaOrigem` int(11) NOT NULL,
  `idLojaDestino` int(11) NOT NULL,
  `controlaEstoque` smallint(6) DEFAULT NULL,
  `atualizaProduto` smallint(6) DEFAULT NULL,
  `atualizaPrice` smallint(6) DEFAULT NULL,
  `unificaEstoque` smallint(6) DEFAULT NULL,
  `flagRelacionamento` smallint(6) DEFAULT '0',
  `dataInsert` datetime NOT NULL,
  `dataAlt` datetime DEFAULT NULL,
  PRIMARY KEY (`idlojaOrigem`,`idLojaDestino`),
  KEY `fk_lojaRelacionamento_loja1` (`idlojaOrigem`),
  KEY `fk_lojaRelacionamento_loja2` (`idLojaDestino`),
  CONSTRAINT `fk_lojaRelacionamento_loja1` FOREIGN KEY (`idlojaOrigem`) REFERENCES `loja` (`idloja`) ON DELETE NO ACTION ON UPDATE NO ACTION,
  CONSTRAINT `fk_lojaRelacionamento_loja2` FOREIGN KEY (`idLojaDestino`) REFERENCES `loja` (`idloja`) ON DELETE NO ACTION ON UPDATE NO ACTION
) ENGINE=InnoDB DEFAULT CHARSET=latin1;

--
-- Dumping data for table `lojarelacionamento`
--

/*!40000 ALTER TABLE `lojarelacionamento` DISABLE KEYS */;
/*!40000 ALTER TABLE `lojarelacionamento` ENABLE KEYS */;


--
-- Definition of table `metavenda`
--

DROP TABLE IF EXISTS `metavenda`;
CREATE TABLE `metavenda` (
  `idmetaVenda` int(11) NOT NULL AUTO_INCREMENT,
  `idsetor` int(11) NOT NULL,
  `descricao` varchar(30) NOT NULL,
  `valor` decimal(15,3) NOT NULL DEFAULT '0.000',
  `comissao` decimal(5,2) NOT NULL DEFAULT '0.00',
  `mesAno` varchar(6) NOT NULL,
  `geral` smallint(6) NOT NULL DEFAULT '0',
  `cota` decimal(15,3) NOT NULL DEFAULT '0.000',
  `margem` decimal(5,3) NOT NULL DEFAULT '0.000',
  PRIMARY KEY (`idmetaVenda`),
  KEY `fk_metaVenda_setor1` (`idsetor`),
  CONSTRAINT `fk_metaVenda_setor1` FOREIGN KEY (`idsetor`) REFERENCES `setor` (`idsetor`) ON DELETE NO ACTION ON UPDATE NO ACTION
) ENGINE=InnoDB DEFAULT CHARSET=latin1;

--
-- Dumping data for table `metavenda`
--

/*!40000 ALTER TABLE `metavenda` DISABLE KEYS */;
/*!40000 ALTER TABLE `metavenda` ENABLE KEYS */;


--
-- Definition of table `metodo`
--

DROP TABLE IF EXISTS `metodo`;
CREATE TABLE `metodo` (
  `idmetodo` int(11) NOT NULL AUTO_INCREMENT,
  `idfinalizadora` int(11) NOT NULL,
  `descricao` varchar(45) NOT NULL,
  `abreviatura` varchar(12) DEFAULT NULL,
  `mult` decimal(15,3) NOT NULL DEFAULT '1.000',
  `nroparcelas` int(11) NOT NULL DEFAULT '0',
  `itaxa` decimal(15,3) NOT NULL DEFAULT '0.000',
  `forcePasswd` smallint(6) NOT NULL DEFAULT '0',
  `valueMin` smallint(6) NOT NULL DEFAULT '0',
  `forceMinimoVenda` smallint(6) NOT NULL DEFAULT '0',
  `minimoVenda` decimal(15,3) NOT NULL DEFAULT '0.000',
  `forceEntrada` smallint(6) NOT NULL DEFAULT '0',
  `carencia` int(11) NOT NULL DEFAULT '0',
  `valueMinEntrada` decimal(15,3) NOT NULL DEFAULT '0.000',
  `tac` decimal(15,3) NOT NULL DEFAULT '0.000',
  `seguro` decimal(15,3) NOT NULL DEFAULT '0.000',
  `financeiro` decimal(15,3) NOT NULL DEFAULT '0.000',
  `itaxaEspecial` decimal(15,3) NOT NULL DEFAULT '0.000',
  `inibeDiscount` smallint(6) NOT NULL DEFAULT '0',
  `dayPgto` smallint(6) NOT NULL DEFAULT '30',
  `status` smallint(6) NOT NULL DEFAULT '0',
  `typeMetodo` smallint(6) NOT NULL DEFAULT '1',
  PRIMARY KEY (`idmetodo`)
) ENGINE=InnoDB DEFAULT CHARSET=latin1;

--
-- Dumping data for table `metodo`
--

/*!40000 ALTER TABLE `metodo` DISABLE KEYS */;
/*!40000 ALTER TABLE `metodo` ENABLE KEYS */;


--
-- Definition of trigger `metodo_last_insert`
--

DROP TRIGGER /*!50030 IF EXISTS */ `metodo_last_insert`;

DELIMITER $$

CREATE DEFINER = `master`@`localhost` TRIGGER `metodo_last_insert` AFTER INSERT ON `metodo` FOR EACH ROW begin
declare v0 int;
declare v1,a1 int;
declare v2 numeric(15,5);
    if (new.forceEntrada = 1) then
    set v1 = 0;
else
    set v1 = 1;
end if;
if (new.carencia > 0) then
    set v0 = new.carencia;
else
    set v0 = new.dayPgto; 
    
end if;
      WHILE v1 <= new.nroparcelas DO
    
        
        
        set v2 = (select ((itaxa/100)/(mult-(mult/(pow((mult+(itaxa/100)),new.nroparcelas))))) as total from metodo where idmetodo=new.idmetodo);
        
        insert into metodoParcelas values(new.idmetodo,v1,if((v1 = 0)&&(new.carencia = 0),"Entrada",concat(if(v1=0,"Entrada com",v1),", Pagamento em:")),v0,if(v1=0,0,v2));        
        if((v1 = 0)&&(new.carencia < 30)) then
            SET v0 = new.dayPgto;
        else
            SET v0 = v0 + 30;
        end if;
        SET v1 = v1 + 1;
        
  END WHILE;
  
  
  set a1 = 1;
      WHILE a1 <= new.nroparcelas DO
    
        set v2 = (
        
        select 
        round(
                new.mult*(((
                        pow((new.mult + (new.itaxa/100)),a1)*(new.itaxa/100)))
        /
                      ((pow((new.mult + (new.itaxa/100)),a1)-new.mult))),6)
                from 
                    metodo 
                where idMetodo=new.idMetodo
        );
        
        insert into tablePrice values(new.idmetodo,a1,ifnull(v2,0));        
        
        SET a1 = a1 + 1;
        
  END WHILE;
end $$

DELIMITER ;

--
-- Definition of trigger `metodo_last_update`
--

DROP TRIGGER /*!50030 IF EXISTS */ `metodo_last_update`;

DELIMITER $$

CREATE DEFINER = `master`@`localhost` TRIGGER `metodo_last_update` BEFORE UPDATE ON `metodo` FOR EACH ROW begin
declare v0 int;
declare v1,a1 int;
declare v2 numeric(15,5);
if ((new.nroparcelas <> old.nroparcelas)||(new.carencia <> old.carencia) || (new.forceEntrada <> old.forceEntrada) || (new.itaxa <> old.itaxa)) then
    delete from metodoParcelas where idMetodo=old.idMetodo;
    delete from tableprice where idMetodo=old.idMetodo;
    
        if (new.forceEntrada = 1) then
    set v1 = 0;
else
    set v1 = 1;
end if;
if (new.carencia > 0) then
    set v0 = new.carencia;
else
    set v0 = new.dayPgto; 
    
end if;
      WHILE v1 <= new.nroparcelas DO
    
        
        set v2 = (select ((itaxa/100)/(mult-(mult/(pow((mult+(itaxa/100)),new.nroparcelas))))) as total from metodo where idmetodo=new.idmetodo);
        
        insert into metodoParcelas values(old.idmetodo,v1,if((v1 = 0)&&(new.carencia = 0),"Entrada",concat(if(v1=0,"Entrada com",v1),", Pagamento em:")),v0,if(v1=0,0,v2));        
        if((v1 = 0)&&(new.carencia < 30)) then
            SET v0 = new.dayPgto;
        else
            SET v0 = v0 + 30;
        end if;
        SET v1 = v1 + 1;
        
  END WHILE;
  
  
  set a1 = 1;
      WHILE a1 <= new.nroparcelas DO
    
        set v2 = (
        
        select 
        round(
                new.mult*(((
                        pow((new.mult + (new.itaxa/100)),a1)*(new.itaxa/100)))
        /
                      ((pow((new.mult + (new.itaxa/100)),a1)-new.mult))),6)
                from 
                    metodo 
                where idMetodo=old.idMetodo
        );
        
        insert into tablePrice values(old.idmetodo,a1,ifnull(v2,0));        
        
        SET a1 = a1 + 1;
        
  END WHILE;
    
end if;
end $$

DELIMITER ;

--
-- Definition of table `metodoparcelas`
--

DROP TABLE IF EXISTS `metodoparcelas`;
CREATE TABLE `metodoparcelas` (
  `idmetodo` int(11) NOT NULL,
  `idmetodoParcelas` int(11) NOT NULL,
  `descricao` varchar(30) NOT NULL,
  `dias` int(11) NOT NULL DEFAULT '0',
  `fator` decimal(15,5) DEFAULT '0.00000',
  PRIMARY KEY (`idmetodo`,`idmetodoParcelas`),
  KEY `fk_metodoParcelas_metodo1` (`idmetodo`),
  CONSTRAINT `fk_metodoParcelas_metodo1` FOREIGN KEY (`idmetodo`) REFERENCES `metodo` (`idmetodo`) ON DELETE CASCADE ON UPDATE CASCADE
) ENGINE=InnoDB DEFAULT CHARSET=latin1;

--
-- Dumping data for table `metodoparcelas`
--

/*!40000 ALTER TABLE `metodoparcelas` DISABLE KEYS */;
/*!40000 ALTER TABLE `metodoparcelas` ENABLE KEYS */;


--
-- Definition of table `metodostore`
--

DROP TABLE IF EXISTS `metodostore`;
CREATE TABLE `metodostore` (
  `idmetodo` int(11) NOT NULL,
  `idloja` int(11) NOT NULL,
  PRIMARY KEY (`idmetodo`,`idloja`),
  KEY `fk_metodoStore_loja1` (`idloja`),
  CONSTRAINT `fk_metodo1` FOREIGN KEY (`idmetodo`) REFERENCES `metodo` (`idmetodo`) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT `fk_metodoStore_loja1` FOREIGN KEY (`idloja`) REFERENCES `loja` (`idloja`) ON DELETE NO ACTION ON UPDATE NO ACTION
) ENGINE=InnoDB DEFAULT CHARSET=latin1;

--
-- Dumping data for table `metodostore`
--

/*!40000 ALTER TABLE `metodostore` DISABLE KEYS */;
/*!40000 ALTER TABLE `metodostore` ENABLE KEYS */;


--
-- Definition of table `modelo_ecf`
--

DROP TABLE IF EXISTS `modelo_ecf`;
CREATE TABLE `modelo_ecf` (
  `idMarca` int(11) NOT NULL,
  `Modelo` varchar(45) NOT NULL,
  `marca` varchar(45) NOT NULL,
  `tipo` varchar(45) DEFAULT NULL,
  PRIMARY KEY (`idMarca`)
) ENGINE=InnoDB DEFAULT CHARSET=latin1;

--
-- Dumping data for table `modelo_ecf`
--

/*!40000 ALTER TABLE `modelo_ecf` DISABLE KEYS */;
/*!40000 ALTER TABLE `modelo_ecf` ENABLE KEYS */;


--
-- Definition of table `modelofiscal`
--

DROP TABLE IF EXISTS `modelofiscal`;
CREATE TABLE `modelofiscal` (
  `codigo` varchar(3) NOT NULL,
  `modelo` varchar(60) DEFAULT NULL,
  PRIMARY KEY (`codigo`)
) ENGINE=InnoDB DEFAULT CHARSET=latin1;

--
-- Dumping data for table `modelofiscal`
--

/*!40000 ALTER TABLE `modelofiscal` DISABLE KEYS */;
/*!40000 ALTER TABLE `modelofiscal` ENABLE KEYS */;


--
-- Definition of table `money`
--

DROP TABLE IF EXISTS `money`;
CREATE TABLE `money` (
  `idpedido` double NOT NULL,
  `idloja` int(11) NOT NULL,
  `idfinalizadora` int(11) NOT NULL DEFAULT '1',
  `idcliente` int(11) NOT NULL,
  `idmetodo` int(11) NOT NULL,
  `idfuncionario` int(11) NOT NULL,
  `emissao` date NOT NULL,
  `valorTotal` decimal(15,3) NOT NULL,
  `terminal` int(11) NOT NULL,
  `observacao` varchar(100) DEFAULT NULL,
  `faturado` smallint(6) NOT NULL DEFAULT '0',
  `transacao` double NOT NULL AUTO_INCREMENT,
  `cupom` varchar(45) DEFAULT NULL,
  `numeroNota` varchar(45) DEFAULT NULL,
  `serie` varchar(6) DEFAULT NULL,
  PRIMARY KEY (`transacao`,`idfinalizadora`,`idfuncionario`,`idloja`,`emissao`),
  KEY `fk_money_cliente1` (`idcliente`),
  KEY `fk_money_metodo1` (`idmetodo`),
  KEY `fk_money_funcionario1` (`idfuncionario`),
  KEY `fk_faturamento_money` (`idpedido`,`idloja`,`idfinalizadora`)
) ENGINE=InnoDB DEFAULT CHARSET=latin1;

--
-- Dumping data for table `money`
--

/*!40000 ALTER TABLE `money` DISABLE KEYS */;
/*!40000 ALTER TABLE `money` ENABLE KEYS */;


--
-- Definition of table `motivo`
--

DROP TABLE IF EXISTS `motivo`;
CREATE TABLE `motivo` (
  `idmotivo` varchar(4) NOT NULL,
  `descricao` varchar(300) NOT NULL,
  `classe` varchar(4) NOT NULL,
  PRIMARY KEY (`idmotivo`),
  KEY `fk_motivo_classMotivo1` (`classe`),
  CONSTRAINT `fk_motivo_classMotivo1` FOREIGN KEY (`classe`) REFERENCES `classmotivo` (`idClassMotivo`) ON DELETE NO ACTION ON UPDATE NO ACTION
) ENGINE=InnoDB DEFAULT CHARSET=latin1;

--
-- Dumping data for table `motivo`
--

/*!40000 ALTER TABLE `motivo` DISABLE KEYS */;
/*!40000 ALTER TABLE `motivo` ENABLE KEYS */;


--
-- Definition of table `movimentocaixa`
--

DROP TABLE IF EXISTS `movimentocaixa`;
CREATE TABLE `movimentocaixa` (
  `dataMovimento` date NOT NULL,
  `loja` int(11) NOT NULL,
  `terminal` int(11) NOT NULL,
  `finalizadora` int(11) NOT NULL,
  `funcionario` int(11) NOT NULL,
  `tipoCall` smallint(6) NOT NULL,
  `sequencia` int(11) NOT NULL,
  `hora` time DEFAULT NULL,
  `valor` decimal(15,2) DEFAULT NULL,
  `sangria` decimal(15,2) DEFAULT NULL,
  `abertura` decimal(15,2) DEFAULT NULL,
  `vale` decimal(15,2) DEFAULT NULL,
  `fundo_caixa` decimal(15,2) DEFAULT NULL,
  `juros` decimal(15,2) DEFAULT NULL,
  `situacao` int(11) DEFAULT NULL COMMENT '0 - fechado\n1 - aberto',
  `quantidade` decimal(15,3) DEFAULT NULL,
  `doacao` decimal(15,2) DEFAULT NULL,
  `devolucao` varchar(45) DEFAULT NULL,
  `troco` decimal(15,3) DEFAULT '0.000',
  `cancelamento` decimal(15,3) DEFAULT '0.000',
  `nr_quantidade` int(11) DEFAULT '0',
  PRIMARY KEY (`dataMovimento`,`loja`,`terminal`,`finalizadora`,`funcionario`,`tipoCall`,`sequencia`),
  KEY `fk_movimentoCaixa_loja1` (`loja`),
  KEY `fk_movimentoCaixa_terminal1` (`terminal`),
  KEY `fk_movimentoCaixa_finalizadora1` (`finalizadora`),
  KEY `fk_movimentoCaixa_funcionario1` (`funcionario`),
  CONSTRAINT `fk_movimentoCaixa_finalizadora1` FOREIGN KEY (`finalizadora`) REFERENCES `finalizadora` (`idfinalizadora`) ON DELETE NO ACTION ON UPDATE NO ACTION,
  CONSTRAINT `fk_movimentoCaixa_funcionario1` FOREIGN KEY (`funcionario`) REFERENCES `funcionario` (`idfuncionario`) ON DELETE NO ACTION ON UPDATE NO ACTION,
  CONSTRAINT `fk_movimentoCaixa_loja1` FOREIGN KEY (`loja`) REFERENCES `loja` (`idloja`) ON DELETE NO ACTION ON UPDATE NO ACTION,
  CONSTRAINT `fk_movimentoCaixa_terminal1` FOREIGN KEY (`terminal`) REFERENCES `terminal` (`idterminal`) ON DELETE NO ACTION ON UPDATE NO ACTION
) ENGINE=InnoDB DEFAULT CHARSET=latin1;

--
-- Dumping data for table `movimentocaixa`
--

/*!40000 ALTER TABLE `movimentocaixa` DISABLE KEYS */;
/*!40000 ALTER TABLE `movimentocaixa` ENABLE KEYS */;


--
-- Definition of table `movimentodia`
--

DROP TABLE IF EXISTS `movimentodia`;
CREATE TABLE `movimentodia` (
  `idloja` int(11) NOT NULL,
  `numeroCaixa` int(11) NOT NULL,
  `movimento` date NOT NULL,
  `operador` double NOT NULL,
  `numero_serie` varchar(20) NOT NULL,
  `mf_adicional` varchar(1) DEFAULT NULL,
  `modelo_ecf` varchar(20) NOT NULL,
  `crz` varchar(6) NOT NULL,
  `coo` varchar(6) NOT NULL,
  `cro` varchar(6) NOT NULL,
  `dataEmissao` date NOT NULL,
  `horaEmissao` time NOT NULL,
  `venda_bruta` decimal(15,2) NOT NULL,
  `par_desconto` varchar(1) DEFAULT NULL,
  `cripto` varchar(600) DEFAULT NULL,
  `cancelamento` varchar(45) DEFAULT NULL,
  PRIMARY KEY (`idloja`,`numeroCaixa`,`movimento`),
  KEY `fk_movimentoDia_loja1` (`idloja`),
  CONSTRAINT `fk_movimentoDia_loja1` FOREIGN KEY (`idloja`) REFERENCES `loja` (`idloja`) ON DELETE NO ACTION ON UPDATE NO ACTION
) ENGINE=InnoDB DEFAULT CHARSET=latin1;

--
-- Dumping data for table `movimentodia`
--

/*!40000 ALTER TABLE `movimentodia` DISABLE KEYS */;
/*!40000 ALTER TABLE `movimentodia` ENABLE KEYS */;


--
-- Definition of table `networkcard`
--

DROP TABLE IF EXISTS `networkcard`;
CREATE TABLE `networkcard` (
  `idnetworkCard` int(11) NOT NULL,
  `descricao` varchar(45) NOT NULL,
  `inativa` smallint(6) NOT NULL,
  PRIMARY KEY (`idnetworkCard`)
) ENGINE=InnoDB DEFAULT CHARSET=latin1;

--
-- Dumping data for table `networkcard`
--

/*!40000 ALTER TABLE `networkcard` DISABLE KEYS */;
/*!40000 ALTER TABLE `networkcard` ENABLE KEYS */;


--
-- Definition of table `nf`
--

DROP TABLE IF EXISTS `nf`;
CREATE TABLE `nf` (
  `nf` double NOT NULL AUTO_INCREMENT,
  `loja` int(11) NOT NULL,
  `idcliente` int(11) NOT NULL,
  `idparamentro` int(11) NOT NULL,
  `idtransportadora` int(11) NOT NULL DEFAULT '0',
  `cfop` varchar(6) NOT NULL,
  `idFuncionario` int(11) NOT NULL DEFAULT '0',
  `idusuario` int(11) NOT NULL,
  `idpedido` double DEFAULT NULL,
  `nr_nota` bigint(20) DEFAULT NULL,
  `serie` varchar(3) DEFAULT NULL,
  `acrescimo` decimal(15,3) NOT NULL DEFAULT '0.000',
  `baseIcms` decimal(15,3) NOT NULL DEFAULT '0.000',
  `baseIcmsIsento` decimal(15,3) NOT NULL DEFAULT '0.000',
  `valorIcmsSubstituicao` decimal(15,3) NOT NULL DEFAULT '0.000',
  `baseCalculoIcmsSubstituicao` decimal(15,3) NOT NULL DEFAULT '0.000',
  `baseIPI` decimal(15,3) NOT NULL DEFAULT '0.000',
  `baseCofins` decimal(15,3) NOT NULL DEFAULT '0.000',
  `basePis` decimal(15,3) NOT NULL DEFAULT '0.000',
  `emissao` date NOT NULL,
  `saida` date NOT NULL,
  `alteracao` date NOT NULL,
  `hora` time NOT NULL,
  `desconto` decimal(15,3) NOT NULL DEFAULT '0.000',
  `uf` char(2) NOT NULL,
  `itens` decimal(15,3) NOT NULL DEFAULT '0.000',
  `seguro` decimal(15,3) NOT NULL DEFAULT '0.000',
  `frete` decimal(15,3) NOT NULL DEFAULT '0.000',
  `typeFrete` smallint(6) NOT NULL DEFAULT '9',
  `valorIcms` decimal(15,3) NOT NULL DEFAULT '0.000',
  `valorIpi` decimal(15,3) NOT NULL DEFAULT '0.000',
  `valorPis` decimal(15,3) NOT NULL DEFAULT '0.000',
  `valorCofins` decimal(15,3) NOT NULL DEFAULT '0.000',
  `acrecismoValor` decimal(15,3) NOT NULL DEFAULT '0.000',
  `descontoValor` decimal(15,3) NOT NULL DEFAULT '0.000',
  `valorTotalLiquido` decimal(15,3) NOT NULL DEFAULT '0.000',
  `valorTotalNota` decimal(15,3) NOT NULL DEFAULT '0.000',
  `valorTotalProdutos` decimal(15,3) NOT NULL DEFAULT '0.000',
  `volumes` decimal(15,3) NOT NULL DEFAULT '0.000',
  `peso` decimal(15,3) NOT NULL DEFAULT '0.000',
  `contribuicaoSocial` decimal(15,3) NOT NULL DEFAULT '0.000',
  `quantidadePedido` decimal(15,3) NOT NULL DEFAULT '0.000',
  `quantidadeRecebida` decimal(15,3) NOT NULL DEFAULT '0.000',
  `impresso` smallint(6) NOT NULL DEFAULT '0',
  `nr_impressao` decimal(15,3) NOT NULL DEFAULT '0.000',
  `idTable_Codigo` int(11) NOT NULL,
  `modNotaFiscal` varchar(3) NOT NULL,
  `idSituacaoFiscal` char(2) NOT NULL,
  `emitiNfe` smallint(6) NOT NULL,
  `typenf` varchar(1) NOT NULL DEFAULT 's' COMMENT 's - saida\ne - entrada',
  `msg01` varchar(100) NOT NULL DEFAULT '',
  `msg02` varchar(100) NOT NULL DEFAULT '',
  `msg03` varchar(100) NOT NULL DEFAULT '',
  `valorTotaServico` decimal(15,3) NOT NULL DEFAULT '0.000',
  `nr_nota_entrada` double DEFAULT NULL,
  `serie_entrada` varchar(3) DEFAULT NULL,
  `statusNf` char(1) NOT NULL DEFAULT '0',
  `restituicao` char(1) DEFAULT 'n',
  `iss` decimal(15,3) NOT NULL DEFAULT '0.000',
  `impostoRenda` decimal(15,3) NOT NULL DEFAULT '0.000',
  `funrural` decimal(15,3) NOT NULL DEFAULT '0.000',
  `valorTotalFunrural` decimal(15,3) NOT NULL DEFAULT '0.000',
  `geraDanfe` char(1) NOT NULL DEFAULT 'n',
  `condPgto` int(11) DEFAULT NULL,
  `chave_nfe` varchar(44) DEFAULT NULL,
  `protocolo` varchar(45) DEFAULT NULL,
  `motivo` varchar(150) DEFAULT NULL,
  `versaoNfe` varchar(45) DEFAULT NULL,
  `dataHoraRecbNfe` datetime DEFAULT NULL,
  PRIMARY KEY (`nf`),
  KEY `fk_nfe_cliente1` (`idcliente`),
  KEY `fk_nfe_loja1` (`loja`),
  KEY `fk_nfe_paramentro_faturamento1` (`idparamentro`),
  KEY `fk_nfe_cfop1` (`cfop`),
  KEY `fk_nfe_usuario1` (`idusuario`),
  KEY `fk_nfe_situacaoFiscal1` (`idSituacaoFiscal`),
  KEY `fk_nf_table_codigo1` (`idTable_Codigo`,`modNotaFiscal`),
  CONSTRAINT `fk_nfe_cfop1` FOREIGN KEY (`cfop`) REFERENCES `cfop` (`cfop`) ON DELETE NO ACTION ON UPDATE NO ACTION,
  CONSTRAINT `fk_nfe_cliente1` FOREIGN KEY (`idcliente`) REFERENCES `cliente` (`idcliente`) ON DELETE NO ACTION ON UPDATE NO ACTION,
  CONSTRAINT `fk_nfe_loja1` FOREIGN KEY (`loja`) REFERENCES `loja` (`idloja`) ON DELETE NO ACTION ON UPDATE NO ACTION,
  CONSTRAINT `fk_nfe_paramentro_faturamento1` FOREIGN KEY (`idparamentro`) REFERENCES `paramentro_faturamento` (`idparamentro`) ON DELETE NO ACTION ON UPDATE NO ACTION,
  CONSTRAINT `fk_nfe_situacaoFiscal1` FOREIGN KEY (`idSituacaoFiscal`) REFERENCES `situacaofiscal` (`idSituacaoFiscal`) ON DELETE NO ACTION ON UPDATE NO ACTION,
  CONSTRAINT `fk_nfe_usuario1` FOREIGN KEY (`idusuario`) REFERENCES `usuario` (`idusuario`) ON DELETE NO ACTION ON UPDATE NO ACTION,
  CONSTRAINT `fk_nf_table_codigo1` FOREIGN KEY (`idTable_Codigo`, `modNotaFiscal`) REFERENCES `table_codigo` (`idTable_Codigo`, `codigo`) ON DELETE NO ACTION ON UPDATE NO ACTION
) ENGINE=InnoDB DEFAULT CHARSET=latin1;

--
-- Dumping data for table `nf`
--

/*!40000 ALTER TABLE `nf` DISABLE KEYS */;
/*!40000 ALTER TABLE `nf` ENABLE KEYS */;


--
-- Definition of trigger `danfe_nf_last_update`
--

DROP TRIGGER /*!50030 IF EXISTS */ `danfe_nf_last_update`;

DELIMITER $$

CREATE DEFINER = `master`@`localhost` TRIGGER `danfe_nf_last_update` BEFORE UPDATE ON `nf` FOR EACH ROW begin

  DECLARE done INT DEFAULT FALSE; 
  DECLARE done1 INT DEFAULT FALSE; 
  declare contador int default 0;
  declare VarTipoProduto int default 0;
  declare VarComplementar smallint(6) default 0;
  declare VarDesconto numeric(15,3) default 0;
  declare VarDesco numeric(15,3) default 0;
  declare VarAcrescimo numeric(15,3) default 0;
  declare VarDesc smallint(6) default 0;
  declare chaveIdPisCofinsAnexo int(11);
  declare VarISS numeric(15,3) default 0;
  declare VarPIS numeric(15,3) default 0;
  declare VarCofins numeric(15,3) default 0;
  declare VarInss numeric(15,3) default 0;
  declare VarIr numeric(15,3) default 0;
  declare VarIrMin numeric(15,3) default 0;
  declare VarCalcRetemPisCofins smallint default 0;
  declare VarValorTotal numeric(15,3) default 0;
  declare VarRetemPisCofins smallint default 0;
  declare VarValorRetencao numeric(15,3) default 0;
  declare VarContribuicao numeric(15,3) default 0;
  declare VarValorOne numeric(15,3) default 0;
  declare VarImpostoOne numeric(15,3) default 0;
  declare VarValueF numeric(15,3) default 0;
  declare VarValueI numeric(15,3) default 0;
  declare VarConta int default 0;
  declare VarMens varchar(100) default 0;
  declare VarMens1 varchar(100) default 0;
  declare VarMens2 varchar(100) default 0;
  declare VarTributacao char(2) default "";
  declare VarRatear smallint(6) default 0;
  declare VarImp numeric(15,3) default 0;
  declare VarAliquota numeric(15,3) default 0;
  declare VarReducao numeric(15,3) default 0;
  declare VarType char(1);
  declare VarTypeAliquota char(1);
  declare VarBase numeric(15,3) default 0;
  declare VarFull numeric(15,3) default 0;
  declare Varicms numeric(15,3) default 0;
  declare VarIcmsValor numeric(15,3) default 0;
  declare VarAcres numeric(15,3) default 0;
  declare VarCalculaIr numeric(15,3) default 0;
  declare VarCFOP varchar(6);
  declare VarCST varchar(3);
  declare VarIPIValor numeric(15,3) default 0;
  declare VarProduto int(11);
  declare VarServico char(1);
  declare VarCalcISS char(1);
  declare VarSumImpostos numeric(15,3) default 0;
  declare VarIcmsIncidiIPI numeric(15,3) default 0;
  declare VarBaseIsento numeric(15,3) default 0;
  declare VarValorBaseST numeric(15,3) default 0;
  declare VarValorST numeric(15,3) default 0;
  declare VarGradeCentral CHAR(1);
  declare VarPermiteAltST CHAR(1);
  declare VarNfRestituicao char(1);
  declare VarAbateFunrural TINYINT(1) default 0;
  declare VarNaoDestacaSt CHAR(1);
  declare VarOrigem char(2);
  declare VarDestino char(2);
  declare VarCalculaPisCofins char(1);
  declare VarAliquotaFrete Numeric(15,3) default 0;
  declare VarUFFrete char(2);
  declare VarCFOPFrete char(6);
  declare VarTransportadora int(11);
  declare VarSped smallint default 0;
  declare VarSeqNota varchar(9);
  declare VarSeqSerie varchar(3);
  declare VarLojaNf double;
  declare auxNota varchar(1) default 'S';
  declare i int default 0;

select tab1.flagNota,nr_nota
        from nf tab
            inner join paramentro_faturamento tab1 on(tab.idParamentro = tab1.idParamentro)
            where tab.nf=new.nf into auxNota,@nr;
            if(auxNota is null)then set auxNota='S'; end if;
 if(auxNota = "S")then
 
 if(new.geraDanfe = "s" && new.emitiNfe = 1 && @nr = "0")then
 insert into bof(texto)values(concat(new.nf,"-",@nr));
    if(new.nr_nota = "000000000" or new.nr_nota is null or  @nr = "0")then 
    
    if(new.modNotaFiscal = "55")then
    
  select lojaNf 
            from loja
                    where idLoja=new.Loja
                                     into VarLojaNf;
                                     if(VarLojaNf is null)then set VarLojaNf=new.Loja; end if;
 select serieNota, numeroNota  
                            from loja
                                     where idLoja=VarLojaNf
                                                  into
                                                        VarSeqSerie,
                                                        VarSeqNota;
                                                        if(VarSeqNota is null)then set VarSeqNota=0; end if;
    set new.nr_nota = (ifnull(VarSeqNota,0)+1);
    set new.serie = VarSeqSerie;
    if(new.nr_nota != "" && VarSeqNota > 0)then set new.statusNf = "1"; end if;
    
    update loja
                set
                    serieNota=new.serie,
                    numeroNota=new.nr_nota
                                    where
                                        idloja=VarLojaNf;
    else

 select lojaNf 
            from loja
                    where idLoja=new.Loja
                                     into VarLojaNf;
                                     if(VarLojaNf is null)then set VarLojaNf=new.Loja; end if;
 select serieNfce, numeroNotaConsumidor  
                            from loja
                                     where idLoja=VarLojaNf
                                                  into
                                                        VarSeqSerie,
                                                        VarSeqNota;
                                                        if(VarSeqNota is null)then set VarSeqNota=0; end if;
    set new.nr_nota = (ifnull(VarSeqNota,0)+1);
    set new.serie = VarSeqSerie;
    if(new.nr_nota != "" && VarSeqNota > 0)then set new.statusNf = "1"; end if;
    
    update loja
                set
                    serieNfce=new.serie,
                    numeroNotaConsumidor=new.nr_nota
                                    where
                                        idloja=VarLojaNf;

    end if;

    IF(new.idPedido is not null)THEN
        select count(*), ifnull(idFinalizadora,"0") from pedidoFinanceiro where idPedido=new.idPedido into @x, @y;
                case @y
                    when 3 then
                        update crediario set chave_nota=new.nr_nota where pedido=new.idPedido;
                    when 2 then
                        update cheque set chave_nota=new.nr_nota where reserva=new.idPedido;
                    when 4 then 
                        update convenioMovimento set chave_nota=new.nr_nota where pedido=new.idPedido;
                    when 5 then
                        update cartao set chave_nota=new.nr_nota where pedido=new.idPedido;
                    when 6 then
                        update cartao set chave_nota=new.nr_nota where pedido=new.idPedido;
                    when 11 then
                        update cartao set chave_nota=new.nr_nota where pedido=new.idPedido;
                    when 5 then
                        update boleto set chave_nota=new.nr_nota where reserva=new.idPedido;
                        else set @=0;
                end case;
        END IF;
   end if;
  end if;
  else
    if(new.nr_nota = "000000000" or new.nr_nota is null)then 
    
    
  select lojaNf 
            from loja
                    where idLoja=new.Loja
                                     into VarLojaNf;
                                     if(VarLojaNf is null)then set VarLojaNf=new.Loja; end if;
 select subSerie, numeroNotaSerie
                            from loja
                                     where idLoja=VarLojaNf
                                                  into
                                                        VarSeqSerie,
                                                        VarSeqNota;
                                                        if(VarSeqNota is null)then set VarSeqNota=""; end if;
    set new.nr_nota = (ifnull(VarSeqNota,0)+1);
    set new.serie = VarSeqSerie;
    if(new.nr_nota != "" && VarSeqNota > 0)then set new.statusNf = "1"; end if;

    update loja
                set
                    subSerie=new.serie,
                    numeroNotaSerie=new.nr_nota
                                    where
                                        idloja=VarLojaNf;
    IF(new.idPedido is not null)THEN
        select count(*), ifnull(idFinalizadora,"0") from pedidoFinanceiro where idPedido=new.idPedido into @x, @y;
                case @y
                    when 3 then
                        update crediario set chave_nota=new.nr_nota where pedido=new.idPedido;
                    when 2 then
                        update cheque set chave_nota=new.nr_nota where reserva=new.idPedido;
                    when 4 then 
                        update convenioMovimento set chave_nota=new.nr_nota where pedido=new.idPedido;
                    when 5 then
                        update cartao set chave_nota=new.nr_nota where pedido=new.idPedido;
                    when 6 then
                        update cartao set chave_nota=new.nr_nota where pedido=new.idPedido;
                    when 11 then
                        update cartao set chave_nota=new.nr_nota where pedido=new.idPedido;
                    when 5 then
                        update boleto set chave_nota=new.nr_nota where reserva=new.idPedido;
                        else set @a=new.nr_nota;
                end case;
        END IF;
   end if;
   end if;

select
    flagCalculaIcms,flagParamentro,flagNFRestituicao,
    flagCalculaPisCofins,flagCalculaBaseSt, flagRatearDesconto,
    flagCalculoServicoProduto, flagCalculaIr, flagRetemPisCofins, flagNFRestituicao,
    flagAbateFunrural
                                  from paramentro_faturamento
                                                      where idparamentro = new.idParamentro
                                                           into VarImp, VarType,
                                                                VarNfRestituicao, VarCalculaPisCofins,
                                                                VarNaoDestacaSt, VarRatear,
                                                                VarCalcISS, VarCalculaIr, VarRetemPisCofins, VarComplementar, VarAbateFunrural; 
                                                                if(VarAbateFunrural is null)then set VarAbateFunrural=0; end if;
                                                                if(VarRetemPisCofins is null)then set VarRetemPisCofins=0; end if;
                                                                if(VarImp is null)then set VarImp=0; end if;
                                                                if(VarType is null)then set VarType=""; end if;
                                                                if(VarNfRestituicao is null)then set VarNfRestituicao=0; end if;
                                                                if(VarCalculaPisCofins is null)then set VarCalculaPisCofins=0; end if;
                                                                if(VarNaoDestacaSt is null)then set VarNaoDestacaSt=0; end if;
                                                                if(VarRatear is null)then set VarRatear=0; end if;
                                                                if(VarCalcISS is null)then set VarCalcISS=0; end if;
                                                                if(VarCalculaIr is null)then set VarCalculaIr=0; end if; 

  if((new.statusNf <> "") or (new.statusNf is null) or (new.statusNf <> 's') and (VarNfRestituicao = 1))then 
        select gradeFiscal
                      from system
                             into VarGradeCentral;
        if(VarGradeCentral is null)then set VarGradeCentral='n'; end if;
  end if;

    select uf from cliente
                    where idCliente=new.loja
                                            into VarOrigem;
                                            if(VarOrigem is null)then set VarOrigem=''; end if;
    select uf from cliente
                    where idCliente=new.idCliente
                                            into VarDestino;
                                            if(VarDestino is null)then set VarDestino=''; end if;
    set VarDesco = 0;
    set VarAcres = 0;
    set VarBaseIsento = 0;
    set VarDesc = VarRatear;

select aliquotaPis,
       aliquotaCofins,
       aliquotaInss,
       aliquotaIss,
       contribuicao,
       ir,
       irMinima,
       flagCalcAboutSTPisCofins,
       valorRetencaoPisCofins
         from
             loja
                 where idLoja= new.loja
                                   into
                                      VarPIS,
                                      VarCofins,
                                      VarInss,
                                      VarISS,
                                      VarContribuicao,
                                      VarIr,
                                      VarIrMin,
                                      VarCalcRetemPisCofins,
                                      VarValorRetencao;
                                      if(VarCalcRetemPisCofins is null)then set VarCalcRetemPisCofins=0; end if;
                                      if(VarValorRetencao is null)then set VarValorRetencao=0; end if;
                                      if(VarIrMin is null)then set VarIrMin = 0; end if;
                                      if(VarIr is null)then set VarIr = 0; end if;
                                      if(VarPIS is null )then set VarPIS = 0; end if;
                                      if(VarCofins is null )then set VarCofins = 0; end if;
                                      if(VarInss is null)then set VarInss = 0; end if;
                                      if(VarISS is null)then set VarISS = 0; end if;
                                      if(VarContribuicao is null)then set VarContribuicao = 0; end if;

    if(VarCalcISS = 0)then
      SET new.iss = new.valorTotaServico * (VarISS /100);
        else
        if(new.valorTotalProdutos is null)then
            SET new.iss = 0;
              else
                  SET new.iss = new.valorTotalProdutos * (VarISS/100);
        end if;
    end if;

    if(VarRatear = 0)then
      if(new.descontoValor <> 0)then
        set VarDesconto = new.descontoValor;
          else
            set VarDesconto = new.valorTotalProdutos*(new.desconto/100);
      end if;

      if(new.acrecismoValor <> 0)then
        set VarAcrescimo = new.acrecismoValor;
          else
            set VarAcrescimo = new.valorTotalProdutos*(new.acrescimo/100);
      end if;

            set new.acrecismoValor = VarAcrescimo;

            set new.descontoValor = VarDesconto;
    end if;

    if(VarRatear = 0)then
       set new.valorTotalLiquido = new.valorTotalProdutos +
                                                        case when (VarRatear = 1)Then  VarAcrescimo else 0 end +
                                                        case when (VarDesc = 1)Then  (VarDesconto * -1) else 0 end +
                                coalesce(new.frete,0)+coalesce(new.valorIcmsSubstituicao,0)+coalesce(new.valorIpi,0);
                                else
                                  if((new.Frete <> 0))then 
       set new.valorTotalLiquido = new.valorTotalProdutos +
                                                        case when (VarRatear = 1)Then  VarAcrescimo else 0 end +
                                                        case when (VarDesc = 1)Then  VarDesconto * -1 else 0 end +
                                coalesce(new.frete,0)+coalesce(new.valorIcmsSubstituicao,0)+coalesce(new.valorIpi,0);

                          end if;
    end if;

    

    IF(VarCalculaIr = 1)then
      set new.impostoRenda = new.valorTotalProdutos * (VarIr /100);
        if(new.impostoRenda <= VarIrMin)then
          set new.impostoRenda = 0;
        end if;
    else
          set new.impostoRenda = 0;
    end if;

    if(VarRetemPisCofins = 1)then
        
         IF(VarCalcRetemPisCofins = 1)THEN
            if(new.valorTotalProdutos > VarValorRetencao)then
                set new.valorPis = new.valorTotalProdutos *(VarPIS / 100);
                set new.valorCofins = new.valorTotalProdutos *(VarCofins / 100);
                set new.contribuicaoSocial = new.valorTotalProdutos *(VarContribuicao / 100);
                      else
                set new.valorPis = 0;
                set new.valorCofins = 0;
                set new.contribuicaoSocial = 0;
            end if;
                      else
                        if(new.valorTotaServico > VarValorRetencao)then
                            set new.valorPis = new.valorTotaServico *(VarPIS / 100);
                            set new.valorCofins = new.valorTotaServico *(VarCofins / 100);
                            set new.contribuicaoSocial = new.valorTotaServico *(VarContribuicao / 100);
                                  else
                            set new.valorPis = 0;
                            set new.valorCofins = 0;
                            set new.contribuicaoSocial = 0;
                        end if;

         END IF;
    else
         set new.valorPis = 0;
         set new.valorCofins = 0;
         set new.contribuicaoSocial = 0;
    end if;
           set new.valorTotalProdutos = new.valorTotalProdutos +
                                                        case when (VarRatear = 1)Then  VarAcrescimo else 0 end -
                                                        case when (VarDesc = 1)Then  VarDesconto else 0 end;
           set new.valorTotalFunrural =  new.valorTotalProdutos * (new.funrural/100);

            
            
            select if(ifnull(cstIcms,"000") = "060",0, coalesce(sum(valorIcmsSubstituicao),0)) as StIcms
                                                                           from
                                                                               nfItem
                                                                           where
                                                                               nfItem.idNf = new.nf
                                                                           into
                                                                               VarValorST;
                                                                               if(VarValorST is null)then set VarValorST = 0; end if;
            set new.valorIcmsSubstituicao = VarValorST;
            if(VarComplementar is null)then set VarComplementar = 0; end if;

            if(VarAbateFunrural =  0)then
               IF(VarNfRestituicao = 0)THEN
               
                   set new.valorTotalProdutos = new.valorTotalLiquido + new.valorTotaServico + new.seguro + new.acrecismoValor +
                                                new.impostoRenda + new.ValorPis + new.ValorCofins - new.contribuicaoSocial;
                                                else
                                                if(new.valorTotalLiquido = 0)then
                                                set new.valorTotalProdutos = new.valorTotalLiquido + new.valorTotaServico + new.seguro + new.acrecismoValor -
                                                                             new.impostoRenda - new.ValorPis - new.ValorCofins - new.contribuicaoSocial;
                                                else
                                                set new.valorTotalProdutos = 0;
                                                end if;
               END IF;
            else
                   set new.valorTotalProdutos = new.valorTotalLiquido + new.valorTotaServico + new.seguro + new.acrecismoValor -
                                                new.impostoRenda - new.ValorPis - new.ValorCofins - new.contribuicaoSocial -
                                                new.valorTotalFunrural;

            end if;
            
             if(new.geraDanfe != 's')then


                        set VarCFOP = "0";
                        set VarCFOP = new.CFOP;
                        
                        if(VarCFOP is null )then
                            set VarCFOP = "0";
                        end if;
                        
                        set VarMens1 = new.msg01;
                        set VarMens2 = new.msg02;

                            if(new.typeFrete = 2)then
                                select idnfinfortransporte,
                                       retencaoAliquotaFrete
                                                    from nfinfortransporte 
                                                                        where nf=new.nf
                                                                                    into 
                                                                                        VarTransportadora,
                                                                                        VarAliquotaFrete;
                            if(VarAliquotaFrete is null or VarAliquotaFrete = 0)then
                                select
                                        tab1.uf,
                                        tab1.icms
                                                from transportadora tab
                                                            inner join estado tab1 on(tab.uf = tab1.uf)
                                                                        where
                                                                                    idTransportadora=VarTransportadora
                                                                                    into 
                                                                                        VarUFFrete,
                                                                                        VarAliquotaFrete;
                                                                                        if(VarAliquotaFrete is null)then set VarAliquotaFrete = 12.000; end if;
                                                                                        if(VarUFFrete is null)then set VarUFFrete = 'SP'; end if;
                                            else
                                select
                                        tab1.uf
                                                from transportadora tab
                                                            inner join estado tab1 on(tab.uf = tab1.uf)
                                                                        where
                                                                                    idTransportadora=VarTransportadora
                                                                                    into
                                                                                        VarUFFrete;
                                                                                        if(VarUFFrete is null)then set VarUFFrete = 'SP'; end if;

                            end if;
                                IF(VarUFFrete = 'MG')THEN
                                    set VarCFOPFrete='5363';
                                        ELSE
                                            set VarCFOPFrete = '6353';
                                END IF;
                    end if; 
        
          if(VarImp = 1)then
                if(new.frete <> 0)then
                IF(VarUFFrete is null)THEN
                
                if(VarOrigem = 'MG')THEN
                                    set VarCFOPFrete='5353';
                                        ELSE
                                            set VarCFOPFrete = '6353';
                                            end if;
                                            ELSE
                                            IF(VarUFFrete = 'MG')THEN
                                                set VarCFOPFrete='5353';
                                                    ELSE
                                                        set VarCFOPFrete = '6353';
                                                            END IF;
                                            END IF;
                                           
                    INSERT INTO `conector`.`nfimposto`
                                        (`idnf`,
                                         `cfop`,
                                         `cstIcms`,
                                         `aliquota`,
                                         `imposto`,
                                         `baseIcmsIsentos`,
                                         `reducao`,
                                         `baseCalculo`,
                                         `icms`,
                                         `baseCalculoIcmsSt`,
                                         `icmsSt`,
                                         `valorIpi`,
                                         `typeAliquota`,
                                          Valor)
                                    VALUES(
                                         new.nf,
                                         VarCFOPFrete,
                                         '000',
                                         VarAliquotaFrete,
                                         new.Frete * (VarAliquotaFrete/100),
                                         0,
                                         0,
                                         new.Frete,
                                         new.Frete * (VarAliquotaFrete/100),
                                         0,
                                         0,
                                         0,
                                         't',
                                         VarValorTotal
                                         );
                end if;
            end if; 
select max(sequencia) from
                           nfItem
                                  where 
                                       idNf=new.nf into @equal;
begin 
  DECLARE vetor CURSOR FOR select aliquota,
                                  reducao,
                                  typeAliquota,
                                  if(ifnull(cstIcms,"000") = "060",0, round(sum(priceVenda*quantidade),2)), 
                                  if(ifnull(cstIcms,"000") = "060",0, sum(valorTotalProduto + coalesce(frete,0) + coalesce(acrescimoValor,0))),
                                  cfop,
                                  idProduto,
                                  sum(valorIpi),
                                  ifnull(cstIcms,"000"),
                                  if(ifnull(cstIcms,"000") = "060",0, coalesce(sum(baseCalculoIcmsSubstituicao),0)),
                                  if(ifnull(cstIcms,"000") = "060",0, coalesce(sum(valorIcmsSubstituicao),0)),
                                  valorTotalProduto
                                          from
                                              nfItem
                                                    where 
                                                          idNf=new.nf and sequencia=@equal
                                                                  group by 1,2,3,6,7,9;
                                                                       DECLARE CONTINUE HANDLER FOR NOT FOUND SET done = TRUE;
    
            open vetor;
            
            read_loop: LOOP

                 fetch vetor into VarAliquota, VarReducao, VarTypeAliquota, VarBase, VarFull, VarCFOP, VarProduto, VarIPIValor, VarCST, VarValorBaseST, VarValorST, VarValorTotal;
                 

            IF done THEN
                        LEAVE read_loop;
            END IF;
            
            
                
            
                    if(VarAliquota is null)then set VarAliquota = 0; end if;
                    if(VarReducao is null)then set VarReducao = 0; end if; 
                    if(VarTypeAliquota is null)then set VarTypeAliquota = "t"; end if;
                    if(VarBase is null)then set VarBase = 0; end if;
                    if(VarFull is null)then set VarFull = 0; end if;
                    if(VarCFOP is null OR VarCFOP = "0")then set VarCFOP = new.CFOP; end if; if(VarCFOP is null)then set VarCFOP = '0'; end if;
                    if(VarProduto is null)then set VarProduto = 0; end if; 
                    if(VarIPIValor is null)then set VarIPIValor = 0; end if; 
                    if(VarCST is null)then set VarCST = "000"; end if;
                    if(VarValorBaseST is null)then set VarValorBaseST = 0; end if;
                    if(VarValorST is null)then set VarValorST = 0; end if;

                            
                                                          

    select tab1.idPisCofins from produto tab 
                inner join produtoImpostos tab1 on(tab.idProduto = tab1.idProduto) 
                                where tab.IdProduto=VarProduto and tab1.idLoja=new.Loja
                                                                            into VarTipoProduto;

                            if(VarTipoProduto is null)then set VarTipoProduto = 0; end if;
                            
        
    SELECT count(tab2.idPisCofins)
                        FROM piscofins tab1
                        inner join piscofinsanexo tab2 on(tab1.idPisCofins = tab2.idPisCofins)
                                               where
                                                     tab2.vigencia <= now() and
                                                     tab2.idPisCofins = VarTipoProduto
                                                                                     into contador;
    if(contador is null)then set contador = 0; end if;
    


    if(contador = 0) then
    select tab1.idPisCofins from produto tab 
                inner join produtoImpostos tab1 on(tab.idProduto = tab1.idProduto) 
                                where tab.IdProduto=VarProduto and tab1.idLoja=new.Loja
                                                                            into VarTipoProduto;
                                            if(VarTipoProduto is null)then set VarTipoProduto = 0; end if;
    end if;


    if(contador > 0) then
    select tab1.idPisCofins from produto tab 
                inner join produtoImpostos tab1 on(tab.idProduto = tab1.idProduto) 
                                where tab.IdProduto=VarProduto and tab1.idLoja=new.Loja
                                                                            into VarTipoProduto;
                                            if(VarTipoProduto is null)then set VarTipoProduto = 0; end if;
    end if;


SELECT tab2.idPisCofinsAnexo
              FROM piscofins tab1
                     inner join piscofinsanexo tab2 on(tab1.idPisCofins = tab2.idPisCofins)
                                               where
                                                     tab2.vigencia <= now() and
                                                     tab2.idPisCofins = VarTipoProduto and
                                                     (tab2.vigencia = (select max(vigencia)
                                                                                        FROM piscofins tab1
                                                                                                    inner join piscofinsanexo tab2 on(tab1.idPisCofins = tab2.idPisCofins)
                                                                                                                            where
                                                                                                                                        tab2.vigencia <= now() and
                                                                                                                                        tab2.idPisCofins = VarTipoProduto))
                                                                                                                                                                into chaveIdPisCofinsAnexo; 
                                                                                                                                                            if(chaveIdPisCofinsAnexo is null)then set chaveIdPisCofinsAnexo = 0; end if;

                                                

    
        select tab3.incideIpi 
            from produto tab 
                inner join produtoImpostos tab1 on(tab.idProduto = tab1.idProduto)
                inner join pisCofins tab2 on(tab1.idPisCofins = tab2.idPisCofins)
                inner join pisCofinsAnexo tab3 on(tab1.idPisCofins = tab3.idPisCofins)
                                where tab.IdProduto=VarProduto and 
                                      tab1.idLoja=new.loja and 
                                      tab3.idPisCofinsAnexo=chaveIdPisCofinsAnexo 
                                                                into VarIcmsIncidiIPI;
                                                
            
    select tab2.servico 
            from produto tab 
                inner join produtoImpostos tab1 on(tab.idProduto = tab1.idProduto)
                inner join pisCofins tab2 on(tab1.idPisCofins = tab2.idPisCofins)
                                                where tab.IdProduto=VarProduto and tab1.idLoja=new.loja
                                                                                        into VarServico;

                                                        
            if(VarIcmsIncidiIPI is null)then
                set VarIcmsIncidiIPI = 0;
            end if;
            if(VarServico is null)then
                set VarServico='n';
            end if;
                IF(VarServico = 'n')THEN
                select 
                        count(idNf)
                            from 
                                nfImposto
                            where
                                        idNf= new.nf and
                                        aliquota=VarAliquota and
                                       reducao=VarReducao and
                                        typeAliquota=VarTypeAliquota and
                                        cfop=VarCFOP  and
                                        cstIcms=VarCST
                                                into
                                                    VarConta;
                                                    
                                                    if(VarConta is null)then set VarConta=0; end if;

                    if(VarRatear =  1)then
                                         
                                         if(VarNfRestituicao = 1)then
                                         set VarBase = VarFull * ( 1- (VarReducao/100));
                                            else
                                                set VarBase = VarBase * ( 1- (VarReducao/100));
                                         end if;
                                            
                                            else
                                               set VarDesconto = 0;
                                               set VarAcrescimo = 0;
                                                    if(new.valorTotalProdutos <> 0)then
                                                        if(new.DescontoValor <> 0)then
                                                        set Vardesco = new.DescontoValor / new.desconto;    
                                                            else
                                                                set Vardesco = new.desconto / 100;    
                                                        end if;
                                                        
                                                        if(new.AcrecismoValor <> 0)then
                                                        set VarAcres = new.AcrecismoValor / new.acrescimo;    
                                                            else
                                                                set VarAcres = new.acrescimo / 100;
                                                        end if;
                                                    end if;
                                                    
                                               set VarDesconto = VarFull * Vardesco;
                                               set VarAcrescimo = VarFull * VarAcres;
                                               set VarBase = VarFull * (1 - (VarReducao/100)) + VarAcrescimo - VarDesconto ;
                                               
                                         
                                         if(VarNfRestituicao = 1)then
                                         set VarBase =  (1 - (VarReducao/100)) * (VarFull   +
                                                        case when (VarRatear = 1)Then  VarAcrescimo else 0 end +
                                                        case when (VarDesc = 1)Then  (VarDesconto * -1) else 0 end);
                                                                else
                                                                     set VarBase =  (1 - (VarReducao/100)) * (VarBase   +
                                                                            case when (VarRatear = 1)Then  VarAcrescimo else 0 end +
                                                                            case when (VarDesc = 1)Then  (VarDesconto * -1) else 0 end);
                                         end if;
                        end if; 

               if(VarReducao > 0)then set VarBaseIsento = (1 - (VarReducao/100)) * VarFull; end if;

                if(VarIcmsIncidiIPI = 1)then
                    set VarBase = VarIPIValor + VarBase;
                    set VarIPIValor = 0;
                end if;

                if(VarGradeCentral = 's' and VarNaoDestacaSt = 1)then
                IF(VarOrigem = 'MG' and VarDestino = 'MG')THEN
                    if(VarValorBaseST > 0)then
                     set VarBase = 0;
                    end if;
                END IF;
            end if;
            if(VarComplementar = 0)then
            
                IF(VarConta = 0)THEN
                                        INSERT INTO `conector`.`nfimposto`
                                        (`idnf`,
                                            `cfop`,
                                            `cstIcms`,
                                            `aliquota`,
                                            `imposto`,
                                            `baseIcmsIsentos`,
                                            `reducao`,
                                            `baseCalculo`,
                                            `icms`,
                                            `baseCalculoIcmsSt`,
                                            `icmsSt`,
                                            `valorIpi`,
                                            `typeAliquota`,
                                            valor
                                        )
                                    VALUES
                                        ( 
                                            new.nf,
                                            VarCFOP,
                                            VarCST,
                                            VarAliquota,
                                            VarBase * (VarAliquota/100),
                                            VarBaseIsento,
                                            VarReducao,
                                            VarBase,
                                            VarBase * (VarAliquota/100),
                                            if(VarCST = "060",0, VarValorBaseST), 
                                            if(VarCST = "060",0,VarValorST),
                                            VarIPIValor,
                                            VarTypeAliquota,
                                            VarValorTotal
                                        );
                                        ELSE
                                        UPDATE `conector`.`nfimposto`
                                        SET
                                            `imposto`= `imposto`+ (VarBase * (VarAliquota/100)),
                                            `baseIcmsIsentos`=`baseIcmsIsentos` + VarBaseIsento,
                                            `baseCalculo`=`baseCalculo` + VarBase,
                                            
                                            `icms`=(VarBase * (VarAliquota/100)) + `icms`,
                                            `baseCalculoIcmsSt`=`baseCalculoIcmsSt` + Coalesce(VarValorBaseST,0),
                                            
                                            `icmsSt`=`icmsSt` + Coalesce(VarValorST,0),
                                            
                                            `valorIpi`=`valorIpi` + VarIPIValor,
                                            
                                             Valor=Valor+VarValorTotal
                                             
                                         WHERE
                                            `idnf`=new.nf AND
                                            `reducao`=VarReducao AND
                                            `cfop`= VarCFOP AND
                                            `cstIcms`= VarCST AND 
                                            `aliquota`= VarAliquota AND 
                                            `typeAliquota`=VarTypeAliquota;
                                                
                END IF;
                else                      
                
                
                                IF(VarConta = 0)THEN
                                        INSERT INTO `conector`.`nfimposto`
                                        (`idnf`,
                                            `cfop`,
                                            `cstIcms`,
                                            `aliquota`,
                                            `imposto`,
                                            `baseIcmsIsentos`,
                                            `reducao`,
                                            `baseCalculo`,
                                            `icms`,
                                            `baseCalculoIcmsSt`,
                                            `icmsSt`,
                                            `valorIpi`,
                                            `typeAliquota`,
                                             valor
                                        )
                                    VALUES
                                        ( 
                                            new.nf,
                                            VarCFOP,
                                            VarCST,
                                            VarAliquota,
                                            VarBase * (VarAliquota/100),
                                            VarBaseIsento,
                                            VarReducao,
                                            VarBase,
                                            VarBase * (VarAliquota/100),
                                            if(VarCST = "060",0, VarValorBaseST),
                                            if(VarCST = "060",0,VarValorST),
                                            VarIPIValor,
                                            VarTypeAliquota,
                                            VarValorTotal
                                        );
                                        ELSE
                                        UPDATE `conector`.`nfimposto`
                                        SET
                                            `imposto`= `imposto`+ (VarBase * (VarAliquota/100)),
                                            `baseIcmsIsentos`=`baseIcmsIsentos` + VarBaseIsento,
                                            `baseCalculo`=`baseCalculo` + VarBase,
                                            
                                            `icms`=(VarBase * (VarAliquota/100)) + `icms`,
                                            `baseCalculoIcmsSt`=`baseCalculoIcmsSt` + Coalesce(VarValorBaseST,0),
                                            
                                            `icmsSt`=`icmsSt` + Coalesce(VarValorST,0),
                                            
                                            `valorIpi`=`valorIpi` + VarIPIValor,
                                            
                                             Valor=Valor+VarValorTotal
                                             
                                         WHERE
                                            `idnf`=new.nf AND 
                                            `reducao`=VarReducao AND 
                                            `cfop`= VarCFOP AND 
                                            `cstIcms`= VarCST AND 
                                            `aliquota`= VarAliquota AND 
                                            `typeAliquota`=VarTypeAliquota;

                END IF;
                set new.baseIcms = VarBase;
                
            end if; 
            SELECT tributacao FROM 
                    PRODUTOimpostos
                                    where idProduto=VarProduto and idLoja= new.loja
                                                        into VarTributacao;
            select  mesagem
                        from aliquota
                                    where
                                        idAliquota=VarTributacao
                                                        into VarMens;
                                        if(VarMens = "")then set VarMens=null;  end if;
                                        
                                        if(VarMens <> "")&&(VarMens1 is not null)then
                                            IF((VarMens <> VarMens1) and ((VarMens <> "")&&(VarMens1 is null)))THEN
                                                set VarMens1 = VarMens;
                                                    ELSE
                                                        set VarMens2 = VarMens;
                                            END IF;
                                        end if;
                            END IF;
                end loop;
            close vetor;
    end;              
    
    

    IF(VarCalcISS = 0)THEN
    begin
         DECLARE vetor2 CURSOR
                       FOR select aliquota,
                                  reducao,
                                  typeAliquota,
                                  sum(priceVenda),
                                  sum(valorTotalProduto + coalesce(frete,0) + coalesce(acrescimoValor,0)),
                                  cfop,
                                  idProduto,
                                  sum(valorIpi),
                                  ifnull(cstIcms,""),
                                  coalesce(sum(baseCalculoIcmsSubstituicao) -
                                  sum(case  when @a > 0 then baseCalculoIcmsSubstituicao else 0 end),0),
                                  coalesce(sum(valorIcmsSubstituicao) -
                                  sum(case  when @a > 0 then valorIcmsSubstituicao else 0 end),0),
                                  valorTotalProduto
                                          from 
                                              nfItem
                                                    where 
                                                          idNf=new.nf
                                                                  group by 1,2,3,6,7,9;
                                                                       DECLARE CONTINUE HANDLER FOR NOT FOUND SET done1 = TRUE;

            open vetor2;
            
            read_loop1: LOOP
            
                fetch vetor2 into VarAliquota, VarReducao, VarTypeAliquota, VarBase, VarFull, VarCFOP, VarProduto, VarIPIValor, VarCST, VarValorBaseST, VarValorST, VarValorTotal;
                
                
                    IF done1 THEN
                        LEAVE read_loop1;
                    END IF;
                    

                    if(VarAliquota is null)then set VarAliquota = 0; end if;
                    if(VarReducao is null)then set VarReducao = 0; end if; 
                    if(VarType is null)then set VarType = ""; end if;
                    if(VarTypeAliquota is null)then set VarTypeAliquota = ""; end if;
                    if(VarBase is null)then set VarBase = 0; end if;
                    if(VarFull is null)then set VarFull = 0; end if;
                    if(VarCFOP is null OR VarCFOP = "0")then set VarCFOP = new.CFOP; end if; if(VarCFOP is null)then set VarCFOP = '0'; end if;
                    if(VarProduto is null)then set VarProduto = 0; end if;
                    if(VarIPIValor is null)then set VarIPIValor = 0; end if; 
                    if(VarCST is null)then set VarCST = "000"; end if;
                    if(VarValorBaseST is null)then set VarValorBaseST = 0; end if;
                    if(VarValorST is null)then set VarValorST = 0; end if;
                    
                                                

    select tab1.idPisCofins from produto tab 
                inner join produtoImpostos tab1 on(tab.idProduto = tab1.idProduto) 
                                where tab.IdProduto=VarProduto and tab1.idLoja=new.Loja
                                                                            into VarTipoProduto;
                            if(VarTipoProduto is null)then set VarTipoProduto = 0; end if;

    SELECT count(tab2.idPisCofins)
                        FROM piscofins tab1
                        inner join piscofinsanexo tab2 on(tab1.idPisCofins = tab2.idPisCofins)
                                               where
                                                     tab2.vigencia <= now() and
                                                     tab2.idPisCofins = VarTipoProduto
                                                                                     into contador;
    if(contador is null)then set contador = 0; end if;

    if(contador = 0) then
    select tab1.idPisCofins from produto tab 
                inner join produtoImpostos tab1 on(tab.idProduto = tab1.idProduto) 
                                where tab.IdProduto=VarProduto and tab1.idLoja=new.Loja
                                                                            into VarTipoProduto;
                                            if(VarTipoProduto is null)then set VarTipoProduto = 0; end if;
    end if;

    if(contador > 0) then
    select tab1.idPisCofins from produto tab 
                inner join produtoImpostos tab1 on(tab.idProduto = tab1.idProduto) 
                                where tab.IdProduto=VarProduto and tab1.idLoja=new.Loja
                                                                            into VarTipoProduto;
                                            if(VarTipoProduto is null)then set VarTipoProduto = 0; end if;
    end if;

SELECT tab2.idPisCofinsAnexo
              FROM piscofins tab1
                     inner join piscofinsanexo tab2 on(tab1.idPisCofins = tab2.idPisCofins)
                                               where
                                                     tab2.vigencia <= now() and
                                                     tab2.idPisCofins = VarTipoProduto and
                                                     (tab2.vigencia = (select max(vigencia)
                                                                                        FROM piscofins tab1
                                                                                                    inner join piscofinsanexo tab2 on(tab1.idPisCofins = tab2.idPisCofins)
                                                                                                                            where
                                                                                                                                        tab2.vigencia <= now() and
                                                                                                                                        tab2.idPisCofins = VarTipoProduto))
                                                                                                                                                                into chaveIdPisCofinsAnexo; 
                                                                                                                                                            if(chaveIdPisCofinsAnexo is null)then set chaveIdPisCofinsAnexo = 0; end if;
                                                

    SELECT
        tab1.incideIpi
                    FROM
                    produto tab
                            inner join pisCofinsAnexo tab1 on(tab.tipo = tab1.idPisCofins)
                            where
                                tab.idProduto =VarProduto
                                and tab1.idPisCofinsAnexo=chaveIdPisCofinsAnexo
                                                                    into VarIcmsIncidiIPI;

    SELECT
        tab1.servico
        FROM
            produto tab
            inner join pisCofins tab1 on(tab.tipo = tab1.idPisCofins)
                        where
                                tab.idProduto = VarProduto
                                                        into VarServico;
                                                        
            if(VarIcmsIncidiIPI is null)then
                set VarIcmsIncidiIPI = 0;
            end if;
            if(VarServico is null)then
                set VarServico='n';
            end if;
                   
                    
                IF(VarServico = 's')THEN
                select 
                        count(idNf)
                            from
                                nfImposto
                            where
                                        idNf= new.nf and
                                        aliquota=VarAliquota and
                                        reducao=VarReducao and
                                        typeAliquota='x' and
                                        cfop=VarCFOP and
                                        cstIcms=VarCST
                                                into
                                                    VarConta;
                                                    if(VarConta is null)then set VarConta=0; end if;

                    if(VarRatear =  1)then
                                         
                                         if(VarNfRestituicao = 1)then
                                         set VarBase = VarFull * ( 1- (VarReducao/100));
                                            else
                                                set VarBase = VarBase * ( 1- (VarReducao/100));
                                         end if;

                                            else
                                               set VarDesconto = 0;
                                               set VarAcrescimo = 0;
                                                    if(new.valorTotalProdutos <> 0)then
                                                        if(new.DescontoValor <> 0)then
                                                        set Vardesco = new.DescontoValor / new.desconto;    
                                                            else
                                                                set Vardesco = new.desconto / 100;
                                                        end if;

                                                        if(new.AcrecismoValor <> 0)then
                                                        set VarAcres = new.AcrecismoValor / new.acrescimo;    
                                                            else
                                                                set VarAcres = new.acrescimo / 100;    
                                                        end if;                                                        
                                                    end if;
                                               set VarDesconto = VarFull * Vardesco;
                                               set VarAcrescimo = VarFull * VarAcres;
                                               set VarBase = VarFull * (1 - (VarReducao/100)) + VarAcrescimo - VarDesconto ;
                                         
                                         if(VarNfRestituicao = 1)then
                                         set VarBase =  (1 - (VarReducao/100)) * (VarFull   +
                                                        case when (VarRatear = 1)Then  VarAcrescimo else 0 end +
                                                        case when (VarDesc = 1)Then  (VarDesconto * -1) else 0 end);
                                                                else
                                                                     set VarBase =  (1 - (VarReducao/100)) * (VarBase   +
                                                                            case when (VarRatear = 1)Then  VarAcrescimo else 0 end +
                                                                            case when (VarDesc = 1)Then  (VarDesconto * -1) else 0 end);
                                         end if;
                end if; 

               if(VarReducao>0)then set VarBaseIsento = (1 - (VarReducao/100)) * VarFull; end if;
                
                if(VarIcmsIncidiIPI = 1)then
                    set VarBase = VarIPIValor + VarBase;
                    set VarIPIValor = 0;
                end if;

                if(VarGradeCentral = 's' and VarNaoDestacaSt = 1)then
                IF(VarOrigem = 'MG' and VarDestino = 'MG')THEN
                    if(VarValorBaseST > 0)then
                     set VarBase = 0;
                    end if;
                END IF;
            end if;
            if(VarComplementar = 0)then
                IF(VarConta = 0)THEN
                                        INSERT INTO `conector`.`nfimposto`
                                        (`idnf`,
                                            `cfop`,
                                            `cstIcms`,
                                            `aliquota`,
                                            `imposto`,
                                            `baseIcmsIsentos`,
                                            `reducao`,
                                            `baseCalculo`,
                                            `icms`,
                                            `baseCalculoIcmsSt`,
                                            `icmsSt`,
                                            `valorIpi`,
                                            `typeAliquota`,
                                             valor
                                        )
                                    VALUES
                                        ( 
                                            new.nf,
                                            VarCFOP,
                                            VarCST,
                                            VarAliquota,
                                            VarBase * (VarAliquota/100),
                                            VarBaseIsento,
                                            VarReducao,
                                            VarBase,
                                            VarBase * (VarAliquota/100),
                                            if(VarCST = "060",0, VarValorBaseST), 
                                            if(VarCST = "060",0,VarValorST),
                                            VarIPIValor,
                                            'x',
                                            VarValorTotal
                                        );
                                        ELSE
                                        UPDATE `conector`.`nfimposto`
                                        SET
                                            `imposto`= `imposto`+ (VarBase * (VarAliquota/100)),
                                            `baseIcmsIsentos`=`baseIcmsIsentos` + VarBaseIsento,
                                            `baseCalculo`=`baseCalculo` + VarBase,
                                            
                                            `icms`=(VarBase * (VarAliquota/100)) + `icms`,
                                            `baseCalculoIcmsSt`=`baseCalculoIcmsSt` + Coalesce(VarValorBaseST,0),
                                            
                                            `icmsSt`=`icmsSt` + Coalesce(VarValorST,0),
                                            
                                            `valorIpi`=`valorIpi` + VarIPIValor,
                                            
                                             Valor=Valor+VarValorTotal
                                             
                                         WHERE
                                            `idnf`=new.nf AND
                                            `reducao`=VarReducao AND 
                                            `cfop`= VarCFOP AND 
                                            `cstIcms`= VarCST AND 
                                            `aliquota`= VarAliquota AND 
                                            `typeAliquota`='x';
                END IF;
                else                      
                
                
                                IF(VarConta = 0)THEN
                                        INSERT INTO `conector`.`nfimposto`
                                        (   `idnf`,
                                            `cfop`,
                                            `cstIcms`,
                                            `aliquota`,
                                            `imposto`,
                                            `baseIcmsIsentos`,
                                            `reducao`,
                                            `baseCalculo`,
                                            `icms`,
                                            `baseCalculoIcmsSt`,
                                            `icmsSt`,
                                            `valorIpi`,
                                            `typeAliquota`,
                                             valor
                                        )
                                    VALUES
                                        (
                                            new.nf,
                                            VarCFOP,
                                            VarCST,
                                            VarAliquota,
                                            VarBase * (VarAliquota/100),
                                            VarBaseIsento,
                                            VarReducao,
                                            VarBase,
                                            VarBase * (VarAliquota/100),
                                            if(VarCST = "060",0, VarValorBaseST),
                                            if(VarCST = "060",0,VarValorST),
                                            VarIPIValor,
                                            VarTypeAliquota,
                                            VarValorTotal
                                        );
                                        ELSE
                                        UPDATE `conector`.`nfimposto`
                                        SET
                                            `imposto`=  (VarBase * (VarAliquota/100)),
                                            `baseIcmsIsentos`= VarBaseIsento,
                                            
                                            `baseCalculo` = VarBase,
                                            `icms`=(VarBase * (VarAliquota/100)) + `icms`,
                                            
                                            `baseCalculoIcmsSt` = Coalesce(VarValorBaseST,0),
                                            
                                            `icmsSt`= Coalesce(VarValorST,0),
                                            
                                            `valorIpi`= VarIPIValor,
                                             
                                             valor = VarValorTotal
                                         WHERE
                                            `idnf`=new.nf AND 
                                            `reducao`=VarReducao AND 
                                            `cfop`= VarCFOP AND
                                            `cstIcms`= VarCST AND
                                            `aliquota`= VarAliquota AND
                                            `typeAliquota`=VarTypeAliquota;

                END IF;
                set new.baseIcms = VarBase;
                
            end if; 
            SELECT tributacao FROM 
                    PRODUTOimpostos
                                    where idProduto=VarProduto and idLoja = new.Loja
                                                        into VarTributacao;
            select  mesagem
                        from aliquota
                                    where 
                                        idAliquota=VarTributacao
                                                        into VarMens;
                                        if(VarMens = "")then set VarMens=null;  end if;
                                        
                                        if(VarMens <> "")&&(VarMens1 is not null)then
                                            IF((VarMens <> VarMens1) and ((VarMens <> "")&&(VarMens1 is null)))THEN
                                                set VarMens1 = VarMens;
                                                    ELSE
                                                        set VarMens2 = VarMens;
                                            END IF;
                                        end if;
                            END IF;

             set VarSumImpostos=0;
                            SELECT ifnull(sum(imposto),0) FROM
                                                           conector.nfimposto
                                                                        where idNf=new.nf
                                                                                    into VarSumImpostos;
                                                                                    if(VarSumImpostos <> 0)then
                                                                                        set new.iss =  VarSumImpostos;
                                                                                    end if;
                        end loop;
                    
                close vetor2;
        end; 
        END IF;
end if;   
       if(VarGradeCentral = 's')then
                     SELECT ifnull(sum(imposto),0),
                                           ifnull(sum(baseCalculo),0)
                                                                    FROM 
                                                                        conector.nfimposto
                                                                                    where idNf=new.nf
                                                                                                into
                                                                                                    VarImpostoOne,
                                                                                                    VarValorOne;

                                                                                                    else
                                                                                                    
                     SELECT ifnull(sum(imposto),0),
                                           ifnull(sum(baseCalculo),0)
                                                                    FROM 
                                                                        conector.nfimposto
                                                                                    where idNf=new.nf and
                                                                                          typeAliquota = 't'
                                                                                                into
                                                                                                    VarImpostoOne,
                                                                                                    VarValorOne;

        end if; 
                     SELECT ifnull(sum(baseCalculo),0)
                                                        FROM 
                                                            conector.nfimposto
                                                                         where idNf=new.nf
                                                                                     into  VarValueF;
                     SELECT ifnull(sum(baseCalculo),0)
                                                        FROM
                                                            conector.nfimposto
                                                                         where idNf=new.nf
                                                                                     into  VarValueI;
        IF(VarImpostoOne IS NULL)THEN SET VarImpostoOne=0; END IF;
        
                 
          SELECT ifnull(sum(baseCalculoIcmsSt),0),
                                               ifnull(sum(IcmsSt),0)
                                                                FROM
                                                                    conector.nfimposto
                                                                                where idNf=new.nf
                                                                                        into    VarValorBaseST,
                                                                                                VarValorST;
           select count(tab1.calcBc) from produtoImpostos tab
                inner join cst tab1 on(tab.cst = tab1.idCst)
                inner join nfItem tab2 on(tab.idProduto = tab2.idProduto)
                                                   where  tab2.idNf = new.nf and tab.idLoja = new.loja into @a;
          if(@a > 0)then
                set new.baseCalculoIcmsSubstituicao = VarValorBaseST;
                set new.valorIcmsSubstituicao = VarValorST;
                        else
                                                set new.baseCalculoIcmsSubstituicao = VarValorBaseST;
                                                set new.valorIcmsSubstituicao = VarValorST;
          end if;
          
        set new.baseIcms = VarValorOne;
        set new.valorIcms = VarImpostoOne;
        set new.baseIcmsIsento = VarValueI;


        IF((VarGradeCentral = 's' AND @a > 0) and

           VarOrigem = 'MG' and VarDestino = 'MG') THEN

           if(new.baseCalculoIcmsSubstituicao > 0)then
                    SELECT ifnull(sum(baseIcms),0),
                                               ifnull(sum(valorIcms),0)
                                                                FROM
                                                                    conector.nf
                                                                                where nf.Nf=new.nf
                                                                                            into
                                                                                                    VarBase, VarIcmsValor;
           end if;
            
        end IF;
          
end $$

DELIMITER ;

--
-- Definition of trigger `danfe_nf_canc`
--

DROP TRIGGER /*!50030 IF EXISTS */ `danfe_nf_canc`;

DELIMITER $$

CREATE DEFINER = `master`@`localhost` TRIGGER `danfe_nf_canc` AFTER UPDATE ON `nf` FOR EACH ROW begin
    declare varId double default 0;
    declare varEstoque decimal(15,4) default 0;
    declare varProduto double default 0;
    declare varLoja int default 0;
    declare varData date default now();
    declare varSequencia int default 0;
    declare varQtty decimal(15,4) default 0;
    declare done int default false;
    
    if(new.statusNf = 3)then
            begin
                    declare fonteOne cursor for select tab.idExtrato,tab.idProduto,tab.idLoja,tab.data, tab.sequencia,
                            tab.quantidade from produtoMovimento tab
                            inner join nf tab1 on(tab.nota = tab1.nr_nota and tab.serie = tab1.serie and tab.idLoja = tab1.loja and tab.data = tab1.emissao)
                            inner join nfItem tab2 on(tab1.nf = tab2.idNf and tab.idProduto = tab2.idProduto and tab.sequencia = tab2.sequencia)
                            where tab.nota=new.nr_nota;
                            
                    declare continue handler for not found set done = true;

                                open fonteOne;

                                read_loop: LOOP

                                            FETCH fonteOne  into
                                                    varId, varProduto, varLoja, varData, varSequencia, varQtty;
                                            if done then
                                                   leave read_loop;
                                            end if;
                                            
                        update produtoEstoques set quantidade=(quantidade+VarQtty) where idProduto=varProduto and idLoja = VarLoja;
                        delete from produtoMovimento where idExtrato=varId;
                        delete from produtoExtrato where idprodutoExtrato=varId;
    
                                end loop;
        close fonteOne;
    end;
    end if;
end $$

DELIMITER ;

--
-- Definition of table `nf_controle`
--

DROP TABLE IF EXISTS `nf_controle`;
CREATE TABLE `nf_controle` (
  `idNota` bigint(20) NOT NULL,
  `serie` varchar(3) NOT NULL,
  PRIMARY KEY (`idNota`,`serie`)
) ENGINE=InnoDB DEFAULT CHARSET=latin1;

--
-- Dumping data for table `nf_controle`
--

/*!40000 ALTER TABLE `nf_controle` DISABLE KEYS */;
/*!40000 ALTER TABLE `nf_controle` ENABLE KEYS */;


--
-- Definition of table `nfimposto`
--

DROP TABLE IF EXISTS `nfimposto`;
CREATE TABLE `nfimposto` (
  `nfImposto` double NOT NULL AUTO_INCREMENT,
  `idnf` double NOT NULL,
  `cfop` varchar(6) NOT NULL,
  `cstIcms` char(3) NOT NULL,
  `aliquota` decimal(15,3) NOT NULL DEFAULT '0.000',
  `imposto` decimal(15,3) NOT NULL DEFAULT '0.000',
  `baseIcmsIsentos` decimal(15,3) NOT NULL DEFAULT '0.000',
  `reducao` decimal(15,3) NOT NULL DEFAULT '0.000',
  `baseCalculo` decimal(15,3) NOT NULL DEFAULT '0.000',
  `icms` decimal(15,3) NOT NULL DEFAULT '0.000',
  `baseCalculoIcmsSt` decimal(15,3) NOT NULL DEFAULT '0.000',
  `icmsSt` decimal(15,3) NOT NULL DEFAULT '0.000',
  `valorIpi` decimal(15,3) NOT NULL DEFAULT '0.000',
  `typeAliquota` char(1) NOT NULL,
  `valor` decimal(15,3) NOT NULL DEFAULT '0.000',
  PRIMARY KEY (`nfImposto`,`idnf`),
  KEY `fk_nfeImposto_nfe1` (`idnf`),
  KEY `fk_nfeImposto_cst1` (`cstIcms`),
  KEY `fk_nfImposto_cfop1` (`cfop`),
  CONSTRAINT `fk_nfeImposto_cst1` FOREIGN KEY (`cstIcms`) REFERENCES `cst` (`idcst`) ON DELETE NO ACTION ON UPDATE NO ACTION,
  CONSTRAINT `fk_nfeImposto_nfe1` FOREIGN KEY (`idnf`) REFERENCES `nf` (`nf`) ON DELETE CASCADE ON UPDATE NO ACTION,
  CONSTRAINT `fk_nfImposto_cfop1` FOREIGN KEY (`cfop`) REFERENCES `cfop` (`cfop`) ON DELETE NO ACTION ON UPDATE NO ACTION
) ENGINE=InnoDB DEFAULT CHARSET=latin1;

--
-- Dumping data for table `nfimposto`
--

/*!40000 ALTER TABLE `nfimposto` DISABLE KEYS */;
/*!40000 ALTER TABLE `nfimposto` ENABLE KEYS */;


--
-- Definition of table `nfinfortransporte`
--

DROP TABLE IF EXISTS `nfinfortransporte`;
CREATE TABLE `nfinfortransporte` (
  `idnfInforTransporte` double NOT NULL AUTO_INCREMENT,
  `nf` double NOT NULL,
  `uf` varchar(2) NOT NULL,
  `qtty_volume` decimal(15,3) DEFAULT NULL,
  `especie` char(30) DEFAULT NULL,
  `marca` varchar(30) DEFAULT NULL,
  `numeracao` decimal(15,3) DEFAULT NULL,
  `pesoliquido` decimal(15,3) DEFAULT NULL,
  `pesoBruto` decimal(15,3) DEFAULT NULL,
  `idtransportadora` int(11) NOT NULL,
  `retencaoBaseCalculo` decimal(15,3) DEFAULT '0.000',
  `retencaoAliquotaFrete` decimal(15,3) DEFAULT '0.000',
  `retencaoIcmsFrete` decimal(15,3) DEFAULT '0.000',
  `retencaoValorFrete` decimal(15,3) DEFAULT '0.000',
  `retencaoCfopFrete` varchar(10) DEFAULT NULL,
  `isentoIcms` smallint(6) DEFAULT '1',
  PRIMARY KEY (`idnfInforTransporte`,`nf`),
  KEY `fk_nfInforTransporte_nf1` (`nf`),
  KEY `fk_nfInforTransporte_transportadora1` (`idtransportadora`),
  CONSTRAINT `fk_nfInforTransporte_nf1` FOREIGN KEY (`nf`) REFERENCES `nf` (`nf`) ON DELETE CASCADE ON UPDATE NO ACTION,
  CONSTRAINT `fk_nfInforTransporte_transportadora1` FOREIGN KEY (`idtransportadora`) REFERENCES `transportadora` (`idtransportadora`) ON DELETE NO ACTION ON UPDATE NO ACTION
) ENGINE=InnoDB DEFAULT CHARSET=latin1;

--
-- Dumping data for table `nfinfortransporte`
--

/*!40000 ALTER TABLE `nfinfortransporte` DISABLE KEYS */;
/*!40000 ALTER TABLE `nfinfortransporte` ENABLE KEYS */;


--
-- Definition of table `nfinforveiculo`
--

DROP TABLE IF EXISTS `nfinforveiculo`;
CREATE TABLE `nfinforveiculo` (
  `idnfInforVeiculo` double NOT NULL AUTO_INCREMENT,
  `nf` double NOT NULL,
  `nfInforTransporte` double NOT NULL,
  `uf` varchar(2) DEFAULT NULL,
  `placa` varchar(45) DEFAULT NULL,
  `rntc` varchar(45) DEFAULT NULL,
  `idveiculo` int(11) NOT NULL,
  PRIMARY KEY (`idnfInforVeiculo`,`nf`,`nfInforTransporte`),
  KEY `fk_nfInforVeiculo_nfInforTransporte1` (`nf`,`nfInforTransporte`),
  KEY `fk_nfInforVeiculo_veiculo1` (`idveiculo`),
  CONSTRAINT `fk_nfInforVeiculo_nfInforTransporte1` FOREIGN KEY (`nf`, `nfInforTransporte`) REFERENCES `nfinfortransporte` (`nf`, `idnfInforTransporte`) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT `fk_nfInforVeiculo_veiculo1` FOREIGN KEY (`idveiculo`) REFERENCES `veiculo` (`idveiculo`) ON DELETE NO ACTION ON UPDATE NO ACTION
) ENGINE=InnoDB DEFAULT CHARSET=latin1;

--
-- Dumping data for table `nfinforveiculo`
--

/*!40000 ALTER TABLE `nfinforveiculo` DISABLE KEYS */;
/*!40000 ALTER TABLE `nfinforveiculo` ENABLE KEYS */;


--
-- Definition of table `nfitem`
--

DROP TABLE IF EXISTS `nfitem`;
CREATE TABLE `nfitem` (
  `idnfItem` double NOT NULL AUTO_INCREMENT,
  `idnf` double NOT NULL,
  `idProduto` int(11) NOT NULL,
  `valorLiquido` decimal(15,3) NOT NULL,
  `priceOriginal` decimal(15,3) NOT NULL,
  `priceVenda` decimal(15,3) NOT NULL,
  `priceCusto` decimal(15,3) NOT NULL,
  `estoque` decimal(15,3) NOT NULL,
  `data` date NOT NULL,
  `peso` decimal(15,3) NOT NULL,
  `aliquota` decimal(15,3) NOT NULL,
  `icms` decimal(15,3) NOT NULL,
  `baseCalculo` decimal(15,3) NOT NULL,
  `reducao` decimal(15,3) NOT NULL,
  `quantidade` decimal(15,3) NOT NULL,
  `idunidadeMedida` int(11) NOT NULL,
  `cfop` varchar(6) NOT NULL,
  `cstIcms` char(3) NOT NULL,
  `cstPis` varchar(3) NOT NULL,
  `valorPis` decimal(15,3) NOT NULL,
  `basePis` decimal(15,3) NOT NULL,
  `cstCofins` varchar(3) NOT NULL,
  `valorCofins` decimal(15,3) NOT NULL,
  `baseCofins` decimal(15,3) NOT NULL,
  `cstIpi` varchar(3) DEFAULT NULL,
  `ipi` decimal(15,3) NOT NULL,
  `ipiValor` decimal(15,3) NOT NULL,
  `valorIpi` decimal(15,3) NOT NULL DEFAULT '0.000',
  `baseIpi` decimal(15,3) NOT NULL,
  `desconto` decimal(15,3) NOT NULL,
  `descontoValor` decimal(15,3) NOT NULL,
  `acrescimo` decimal(15,3) NOT NULL,
  `acrescimoValor` decimal(15,3) NOT NULL,
  `aliquotaIcmsSt` decimal(15,3) NOT NULL,
  `baseCalculoIcmsSubstituicao` decimal(15,3) NOT NULL,
  `valorIcmsSubstituicao` decimal(15,3) NOT NULL,
  `reducaoIcmsSt` decimal(15,3) NOT NULL,
  `margem` decimal(15,3) NOT NULL,
  `valorTotalProduto` decimal(15,3) NOT NULL,
  `valorTotalNota` decimal(15,3) NOT NULL,
  `valorTotalLiquido` decimal(15,3) NOT NULL,
  `fornecedor` int(11) NOT NULL,
  `idsetor` int(11) NOT NULL,
  `tributacao` char(2) NOT NULL,
  `frete` decimal(15,3) NOT NULL DEFAULT '0.000',
  `valorFrete` decimal(15,3) NOT NULL DEFAULT '0.000',
  `typeAliquota` char(1) NOT NULL,
  `chaveEntrada` double DEFAULT NULL,
  `sequencia` int(11) NOT NULL DEFAULT '0',
  `seguro` decimal(15,3) NOT NULL DEFAULT '0.000',
  `idGenero` int(11) NOT NULL DEFAULT '0',
  `origemMercadoria` varchar(1) DEFAULT '0',
  `quantidadeCanc` decimal(15,3) NOT NULL DEFAULT '0.000',
  PRIMARY KEY (`idnfItem`,`idnf`,`idProduto`,`sequencia`),
  KEY `fk_nfeItem_nfe1` (`idnf`),
  KEY `fk_nfeItem_produto1` (`idProduto`),
  KEY `fk_nfeItem_unidadeMedida1` (`idunidadeMedida`),
  KEY `fk_nfeItem_cfop1` (`cfop`),
  KEY `fk_nfeItem_cst1` (`cstIcms`),
  KEY `fk_nfItem_cliente1` (`fornecedor`),
  KEY `fk_nfItem_setor1` (`idsetor`),
  KEY `fk_nfItem_aliquota1` (`tributacao`),
  CONSTRAINT `fk_nfeItem_cfop1` FOREIGN KEY (`cfop`) REFERENCES `cfop` (`cfop`) ON DELETE NO ACTION ON UPDATE NO ACTION,
  CONSTRAINT `fk_nfeItem_cst1` FOREIGN KEY (`cstIcms`) REFERENCES `cst` (`idcst`) ON DELETE NO ACTION ON UPDATE NO ACTION,
  CONSTRAINT `fk_nfeItem_nfe1` FOREIGN KEY (`idnf`) REFERENCES `nf` (`nf`) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT `fk_nfeItem_produto1` FOREIGN KEY (`idProduto`) REFERENCES `produto` (`idProduto`) ON DELETE NO ACTION ON UPDATE NO ACTION,
  CONSTRAINT `fk_nfeItem_unidadeMedida1` FOREIGN KEY (`idunidadeMedida`) REFERENCES `unidademedida` (`idunidadeMedida`) ON DELETE NO ACTION ON UPDATE NO ACTION,
  CONSTRAINT `fk_nfItem_aliquota1` FOREIGN KEY (`tributacao`) REFERENCES `aliquota` (`idaliquota`) ON DELETE NO ACTION ON UPDATE NO ACTION,
  CONSTRAINT `fk_nfItem_cliente1` FOREIGN KEY (`fornecedor`) REFERENCES `cliente` (`idcliente`) ON DELETE NO ACTION ON UPDATE NO ACTION,
  CONSTRAINT `fk_nfItem_setor1` FOREIGN KEY (`idsetor`) REFERENCES `setor` (`idsetor`) ON DELETE NO ACTION ON UPDATE NO ACTION
) ENGINE=InnoDB DEFAULT CHARSET=latin1;

--
-- Dumping data for table `nfitem`
--

/*!40000 ALTER TABLE `nfitem` DISABLE KEYS */;
/*!40000 ALTER TABLE `nfitem` ENABLE KEYS */;


--
-- Definition of trigger `danfe_before_insert`
--

DROP TRIGGER /*!50030 IF EXISTS */ `danfe_before_insert`;

DELIMITER $$

CREATE DEFINER = `root`@`%` TRIGGER `danfe_before_insert` BEFORE INSERT ON `nfitem` FOR EACH ROW begin
    DECLARE VarTotalNfTemp numeric(15,3) default 0;
    declare VarValorTotalProduto numeric(15,3) default 0;
    DECLARE VarUN numeric(15,3) default 0;
    DECLARE VarDesconto numeric(15,3) default 0;
    DECLARE VarCFOP varchar(6);
    DECLARE VarAcrescimo numeric(15,3) default 0;
    DECLARE VarCalcBase smallint;
    DECLARE VarCalculoST numeric(15,3) default 0;
    DECLARE VarOrigem double;
    DECLARE VarDestino double;
    DECLARE VarParamentro int(11);
    DECLARE VarTypeNota char(1);
    DECLARE VarTypeAliquota char(1);
    DECLARE VarAux2 char(2);
    DECLARE VarUFOrigem char(2);
    DECLARE VarUFDestino char(2);
    DECLARE VarValueA numeric(15,3) default 0;
    DECLARE VarValueB numeric(15,3) default 0;
    DECLARE VarMargemAjustada numeric(15,3) default 0;
    DECLARE VarBaseST numeric(15,3) default 0;
    DECLARE VarIcmsST numeric(15,3) default 0;
    DECLARE VarIcms numeric(15,3) default 0;
    DECLARE VarAliquotaInput numeric(15,3) default 0;
    DECLARE VarAliquotaOutput numeric(15,3) default 0;
    DECLARE VarAliquotaGrade numeric(15,3) default 0;
    DECLARE VarR1 numeric(15,3) default 0;
    DECLARE VarR2 numeric(15,3) default 0;
    DECLARE VarR3 numeric(15,3) default 0;
    DECLARE VarRedEspecial numeric(15,3) default 0;
    DECLARE VarPis numeric(15,3) default 0;
    DECLARE VarCofins numeric(15,3) default 0;
    DECLARE VarPisDeb numeric(15,3) default 0;
    DECLARE VarCofinsDeb numeric(15,3) default 0;
    DECLARE VarCalcPisCofins char(1);
    DECLARE VarNfComplementar smallint;
    DECLARE VarLiquidoBruto numeric(15,3) default 0;
    DECLARE VarSTCalcula char(1);
    DECLARE VarNaoSTDestacada char(1);
    DECLARE VarSTDestacada char(1);
    DECLARE VarNFOrigem Int(11);
    DECLARE VarFornecedor Integer;
    DECLARE VarSomaIcms char(1);
    DECLARE VarSomaSt char(1);
    DECLARE VarReduzBaseST Integer;
    DECLARE VarSerie char(3);
    DECLARE VarContribuinte integer;
    DECLARE VarIncideIPI integer;
    DECLARE VarCST char(3);
    DECLARE VarParTemp numeric(15,3);
    DECLARE VarEmissao DATE;
    DECLARE VarGradeCentral char(1);
    

    DECLARE VarDestacaSTItemEntrada smallint default 0;
    DECLARE VarDestacaStNfEntrada smallint default 0;
    DECLARE VarDataNfEntrada date;
    DECLARE VarTypeAliquotaNfEntrada char(1);
    DECLARE VarAliquotaInputNfEntrada numeric(15,3) default 0;
    DECLARE VarAliquotaR1NfEntrada numeric(15,3) default 0;
    DECLARE VarBaseStNfEntrada numeric(15,3) default 0;
    DECLARE VarIcmsStNfEntrada numeric(15,3) default 0;
    DECLARE VarCstIcmsNfEntrada numeric(15,3) default 0;
    DECLARE VarBaseCalculoNfEntrada numeric(15,3) default 0;
    
    declare VarMens varchar(100);
        declare VarMens1 varchar(100);
        declare VarMens2 varchar(100);
        declare VarMens3 varchar(100);
        declare VarMens4 varchar(100);
        declare VarMens5 varchar(100);

    declare seq int;
    
    
    if (VarMens1 is null) then set VarMens1=' '; end if;
   if (VarMens2 is null) then set VarMens2=' '; end if;
   if (VarMens3 is null) then set VarMens3=' '; end if;
   if (VarMens4 is null) then set VarMens4=' '; end if;
   if (VarMens5 is null) then set VarMens5=' '; end if;

      if ((VarMens1<>VarMens) and (VarMens2<>VarMens) and (VarMens3<>VarMens) and   (VarMens4<>VarMens) and (VarMens5<>VarMens)) then
         if ((VarMens1="") or (VarMens1 is null)) then
            set VarMens1= VarMens;
         else if ((VarMens2="") or (VarMens2 is null)) then
            set VarMens2= VarMens;
         else if ((VarMens3="") or (VarMens3 is null)) then
            set VarMens3= VarMens;
         else if ((VarMens4="") or (VarMens4 is null)) then
            set VarMens4= VarMens;
         else if ((VarMens5="") or (VarMens5 is null)) then
            set VarMens5= VarMens; 
                    end if;
                end if;
            end if;
         end if;
      end if;
   end if;

        set seq = (select count(idNf) from nfItem where idNf=new.idNf);

        if(seq = 0)then

            set new.sequencia = 1;

                else

                set new.sequencia = seq + 1;

        end if;

set VarCFOP = new.cfop;
set VarCST = new.cstIcms;

select gradeFiscal
                from system
                            into VarGradeCentral;

select
    loja,idCliente,idParamentro,
                        nr_nota_entrada,serie_entrada,
                                                    cfop, emissao
                                                        from nf
                                                             where nf.nf=new.idNf
                                                                             into VarOrigem,
                                                                                  VarDestino,
                                                                                  VarParamentro,
                                                                                  VarNFOrigem,
                                                                                  VarSerie,
                                                                                  VarCFOP,
                                                                                  VarEmissao;

                                                                                  if(VarOrigem is null)then set VarOrigem=0; end if;
                                                                                  if(VarDestino is null)then set VarDestino=0; end if;
                                                                                  if(VarParamentro is null)then set VarParamentro=0; end if;
                                                                                  if(VarNFOrigem is null)then set VarNFOrigem="0" ; end if;
                                                                                  if(VarSerie is null)then set VarSerie="" ; end if;
                                                                                  if(VarCFOP is null)then set VarCFOP=""; end if;
                                                                                  if(VarEmissao is null)then set VarEmissao=now() ; end if;

select uf from cliente
                    where idCliente=VarOrigem
                                            into VarUFOrigem;
                                            if(VarUFOrigem is null)then set VarUFOrigem='MG'; end if;
select uf from cliente
                    where idCliente=VarDestino
                                            into VarUFDestino;
                                            if(VarUFDestino is null)then set VarUFDestino='MG'; end if;

select tab.forceIcms, tab.descatadaSt
                      from paramentro_fornecedor_fiscal tab
                             right join cliente tab1 on(tab.idCliente = tab1.idCliente)
                                                                       where tab1.idCliente = VarDestino
                                                                              into VarSomaIcms,VarSomaSt;
                                                                              if(VarSomaIcms is null)then set VarSomaIcms='n'; end if;
                                                                              if(VarSomaSt is null )then set VarSomaSt='n'; end if;
                                                      
    if(VarNFOrigem is null or VarNFOrigem = 0)then
               if(VarDestacaStNfEntrada is null)then set VarDestacaStNfEntrada='0'; end if;
               if(VarDataNfEntrada is null)then set VarDataNfEntrada = '1900-01-01'; end if;
    else
    SELECT  tab.sumSt,
            tab.entrada
        FROM entrada tab
                  where tab.idEntrada=VarNFOrigem
                                    into VarSTDestacada,
                                         VarDataNfEntrada;
  end if;
if(new.ipiValor = 0)then
  set new.ValorIpi = new.valorTotalNota * new.ipi/100;
else
  set new.ValorIpi = new.ipiValor * new.quantidade;
end if;

select
    flagCalculaBaseSt,flagParamentro,flagNFRestituicao, flagCalculaPisCofins
                                  from paramentro_faturamento
                                                      where idparamentro = VarParamentro
                                                           into VarSTCalcula, VarTypeNota, VarNfComplementar, VarCalcPisCofins;
                                                           

select
       idCst,calcRed, typeCst, calcBc
                                from cst
                                    where idCst = new.cstIcms
                                           into
                                                VarCST, VarReduzBaseST, VarNaoSTDestacada, VarCalcBase; 


if(VarNfComplementar is null)then set VarNfComplementar=0; end if;
if(VarSTCalcula is null)then set VarSTCalcula="0"; end if;
if(VarNaoSTDestacada is null)then set VarNaoSTDestacada="t"; end if;
IF(VarReduzBaseST is null) then set VarReduzBaseST=0; end if;



if(VarSTDestacada is null)then
    set VarSTDestacada = 0;
      SELECT flagParamentro
                          FROM paramentro_faturamento
                                                    where idParamentro in(select idParamentro from nf where nf.nf = new.idNf)
                                                                                                                             into VarTypeNota;
  end if;





             if(VarTypeNota = 'd')then

                                  select
                                        if(cst.typeCst = 's',if(cst.calcBc=1,1,0),0) as destacaSt,
                                        typeAliquota,
                                        tab.icmsEntrada,
                                        tab.reducaoEntrada,
                                        tab.baseCalculoSubstituicao,
                                        tab.valorIcmsSubstituicao,
                                        tab.cstIcms
                                                from
                                                    entradaItem tab
                                                    inner join cst on(tab.cstIcms=cst.idCst)
                                                                                where
                                                                                    tab.idEntradaItem=new.ChaveEntrada
                                                                                                    into
                                                                                                        VarDestacaSTItemEntrada,
                                                                                                        VarTypeAliquotaNfEntrada,
                                                                                                        VarAliquotaInputNfEntrada,
                                                                                                        VarAliquotaR1NfEntrada,
                                                                                                        VarBaseStNfEntrada,
                                                                                                        VarIcmsStNfEntrada,
                                                                                                        VarCstIcmsNfEntrada;
                                                                                                        if(VarDestacaSTItemEntrada is null)then set VarDestacaSTItemEntrada=0; end if;
                                                                                                        if(VarAliquotaInputNfEntrada is null)then set VarAliquotaInputNfEntrada=0; end if;
                                                                                                        if(VarAliquotaR1NfEntrada is null)then set VarAliquotaR1NfEntrada=0; end if;
                                                                                                        if(VarBaseStNfEntrada is null)then set VarBaseStNfEntrada=0; end if;
                                                                                                        if(VarIcmsStNfEntrada is null)then set VarIcmsStNfEntrada=0; end if;
                                                                                                        if(VarCstIcmsNfEntrada is null)then set VarCstIcmsNfEntrada = ""; end if;

   end if;

    select quantidade
                    from produtoEmbalagem
                                        where idProduto=new.idProduto and
                                                          defaultVenda='s'  into VarUN;

  if((new.desconto != 0) or (new.descontoValor != 0) or (new.acrescimo != 0) or (new.acrescimoValor != 0))then

                if(new.desconto != 0)then
                    set VarDesconto=new.priceVenda * (new.desconto/100);
                    set new.DescontoValor = (VarDesconto*new.quantidade);
                      else
                        set VarDesconto = new.DescontoValor*new.quantidade;
                end if;

        if(new.acrescimo != 0)then
                set VarAcrescimo=new.priceVenda*(new.acrescimo/100);
                set new.AcrescimoValor =VarAcrescimo*new.quantidade;
            else
                set VarAcrescimo = new.AcrescimoValor*new.quantidade;
        end if;
            set new.valorLiquido = round((new.priceVenda - VarDesconto + VarAcrescimo),3);

    else
            set new.valorLiquido = round((new.priceVenda * ((1 - (new.desconto/100)) * (1 + (new.acrescimo/100)))),2);

end if;

    if(new.ipiValor is null or new.ipiValor = 0)then
       set new.valorIPI = ((new.valorTotalProduto - VarDesconto + VarAcrescimo)*new.IPI)/100;
        ELSE
       set new.valorIPI = ((varUn*new.ipiValor)*new.quantidade);
    end if;
    if(new.ValorIpi is null)then
            set new.ValorIpi = 0;
      SELECT flagParamentro
                          FROM paramentro_faturamento
                                                    where idParamentro in(select idParamentro from nf where nf.nf = new.idNf)
                                                                                                                             into VarTypeNota;

    end if;

    if(VarTypeNota = 'v')or(VarTypeNota = 'd')or(VarTypeNota = 't')or(((VarNaoSTDestacada = 's' and VarSTCalcula = 0) and VarGradeCentral <> 's' and (VarCalcBase = 1)))then

            call conector_calc_icms(
                                        new.IdProduto,
                                        VarUFOrigem,
                                        VarDestino,
                                        VarParamentro,
                                        's',
                                        0,
					VarOrigem,
                                        VarAliquotaInput,
                                        VarR1,
                                        VarAliquotaOutput,
                                        VarR2,
                                        VarAux2,
                                        VarAux2,
                                        VarTypeAliquota,
                                        VarAux2,
                                        VarParTemp,
                                        VarParTemp,
                                        VarParTemp,
                                        VarAliquotaGrade,
                                        VarR3,
                                        VarRedEspecial,
                                        VarSTDestacada
                                   );

                        if(VarTypeAliquota = 's')then
                                    SELECT spedNcm.MvaAjustada FROM produtoImpostos
                                                        inner join spedncm on(produtoImpostos.SpedNcm = spedNcm.idSpedNcm)
                                                                   where produtoImpostos.idProduto = new.IdProduto and produtoImpostos.idLoja=VarOrigem
                                                                               into VarMargemAjustada;

                                    if(VarAliquotaInput is null)then
                                        select aliquota.aliquota
                                                            from aliquota
                                                                        where idAliquota=VarAliquotaGrade
                                                                                into VarAliquotaInput;
                                                                                    if(VarAliquotaInput is null)then set VarAliquotaInput=0; end if;

                                    end if;
                                    if(VarR1 is null)then set VarR1 = 0; end if;

                                    

                                  if(VarMargemAjustada is null) then set VarMargemAjustada=0;
                                            else
                                                set new.Margem = VarMargemAjustada;
                                  end if;

                                  if(VarTypeNota = 'd')then

                                    if(VarNFOrigem is null and VarNFOrigem > 0)then

                                        if(typeCst = 's' and VarDestacaSTItemEntrada = 1)then 

                                                set VarCalcBase = 1;

                                        else

                                                set VarCalcBase = 0;

                                        end if;

                                    else
                                                set VarCalcBase = 0;
                                    end if;

                                  end if;

                                  if(((VarTypeNota = 'v')or(VarTypeNota = 'd')or(VarTypeNota = 't')) and (VarAliquotaInput is null))then
                                      select aliquota from aliquota tab
                                                           where tab.aliquota = VarAliquotaGrade
                                                                       into VarAliquotaInput;
                                  end if;

                                  if(VarCalcBase = 1)then

                                  set VarBaseST = (new.valorTotalProduto + coalesce(new.valorFrete,0) + new.ValorIpi + coalesce(new.acrescimoValor,0)) +
                                              ((new.valorTotalProduto + coalesce(new.valorFrete,0) + new.ValorIpi + coalesce(new.acrescimoValor,0)) * (VarMargemAjustada/100));
                                  end if;
                                  
                if(VarCST != '060')then
                                  if(VarReduzBaseST = 1)then

                                       set VarIcms = ((new.valorTotalProduto + coalesce(new.valorFrete,0))*(VarAliquotaInput * (1 - (VarR1/100))))/100;
                                       set VarIcmsST = VarBaseST * (VarAliquotaOutput *(1 - (VarR1/100)))/100;
                                       set VarIcmsST = VarIcmsST - VarIcms;

                                  else

                                       set VarIcms = ((new.valorTotalProduto + coalesce(new.valorFrete,0))*(VarAliquotaInput * (1 - (VarR1/100))))/100;

                                       set VarBaseST = VarBaseST * (100 - coalesce(VarR2,0))/100;

                                       set VarIcmsST = VarBaseST * (VarAliquotaOutput/100);
                                       set VarIcmsST = VarIcmsST - VarIcms;

                                  end if;
                                  ELSE
                                    
                                       set VarIcms = 0;

                                       set VarBaseST = 0;

                                       set VarIcmsST = 0;
                                    
                end if;

                                  if(VarIcmsST < 0)then set VarIcmsST = 0; end if;
                                  if(VarNaoSTDestacada = 't' AND VarSTCalcula = 1)then 
                                      set new.baseCalculoIcmsSubstituicao = VarBaseST;
                                      set new.valorIcmsSubstituicao = VarIcmsST;
                                      set new.reducaoIcmsSt = VarR2;
                                      set new.AliquotaIcmsSt =VarAliquotaOutput;


                                  end if;

                                  if(VarDestacaSTItemEntrada = 0 AND VarNaoSTDestacada = 't' and VarTypeNota = 'd' and VarNFOrigem is null and VarNFOrigem > 0)then
                                      set new.baseCalculoIcmsSubstituicao = 0;
                                      set new.valorIcmsSubstituicao = 0;
                                      set new.reducaoIcmsSt = 0;
                                      set new.AliquotaIcmsSt =0;

                                  end if;


                                  if(VarTypeAliquota is null)then
                                    set new.aliquota = 0;
                                    set new.typeAliquota = 'i';

                                    else

                                    if (VarAliquotaOutput is not null)then

                                        set new.Aliquota = VarAliquotaOutput;

                                    end if;

                                  end if;

                                  if(VarTypeNota = 'd' AND new.chaveEntrada > 0)then
                                        set new.reducao = VarR1;
                                        else
                                        if(VarR1 is not null)then
                                              set VarR1=0;

                                        end if;
                                  end if;

                                  if(new.Aliquota <> 0)then
                                      set new.typeAliquota = 't';
                                  end if;
                        end if; 
   else
    if(VarGradeCentral = 's')then
        if(new.cfop <> 0 and new.cfop is not null)then

            set VarCFOP = new.cfop;

        end if;

        if(new.baseCalculoIcmsSubstituicao is null)then set new.baseCalculoIcmsSubstituicao = 0; end if;
        if(new.valorIcmsSubstituicao is null)then set new.valorIcmsSubstituicao = 0; end if;
        if(new.reducaoIcmsSt is null)then set new.reducaoIcmsSt = 0; end if;

        if(VarCalcBase = 1 and VarReduzBaseST = 1 and VarNaoSTDestacada = 's' and VarUFOrigem = 'MG' AND VarUFDestino = 'MG')then

            if(new.baseCalculoIcmsSubstituicao > 0) then
                set VarBaseST = new.valorTotalProduto * (1 - (coalesce(new.Reducao,0)/100));
                set new.baseCalculo = VarBaseST;
                set new.icms = new.baseCalculo * (new.Aliquota/100);
            end if;

        end if;

        if(new.baseCalculoIcmsSubstituicao is null) then

            set new.baseCalculoIcmsSubstituicao = 0;

        end if;

        if(new.valorIcmsSubstituicao is null) then
            set new.valorIcmsSubstituicao = 0;
        end if;
    else
        if(new.Aliquota <> 0)then
             set new.typeAliquota = 't';
             
             set new.baseCalculoIcmsSubstituicao = 0;
             set new.valorIcmsSubstituicao = 0;
        end if;

        
    end if;
end if; 
      if(VarGradeCentral = 's' && new.icms is null)then
        select incideIpi
                        from produto
                                    where idProduto=new.idProduto
                                                                into VarIncideIPI;
                if(VarCST != '060')then
                                                               if(VarIncideIPI = 1)then
                                                                    set VarBaseST =  (new.valorTotalProduto + coalesce(new.acrescimovalor,0) + coalesce(new.valorFrete,0)) * (1 - (coalesce(new.reducao,0)/100));
                                                                    set new.BaseCalculo = VarBaseST + new.ValorIpi;
                                                                    set new.icms = (VarBaseST + new.ValorIpi) * new.aliquota/100;
                                                                else
                                                                    set VarBaseST =  (new.valorTotalProduto + coalesce(new.acrescimovalor,0) +coalesce(new.valorFrete,0)) * (1 - (coalesce(new.reducao,0)/100));
                                                                    set new.BaseCalculo = VarBaseST;
                                                                    set new.icms = (VarBaseST) * new.aliquota/100;
                                                                end if;
                                  ELSE
                                    
                                       set VarIcms = 0;

                                       set VarBaseST = 0;

                                       set VarIcmsST = 0;
                                    
                end if;                                                                
        end if;
        if(VarTypeNota = 'd')then

        if(VarBaseStNfEntrada > 0 and VarIcmsStNfEntrada > 0 and VarAliquotaR1NfEntrada > 0)then
                set new.cstIcms = '070';
        else if(VarBaseStNfEntrada > 0 and VarIcmsStNfEntrada > 0 and VarAliquotaR1NfEntrada = 0)then
                set new.cstIcms = '010';
        else if(VarBaseStNfEntrada > 0 or VarCstIcmsNfEntrada = '060')then
                set new.baseCalculoIcmsSubstituicao=0;
                set new.valorIcmsSubstituicao=0;
                set new.reducaoIcmsSt=0;
                set new.baseCalculo=0;
                set new.reducao=0;
                set new.icms=0;
                set new.cstIcms='060';
                set new.typeAliquota='f';
        else if(VarBaseCalculoNfEntrada > 0 and VarAliquotaR1NfEntrada > 0 and VarBaseStNfEntrada = 0)then
                set new.cstIcms='020';
        else if(VarCstIcmsNfEntrada = '040')then
                set new.baseCalculoIcmsSubstituicao=0;
                set new.valorIcmsSubstituicao=0;
                set new.reducaoIcmsSt=0;
                set new.baseCalculo=0;
                set new.reducao=0;
                set new.icms=0;
                set new.cstIcms='040';
                set new.typeAliquota='i';
        else if(VarCstIcmsNfEntrada = '000') then 
                set new.cstIcms='000';
                set new.typeAliquota='t';
                        end if;
                    end if;
                end if;
            end if;
        end if;
    end if;
end if; 
                select aliquotaPis, aliquotaCofins
                                         from loja, nf
                                                    where loja.idLoja = VarOrigem and
                                                          nf.Nf = new.idNf
                                                                                into
                                                                                        VarPis,
                                                                                        VarCofins;
                                                                                        if(VarPis is null)then set VarPis=0; end if;
                                                                                        if(VarCofins is null)then set VarCofins=0; end if;

        if(VarCalcPisCofins = 1)then

            set new.basePis = new.valorTotalProduto;
            set new.baseCofins = new.valorTotalProduto;

            call conector_calc_pisCofins(new.IdProduto,VarDestino,VarOrigem,VarEmissao,'d',varPis,varCofins,varPisDeb,varCofinsDeb);
                                                                                        if(VarPis is null)then set VarPis=0; end if;
                                                                                        if(VarCofins is null)then set VarCofins=0; end if;
                                                                                        if(VarPisDeb is null)then set VarPisDeb=0; end if;
                                                                                        if(VarCofinsDeb is null)then set VarCofinsDeb=0; end if;


            if(VarTypeNota = 'e')then

                    set new.ValorPis = (VarPis*new.valorTotalProduto);
                    set new.ValorCofins = (VarCofins*new.valorTotalProduto);

                    else

                        set new.ValorPis = (VarPisDeb*new.valorTotalProduto);
                        set new.ValorCofins = (VarCofinsDeb*new.valorTotalProduto);

            end if;

        else
                    set new.basePis = 0;
                    set new.baseCofins = 0;
                    set new.ValorPis = 0;
                    set new.ValorCofins = 0;

        end if;

        if(new.icms is null)then
        select incideIpi
                        from produto
                                    where idProduto=new.idProduto
                                                                into VarIncideIPI;

                if(VarCST != '060')then
                                                                if(VarIncideIPI = 1)then
                                                                    set VarBaseST =  (new.valorTotalProduto + coalesce(new.valorFrete,0)) * (1 - (coalesce(new.reducao,0)/100));
                                                                    set new.BaseCalculo = VarBaseST + new.ValorIpi;
                                                                    set new.icms = (VarBaseST + new.ValorIpi) * new.aliquota/100;
                                                                else
                                                                    set VarBaseST =  (new.valorTotalProduto + coalesce(new.valorFrete,0)) * (1 - (coalesce(new.reducao,0)/100));
                                                                    set new.BaseCalculo = VarBaseST;
                                                                    set new.icms = (VarBaseST) * new.aliquota/100;
                                                                end if;
                                  ELSE
                                    
                                       set VarIcms = 0;

                                       set VarBaseST = 0;

                                       set VarIcmsST = 0;
                                    
                end if;                                                                
        end if;
        if(new.typeAliquota  is null)then
            set new.typeAliquota='i';
        end if;

        if(new.typeAliquota='i')then
                set new.baseCalculo=0;
                set new.reducao=0;
                set new.icms=0;
        end if;

end $$

DELIMITER ;

--
-- Definition of trigger `danfe_last_insert`
--

DROP TRIGGER /*!50030 IF EXISTS */ `danfe_last_insert`;

DELIMITER $$

CREATE DEFINER = `root`@`%` TRIGGER `danfe_last_insert` AFTER INSERT ON `nfitem` FOR EACH ROW begin
        DECLARE VarTotal numeric(15,3) default 0;
        declare VarValorTotalProduto numeric(15,3) default 0;
        declare VarComissao numeric(15,3) default 0;
        declare VarIPI numeric(15,3) default 0;
        declare VarPeso numeric(15,3) default 0;
        declare VarEmb numeric(15,3) default 0;
        declare VarVolume  int(11) default 0;
        declare VarValorFrete  numeric(11) default 0;
        declare VarItens  numeric(15,3) default 0;
        declare VarLiquido  numeric(15,3) default 0;
        declare VarBasePis  numeric(15,3) default 0;
        declare VarBaseCofins  numeric(15,3) default 0;
        declare VarValorPis  numeric(15,3) default 0;
        declare VarValorCofins  numeric(15,3) default 0;
        declare VarTotalServico  numeric(15,3) default 0;
        declare VarIdItem double default 0;
        declare VarTotalDesconto numeric(15,3);
        declare VarTotalAcrescimo numeric(15,3);

        declare VarMens varchar(100);
        declare VarMens1 varchar(100);
        declare VarMens2 varchar(100);
        declare VarMens3 varchar(100);
        declare VarMens4 varchar(100);
        declare VarMens5 varchar(100);

       select tab2.quantidade
            from nfItem tab
                inner join produto tab1 on(tab.idProduto = tab1.idProduto)
                inner join produtoEmbalagem tab2 on(tab1.idUnidade = tab2.idUnidadeMedida and tab.idproduto=tab2.idproduto and
                                                tab1.idProduto=tab2.idProduto)
                                                            where tab.idNfItem=new.idNfitem and defaultVenda='s' into VarEmb;



   select mesagem from aliquota where idAliquota = new.tributacao into VarMens;


   if (VarMens1 is null) then set VarMens1=" "; end if;
   if (VarMens2 is null) then set VarMens2=" "; end if;
   if (VarMens3 is null) then set VarMens3=" "; end if;
   if (VarMens4 is null) then set VarMens4=" "; end if;
   if (VarMens5 is null) then set VarMens5=" "; end if;

select 
        sum(tab.valorTotalProduto),
        sum(tab.valorIpi),
        sum((tab.peso*tab.quantidade)),
        count(tab.idNf),
        sum(tab.quantidade),
        sum(tab.basePis),
        sum(tab.baseCofins),
        sum(tab.valorPis),
        sum(tab.valorCofins),
        sum(descontoValor),
        sum(acrescimoValor),
        sum(tab.valorFrete),
        sum(valorTotalNota)
        from nfItem tab
            inner join produto tab1 on(tab.idProduto = tab1.idProduto)
            inner join produtoEmbalagem tab2 on(tab1.idUnidade = tab2.idUnidadeMedida and tab.idproduto=tab2.idproduto and
                                                tab1.idProduto=tab2.idProduto)
                                                            
                                                            where tab.idNf=new.idNf and defaultVenda='s'
                                                                        into 
                                                                                VarValorTotalProduto,
                                                                                VarIPI,
                                                                                VarPeso,
                                                                                VarVolume,
                                                                                VarItens,
                                                                                VarBasePis,
                                                                                VarBaseCofins,
                                                                                VarValorPis,
                                                                                VarValorCofins,
                                                                                VarTotalDesconto,
                                                                                VarTotalAcrescimo,
                                                                                VarValorFrete,VarTotal;
                                                                                
select 
        ifnull(sum(tab.valorTotalProduto),0)
        from nfItem tab
            inner join produto tab1 on(tab.idProduto = tab1.idProduto)
            inner join produtoImpostos tab2 on(tab.idProduto = tab2.idProduto)
            inner join pisCofins tab3 on(tab2.idPisCofins = tab3.idPisCofins)
                                                            where tab.idNfItem=new.idNfItem and
                                                                  tab3.servico="s"
                                                                                into VarTotalServico;

        if(VarTotal  is null)then set  VarTotal= 0; end if;
        if(VarComissao  is null)then set  VarComissao= 0; end if;
        if(VarIPI  is null)then set VarIPI = 0; end if;
        if(VarPeso  is null)then set VarPeso = 0; end if;
        if(VarVolume  is null) then set  VarVolume=0; end if;
        if(VarItens  is null)then set  VarItens= 0; end if;
        if(VarLiquido  is null)then set VarLiquido = 0; end if;
        if(VarBasePis  is null)then set VarBasePis = 0; end if;
        if(VarBaseCofins  is null)then set VarBaseCofins = 0; end if;
        if(VarValorPis  is null)then set VarValorPis = 0; end if;
        if(VarValorCofins  is null)then set VarValorCofins = 0; end if;
        if(VarTotalServico is null )then set VarTotalServico = 0; end if;
        if(VarIdItem is null)then set VarIdItem=0; end if;
        if(VarTotalAcrescimo is null)then set VarTotalAcrescimo=0; end if;
        if(VarTotalDesconto is null)then set VarTotalDesconto=0; end if;
        if(VarValorFrete is null)then set VarValorFrete=0; end if;
              
        set VarTotal = VarTotal - VarTotalServico;
     
        update nf
            set
                valorTotalProdutos=VarValorTotalProduto,
               	valorTotalNota = (VarTotal+VarValorFrete),
                valorTotalLiquido = (VarTotal + VarTotalServico),
                valorIpi=VarIPI,
                peso=VarPeso,
                volumes=VarVolume,
                Itens=VarItens,
                basePis=VarBasePis,
                baseCofins=VarBaseCofins,
                valorPis=VarValorPis,
                valorCofins=VarValorCofins,
                descontoValor=VarTotalDesconto,
                acrecismoValor=VarTotalAcrescimo,
                Frete=VarValorFrete,
                msg01=VarMens1,
                msg02=VarMens2,
                msg03=VarMens3,
                valorTotaServico=VarTotalServico,
                cfop=new.cfop
                        where nf.nf=new.IdNf;
end $$

DELIMITER ;

--
-- Definition of trigger `danfe_before_update`
--

DROP TRIGGER /*!50030 IF EXISTS */ `danfe_before_update`;

DELIMITER $$

CREATE DEFINER = `master`@`localhost` TRIGGER `danfe_before_update` BEFORE UPDATE ON `nfitem` FOR EACH ROW begin
    DECLARE VarTotalNfTemp numeric(15,3) default 0;
    declare VarValorTotalProduto numeric(15,3) default 0;
    DECLARE VarUN numeric(15,3) default 0;
    DECLARE VarDesconto numeric(15,3) default 0;
    DECLARE VarCFOP varchar(6);
    DECLARE VarAcrescimo numeric(15,3) default 0;
    DECLARE VarCalcBase smallint;
    DECLARE VarCalculoST numeric(15,3) default 0;
    DECLARE VarOrigem double;
    DECLARE VarDestino double;
    DECLARE VarParamentro int(11);
    DECLARE VarTypeNota char(1);
    DECLARE VarTypeAliquota char(1);
    DECLARE VarAux2 char(2);
    DECLARE VarUFOrigem char(2);
    DECLARE VarUFDestino char(2);
    DECLARE VarValueA numeric(15,3) default 0;
    DECLARE VarValueB numeric(15,3) default 0;
    DECLARE VarMargemAjustada numeric(15,3) default 0;
    DECLARE VarBaseST numeric(15,3) default 0;
    DECLARE VarIcmsST numeric(15,3) default 0;
    DECLARE VarIcms numeric(15,3) default 0;
    DECLARE VarAliquotaInput numeric(15,3) default 0;
    DECLARE VarAliquotaOutput numeric(15,3) default 0;
    DECLARE VarAliquotaGrade numeric(15,3) default 0;
    DECLARE VarR1 numeric(15,3) default 0;
    DECLARE VarR2 numeric(15,3) default 0;
    DECLARE VarR3 numeric(15,3) default 0;
    DECLARE VarRedEspecial numeric(15,3) default 0;
    DECLARE VarPis numeric(15,3) default 0;
    DECLARE VarCofins numeric(15,3) default 0;
    DECLARE VarPisDeb numeric(15,3) default 0;
    DECLARE VarCofinsDeb numeric(15,3) default 0;
    DECLARE VarCalcPisCofins char(1);
    DECLARE VarNfComplementar smallint;
    DECLARE VarLiquidoBruto numeric(15,3) default 0;
    DECLARE VarSTCalcula char(1);
    DECLARE VarNaoSTDestacada char(1);
    DECLARE VarSTDestacada char(1);
    DECLARE VarNFOrigem Int(11);
    DECLARE VarFornecedor Integer;
    DECLARE VarSomaIcms char(1);
    DECLARE VarSomaSt char(1);
    DECLARE VarReduzBaseST Integer;
    DECLARE VarSerie char(3);
    DECLARE VarContribuinte integer;
    DECLARE VarIncideIPI integer;
    DECLARE VarCST char(3);
    DECLARE VarParTemp numeric(15,3);
    DECLARE VarEmissao DATE;
    DECLARE VarGradeCentral char(1);
    
    DECLARE VarDestacaSTItemEntrada smallint default 0;
    DECLARE VarDestacaStNfEntrada smallint default 0;
    DECLARE VarDataNfEntrada date;
    DECLARE VarTypeAliquotaNfEntrada char(1);
    DECLARE VarAliquotaInputNfEntrada numeric(15,3) default 0;
    DECLARE VarAliquotaR1NfEntrada numeric(15,3) default 0;
    DECLARE VarBaseStNfEntrada numeric(15,3) default 0;
    DECLARE VarIcmsStNfEntrada numeric(15,3) default 0;
    DECLARE VarCstIcmsNfEntrada numeric(15,3) default 0;
    DECLARE VarBaseCalculoNfEntrada numeric(15,3) default 0;

set VarCFOP = new.cfop;
set VarCST = new.cstIcms;

select gradeFiscal
                from system
                            into VarGradeCentral;

select
    loja,idCliente,idParamentro,
                        nr_nota_entrada,serie_entrada,
                                                    cfop, emissao
                                                        from nf
                                                             where nf.nf=new.idNf
                                                                             into VarOrigem,
                                                                                  VarDestino,
                                                                                  VarParamentro,
                                                                                  VarNFOrigem,
                                                                                  VarSerie,
                                                                                  VarCFOP,
                                                                                  VarEmissao;

                                                                                  if(VarOrigem is null)then set VarOrigem=0; end if;
                                                                                  if(VarDestino is null)then set VarDestino=0; end if;
                                                                                  if(VarParamentro is null)then set VarParamentro=0; end if;
                                                                                  if(VarNFOrigem is null)then set VarNFOrigem="0" ; end if;
                                                                                  if(VarSerie is null)then set VarSerie="" ; end if;
                                                                                  if(VarCFOP is null)then set VarCFOP=""; end if;
                                                                                  if(VarEmissao is null)then set VarEmissao=now() ; end if;
select uf from cliente
                    where idCliente=VarOrigem
                                            into VarUFOrigem;
                                            if(VarUFOrigem is null)then set VarUFOrigem='MG'; end if;
select uf from cliente
                    where idCliente=VarDestino
                                            into VarUFDestino;
                                            if(VarUFDestino is null)then set VarUFDestino='MG'; end if;


select tab.forceIcms, tab.descatadaSt
                      from paramentro_fornecedor_fiscal tab
                             right join cliente tab1 on(tab.idCliente = tab1.idCliente)
                                                                       where tab1.idCliente = VarDestino
                                                                              into VarSomaIcms,VarSomaSt;
                                                                              if(VarSomaIcms is null)then set VarSomaIcms='n'; end if;
                                                                              if(VarSomaSt is null )then set VarSomaSt='n'; end if;
                                                          if(VarNFOrigem is null or VarNFOrigem = 0)then
               if(VarDestacaStNfEntrada is null)then set VarDestacaStNfEntrada='0'; end if;
               if(VarDataNfEntrada is null)then set VarDataNfEntrada = '1900-01-01'; end if;
    else
    SELECT  tab.sumSt,
            tab.entrada
        FROM entrada tab
                  where tab.idEntrada=VarNFOrigem
                                    into VarSTDestacada,
                                         VarDataNfEntrada;
  end if;
if(new.ipiValor = 0)then
  set new.ValorIpi = new.valorTotalNota * new.ipi/100;
else
  set new.ValorIpi = new.ipiValor * new.quantidade;
end if;

select
    flagCalculaBaseSt,flagParamentro,flagNFRestituicao, flagCalculaPisCofins
                                  from paramentro_faturamento
                                                      where idparamentro = VarParamentro
                                                           into VarSTCalcula, VarTypeNota, VarNfComplementar, VarCalcPisCofins; 
select
       idCst,calcRed, typeCst, calcBc
                                from cst
                                    where idCst = new.cstIcms
                                           into
                                                VarCST, VarReduzBaseST, VarNaoSTDestacada, VarCalcBase; 

if(VarNfComplementar is null)then set VarNfComplementar=0; end if;
if(VarSTCalcula is null)then set VarSTCalcula="0"; end if;
if(VarNaoSTDestacada is null)then set VarNaoSTDestacada="t"; end if;
IF(VarReduzBaseST is null) then set VarReduzBaseST=0; end if;


if(VarSTDestacada is null)then
    set VarSTDestacada = 0;
      SELECT flagParamentro
                          FROM paramentro_faturamento
                                                    where idParamentro in(select idParamentro from nf where nf.nf = new.idNf)
                                                                                                                             into VarTypeNota;
  end if;


             if(VarTypeNota = 'd')then

                                  select
                                        if(cst.typeCst = 's',if(cst.calcBc=1,1,0),0) as destacaSt,
                                        typeAliquota,
                                        tab.icmsEntrada,
                                        tab.reducaoEntrada,
                                        tab.baseCalculoSubstituicao,
                                        tab.valorIcmsSubstituicao,
                                        tab.cstIcms
                                                from
                                                    entradaItem tab
                                                    inner join cst on(tab.cstIcms=cst.idCst)
                                                                                where
                                                                                    tab.idEntradaItem=new.ChaveEntrada
                                                                                                    into
                                                                                                        VarDestacaSTItemEntrada,
                                                                                                        VarTypeAliquotaNfEntrada,
                                                                                                        VarAliquotaInputNfEntrada,
                                                                                                        VarAliquotaR1NfEntrada,
                                                                                                        VarBaseStNfEntrada,
                                                                                                        VarIcmsStNfEntrada,
                                                                                                        VarCstIcmsNfEntrada;
                                                                                                        if(VarDestacaSTItemEntrada is null)then set VarDestacaSTItemEntrada=0; end if;
                                                                                                        if(VarAliquotaInputNfEntrada is null)then set VarAliquotaInputNfEntrada=0; end if;
                                                                                                        if(VarAliquotaR1NfEntrada is null)then set VarAliquotaR1NfEntrada=0; end if;
                                                                                                        if(VarBaseStNfEntrada is null)then set VarBaseStNfEntrada=0; end if;
                                                                                                        if(VarIcmsStNfEntrada is null)then set VarIcmsStNfEntrada=0; end if;
                                                                                                        if(VarCstIcmsNfEntrada is null)then set VarCstIcmsNfEntrada = ""; end if;

   end if;

    select quantidade
                    from produtoEmbalagem
                                        where idProduto=new.idProduto and
                                                          defaultVenda='s'  into VarUN;

  if((new.desconto != 0) or (new.descontoValor != 0) or (new.acrescimo != 0) or (new.acrescimoValor != 0))then

                if(new.desconto != 0)then
                    set VarDesconto=new.priceVenda * (new.desconto/100);
                    set new.DescontoValor = (VarDesconto*new.quantidade);
                      else
                        set VarDesconto = new.DescontoValor*new.quantidade;
                end if;

        if(new.acrescimo != 0)then
                set VarAcrescimo=new.priceVenda*(new.acrescimo/100);
                set new.AcrescimoValor =VarAcrescimo*new.quantidade;
            else
                set VarAcrescimo = new.AcrescimoValor*new.quantidade;
        end if;
            set new.valorLiquido = round((new.priceVenda - VarDesconto + VarAcrescimo),3);

    else
            set new.valorLiquido = round((new.priceVenda * ((1 - (new.desconto/100)) * (1 + (new.acrescimo/100)))),2);
end if;

    if(new.ipiValor is null or new.ipiValor = 0)then
       set new.valorIPI = ((new.valorTotalProduto - VarDesconto + VarAcrescimo)*new.IPI)/100;
        ELSE
       set new.valorIPI = ((varUn*new.ipiValor)*new.quantidade);
    end if;
    if(new.ValorIpi is null)then
            set new.ValorIpi = 0;
      SELECT flagParamentro
                          FROM paramentro_faturamento
                                                    where idParamentro in(select idParamentro from nf where nf.nf = new.idNf)
                                                                                                                             into VarTypeNota;
    end if;

    if(VarTypeNota = 'v')or(VarTypeNota = 't')or(VarTypeNota = 'd')or(((VarNaoSTDestacada = 's' and VarSTCalcula = 0) and VarGradeCentral <> 's' and (VarCalcBase = 1)))then
            call conector_calc_icms(
                                        new.IdProduto,
                                        VarUFOrigem,
                                        VarDestino,
                                        VarParamentro,
                                        's',
                                        0,
					VarOrigem,
                                        VarAliquotaInput,
                                        VarR1,
                                        VarAliquotaOutput,
                                        VarR2,
                                        VarAux2,
                                        VarAux2,
                                        VarTypeAliquota,
                                        VarAux2,
                                        VarParTemp,
                                        VarParTemp,
                                        VarParTemp,
                                        VarAliquotaGrade,
                                        VarR3,
                                        VarRedEspecial,
                                        VarSTDestacada
                                   );
                        if(VarTypeAliquota = 'F')then
                                    SELECT spedNcm.MvaAjustada FROM produtoImpostos
                                                        inner join spedncm on(produtoImpostos.SpedNcm = spedNcm.idSpedNcm)
                                                                   where produtoImpostos.idProduto = new.IdProduto
                                                                               into VarMargemAjustada;

                                    if(VarAliquotaInput is null)then
                                        select aliquota.aliquota
                                                            from aliquota
                                                                        where idAliquota=VarAliquotaGrade
                                                                                into VarAliquotaInput;
                                                                                    if(VarAliquotaInput is null)then set VarAliquotaInput=0; end if;

                                    end if;
                                    if(VarR1 is null)then set VarR1 = 0; end if;

                                    

                                  if(VarMargemAjustada is null) then set VarMargemAjustada=0;
                                            else
                                                set new.Margem = VarMargemAjustada;
                                  end if;

                                  if(VarTypeNota = 'd')then

                                    if(VarNFOrigem is null and VarNFOrigem > 0)then

                                        if(typeCst = 's' and VarDestacaSTItemEntrada = 1)then 

                                                set VarCalcBase = 1;

                                        else

                                                set VarCalcBase = 0;

                                        end if;

                                    else
                                                set VarCalcBase = 0;
                                    end if;

                                  end if;

                                  if(((VarTypeNota = 'v')or(VarTypeNota = 't')or(VarTypeNota = 'd')) and (VarAliquotaInput is null))then
                                      select aliquota from aliquota tab
                                                           where tab.aliquota = VarAliquotaGrade
                                                                       into VarAliquotaInput;
                                  end if;

                                  if(VarCalcBase = 1)then

                                  set VarBaseST = (new.valorTotalProduto + coalesce(new.valorFrete,0) + new.ValorIpi + coalesce(new.acrescimoValor,0)) +
                                              ((new.valorTotalProduto + coalesce(new.valorFrete,0) + new.ValorIpi + coalesce(new.acrescimoValor,0)) * (VarMargemAjustada/100));
                                  end if;

                                  if(VarReduzBaseST = 1)then

                                       set VarIcms = ((new.valorTotalProduto + coalesce(new.valorFrete,0))*(VarAliquotaInput * (1 - (VarR1/100))))/100;
                                       set VarIcmsST = VarBaseST * (VarAliquotaOutput *(1 - (VarR1/100)))/100;
                                       set VarIcmsST = VarIcmsST - VarIcms;

                                  else

                                       set VarIcms = ((new.valorTotalProduto + coalesce(new.valorFrete,0))*(VarAliquotaInput * (1 - (VarR1/100))))/100;

                                       set VarBaseST = VarBaseST * (100 - coalesce(VarR2,0))/100;

                                       set VarIcmsST = VarBaseST * (VarAliquotaOutput/100);
                                       set VarIcmsST = VarIcmsST - VarIcms;

                                  end if;

                                  if(VarIcmsST < 0)then set VarIcmsST = 0; end if;

                                  if(VarNaoSTDestacada = 1 AND VarSTCalcula = 0)then
                                      set new.baseCalculoIcmsSubstituicao = VarBaseST;
                                      set new.valorIcmsSubstituicao = VarIcmsST;
                                      set new.reducaoIcmsSt = VarR2;
                                      set new.AliquotaIcmsSt =VarAliquotaOutput;

                                  end if;

                                  if(VarDestacaSTItemEntrada = 0 AND VarNaoSTDestacada = 0 and VarTypeNota = 'd' and VarNFOrigem is null and VarNFOrigem > 0)then
                                      set new.baseCalculoIcmsSubstituicao = 0;
                                      set new.valorIcmsSubstituicao = 0;
                                      set new.reducaoIcmsSt = 0;
                                      set new.AliquotaIcmsSt =0;

                                  end if;

                                  if(VarSomaIcms = 'n' and VarTypeAliquota = 's')then

                                    set new.aliquota = 0;
                                    set new.typeAliquota = 'i';

                                    else

                                    if (VarAliquotaOutput is not null)then
                                        set new.Aliquota = VarAliquotaOutput;
                                    end if;

                                  end if;

                                  if(VarTypeNota = 'd' AND new.chaveEntrada > 0)then
                                        set new.reducao = VarR1;
                                        else
                                        if(VarR1 is not null)then
                                            set new.reducao = VarR1;    
                                        end if;
                                  end if;

                                  if(new.Aliquota <> 0)then
                                      set new.typeAliquota = 't';
                                  end if;
                        end if; 
   else
    if(VarGradeCentral = 's')then
        if(new.cfop <> 0 and new.cfop is not null)then
        
            set VarCFOP = new.cfop;

        end if;

        if(new.baseCalculoIcmsSubstituicao is null)then set new.baseCalculoIcmsSubstituicao = 0; end if;
        if(new.valorIcmsSubstituicao is null)then set new.valorIcmsSubstituicao = 0; end if;
        if(new.reducaoIcmsSt is null)then set new.reducaoIcmsSt = 0; end if;

        if(VarCalcBase = 1 and VarReduzBaseST = 1 and VarNaoSTDestacada = 's' and VarUFOrigem = 'MG' AND VarUFDestino = 'MG')then
            if(new.baseCalculoIcmsSubstituicao > 0) then

                set VarBaseST = new.valorTotalProduto * (1 - (coalesce(new.Reducao,0)/100));
                set new.baseCalculo = VarBaseST;
                set new.icms = new.baseCalculo * (new.Aliquota/100);

            end if;

        end if;
        
        if(new.baseCalculoIcmsSubstituicao is null) then

            set new.baseCalculoIcmsSubstituicao = 0;

        end if;

        if(new.valorIcmsSubstituicao is null) then
            set new.valorIcmsSubstituicao = 0;
        end if;
    else
        if(new.Aliquota <> 0)then
             set new.typeAliquota = 't';
                          set new.baseCalculoIcmsSubstituicao = 0;
             set new.valorIcmsSubstituicao = 0;
        end if;

        
    end if;
end if; 
        select incideIpi
                        from produto
                                    where idProduto=new.idProduto
                                                                into VarIncideIPI;

                                                                if(VarIncideIPI = 1)then
                                                                    set VarBaseST =  (new.valorTotalProduto + coalesce(new.acrescimovalor,0) + coalesce(new.valorFrete,0)) * (1 - (coalesce(new.reducao,0)/100));
                                                                    set new.BaseCalculo = VarBaseST + new.ValorIpi;
                                                                    set new.icms = (VarBaseST + new.ValorIpi) * new.aliquota/100;
                                                                else
                                                                    set VarBaseST =  (new.valorTotalProduto + coalesce(new.acrescimovalor,0) +coalesce(new.valorFrete,0)) * (1 - (coalesce(new.reducao,0)/100));
                                                                    set new.BaseCalculo = VarBaseST;
                                                                    set new.icms = (VarBaseST) * new.aliquota/100;
                                                                end if;

        if(VarBaseStNfEntrada > 0 and VarIcmsStNfEntrada > 0 and VarAliquotaR1NfEntrada > 0)then
                set new.cstIcms = '070';
        else if(VarBaseStNfEntrada > 0 and VarIcmsStNfEntrada > 0 and VarAliquotaR1NfEntrada = 0)then
                set new.cstIcms = '010';
        else if(VarBaseStNfEntrada > 0 or VarCstIcmsNfEntrada = '060')then
                set new.baseCalculoIcmsSubstituicao=0;
                set new.valorIcmsSubstituicao=0;
                set new.reducaoIcmsSt=0;
                set new.baseCalculo=0;
                set new.reducao=0;
                set new.icms=0;
                set new.cstIcms='060';
                set new.typeAliquota='f';
        else if(VarBaseCalculoNfEntrada > 0 and VarAliquotaR1NfEntrada > 0 and VarBaseStNfEntrada = 0)then
                set new.cstIcms='020';
        else if(VarCstIcmsNfEntrada = '040')then
                set new.baseCalculoIcmsSubstituicao=0;
                set new.valorIcmsSubstituicao=0;
                set new.reducaoIcmsSt=0;
                set new.baseCalculo=0;
                set new.reducao=0;
                set new.icms=0;
                set new.cstIcms='040';
                set new.typeAliquota='i';
        else if(VarCstIcmsNfEntrada = '000') then                 set new.cstIcms='000';
                set new.typeAliquota='t';
                        end if;
                    end if;
                end if;
            end if;
        end if;

                select aliquotaPis, aliquotaCofins
                                         from loja, nf
                                                    where loja.idLoja = VarOrigem and
                                                          nf.Nf = new.idNf
                                                                                into
                                                                                        VarPis,
                                                                                        VarCofins;
                                                                                        if(VarPis is null)then set VarPis=0; end if;
                                                                                        if(VarCofins is null)then set VarCofins=0; end if;

        if(VarCalcPisCofins = 1)then

            set new.basePis = new.valorTotalProduto;
            set new.baseCofins = new.valorTotalProduto;

            call conector_calc_pisCofins(new.IdProduto,VarDestino,VarOrigem,VarEmissao,'d',varPis,varCofins,varPisDeb,varCofinsDeb);
                                                                                        if(VarPis is null)then set VarPis=0; end if;
                                                                                        if(VarCofins is null)then set VarCofins=0; end if;
                                                                                        if(VarPisDeb is null)then set VarPisDeb=0; end if;
                                                                                        if(VarCofinsDeb is null)then set VarCofinsDeb=0; end if;


            if(VarTypeNota = 'e')then

                    set new.ValorPis = (VarPis*new.valorTotalProduto);
                    set new.ValorCofins = (VarCofins*new.valorTotalProduto);

                    else

                        set new.ValorPis = (VarPisDeb*new.valorTotalProduto);
                        set new.ValorCofins = (VarCofinsDeb*new.valorTotalProduto);

            end if;

        else
                    set new.basePis = 0;
                    set new.baseCofins = 0;
                    set new.ValorPis = 0;
                    set new.ValorCofins = 0;
        
        end if;


        if(new.icms is null)then
        select incideIpi
                        from produto
                                    where idProduto=new.idProduto
                                                                into VarIncideIPI;

                                                                if(VarIncideIPI = 1)then
                                                                
                                                                    set VarBaseST =  (new.valorTotalProduto + coalesce(new.valorFrete,0)) * (1 - (coalesce(new.reducao,0)/100));
                                                                    set new.BaseCalculo = VarBaseST + new.ValorIpi;
                                                                    set new.icms = (VarBaseST + new.ValorIpi) * new.aliquota/100;

                                                                else

                                                                    set VarBaseST =  (new.valorTotalProduto + coalesce(new.valorFrete,0)) * (1 - (coalesce(new.reducao,0)/100));
                                                                    set new.BaseCalculo = VarBaseST;
                                                                    set new.icms = (VarBaseST) * new.aliquota/100;
                                                                    
                                                                end if;
                                                                

        end if;

        if(new.cstIcms <> '060' and new.cstIcms is not null and new.typeAliquota  <> 's' and new.Aliquota = 0)then
            set new.typeAliquota='i';
        end if;
        
        if(new.typeAliquota='i')then
                set new.baseCalculo=0;
                set new.reducao=0;
                set new.icms=0;
        end if;
    end if;
end $$

DELIMITER ;

--
-- Definition of trigger `danfe_last_update`
--

DROP TRIGGER /*!50030 IF EXISTS */ `danfe_last_update`;

DELIMITER $$

CREATE DEFINER = `master`@`localhost` TRIGGER `danfe_last_update` AFTER UPDATE ON `nfitem` FOR EACH ROW begin
        DECLARE VarTotal numeric(15,3) default 0;
        declare VarValorTotalProduto numeric(15,3) default 0;
        declare VarComissao numeric(15,3) default 0;
        declare VarIPI numeric(15,3) default 0;
        declare VarPeso numeric(15,3) default 0;
        declare VarVolume  int(11) default 0;
        declare VarValorFrete  numeric(11) default 0;
        declare VarItens  numeric(15,3) default 0;
        declare VarLiquido  numeric(15,3) default 0;
        declare VarBasePis  numeric(15,3) default 0;
        declare VarBaseCofins  numeric(15,3) default 0;
        declare VarValorPis  numeric(15,3) default 0;
        declare VarValorCofins  numeric(15,3) default 0;
        declare VarTotalServico  numeric(15,3) default 0;
        declare VarIdItem double default 0;
        declare VarTotalDesconto numeric(15,3);
        declare VarTotalAcrescimo numeric(15,3);

select 
        sum(tab.valorTotalProduto),
        sum(tab.valorIpi),
        sum((tab.peso*tab.quantidade)),
        count(tab.idNf),
        sum(tab.quantidade),
        sum(tab.basePis),
        sum(tab.baseCofins),
        sum(tab.valorPis),
        sum(tab.valorCofins),
        sum(descontoValor),
        sum(acrescimoValor),
        sum(tab.valorFrete),
        sum(valorTotalNota)
        from nfItem tab
            inner join produto tab1 on(tab.idProduto = tab1.idProduto)
            inner join produtoEmbalagem tab2 on(tab1.idUnidade = tab2.idUnidadeMedida and tab.idproduto=tab2.idproduto and
                                                tab1.idProduto=tab2.idProduto)
                                                           
                                                           where tab.idNf=new.idNf and defaultVenda='s'
                                                                        into 
                                                                                VarValorTotalProduto, 
                                                                                VarIPI,
                                                                                VarPeso,
                                                                                VarVolume,
                                                                                VarItens,
                                                                                VarBasePis,
                                                                                VarBaseCofins,
                                                                                VarValorPis,
                                                                                VarValorCofins,
                                                                                VarTotalDesconto,
                                                                                VarTotalAcrescimo,
                                                                                VarValorFrete,VarTotal;
select 
        sum(tab.valorTotalProduto)
        from nfItem tab
            inner join produto tab1 on(tab.idProduto = tab1.idProduto)
            inner join produtoImpostos tab2 on(tab.idProduto = tab2.idProduto)
            inner join pisCofins tab3 on(tab2.idPisCofins = tab3.idPisCofins)
                                                            where tab.idNfItem=old.idNfItem and
                                                                  tab3.servico='s'
                                                                                into VarTotalServico;

        if(VarTotal  is null)then set  VarTotal= 0; end if;
        if(VarComissao  is null)then set  VarComissao= 0; end if;
        if(VarIPI  is null)then set VarIPI = 0; end if;
        if(VarPeso  is null)then set VarPeso = 0; end if;
        if(VarVolume  is null) then set  VarVolume=0; end if;
        if(VarItens  is null)then set  VarItens= 0; end if;
        if(VarLiquido  is null)then set VarLiquido = 0; end if;
        if(VarBasePis  is null)then set VarBasePis = 0; end if;
        if(VarBaseCofins  is null)then set VarBaseCofins = 0; end if;
        if(VarValorPis  is null)then set VarValorPis = 0; end if;
        if(VarValorCofins  is null)then set VarValorCofins = 0; end if;
        if(VarTotalServico is null )then set VarTotalServico = 0; end if;
        if(VarIdItem is null)then set VarIdItem=0; end if;
        if(VarTotalAcrescimo is null)then set VarTotalAcrescimo=0; end if;
        if(VarTotalDesconto is null)then set VarTotalDesconto=0; end if;
        if(VarValorFrete is null)then set VarValorFrete=0; end if;
              
        set VarTotal = VarTotal - VarTotalServico;
    
        update nf
            set 
                valorTotalProdutos=VarValorTotalProduto,
               	valorTotalNota = (VarTotal+VarValorFrete),
                valorTotalLiquido = (VarTotal + VarTotalServico),
                valorIpi=VarIPI,
                peso=VarPeso,
                volumes=VarVolume,
                Itens=VarItens,
                basePis=VarBasePis,
                baseCofins=VarBaseCofins,
                valorPis=VarValorPis,
                valorCofins=VarValorCofins,
                descontoValor=VarTotalDesconto,
                acrecismoValor=VarTotalAcrescimo,
                Frete=VarValorFrete,
                cfop=new.cfop
                        where nf.nf=new.IdNf;
end $$

DELIMITER ;

--
-- Definition of trigger `danfe_last_delete`
--

DROP TRIGGER /*!50030 IF EXISTS */ `danfe_last_delete`;

DELIMITER $$

CREATE DEFINER = `master`@`localhost` TRIGGER `danfe_last_delete` AFTER DELETE ON `nfitem` FOR EACH ROW begin
        DECLARE VarTotal numeric(15,3) default 0;
        declare VarComissao numeric(15,3) default 0;
        declare VarIPI numeric(15,3) default 0;
        declare VarPeso numeric(15,3) default 0;
        declare VarVolume  int(11) default 0;
        declare VarValorFrete  int(11) default 0;
        declare VarItens  numeric(15,3) default 0;
        declare VarLiquido  numeric(15,3) default 0;
        declare VarBasePis  numeric(15,3) default 0;
        declare VarBaseCofins  numeric(15,3) default 0;
        declare VarValorPis  numeric(15,3) default 0;
        declare VarValorCofins  numeric(15,3) default 0;
        declare VarTotalServico  numeric(15,3) default 0;
        declare VarIdItem double default 0;
        declare VarValorTotalProduto numeric(15,3) default 0;

select 
        sum(tab.valorTotalProduto),
        sum(tab.valorIpi),
        sum((tab.peso*tab.quantidade)),
        count(tab.idNf),
        sum(tab.quantidade),
        sum(tab.basePis),
        sum(tab.baseCofins),
        sum(tab.valorPis),
        sum(tab.valorCofins),
        sum(tab.valorFrete),
        sum(valorTotalNota)
        from nfItem tab
            inner join produto tab1 on(tab.idProduto = tab1.idProduto)
            inner join produtoEmbalagem tab2 on(tab1.idUnidade = tab2.idUnidadeMedida)
                                                          
                                                          where tab.idNf=old.idNf
                                                                        into 
                                                                                VarValorTotalProduto,
                                                                                VarIPI,
                                                                                VarPeso,
                                                                                VarVolume,
                                                                                VarItens,
                                                                                VarBasePis,
                                                                                VarBaseCofins,
                                                                                VarValorPis,
                                                                                VarValorCofins,VarValorFrete,VarTotal;
select 
        sum(tab.valorTotalProduto)
        from nfItem tab
            inner join produto tab1 on(tab.idProduto = tab1.idProduto)
            inner join produtoImpostos tab2 on(tab.idProduto = tab2.idProduto)
            inner join pisCofins tab3 on(tab2.idPisCofins = tab3.idPisCofins)
                                                            where tab.idNfItem=old.idNfItem and
                                                                  tab3.servico='s'
                                                                                into VarTotalServico;

        if(VarTotal is null)then set  VarTotal= 0; end if;
        if(VarComissao is null)then set  VarComissao= 0; end if;
        if(VarIPI is null)then set VarIPI = 0; end if;
        if(VarPeso is null)then set VarPeso = 0; end if;
        if(VarVolume is null) then set  VarVolume=0; end if;
        if(VarItens is null)then set  VarItens= 0; end if;
        if(VarLiquido is null)then set VarLiquido = 0; end if;
        if(VarBasePis is null)then set VarBasePis = 0; end if;
        if(VarBaseCofins is null)then set VarBaseCofins = 0; end if;
        if(VarValorPis is null)then set VarValorPis = 0; end if;
        if(VarValorCofins is null)then set VarValorCofins = 0; end if;
        if(VarTotalServico is null)then set VarTotalServico = 0; end if;
        if(VarIdItem is null)then set VarIdItem=0; end if;
        
        
        set VarTotal = VarTotal - VarTotalServico;
        
        update nf
            set 
               	valorTotalNota = (VarTotal+VarValorFrete),
                valorTotalLiquido = (VarTotal + VarTotalServico),
                valorTotalProdutos=VarValorTotalProduto, 
                valorIpi=VarIPI,
                peso=VarPeso,
                volumes=VarVolume,
                Itens=VarItens,
                basePis=VarBasePis,
                baseCofins=VarBaseCofins,
                valorPis=VarValorPis,
                valorCofins=VarValorCofins,
                cfop=old.cfop
                        where nf.nf=old.IdNf;
end $$

DELIMITER ;

--
-- Definition of table `nfpgto`
--

DROP TABLE IF EXISTS `nfpgto`;
CREATE TABLE `nfpgto` (
  `idNf` double NOT NULL,
  `sequencia` int(11) NOT NULL,
  `idfinalizadora` int(11) NOT NULL,
  `valor` decimal(15,3) NOT NULL DEFAULT '0.000',
  `desconto` decimal(15,3) NOT NULL DEFAULT '0.000',
  `acrescimo` decimal(15,3) NOT NULL DEFAULT '0.000',
  `valorDesconto` decimal(15,3) NOT NULL DEFAULT '0.000',
  `valorAcrescimo` decimal(15,3) NOT NULL,
  `troco` decimal(15,3) NOT NULL,
  `card_CNPJ` varchar(16) DEFAULT NULL,
  `card_bandeira` varchar(2) DEFAULT NULL COMMENT '01=Visa\n02=Mastercard\n03=American Express\n04=Sorocred\n99=Outros',
  `card_aut` varchar(20) DEFAULT NULL,
  `funcionario` int(11) DEFAULT NULL,
  `metodo` int(11) DEFAULT NULL,
  PRIMARY KEY (`idNf`,`sequencia`,`idfinalizadora`),
  KEY `fk_nfPgto_finalizadora1` (`idfinalizadora`),
  CONSTRAINT `fk_nfPgto_finalizadora1` FOREIGN KEY (`idfinalizadora`) REFERENCES `finalizadora` (`idfinalizadora`) ON DELETE NO ACTION ON UPDATE NO ACTION,
  CONSTRAINT `fk_nfPgto_nf1` FOREIGN KEY (`idNf`) REFERENCES `nf` (`nf`) ON DELETE NO ACTION ON UPDATE NO ACTION
) ENGINE=InnoDB DEFAULT CHARSET=latin1;

--
-- Dumping data for table `nfpgto`
--

/*!40000 ALTER TABLE `nfpgto` DISABLE KEYS */;
/*!40000 ALTER TABLE `nfpgto` ENABLE KEYS */;


--
-- Definition of table `nr_pdv`
--

DROP TABLE IF EXISTS `nr_pdv`;
CREATE TABLE `nr_pdv` (
  `nr_pdv` int(11) NOT NULL,
  PRIMARY KEY (`nr_pdv`)
) ENGINE=InnoDB DEFAULT CHARSET=latin1;

--
-- Dumping data for table `nr_pdv`
--

/*!40000 ALTER TABLE `nr_pdv` DISABLE KEYS */;
/*!40000 ALTER TABLE `nr_pdv` ENABLE KEYS */;


--
-- Definition of table `numeroecf`
--

DROP TABLE IF EXISTS `numeroecf`;
CREATE TABLE `numeroecf` (
  `idloja` int(11) NOT NULL,
  `serie` varchar(40) NOT NULL,
  PRIMARY KEY (`idloja`,`serie`),
  UNIQUE KEY `serie_UNIQUE` (`serie`),
  CONSTRAINT `fk_numeroEcf_loja1` FOREIGN KEY (`idloja`) REFERENCES `loja` (`idloja`) ON DELETE NO ACTION ON UPDATE NO ACTION
) ENGINE=InnoDB DEFAULT CHARSET=latin1;

--
-- Dumping data for table `numeroecf`
--

/*!40000 ALTER TABLE `numeroecf` DISABLE KEYS */;
/*!40000 ALTER TABLE `numeroecf` ENABLE KEYS */;


--
-- Definition of table `operacaoentrada`
--

DROP TABLE IF EXISTS `operacaoentrada`;
CREATE TABLE `operacaoentrada` (
  `idoperacao` int(11) NOT NULL AUTO_INCREMENT,
  `descricao` varchar(45) NOT NULL,
  `flagCompra` smallint(6) NOT NULL DEFAULT '0' COMMENT 'Obriga receber nota somente com pedido de compra',
  `flagUpdateProduto` smallint(6) NOT NULL DEFAULT '0' COMMENT 'Atualiza cadastro de produto somente da loja de entrada',
  `flagUpdateProdutoStore` smallint(6) NOT NULL DEFAULT '0',
  `flagPriceVenda` smallint(6) NOT NULL DEFAULT '0' COMMENT 'Atualiza o preço de venda',
  `flagPriceCusto` smallint(6) NOT NULL DEFAULT '0' COMMENT 'Atualiza o preço de custo',
  `flagDivergenciaNxP` smallint(6) NOT NULL DEFAULT '0' COMMENT 'Verifica divergência entre pedido e nota',
  `flagRomaneio` smallint(6) NOT NULL DEFAULT '0' COMMENT 'Utiliza Romaneio cego',
  `flagZeraCompra` smallint(6) NOT NULL DEFAULT '0' COMMENT 'Zerar pedido de compra sem confirmação',
  `flagComparaData` smallint(6) NOT NULL DEFAULT '0' COMMENT 'Compara data de emissão versus data de entrada',
  `flagForceLojaLogon` smallint(6) NOT NULL DEFAULT '0' COMMENT 'Obriga a entrada ser realizada pela loja que o usuário esta logado',
  `flagDivergenciaNxItens` smallint(6) NOT NULL DEFAULT '0' COMMENT 'Gera consistencia entre divergencia  Total de Item X Valor Total da Nota\n',
  `percentualDivergenciaNxItens` decimal(15,3) NOT NULL DEFAULT '0.000',
  `flagDivergenciaNxFinanceiro` smallint(6) NOT NULL DEFAULT '0' COMMENT 'Verifica o total do financeiro com o total da nota',
  `flagUpdatePagar` smallint(6) NOT NULL DEFAULT '0' COMMENT 'Atualiza o conta a pagar',
  `flagForceFinanceiro` smallint(6) NOT NULL DEFAULT '1' COMMENT 'Dados Financeiros obrigatórios',
  `flagSugestaFinanceira` smallint(6) NOT NULL DEFAULT '0' COMMENT 'Utiliza sugestão de pagamento do pedido de compra',
  `flagEmissaoIgualVencer` smallint(6) NOT NULL DEFAULT '0' COMMENT 'Emissão igual ao vencimento',
  `flagLimiteComprador` smallint(6) NOT NULL DEFAULT '0' COMMENT 'Confere limite do comprador',
  `valorCompras` decimal(15,3) NOT NULL DEFAULT '0.000',
  `flagUpdateFiscal` smallint(6) NOT NULL DEFAULT '0' COMMENT 'Atualiza dados fiscais 	',
  `flagGeraPis` smallint(6) NOT NULL DEFAULT '0' COMMENT 'Gera Credito Pis\n',
  `flagGeraCofins` smallint(6) NOT NULL DEFAULT '0' COMMENT 'Gera Credito Cofins',
  `flagGeraIcms` smallint(6) NOT NULL DEFAULT '0' COMMENT 'Gera Credito Icms',
  `flagAtivaDivergencia` smallint(6) NOT NULL DEFAULT '0' COMMENT 'Verifica Divergencia',
  `divergenciaImposto` decimal(15,3) NOT NULL DEFAULT '0.000',
  `divergenciaIpi` decimal(15,3) NOT NULL DEFAULT '0.000',
  `divergenciaSubstituicao` decimal(15,3) NOT NULL DEFAULT '0.000',
  `divergenciaTotalNf` decimal(15,3) NOT NULL DEFAULT '0.000' COMMENT 'Maximo do Total da Nota %',
  `flagTypeNota` char(1) NOT NULL COMMENT 'Tipo de Nota\np - produto\nb - bonificacao\nd - despesas\nf - conhecimento de Frete\no - devolução \ns - serviço\nr - produtor rural',
  `flagInCfopSugestao` varchar(4) NOT NULL DEFAULT '0',
  `flagOnCfopSugestao` varchar(4) NOT NULL DEFAULT '0',
  `flagUpdateEstoque` smallint(6) NOT NULL DEFAULT '0',
  `status` varchar(45) NOT NULL DEFAULT 'false',
  `situacaoFiscal` varchar(2) NOT NULL DEFAULT '00',
  `modeloFiscal` varchar(3) NOT NULL DEFAULT '01',
  `produtoServico` double DEFAULT '0',
  PRIMARY KEY (`idoperacao`)
) ENGINE=InnoDB DEFAULT CHARSET=latin1;

--
-- Dumping data for table `operacaoentrada`
--

/*!40000 ALTER TABLE `operacaoentrada` DISABLE KEYS */;
/*!40000 ALTER TABLE `operacaoentrada` ENABLE KEYS */;


--
-- Definition of table `pagar`
--

DROP TABLE IF EXISTS `pagar`;
CREATE TABLE `pagar` (
  `idpagar` double NOT NULL AUTO_INCREMENT,
  `loja` int(11) NOT NULL,
  `codigo` int(11) NOT NULL,
  `emissao` date NOT NULL,
  `vencimento` date NOT NULL,
  `competencia` date DEFAULT NULL,
  `pagamento` date DEFAULT NULL,
  `dataLimite` date DEFAULT NULL,
  `dataEntrada` date NOT NULL,
  `notRecebimento` date DEFAULT NULL,
  `multaData` date DEFAULT NULL,
  `aceite` date DEFAULT NULL,
  `flagAlt` date DEFAULT NULL,
  `flagInc` date DEFAULT NULL,
  `dataImportacao` date DEFAULT NULL,
  `historico` varchar(50) DEFAULT NULL,
  `duplicata` varchar(10) DEFAULT NULL,
  `lote` double NOT NULL DEFAULT '0',
  `prazo` int(11) DEFAULT NULL,
  `banco` int(11) NOT NULL DEFAULT '0',
  `bancoDocumento` int(11) NOT NULL DEFAULT '0',
  `bancoPgto` int(11) NOT NULL DEFAULT '0',
  `contaCorrente` int(11) NOT NULL DEFAULT '0',
  `multaDias` int(11) NOT NULL DEFAULT '0',
  `protestoDias` int(11) NOT NULL DEFAULT '0',
  `usuario` int(11) NOT NULL DEFAULT '0',
  `usuarioAceite` int(11) NOT NULL DEFAULT '0',
  `usuarioBaixa` int(11) NOT NULL DEFAULT '0',
  `usuarioInclusao` int(11) NOT NULL DEFAULT '0',
  `codigoFormaPgto` int(11) NOT NULL DEFAULT '0',
  `chaveBaixaCaixa` int(11) NOT NULL DEFAULT '0',
  `baixaFinalizadora` int(11) NOT NULL DEFAULT '0',
  `baixaCaixa` int(11) NOT NULL DEFAULT '0',
  `chaveContaCorrente` int(11) NOT NULL DEFAULT '0',
  `chaveCheque` int(11) NOT NULL DEFAULT '0',
  `chaveCaixa` int(11) NOT NULL DEFAULT '0',
  `chaveEntrada` double NOT NULL DEFAULT '0',
  `pedido` double DEFAULT NULL,
  `desconto` decimal(15,3) NOT NULL DEFAULT '0.000',
  `descontoConcedido` decimal(15,3) NOT NULL DEFAULT '0.000',
  `financeiro` decimal(15,3) NOT NULL DEFAULT '0.000',
  `jurosPagos` decimal(15,3) NOT NULL DEFAULT '0.000',
  `multaValor` decimal(15,3) NOT NULL DEFAULT '0.000',
  `valor` decimal(15,3) NOT NULL DEFAULT '0.000',
  `valorNota` decimal(15,3) NOT NULL DEFAULT '0.000',
  `valorPago` decimal(15,3) NOT NULL DEFAULT '0.000',
  `abatimento` decimal(15,3) NOT NULL DEFAULT '0.000',
  `taxa` decimal(15,3) NOT NULL DEFAULT '0.000',
  `tipoDocumento` decimal(15,3) DEFAULT NULL,
  `nota` varchar(10) NOT NULL,
  `codigoCedente` varchar(20) DEFAULT NULL,
  `formaPgto` varchar(20) DEFAULT NULL,
  `nossoNumero` varchar(10) DEFAULT NULL,
  `flagPagamento` varchar(1) DEFAULT 'N',
  `numeroDocumento` varchar(10) DEFAULT NULL,
  `parcela` varchar(5) DEFAULT NULL,
  `tipoBaixa` char(2) DEFAULT NULL COMMENT '00 - BANCO\n01 - CAIXA',
  `confirmada` smallint(6) DEFAULT NULL,
  `codigoBarraBoleto` varchar(50) DEFAULT NULL,
  `observacao` blob,
  `dataProtesto` date DEFAULT NULL,
  `qttyPagar` int(11) DEFAULT NULL,
  `typePepleo` char(1) NOT NULL COMMENT 'c - cliente\nf - fornecedor\nt - transportadora',
  `dataBoleto` date DEFAULT NULL,
  `acrescimo` decimal(15,3) DEFAULT '0.000',
  `idTipoContasPagar` int(11) NOT NULL DEFAULT '0',
  PRIMARY KEY (`idpagar`),
  KEY `fk_pagar_loja1` (`loja`),
  KEY `fk_pagar_cliente1` (`codigo`),
  CONSTRAINT `fk_pagar_cliente1` FOREIGN KEY (`codigo`) REFERENCES `cliente` (`idcliente`) ON DELETE NO ACTION ON UPDATE NO ACTION,
  CONSTRAINT `fk_pagar_loja1` FOREIGN KEY (`loja`) REFERENCES `loja` (`idloja`) ON DELETE NO ACTION ON UPDATE NO ACTION
) ENGINE=InnoDB DEFAULT CHARSET=latin1;

--
-- Dumping data for table `pagar`
--

/*!40000 ALTER TABLE `pagar` DISABLE KEYS */;
/*!40000 ALTER TABLE `pagar` ENABLE KEYS */;


--
-- Definition of trigger `pagar_last_insert`
--

DROP TRIGGER /*!50030 IF EXISTS */ `pagar_last_insert`;

DELIMITER $$

CREATE DEFINER = `master`@`localhost` TRIGGER `pagar_last_insert` BEFORE INSERT ON `pagar` FOR EACH ROW begin
    
    declare VarDefaultBanco integer default 0;
    
    set new.flagAlt = now();
    set new.flagInc = now();
    
    if(new.pagamento = "0000-00-00")then set new.pagamento=null; end if;
    if(new.aceite = "0000-00-00")then set new.aceite=null; end if;
    if(new.dataLimite = "0000-00-00")then set new.dataLimite=null; end if;
    if(new.notRecebimento = "0000-00-00")then set new.notRecebimento=null; end if;
    if(new.multaData= "0000-00-00")then set new.multaData=null; end if;
    if(new.dataProtesto= "0000-00-00")then set new.dataProtesto=null; end if;
    
    select defaultBanco
                    from
                        system into
                                VarDefaultBanco;
                                
                                set new.bancoDocumento = VarDefaultBanco;
    
    if(new.qttyPagar = 1)then
            if(new.valor = 0)then
                set new.valor = new.valorNota;
        end if;
    end if;
    
end $$

DELIMITER ;

--
-- Definition of table `pais`
--

DROP TABLE IF EXISTS `pais`;
CREATE TABLE `pais` (
  `idpais` int(11) NOT NULL AUTO_INCREMENT,
  `nome` varchar(45) NOT NULL,
  `codReceita` int(11) NOT NULL,
  PRIMARY KEY (`idpais`)
) ENGINE=InnoDB DEFAULT CHARSET=latin1;

--
-- Dumping data for table `pais`
--

/*!40000 ALTER TABLE `pais` DISABLE KEYS */;
/*!40000 ALTER TABLE `pais` ENABLE KEYS */;


--
-- Definition of table `paramentro_crediario`
--

DROP TABLE IF EXISTS `paramentro_crediario`;
CREATE TABLE `paramentro_crediario` (
  `loja` int(11) NOT NULL,
  `prazoQuitacaoAfter` int(11) NOT NULL DEFAULT '30',
  `prazoQuitacaoBefore` int(11) NOT NULL DEFAULT '365',
  `indiceSingleday` decimal(15,3) NOT NULL DEFAULT '0.200',
  `indiceAtrasoMora` decimal(15,3) NOT NULL DEFAULT '2.000',
  `carenciaSingleDay` int(11) NOT NULL DEFAULT '0',
  `carenciaAtrasoMora` int(11) NOT NULL DEFAULT '0',
  `idadeSpc` int(11) NOT NULL DEFAULT '18',
  `altValuePrestacao` decimal(15,3) NOT NULL DEFAULT '1.000',
  `altValueEntrada` decimal(15,3) NOT NULL DEFAULT '1.000',
  `logicaCredito` char(1) NOT NULL DEFAULT '0' COMMENT '0 | RENDA COMPROVADA\n1 | LIMITE DE CRÉDITO',
  `limiteDiscountPrestacao` decimal(15,3) NOT NULL DEFAULT '10.000',
  `liberacaocaoCredito` char(1) NOT NULL DEFAULT 'M',
  `limiteRenda` decimal(15,3) NOT NULL DEFAULT '0.000',
  `variacaoLimite` char(1) NOT NULL DEFAULT 'S',
  `categoriaLimite` char(1) NOT NULL DEFAULT 'C',
  PRIMARY KEY (`loja`),
  KEY `fk_paramentro_crediario_loja1` (`loja`),
  CONSTRAINT `fk_paramentro_crediario_loja1` FOREIGN KEY (`loja`) REFERENCES `loja` (`idloja`) ON DELETE NO ACTION ON UPDATE NO ACTION
) ENGINE=InnoDB DEFAULT CHARSET=latin1;

--
-- Dumping data for table `paramentro_crediario`
--

/*!40000 ALTER TABLE `paramentro_crediario` DISABLE KEYS */;
/*!40000 ALTER TABLE `paramentro_crediario` ENABLE KEYS */;


--
-- Definition of table `paramentro_faturamento`
--

DROP TABLE IF EXISTS `paramentro_faturamento`;
CREATE TABLE `paramentro_faturamento` (
  `idparamentro` int(11) NOT NULL AUTO_INCREMENT,
  `descricao` varchar(30) NOT NULL,
  `status` smallint(6) NOT NULL DEFAULT '0',
  `origem` char(1) NOT NULL COMMENT 't - todos as possibilidades\nl - somente lojas\nc - somente clientes\nr - lojas caracrizadas como trocas\nf - somente fornecedores',
  `destino` char(1) NOT NULL COMMENT 't - todos as possibilidades\nl - somente lojas\nc - somente clientes\nr - lojas caracrizadas como trocas\nf - somente fornecedores',
  `flagParamentro` char(1) NOT NULL COMMENT 'v - venda\nt - transferencia\nr - troca\nd - devolução\nc - consumo\np - perda\nq -  quebra\ne - entrada\nf - franquia\ns - simples faturamento\nn - conserto\nv - serviço\nu - entrada futura\no - orçamento\nb - brinde/Doação\nx - produção',
  `forceVendedor` smallint(6) NOT NULL DEFAULT '0',
  `forceCliente` smallint(6) NOT NULL DEFAULT '0',
  `forceMetodo` smallint(6) NOT NULL DEFAULT '0',
  `forcetranspote` smallint(6) NOT NULL DEFAULT '0',
  `forceAtualizacao` smallint(6) NOT NULL DEFAULT '0' COMMENT 'Permite atualização	',
  `forcePagamento` smallint(6) NOT NULL DEFAULT '0',
  `forceAdressEntrega` smallint(6) NOT NULL DEFAULT '0',
  `estoqueDestino` char(1) DEFAULT NULL COMMENT 'e - entrada\ns - saida\nn - não movimenta',
  `estoqueOrigem` char(1) DEFAULT NULL COMMENT 'e - entrada\ns - saida\nn - não movimenta',
  `estoqueNegativo` char(1) DEFAULT NULL COMMENT 'b - bloqueia\np - permite\nm - messagem de aviso',
  `fixaOrigem` smallint(6) NOT NULL DEFAULT '0' COMMENT 'Venda \nOrçamento\nReserva\nPre Venda\n',
  `fixaDestino` smallint(6) NOT NULL DEFAULT '0',
  `origemFixa` int(11) DEFAULT NULL,
  `destinoFixo` int(11) DEFAULT NULL,
  `restrigeCliente` smallint(6) NOT NULL DEFAULT '0' COMMENT 'Verifica debito do cliente',
  `custoLiquido` smallint(6) NOT NULL DEFAULT '0' COMMENT 'Atualiza custo liquido na atualização do pedido',
  `emissaoFixa` smallint(6) NOT NULL DEFAULT '0',
  `estoqueLoja` smallint(6) NOT NULL DEFAULT '0' COMMENT 'Consulta Estoque de outras lojas',
  `atualizaComNf` smallint(6) NOT NULL DEFAULT '0' COMMENT 'Bloqueia atualizar pedido sem gerar nota fiscal',
  `origemDestinoIguais` smallint(6) NOT NULL DEFAULT '0' COMMENT 'Bloqueia destino e origem iguais',
  `exclusaoPedidos` smallint(6) NOT NULL DEFAULT '0',
  `liberaDesconto` smallint(6) NOT NULL DEFAULT '0' COMMENT 'Libera desconto acima do permitido com senha do diretor ou supervisor',
  `digitaDescontoValor` smallint(6) NOT NULL DEFAULT '0',
  `digitaDescontoPercentual` smallint(6) NOT NULL DEFAULT '0',
  `flagExpiracao` smallint(6) NOT NULL DEFAULT '0',
  `diasEspiracao` smallint(6) NOT NULL DEFAULT '1',
  `flagPermiteAtualizar` smallint(6) NOT NULL DEFAULT '1',
  `flagAlteraLoja` smallint(6) NOT NULL DEFAULT '0',
  `flagDesconto` char(1) NOT NULL DEFAULT 'c' COMMENT 'c - configuração global\ns - setor\nf - faturamento\np - pdv\n',
  `margemVendedor` decimal(5,3) NOT NULL DEFAULT '0.000' COMMENT 'desconto',
  `margemGerente` decimal(5,3) NOT NULL DEFAULT '0.000' COMMENT 'desconto',
  `margemDiretor` decimal(5,3) NOT NULL DEFAULT '0.000' COMMENT 'desconto',
  `margemSupervisor` decimal(5,3) NOT NULL DEFAULT '0.000' COMMENT 'desconto',
  `estoqueDestinoKit` char(1) DEFAULT NULL COMMENT 'p - movimento produto principal\ni - itens do kit\n',
  `estoqueOrigemKit` char(1) DEFAULT NULL COMMENT 'p - movimento produto principal\ni - itens do kit\n',
  `flagEstoqueFutura` smallint(6) NOT NULL DEFAULT '0' COMMENT 'Verifica o estoque das entregar futuras',
  `flagDetalhesItem` smallint(6) NOT NULL DEFAULT '0' COMMENT 'Mostra detalhes do Item na sua inclusão',
  `idHistorico` int(11) DEFAULT NULL COMMENT 'Historico\nMovimentação de estoque',
  `restrigeFinanceiro` smallint(6) NOT NULL DEFAULT '0' COMMENT 'Verifica o total do financeiro',
  `restrigeAltpgto` smallint(6) NOT NULL DEFAULT '0' COMMENT 'Bloqueia alteração na condição de pagamento',
  `limiteCredito` smallint(6) NOT NULL DEFAULT '0' COMMENT 'Bloqueia alteração na condição de pagamento',
  `carenciaAprazo` smallint(6) NOT NULL DEFAULT '0' COMMENT 'Carência para vendas a prazo',
  `flagTroco` smallint(6) NOT NULL DEFAULT '0' COMMENT 'Permite troco',
  `geraReceber` smallint(6) NOT NULL DEFAULT '0' COMMENT 'Grava no contas a receber',
  `geraCrediario` smallint(6) NOT NULL DEFAULT '0' COMMENT 'Grava no crediário',
  `geraPagarDestino` smallint(6) NOT NULL DEFAULT '0' COMMENT 'Gera Contas a Pagar para o destino',
  `geraPargarOrigem` smallint(6) NOT NULL DEFAULT '0' COMMENT 'Gera Contas a Pagar para o origem\n',
  `geraCheque` smallint(6) NOT NULL DEFAULT '0' COMMENT 'Em cheques a receber',
  `flagAlteraPreco` smallint(6) NOT NULL DEFAULT '0' COMMENT 'Altera preço',
  `flagAlteraComissao` smallint(6) NOT NULL DEFAULT '0' COMMENT 'Altera comissão',
  `flagAlteraDesconto` smallint(6) NOT NULL DEFAULT '0' COMMENT 'Altera desconto',
  `flagAlteraIpi` smallint(6) NOT NULL DEFAULT '0' COMMENT 'Altera IPI',
  `flagAlteraVendedor` smallint(6) NOT NULL DEFAULT '0' COMMENT 'Altera vendedor',
  `flagQttyZerada` smallint(6) NOT NULL DEFAULT '0' COMMENT 'Item com quantidade zerada',
  `flagItemZerada` smallint(6) NOT NULL DEFAULT '0' COMMENT 'Item com preço zerado',
  `flagEntrada` smallint(6) NOT NULL DEFAULT '0' COMMENT 'Alterar entrada',
  `flagExplodeKit` smallint(6) NOT NULL DEFAULT '0' COMMENT 'Explode itens do Kit',
  `flagMaxItemPedido` smallint(6) NOT NULL DEFAULT '0' COMMENT 'Maximo de itens para o pedido',
  `numeroMaxItem` int(11) NOT NULL DEFAULT '0',
  `flagRepetItem` smallint(6) NOT NULL DEFAULT '0' COMMENT 'Repetir Item',
  `flagAltExcIncItem` smallint(6) NOT NULL DEFAULT '0' COMMENT 'Alteração, exclusão e inclusão do item',
  `flagBloquearItem` smallint(6) NOT NULL DEFAULT '0' COMMENT 'Inclusão do item',
  `flagEanDefault` char(1) NOT NULL DEFAULT 'v' COMMENT 't - todos\nc - compra\nv - venda\nt - transferencia\n',
  `bloqueiaQuantidade` smallint(6) NOT NULL DEFAULT '0' COMMENT 'Digitação de quantidade',
  `flagRestrigeCliente` char(1) NOT NULL DEFAULT 'p' COMMENT 'p - Pemitir Cliente\na - Bloqueia no automatico o cliente\nm - Bloqueia no manualmente o cliente\ns - Ver que o cliente esta inadimplente mas somente avisa o consultor\n',
  `flagClienteAvista` smallint(6) NOT NULL DEFAULT '0' COMMENT 'Somente venda á vista para clientes inadimplentes',
  `flagClienteDocCorretos` smallint(6) NOT NULL DEFAULT '0' COMMENT ' Venda somente clientes CPF/CNPJ correto',
  `flagClienteEmail` smallint(6) NOT NULL DEFAULT '0' COMMENT 'Email obrigatorio',
  `flagTypePrice` char(1) NOT NULL DEFAULT 'v' COMMENT 'V - venda\nc - custo liquido\nm - medio\nf - fabrica',
  `flagAtualizaMedio` smallint(6) NOT NULL DEFAULT '0' COMMENT 'Atualiza Custo Médio',
  `flagRatearDesconto` smallint(6) NOT NULL DEFAULT '0' COMMENT 'Reatar desconto/acréscimo no itens',
  `flagVerificaPriceCusto` smallint(6) NOT NULL DEFAULT '0' COMMENT 'Verificar se o preço esta abaixo do custo',
  `flagComissaoProduto` smallint(6) NOT NULL DEFAULT '0' COMMENT 'Valor da comissão por produto',
  `flagComissaoIgnora` smallint(6) NOT NULL DEFAULT '0' COMMENT 'Ignora comissão em produtos vendido abaixo do custo',
  `flagComissaoFaturamento` smallint(6) NOT NULL DEFAULT '0' COMMENT 'Controla comissão pelo faturamento',
  `flagComissaoBaixa` smallint(6) NOT NULL DEFAULT '0' COMMENT 'Controla comissão pelo baixa do produto',
  `idTable_Codigo` int(11) NOT NULL,
  `modNotaFiscal` varchar(3) NOT NULL DEFAULT '01',
  `idSituacaoFiscal` varchar(2) NOT NULL DEFAULT '00',
  `idfuncionario` int(11) DEFAULT NULL,
  `cfop1` varchar(6) NOT NULL,
  `cfop2` varchar(6) NOT NULL,
  `cfop3` varchar(6) NOT NULL,
  `cfop4` varchar(7) NOT NULL,
  `flagCalculaIcms` smallint(6) NOT NULL DEFAULT '0',
  `flagCalculaPisCofins` smallint(6) NOT NULL DEFAULT '0',
  `flagCalculaIr` smallint(6) NOT NULL DEFAULT '0',
  `flagCalculaBaseSt` smallint(6) NOT NULL DEFAULT '0',
  `flagCalculoServicoProduto` smallint(6) NOT NULL DEFAULT '0',
  `flagCalculoServico` smallint(6) NOT NULL DEFAULT '0',
  `flagCalculaIpi` smallint(6) NOT NULL DEFAULT '0',
  `flagNFRestituicao` smallint(6) NOT NULL DEFAULT '0',
  `flagForceNfOrigem` smallint(6) NOT NULL DEFAULT '0',
  `flagTypeFrete` char(3) NOT NULL DEFAULT '9',
  `flagRetemPisCofins` smallint(6) NOT NULL DEFAULT '0',
  `flagAbateFunrural` smallint(6) NOT NULL DEFAULT '0',
  `flagPgtoDevolucao` smallint(6) NOT NULL DEFAULT '0',
  `idFinalizadora` int(11) NOT NULL DEFAULT '1',
  `idFinalizadoraPadrao` int(11) DEFAULT NULL,
  `idMetodoPadrao` int(11) DEFAULT NULL,
  `margemTransf` decimal(15,3) NOT NULL DEFAULT '0.000',
  `idOperacaoEntrada` int(11) DEFAULT NULL,
  `flagFormaFinalizacao` varchar(1) DEFAULT 'D' COMMENT 'D - DAV\nP -  PRE VENDA',
  `flagNota` varchar(1) DEFAULT 'S',
  PRIMARY KEY (`idparamentro`),
  KEY `fk_paramentro_faturamento_table_codigo1` (`modNotaFiscal`,`idTable_Codigo`)
) ENGINE=InnoDB DEFAULT CHARSET=latin1;

--
-- Dumping data for table `paramentro_faturamento`
--

/*!40000 ALTER TABLE `paramentro_faturamento` DISABLE KEYS */;
/*!40000 ALTER TABLE `paramentro_faturamento` ENABLE KEYS */;


--
-- Definition of table `paramentro_fornecedor_comercial`
--

DROP TABLE IF EXISTS `paramentro_fornecedor_comercial`;
CREATE TABLE `paramentro_fornecedor_comercial` (
  `idComercial` double NOT NULL AUTO_INCREMENT,
  `idcliente` int(11) NOT NULL,
  `visita` smallint(6) DEFAULT NULL COMMENT 'dia da semana para visita - controle de agenda',
  `analiseCompra` varchar(1) NOT NULL DEFAULT 'g' COMMENT 'g - giro\ne - estoque minimo\n',
  `minVolume` int(11) NOT NULL DEFAULT '0' COMMENT 'Pedido Minimo em volumes\n',
  `valueBay` decimal(15,3) NOT NULL DEFAULT '0.000' COMMENT 'valor minimo de compra\n',
  `comprador` int(11) DEFAULT NULL,
  `prazoEntrega` int(11) NOT NULL DEFAULT '0',
  `formaPgto` int(11) NOT NULL,
  `banco` int(11) NOT NULL,
  `agencia` varchar(10) DEFAULT NULL,
  `contaCorrente` varchar(15) DEFAULT NULL,
  PRIMARY KEY (`idComercial`,`idcliente`),
  KEY `fk_paramentro_fornecedor_comercial_cliente2` (`idcliente`),
  CONSTRAINT `fk_paramentro_fornecedor_comercial_cliente2` FOREIGN KEY (`idcliente`) REFERENCES `cliente` (`idcliente`) ON DELETE NO ACTION ON UPDATE NO ACTION
) ENGINE=InnoDB DEFAULT CHARSET=latin1;

--
-- Dumping data for table `paramentro_fornecedor_comercial`
--

/*!40000 ALTER TABLE `paramentro_fornecedor_comercial` DISABLE KEYS */;
/*!40000 ALTER TABLE `paramentro_fornecedor_comercial` ENABLE KEYS */;


--
-- Definition of table `paramentro_fornecedor_fiscal`
--

DROP TABLE IF EXISTS `paramentro_fornecedor_fiscal`;
CREATE TABLE `paramentro_fornecedor_fiscal` (
  `idfiscal` double NOT NULL AUTO_INCREMENT,
  `idcliente` int(11) NOT NULL,
  `forceIcms` char(1) NOT NULL DEFAULT 'n',
  `forcePis` char(1) NOT NULL DEFAULT 'n',
  `forceCofins` char(1) NOT NULL DEFAULT 'n',
  `descatadaSt` char(1) NOT NULL DEFAULT 'n',
  `typeGrade` char(1) DEFAULT NULL COMMENT 'd - distribuidor\nf - fabricante',
  PRIMARY KEY (`idfiscal`,`idcliente`),
  KEY `fk_paramentro_fornecedor_fiscal_cliente1` (`idcliente`),
  CONSTRAINT `fk_paramentro_fornecedor_fiscal_cliente1` FOREIGN KEY (`idcliente`) REFERENCES `cliente` (`idcliente`) ON DELETE NO ACTION ON UPDATE NO ACTION
) ENGINE=InnoDB DEFAULT CHARSET=latin1;

--
-- Dumping data for table `paramentro_fornecedor_fiscal`
--

/*!40000 ALTER TABLE `paramentro_fornecedor_fiscal` DISABLE KEYS */;
/*!40000 ALTER TABLE `paramentro_fornecedor_fiscal` ENABLE KEYS */;


--
-- Definition of table `paramentro_fornecedor_informacao`
--

DROP TABLE IF EXISTS `paramentro_fornecedor_informacao`;
CREATE TABLE `paramentro_fornecedor_informacao` (
  `idInformacao` double NOT NULL AUTO_INCREMENT,
  `idcliente` int(11) NOT NULL,
  `typeTroca` char(1) NOT NULL DEFAULT 's' COMMENT 'd - duplicata\nn - desconto em nota fiscal\nm - mercadoria\nb- bonificacao\nc credito em nota fiscal\ns - troca\n\n\n',
  `typeFrete` char(1) NOT NULL DEFAULT '9' COMMENT 'c - CIF\r\nf - FOB\r\no - OUTROS\r\ns - SEM FRETE',
  `porcentagemFrete` decimal(15,3) NOT NULL DEFAULT '0.000',
  `lastVisita` date DEFAULT NULL,
  `nextVisita` date DEFAULT NULL,
  `devPagar` smallint(6) NOT NULL DEFAULT '0' COMMENT 'Abate devolucao no contas a pagar',
  `bloquearEntregaFiscal` smallint(6) NOT NULL DEFAULT '0' COMMENT 'Bloquear recebimento sem dados fiscais\n',
  `representante` int(11) NOT NULL COMMENT 'contato responsavel junto ao empresa',
  `idoperacao` int(11) DEFAULT NULL COMMENT 'sugerir operacao na entrada de nota',
  `forceCompra` smallint(6) NOT NULL DEFAULT '0' COMMENT 'não receber nota sem realizar uma compra',
  `nameSugestao` varchar(15) DEFAULT NULL COMMENT 'abreviação ou apelido para participar de uma concorrencia',
  `passwdSugestao` varchar(45) DEFAULT NULL COMMENT 'senha para participar de uma concorrencia',
  `observacao` varchar(200) DEFAULT NULL,
  `typeFornecedor` varchar(1) NOT NULL COMMENT 'f - fabricante\na - atacado\np - prestador de serviço\nm - micro empresa\nd - distribuidor\n',
  PRIMARY KEY (`idInformacao`,`idcliente`),
  KEY `fk_paramentro_fornecedor_comercial_cliente1` (`idcliente`),
  CONSTRAINT `fk_paramentro_fornecedor_comercial_cliente1` FOREIGN KEY (`idcliente`) REFERENCES `cliente` (`idcliente`) ON DELETE NO ACTION ON UPDATE NO ACTION
) ENGINE=InnoDB DEFAULT CHARSET=latin1;

--
-- Dumping data for table `paramentro_fornecedor_informacao`
--

/*!40000 ALTER TABLE `paramentro_fornecedor_informacao` DISABLE KEYS */;
/*!40000 ALTER TABLE `paramentro_fornecedor_informacao` ENABLE KEYS */;


--
-- Definition of table `parcela`
--

DROP TABLE IF EXISTS `parcela`;
CREATE TABLE `parcela` (
  `idparcela` double NOT NULL AUTO_INCREMENT,
  `idcrediario` double NOT NULL,
  `idloja` int(11) NOT NULL,
  `nr_parcela` int(11) NOT NULL DEFAULT '0' COMMENT '0 - Parcela Entrada',
  `idterminal` int(11) NOT NULL,
  `funcionario` int(11) NOT NULL,
  `vencimento` date NOT NULL,
  `pagamento` varchar(8) NOT NULL DEFAULT '00000000',
  `status` char(1) NOT NULL,
  `observacao` varchar(30) DEFAULT NULL,
  `valorFinanceiro` decimal(15,3) NOT NULL DEFAULT '0.000',
  `valorPago` decimal(15,3) NOT NULL DEFAULT '0.000',
  `prazo` int(11) NOT NULL DEFAULT '0',
  `acrescimo` decimal(15,3) NOT NULL DEFAULT '0.000',
  `desconto` decimal(15,3) NOT NULL DEFAULT '0.000',
  PRIMARY KEY (`idparcela`,`idcrediario`,`idloja`,`nr_parcela`),
  KEY `fk_parcela_crediario1` (`idcrediario`,`idloja`),
  KEY `fk_parcela_terminal1` (`idterminal`),
  CONSTRAINT `fk_parcela_crediario1` FOREIGN KEY (`idcrediario`, `idloja`) REFERENCES `crediario` (`idcrediario`, `idloja`) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT `fk_parcela_terminal1` FOREIGN KEY (`idterminal`) REFERENCES `terminal` (`idterminal`) ON DELETE NO ACTION ON UPDATE NO ACTION
) ENGINE=InnoDB DEFAULT CHARSET=latin1;

--
-- Dumping data for table `parcela`
--

/*!40000 ALTER TABLE `parcela` DISABLE KEYS */;
/*!40000 ALTER TABLE `parcela` ENABLE KEYS */;


--
-- Definition of trigger `parcela_last_insert`
--

DROP TRIGGER /*!50030 IF EXISTS */ `parcela_last_insert`;

DELIMITER $$

CREATE DEFINER = `master`@`localhost` TRIGGER `parcela_last_insert` AFTER INSERT ON `parcela` FOR EACH ROW begin
  declare contador int default 0;
  
        select count(nr_parcela) as  parcelamento 
                                                from parcela 
                                                        where idCrediario=new.idCrediario
                                                                            into contador;                                                                                
                                                                            if(contador is null)then set contador=0; end if;
        update crediario set parcelamento = contador where idCrediario = new.idCrediario;
end $$

DELIMITER ;

--
-- Definition of trigger `parcelaCrediario_before_update`
--

DROP TRIGGER /*!50030 IF EXISTS */ `parcelaCrediario_before_update`;

DELIMITER $$

CREATE DEFINER = `master`@`localhost` TRIGGER `parcelaCrediario_before_update` BEFORE UPDATE ON `parcela` FOR EACH ROW begin

	declare v0 int default 1;
  declare VarReferencia decimal(15,3);
  declare VarEncargos decimal(15,3);
  declare VarValueTotalParcelas decimal(15,3) default 0;
  declare VarValueTotalCrediario decimal(15,3) default 0;
  declare VarValueTotalRepositorio decimal(15,3) default 0;
  declare VarNewEncargos decimal(15,3) default 0;
  declare VarEntrada decimal(15,3) default 0;
  declare VarTotalCrediario decimal(15,3) default 0;
  declare countParcelas int default 0;

select count(nr_parcela)
                    from parcela
                                where idCrediario=new.idCrediario and nr_parcela != 0
                                                    into countParcelas;
                                                    if(countParcelas is null)then set countParcelas = 0; end if;


select total,encargos,entrada
                        from crediario
                                    where idCrediario=new.idCrediario
                                                        into VarReferencia,
                                                             VarEncargos,
                                                             VarEntrada;
                                                             if(VarReferencia is null)then set VarTotalCrediario=0; end if;
                                                             if(VarEncargos is null)then set VarEncargos =0; end if;
                                                             if(VarEntrada is null)then set VarEntrada =0; end if;
  set VarTotalCrediario = VarReferencia + VarEncargos;

select round(sum(valorFinanceiro),2) as totalParcelas
                                                        from parcela
                                                                    where idCrediario=new.idCrediario and nr_parcela != 0
                                                                                        into VarValueTotalParcelas;
                                                                                        if(VarValueTotalParcelas is null)then set VarValueTotalParcelas=0; end if;
select round(sum(total+encargos),2) as totalCrediario
                                                        from crediario
                                                                    where idCrediario=new.idCrediario
                                                                                        into VarValueTotalCrediario;
                                                                                        if(VarValueTotalCrediario is null)then set VarValueTotalCrediario=0; end if;


IF(old.valorFinanceiro != new.valorFinanceiro)THEN
  if(new.status != "5")then

  if(VarValueTotalParcelas < VarValueTotalCrediario)then

    set new.valorFinanceiro = old.valorFinanceiro;     set new.valorPago = old.valorPago;
    set new.status = old.status;

  else
      if(VarValueTotalParcelas > VarTotalCrediario)then

        set VarNewEncargos = (VarValueTotalParcelas - VarReferencia);
        update  crediario set encargos=VarNewEncargos where idCrediario=new.idCrediario;

      end if;

      if(VarValueTotalParcelas <= VarTotalCrediario)then
        set new.valorFinanceiro = old.valorFinanceiro;
      end if;
end if;
end if;
END IF;

end $$

DELIMITER ;

--
-- Definition of trigger `parcelaCrediario_last_update`
--

DROP TRIGGER /*!50030 IF EXISTS */ `parcelaCrediario_last_update`;

DELIMITER $$

CREATE DEFINER = `master`@`localhost` TRIGGER `parcelaCrediario_last_update` AFTER UPDATE ON `parcela` FOR EACH ROW begin
  declare VarTotalParcelaNegociada decimal(15,3) default 0;
  declare VarTotalParcelaPaga decimal(15,3) default 0;
  declare VarTotalCrediarioLiq decimal(15,3) default 0;
  declare VarParcela int default 0;
  declare VarParcelamento int default 0;

begin
        select sum(valorFinanceiro),sum(valorPago)
                                from parcela
                                          where idcrediario=new.idCrediario
                                                                  into VarTotalParcelaNegociada,VarTotalParcelaPaga;

        if(new.nr_parcela > 0)then
        select (valueEntry+encargos+total)
                                from crediario
                                          where idCrediario=new.idCrediario
                                                                  into VarTotalCrediarioLiq;
                                                                  else
                                                                          select (valueEntry)
                                                                                                from crediario
                                                                                                            where idCrediario=new.idCrediario
                                                                                                                        into VarTotalCrediarioLiq;
        end if;

        select count(status)
                          from parcela
                                    where idCrediario=new.idCrediario and status=1
                                                                  into VarParcela;

        select parcelamento
                          from crediario
                                    where idCrediario=new.idCrediario
                                                                 into VarParcelamento;
    if(VarParcelamento = VarParcela)then
           
                       update crediario set status=1 where idCrediario=new.idCrediario;
                    else
                        update crediario set status=0 where idCrediario=new.idCrediario;
                    end if;

end;

end $$

DELIMITER ;

--
-- Definition of table `pedido`
--

DROP TABLE IF EXISTS `pedido`;
CREATE TABLE `pedido` (
  `idpedido` double NOT NULL AUTO_INCREMENT,
  `idloja` int(11) NOT NULL,
  `idfuncionario` int(11) NOT NULL,
  `idcliente` int(11) NOT NULL,
  `pdv` int(11) NOT NULL,
  `idparamentro` int(11) NOT NULL,
  `idmetodo` int(11) NOT NULL,
  `status` int(11) NOT NULL DEFAULT '1',
  `usuario` int(11) NOT NULL,
  `emissao` date NOT NULL,
  `expiracao` date NOT NULL,
  `discount` decimal(15,3) NOT NULL DEFAULT '0.000',
  `valorLiquido` decimal(15,3) NOT NULL DEFAULT '0.000',
  `valorTotal` decimal(15,3) NOT NULL DEFAULT '0.000',
  `qttyItens` decimal(15,3) NOT NULL DEFAULT '0.000',
  `frete` decimal(15,3) NOT NULL DEFAULT '0.000',
  `observacao` varchar(100) NOT NULL,
  `geraEntrega` smallint(6) NOT NULL DEFAULT '0',
  `geraMontagem` smallint(6) NOT NULL DEFAULT '0',
  `sinal` varchar(8) NOT NULL DEFAULT 'verde' COMMENT 'fator de zona crítica.\nvermelho - em uso, ou seja, travado\nverde - liberado para um somente usá-lo',
  `flagCaixa` smallint(6) NOT NULL DEFAULT '0',
  `final` smallint(6) NOT NULL DEFAULT '0' COMMENT '0 - aberto\n1 - emitido\n2 - faturado\n4 - finalizado\n5 - cancelado',
  `impresso` smallint(6) NOT NULL DEFAULT '0' COMMENT '0 nenhuma vez\n1 primeira e mais vezes\n1++ numero de vezes emitidas',
  `entrada` date DEFAULT NULL,
  `condicao` int(11) DEFAULT NULL,
  `cripto` varchar(600) DEFAULT NULL,
  `flagFormaFinalizacao` varchar(1) DEFAULT 'D' COMMENT 'D - DAV''S\nP - PRE VENDA',
  `sequenciaDav` int(10) DEFAULT NULL,
  `sequenciaPreVenda` int(10) DEFAULT NULL,
  `numeroCupom` double DEFAULT NULL,
  PRIMARY KEY (`idpedido`,`idloja`),
  UNIQUE KEY `sequenciaDav_UNIQUE` (`sequenciaDav`),
  UNIQUE KEY `sequenciaPreVenda_UNIQUE` (`sequenciaPreVenda`),
  KEY `fk_pedido_loja1` (`idloja`) USING BTREE,
  KEY `fk_pedido_usuario1` (`usuario`),
  KEY `fk_pedido_paramentro_faturamento1` (`idparamentro`),
  KEY `fk_pedido_terminal1` (`pdv`),
  KEY `fk_pedido_statusPedido1` (`status`),
  CONSTRAINT `fk_pedido_loja1` FOREIGN KEY (`idloja`) REFERENCES `loja` (`idloja`) ON DELETE NO ACTION ON UPDATE NO ACTION,
  CONSTRAINT `fk_pedido_paramentro_faturamento1` FOREIGN KEY (`idparamentro`) REFERENCES `paramentro_faturamento` (`idparamentro`) ON DELETE NO ACTION ON UPDATE NO ACTION,
  CONSTRAINT `fk_pedido_statusPedido1` FOREIGN KEY (`status`) REFERENCES `statuspedido` (`idStatusPedido`) ON DELETE NO ACTION ON UPDATE NO ACTION,
  CONSTRAINT `fk_pedido_terminal1` FOREIGN KEY (`pdv`) REFERENCES `terminal` (`idterminal`) ON DELETE NO ACTION ON UPDATE NO ACTION,
  CONSTRAINT `fk_pedido_usuario1` FOREIGN KEY (`usuario`) REFERENCES `usuario` (`idusuario`) ON DELETE NO ACTION ON UPDATE NO ACTION
) ENGINE=InnoDB DEFAULT CHARSET=latin1;

--
-- Dumping data for table `pedido`
--

/*!40000 ALTER TABLE `pedido` DISABLE KEYS */;
/*!40000 ALTER TABLE `pedido` ENABLE KEYS */;


--
-- Definition of trigger `pedido_firt_insert`
--

DROP TRIGGER /*!50030 IF EXISTS */ `pedido_firt_insert`;

DELIMITER $$

CREATE DEFINER = `master`@`localhost` TRIGGER `pedido_firt_insert` BEFORE INSERT ON `pedido` FOR EACH ROW begin
    declare seq int(10) default 0;
    if(new.flagFormaFinalizacao = "D")then
    select ifnull(max(sequenciaDav),0) from pedido into seq;
        set new.sequenciaDav= seq + 1;
            else
                select ifnull(max(sequenciaPreVenda),0) from pedido into seq;
                set new.sequenciaPreVenda=seq + 1;
  end if;
end $$

DELIMITER ;

--
-- Definition of trigger `pedido_firt_update`
--

DROP TRIGGER /*!50030 IF EXISTS */ `pedido_firt_update`;

DELIMITER $$

CREATE DEFINER = `master`@`localhost` TRIGGER `pedido_firt_update` BEFORE UPDATE ON `pedido` FOR EACH ROW begin
        DECLARE done1 INT DEFAULT FALSE; 
        Declare Varidpedido double;
        Declare Varidloja double;
        Declare VaridProduto double;
        Declare Varsequencial int;
        Declare Varidfuncionario int;
        Declare Varsituacao char(1);
        Declare Varquantidade decimal(15,3);
        Declare VarpriceLiquido decimal(15,3);
        Declare Varprice decimal(15,3);
        Declare VarvalorDiscount  decimal(15,3);
        Declare VarpriceFull  decimal(15,3);
        Declare VaridprodutoEmbalagem int;
        Declare Varbarra double;
        Declare VaridunidadeMedida int;
        declare VarSituacaoTributaria VARCHAR(1);
        declare VarAliquota Decimal(15,3);
        declare VarNomePdv varchar(30);
        declare vFinalizadora int default 0;
        declare recebivel bool default false;
        DECLARE done INT DEFAULT FALSE;     

  
  DECLARE basicFonte CURSOR for select
      idFinalizadora
        from
            pedidoFinanceiro
                where idPedido=new.idPedido and idLoja=new.idLoja;
 DECLARE CONTINUE HANDLER FOR NOT FOUND SET done = TRUE;
     open basicFonte;

    read_loop: LOOP
                          fetch basicFonte  into vFinalizadora;
                          
   if(vFinalizadora = 3 )then set recebivel=true; end if;
   if(vFinalizadora = 7 )then set recebivel=true; end if;
   if(vFinalizadora = 8 )then set recebivel=true; end if;

   if(recebivel = false) then
    if((new.final = 0)) then
     if((select reserva_status(old.IdPedido,old.IdLoja)) = 0) then
          set new.status=3;       else
          set new.status=4;     end if;
   end if;
  end if;
        if(old.Idmetodo != new.Idmetodo)then 
        delete from pedidoFinanceiro where idPedido=new.IdPedido and idLoja=new.Idloja;
      end if;
                    IF done THEN
                        LEAVE read_loop;
                    END IF;
   end loop;
 close basicFonte; 
                    
    begin
             DECLARE basicFonte CURSOR for select
                                            `pedidoitens`.`idpedido`,
                                            `pedidoitens`.`idloja`,
                                            `pedidoitens`.`idProduto`,
                                            `pedidoitens`.`sequencial`,
                                            `pedidoitens`.`idfuncionario`,
                                            `pedidoitens`.`situacao`,
                                            `pedidoitens`.`quantidade`,
                                            `pedidoitens`.`priceLiquido`,
                                            `pedidoitens`.`price`,
                                            `pedidoitens`.`valorDiscount`,
                                            `pedidoitens`.`priceFull`,
                                            `pedidoitens`.`idEan`,
                                            `pedidoitens`.`codigobarra`,
                                            `pedidoitens`.`idunidadeMedida`
                                        FROM `conector`.`pedidoitens` where idPedido= new.idPedido;

                                        DECLARE CONTINUE HANDLER FOR NOT FOUND SET done1 = TRUE;
    open basicFonte;

    read_loop: LOOP
                          fetch basicFonte into
                                            Varidpedido,
                                            Varidloja,
                                            VaridProduto,
                                            Varsequencial,
                                            Varidfuncionario,
                                            Varsituacao,
                                            Varquantidade,
                                            VarpriceLiquido,
                                            Varprice,
                                            VarvalorDiscount,
                                            VarpriceFull,
                                            VaridprodutoEmbalagem,
                                            Varbarra,
                                            VaridunidadeMedida;
                                            
                                            
                    IF done1 THEN
                        LEAVE read_loop;
                    END IF;
                                            
            select 
                tab1.idAliquota, 
                round((tab1.aliquota - (tab1.aliquota*(tab1.reducao/100))),2), 
                tab2.nomePDV
                    from produtoImpostos tab
                    inner join produto tab2 on(tab.idProduto = tab2.idProduto)
                    inner join aliquota tab1 on(tab.tributacao = tab1.idAliquota) 
                                            where tab.idProduto=VaridProduto and tab.idLoja=Varidloja
                                                                into VarSituacaoTributaria, VarAliquota, VarNomePdv;                                                                
                    

        if(new.status = 5)then
        if(new.flagFormaFinalizacao = 'D')then
                                        INSERT INTO `conector`.`pedido_log`
                                            (
                                                                                        `idpedido`,
                                                                                        `idloja`,
                                                                                        `idProduto`,
                                                                                        `sequencial`,
                                                                                        `idfuncionario`,
                                                                                        `situacao`,
                                                                                        `quantidade`,
                                                                                        `priceLiquido`,
                                                                                        `price`,
                                                                                        `valorDiscount`,
                                                                                        `priceFull`,
                                                                                        `idEan`,
                                                                                        `codigobarra`,
                                                                                        `idunidadeMedida`,
                                                                                        `data_alteracao`,
                                                                                        `hora_alteracao`,
                                                                                        `descricaoItem`,
                                                                                        `acrescimoItem`,
                                                                                        `aliquota`,
                                                                                        `tipoAlteracao`,
                                                                                        `situacaoTributaria`,`flagFormaFinalizacao`
                                            )
                                            VALUES
                                            (
                                                                                        Varidpedido,
                                                                                        Varidloja,
                                                                                        VaridProduto,
                                                                                        Varsequencial,
                                                                                        Varidfuncionario,
                                                                                        Varsituacao,
                                                                                        Varquantidade,
                                                                                        VarpriceLiquido,
                                                                                        Varprice,
                                                                                        VarvalorDiscount,
                                                                                        VarpriceFull,
                                                                                        VaridprodutoEmbalagem,
                                                                                        Varbarra,
                                                                                        VaridunidadeMedida,
                                                                                        date_format(now(),'%Y%m%d'),
                                                                                        date_format(now(), '%H%m%s'),
                                                                                        VarNomePdv,
                                                                                        0, 
                                                                                        VarAliquota,
                                                                                        'A',
                                                                                        VarSituacaoTributaria, new.`flagFormaFinalizacao`
                                        );
                                        end if;
            else if(new.status = 5)then
            if(new.flagFormaFinalizacao = 'D')then
                                        INSERT INTO `conector`.`pedido_log`
                                            (
                                                `idpedido`,
                                                `idloja`,
                                                `idProduto`,
                                                `sequencial`,
                                                `idfuncionario`,
                                                `situacao`,
                                                `quantidade`,
                                                `priceLiquido`,
                                                `price`,
                                                `valorDiscount`,
                                                `priceFull`,
                                                `idprodutoEmbalagem`,
                                                `barra`,
                                                `idunidadeMedida`,
                                                `data_alteracao`,
                                                `hora_alteracao`,
                                                `descricaoItem`,
                                                `acrescimoItem`,
                                                `aliquota`,
                                                `tipoAlteracao`,
                                                `situacaoTributaria`,indicador_canc,`flagFormaFinalizacao`)
                                            VALUES
                                            (
                                                Varidpedido,
                                                Varidloja,
                                                VaridProduto,
                                                Varsequencial,
                                                Varidfuncionario,
                                                Varsituacao,
                                                Varquantidade,
                                                VarpriceLiquido,
                                                Varprice,
                                                VarvalorDiscount,
                                                VarpriceFull,
                                                VaridprodutoEmbalagem,
                                                Varbarra,
                                                VaridunidadeMedida,
                                                date_format(now(),'%Y%m%d'),
                                                date_format(now(), '%H%m%s'),
                                                VarNomePdv,
                                                0, 
                                                VarAliquota,
                                                'A',
                                                VarSituacaoTributaria,'S', new.`flagFormaFinalizacao`
                                        );
                                        end if;
                end if;
        end if;

            end loop;
        close basicFonte;
    end;
    
end $$

DELIMITER ;

--
-- Definition of trigger `pedido_last_update`
--

DROP TRIGGER /*!50030 IF EXISTS */ `pedido_last_update`;

DELIMITER $$

CREATE DEFINER = `master`@`localhost` TRIGGER `pedido_last_update` AFTER UPDATE ON `pedido` FOR EACH ROW begin

    declare vliquido numeric(15,3);
    declare vreferencia numeric(15,3);
    declare countFinalizadora smallint;
    
    select count(*) from pedidoFinanceiro 
                            where idPedido=new.idPedido 
                                            into countFinalizadora;
if(countFinalizadora = 1)then
select 
      sum(referencia+entrada)
        from 
            pedidoFinanceiro
                where idPedido=new.IdPedido and idLoja=new.Idloja into vreferencia;
else
select 
      SUM(REFERENCIA)
        from 
            pedidoFinanceiro
                where idPedido=new.IdPedido and idLoja=new.Idloja into vreferencia;
end if;
    select 
        valorLiquido
        from 
            pedido where idPedido=new.IdPedido and idLoja=new.Idloja into vliquido;

      if(vreferencia != vliquido)then 
        delete from pedidoFinanceiro where idPedido=new.IdPedido and idLoja=new.Idloja;
      end if;
end $$

DELIMITER ;

--
-- Definition of table `pedido_log`
--

DROP TABLE IF EXISTS `pedido_log`;
CREATE TABLE `pedido_log` (
  `idpedido` double NOT NULL,
  `idloja` int(11) NOT NULL,
  `idProduto` int(11) NOT NULL,
  `sequencial` int(11) NOT NULL,
  `idfuncionario` int(11) NOT NULL,
  `situacao` int(11) NOT NULL,
  `quantidade` decimal(5,3) NOT NULL DEFAULT '0.000',
  `priceLiquido` decimal(15,3) NOT NULL DEFAULT '0.000',
  `price` decimal(15,3) NOT NULL DEFAULT '0.000',
  `valorDiscount` decimal(15,3) NOT NULL DEFAULT '0.000',
  `priceFull` decimal(15,3) NOT NULL,
  `idEan` int(11) NOT NULL,
  `codigoBarra` double NOT NULL,
  `idunidadeMedida` int(11) NOT NULL,
  `data_alteracao` date NOT NULL,
  `hora_alteracao` time NOT NULL,
  `descricaoItem` varchar(30) NOT NULL,
  `acrescimoItem` decimal(15,3) NOT NULL,
  `aliquota` decimal(15,3) NOT NULL,
  `tipoAlteracao` varchar(1) NOT NULL COMMENT '“A” para alteração, “E” para exclusão e “I” para inclusão',
  `situacaoTributaria` varchar(1) NOT NULL COMMENT '- Isento - Não Tributado - Substituição Tributária- Tributado pelo ICMS - Tributado pelo ISSQ',
  `chave` double NOT NULL AUTO_INCREMENT,
  `indicador_canc` varchar(1) NOT NULL,
  `flagFormaFinalizacao` varchar(1) DEFAULT 'D',
  PRIMARY KEY (`chave`,`idpedido`,`idloja`,`idProduto`,`sequencial`),
  KEY `fk_pedidoItens_pedido1` (`idpedido`,`idloja`),
  KEY `fk_pedidoItens_produto1` (`idProduto`),
  KEY `fk_pedidoItens_funcionario1` (`idfuncionario`),
  KEY `fk_pedidoItens_produtoEmbalagem1` (`idEan`,`codigoBarra`,`idunidadeMedida`),
  CONSTRAINT `fk_pedidoItens_funcionario10` FOREIGN KEY (`idfuncionario`) REFERENCES `funcionario` (`idfuncionario`) ON DELETE NO ACTION ON UPDATE NO ACTION,
  CONSTRAINT `fk_pedidoItens_pedido10` FOREIGN KEY (`idpedido`, `idloja`) REFERENCES `pedido` (`idpedido`, `idloja`) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT `fk_pedidoItens_produto10` FOREIGN KEY (`idProduto`) REFERENCES `produto` (`idProduto`) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT `fk_pedidoItens_produtoEmbalagem10` FOREIGN KEY (`idEan`, `codigoBarra`, `idunidadeMedida`) REFERENCES `produtoembalagem` (`idprodutoEmbalagem`, `barra`, `idunidadeMedida`) ON DELETE NO ACTION ON UPDATE NO ACTION
) ENGINE=InnoDB DEFAULT CHARSET=latin1 COMMENT='delimiter ||\ncreate function reserva_calc(tipo int, chave_pr';

--
-- Dumping data for table `pedido_log`
--

/*!40000 ALTER TABLE `pedido_log` DISABLE KEYS */;
/*!40000 ALTER TABLE `pedido_log` ENABLE KEYS */;


--
-- Definition of table `pedidoboleto`
--

DROP TABLE IF EXISTS `pedidoboleto`;
CREATE TABLE `pedidoboleto` (
  `idpedido` double NOT NULL,
  `cedente` int(11) NOT NULL,
  `idfinalizadora` int(11) NOT NULL,
  `sacador` int(11) NOT NULL,
  `funcionario` int(11) NOT NULL,
  `idmetodo` int(11) NOT NULL,
  `referencia` decimal(15,3) NOT NULL,
  `encargos` decimal(15,3) NOT NULL,
  `emissao` date NOT NULL,
  `numeroParcelas` int(11) NOT NULL,
  PRIMARY KEY (`idpedido`,`cedente`,`idfinalizadora`),
  KEY `fk_pedidoBoleto_cliente1` (`sacador`),
  KEY `fk_pedidoBoleto_funcionario1` (`funcionario`),
  KEY `fk_pedidoBoleto_metodo1` (`idmetodo`),
  CONSTRAINT `fk_pedidoBoleto_cliente1` FOREIGN KEY (`sacador`) REFERENCES `cliente` (`idcliente`) ON DELETE NO ACTION ON UPDATE NO ACTION,
  CONSTRAINT `fk_pedidoBoleto_funcionario1` FOREIGN KEY (`funcionario`) REFERENCES `funcionario` (`idfuncionario`) ON DELETE NO ACTION ON UPDATE NO ACTION,
  CONSTRAINT `fk_pedidoBoleto_metodo1` FOREIGN KEY (`idmetodo`) REFERENCES `metodo` (`idmetodo`) ON DELETE NO ACTION ON UPDATE NO ACTION,
  CONSTRAINT `fk_pedidoBoleto_pedidoFinanceiro1` FOREIGN KEY (`idpedido`, `cedente`, `idfinalizadora`) REFERENCES `pedidofinanceiro` (`idpedido`, `idloja`, `idfinalizadora`) ON DELETE CASCADE ON UPDATE CASCADE
) ENGINE=InnoDB DEFAULT CHARSET=latin1;

--
-- Dumping data for table `pedidoboleto`
--

/*!40000 ALTER TABLE `pedidoboleto` DISABLE KEYS */;
/*!40000 ALTER TABLE `pedidoboleto` ENABLE KEYS */;


--
-- Definition of trigger `pedidoSimulacaoBoleto_last_insert`
--

DROP TRIGGER /*!50030 IF EXISTS */ `pedidoSimulacaoBoleto_last_insert`;

DELIMITER $$

CREATE DEFINER = `master`@`localhost` TRIGGER `pedidoSimulacaoBoleto_last_insert` AFTER INSERT ON `pedidoboleto` FOR EACH ROW begin



	declare v0 int;

  declare v1 int;

	declare valorParcela numeric(15,3);



	set v0 = 1;

	set v1 = 30;



    set valorParcela = ((new.referencia + new.encargos)/new.numeroParcelas);



    			  WHILE v0 <= new.numeroParcelas DO



                                INSERT INTO `conector`.`pedidoparcelaboleto`

                                (

                                            `idpedido`,

                                            `cedente`,

                                            `idParcela`,

                                            `Valor`,

                                            `armotizado`,

                                            `juros`,

                                            `multa`,

                                            `statusBoleto`,

                                            prazo,

                                            `vencimento`)

                                            VALUES

                                            (

                                                new.`idpedido`,

                                                new.`cedente`,

                                                v0,

                                                valorParcela,

                                                0,

                                                0,

                                                0,

                                                0,

                                                v1,

                                                ADDDATE(now(), v1)

                                            );



		            SET v0 = v0 + 1;

		            SET v1 = v1 + 30;



		  END WHILE;



end $$

DELIMITER ;

--
-- Definition of table `pedidocartao`
--

DROP TABLE IF EXISTS `pedidocartao`;
CREATE TABLE `pedidocartao` (
  `idpedido` double NOT NULL,
  `idloja` int(11) NOT NULL,
  `idfinalizadora` int(11) NOT NULL,
  `idAdministradora` int(11) DEFAULT '0',
  `idmetodo` int(11) NOT NULL,
  `numeroParcelas` int(11) NOT NULL,
  `emissao` date NOT NULL,
  `referencia` decimal(15,3) NOT NULL,
  `encargos` decimal(15,3) NOT NULL,
  PRIMARY KEY (`idpedido`,`idloja`,`idfinalizadora`),
  KEY `fk_pedidoCartao_metodo1` (`idmetodo`),
  KEY `fk_pedidoCartao_administradora1` (`idAdministradora`),
  KEY `fk_cartao_pedidoFinanceiro1` (`idpedido`,`idloja`,`idfinalizadora`),
  CONSTRAINT `fk_cartao_pedidoFinanceiro1` FOREIGN KEY (`idpedido`, `idloja`, `idfinalizadora`) REFERENCES `pedidofinanceiro` (`idpedido`, `idloja`, `idfinalizadora`) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT `fk_pedidoCartao_metodo1` FOREIGN KEY (`idmetodo`) REFERENCES `metodo` (`idmetodo`) ON DELETE NO ACTION ON UPDATE NO ACTION
) ENGINE=InnoDB DEFAULT CHARSET=latin1;

--
-- Dumping data for table `pedidocartao`
--

/*!40000 ALTER TABLE `pedidocartao` DISABLE KEYS */;
/*!40000 ALTER TABLE `pedidocartao` ENABLE KEYS */;


--
-- Definition of trigger `pedidoSimulacaoParcelaCartao_last_insert`
--

DROP TRIGGER /*!50030 IF EXISTS */ `pedidoSimulacaoParcelaCartao_last_insert`;

DELIMITER $$

CREATE DEFINER = `master`@`localhost` TRIGGER `pedidoSimulacaoParcelaCartao_last_insert` AFTER INSERT ON `pedidocartao` FOR EACH ROW begin

	declare v0 int;
  declare v1 int;
  declare tipo int default 0;
	declare valorParcela numeric(15,3);
	set v0 = 1;
	set v1 = 30;
    
    select idFinalizadora from 
                              pedidoFinanceiro
                                                where 
                                                     idPedido=new.idPedido and
                                                     idLoja=new.idLoja and idFinalizadora in (5,6)
                                                                                            into
                                                                                                tipo;
    if(tipo is null or tipo = 0)then
            set tipo = 6;
    end if;
  if(tipo = 6)then
  
    set tipo=1;
      else 
    set tipo=2;
    
  end if;
  
    set valorParcela = round(((new.referencia + new.encargos)/new.numeroParcelas),2);
    			  WHILE v0 <= new.numeroParcelas DO
                                            insert into `conector`.`pedidoParcelaCartao`
                                                (
                                                        	`idPedido`,
	                                                        `idloja`,
        	                                                `idParcela`,
                        	                                `vencimento`,
                                        	                `valor`,
                                                          `typeCartao`,
                                                          `observacao`
                                                )
                                                    values
                                                (
                                                        	new.`idpedido`,
	                                                        new.`idloja`,
        	                                                v0,
                        	                                ADDDATE(now(), v1),
                                        	                valorParcela,
                                                          tipo,
                                                          "Inserido"
                                               );
		            SET v0 = v0 + 1;
		            SET v1 = v1 + 30;
		  END WHILE;
end $$

DELIMITER ;

--
-- Definition of table `pedidocheque`
--

DROP TABLE IF EXISTS `pedidocheque`;
CREATE TABLE `pedidocheque` (
  `idpedido` double NOT NULL,
  `idloja` int(11) NOT NULL,
  `idfinalizadora` int(11) NOT NULL,
  `idcliente` int(11) NOT NULL,
  `idmetodo` int(11) NOT NULL,
  `referencia` decimal(15,3) NOT NULL,
  `encargos` decimal(15,3) NOT NULL,
  `numeroCheques` int(11) NOT NULL,
  `emissao` date NOT NULL,
  `finally` char(1) NOT NULL DEFAULT 'f' COMMENT 'v - true\nf = false',
  `observacao` varchar(100) DEFAULT NULL,
  PRIMARY KEY (`idpedido`,`idloja`,`idfinalizadora`),
  KEY `fk_pedidoCheque_cliente1` (`idcliente`),
  KEY `fk_pedidoCheque_metodo1` (`idmetodo`),
  CONSTRAINT `fk_pedidoCheque_cliente1` FOREIGN KEY (`idcliente`) REFERENCES `cliente` (`idcliente`) ON DELETE NO ACTION ON UPDATE NO ACTION,
  CONSTRAINT `fk_pedidoCheque_metodo1` FOREIGN KEY (`idmetodo`) REFERENCES `metodo` (`idmetodo`) ON DELETE NO ACTION ON UPDATE NO ACTION,
  CONSTRAINT `fk_pedidoCheque_pedidoFinanceiro1` FOREIGN KEY (`idpedido`, `idloja`, `idfinalizadora`) REFERENCES `pedidofinanceiro` (`idpedido`, `idloja`, `idfinalizadora`) ON DELETE CASCADE ON UPDATE CASCADE
) ENGINE=InnoDB DEFAULT CHARSET=latin1;

--
-- Dumping data for table `pedidocheque`
--

/*!40000 ALTER TABLE `pedidocheque` DISABLE KEYS */;
/*!40000 ALTER TABLE `pedidocheque` ENABLE KEYS */;


--
-- Definition of trigger `pedidoSimulacaoParcelaCheque_last_insert`
--

DROP TRIGGER /*!50030 IF EXISTS */ `pedidoSimulacaoParcelaCheque_last_insert`;

DELIMITER $$

CREATE DEFINER = `master`@`localhost` TRIGGER `pedidoSimulacaoParcelaCheque_last_insert` AFTER INSERT ON `pedidocheque` FOR EACH ROW begin
	declare v0 int;
  declare v1 int;
	declare valorParcela numeric(15,3);
	set v0 = 1;
	set v1 = 30;
    set valorParcela = ((new.referencia + new.encargos)/new.numeroCheques);
    			  WHILE v0 <= new.numeroCheques DO
                                            insert into `conector`.`pedidoParcelaCheque`
                                                (
                                                        	`idPedido`,
	                                                        `idloja`,
                                                          `sequencial`,
                                                          `idBanco`,
                                                          `valor`,
                        	                                `emissao`,
                                                          `deposito`
                                                )
                                                    values
                                                (
                                                        	new.`idpedido`,
	                                                        new.`idloja`,
        	                                                v0,
                                                          0,
                                                          valorParcela,
                                                          now(),
                        	                                ADDDATE(now(), v1)
                                	                        
                                                );
		            SET v0 = v0 + 1;
		            SET v1 = v1 + 30;
		  END WHILE;
end $$

DELIMITER ;

--
-- Definition of table `pedidocompra`
--

DROP TABLE IF EXISTS `pedidocompra`;
CREATE TABLE `pedidocompra` (
  `idpedidoCompra` double NOT NULL AUTO_INCREMENT,
  `idloja` int(11) NOT NULL,
  `idClienteFornecedor` int(11) NOT NULL,
  `data` date NOT NULL,
  `idfuncionario` int(11) NOT NULL,
  `idusuario` int(11) NOT NULL,
  `proximaVisita` date NOT NULL,
  `itens` decimal(15,3) NOT NULL DEFAULT '0.000',
  `frete` decimal(15,3) NOT NULL DEFAULT '0.000',
  `bonificacao` decimal(15,3) NOT NULL DEFAULT '0.000',
  `financeiro` decimal(15,3) NOT NULL DEFAULT '0.000',
  `totalSubstituicao` decimal(15,3) NOT NULL DEFAULT '0.000',
  `vendo` decimal(15,3) NOT NULL DEFAULT '0.000',
  `peso` decimal(15,3) NOT NULL DEFAULT '0.000',
  `valorIcmsSubstituicao` decimal(15,3) NOT NULL DEFAULT '0.000',
  `acrescimos` decimal(15,3) NOT NULL DEFAULT '0.000',
  `desconto` decimal(15,3) NOT NULL DEFAULT '0.000',
  `valorTotalProdutos` decimal(15,3) NOT NULL DEFAULT '0.000',
  `valorTotalLiquido` decimal(15,3) NOT NULL DEFAULT '0.000',
  `valorTotal` decimal(15,3) NOT NULL DEFAULT '0.000',
  `valorPedente` decimal(15,3) NOT NULL DEFAULT '0.000',
  `valorRecebido` decimal(15,3) NOT NULL DEFAULT '0.000',
  `rede` smallint(6) NOT NULL DEFAULT '0',
  `emitido` smallint(6) NOT NULL DEFAULT '0',
  `entregue` smallint(6) NOT NULL DEFAULT '0',
  `recebido` smallint(6) NOT NULL DEFAULT '0',
  `somaFrete` smallint(6) NOT NULL DEFAULT '0',
  `somaSubstituicao` smallint(6) NOT NULL DEFAULT '0',
  `flagRecebimento` varchar(8) NOT NULL DEFAULT '00000000',
  `flagAlteracao` varchar(8) NOT NULL DEFAULT '00000000',
  `typeFrete` char(1) NOT NULL DEFAULT 'c' COMMENT 'c - CIF\nf - FOB',
  `idrepresentante` int(11) NOT NULL,
  `idtransportadora` int(11) NOT NULL,
  `seuPedido` varchar(12) DEFAULT NULL,
  `observacao` varchar(100) DEFAULT NULL,
  `volume` decimal(15,3) NOT NULL DEFAULT '0.000',
  `dataEntrega` date NOT NULL,
  `confeccaoPrice` varchar(1) NOT NULL DEFAULT 'n' COMMENT 'n - nota\np - pedido',
  `status` char(1) NOT NULL DEFAULT '1' COMMENT '1 previsao\n2 emitido\n3 Pedente\n4 recebido\n\n\n',
  `acceptBoni` smallint(6) unsigned NOT NULL DEFAULT '0' COMMENT 'true - elimina condição de pgto e alimenta estoque\nfalse - valida condição de pgto e alimenta estoque',
  `porcentagemFrete` decimal(15,3) NOT NULL DEFAULT '0.000',
  `porcentagemVendo` decimal(15,3) NOT NULL DEFAULT '0.000',
  `porcentagemFinanceiro` decimal(15,3) NOT NULL DEFAULT '0.000',
  `porcentagemDesconto` decimal(15,3) NOT NULL DEFAULT '0.000',
  `porcentagemBonificacao` decimal(15,3) NOT NULL DEFAULT '0.000',
  `somaDiscount` smallint(6) NOT NULL DEFAULT '0',
  `somaBoni` smallint(6) NOT NULL DEFAULT '0',
  `saldo` char(1) NOT NULL DEFAULT 'm' COMMENT 'm mantem saldo p elimina saldo',
  PRIMARY KEY (`idpedidoCompra`),
  KEY `fk_pedidoCompra_loja1` (`idloja`),
  KEY `fk_pedidoCompra_cliente1` (`idClienteFornecedor`),
  KEY `fk_pedidoCompra_funcionario1` (`idfuncionario`),
  KEY `fk_pedidoCompra_usuario1` (`idusuario`),
  CONSTRAINT `fk_pedidoCompra_cliente1` FOREIGN KEY (`idClienteFornecedor`) REFERENCES `cliente` (`idcliente`) ON DELETE NO ACTION ON UPDATE NO ACTION,
  CONSTRAINT `fk_pedidoCompra_funcionario1` FOREIGN KEY (`idfuncionario`) REFERENCES `funcionario` (`idfuncionario`) ON DELETE NO ACTION ON UPDATE NO ACTION,
  CONSTRAINT `fk_pedidoCompra_loja1` FOREIGN KEY (`idloja`) REFERENCES `loja` (`idloja`) ON DELETE NO ACTION ON UPDATE NO ACTION,
  CONSTRAINT `fk_pedidoCompra_usuario1` FOREIGN KEY (`idusuario`) REFERENCES `usuario` (`idusuario`) ON DELETE NO ACTION ON UPDATE NO ACTION
) ENGINE=InnoDB DEFAULT CHARSET=latin1;

--
-- Dumping data for table `pedidocompra`
--

/*!40000 ALTER TABLE `pedidocompra` DISABLE KEYS */;
/*!40000 ALTER TABLE `pedidocompra` ENABLE KEYS */;


--
-- Definition of table `pedidocompraitens`
--

DROP TABLE IF EXISTS `pedidocompraitens`;
CREATE TABLE `pedidocompraitens` (
  `idpedidoCompra` double NOT NULL,
  `sequencial` int(11) NOT NULL,
  `idProduto` int(11) NOT NULL,
  `emissaoPedido` date NOT NULL,
  `custoLiquido` decimal(15,3) NOT NULL DEFAULT '0.000',
  `custoBruto` decimal(15,3) NOT NULL DEFAULT '0.000',
  `custoNota` decimal(15,3) NOT NULL,
  `custoNotaTotal` decimal(15,3) NOT NULL,
  `custoReposicao` decimal(15,3) NOT NULL DEFAULT '0.000',
  `custoTotal` decimal(15,3) NOT NULL DEFAULT '0.000',
  `discount1` decimal(15,3) NOT NULL DEFAULT '0.000',
  `discount2` decimal(15,3) NOT NULL DEFAULT '0.000',
  `discount3` decimal(15,3) NOT NULL DEFAULT '0.000',
  `discountValue` decimal(15,3) NOT NULL DEFAULT '0.000',
  `acrescimo` decimal(15,3) NOT NULL DEFAULT '0.000',
  `bonificacao` decimal(15,3) NOT NULL DEFAULT '0.000',
  `despesasNaoTributadas` decimal(15,3) NOT NULL DEFAULT '0.000',
  `despesasTributadas` decimal(15,3) NOT NULL DEFAULT '0.000',
  `chaveEmbalagem` int(11) NOT NULL,
  `barra` double NOT NULL,
  `idunidadeMedida` int(11) NOT NULL,
  `entregue` varchar(1) NOT NULL DEFAULT 'n' COMMENT 'n - não entregou\ns - sim entregou',
  `financeiro` decimal(15,3) NOT NULL DEFAULT '0.000',
  `frete` decimal(15,3) NOT NULL DEFAULT '0.000',
  `icmsEntrada` decimal(15,3) NOT NULL DEFAULT '0.000',
  `reducaoEntrada` decimal(15,3) NOT NULL DEFAULT '0.000',
  `icmsFrete` decimal(15,3) NOT NULL DEFAULT '0.000',
  `icmsSaida` decimal(15,3) NOT NULL DEFAULT '0.000',
  `reducaoSaida` decimal(15,3) NOT NULL DEFAULT '0.000',
  `ipi` decimal(15,3) NOT NULL DEFAULT '0.000',
  `priceVenda` decimal(15,3) NOT NULL DEFAULT '0.000',
  `quantidade` decimal(15,3) NOT NULL DEFAULT '0.000',
  `sugestao` decimal(15,3) NOT NULL DEFAULT '0.000',
  `valorIpi` decimal(15,3) NOT NULL DEFAULT '0.000',
  `substituicao` decimal(15,3) NOT NULL DEFAULT '0.000',
  `sugestaoCompra` decimal(15,3) NOT NULL DEFAULT '0.000',
  `lucro` decimal(15,3) NOT NULL DEFAULT '0.000',
  `lucroValor` decimal(15,3) NOT NULL DEFAULT '0.000',
  `lucroBruto` decimal(15,3) NOT NULL DEFAULT '0.000',
  `quantidadeRecebida` decimal(15,3) NOT NULL DEFAULT '0.000',
  `quantidadePendente` decimal(15,3) NOT NULL DEFAULT '0.000',
  `creditoIcms` decimal(15,3) NOT NULL DEFAULT '0.000',
  `creditoPis` decimal(15,3) NOT NULL DEFAULT '0.000',
  `creditoCofins` decimal(15,3) NOT NULL DEFAULT '0.000',
  `baseCalculoSubstituicao` decimal(15,3) NOT NULL DEFAULT '0.000',
  `icmsSt` decimal(15,3) NOT NULL DEFAULT '0.000',
  `acrescimoSubstituicao` decimal(15,3) NOT NULL DEFAULT '0.000',
  `valorFinanceiro` decimal(15,3) NOT NULL DEFAULT '0.000',
  `valorFrete` decimal(15,3) NOT NULL DEFAULT '0.000',
  `sumFrete` smallint(6) NOT NULL DEFAULT '0',
  `numeroNota` varchar(10) NOT NULL DEFAULT '0',
  `serie` varchar(3) DEFAULT '0',
  `diferencaQtty` decimal(15,3) DEFAULT '0.000',
  `diferencaCustoLiqNota` decimal(15,3) DEFAULT '0.000',
  `diferencaCustoTotalNota` decimal(15,3) DEFAULT '0.000',
  `dateEntrega` varchar(8) DEFAULT '00000000',
  `margem` decimal(15,3) NOT NULL DEFAULT '0.000',
  `sumSt` smallint(6) NOT NULL DEFAULT '0',
  PRIMARY KEY (`idpedidoCompra`,`sequencial`,`idProduto`),
  KEY `fk_pedidoCompraItens_produto1` (`idProduto`),
  KEY `fk_pedidoCompraItens_produtoEmbalagem1` (`chaveEmbalagem`,`barra`,`idunidadeMedida`),
  KEY `fk_pedidoCompraItens_pedidoCompra1` (`idpedidoCompra`),
  CONSTRAINT `fk_pedidoCompraItens_pedidoCompra1` FOREIGN KEY (`idpedidoCompra`) REFERENCES `pedidocompra` (`idpedidoCompra`) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT `fk_pedidoCompraItens_produto1` FOREIGN KEY (`idProduto`) REFERENCES `produto` (`idProduto`) ON DELETE NO ACTION ON UPDATE NO ACTION,
  CONSTRAINT `fk_pedidoCompraItens_produtoEmbalagem1` FOREIGN KEY (`chaveEmbalagem`, `barra`, `idunidadeMedida`) REFERENCES `produtoembalagem` (`idprodutoEmbalagem`, `barra`, `idunidadeMedida`) ON DELETE NO ACTION ON UPDATE NO ACTION
) ENGINE=InnoDB DEFAULT CHARSET=latin1;

--
-- Dumping data for table `pedidocompraitens`
--

/*!40000 ALTER TABLE `pedidocompraitens` DISABLE KEYS */;
/*!40000 ALTER TABLE `pedidocompraitens` ENABLE KEYS */;


--
-- Definition of trigger `itemCompra_last_insert`
--

DROP TRIGGER /*!50030 IF EXISTS */ `itemCompra_last_insert`;

DELIMITER $$

CREATE DEFINER = `master`@`localhost` TRIGGER `itemCompra_last_insert` AFTER INSERT ON `pedidocompraitens` FOR EACH ROW begin

	declare nr_item numeric(15,3);
	declare nr_volume numeric(15,3);
	declare valorProdutos numeric(15,3);
	declare valorLiquido numeric(15,3);
	declare valorPedido numeric(15,3);
	declare vdesconto numeric(15,3);
	declare vfrete numeric(15,3);
	declare vfinanceiro numeric(15,3);
	declare vbonificacao numeric(15,3);
  declare baseCalculoTotal numeric(15,3);
	declare icmsSt numeric(15,3);
  declare nr_vencimento integer;
  declare countVenc integer;
  
  set nr_vencimento = 0;
  set countVenc = 1;

select
      sum(itens.quantidade*tab.quantidade) as Item,
      count((itens.idProduto)) as Volume,
      sum((itens.custoBruto*(itens.quantidade*tab.quantidade))*(itens.bonificacao/100)) as Bonificacao,
      sum((itens.custoBruto*(itens.quantidade*tab.quantidade))*(itens.financeiro/100)) as Financeiro,
      sum(itens.CustoTotal) as Total_Produto,
      sum((itens.CustoTotal * itens.Frete)/100) as Frete,
      sum(itens.custoLiquido*(itens.quantidade*tab.quantidade)) as Total_Liquido,
      sum(itens.CustoNota*(itens.quantidade*tab.quantidade)) as Total_Nota,
      round(sum((itens.custoBruto *(itens.quantidade*tab.quantidade))*(1-(1-(itens.discount1/100))*(1-(itens.discount2/100))*(1-(itens.discount3/100)))),3) as Discount,
      sum(baseCalculoSubstituicao) as Base_Calc_St, 
      sum(icmsSt) as Icms_Substituicao 

        from
            pedidoCompraItens itens
                inner join produtoEmbalagem tab on(itens.idProduto = tab.idProduto)
        where
            itens.idPedidoCompra=new.IdPedidoCompra and tab.defaultCompra='s'
        into
    	nr_item,
    	nr_volume,
    	vbonificacao,
    	vfinanceiro,
    	valorProdutos,
    	vfrete,
    	valorLiquido,
    	valorPedido,
    	vdesconto,
    	baseCalculoTotal,
    	icmsSt;

update
      pedidoCompra
set
      itens=nr_item,
      volume=nr_volume,
      frete=vfrete,
      bonificacao=vbonificacao,
      desconto=vdesconto,
      financeiro=vfinanceiro,
      valorIcmsSubstituicao=baseCalculoTotal,
      totalSubstituicao=icmsSt,
      vendo=0,
      acrescimos=0,
      peso=0, 
      valorTotalProdutos =valorProdutos,
      valorTotalLiquido =valorLiquido,
      valortotal=valorPedido

       where

         idPedidoCompra=new.idPedidoCompra;

select 
        acceptBoni 
                from 
                    pedidoCompra 
                                where 
                                    idPedidoCOmpra=new.idPedidoCOmpra 
                                                                    into @accept; 
if (@accept = 0) then                                                                    
select       
      count(idCondicaoPgto)
                       from
                           pedidoCompraVencimento
                                                 where
                                                       idPedidoCompra=new.idPedidoCompra
                                                                                   into nr_vencimento;

  WHILE countVenc <= nr_vencimento DO

  update       
        pedidoCompraVencimento
  set
        `valorParcela`= ((valorPedido * porcentagem)/100)
  where

         idPedidoCompra=new.idPedidoCompra and parcela = countVenc;

         set countVenc = countVenc + 1;

END WHILE;         
end if;

end $$

DELIMITER ;

--
-- Definition of trigger `itemCompra_last_update`
--

DROP TRIGGER /*!50030 IF EXISTS */ `itemCompra_last_update`;

DELIMITER $$

CREATE DEFINER = `master`@`localhost` TRIGGER `itemCompra_last_update` AFTER UPDATE ON `pedidocompraitens` FOR EACH ROW begin

	declare nr_item numeric(15,3);
	declare nr_volume numeric(15,3);
	declare valorProdutos numeric(15,3);
	declare valorLiquido numeric(15,3);
	declare valorPedido numeric(15,3);
	declare vdesconto numeric(15,3);
	declare vfrete numeric(15,3);
	declare vfinanceiro numeric(15,3);
	declare vbonificacao numeric(15,3);
  declare baseCalculoTotal numeric(15,3);
	declare icmsSt numeric(15,3);
  declare nr_vencimento integer;
  declare countVenc integer;
  
  set nr_vencimento = 0;
  set countVenc = 1;

select
      count(itens.idProduto) as Item,
      sum(itens.quantidade) as Volume,
      sum((itens.custoBruto*itens.quantidade)*(itens.bonificacao/100)) as Bonificacao,
      sum((itens.custoBruto*itens.quantidade)*(itens.financeiro/100)) as Financeiro,
      sum(itens.CustoTotal) as Total_Produto,
      sum((itens.CustoTotal * itens.Frete)/100) as Frete,
      sum(itens.custoLiquido*itens.quantidade) as Total_Liquido,
      sum(itens.CustoNota*.itens.quantidade) as Total_Nota,
      round(sum((itens.custoBruto * itens.quantidade)*(1-(1-(itens.discount1/100))*(1-(itens.discount2/100))*(1-(itens.discount3/100)))),3) as Discount,
      sum(baseCalculoSubstituicao) as Base_Calc_St, 
      sum(icmsSt) as Icms_Substituicao 

        from
      pedidoCompraItens itens
        where
      itens.idPedidoCompra=new.IdPedidoCompra
        into
    	nr_item,
    	nr_volume,
    	vbonificacao,
    	vfinanceiro,
    	valorProdutos,
    	vfrete,
    	valorLiquido,
    	valorPedido,
    	vdesconto,
    	baseCalculoTotal,
    	icmsSt;

update
      pedidoCompra
set
      itens=nr_item,
      volume=nr_volume,
      frete=vfrete,
      bonificacao=vbonificacao,
      desconto=vdesconto,
      financeiro=vfinanceiro,
      valorIcmsSubstituicao=baseCalculoTotal,
      totalSubstituicao=icmsSt,
      vendo=0,
      acrescimos=0,
      peso=0, 
      valorTotalProdutos =valorProdutos,
      valorTotalLiquido =valorLiquido,
      valortotal=valorPedido

       where

         idPedidoCompra=new.idPedidoCompra;
         
select 
        acceptBoni 
                from
                    pedidoCompra 
                                where 
                                    idPedidoCOmpra=new.idPedidoCOmpra 
                                                                    into @accept;
if (@accept = 0) then                                                                    
         
         select       
      count(idCondicaoPgto)
                       from
                           pedidoCompraVencimento
                                                 where
                                                       idPedidoCompra=new.idPedidoCompra
                                                                                   into nr_vencimento;

  WHILE countVenc <= nr_vencimento DO

  update       
        pedidoCompraVencimento
  set
        `valorParcela`= ((valorPedido * porcentagem)/100)
  where

         idPedidoCompra=new.idPedidoCompra and parcela = countVenc;

         set countVenc = countVenc + 1;

END WHILE;         
end if;
end $$

DELIMITER ;

--
-- Definition of trigger `itemCompra_last_delete`
--

DROP TRIGGER /*!50030 IF EXISTS */ `itemCompra_last_delete`;

DELIMITER $$

CREATE DEFINER = `master`@`localhost` TRIGGER `itemCompra_last_delete` BEFORE DELETE ON `pedidocompraitens` FOR EACH ROW begin

	declare nr_item numeric(15,3);
	declare nr_volume numeric(15,3);
	declare valorProdutos numeric(15,3);
	declare valorLiquido numeric(15,3);
	declare valorPedido numeric(15,3);
	declare vdesconto numeric(15,3);
	declare vfrete numeric(15,3);
	declare vfinanceiro numeric(15,3);
	declare vbonificacao numeric(15,3);
  declare baseCalculoTotal numeric(15,3);
	declare icmsSt numeric(15,3);
  declare nr_vencimento integer;
  declare countVenc integer;
  
  set nr_vencimento = 0;
  set countVenc = 1;

select
      count(itens.idProduto) as Item,
      sum(itens.quantidade) as Volume,
      sum((itens.custoBruto*itens.quantidade)*(itens.bonificacao/100)) as Bonificacao,
      sum((itens.custoBruto*itens.quantidade)*(itens.financeiro/100)) as Financeiro,
      sum(itens.CustoTotal) as Total_Produto,
      sum((itens.CustoTotal * itens.Frete)/100) as Frete,
      sum(itens.custoLiquido*itens.quantidade) as Total_Liquido,
      sum(itens.CustoNota*.itens.quantidade) as Total_Nota,
      round(sum((itens.custoBruto * itens.quantidade)*(1-(1-(itens.discount1/100))*(1-(itens.discount2/100))*(1-(itens.discount3/100)))),3) as Discount,
      sum(baseCalculoSubstituicao) as Base_Calc_St, 
      sum(icmsSt) as Icms_Substituicao 

        from
            pedidoCompraItens itens
        where
            itens.idPedidoCompra=old.IdPedidoCompra and sequencial=old.sequencial
        into
    	nr_item,
    	nr_volume,
    	vbonificacao,
    	vfinanceiro,
    	valorProdutos,
    	vfrete,
    	valorLiquido,
    	valorPedido,
    	vdesconto,
    	baseCalculoTotal,
    	icmsSt;

update
      pedidoCompra
set
      itens=nr_item,
      volume= (volume - nr_volume),
      frete=(frete - vfrete),
      bonificacao=(bonificacao - vbonificacao),
      desconto=(desconto - vdesconto),
      financeiro=(financeiro - vfinanceiro),
      valorIcmsSubstituicao=(valorIcmsSubstituicao - baseCalculoTotal),
      totalSubstituicao=(totalSubstituicao - icmsSt),
      vendo=(vendo - 0),
      acrescimos=(acrescimos -0),
      peso=(peso - 0), 
      valorTotalProdutos =(valorTotalProdutos - valorProdutos),
      valorTotalLiquido =(valorTotalLiquido - valorLiquido),
      valortotal=(valortotal - valorPedido)

       where

         idPedidoCompra=old.idPedidoCompra;
         
select       
      count(idCondicaoPgto)
                       from
                           pedidoCompraVencimento
                                                 where
                                                       idPedidoCompra=old.idPedidoCompra
                                                                                   into nr_vencimento;
select       
        valorTotal
                       from
                           pedidoCompra
                                      where
                                           idPedidoCompra=old.idPedidoCompra
                                                                  into valorPedido;

  WHILE countVenc <= nr_vencimento DO

  update       
        pedidoCompraVencimento
  set
        `valorParcela`= ((valorPedido * porcentagem)/100)
  where

         idPedidoCompra=old.idPedidoCompra and parcela = countVenc;

         set countVenc = countVenc + 1;

END WHILE;         

end $$

DELIMITER ;

--
-- Definition of table `pedidocompravencimento`
--

DROP TABLE IF EXISTS `pedidocompravencimento`;
CREATE TABLE `pedidocompravencimento` (
  `idpedidoCompra` double NOT NULL,
  `parcela` int(11) NOT NULL,
  `idcondicaoPgto` int(11) NOT NULL,
  `idfinalizadora` int(11) NOT NULL,
  `data` date NOT NULL,
  `porcentagem` decimal(15,3) NOT NULL DEFAULT '0.000',
  `valorParcela` decimal(15,3) NOT NULL DEFAULT '0.000',
  PRIMARY KEY (`idpedidoCompra`,`parcela`),
  KEY `fk_pedidoCompraVencimento_pedidoCompra1` (`idpedidoCompra`),
  KEY `fk_pedidoCompraVencimento_condicaoPgto1` (`idcondicaoPgto`,`idfinalizadora`),
  CONSTRAINT `fk_pedidoCompraVencimento_condicaoPgto1` FOREIGN KEY (`idcondicaoPgto`, `idfinalizadora`) REFERENCES `condicaopgto` (`idcondicaoPgto`, `idfinalizadora`) ON DELETE NO ACTION ON UPDATE NO ACTION,
  CONSTRAINT `fk_pedidoCompraVencimento_pedidoCompra1` FOREIGN KEY (`idpedidoCompra`) REFERENCES `pedidocompra` (`idpedidoCompra`) ON DELETE CASCADE ON UPDATE NO ACTION
) ENGINE=InnoDB DEFAULT CHARSET=latin1;

--
-- Dumping data for table `pedidocompravencimento`
--

/*!40000 ALTER TABLE `pedidocompravencimento` DISABLE KEYS */;
/*!40000 ALTER TABLE `pedidocompravencimento` ENABLE KEYS */;


--
-- Definition of table `pedidoconvenio`
--

DROP TABLE IF EXISTS `pedidoconvenio`;
CREATE TABLE `pedidoconvenio` (
  `idpedido` double NOT NULL,
  `idloja` int(11) NOT NULL,
  `idfinalizadora` int(11) NOT NULL,
  `idcliente` int(11) NOT NULL,
  `convenio` int(11) NOT NULL DEFAULT '0',
  `idmetodo` int(11) NOT NULL,
  `numeroParcelas` int(11) NOT NULL,
  `emissao` date NOT NULL,
  `referencia` decimal(15,3) NOT NULL,
  `encargos` decimal(15,3) NOT NULL,
  PRIMARY KEY (`idpedido`,`idloja`,`idfinalizadora`),
  KEY `fk_pedidoConvenio_metodo1` (`idmetodo`),
  KEY `fk_pedidoConvenio_cliente1` (`idcliente`),
  KEY `fk_pedidoConvenio_convenio1` (`convenio`),
  KEY `fk_pedidoConvenio_pedidoFinanceiro1` (`idpedido`,`idloja`,`idfinalizadora`),
  CONSTRAINT `fk_pedidoConvenio_cliente1` FOREIGN KEY (`idcliente`) REFERENCES `cliente` (`idcliente`) ON DELETE NO ACTION ON UPDATE NO ACTION,
  CONSTRAINT `fk_pedidoConvenio_metodo1` FOREIGN KEY (`idmetodo`) REFERENCES `metodo` (`idmetodo`) ON DELETE NO ACTION ON UPDATE NO ACTION,
  CONSTRAINT `fk_pedidoConvenio_pedidoFinanceiro1` FOREIGN KEY (`idpedido`, `idloja`, `idfinalizadora`) REFERENCES `pedidofinanceiro` (`idpedido`, `idloja`, `idfinalizadora`) ON DELETE CASCADE ON UPDATE CASCADE
) ENGINE=InnoDB DEFAULT CHARSET=latin1;

--
-- Dumping data for table `pedidoconvenio`
--

/*!40000 ALTER TABLE `pedidoconvenio` DISABLE KEYS */;
/*!40000 ALTER TABLE `pedidoconvenio` ENABLE KEYS */;


--
-- Definition of trigger `pedidoSimulacaoParcelaConvenio_last_insert`
--

DROP TRIGGER /*!50030 IF EXISTS */ `pedidoSimulacaoParcelaConvenio_last_insert`;

DELIMITER $$

CREATE DEFINER = `master`@`localhost` TRIGGER `pedidoSimulacaoParcelaConvenio_last_insert` AFTER INSERT ON `pedidoconvenio` FOR EACH ROW begin
	declare v0 int;
  declare v1 int;
	declare valorParcela numeric(15,3);
  
  
    
	set v0 = 1;
	set v1 = 30;
    
    set valorParcela = ((new.referencia + new.encargos)/new.numeroParcelas);
    			  WHILE v0 <= new.numeroParcelas DO
                                            insert into `conector`.`pedidoParcelaConvenio`
                                                (
                                                        	`idPedido`,
	                                                        `idloja`,
        	                                                `idParcela`,
                        	                                `vencimento`,
                                	                        `observacao`,
                                        	                `valor`
                                                )
                                                    values
                                                (
                                                        	new.`idpedido`,
	                                                        new.`idloja`,
        	                                                v0,
                        	                                vencimento_calc(ADDDATE(now(), v1),20,1),
                                	                        "Inserido",
                                        	                valorParcela
                                                );
		            SET v0 = v0 + 1;
		            SET v1 = v1 + 30;
		  END WHILE;
  
end $$

DELIMITER ;

--
-- Definition of table `pedidocrediario`
--

DROP TABLE IF EXISTS `pedidocrediario`;
CREATE TABLE `pedidocrediario` (
  `idpedido` double NOT NULL,
  `idloja` int(11) NOT NULL,
  `idfinalizadora` int(11) NOT NULL,
  `idcliente` int(11) NOT NULL,
  `idmetodo` int(11) NOT NULL,
  `idfuncionario` int(11) NOT NULL,
  `numeroParcelas` int(11) NOT NULL,
  `emissao` date NOT NULL,
  `entrada` decimal(15,3) NOT NULL DEFAULT '0.000',
  `encargos` decimal(15,3) NOT NULL DEFAULT '0.000',
  `referencia` decimal(15,3) NOT NULL,
  `observacao` varchar(100) DEFAULT NULL,
  `finally` char(1) NOT NULL DEFAULT 'f' COMMENT 'v - true\nf = false',
  PRIMARY KEY (`idpedido`,`idloja`,`idfinalizadora`),
  KEY `fk_receberCrediario_cliente1` (`idcliente`),
  KEY `fk_receberCrediario_metodo1` (`idmetodo`),
  KEY `fk_receberCrediario_funcionario1` (`idfuncionario`),
  CONSTRAINT `fk_pedidoCrediario_pedidoFinanceiro1` FOREIGN KEY (`idpedido`, `idloja`, `idfinalizadora`) REFERENCES `pedidofinanceiro` (`idpedido`, `idloja`, `idfinalizadora`) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT `fk_receberCrediario_cliente1` FOREIGN KEY (`idcliente`) REFERENCES `cliente` (`idcliente`) ON DELETE NO ACTION ON UPDATE NO ACTION,
  CONSTRAINT `fk_receberCrediario_funcionario1` FOREIGN KEY (`idfuncionario`) REFERENCES `funcionario` (`idfuncionario`) ON DELETE NO ACTION ON UPDATE NO ACTION,
  CONSTRAINT `fk_receberCrediario_metodo1` FOREIGN KEY (`idmetodo`) REFERENCES `metodo` (`idmetodo`) ON DELETE NO ACTION ON UPDATE NO ACTION
) ENGINE=InnoDB DEFAULT CHARSET=latin1;

--
-- Dumping data for table `pedidocrediario`
--

/*!40000 ALTER TABLE `pedidocrediario` DISABLE KEYS */;
/*!40000 ALTER TABLE `pedidocrediario` ENABLE KEYS */;


--
-- Definition of trigger `pedidoSimulacaoParcelaCrediario_last_insert`
--

DROP TRIGGER /*!50030 IF EXISTS */ `pedidoSimulacaoParcelaCrediario_last_insert`;

DELIMITER $$

CREATE DEFINER = `master`@`localhost` TRIGGER `pedidoSimulacaoParcelaCrediario_last_insert` AFTER INSERT ON `pedidocrediario` FOR EACH ROW begin
	declare v0 int;
  declare v1 int;
	declare valorParcela numeric(15,3);
  declare valorEntrada numeric(15,3);
  declare dataEntrada date;
  declare exitsFinanceiro smallint default 0;
	set v0 = 1;
	set v1 = 30;
    set valorParcela = ((new.referencia + new.encargos)/new.numeroParcelas);

    select count(*) from pedidoFinanceiro where idPedido=new.idPedido
                                                and idFinalizadora != 3 and idLoja=new.`idloja`
                                                                            into exitsFinanceiro;
                                                                            if(exitsFinanceiro)then set exitsFinanceiro=0; end if;

    if(exitsFinanceiro = 0)then
    			  WHILE v0 <= new.numeroParcelas DO
                                            insert into `conector`.`pedidoParcelaCrediario`
                                                (
                                                        	`idPedido`,
	                                                        `idloja`,
        	                                                `idParcela`,
                        	                                `vencimento`,
                                	                        `observacao`,
                                        	                `valor`
                                                )
                                                    values
                                                (
                                                        	new.`idpedido`,
	                                                        new.`idloja`,
        	                                                v0,
                        	                                ADDDATE(now(), v1),
                                	                        "Inserido",
                                        	                valorParcela
                                                );
		            SET v0 = v0 + 1;
		            SET v1 = v1 + 30;
		  END WHILE;
    end if;
          

    select entrada 
                from pedidoFinanceiro where 
                            idPedido=new.idPedido and idFinalizadora=3
                                        into valorEntrada;
                                        if(valorEntrada is null)then set valorEntrada=0; end if;
    if(valorEntrada > 0)then
    select entrada 
                from pedido where 
                            idPedido=new.idPedido
                                        into dataEntrada;
                                        if(dataEntrada is null)then set dataEntrada=now(); end if;

                                             insert into `conector`.`pedidoParcelaCrediario`
                                                (
                                                        	`idPedido`,
	                                                        `idloja`,
        	                                                `idParcela`,
                        	                                `vencimento`,
                                	                        `observacao`,
                                        	                `valor`
                                                )
                                                    values
                                                (
                                                        	new.`idpedido`,
	                                                        new.`idloja`,
        	                                                0,
                        	                                dataEntrada,
                                	                        "Inserida A Entrada",
                                        	                valorEntrada
                                                );   
    
    end if;

        
end $$

DELIMITER ;

--
-- Definition of table `pedidodecidirimposto`
--

DROP TABLE IF EXISTS `pedidodecidirimposto`;
CREATE TABLE `pedidodecidirimposto` (
  `idpedidoCompraImposto` double NOT NULL AUTO_INCREMENT,
  `imposto` decimal(15,3) NOT NULL,
  `reducao` decimal(15,3) NOT NULL,
  `tipo` varchar(45) DEFAULT NULL,
  `valor` decimal(15,3) DEFAULT NULL,
  `cfop` decimal(15,3) DEFAULT NULL,
  `valorIpi` decimal(15,3) DEFAULT NULL,
  `valorBaseCalculoIcmsSubstuicao` decimal(15,3) DEFAULT NULL,
  `valorBaseCalculoSubstituicao` decimal(15,3) DEFAULT NULL,
  `baseIsento` decimal(15,3) DEFAULT NULL,
  `cstIcms` varchar(3) DEFAULT NULL,
  PRIMARY KEY (`idpedidoCompraImposto`)
) ENGINE=InnoDB DEFAULT CHARSET=latin1;

--
-- Dumping data for table `pedidodecidirimposto`
--

/*!40000 ALTER TABLE `pedidodecidirimposto` DISABLE KEYS */;
/*!40000 ALTER TABLE `pedidodecidirimposto` ENABLE KEYS */;


--
-- Definition of table `pedidoentrega`
--

DROP TABLE IF EXISTS `pedidoentrega`;
CREATE TABLE `pedidoentrega` (
  `idpedido` double NOT NULL,
  `idloja` int(11) NOT NULL,
  `logradouro` varchar(40) NOT NULL,
  `bairro` varchar(40) NOT NULL,
  `cep` varchar(8) NOT NULL,
  `cidade` varchar(30) NOT NULL,
  `codigoMunicipio` int(11) DEFAULT NULL,
  `numero` int(11) NOT NULL,
  `uf` varchar(2) NOT NULL,
  `complemento` varchar(45) DEFAULT NULL,
  `referencia` varchar(45) DEFAULT NULL,
  `dataEntrega` date DEFAULT NULL,
  `horaEntrega` time DEFAULT NULL,
  `typeEntrega` char(1) NOT NULL DEFAULT 'c' COMMENT 'c - cif\nf - fob\n',
  `idtransportadora` int(11) NOT NULL,
  PRIMARY KEY (`idpedido`,`idloja`),
  KEY `fk_pedidoEntrega_pedido1` (`idpedido`,`idloja`),
  CONSTRAINT `fk_pedidoEntrega_pedido1` FOREIGN KEY (`idpedido`, `idloja`) REFERENCES `pedido` (`idpedido`, `idloja`) ON DELETE CASCADE ON UPDATE CASCADE
) ENGINE=InnoDB DEFAULT CHARSET=latin1;

--
-- Dumping data for table `pedidoentrega`
--

/*!40000 ALTER TABLE `pedidoentrega` DISABLE KEYS */;
/*!40000 ALTER TABLE `pedidoentrega` ENABLE KEYS */;


--
-- Definition of table `pedidofinanceiro`
--

DROP TABLE IF EXISTS `pedidofinanceiro`;
CREATE TABLE `pedidofinanceiro` (
  `idpedido` double NOT NULL,
  `idloja` int(11) NOT NULL,
  `idfinalizadora` int(11) NOT NULL,
  `idmetodo` int(11) NOT NULL,
  `idterminal` int(11) NOT NULL,
  `idfuncionario` int(11) NOT NULL,
  `emissao` date NOT NULL,
  `referencia` decimal(15,3) NOT NULL DEFAULT '0.000',
  `encargos` decimal(15,3) NOT NULL DEFAULT '0.000',
  `entrada` decimal(15,3) NOT NULL DEFAULT '0.000',
  `numeroParcelas` int(11) NOT NULL DEFAULT '0',
  `observacao` varchar(100) DEFAULT NULL,
  PRIMARY KEY (`idpedido`,`idloja`,`idfinalizadora`),
  KEY `fk_pedidoFinanceiro_funcionario1` (`idfuncionario`),
  KEY `fk_pedidoFinanceiro_metodo1` (`idmetodo`),
  KEY `fk_pedidoFinanceiro_terminal1` (`idterminal`),
  KEY `fk_pedidoFinanceiro_finalizadora1` (`idfinalizadora`),
  KEY `fk_pedidoFinanceiro_pedido1` (`idpedido`,`idloja`,`idfinalizadora`),
  CONSTRAINT `fk_pedidoFinanceiro_finalizadora1` FOREIGN KEY (`idfinalizadora`) REFERENCES `finalizadora` (`idfinalizadora`) ON DELETE NO ACTION ON UPDATE NO ACTION,
  CONSTRAINT `fk_pedidoFinanceiro_funcionario1` FOREIGN KEY (`idfuncionario`) REFERENCES `funcionario` (`idfuncionario`) ON DELETE NO ACTION ON UPDATE NO ACTION,
  CONSTRAINT `fk_pedidoFinanceiro_metodo1` FOREIGN KEY (`idmetodo`) REFERENCES `metodo` (`idmetodo`) ON DELETE NO ACTION ON UPDATE NO ACTION,
  CONSTRAINT `fk_pedidoFinanceiro_pedido1` FOREIGN KEY (`idpedido`, `idloja`) REFERENCES `pedido` (`idpedido`, `idloja`) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT `fk_pedidoFinanceiro_terminal1` FOREIGN KEY (`idterminal`) REFERENCES `terminal` (`idterminal`) ON DELETE NO ACTION ON UPDATE NO ACTION
) ENGINE=InnoDB DEFAULT CHARSET=latin1;

--
-- Dumping data for table `pedidofinanceiro`
--

/*!40000 ALTER TABLE `pedidofinanceiro` DISABLE KEYS */;
/*!40000 ALTER TABLE `pedidofinanceiro` ENABLE KEYS */;


--
-- Definition of trigger `pedidoEncargos_last_insert`
--

DROP TRIGGER /*!50030 IF EXISTS */ `pedidoEncargos_last_insert`;

DELIMITER $$

CREATE DEFINER = `master`@`localhost` TRIGGER `pedidoEncargos_last_insert` BEFORE INSERT ON `pedidofinanceiro` FOR EACH ROW begin
    if(new.encargos < 0)then
        set new.encargos=0;
    end if;
end $$

DELIMITER ;

--
-- Definition of trigger `pedidoAreceber_last_insert`
--

DROP TRIGGER /*!50030 IF EXISTS */ `pedidoAreceber_last_insert`;

DELIMITER $$

CREATE DEFINER = `master`@`localhost` TRIGGER `pedidoAreceber_last_insert` AFTER INSERT ON `pedidofinanceiro` FOR EACH ROW begin
    
    
declare cliente int;

    

if (select count(idPedido) as verifica from pedidoCrediario where idPedido=new.idPedido and idLoja=new.idLoja) >= 1 then
      delete from pedidoCrediario where idPedido=new.idPedido and idLoja=new.idLoja and new.IdFinalizadora=3;
end if;

    select idCliente
        from
            pedido
        where
            idPedido = new.idPedido and
            idLoja = new.idLoja into cliente;

case new.idFinalizadora

    when 2 then
    insert
            `conector`.`pedidoCheque` (
            `idpedido`,
            `idloja`,
             idFinalizadora,
            `idcliente`,
	          `idmetodo`,
            `referencia`,
            `encargos`,
            `numeroCheques`,
            `emissao`,
	          `observacao`)
            values
        (
            new.`idpedido`,
            new.`idloja`,
            new.idFinalizadora,
            cliente,
            new.`idmetodo`,
            new.`referencia`,
            new.`encargos`,
            new.`numeroParcelas`,
            new.`emissao`,
            ""
            );


    when 3 then

insert into
        `conector`.`pedidoCrediario` (
        `idpedido`,
        `idloja`,
         idFinalizadora,
        `idcliente`,
        `idmetodo`,
        `idfuncionario`,
        `numeroParcelas`,
        `emissao`,
        `entrada`,
        `encargos`,
        `referencia`,
        `observacao`)
  values
        (
            new.`idpedido`,
            new.`idloja`,
            new.idFinalizadora,
            cliente,
            new.`idmetodo`,
            new.`idfuncionario`,
            new.`numeroParcelas`,
            new.`emissao`,
            new.`entrada`,
            new.`encargos`,
            new.`referencia`,
            ""
            );
            when 4 then
            select tab.convenio 
                            from clienteRisco tab
                                            where tab.idCliente = cliente
                                                                into @empresa;
            insert into `conector`.`pedidoConvenio` (
            `idpedido`,
            `idloja`,
             idFinalizadora,
            `idcliente`,
            `convenio`,
            `idmetodo`,
            `numeroParcelas`,
            `emissao`,
            `referencia`,
            `encargos`)
        values(
            new.`idpedido`,
            new.`idloja`,
            new.idFinalizadora,
            cliente,
            if(@empresa is null,1, @empresa),
            new.`idmetodo`,
            new.`numeroParcelas`,
            new.`emissao`,
            new.`referencia`,
            new.`encargos`);

            when 5 then

            insert into `conector`.`pedidoCartao` (
            `idpedido`,
            `idloja`,
             idFinalizadora,
            `idAdministradora`,
            `idmetodo`,
            `numeroParcelas`,
            `emissao`,
            `referencia`,
            `encargos`)
        values(
            new.`idpedido`,
            new.`idloja`,
            new.idFinalizadora,
            0, 
            new.`idmetodo`,
            new.`numeroParcelas`,
            new.`emissao`,
            new.`referencia`,
            new.`encargos`);

            when 6 then

            insert into `conector`.`pedidoCartao` (
            `idpedido`,
            `idloja`,
             idFinalizadora,
            `idAdministradora`,
            `idmetodo`,
            `numeroParcelas`,
            `emissao`,
            `referencia`,
            `encargos`)
        values(
            new.`idpedido`,
            new.`idloja`,
            new.idFinalizadora,
            0, 
            new.`idmetodo`,
            new.`numeroParcelas`,
            new.`emissao`,
            new.`referencia`,
            new.`encargos`);
            
            when 7 then
            
            INSERT INTO `conector`.`pedidoboleto`
            (
                `idpedido`,
                `cedente`,
                `idfinalizadora`,
                `sacador`,
                `funcionario`,
                `idmetodo`,
                `referencia`,
                `encargos`,
                `emissao`,
                `numeroParcelas`
            )
                    VALUES
            (
                    new.`idpedido`,
                    new.`idloja`,
                    new.idFinalizadora,
                    cliente,
                    new.`idfuncionario`,
                    new.idmetodo,
                    new.`referencia`,
                    new.`encargos`,
                    new.emissao,
                    new.numeroParcelas
            );
            when 1 then
                INSERT INTO `conector`.`money`
(
    `idpedido`,
    `idloja`,
    `idfinalizadora`,
    `idcliente`,
    `idmetodo`,
    `idfuncionario`,
    `emissao`,
    `valorTotal`,
     terminal,
    `observacao`
)
    VALUES
(
    new.`idpedido`,
                    new.`idloja`,
                    new.idFinalizadora,
                    cliente,
                    new.idmetodo,
                    new.`idfuncionario`,

    new.emissao,
    new.`referencia`,
    new.idterminal,
    ""
);
        end case;
        
        
        
        
        
    end $$

DELIMITER ;

--
-- Definition of table `pedidoitens`
--

DROP TABLE IF EXISTS `pedidoitens`;
CREATE TABLE `pedidoitens` (
  `idpedido` double NOT NULL,
  `idloja` int(11) NOT NULL,
  `idProduto` int(11) NOT NULL,
  `sequencial` int(11) NOT NULL,
  `idfuncionario` int(11) NOT NULL,
  `situacao` int(11) DEFAULT NULL,
  `quantidade` decimal(15,3) NOT NULL DEFAULT '0.000',
  `priceLiquido` decimal(15,3) NOT NULL DEFAULT '0.000',
  `price` decimal(15,3) NOT NULL DEFAULT '0.000',
  `valorDiscount` decimal(15,3) NOT NULL DEFAULT '0.000',
  `priceFull` decimal(15,3) NOT NULL,
  `idEan` int(11) NOT NULL,
  `codigoBarra` double NOT NULL,
  `idunidadeMedida` int(11) NOT NULL,
  `promocional` varchar(1) NOT NULL DEFAULT 'N',
  PRIMARY KEY (`idpedido`,`idloja`,`idProduto`,`sequencial`),
  KEY `fk_pedidoItens_pedido1` (`idpedido`,`idloja`),
  KEY `fk_pedidoItens_produto1` (`idProduto`),
  KEY `fk_pedidoItens_funcionario1` (`idfuncionario`),
  KEY `fk_pedidoItens_produtoEmbalagem1` (`idEan`,`codigoBarra`,`idunidadeMedida`),
  CONSTRAINT `fk_pedidoItens_funcionario1` FOREIGN KEY (`idfuncionario`) REFERENCES `funcionario` (`idfuncionario`) ON DELETE NO ACTION ON UPDATE NO ACTION,
  CONSTRAINT `fk_pedidoItens_pedido1` FOREIGN KEY (`idpedido`, `idloja`) REFERENCES `pedido` (`idpedido`, `idloja`) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT `fk_pedidoItens_produto1` FOREIGN KEY (`idProduto`) REFERENCES `produto` (`idProduto`) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT `fk_pedidoItens_produtoEmbalagem1` FOREIGN KEY (`idEan`, `codigoBarra`, `idunidadeMedida`) REFERENCES `produtoembalagem` (`idprodutoEmbalagem`, `barra`, `idunidadeMedida`) ON DELETE NO ACTION ON UPDATE NO ACTION
) ENGINE=InnoDB DEFAULT CHARSET=latin1;

--
-- Dumping data for table `pedidoitens`
--

/*!40000 ALTER TABLE `pedidoitens` DISABLE KEYS */;
/*!40000 ALTER TABLE `pedidoitens` ENABLE KEYS */;


--
-- Definition of trigger `pedido_firt_relacionamento`
--

DROP TRIGGER /*!50030 IF EXISTS */ `pedido_firt_relacionamento`;

DELIMITER $$

CREATE DEFINER = `master`@`localhost` TRIGGER `pedido_firt_relacionamento` BEFORE INSERT ON `pedidoitens` FOR EACH ROW begin
        declare VarSituacaoTributaria VARCHAR(1);
        declare VarAliquota Decimal(15,3);
        declare VarNomePdv varchar(30);
        
        select 
            tab1.idAliquota, round((tab1.aliquota - (tab1.aliquota*(tab1.reducao/100))),2), tab2.nomePDV
                    from produtoImpostos tab
                    inner join produto tab2 on(tab.idProduto = tab2.idProduto)
                    inner join aliquota tab1 on(tab.tributacao = tab1.idAliquota) 
                                            where tab.idProduto=new.idProduto and tab.idLoja=new.idLoja
                                                                into VarSituacaoTributaria, VarAliquota, VarNomePdv;
        





end $$

DELIMITER ;

--
-- Definition of trigger `pedidoItens_last_insert`
--

DROP TRIGGER /*!50030 IF EXISTS */ `pedidoItens_last_insert`;

DELIMITER $$

CREATE DEFINER = `master`@`localhost` TRIGGER `pedidoItens_last_insert` AFTER INSERT ON `pedidoitens` FOR EACH ROW begin
    declare qtty numeric(15,3);
    declare liquido numeric(15,3);
    declare bruto numeric(15,3);
    declare discount1 numeric(15,3);
    declare nota numeric(15,3);
if(new.quantidade > 0) then
    select
            reserva_calc(1,new.idProduto,new.IdLoja,new.IdPedido) as total_qtty,
            reserva_calc(2,new.idProduto,new.IdLoja,new.IdPedido) as price_liquido,
            reserva_calc(3,new.idProduto,new.IdLoja,new.IdPedido) as price_bruto,
            reserva_calc(4,new.idProduto,new.IdLoja,new.IdPedido) as desconto,
            reserva_calc(5,new.idProduto,new.IdLoja,new.IdPedido) as priceNota
             from
            pedidoItens
             where
            idProduto=new.idProduto and sequencial = new.sequencial and idPedido=new.IdPedido and idLoja=new.Idloja into qtty,liquido,bruto,discount1,nota;
    update pedido set qttyItens=(qttyItens + qtty),
                      valorLiquido = (valorLiquido + liquido),
                      valorTotal = (valorTotal + bruto),
                      discount =(discount + discount1) where idPedido=new.IdPedido and idLoja=new.Idloja;
                      end if;
end $$

DELIMITER ;

--
-- Definition of trigger `pedidoItens_last_update`
--

DROP TRIGGER /*!50030 IF EXISTS */ `pedidoItens_last_update`;

DELIMITER $$

CREATE DEFINER = `master`@`localhost` TRIGGER `pedidoItens_last_update` AFTER UPDATE ON `pedidoitens` FOR EACH ROW begin

    declare liquido numeric(15,3);
    declare bruto numeric(15,3);
    declare discount1 numeric(15,3);
    declare nota numeric(15,3);
    declare qtty numeric(15,3);
declare VarSituacaoTributaria VARCHAR(1);
        declare VarAliquota Decimal(15,3);
        declare VarNomePdv varchar(30);
        
        select 
            tab1.idAliquota, round((tab1.aliquota - (tab1.aliquota*(tab1.reducao/100))),2), tab2.nomePDV
                    from produtoImpostos tab
                    inner join produto tab2 on(tab.idProduto = tab2.idProduto)
                    inner join aliquota tab1 on(tab.tributacao = tab1.idAliquota) 
                                            where tab.idProduto=new.idProduto and tab.idLoja=new.idLoja
                                                                into VarSituacaoTributaria, VarAliquota, VarNomePdv;    

      select round(sum(quantidade),3) as TotalItensReserva,
             round(sum(pedidoItens.priceLiquido),3) as Liquido,
             round(sum(pedidoItens.quantidade*pedidoItens.price),3) as Bruto,
             ((round(sum(pedidoItens.quantidade*pedidoItens.price),3))
                   -
             (round(sum(pedidoItens.priceLiquido),3))) as Desconto,
             round(sum(pedidoItens.priceLiquido),3) as nota
              from
                  pedidoItens
              where
                  idPedido=new.IdPedido and idLoja=new.Idloja and situacao<>5 into qtty,liquido, bruto, discount1, nota;
    select flagFormaFinalizacao from pedido where idPedido=new.idPedido into @a;
    update pedido set
                      valorLiquido = liquido,
                      valorTotal =  bruto,
                      discount =discount1
                  where
                      idPedido=new.IdPedido and idLoja=new.Idloja;
                      if(@a = 'D')then
INSERT INTO `conector`.`pedido_log`
(
`idpedido`,
`idloja`,
`idProduto`,
`sequencial`,
`idfuncionario`,
`situacao`,
`quantidade`,
`priceLiquido`,
`price`,
`valorDiscount`,
`priceFull`,
`idEan`,
`codigobarra`,
`idunidadeMedida`,
`data_alteracao`,
`hora_alteracao`,
`descricaoItem`,
`acrescimoItem`,
`aliquota`,
`tipoAlteracao`,
`situacaoTributaria`)
VALUES
(
new.idpedido,
new.idloja,
new.idProduto,
new.sequencial,
new.idfuncionario,
new.situacao,
new.quantidade,
new.priceLiquido,
new.price,
new.valorDiscount,
new.priceFull,
new.idEan,
new.codigobarra,
new.idunidadeMedida,
date_format(now(),'%Y%m%d'),
date_format(now(), '%H%m%s'),
VarNomePdv,
0, 
VarAliquota,
'A',
VarSituacaoTributaria
);
END IF;

end $$

DELIMITER ;

--
-- Definition of trigger `pedidoItens_last_delete`
--

DROP TRIGGER /*!50030 IF EXISTS */ `pedidoItens_last_delete`;

DELIMITER $$

CREATE DEFINER = `master`@`localhost` TRIGGER `pedidoItens_last_delete` BEFORE DELETE ON `pedidoitens` FOR EACH ROW begin
declare VarSituacaoTributaria VARCHAR(1);
        declare VarAliquota Decimal(15,3);
        declare VarNomePdv varchar(30);
        
    update pedido set qttyItens=(qttyItens - old.quantidade),
                      valorLiquido = (valorLiquido - old.priceLiquido),
                      valorTotal = (valorTotal - (old.quantidade*old.price)),
                      discount =(if(((round(old.quantidade*old.price,3))-(round(old.priceLiquido,3)))=0,discount,((round(old.quantidade*old.price,3))-(round(old.priceLiquido,3)))-discount)) where idPedido=old.IdPedido and idLoja=old.Idloja;
                      
        select 
            tab1.idAliquota, round((tab1.aliquota - (tab1.aliquota*(tab1.reducao/100))),2), tab2.nomePDV
                    from produtoImpostos tab
                    inner join produto tab2 on(tab.idProduto = tab2.idProduto)
                    inner join aliquota tab1 on(tab.tributacao = tab1.idAliquota) 
                                            where tab.idProduto=old.idProduto and tab.idLoja=old.idLoja
                                                                into VarSituacaoTributaria, VarAliquota, VarNomePdv;
 

end $$

DELIMITER ;

--
-- Definition of table `pedidoitensrelacionamento`
--

DROP TABLE IF EXISTS `pedidoitensrelacionamento`;
CREATE TABLE `pedidoitensrelacionamento` (
  `idpedido` double NOT NULL,
  `idloja` int(11) NOT NULL,
  `idProduto` int(11) NOT NULL,
  `sequencial` int(11) NOT NULL,
  `nomePDV` varchar(12) NOT NULL,
  `cripto` varchar(600) DEFAULT NULL,
  PRIMARY KEY (`idpedido`,`idloja`,`idProduto`,`sequencial`),
  CONSTRAINT `fk_pedidoItensRelacionamento_pedidoitens1` FOREIGN KEY (`idpedido`, `idloja`, `idProduto`, `sequencial`) REFERENCES `pedidoitens` (`idpedido`, `idloja`, `idProduto`, `sequencial`) ON DELETE NO ACTION ON UPDATE CASCADE
) ENGINE=InnoDB DEFAULT CHARSET=latin1;

--
-- Dumping data for table `pedidoitensrelacionamento`
--

/*!40000 ALTER TABLE `pedidoitensrelacionamento` DISABLE KEYS */;
/*!40000 ALTER TABLE `pedidoitensrelacionamento` ENABLE KEYS */;


--
-- Definition of table `pedidoparcelaboleto`
--

DROP TABLE IF EXISTS `pedidoparcelaboleto`;
CREATE TABLE `pedidoparcelaboleto` (
  `idpedido` double NOT NULL,
  `cedente` int(11) NOT NULL,
  `idParcela` int(11) NOT NULL,
  `Valor` decimal(15,3) NOT NULL,
  `armotizado` decimal(15,3) NOT NULL,
  `juros` decimal(15,3) NOT NULL,
  `multa` decimal(15,3) NOT NULL,
  `statusBoleto` smallint(6) NOT NULL,
  `prazo` int(11) NOT NULL,
  `vencimento` date NOT NULL,
  PRIMARY KEY (`idpedido`,`cedente`,`idParcela`),
  KEY `fk_pedidoParcelaBoleto_pedidoBoleto1` (`idpedido`,`cedente`),
  CONSTRAINT `fk_pedidoParcelaBoleto_pedidoBoleto1` FOREIGN KEY (`idpedido`, `cedente`) REFERENCES `pedidoboleto` (`idpedido`, `cedente`) ON DELETE CASCADE ON UPDATE CASCADE
) ENGINE=InnoDB DEFAULT CHARSET=latin1;

--
-- Dumping data for table `pedidoparcelaboleto`
--

/*!40000 ALTER TABLE `pedidoparcelaboleto` DISABLE KEYS */;
/*!40000 ALTER TABLE `pedidoparcelaboleto` ENABLE KEYS */;


--
-- Definition of table `pedidoparcelacartao`
--

DROP TABLE IF EXISTS `pedidoparcelacartao`;
CREATE TABLE `pedidoparcelacartao` (
  `idpedido` double NOT NULL,
  `idloja` int(11) NOT NULL,
  `idParcela` int(11) NOT NULL,
  `vencimento` date NOT NULL,
  `baixa` varchar(8) NOT NULL DEFAULT '00000000',
  `valor` decimal(15,3) NOT NULL,
  `taxa` decimal(5,3) NOT NULL,
  `liquido` decimal(15,3) NOT NULL,
  `typeCartao` varchar(1) NOT NULL,
  `observacao` varchar(40) NOT NULL,
  `statusParcela` smallint(6) NOT NULL,
  PRIMARY KEY (`idpedido`,`idloja`,`idParcela`),
  KEY `fk_pedidoParcelaCartao_pedidoCartao1` (`idpedido`,`idloja`),
  CONSTRAINT `fk_pedidoParcelaCartao_pedidoCartao1` FOREIGN KEY (`idpedido`, `idloja`) REFERENCES `pedidocartao` (`idpedido`, `idloja`) ON DELETE CASCADE ON UPDATE CASCADE
) ENGINE=InnoDB DEFAULT CHARSET=latin1;

--
-- Dumping data for table `pedidoparcelacartao`
--

/*!40000 ALTER TABLE `pedidoparcelacartao` DISABLE KEYS */;
/*!40000 ALTER TABLE `pedidoparcelacartao` ENABLE KEYS */;


--
-- Definition of table `pedidoparcelacheque`
--

DROP TABLE IF EXISTS `pedidoparcelacheque`;
CREATE TABLE `pedidoparcelacheque` (
  `idpedido` double NOT NULL,
  `idloja` int(11) NOT NULL,
  `sequencial` int(11) NOT NULL,
  `idbanco` int(11) NOT NULL DEFAULT '0',
  `agencia` varchar(7) NOT NULL DEFAULT '0',
  `conta` varchar(12) NOT NULL DEFAULT '0',
  `cheque` varchar(7) NOT NULL DEFAULT '0',
  `serie` char(3) NOT NULL DEFAULT '0',
  `valor` decimal(15,3) NOT NULL,
  `emissao` date NOT NULL,
  `deposito` date NOT NULL,
  PRIMARY KEY (`idpedido`,`idloja`,`sequencial`),
  KEY `fk_receberChequer_banco1` (`idbanco`),
  CONSTRAINT `fk_pedidoParcelaCheque_pedidoCheque1` FOREIGN KEY (`idpedido`, `idloja`) REFERENCES `pedidocheque` (`idpedido`, `idloja`) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT `fk_receberChequer_banco10` FOREIGN KEY (`idbanco`) REFERENCES `banco` (`idbanco`) ON DELETE NO ACTION ON UPDATE NO ACTION
) ENGINE=InnoDB DEFAULT CHARSET=latin1;

--
-- Dumping data for table `pedidoparcelacheque`
--

/*!40000 ALTER TABLE `pedidoparcelacheque` DISABLE KEYS */;
/*!40000 ALTER TABLE `pedidoparcelacheque` ENABLE KEYS */;


--
-- Definition of table `pedidoparcelaconvenio`
--

DROP TABLE IF EXISTS `pedidoparcelaconvenio`;
CREATE TABLE `pedidoparcelaconvenio` (
  `idpedido` double NOT NULL,
  `idloja` int(11) NOT NULL,
  `idParcela` int(11) NOT NULL,
  `vencimento` date NOT NULL,
  `baixa` char(8) NOT NULL DEFAULT '00000000',
  `observacao` varchar(40) DEFAULT NULL,
  `valor` decimal(15,3) NOT NULL,
  `armotizado` decimal(15,3) NOT NULL DEFAULT '0.000',
  `juros` decimal(15,3) NOT NULL DEFAULT '0.000',
  `statusParcela` smallint(6) NOT NULL DEFAULT '0',
  PRIMARY KEY (`idpedido`,`idloja`,`idParcela`),
  KEY `fk_pedidoParcelaConvenio_pedidoConvenio1` (`idpedido`,`idloja`),
  CONSTRAINT `fk_pedidoParcelaConvenio_pedidoConvenio1` FOREIGN KEY (`idpedido`, `idloja`) REFERENCES `pedidoconvenio` (`idpedido`, `idloja`) ON DELETE CASCADE ON UPDATE CASCADE
) ENGINE=InnoDB DEFAULT CHARSET=latin1;

--
-- Dumping data for table `pedidoparcelaconvenio`
--

/*!40000 ALTER TABLE `pedidoparcelaconvenio` DISABLE KEYS */;
/*!40000 ALTER TABLE `pedidoparcelaconvenio` ENABLE KEYS */;


--
-- Definition of table `pedidoparcelacrediario`
--

DROP TABLE IF EXISTS `pedidoparcelacrediario`;
CREATE TABLE `pedidoparcelacrediario` (
  `idpedido` double NOT NULL,
  `idloja` int(11) NOT NULL,
  `idParcela` int(11) NOT NULL,
  `vencimento` date NOT NULL,
  `pagamento` varchar(8) NOT NULL DEFAULT '00000000',
  `observacao` varchar(40) DEFAULT NULL,
  `valor` decimal(15,3) NOT NULL,
  `armotizado` decimal(15,3) NOT NULL DEFAULT '0.000',
  `juros` decimal(15,3) NOT NULL DEFAULT '0.000',
  `statusParcela` smallint(6) NOT NULL DEFAULT '0',
  PRIMARY KEY (`idpedido`,`idloja`,`idParcela`),
  KEY `fk_pedidoParcelaCrediario_pedidoCrediario1` (`idpedido`,`idloja`),
  CONSTRAINT `fk_pedidoParcelaCrediario_pedidoCrediario1` FOREIGN KEY (`idpedido`, `idloja`) REFERENCES `pedidocrediario` (`idpedido`, `idloja`) ON DELETE CASCADE ON UPDATE CASCADE
) ENGINE=InnoDB DEFAULT CHARSET=latin1;

--
-- Dumping data for table `pedidoparcelacrediario`
--

/*!40000 ALTER TABLE `pedidoparcelacrediario` DISABLE KEYS */;
/*!40000 ALTER TABLE `pedidoparcelacrediario` ENABLE KEYS */;


--
-- Definition of table `piscofins`
--

DROP TABLE IF EXISTS `piscofins`;
CREATE TABLE `piscofins` (
  `idpisCofins` int(11) NOT NULL AUTO_INCREMENT,
  `descricao` varchar(30) NOT NULL,
  `cofinSt` char(1) NOT NULL,
  `piSt` char(1) NOT NULL,
  `creditoPis` char(1) NOT NULL,
  `creditoCofins` char(1) NOT NULL,
  `servico` char(1) NOT NULL,
  PRIMARY KEY (`idpisCofins`)
) ENGINE=InnoDB DEFAULT CHARSET=latin1;

--
-- Dumping data for table `piscofins`
--

/*!40000 ALTER TABLE `piscofins` DISABLE KEYS */;
/*!40000 ALTER TABLE `piscofins` ENABLE KEYS */;


--
-- Definition of table `piscofinsanexo`
--

DROP TABLE IF EXISTS `piscofinsanexo`;
CREATE TABLE `piscofinsanexo` (
  `idpisCofinsAnexo` int(11) NOT NULL AUTO_INCREMENT,
  `idpisCofins` int(11) NOT NULL,
  `aliquotaCreditoPis` decimal(15,3) NOT NULL DEFAULT '0.000',
  `aliquotaCreditoCofins` decimal(15,3) NOT NULL DEFAULT '0.000',
  `aliquotaDebitoPis` decimal(15,3) NOT NULL DEFAULT '0.000',
  `aliquotaDebitoCofins` decimal(15,3) NOT NULL DEFAULT '0.000',
  `vigencia` date DEFAULT NULL,
  `incideIpi` smallint(6) DEFAULT '0',
  `incideSt` smallint(6) DEFAULT '0',
  `typeAtividade` varchar(45) NOT NULL,
  `idTable_Codigo` int(11) NOT NULL DEFAULT '0',
  `table_codigo` varchar(3) DEFAULT NULL,
  `cstPisEntrada` varchar(3) DEFAULT NULL,
  `cstCofinsEntrada` varchar(3) DEFAULT NULL,
  `cstPisSaida` varchar(3) DEFAULT NULL,
  `cstCofinsSaida` varchar(3) DEFAULT NULL,
  `geraDebitoIcms` smallint(6) DEFAULT NULL,
  `geraCreditoIcms` smallint(6) DEFAULT NULL,
  `subDescricao` varchar(100) DEFAULT NULL,
  PRIMARY KEY (`idpisCofinsAnexo`,`idpisCofins`),
  KEY `fk_pisCofinsAnexo_pisCofins1` (`idpisCofins`),
  CONSTRAINT `fk_pisCofinsAnexo_pisCofins1` FOREIGN KEY (`idpisCofins`) REFERENCES `piscofins` (`idpisCofins`) ON DELETE CASCADE ON UPDATE CASCADE
) ENGINE=InnoDB DEFAULT CHARSET=latin1;

--
-- Dumping data for table `piscofinsanexo`
--

/*!40000 ALTER TABLE `piscofinsanexo` DISABLE KEYS */;
/*!40000 ALTER TABLE `piscofinsanexo` ENABLE KEYS */;


--
-- Definition of table `premiacao`
--

DROP TABLE IF EXISTS `premiacao`;
CREATE TABLE `premiacao` (
  `idPremiacao` int(11) NOT NULL AUTO_INCREMENT,
  `descricao` varchar(30) NOT NULL,
  `idMetaVenda` int(11) NOT NULL,
  `porcentagem` decimal(5,2) NOT NULL DEFAULT '0.00',
  `premio` decimal(15,3) NOT NULL DEFAULT '0.000',
  PRIMARY KEY (`idPremiacao`),
  KEY `fk_premiacao_metaVenda1` (`idMetaVenda`),
  CONSTRAINT `fk_premiacao_metaVenda1` FOREIGN KEY (`idMetaVenda`) REFERENCES `metavenda` (`idmetaVenda`) ON DELETE NO ACTION ON UPDATE NO ACTION
) ENGINE=InnoDB DEFAULT CHARSET=latin1;

--
-- Dumping data for table `premiacao`
--

/*!40000 ALTER TABLE `premiacao` DISABLE KEYS */;
/*!40000 ALTER TABLE `premiacao` ENABLE KEYS */;


--
-- Definition of table `produto`
--

DROP TABLE IF EXISTS `produto`;
CREATE TABLE `produto` (
  `idProduto` int(11) NOT NULL,
  `nome` varchar(45) NOT NULL,
  `nomePdv` varchar(21) NOT NULL DEFAULT '""',
  `nomeFull` varchar(60) DEFAULT '0',
  `observacao` varchar(100) DEFAULT '0',
  `status` smallint(6) DEFAULT '0',
  `dataInclusao` date NOT NULL,
  `dataAlteracao` date NOT NULL,
  `idsetor` int(11) NOT NULL DEFAULT '0',
  `idgrupo` int(11) NOT NULL DEFAULT '0',
  `idcategoria` int(11) NOT NULL DEFAULT '0',
  `idfornecedor` int(11) NOT NULL DEFAULT '0',
  `idusuario` int(11) NOT NULL DEFAULT '0',
  `qttyObrigatoria` smallint(6) NOT NULL DEFAULT '1',
  `qttyMaxima` int(11) DEFAULT '0',
  `descontoIndividual` int(11) DEFAULT '0',
  `restrito` smallint(6) DEFAULT '0',
  `idunidade` int(11) NOT NULL DEFAULT '1',
  `tipo` int(11) NOT NULL DEFAULT '0' COMMENT '0 - Normal\n2 - Balança\n',
  `incideIpi` smallint(6) NOT NULL DEFAULT '0',
  `flagCompra` date DEFAULT NULL,
  `inputCfop` varchar(10) DEFAULT NULL,
  `outputCfop` varchar(10) DEFAULT NULL,
  `idUsuarioAlt` int(11) DEFAULT NULL,
  `permitiMultiplicacao` smallint(6) NOT NULL DEFAULT '0' COMMENT 'only produtos acima 9999',
  `origemMercadoria` varchar(1) DEFAULT '0' COMMENT '0  | Nacional\n1  | Estrangeira - Importação direta\n2  | Estrangeira - Adquirida no Mercado Interno',
  PRIMARY KEY (`idProduto`)
) ENGINE=InnoDB DEFAULT CHARSET=latin1;

--
-- Dumping data for table `produto`
--

/*!40000 ALTER TABLE `produto` DISABLE KEYS */;
/*!40000 ALTER TABLE `produto` ENABLE KEYS */;


--
-- Definition of trigger `produto_alt_insert`
--

DROP TRIGGER /*!50030 IF EXISTS */ `produto_alt_insert`;

DELIMITER $$

CREATE DEFINER = `master`@`localhost` TRIGGER `produto_alt_insert` BEFORE INSERT ON `produto` FOR EACH ROW begin
                                          set new.idUsuarioAlt = new.idUsuario;
                                          set new.dataAlteracao= new.dataInclusao;            
end $$

DELIMITER ;

--
-- Definition of trigger `produto_last_insert`
--

DROP TRIGGER /*!50030 IF EXISTS */ `produto_last_insert`;

DELIMITER $$

CREATE DEFINER = `master`@`localhost` TRIGGER `produto_last_insert` AFTER INSERT ON `produto` FOR EACH ROW begin
    declare done int default false;
    declare Varloja integer;

    select idloja from system into Varloja;

    if((new.idProduto > 0) && (new.idProduto <= 9999)) then
    replace into produtoEmbalagem(idproduto,barra,idunidadeMedida)values(new.idProduto,new.idProduto,2);
    else replace into produtoEmbalagem(idproduto,barra,idunidadeMedida)values(new.idProduto,new.idProduto,1);
    end if;

    
    BEGIN 
                declare fonteOne Cursor for select idLoja
                                                       from
                                                           loja;
                 DECLARE CONTINUE HANDLER FOR NOT FOUND SET done = TRUE;
                 open fonteOne;
                                read_loop: LOOP
                                    fetch fonteOne into VarLoja;

                                        if done then
                                            leave read_loop;
                                        end if;
                                          replace into produtoStore (idProduto,idloja) values (new.idProduto,Varloja);
                                          replace into produtoPrice (idProduto,idloja) values (new.idProduto,Varloja);
                                          replace into produtoEstoques (idProduto,idloja,dataEntrada,dataAlteracao) values (new.idProduto,Varloja,now(),now());
                                          replace into produtoImpostos (idProduto,idloja) values (new.idProduto,Varloja);
                                end loop;
                close fonteOne;
        END;
    
end $$

DELIMITER ;

--
-- Definition of trigger `alter_exe_produto`
--

DROP TRIGGER /*!50030 IF EXISTS */ `alter_exe_produto`;

DELIMITER $$

CREATE DEFINER = `master`@`localhost` TRIGGER `alter_exe_produto` BEFORE UPDATE ON `produto` FOR EACH ROW begin
    select versaoBanco,versaoSystem,ip_mq from system into @a,@b,@c;
    select idUsuarioAlt from produto where idProduto=new.idProduto into @d;

    if(new.nome <> old.nome)then

                call conector_exe_alt("MODULO [PRODUTO]", @d, concat("INFORMACAO OLD.: " , old.nome," INFORMACAO NEW.: ", new.nome), @c, new.idProduto,  @b, "FIELD.: OLD DESCRICAO", old.nome, new.idProduto);
    end if;
end $$

DELIMITER ;

--
-- Definition of table `produtoembalagem`
--

DROP TABLE IF EXISTS `produtoembalagem`;
CREATE TABLE `produtoembalagem` (
  `idprodutoEmbalagem` int(11) NOT NULL AUTO_INCREMENT,
  `idProduto` int(11) NOT NULL,
  `barra` double NOT NULL,
  `idunidadeMedida` int(11) NOT NULL,
  `quantidade` decimal(15,3) NOT NULL DEFAULT '1.000',
  `defaultVenda` char(1) NOT NULL DEFAULT 's',
  `defaultCompra` char(1) NOT NULL DEFAULT 's',
  `defaultTransferencia` char(1) NOT NULL DEFAULT 's',
  `status` smallint(6) NOT NULL DEFAULT '0',
  `typeEan` char(1) NOT NULL DEFAULT 'd' COMMENT '"d" - padrÆo compra e venda\n"v" - padrÆo venda\n"c" - padrÆo compra\n"t" - padrÆo transferencia\n',
  PRIMARY KEY (`idprodutoEmbalagem`,`barra`,`idunidadeMedida`),
  UNIQUE KEY `barra_UNIQUE` (`barra`),
  KEY `fk_produtosEmb_unidadeMedida1` (`idunidadeMedida`),
  KEY `fk_produtosEmbalagem_produto1` (`idProduto`),
  CONSTRAINT `fk_produtosEmbalagem_produto1` FOREIGN KEY (`idProduto`) REFERENCES `produto` (`idProduto`) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT `fk_produtosEmb_unidadeMedida1` FOREIGN KEY (`idunidadeMedida`) REFERENCES `unidademedida` (`idunidadeMedida`) ON DELETE NO ACTION ON UPDATE NO ACTION
) ENGINE=InnoDB DEFAULT CHARSET=latin1;

--
-- Dumping data for table `produtoembalagem`
--

/*!40000 ALTER TABLE `produtoembalagem` DISABLE KEYS */;
/*!40000 ALTER TABLE `produtoembalagem` ENABLE KEYS */;


--
-- Definition of table `produtoestoques`
--

DROP TABLE IF EXISTS `produtoestoques`;
CREATE TABLE `produtoestoques` (
  `idProduto` int(11) NOT NULL,
  `idloja` int(11) NOT NULL,
  `quantidade` decimal(15,3) NOT NULL DEFAULT '0.000',
  `maximo` decimal(15,3) NOT NULL DEFAULT '0.000',
  `minimo` decimal(15,3) NOT NULL DEFAULT '0.000',
  `localizacao` varchar(45) DEFAULT '0',
  `dataEntrada` date NOT NULL,
  `dataAlteracao` date NOT NULL,
  PRIMARY KEY (`idProduto`,`idloja`),
  KEY `fk_produtoEstoques_loja1` (`idloja`),
  CONSTRAINT `fk_produtoEstoques_loja1` FOREIGN KEY (`idloja`) REFERENCES `loja` (`idloja`) ON DELETE NO ACTION ON UPDATE NO ACTION,
  CONSTRAINT `fk_produtoEstoques_produto2` FOREIGN KEY (`idProduto`) REFERENCES `produto` (`idProduto`) ON DELETE CASCADE ON UPDATE CASCADE
) ENGINE=InnoDB DEFAULT CHARSET=latin1;

--
-- Dumping data for table `produtoestoques`
--

/*!40000 ALTER TABLE `produtoestoques` DISABLE KEYS */;
/*!40000 ALTER TABLE `produtoestoques` ENABLE KEYS */;


--
-- Definition of table `produtoextrato`
--

DROP TABLE IF EXISTS `produtoextrato`;
CREATE TABLE `produtoextrato` (
  `idprodutoExtrato` double NOT NULL AUTO_INCREMENT,
  `idProduto` int(11) NOT NULL,
  `idloja` int(11) NOT NULL,
  `historico` varchar(45) NOT NULL,
  `typeAritimetico` char(1) DEFAULT NULL COMMENT '+ soma\n- subtrai\n',
  `quantidade` decimal(15,3) DEFAULT '0.000',
  `saldo` decimal(15,3) DEFAULT '0.000',
  `cupom` int(11) DEFAULT '0',
  `pdv` int(11) DEFAULT '0',
  `custoLiquido` decimal(15,3) DEFAULT '0.000',
  `custoMedio` decimal(15,3) DEFAULT '0.000',
  `priceVenda` decimal(15,3) DEFAULT '0.000',
  `margem` decimal(15,3) DEFAULT '0.000',
  `idtypeMovimentacao` int(11) NOT NULL,
  `movimento` date NOT NULL,
  `origem` varchar(15) NOT NULL,
  PRIMARY KEY (`idprodutoExtrato`,`idProduto`,`idloja`),
  KEY `fk_produtoExtrato_loja1` (`idloja`),
  KEY `fk_produtoExtrato_produto1` (`idProduto`),
  KEY `fk_produtoExtrato_typeMovimentacao1` (`idtypeMovimentacao`),
  CONSTRAINT `fk_produtoExtrato_loja1` FOREIGN KEY (`idloja`) REFERENCES `loja` (`idloja`) ON DELETE NO ACTION ON UPDATE NO ACTION,
  CONSTRAINT `fk_produtoExtrato_produto1` FOREIGN KEY (`idProduto`) REFERENCES `produto` (`idProduto`) ON DELETE CASCADE ON UPDATE NO ACTION,
  CONSTRAINT `fk_produtoExtrato_typeMovimentacao1` FOREIGN KEY (`idtypeMovimentacao`) REFERENCES `typemovimentacao` (`idtypeMovimentacao`) ON DELETE NO ACTION ON UPDATE NO ACTION
) ENGINE=InnoDB DEFAULT CHARSET=latin1;

--
-- Dumping data for table `produtoextrato`
--

/*!40000 ALTER TABLE `produtoextrato` DISABLE KEYS */;
/*!40000 ALTER TABLE `produtoextrato` ENABLE KEYS */;


--
-- Definition of trigger `produtoExtrato_before_insert`
--

DROP TRIGGER /*!50030 IF EXISTS */ `produtoExtrato_before_insert`;

DELIMITER $$

CREATE DEFINER = `master`@`localhost` TRIGGER `produtoExtrato_before_insert` BEFORE INSERT ON `produtoextrato` FOR EACH ROW begin

    declare VarProduto double;
    declare VarSoma decimal(15,3);
    declare VarSomaOld decimal(15,3);
    declare VarChaveMax integer;
    declare VarDate date;
    declare VarTotalEstoque integer;

    declare retorno numeric(15,3);
    declare VarPriceVendaAtual numeric(15,3) default 0;
    declare VarCustoLiquido numeric(15,3);
    declare VarCustoBruto numeric(15,3);
    declare VarCustoMedio numeric(15,3);
    declare VarCustoTransf numeric(15,3);
    declare VarMargem numeric(15,3);
    

    SELECT priceVenda
                FROM produtoPrice
                                where idProduto=new.idProduto and
                                      idLoja = new.idLoja
                                                into VarPriceVendaAtual;
                                                if(VarPriceVendaAtual is null)then set VarPriceVendaAtual=0; end if;
    
    
  select custoLiquido,
        custoBruto,
        custoMedio,
        custoTransferencia,
        margem 
                from produtoPrice 
                          where idProduto=new.IdProduto and 
                                idLoja=new.IdLoja
                                        into VarCustoLiquido,
                                             VarCustoBruto,
                                             VarCustoMedio,
                                             VarCustoTransf,
                                             VarMargem;
                                             
                                             if(VarCustoLiquido  is null)then set VarCustoLiquido=0; end if;
                                             if(VarCustoBruto is null)then set VarCustoBruto=0; end if;
                                             if(VarCustoMedio is null)then set VarCustoMedio=0; end if;
                                             if(VarCustoTransf  is null)then set VarCustoTransf=0; end if;
                                             if(VarMargem is null)then set VarMargem=0; end if;
                                             
        set new.custoLiquido = VarCustoLiquido;
        set new.margem = VarMargem;
        set new.custoMedio = VarCustoMedio;
                                                                                                
    
        if(new.typeAritimetico = "+") then
        set VarSoma = new.quantidade;
            else set VarSoma = ((new.quantidade)*(-1));
        end if;
        
        select count(quantidade)
                        from produtoEstoques 
                                    where idLoja=new.idLoja and idProduto=new.idProduto
                                                                            into VarTotalEstoque;        
        IF(new.idTypeMovimentacao <> 4)THEN
        if(VarTotalEstoque = 0)then
                                INSERT INTO `conector`.`produtoestoques`
                                                                (`idProduto`,
                                                                    `idloja`,
                                                                    `quantidade`,
                                                                    `dataEntrada`,
                                                                    `dataAlteracao`)
                                                                VALUES
                                                                (
                                                                    new.idProduto,
                                                                    new.idLoja,
                                                                    VarSoma,
                                                                    now(),
                                                                    now());    
                                                                    
                    ELSE
                    
                                update conector.produtoestoques set quantidade=quantidade+VarSoma where (idloja= new.idloja) and (idproduto=new.idproduto);
        end if;
        END IF;
        select quantidade
                      from produtoEstoques
                                   where idLoja=new.idLoja and idProduto=new.idProduto
                                                                                    into VarSoma;
        set new.Saldo = VarSoma;
end $$

DELIMITER ;

--
-- Definition of table `produtoimpostos`
--

DROP TABLE IF EXISTS `produtoimpostos`;
CREATE TABLE `produtoimpostos` (
  `idProduto` int(11) NOT NULL,
  `idloja` int(11) NOT NULL,
  `tributacao` char(2) NOT NULL DEFAULT 'T0',
  `tributacao1` char(2) DEFAULT NULL,
  `tributacao2` char(2) DEFAULT NULL,
  `idpisCofins` int(11) NOT NULL DEFAULT '1',
  `cst` char(3) NOT NULL DEFAULT '000',
  `cstSaida` char(3) DEFAULT '',
  `cstEntrada` char(3) DEFAULT '',
  `pauta` int(11) NOT NULL DEFAULT '0',
  `ipi` decimal(15,3) NOT NULL DEFAULT '0.000',
  `ipiValor` decimal(15,3) NOT NULL DEFAULT '0.000',
  `spedNcm` char(30) NOT NULL DEFAULT '00000000',
  `impMercadoInterno` decimal(15,3) DEFAULT '0.000',
  `csosn` char(3) DEFAULT NULL,
  `idtypeItem` varchar(2) NOT NULL DEFAULT '00',
  `idGenero` int(11) NOT NULL DEFAULT '1',
  `reducaoCalcEspecial` decimal(15,3) NOT NULL DEFAULT '0.000',
  `ippt` varchar(1) DEFAULT 'T',
  PRIMARY KEY (`idProduto`,`idloja`),
  KEY `fk_table1_loja1` (`idloja`),
  KEY `fk_table1_pisCofins1` (`idpisCofins`),
  KEY `fk_produtoImposto_tributacao1` (`tributacao`),
  KEY `fk_produtoImpostos_cst1` (`cst`),
  KEY `fk_produtoImpostos_spedNcm1` (`spedNcm`),
  KEY `fk_produtoImpostos_typeItem1` (`idtypeItem`),
  KEY `fk_produtoImpostos_spedGeneroItem1` (`idGenero`),
  CONSTRAINT `fk_produtoImpostos_cst1` FOREIGN KEY (`cst`) REFERENCES `cst` (`idcst`) ON DELETE NO ACTION ON UPDATE NO ACTION,
  CONSTRAINT `fk_produtoImpostos_spedGeneroItem1` FOREIGN KEY (`idGenero`) REFERENCES `spedgeneroitem` (`idGenero`) ON DELETE NO ACTION ON UPDATE NO ACTION,
  CONSTRAINT `fk_produtoImpostos_spedNcm1` FOREIGN KEY (`spedNcm`) REFERENCES `spedncm` (`idspedNcm`) ON DELETE NO ACTION ON UPDATE NO ACTION,
  CONSTRAINT `fk_produtoImposto_tributacao1` FOREIGN KEY (`tributacao`) REFERENCES `aliquota` (`idaliquota`) ON DELETE NO ACTION ON UPDATE NO ACTION,
  CONSTRAINT `fk_table1_loja1` FOREIGN KEY (`idloja`) REFERENCES `loja` (`idloja`) ON DELETE NO ACTION ON UPDATE NO ACTION,
  CONSTRAINT `fk_table1_pisCofins1` FOREIGN KEY (`idpisCofins`) REFERENCES `piscofins` (`idpisCofins`) ON DELETE NO ACTION ON UPDATE NO ACTION,
  CONSTRAINT `fk_table1_produto1` FOREIGN KEY (`idProduto`) REFERENCES `produto` (`idProduto`) ON DELETE CASCADE ON UPDATE CASCADE
) ENGINE=InnoDB DEFAULT CHARSET=latin1;

--
-- Dumping data for table `produtoimpostos`
--

/*!40000 ALTER TABLE `produtoimpostos` DISABLE KEYS */;
/*!40000 ALTER TABLE `produtoimpostos` ENABLE KEYS */;


--
-- Definition of trigger `produtoImpostos_alt_update`
--

DROP TRIGGER /*!50030 IF EXISTS */ `produtoImpostos_alt_update`;

DELIMITER $$

CREATE DEFINER = `master`@`localhost` TRIGGER `produtoImpostos_alt_update` BEFORE UPDATE ON `produtoimpostos` FOR EACH ROW begin
        update produto set dataAlteracao=now() where idProduto= new.IdProduto;
end $$

DELIMITER ;

--
-- Definition of table `produtolog`
--

DROP TABLE IF EXISTS `produtolog`;
CREATE TABLE `produtolog` (
  `idProdutoLog` int(11) NOT NULL,
  `idProduto` int(11) NOT NULL,
  `idloja` int(11) NOT NULL,
  PRIMARY KEY (`idProdutoLog`,`idProduto`,`idloja`),
  KEY `fk_produtoLog_produto1` (`idProduto`,`idloja`),
  CONSTRAINT `fk_produtoLog_produto1` FOREIGN KEY (`idProduto`) REFERENCES `produto` (`idProduto`) ON DELETE NO ACTION ON UPDATE NO ACTION
) ENGINE=InnoDB DEFAULT CHARSET=latin1;

--
-- Dumping data for table `produtolog`
--

/*!40000 ALTER TABLE `produtolog` DISABLE KEYS */;
/*!40000 ALTER TABLE `produtolog` ENABLE KEYS */;


--
-- Definition of table `produtomovimento`
--

DROP TABLE IF EXISTS `produtomovimento`;
CREATE TABLE `produtomovimento` (
  `idExtrato` double NOT NULL AUTO_INCREMENT,
  `idProduto` int(11) NOT NULL,
  `idloja` int(11) NOT NULL,
  `idterminal` int(11) NOT NULL,
  `data` date NOT NULL,
  `sequencia` int(11) NOT NULL DEFAULT '0',
  `cupom` double DEFAULT NULL,
  `pessoa` double DEFAULT NULL,
  `custoLiquido` decimal(15,3) DEFAULT '0.000',
  `fornecedor` int(11) DEFAULT NULL,
  `setor` int(11) DEFAULT '0',
  `grupo` int(11) DEFAULT NULL,
  `categoria` int(11) DEFAULT NULL,
  `margem` decimal(15,3) DEFAULT '0.000',
  `lucro` decimal(15,3) DEFAULT '0.000',
  `precoVenda` decimal(15,3) NOT NULL DEFAULT '0.000',
  `precoCusto` decimal(15,3) NOT NULL DEFAULT '0.000',
  `valorTotal` decimal(15,3) NOT NULL DEFAULT '0.000',
  `icms` decimal(15,3) NOT NULL DEFAULT '0.000',
  `cofins` decimal(15,3) NOT NULL DEFAULT '0.000',
  `pis` decimal(15,3) NOT NULL DEFAULT '0.000',
  `aliquota` decimal(15,3) NOT NULL DEFAULT '0.000',
  `reducao` decimal(15,3) NOT NULL DEFAULT '0.000',
  `creditoPis` decimal(15,3) NOT NULL DEFAULT '0.000',
  `creditoCofins` decimal(15,3) NOT NULL DEFAULT '0.000',
  `promocao` char(1) DEFAULT NULL,
  `time` time NOT NULL,
  `discount` decimal(15,3) NOT NULL DEFAULT '0.000',
  `vendedor` int(11) NOT NULL,
  `metodo` int(11) NOT NULL,
  `historico` varchar(45) NOT NULL,
  `qttyCancel` decimal(15,3) NOT NULL DEFAULT '0.000',
  `precoOriginal` decimal(15,3) NOT NULL,
  `finalizadora` int(11) NOT NULL,
  `quantidade` decimal(15,3) NOT NULL DEFAULT '0.000',
  `custoOperacional` decimal(15,3) NOT NULL DEFAULT '0.000',
  `custoReposicao` decimal(15,3) NOT NULL DEFAULT '0.000',
  `tributacao` varchar(2) NOT NULL,
  `tipoProcesso` varchar(1) NOT NULL COMMENT 'C - CUPOM\nN - NOTA',
  `custoTransferencia` decimal(15,3) NOT NULL DEFAULT '0.000',
  `pedido` double DEFAULT NULL,
  `tipoPromocao` varchar(1) DEFAULT NULL,
  `nota` varchar(10) DEFAULT NULL,
  `serie` varchar(3) DEFAULT NULL,
  `modelo` varchar(2) DEFAULT NULL,
  `situacao` varchar(3) DEFAULT NULL,
  `aliquotaFim` decimal(15,3) NOT NULL DEFAULT '0.000',
  `tipoAliquota` varchar(1) DEFAULT NULL,
  PRIMARY KEY (`idExtrato`,`idProduto`,`idloja`,`idterminal`,`data`),
  KEY `fk_produtoMovimento_loja1` (`idloja`),
  KEY `fk_produtoMovimento_terminal1` (`idterminal`),
  KEY `fk_produtoMovimento_produto1` (`idProduto`),
  CONSTRAINT `fk_produtoMovimento_loja1` FOREIGN KEY (`idloja`) REFERENCES `loja` (`idloja`) ON DELETE NO ACTION ON UPDATE NO ACTION,
  CONSTRAINT `fk_produtoMovimento_produto1` FOREIGN KEY (`idProduto`) REFERENCES `produto` (`idProduto`) ON DELETE NO ACTION ON UPDATE NO ACTION,
  CONSTRAINT `fk_produtoMovimento_terminal1` FOREIGN KEY (`idterminal`) REFERENCES `terminal` (`idterminal`) ON DELETE NO ACTION ON UPDATE NO ACTION
) ENGINE=InnoDB DEFAULT CHARSET=latin1;

--
-- Dumping data for table `produtomovimento`
--

/*!40000 ALTER TABLE `produtomovimento` DISABLE KEYS */;
/*!40000 ALTER TABLE `produtomovimento` ENABLE KEYS */;


--
-- Definition of table `produtoprice`
--

DROP TABLE IF EXISTS `produtoprice`;
CREATE TABLE `produtoprice` (
  `idProduto` int(11) NOT NULL,
  `idloja` int(11) NOT NULL,
  `priceFull` decimal(15,3) NOT NULL DEFAULT '0.000',
  `priceVenda` decimal(15,3) NOT NULL DEFAULT '0.000',
  `pricePendente` decimal(15,3) NOT NULL DEFAULT '0.000',
  `creditoIcms` decimal(15,3) NOT NULL DEFAULT '0.000',
  `creditoRedIcms` decimal(15,3) NOT NULL DEFAULT '0.000',
  `creditoPis` decimal(5,3) NOT NULL DEFAULT '0.000',
  `creditoCofins` decimal(5,3) NOT NULL DEFAULT '0.000',
  `creditoOutros` decimal(5,3) NOT NULL DEFAULT '0.000',
  `primeiroDesconto` decimal(5,3) NOT NULL DEFAULT '0.000',
  `segundoDesconto` decimal(5,3) NOT NULL DEFAULT '0.000',
  `terceiroDesconto` decimal(5,3) NOT NULL DEFAULT '0.000',
  `debitoIcms` decimal(15,3) NOT NULL DEFAULT '0.000',
  `debitoRedIcms` decimal(15,3) NOT NULL DEFAULT '0.000',
  `lucroLiquido` decimal(15,3) NOT NULL DEFAULT '0.000',
  `lucroBruto` decimal(15,3) NOT NULL DEFAULT '0.000',
  `custoBruto` decimal(15,3) NOT NULL DEFAULT '0.000',
  `custoliquido` decimal(15,3) NOT NULL DEFAULT '0.000',
  `custoMedio` decimal(15,3) NOT NULL DEFAULT '0.000',
  `IpiPorcentagem` decimal(5,3) NOT NULL DEFAULT '0.000',
  `moedaIpi` decimal(5,3) NOT NULL DEFAULT '0.000',
  `moedaFrete` decimal(15,3) NOT NULL DEFAULT '0.000',
  `fretePorcentagem` decimal(5,3) NOT NULL DEFAULT '0.000',
  `comissao` decimal(5,3) NOT NULL DEFAULT '0.000',
  `priceSugestao` decimal(15,3) NOT NULL DEFAULT '0.000',
  `substituicaoPorcetagem` decimal(5,3) NOT NULL DEFAULT '0.000',
  `acrescimoSubstituicao` decimal(5,3) NOT NULL DEFAULT '0.000',
  `moedaSubstituicao` decimal(15,3) NOT NULL DEFAULT '0.000',
  `bonificacaoDesconto` decimal(5,3) NOT NULL DEFAULT '0.000',
  `moedaBonificacao` decimal(15,3) NOT NULL DEFAULT '0.000',
  `margem` decimal(15,3) NOT NULL DEFAULT '0.000',
  `descontoMaximo` decimal(5,3) NOT NULL DEFAULT '0.000',
  `despesasTributadas` decimal(15,3) NOT NULL DEFAULT '0.000',
  `despesaNaoTributadas` decimal(15,3) NOT NULL DEFAULT '0.000',
  `contribuicao` decimal(15,3) NOT NULL DEFAULT '0.000',
  `vendo` decimal(15,3) NOT NULL DEFAULT '0.000',
  `financeiro` decimal(15,3) NOT NULL DEFAULT '0.000',
  `despesaFixa` decimal(15,3) NOT NULL DEFAULT '0.000',
  `statusPrice` char(1) NOT NULL DEFAULT '0',
  `chaveEntrada` double DEFAULT NULL,
  `flagCompraLoja` date DEFAULT NULL,
  `origem` varchar(1) DEFAULT NULL COMMENT 'E - Entrada\nC - Compra',
  `usuarioAltCusto` int(11) DEFAULT NULL,
  `usuarioAltPrice` int(11) DEFAULT NULL,
  `pendente` varchar(1) NOT NULL DEFAULT 'N',
  `pendenteNota` varchar(10) DEFAULT NULL,
  `pendenteFornecedor` double DEFAULT NULL,
  `embalagem` int(11) DEFAULT NULL,
  `custoTransferencia` decimal(15,3) NOT NULL DEFAULT '0.000',
  `icmsFrete` decimal(15,3) NOT NULL DEFAULT '0.000',
  `acrescimo` decimal(15,3) NOT NULL DEFAULT '0.000',
  `descontoValor` decimal(15,3) NOT NULL DEFAULT '0.000',
  `validade` varchar(8) DEFAULT NULL,
  `margemBruta` decimal(15,3) NOT NULL DEFAULT '0.000',
  `margemLiquida` decimal(15,3) NOT NULL DEFAULT '0.000',
  `custoAnterior` decimal(15,3) NOT NULL DEFAULT '0.000',
  `precoVendaAnterior` decimal(15,3) NOT NULL DEFAULT '0.000',
  `margemAnterior` decimal(15,3) NOT NULL DEFAULT '0.000',
  `precoPromocao` decimal(15,3) NOT NULL DEFAULT '0.000',
  `trunca` varchar(1) NOT NULL DEFAULT 'T',
  PRIMARY KEY (`idProduto`,`idloja`),
  KEY `fk_produtoPrice_loja1` (`idloja`),
  CONSTRAINT `fk_produtoPrice_loja1` FOREIGN KEY (`idloja`) REFERENCES `loja` (`idloja`) ON DELETE NO ACTION ON UPDATE NO ACTION,
  CONSTRAINT `fk_produtoPrice_produto2` FOREIGN KEY (`idProduto`) REFERENCES `produto` (`idProduto`) ON DELETE CASCADE ON UPDATE CASCADE
) ENGINE=InnoDB DEFAULT CHARSET=latin1 COMMENT='custoTransferencia, icmsFrete, acrescimo, descontoValor,vali';

--
-- Dumping data for table `produtoprice`
--

/*!40000 ALTER TABLE `produtoprice` DISABLE KEYS */;
/*!40000 ALTER TABLE `produtoprice` ENABLE KEYS */;


--
-- Definition of trigger `produtoPrice_alt_update`
--

DROP TRIGGER /*!50030 IF EXISTS */ `produtoPrice_alt_update`;

DELIMITER $$

CREATE DEFINER = `root`@`%` TRIGGER `produtoPrice_alt_update` BEFORE UPDATE ON `produtoprice` FOR EACH ROW begin




  

        if(new.priceVenda = 0 && old.priceVenda > 0)then
            set new.priceVenda=old.priceVenda;
        end if;
        
        if(old.priceVenda <> new.priceVenda)then
                set new.precoVendaAnterior = old.priceVenda;
        end if;
        
        if(old.priceFull <> new.priceFull)then
                set new.custoAnterior = old.priceFull;
        end if;
        if(old.margemBruta <> new.margemBruta)then
                set new.margemAnterior = old.margemBruta;
        end if;
end $$

DELIMITER ;

--
-- Definition of table `produtosemb`
--

DROP TABLE IF EXISTS `produtosemb`;
CREATE TABLE `produtosemb` (
  `idprodutosEmb` int(11) NOT NULL,
  `idProduto` int(11) NOT NULL,
  PRIMARY KEY (`idprodutosEmb`),
  KEY `fk_produtosEmb_produto1` (`idProduto`),
  CONSTRAINT `fk_produtosEmb_produto1` FOREIGN KEY (`idProduto`) REFERENCES `produto` (`idProduto`) ON DELETE NO ACTION ON UPDATE NO ACTION
) ENGINE=InnoDB DEFAULT CHARSET=latin1;

--
-- Dumping data for table `produtosemb`
--

/*!40000 ALTER TABLE `produtosemb` DISABLE KEYS */;
/*!40000 ALTER TABLE `produtosemb` ENABLE KEYS */;


--
-- Definition of table `produtostore`
--

DROP TABLE IF EXISTS `produtostore`;
CREATE TABLE `produtostore` (
  `idProduto` int(11) NOT NULL,
  `idloja` int(11) NOT NULL,
  `mix` smallint(6) NOT NULL DEFAULT '0',
  PRIMARY KEY (`idProduto`,`idloja`),
  KEY `fk_produtoStore_produto1` (`idProduto`,`idloja`),
  CONSTRAINT `fk_produtoStore_produto1` FOREIGN KEY (`idProduto`) REFERENCES `produto` (`idProduto`) ON DELETE CASCADE ON UPDATE CASCADE
) ENGINE=InnoDB DEFAULT CHARSET=latin1;

--
-- Dumping data for table `produtostore`
--

/*!40000 ALTER TABLE `produtostore` DISABLE KEYS */;
/*!40000 ALTER TABLE `produtostore` ENABLE KEYS */;


--
-- Definition of table `produtovolume`
--

DROP TABLE IF EXISTS `produtovolume`;
CREATE TABLE `produtovolume` (
  `idprodutoVolume` int(11) NOT NULL,
  PRIMARY KEY (`idprodutoVolume`)
) ENGINE=InnoDB DEFAULT CHARSET=latin1;

--
-- Dumping data for table `produtovolume`
--

/*!40000 ALTER TABLE `produtovolume` DISABLE KEYS */;
/*!40000 ALTER TABLE `produtovolume` ENABLE KEYS */;


--
-- Definition of table `profissao`
--

DROP TABLE IF EXISTS `profissao`;
CREATE TABLE `profissao` (
  `idprofissao` int(11) NOT NULL,
  `descricao` varchar(45) NOT NULL,
  `status` smallint(6) DEFAULT '0',
  PRIMARY KEY (`idprofissao`)
) ENGINE=InnoDB DEFAULT CHARSET=latin1;

--
-- Dumping data for table `profissao`
--

/*!40000 ALTER TABLE `profissao` DISABLE KEYS */;
/*!40000 ALTER TABLE `profissao` ENABLE KEYS */;


--
-- Definition of table `promocao`
--

DROP TABLE IF EXISTS `promocao`;
CREATE TABLE `promocao` (
  `idPromocao` double NOT NULL AUTO_INCREMENT,
  `idProduto` int(11) NOT NULL,
  `idloja` int(11) NOT NULL,
  `dateInicial` date NOT NULL,
  `dateFinal` date DEFAULT NULL,
  `tipoPromocao` double NOT NULL,
  `qttyDisponivel` decimal(15,3) DEFAULT NULL,
  `usuarioInc` int(11) DEFAULT NULL,
  `usuarioAlt` int(11) DEFAULT NULL,
  `horaInc` time DEFAULT NULL,
  `horaAlt` time DEFAULT NULL,
  `leve` decimal(15,3) DEFAULT NULL,
  `pague` decimal(15,3) DEFAULT NULL,
  `precoVenda` decimal(15,3) NOT NULL DEFAULT '0.000',
  `precoPromocional` decimal(15,3) DEFAULT NULL,
  `idFinalizadora` int(11) DEFAULT NULL,
  `idFornecedor` double DEFAULT NULL,
  `idSetor` int(11) DEFAULT NULL,
  `idGrupo` int(11) DEFAULT NULL,
  `idCategoria` int(11) DEFAULT NULL,
  `todasFinalizadora` smallint(6) DEFAULT NULL,
  `todasLojas` smallint(6) DEFAULT NULL,
  `todosProdutos` smallint(6) DEFAULT NULL,
  `quantidadeMaxLevePague` decimal(15,3) DEFAULT NULL,
  `descontoCalc` decimal(15,3) DEFAULT NULL,
  `descontoAplicadoSetor` decimal(15,3) DEFAULT NULL,
  `custoLiquido` decimal(15,3) NOT NULL DEFAULT '0.000',
  `validade` smallint(6) NOT NULL DEFAULT '0',
  `dataAlt` date DEFAULT NULL,
  `dataInc` date DEFAULT NULL,
  `flagPromocao` varchar(1) DEFAULT 'n',
  PRIMARY KEY (`idPromocao`),
  KEY `fk_Promocao_produto1` (`idProduto`),
  KEY `fk_Promocao_loja1` (`idloja`),
  KEY `fk_Promocao_tipoPromocao1` (`tipoPromocao`),
  CONSTRAINT `fk_Promocao_loja1` FOREIGN KEY (`idloja`) REFERENCES `loja` (`idloja`) ON DELETE NO ACTION ON UPDATE NO ACTION,
  CONSTRAINT `fk_Promocao_produto1` FOREIGN KEY (`idProduto`) REFERENCES `produto` (`idProduto`) ON DELETE NO ACTION ON UPDATE NO ACTION,
  CONSTRAINT `fk_Promocao_tipoPromocao1` FOREIGN KEY (`tipoPromocao`) REFERENCES `tipopromocao` (`idtipoPromocao`) ON DELETE NO ACTION ON UPDATE NO ACTION
) ENGINE=InnoDB DEFAULT CHARSET=latin1;

--
-- Dumping data for table `promocao`
--

/*!40000 ALTER TABLE `promocao` DISABLE KEYS */;
/*!40000 ALTER TABLE `promocao` ENABLE KEYS */;


--
-- Definition of trigger `promocao_atualiza_pricePromocional`
--

DROP TRIGGER /*!50030 IF EXISTS */ `promocao_atualiza_pricePromocional`;

DELIMITER $$

CREATE DEFINER = `root`@`%` TRIGGER `promocao_atualiza_pricePromocional` BEFORE INSERT ON `promocao` FOR EACH ROW begin
      
      update produtoPrice set precoPromocao=new.precoPromocional where idProduto=new.idProduto and idLoja=new.idLoja;
end $$

DELIMITER ;

--
-- Definition of trigger `promocao_update_pricePromocional`
--

DROP TRIGGER /*!50030 IF EXISTS */ `promocao_update_pricePromocional`;

DELIMITER $$

CREATE DEFINER = `root`@`%` TRIGGER `promocao_update_pricePromocional` BEFORE UPDATE ON `promocao` FOR EACH ROW begin
    if(new.precoPromocional <> old.precoPromocional)then
        update produtoPrice set precoPromocao=new.precoPromocional where idProduto=old.idProduto and idLoja=old.idLoja;
    end if;
end $$

DELIMITER ;

--
-- Definition of trigger `promocao_remove_pricePromocional`
--

DROP TRIGGER /*!50030 IF EXISTS */ `promocao_remove_pricePromocional`;

DELIMITER $$

CREATE DEFINER = `root`@`%` TRIGGER `promocao_remove_pricePromocional` BEFORE DELETE ON `promocao` FOR EACH ROW begin
    
    update produtoPrice set precoPromocao=0 where idProduto=old.idProduto and idLoja=old.idLoja;
end $$

DELIMITER ;

--
-- Definition of table `representante`
--

DROP TABLE IF EXISTS `representante`;
CREATE TABLE `representante` (
  `idrepresentante` int(11) NOT NULL,
  `nome` varchar(30) NOT NULL,
  PRIMARY KEY (`idrepresentante`)
) ENGINE=InnoDB DEFAULT CHARSET=latin1;

--
-- Dumping data for table `representante`
--

/*!40000 ALTER TABLE `representante` DISABLE KEYS */;
/*!40000 ALTER TABLE `representante` ENABLE KEYS */;


--
-- Definition of table `rural`
--

DROP TABLE IF EXISTS `rural`;
CREATE TABLE `rural` (
  `idcliente` int(11) NOT NULL,
  `cpf` varchar(11) NOT NULL,
  `idatividade` int(11) NOT NULL,
  `nome` varchar(45) NOT NULL,
  `identidade` varchar(30) NOT NULL,
  `ie` varchar(30) NOT NULL,
  `nascimento` date NOT NULL,
  `idsexo` int(11) NOT NULL,
  `idcivil` int(11) NOT NULL,
  `idtipoFornecedor` int(11) NOT NULL DEFAULT '8',
  PRIMARY KEY (`idcliente`,`idatividade`),
  UNIQUE KEY `cpf_UNIQUE` (`cpf`),
  KEY `fk_rural_sexo1` (`idsexo`),
  KEY `fk_rural_civil1` (`idcivil`),
  CONSTRAINT `fk_rural_civil1` FOREIGN KEY (`idcivil`) REFERENCES `civil` (`idcivil`) ON DELETE NO ACTION ON UPDATE NO ACTION,
  CONSTRAINT `fk_rural_cliente1` FOREIGN KEY (`idcliente`, `idatividade`) REFERENCES `cliente` (`idcliente`, `idatividade`) ON DELETE NO ACTION ON UPDATE NO ACTION,
  CONSTRAINT `fk_rural_sexo1` FOREIGN KEY (`idsexo`) REFERENCES `sexo` (`idsexo`) ON DELETE NO ACTION ON UPDATE NO ACTION
) ENGINE=InnoDB DEFAULT CHARSET=latin1;

--
-- Dumping data for table `rural`
--

/*!40000 ALTER TABLE `rural` DISABLE KEYS */;
/*!40000 ALTER TABLE `rural` ENABLE KEYS */;


--
-- Definition of trigger `alter_exe_rural`
--

DROP TRIGGER /*!50030 IF EXISTS */ `alter_exe_rural`;

DELIMITER $$

CREATE DEFINER = `master`@`localhost` TRIGGER `alter_exe_rural` BEFORE UPDATE ON `rural` FOR EACH ROW begin
    select versaoBanco,versaoSystem,ip_mq from system into @a,@b,@c;
    select idUsuario from cliente where idCliente=new.idCliente into @d;
    
    if(new.nome <> old.nome)then
    
                call conector_exe_alt("MODULO [CLIENTE]", @d, concat("INFORMACAO OLD.: " , old.nome," INFORMACAO NEW.: ", new.nome), @c, 3,  @b, "FIELD.: NOME", old.nome);
                        else if( old.cpf <> new.cpf)then
                                    
                                    call conector_exe_alt("MODULO [CLIENTE]", @d, concat("INFORMACAO OLD.: " , old.cpf," INFORMACAO NEW.: ", new.cpf), @c, 6,  @b, "FIELD.: CPF", old.cpf);
                                    
                                                            else if( old.ie <> new.ie)then
                                    
                                                                            call conector_exe_alt("MODULO [CLIENTE]", @d, concat("INFORMACAO OLD.: " , 0," INFORMACAO NEW.: ", new.ie), @c, new.idCliente,  @b, "FIELD.: INSCRICAO ESTADUAL", new.ie);
                                                                                end if;
                        end if;
    end if;
end $$

DELIMITER ;

--
-- Definition of table `setor`
--

DROP TABLE IF EXISTS `setor`;
CREATE TABLE `setor` (
  `idsetor` int(11) NOT NULL AUTO_INCREMENT,
  `descricao` varchar(45) NOT NULL,
  `margem` decimal(15,3) NOT NULL DEFAULT '0.000',
  `status` smallint(6) NOT NULL DEFAULT '0',
  `comissao` decimal(15,3) NOT NULL DEFAULT '0.000',
  `premiacao` decimal(15,3) NOT NULL DEFAULT '0.000',
  PRIMARY KEY (`idsetor`)
) ENGINE=InnoDB DEFAULT CHARSET=latin1;

--
-- Dumping data for table `setor`
--

/*!40000 ALTER TABLE `setor` DISABLE KEYS */;
/*!40000 ALTER TABLE `setor` ENABLE KEYS */;


--
-- Definition of table `sexo`
--

DROP TABLE IF EXISTS `sexo`;
CREATE TABLE `sexo` (
  `idsexo` int(11) NOT NULL AUTO_INCREMENT,
  `descricao` varchar(30) NOT NULL,
  PRIMARY KEY (`idsexo`)
) ENGINE=InnoDB DEFAULT CHARSET=latin1;

--
-- Dumping data for table `sexo`
--

/*!40000 ALTER TABLE `sexo` DISABLE KEYS */;
/*!40000 ALTER TABLE `sexo` ENABLE KEYS */;


--
-- Definition of table `situacaofiscal`
--

DROP TABLE IF EXISTS `situacaofiscal`;
CREATE TABLE `situacaofiscal` (
  `idSituacaoFiscal` char(2) NOT NULL,
  `descricao` varchar(50) NOT NULL,
  PRIMARY KEY (`idSituacaoFiscal`)
) ENGINE=InnoDB DEFAULT CHARSET=latin1;

--
-- Dumping data for table `situacaofiscal`
--

/*!40000 ALTER TABLE `situacaofiscal` DISABLE KEYS */;
/*!40000 ALTER TABLE `situacaofiscal` ENABLE KEYS */;


--
-- Definition of table `spedgeneroitem`
--

DROP TABLE IF EXISTS `spedgeneroitem`;
CREATE TABLE `spedgeneroitem` (
  `idGenero` int(11) NOT NULL AUTO_INCREMENT,
  `codigo` varchar(3) NOT NULL,
  `descricao` varchar(200) NOT NULL,
  PRIMARY KEY (`idGenero`),
  UNIQUE KEY `codigo_UNIQUE` (`codigo`)
) ENGINE=InnoDB DEFAULT CHARSET=latin1;

--
-- Dumping data for table `spedgeneroitem`
--

/*!40000 ALTER TABLE `spedgeneroitem` DISABLE KEYS */;
/*!40000 ALTER TABLE `spedgeneroitem` ENABLE KEYS */;


--
-- Definition of table `spedmunicipio`
--

DROP TABLE IF EXISTS `spedmunicipio`;
CREATE TABLE `spedmunicipio` (
  `idspedMunicipio` int(10) unsigned NOT NULL,
  `idestado` int(11) NOT NULL,
  `municipio` varchar(45) NOT NULL,
  `unidadeFederativa` varchar(45) NOT NULL,
  PRIMARY KEY (`idspedMunicipio`),
  KEY `fk_spedMunicipio_estado1` (`idestado`),
  CONSTRAINT `fk_spedMunicipio_estado1` FOREIGN KEY (`idestado`) REFERENCES `estado` (`idestado`) ON DELETE NO ACTION ON UPDATE NO ACTION
) ENGINE=InnoDB DEFAULT CHARSET=latin1;

--
-- Dumping data for table `spedmunicipio`
--

/*!40000 ALTER TABLE `spedmunicipio` DISABLE KEYS */;
/*!40000 ALTER TABLE `spedmunicipio` ENABLE KEYS */;


--
-- Definition of table `spedncm`
--

DROP TABLE IF EXISTS `spedncm`;
CREATE TABLE `spedncm` (
  `idspedNcm` char(30) NOT NULL,
  `descricao` varchar(100) NOT NULL,
  `mvaMain` decimal(15,3) NOT NULL DEFAULT '0.000',
  `aliquotaInterestadual` decimal(15,3) NOT NULL DEFAULT '0.000',
  `aliquotaInterna` decimal(15,3) NOT NULL DEFAULT '0.000',
  `mvaAjustada` decimal(15,3) NOT NULL DEFAULT '0.000',
  `ibptax_nacionalfederal` decimal(15,3) NOT NULL DEFAULT '0.000',
  `ibptax_importadosfederal` decimal(15,3) NOT NULL DEFAULT '0.000',
  `ibptax_municipal` decimal(15,3) NOT NULL DEFAULT '0.000',
  PRIMARY KEY (`idspedNcm`)
) ENGINE=InnoDB DEFAULT CHARSET=latin1;

--
-- Dumping data for table `spedncm`
--

/*!40000 ALTER TABLE `spedncm` DISABLE KEYS */;
/*!40000 ALTER TABLE `spedncm` ENABLE KEYS */;


--
-- Definition of table `spedplanocontas`
--

DROP TABLE IF EXISTS `spedplanocontas`;
CREATE TABLE `spedplanocontas` (
  `idspedPlanoContas` int(11) NOT NULL AUTO_INCREMENT,
  `codigo` varchar(30) NOT NULL,
  `descricao` varchar(200) NOT NULL,
  PRIMARY KEY (`idspedPlanoContas`),
  UNIQUE KEY `codigo_UNIQUE` (`codigo`)
) ENGINE=InnoDB DEFAULT CHARSET=latin1;

--
-- Dumping data for table `spedplanocontas`
--

/*!40000 ALTER TABLE `spedplanocontas` DISABLE KEYS */;
/*!40000 ALTER TABLE `spedplanocontas` ENABLE KEYS */;


--
-- Definition of table `statuspdv`
--

DROP TABLE IF EXISTS `statuspdv`;
CREATE TABLE `statuspdv` (
  `idstatusPdv` int(11) NOT NULL,
  `descricao` varchar(30) NOT NULL,
  PRIMARY KEY (`idstatusPdv`)
) ENGINE=InnoDB DEFAULT CHARSET=latin1;

--
-- Dumping data for table `statuspdv`
--

/*!40000 ALTER TABLE `statuspdv` DISABLE KEYS */;
/*!40000 ALTER TABLE `statuspdv` ENABLE KEYS */;


--
-- Definition of table `statuspedido`
--

DROP TABLE IF EXISTS `statuspedido`;
CREATE TABLE `statuspedido` (
  `idStatusPedido` int(11) NOT NULL AUTO_INCREMENT,
  `descricao` varchar(12) NOT NULL,
  `movimentaEstoque` smallint(6) NOT NULL DEFAULT '1',
  `movimentaFinanceiro` smallint(6) NOT NULL DEFAULT '1',
  `servico` smallint(6) NOT NULL DEFAULT '0',
  PRIMARY KEY (`idStatusPedido`)
) ENGINE=InnoDB DEFAULT CHARSET=latin1;

--
-- Dumping data for table `statuspedido`
--

/*!40000 ALTER TABLE `statuspedido` DISABLE KEYS */;
/*!40000 ALTER TABLE `statuspedido` ENABLE KEYS */;


--
-- Definition of table `system`
--

DROP TABLE IF EXISTS `system`;
CREATE TABLE `system` (
  `idloja` int(11) NOT NULL,
  `versaoBanco` varchar(30) DEFAULT NULL,
  `versaoSystem` varchar(30) DEFAULT NULL,
  `dataInstalacao` date DEFAULT NULL,
  `razao` varchar(30) DEFAULT NULL,
  `typeEmpresa` char(1) DEFAULT NULL,
  `cnpj` varchar(14) DEFAULT NULL,
  `dataInicial` date DEFAULT NULL,
  `dataFinal` date DEFAULT NULL,
  `passwdLiberacao` varchar(30) DEFAULT NULL,
  `dataAtualizacao` date DEFAULT NULL,
  `serie` int(11) DEFAULT NULL,
  `codigoCliente` int(11) DEFAULT NULL,
  `calcMva` char(1) DEFAULT NULL,
  `impostoUnificado` char(1) DEFAULT NULL,
  `gradeFiscal` char(1) DEFAULT NULL,
  `calcFigura` char(1) DEFAULT NULL,
  `isentoForaEstado` char(1) DEFAULT NULL,
  `idAdministradora` int(11) DEFAULT NULL,
  `receberTaxa` decimal(15,3) NOT NULL DEFAULT '0.000',
  `defaultBanco` int(11) DEFAULT NULL,
  `calculaCustoMedio` smallint(6) DEFAULT '1',
  `precoPendente` char(1) DEFAULT NULL,
  `custoPendente` char(1) DEFAULT NULL,
  `updateCustoEntrada` char(1) DEFAULT NULL,
  `updatePrecoEntrada` char(1) DEFAULT NULL,
  `precoUnificado` char(1) DEFAULT NULL,
  `calculaPrecoVendaIndividual` char(1) DEFAULT NULL,
  `utilizaCustoIndividual` char(1) DEFAULT NULL,
  `utilizaOperacaoEntrada` char(1) DEFAULT NULL,
  `utilizaMargemSetor` char(1) DEFAULT NULL,
  `utilizaMargemLastProduto` char(1) DEFAULT NULL,
  `autorizaChequeJuridica` char(1) DEFAULT NULL,
  `fatorAceiteCheque` decimal(15,3) DEFAULT NULL,
  `filiacaoSPCSerasa` char(1) DEFAULT 'X',
  `caminhoFiliacao1` varchar(100) DEFAULT NULL,
  `caminhoFiliacao2` varchar(100) DEFAULT NULL,
  `caminhoFiliacao3` varchar(100) DEFAULT NULL,
  `portaSocketsFiliacao2` int(11) DEFAULT NULL,
  `trocoCartao` varchar(1) DEFAULT 's',
  `flagRecebimento` varchar(1) DEFAULT 'n',
  `flagGrandTotal` varchar(1) DEFAULT 'n',
  `flagHomologacao` varchar(1) DEFAULT 'n',
  `ip_mq` varchar(15) DEFAULT '127.0.0.1',
  `operacaoVendaCupom` varchar(3) DEFAULT '001',
  `valueTrocoCard` decimal(15,3) NOT NULL,
  `descricaoHomoloNfe` varchar(60) DEFAULT NULL,
  `tipoAmbienteNfe` varchar(1) DEFAULT 'h' COMMENT 'h - Homologacao\np - producao',
  `autorizacaoMd5` varchar(45) DEFAULT NULL,
  `conectorServer` varchar(45) NOT NULL,
  PRIMARY KEY (`idloja`)
) ENGINE=InnoDB DEFAULT CHARSET=latin1;

--
-- Dumping data for table `system`
--

/*!40000 ALTER TABLE `system` DISABLE KEYS */;
/*!40000 ALTER TABLE `system` ENABLE KEYS */;


--
-- Definition of table `tabela_produto`
--

DROP TABLE IF EXISTS `tabela_produto`;
CREATE TABLE `tabela_produto` (
  `cnpj` varchar(16) DEFAULT NULL,
  `codigo` varchar(45) DEFAULT NULL,
  `descricao` varchar(100) DEFAULT NULL,
  `unidade` varchar(4) DEFAULT NULL,
  `iat` varchar(2) DEFAULT NULL,
  `ippt` varchar(2) DEFAULT NULL,
  `situacao` varchar(3) DEFAULT NULL,
  `aliquota` varchar(3) DEFAULT NULL,
  `valor` varchar(12) DEFAULT NULL,
  `crypt` varchar(100) DEFAULT NULL
) ENGINE=InnoDB DEFAULT CHARSET=latin1;

--
-- Dumping data for table `tabela_produto`
--

/*!40000 ALTER TABLE `tabela_produto` DISABLE KEYS */;
/*!40000 ALTER TABLE `tabela_produto` ENABLE KEYS */;


--
-- Definition of table `tabela_resumo`
--

DROP TABLE IF EXISTS `tabela_resumo`;
CREATE TABLE `tabela_resumo` (
  `loja` int(11) NOT NULL,
  `dataVenda` varchar(45) DEFAULT NULL,
  `finalizadora` int(11) DEFAULT NULL,
  `descricao` varchar(45) DEFAULT NULL,
  `total` varchar(45) DEFAULT NULL,
  `cript` varchar(100) DEFAULT NULL
) ENGINE=InnoDB DEFAULT CHARSET=latin1;

--
-- Dumping data for table `tabela_resumo`
--

/*!40000 ALTER TABLE `tabela_resumo` DISABLE KEYS */;
/*!40000 ALTER TABLE `tabela_resumo` ENABLE KEYS */;


--
-- Definition of table `table_codigo`
--

DROP TABLE IF EXISTS `table_codigo`;
CREATE TABLE `table_codigo` (
  `idTable_Codigo` int(11) NOT NULL AUTO_INCREMENT,
  `codigo` varchar(3) NOT NULL,
  `idFiscal` int(11) NOT NULL,
  `descricao` varchar(45) NOT NULL,
  `modelo` varchar(3) NOT NULL,
  `origemTipo` smallint(6) NOT NULL DEFAULT '0' COMMENT '0 icms 1 ipi 2 pis 3 cofins',
  `movimentacao` smallint(6) NOT NULL DEFAULT '0' COMMENT '0 = todos\n1 = entrada\n2 = saida\n',
  `nfecstpis` varchar(3) DEFAULT NULL,
  `nfecstcofins` varchar(3) DEFAULT NULL,
  `impostoAjuste` smallint(6) DEFAULT '0' COMMENT '0 ICMS 1 ST 2 IPI',
  `observacao` varchar(100) DEFAULT NULL,
  `status` smallint(6) NOT NULL DEFAULT '0',
  `codigoAjuste` varchar(15) DEFAULT NULL,
  PRIMARY KEY (`idTable_Codigo`,`codigo`,`idFiscal`),
  KEY `fk_table_codigo_table_type_codigo1` (`idFiscal`),
  KEY `fk_table_codigo_modeloFiscal1` (`modelo`),
  CONSTRAINT `fk_table_codigo_modeloFiscal1` FOREIGN KEY (`modelo`) REFERENCES `modelofiscal` (`codigo`) ON DELETE NO ACTION ON UPDATE NO ACTION,
  CONSTRAINT `fk_table_codigo_table_type_codigo1` FOREIGN KEY (`idFiscal`) REFERENCES `table_type_codigo` (`idtable_type_codigo`) ON DELETE NO ACTION ON UPDATE NO ACTION
) ENGINE=InnoDB DEFAULT CHARSET=latin1;

--
-- Dumping data for table `table_codigo`
--

/*!40000 ALTER TABLE `table_codigo` DISABLE KEYS */;
/*!40000 ALTER TABLE `table_codigo` ENABLE KEYS */;


--
-- Definition of table `table_type_codigo`
--

DROP TABLE IF EXISTS `table_type_codigo`;
CREATE TABLE `table_type_codigo` (
  `idtable_type_codigo` int(11) NOT NULL AUTO_INCREMENT,
  `descricao` varchar(100) NOT NULL,
  PRIMARY KEY (`idtable_type_codigo`)
) ENGINE=InnoDB DEFAULT CHARSET=latin1;

--
-- Dumping data for table `table_type_codigo`
--

/*!40000 ALTER TABLE `table_type_codigo` DISABLE KEYS */;
/*!40000 ALTER TABLE `table_type_codigo` ENABLE KEYS */;


--
-- Definition of table `tableprice`
--

DROP TABLE IF EXISTS `tableprice`;
CREATE TABLE `tableprice` (
  `idmetodo` int(11) NOT NULL,
  `idParcelamento` int(11) NOT NULL,
  `indice` decimal(15,5) NOT NULL DEFAULT '0.00000',
  PRIMARY KEY (`idmetodo`,`idParcelamento`),
  KEY `fk_metodoParcelas_metodo1` (`idmetodo`),
  CONSTRAINT `fk_metodoParcelas_metodo10` FOREIGN KEY (`idmetodo`) REFERENCES `metodo` (`idmetodo`) ON DELETE CASCADE ON UPDATE CASCADE
) ENGINE=InnoDB DEFAULT CHARSET=latin1;

--
-- Dumping data for table `tableprice`
--

/*!40000 ALTER TABLE `tableprice` DISABLE KEYS */;
/*!40000 ALTER TABLE `tableprice` ENABLE KEYS */;


--
-- Definition of table `tefinst`
--

DROP TABLE IF EXISTS `tefinst`;
CREATE TABLE `tefinst` (
  `idtefInst` double NOT NULL AUTO_INCREMENT,
  `numeroCupom` double NOT NULL,
  `idloja` int(11) NOT NULL,
  `terminal` int(11) NOT NULL,
  `dataVenda` date NOT NULL,
  `situacao` varchar(1) DEFAULT NULL,
  `00300` varchar(12) DEFAULT NULL COMMENT 'VALOR TOTAL',
  `01000` varchar(8) DEFAULT NULL COMMENT 'NOME DA REDE\nConteúdos Válidos:\nBANRISUL\nTECBAN\nBRCARD\nREDE\nVISANET',
  `01100` varchar(2) DEFAULT NULL COMMENT 'TIPO DA TRANSAÇÃO\n00- Administrativas – Outras (Reimpressão, Iniciação de Terminal etc.)\n01- Administrativa – Fechamento/Transmissão de Lote\n10- Cartão de Crédito à Vista\n11- Cartão de Crédito Parcelado pelo Estabelecimento\n12- Cartão de Crédito Parcelado pela Administradora\n13- Pré-Autorização com Cartão de Crédito\n20- Cartão de Débito à Vista\n21- Cartão de Débito Pré-Datado\n22- Cartão de Débito Parcelada\n23- Cartão de Débito à Vista Forçada\n24- Cartão de Débito Pré-Datado Forçada\n25- Cartão de Débito Pré-Datado sem Garantia\n30- Outros Cartões\n40- CDC\n41- Consulta CDC\n50- Convênio\n60- Voucher\n70- Consulta Cheque',
  `01700` varchar(1) DEFAULT NULL,
  `01800` varchar(2) DEFAULT NULL,
  PRIMARY KEY (`idtefInst`,`numeroCupom`,`idloja`,`terminal`,`dataVenda`),
  KEY `fk_tefInst_cupom_movimento1` (`numeroCupom`,`idloja`,`terminal`,`dataVenda`),
  CONSTRAINT `fk_tefInst_cupom_movimento1` FOREIGN KEY (`numeroCupom`, `idloja`, `terminal`, `dataVenda`) REFERENCES `conectorpdv`.`cupom_movimento` (`numeroCupom`, `loja`, `terminal`, `dataVenda`) ON DELETE NO ACTION ON UPDATE NO ACTION
) ENGINE=InnoDB DEFAULT CHARSET=latin1;

--
-- Dumping data for table `tefinst`
--

/*!40000 ALTER TABLE `tefinst` DISABLE KEYS */;
/*!40000 ALTER TABLE `tefinst` ENABLE KEYS */;


--
-- Definition of table `temp`
--

DROP TABLE IF EXISTS `temp`;
CREATE TABLE `temp` (
  `barra` double NOT NULL,
  `ncm` varchar(45) DEFAULT NULL,
  `preco` decimal(15,3) DEFAULT NULL,
  `venda` decimal(15,3) DEFAULT NULL,
  `margem` decimal(15,3) DEFAULT NULL
) ENGINE=InnoDB DEFAULT CHARSET=latin1;

--
-- Dumping data for table `temp`
--

/*!40000 ALTER TABLE `temp` DISABLE KEYS */;
/*!40000 ALTER TABLE `temp` ENABLE KEYS */;


--
-- Definition of table `terminal`
--

DROP TABLE IF EXISTS `terminal`;
CREATE TABLE `terminal` (
  `idterminal` int(11) NOT NULL AUTO_INCREMENT,
  `idloja` int(11) NOT NULL,
  `idtypeTerminal` int(11) NOT NULL,
  `descricao` varchar(12) NOT NULL,
  `flagDesconto` smallint(6) NOT NULL DEFAULT '1',
  `status` smallint(6) NOT NULL,
  `operacao` int(11) DEFAULT NULL,
  `multiTarefa` smallint(6) NOT NULL DEFAULT '0',
  PRIMARY KEY (`idterminal`,`idloja`,`idtypeTerminal`),
  KEY `fk_terminal_loja1` (`idloja`),
  KEY `fk_terminal_typeTerminal1` (`idtypeTerminal`),
  CONSTRAINT `fk_terminal_loja1` FOREIGN KEY (`idloja`) REFERENCES `loja` (`idloja`) ON DELETE NO ACTION ON UPDATE NO ACTION,
  CONSTRAINT `fk_terminal_typeTerminal1` FOREIGN KEY (`idtypeTerminal`) REFERENCES `typeterminal` (`idtypeTerminal`) ON DELETE NO ACTION ON UPDATE NO ACTION
) ENGINE=InnoDB DEFAULT CHARSET=latin1;

--
-- Dumping data for table `terminal`
--

/*!40000 ALTER TABLE `terminal` DISABLE KEYS */;
/*!40000 ALTER TABLE `terminal` ENABLE KEYS */;


--
-- Definition of table `terminalecfconfig`
--

DROP TABLE IF EXISTS `terminalecfconfig`;
CREATE TABLE `terminalecfconfig` (
  `terminal` int(11) NOT NULL,
  `caixa` int(11) NOT NULL,
  `ipCaixa` varchar(16) NOT NULL DEFAULT '127.0.0.1',
  `abeturaTroco` smallint(6) DEFAULT NULL,
  `imprimiCheque` smallint(6) DEFAULT NULL,
  `timeBlock` int(11) DEFAULT NULL,
  `blockTime` smallint(6) DEFAULT NULL,
  `trocaMercadoria` smallint(6) DEFAULT NULL,
  `carneRecebe` smallint(6) DEFAULT NULL,
  `codigoEmpresaTef` varchar(20) DEFAULT NULL,
  `trocoMax` decimal(15,3) DEFAULT NULL,
  `serie` varchar(40) DEFAULT NULL,
  `utilizaTeclado` smallint(6) NOT NULL DEFAULT '1',
  `utilizaTef` smallint(6) NOT NULL DEFAULT '0',
  `utilizaBalanca` smallint(6) NOT NULL DEFAULT '0',
  `utilizaEcf` smallint(6) NOT NULL DEFAULT '0',
  `portTef` varchar(15) DEFAULT NULL,
  `portBalanca` varchar(15) DEFAULT NULL,
  `portEcf` varchar(15) DEFAULT NULL,
  `funcaoProgramada` varchar(1) DEFAULT NULL COMMENT '0 Arredonda\n1 Trunca',
  `msgTef` varchar(30) DEFAULT NULL,
  `idModeloEcf` int(11) DEFAULT NULL,
  `statusPdv` int(11) NOT NULL,
  `autentica` smallint(6) NOT NULL DEFAULT '1',
  `emiteVinculo` smallint(6) DEFAULT '1',
  `vinculoCrediario` smallint(6) DEFAULT '0',
  `vinculoConvenio` smallint(6) DEFAULT '0',
  `vinculoCartaoCredito` smallint(6) DEFAULT '1',
  `vinculoCartaoDebito` smallint(6) DEFAULT '1',
  `typeTef` smallint(6) NOT NULL DEFAULT '0' COMMENT '0 Discado\n1 Dedicado',
  `alertaSangria` smallint(5) unsigned DEFAULT NULL,
  `valueSangria` decimal(15,3) DEFAULT NULL,
  PRIMARY KEY (`terminal`,`caixa`),
  KEY `fk_terminalEcfCofins_statusPdv1` (`statusPdv`),
  CONSTRAINT `fk_terminalEcfCofins_statusPdv1` FOREIGN KEY (`statusPdv`) REFERENCES `statuspdv` (`idstatusPdv`) ON DELETE NO ACTION ON UPDATE NO ACTION,
  CONSTRAINT `fk_terminalEcfCofins_terminal1` FOREIGN KEY (`terminal`) REFERENCES `terminal` (`idterminal`) ON DELETE CASCADE ON UPDATE CASCADE
) ENGINE=InnoDB DEFAULT CHARSET=latin1;

--
-- Dumping data for table `terminalecfconfig`
--

/*!40000 ALTER TABLE `terminalecfconfig` DISABLE KEYS */;
/*!40000 ALTER TABLE `terminalecfconfig` ENABLE KEYS */;


--
-- Definition of table `tesouraria`
--

DROP TABLE IF EXISTS `tesouraria`;
CREATE TABLE `tesouraria` (
  `idtesouraria` double NOT NULL AUTO_INCREMENT,
  `idfinalizadora` int(11) NOT NULL,
  `idterminal` int(11) NOT NULL,
  `valorInformado` decimal(15,3) NOT NULL,
  `valorApurado` decimal(15,3) NOT NULL,
  `quebra` decimal(15,3) NOT NULL,
  `operador` int(11) NOT NULL,
  `idloja` int(11) NOT NULL,
  `fechamento` smallint(6) NOT NULL DEFAULT '0' COMMENT '0 - aberta\n1 - fechado',
  `emissao` date NOT NULL,
  `tipo` varchar(3) NOT NULL,
  `documentoFiscal` decimal(15,3) NOT NULL DEFAULT '0.000',
  PRIMARY KEY (`idtesouraria`),
  KEY `fk_tesouraria_finalizadora1` (`idfinalizadora`),
  KEY `fk_tesouraria_terminal1` (`idterminal`),
  KEY `fk_tesouraria_loja1` (`idloja`),
  CONSTRAINT `fk_tesouraria_finalizadora1` FOREIGN KEY (`idfinalizadora`) REFERENCES `finalizadora` (`idfinalizadora`) ON DELETE NO ACTION ON UPDATE NO ACTION,
  CONSTRAINT `fk_tesouraria_loja1` FOREIGN KEY (`idloja`) REFERENCES `loja` (`idloja`) ON DELETE NO ACTION ON UPDATE NO ACTION,
  CONSTRAINT `fk_tesouraria_terminal1` FOREIGN KEY (`idterminal`) REFERENCES `terminal` (`idterminal`) ON DELETE NO ACTION ON UPDATE NO ACTION
) ENGINE=InnoDB DEFAULT CHARSET=latin1;

--
-- Dumping data for table `tesouraria`
--

/*!40000 ALTER TABLE `tesouraria` DISABLE KEYS */;
/*!40000 ALTER TABLE `tesouraria` ENABLE KEYS */;


--
-- Definition of trigger `tesouraria_informado_update`
--

DROP TRIGGER /*!50030 IF EXISTS */ `tesouraria_informado_update`;

DELIMITER $$

CREATE DEFINER = `root`@`%` TRIGGER `tesouraria_informado_update` BEFORE UPDATE ON `tesouraria` FOR EACH ROW begin
   if(new.valorApurado = old.valorApurado)then
   set new.quebra = new.valorInformado - new.valorApurado;
   end if;
end $$

DELIMITER ;

--
-- Definition of table `tipocontaspagar`
--

DROP TABLE IF EXISTS `tipocontaspagar`;
CREATE TABLE `tipocontaspagar` (
  `idtipoContasPagar` int(11) NOT NULL,
  `descricao` varchar(40) NOT NULL,
  `participaSped` smallint(6) NOT NULL DEFAULT '0',
  PRIMARY KEY (`idtipoContasPagar`)
) ENGINE=InnoDB DEFAULT CHARSET=latin1;

--
-- Dumping data for table `tipocontaspagar`
--

/*!40000 ALTER TABLE `tipocontaspagar` DISABLE KEYS */;
/*!40000 ALTER TABLE `tipocontaspagar` ENABLE KEYS */;


--
-- Definition of table `tipofornecedor`
--

DROP TABLE IF EXISTS `tipofornecedor`;
CREATE TABLE `tipofornecedor` (
  `idtipoFornecedor` int(11) NOT NULL AUTO_INCREMENT,
  `descricao` varchar(45) NOT NULL,
  PRIMARY KEY (`idtipoFornecedor`)
) ENGINE=InnoDB DEFAULT CHARSET=latin1;

--
-- Dumping data for table `tipofornecedor`
--

/*!40000 ALTER TABLE `tipofornecedor` DISABLE KEYS */;
/*!40000 ALTER TABLE `tipofornecedor` ENABLE KEYS */;


--
-- Definition of table `tipopessoa`
--

DROP TABLE IF EXISTS `tipopessoa`;
CREATE TABLE `tipopessoa` (
  `idtipoPessoa` int(11) NOT NULL AUTO_INCREMENT,
  `descricao` varchar(30) NOT NULL,
  PRIMARY KEY (`idtipoPessoa`)
) ENGINE=InnoDB DEFAULT CHARSET=latin1;

--
-- Dumping data for table `tipopessoa`
--

/*!40000 ALTER TABLE `tipopessoa` DISABLE KEYS */;
/*!40000 ALTER TABLE `tipopessoa` ENABLE KEYS */;


--
-- Definition of table `tipopromocao`
--

DROP TABLE IF EXISTS `tipopromocao`;
CREATE TABLE `tipopromocao` (
  `idtipoPromocao` double NOT NULL AUTO_INCREMENT,
  `descricao` varchar(45) NOT NULL,
  PRIMARY KEY (`idtipoPromocao`)
) ENGINE=InnoDB DEFAULT CHARSET=latin1;

--
-- Dumping data for table `tipopromocao`
--

/*!40000 ALTER TABLE `tipopromocao` DISABLE KEYS */;
/*!40000 ALTER TABLE `tipopromocao` ENABLE KEYS */;


--
-- Definition of table `tipoveiculo`
--

DROP TABLE IF EXISTS `tipoveiculo`;
CREATE TABLE `tipoveiculo` (
  `idTipoVeiculo` int(11) NOT NULL AUTO_INCREMENT,
  `descricao` varchar(30) NOT NULL,
  PRIMARY KEY (`idTipoVeiculo`)
) ENGINE=InnoDB DEFAULT CHARSET=latin1;

--
-- Dumping data for table `tipoveiculo`
--

/*!40000 ALTER TABLE `tipoveiculo` DISABLE KEYS */;
/*!40000 ALTER TABLE `tipoveiculo` ENABLE KEYS */;


--
-- Definition of table `transportadora`
--

DROP TABLE IF EXISTS `transportadora`;
CREATE TABLE `transportadora` (
  `idtransportadora` int(11) NOT NULL,
  `razao` varchar(40) NOT NULL,
  `cnpj` varchar(14) NOT NULL,
  `ie` varchar(30) NOT NULL,
  `abreviatura` varchar(12) DEFAULT NULL,
  `cep` int(11) DEFAULT NULL,
  `idspedMunicipio` int(10) NOT NULL,
  `status` smallint(6) NOT NULL DEFAULT '0',
  `bairro` varchar(45) DEFAULT NULL,
  `logradouro` varchar(45) DEFAULT NULL,
  `complemento` varchar(60) DEFAULT NULL,
  `municipio` varchar(45) NOT NULL,
  `numero` int(11) NOT NULL DEFAULT '0',
  `idestado` int(11) NOT NULL,
  `uf` char(2) NOT NULL,
  `idloja` double NOT NULL,
  PRIMARY KEY (`idtransportadora`),
  UNIQUE KEY `cnpj_UNIQUE` (`cnpj`),
  KEY `fk_transportadora_estado1` (`idestado`,`uf`),
  CONSTRAINT `fk_transportadora_estado1` FOREIGN KEY (`idestado`, `uf`) REFERENCES `estado` (`idestado`, `uf`) ON DELETE NO ACTION ON UPDATE NO ACTION
) ENGINE=InnoDB DEFAULT CHARSET=latin1;

--
-- Dumping data for table `transportadora`
--

/*!40000 ALTER TABLE `transportadora` DISABLE KEYS */;
/*!40000 ALTER TABLE `transportadora` ENABLE KEYS */;


--
-- Definition of trigger `transportadoraCliente_last_insert`
--

DROP TRIGGER /*!50030 IF EXISTS */ `transportadoraCliente_last_insert`;

DELIMITER $$

CREATE DEFINER = `master`@`localhost` TRIGGER `transportadoraCliente_last_insert` AFTER INSERT ON `transportadora` FOR EACH ROW begin

 SELECT count(*),idCliente FROM juridica where cnpj=NEW.cnpj into @a, @b;
if(@a = 0)then
    SELECT (ifnull(auto_increment,1)) FROM information_schema.`TABLES` where table_schema='conector' and table_name='cliente' into @chaveCliente;
        else
            set @chaveCliente = @b;
            end if;
            
if(@a = 0)then
insert into
		cliente
			(
				idloja,
				idtipoPessoa,
				idusuario,
				idatividade,
				observacao,
				dataEmissao,
				dataAlteracao,
				idestado,
				uf,
        status,
        idspedMunicipio
			)	values
			(
				new.idLoja,
				2,
				1,
				5,
				"",
				now(),
				now(),
				new.idestado,
				new.uf,
        new.status,
        new.idSpedMunicipio
			);

    

        CALL conector_inc_juridica(new.idTransportadora,new.cnpj,5,new.razao,new.abreviatura,new.ie,now(),4);
end if;    
end $$

DELIMITER ;

--
-- Definition of table `tributacao`
--

DROP TABLE IF EXISTS `tributacao`;
CREATE TABLE `tributacao` (
  `idtributacao` char(3) NOT NULL,
  `idaliquota` char(2) NOT NULL,
  `descricao` varchar(30) NOT NULL DEFAULT '0',
  `impressora` int(11) NOT NULL DEFAULT '0',
  `chave` int(11) NOT NULL AUTO_INCREMENT,
  `converti` varchar(5) NOT NULL,
  `idHardware` int(11) NOT NULL,
  PRIMARY KEY (`chave`,`idaliquota`),
  KEY `fk_tributacao_aliquota1` (`idaliquota`),
  KEY `fk_tributacao_hardware_ecf1` (`idHardware`),
  CONSTRAINT `fk_tributacao_aliquota1` FOREIGN KEY (`idaliquota`) REFERENCES `aliquota` (`idaliquota`) ON DELETE NO ACTION ON UPDATE NO ACTION,
  CONSTRAINT `fk_tributacao_hardware_ecf1` FOREIGN KEY (`idHardware`) REFERENCES `hardware_ecf` (`idhardware_ecf`) ON DELETE NO ACTION ON UPDATE NO ACTION
) ENGINE=InnoDB DEFAULT CHARSET=latin1;

--
-- Dumping data for table `tributacao`
--

/*!40000 ALTER TABLE `tributacao` DISABLE KEYS */;
/*!40000 ALTER TABLE `tributacao` ENABLE KEYS */;


--
-- Definition of table `typecartao`
--

DROP TABLE IF EXISTS `typecartao`;
CREATE TABLE `typecartao` (
  `idtypeCartao` int(11) NOT NULL,
  `Descricao` varchar(30) NOT NULL,
  PRIMARY KEY (`idtypeCartao`)
) ENGINE=InnoDB DEFAULT CHARSET=latin1;

--
-- Dumping data for table `typecartao`
--

/*!40000 ALTER TABLE `typecartao` DISABLE KEYS */;
/*!40000 ALTER TABLE `typecartao` ENABLE KEYS */;


--
-- Definition of table `typecomissao`
--

DROP TABLE IF EXISTS `typecomissao`;
CREATE TABLE `typecomissao` (
  `idtypeComissao` int(11) NOT NULL AUTO_INCREMENT,
  `descricao` varchar(30) NOT NULL,
  PRIMARY KEY (`idtypeComissao`)
) ENGINE=InnoDB DEFAULT CHARSET=latin1;

--
-- Dumping data for table `typecomissao`
--

/*!40000 ALTER TABLE `typecomissao` DISABLE KEYS */;
/*!40000 ALTER TABLE `typecomissao` ENABLE KEYS */;


--
-- Definition of table `typehistorico`
--

DROP TABLE IF EXISTS `typehistorico`;
CREATE TABLE `typehistorico` (
  `typeHistorico` int(11) NOT NULL,
  `rotina` varchar(30) NOT NULL,
  PRIMARY KEY (`typeHistorico`)
) ENGINE=InnoDB DEFAULT CHARSET=latin1;

--
-- Dumping data for table `typehistorico`
--

/*!40000 ALTER TABLE `typehistorico` DISABLE KEYS */;
/*!40000 ALTER TABLE `typehistorico` ENABLE KEYS */;


--
-- Definition of table `typeitem`
--

DROP TABLE IF EXISTS `typeitem`;
CREATE TABLE `typeitem` (
  `idtypeItem` varchar(2) NOT NULL,
  `descricao` varchar(30) NOT NULL,
  PRIMARY KEY (`idtypeItem`)
) ENGINE=InnoDB DEFAULT CHARSET=latin1;

--
-- Dumping data for table `typeitem`
--

/*!40000 ALTER TABLE `typeitem` DISABLE KEYS */;
/*!40000 ALTER TABLE `typeitem` ENABLE KEYS */;


--
-- Definition of table `typelancamento`
--

DROP TABLE IF EXISTS `typelancamento`;
CREATE TABLE `typelancamento` (
  `idtypeLancamento` char(2) NOT NULL,
  `descricao` varchar(45) NOT NULL,
  PRIMARY KEY (`idtypeLancamento`)
) ENGINE=InnoDB DEFAULT CHARSET=latin1;

--
-- Dumping data for table `typelancamento`
--

/*!40000 ALTER TABLE `typelancamento` DISABLE KEYS */;
/*!40000 ALTER TABLE `typelancamento` ENABLE KEYS */;


--
-- Definition of table `typemovimentacao`
--

DROP TABLE IF EXISTS `typemovimentacao`;
CREATE TABLE `typemovimentacao` (
  `idtypeMovimentacao` int(11) NOT NULL,
  `descricao` varchar(30) NOT NULL,
  PRIMARY KEY (`idtypeMovimentacao`)
) ENGINE=InnoDB DEFAULT CHARSET=latin1;

--
-- Dumping data for table `typemovimentacao`
--

/*!40000 ALTER TABLE `typemovimentacao` DISABLE KEYS */;
/*!40000 ALTER TABLE `typemovimentacao` ENABLE KEYS */;


--
-- Definition of table `typereferencia`
--

DROP TABLE IF EXISTS `typereferencia`;
CREATE TABLE `typereferencia` (
  `idtypeReferencia` int(11) NOT NULL,
  `descricao` varchar(30) NOT NULL,
  PRIMARY KEY (`idtypeReferencia`)
) ENGINE=InnoDB DEFAULT CHARSET=latin1;

--
-- Dumping data for table `typereferencia`
--

/*!40000 ALTER TABLE `typereferencia` DISABLE KEYS */;
/*!40000 ALTER TABLE `typereferencia` ENABLE KEYS */;


--
-- Definition of table `typeterminal`
--

DROP TABLE IF EXISTS `typeterminal`;
CREATE TABLE `typeterminal` (
  `idtypeTerminal` int(11) NOT NULL AUTO_INCREMENT,
  `descricao` varchar(30) NOT NULL,
  PRIMARY KEY (`idtypeTerminal`)
) ENGINE=InnoDB DEFAULT CHARSET=latin1;

--
-- Dumping data for table `typeterminal`
--

/*!40000 ALTER TABLE `typeterminal` DISABLE KEYS */;
/*!40000 ALTER TABLE `typeterminal` ENABLE KEYS */;


--
-- Definition of table `unidademedida`
--

DROP TABLE IF EXISTS `unidademedida`;
CREATE TABLE `unidademedida` (
  `idunidadeMedida` int(11) NOT NULL AUTO_INCREMENT,
  `descricao` varchar(45) NOT NULL,
  `unidade` char(8) NOT NULL,
  PRIMARY KEY (`idunidadeMedida`),
  UNIQUE KEY `unidade_UNIQUE` (`unidade`)
) ENGINE=InnoDB DEFAULT CHARSET=latin1;

--
-- Dumping data for table `unidademedida`
--

/*!40000 ALTER TABLE `unidademedida` DISABLE KEYS */;
/*!40000 ALTER TABLE `unidademedida` ENABLE KEYS */;


--
-- Definition of table `usuario`
--

DROP TABLE IF EXISTS `usuario`;
CREATE TABLE `usuario` (
  `idusuario` int(11) NOT NULL AUTO_INCREMENT,
  `descricao` varchar(45) NOT NULL,
  `login` char(15) NOT NULL,
  `passwd` varbinary(128) NOT NULL,
  `terminalVenda` smallint(6) NOT NULL DEFAULT '0',
  `terminalConsulta` smallint(6) NOT NULL DEFAULT '0',
  `terminalECF` smallint(6) NOT NULL DEFAULT '0',
  `terminalAnaliseCredito` smallint(6) NOT NULL DEFAULT '0',
  `terminalMataBurro` smallint(6) NOT NULL DEFAULT '0',
  `status` smallint(6) NOT NULL DEFAULT '0',
  `supervisor` smallint(6) NOT NULL DEFAULT '0',
  `cadastro` date NOT NULL,
  `onlyLogon` char(1) NOT NULL DEFAULT 'n',
  `defaultLoja` int(11) NOT NULL DEFAULT '0',
  PRIMARY KEY (`idusuario`),
  UNIQUE KEY `passwd_UNIQUE` (`passwd`)
) ENGINE=InnoDB DEFAULT CHARSET=latin1;

--
-- Dumping data for table `usuario`
--

/*!40000 ALTER TABLE `usuario` DISABLE KEYS */;
/*!40000 ALTER TABLE `usuario` ENABLE KEYS */;


--
-- Definition of table `veiculo`
--

DROP TABLE IF EXISTS `veiculo`;
CREATE TABLE `veiculo` (
  `idveiculo` int(11) NOT NULL AUTO_INCREMENT,
  `idtipoVeiculo` int(11) NOT NULL,
  `descricao` varchar(45) NOT NULL,
  `placa` varchar(12) NOT NULL,
  `uf` varchar(2) NOT NULL,
  `rntc` varchar(45) DEFAULT NULL,
  PRIMARY KEY (`idveiculo`),
  KEY `fk_veiculo_tipoVeiculo1` (`idtipoVeiculo`),
  CONSTRAINT `fk_veiculo_tipoVeiculo1` FOREIGN KEY (`idtipoVeiculo`) REFERENCES `tipoveiculo` (`idTipoVeiculo`) ON DELETE NO ACTION ON UPDATE NO ACTION
) ENGINE=InnoDB DEFAULT CHARSET=latin1;

--
-- Dumping data for table `veiculo`
--

/*!40000 ALTER TABLE `veiculo` DISABLE KEYS */;
/*!40000 ALTER TABLE `veiculo` ENABLE KEYS */;


--
-- Definition of table `view_tributacao`
--

DROP TABLE IF EXISTS `view_tributacao`;
CREATE TABLE `view_tributacao` (
  `idtributacao` char(3) DEFAULT NULL,
  `idaliquota` char(2) DEFAULT NULL,
  `descricao` varchar(30) DEFAULT NULL
) ENGINE=MyISAM DEFAULT CHARSET=utf8;

--
-- Dumping data for table `view_tributacao`
--

/*!40000 ALTER TABLE `view_tributacao` DISABLE KEYS */;
/*!40000 ALTER TABLE `view_tributacao` ENABLE KEYS */;


--
-- Definition of function `reserva_calc`
--

DROP FUNCTION IF EXISTS `reserva_calc`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='' */ $$
CREATE DEFINER=`master`@`localhost` FUNCTION `reserva_calc`(tipo int, chave_produto int, chave_loja int, chave_pedido double) RETURNS decimal(15,3)
begin
DECLARE qtty numeric(15,3);
DECLARE priceLiquido numeric(15,3);
DECLARE priceBruto numeric(15,3);
DECLARE desconto numeric(15,3);
DECLARE priceNota numeric(15,3);

case tipo
  when 1 then
      set qtty = (select round(sum(quantidade),3) as TotalItensReserva from pedidoItens where idLoja=chave_loja and idPedido = chave_pedido);
        return qtty;
  when 2 then
      set priceLiquido = (select round(sum(pedidoItens.priceLiquido),3) from pedidoItens where  idLoja=chave_loja and idPedido = chave_pedido);
        return priceLiquido;
  when 3 then
      set priceBruto = (select round(sum(pedidoItens.quantidade*pedidoItens.price),3) from pedidoItens where idLoja=chave_loja and idPedido = chave_pedido);
        return priceBruto;
  when 4 then
      set desconto = (select ((round(sum(pedidoItens.quantidade*pedidoItens.price),3))-(round(sum(pedidoItens.priceLiquido),3))) from pedidoItens where idLoja=chave_loja and idPedido = chave_pedido);
        return desconto;
  when 5 then
      set priceNota = (select round(sum(pedidoItens.priceLiquido),3) from pedidoItens where idLoja=chave_loja and idPedido = chave_pedido);
        return priceNota;

  else
      return 0;
end case;
end $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of function `reserva_calc1`
--

DROP FUNCTION IF EXISTS `reserva_calc1`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='' */ $$
CREATE DEFINER=`master`@`localhost` FUNCTION `reserva_calc1`(tipo int, chave_produto int, chave_loja int, chave_pedido double) RETURNS decimal(15,3)
begin
DECLARE qtty numeric(15,3);
DECLARE priceLiquido numeric(15,3);
DECLARE priceBruto numeric(15,3);
DECLARE desconto numeric(15,3);
DECLARE priceNota numeric(15,3);

case tipo
  when 1 then
      set qtty = (select round(sum(quantidade),3) as TotalItensReserva from pedidoItens where idProduto=chave_produto and idLoja=chave_loja and idPedido = chave_pedido);
  when 2 then
      set priceLiquido = (select round(sum(pedidoItens.priceLiquido),3) from pedidoItens where idLoja=chave_loja and idPedido = chave_pedido);
  when 3 then
      set priceBruto = (select round(sum(pedidoItens.quantidade*pedidoItens.price),3) from pedidoItens where idLoja=chave_loja and idPedido = chave_pedido);
  when 4 then
      set desconto = (select ((round(sum(pedidoItens.quantidade*pedidoItens.price),3))-(round(sum(pedidoItens.priceLiquido),3))) from pedidoItens where idLoja=chave_loja and idPedido = chave_pedido);
  when 5 then
      set priceNota = (select round(sum(pedidoItens.priceLiquido),3) from pedidoItens where idLoja=chave_loja and idPedido = chave_pedido);

  else
      return 0;
end case;
return qtty;
end $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of function `reserva_itens`
--

DROP FUNCTION IF EXISTS `reserva_itens`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='' */ $$
CREATE DEFINER=`root`@`localhost` FUNCTION `reserva_itens`(chave_produto double, chave_loja double) RETURNS decimal(15,3)
begin

DECLARE qttyReserva numeric(15,3);
DECLARE qttyFiscal numeric(15,3);
DECLARE qtty numeric(15,3);

set qttyReserva = (select round(coalesce(sum(tab.quantidade),0),3) as TotalReservadoItens from pedidoItens tab

                                                inner join pedido tab1 on(tab.idPedido = tab1.idPedido and tab.idLoja  = tab1.idloja)

                                                inner join produto tab2 on(tab.idProduto =  tab2.idProduto)

                                                inner join produtoEmbalagem tab3 on(tab.idProduto =  tab3.idProduto)

                                                        where tab3.barra=chave_produto and tab.idLoja=chave_loja and tab1.final in(0,1,7) and tab1.expiracao >= now());
set qttyFiscal = (select round(coalesce(sum(tab.quantidade),0),3) as TotalReservadoItens from pedidoItens tab

                                                inner join pedido tab1 on(tab.idPedido = tab1.idPedido and tab.idLoja  = tab1.idloja)

                                                inner join produto tab2 on(tab.idProduto =  tab2.idProduto)

                                                inner join produtoEmbalagem tab3 on(tab.idProduto =  tab3.idProduto)

                                                        where tab3.barra=chave_produto and tab.idLoja=chave_loja and tab1.final in(2,3));

set qtty = qttyReserva + qttyFiscal;

              return (qtty);
end $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of function `reserva_status`
--

DROP FUNCTION IF EXISTS `reserva_status`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='' */ $$
CREATE DEFINER=`master`@`localhost` FUNCTION `reserva_status`(chave_item double, chave_loja double) RETURNS int(11)
begin
DECLARE qtty int;
set qtty = (select COUNT(idProduto) as confere from pedidoItens where idPedido=chave_item and idLoja=chave_loja and situacao=4);
return (qtty);
end $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of function `vencimento_calc`
--

DROP FUNCTION IF EXISTS `vencimento_calc`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='' */ $$
CREATE DEFINER=`master`@`localhost` FUNCTION `vencimento_calc`(dae date, number int, tipo int) RETURNS varchar(10) CHARSET latin1
begin

  declare vdia int;
  declare vmes int;
  declare vano int;
  declare vencimento varchar(10);
select mid(date_format(dae,'%d/%m/%Y'),1,2) as dia,
       mid(date_format(dae,'%d/%m/%Y'),4,2) as mes,
       mid(date_format(dae,'%d/%m/%Y'),7,4) as ano
       into vdia,vmes,vano; 
       
  call conector_valida_dateTime(vdia,vmes,vano,@dia,@mes,@ano);

  case tipo
  when 1 then 
    set @dia = number;
    set vencimento=(select concat(@ano,'-',@mes,'-',@dia));
    return vencimento;
  else
      return 0;
end case;
end $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `conectorPDV_carrega_registroD`
--

DROP PROCEDURE IF EXISTS `conectorPDV_carrega_registroD`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='' */ $$
CREATE DEFINER=`root`@`localhost` PROCEDURE `conectorPDV_carrega_registroD`(tipo smallint, di date, df date, chave varchar(45))
begin
select numeroSerie,
       tab2.modelo,
       tab.cnpj,
       tab2.marca,
       tab2.tipo,
       ifnull(tab3.md_adicional,"") as adicional
       from CONECTORPDV.licenca_ecf tab, CONECTORPDV.nr_pdv tab1, CONECTORPDV.modelo_ecf tab2, CONECTORPDV.software_info tab3, CONECTORPDV.loja tab4
					where tab.cnpj = tab4.cnpj and tab.cnpj = tab3.cnpj and tab.caixa = tab1.nr_pdv and tab.modelo = tab2.idMarca
													into @serie, @modelo, @cnpj, @marca, @tipo, @adicional;
case tipo
  when 1 then

replace INTO `conector`.`dav02`
(
`d01`,
`d02`,
`d03`,
`d04`,
`d05`,
`d06`,
`d07`,
`d08`,
`d09`,
`d10`,
`d11`,
`d12`,
`d13`,
`d14`,
`d15`,
`d16`,
`d17`)
 SELECT ifnull(@cnpj,""),
        ifnull(@serie,""),
        ifnull(@adicional,""),
        ifnull(@tipo,""),
        ifnull(@marca,""),
        ifnull(@modelo,""),
        ifnull(tab1.numeroCupom,if(nota.nr_nota is not null,nota.nr_nota, "000000000")) as 'COO', 
       tab.SEQUENCIADAV,
       date_format(tab.emissao,'%d%m%Y'),
       if(cupom.dav is not null,'DANFE NFCe',
       case tab2.flagParamentro when 'v' then 'VENDA'
                                when 'd' then 'DEVOLUCAO'
                                when 'o' then 'ORCAMENTO'
                                when 'r' then 'TROCA'
                                when 'b' then 'BRINDE'
                                when 's' then 'S. FATURAMENTO' else 'DESCONHECIDO' end),
       round(truncate(tab.valorTotal,2)*100),
      if(cupom.numeroCupom is not null, cupom.numeroCupom,"0")  AS COO_VIN,
      "000000" AS sequencia,
       case tab3.idTipoPessoa
                  when 1 then
                    tab4.nome
                  when 2 then
                    tab5.razao
                  when 3 then
                    tab6.nome end,
       case tab3.idTipoPessoa
                  when 1 then
                    tab4.cpf
                  when 2 then
                    tab5.cnpj
                  when 3 then
                    tab6.cpf end, "" as cripto, password(concat(ifnull(@cnpj,""),
        ifnull(@serie,""),
        ifnull(@adicional,""),
        ifnull(@tipo,""),
        ifnull(@marca,""),
        ifnull(@modelo,""),
        ifnull(tab1.numeroCupom,if(nota.nr_nota is not null,nota.nr_nota, "000000000")),
       tab.SEQUENCIADAV,
       date_format(tab.emissao,'%d%m%Y'),
       if(cupom.dav is not null,'DANFE NFCe',
       case tab2.flagParamentro when 'v' then 'VENDA'
                                when 'd' then 'DEVOLUCAO'
                                when 'o' then 'ORCAMENTO'
                                when 'r' then 'TROCA'
                                when 'b' then 'BRINDE'
                                when 's' then 'S. FATURAMENTO' else 'DESCONHECIDO' end),
       round(truncate(tab.valorTotal,2)*100),
      if(cupom.numeroCupom is not null, cupom.numeroCupom,"0"),
      "000000",
       case tab3.idTipoPessoa
                  when 1 then
                    tab4.nome
                  when 2 then
                    tab5.razao
                  when 3 then
                    tab6.nome end,
       case tab3.idTipoPessoa
                  when 1 then
                    tab4.cpf
                  when 2 then
                    tab5.cnpj
                  when 3 then
                    tab6.cpf end, ""))

        FROM conector.pedido tab
              left join conectorPDV.cupom_cabecalho tab1 on(tab.idpedido = tab1.Pedido AND tab.emissao = tab1.dataVenda)
              left join conectorPDV.cupom_relatorio cupom on(tab.sequenciaDAV = cupom.dav)
              left join conectorpdv.paramentro_faturamento tab2 on(tab.idParamentro = tab2.idParamentro)
              left join conectorPDV.cliente tab3 on(tab.idCliente = tab3.idCliente)
              left join conectorPDV.fisica tab4 on(tab3.idCliente = tab4.idCliente)
              left join conectorPDV.juridica tab5 on(tab3.idCliente = tab5.idCliente)
              left join conectorPDV.rural tab6 on(tab3.idCliente = tab6.idCliente)
              left join conectorPDV.pedido_temp temp on(tab.sequenciaDav=temp.sequenciaDav)
              left join conectorPDV.nf nota on(temp.idPedido = nota.idPedido) 
                        where tab.emissao = di AND
                        tab.flagFormaFinalizacao='D' and tab.flagCaixa=0 and tab.sequenciaDAV = chave ORDER BY 2;
    when 2 then

replace INTO `conector`.`dav03`
(
`d01`,
`d02`,
`d03`,
`d04`,
`d05`,
`d06`,
`d07`,
`d08`,
`d09`,
`d10`,
`d11`,
`d12`,
`d13`,
`d14`,
`d15`,
`d16`,
`d17`,`d18`)
select
       tab.sequenciaDav,
       date_format(tab.emissao,'%d%m%Y'),
       tab2.sequencial,
       tab2.idProduto,
       tab4.nome,
       round(tab2.quantidade*1000),
       tab5.unidade,
       round(truncate(tab2.price,2)*100),
       round(truncate(tab2.valorDiscount,2)*100),
       0 as Acres,
       round(truncate(tab2.priceLiquido,2)*100),
       Upper(aliquota.tipo),
       ROUND(round(aliquota.aliquota-(aliquota.aliquota*(aliquota.reducao/100)),2)*100),
       if(tab2.situacao=0,'S','N') AS "Cancelamento",
       if(tab4.tipo=0,2,3) as Casas_dec_qtty,
       if(tab4.tipo=0,2,3) as Casas_dec_valor,"", password(concat(       tab.sequenciaDav,
       date_format(tab.emissao,'%d%m%Y'),
       tab2.sequencial,
       tab2.idProduto,
       tab4.nome,
       round(tab2.quantidade*1000),
       tab5.unidade,
       round(truncate(tab2.price,2)*100),
       round(truncate(tab2.valorDiscount,2)*100),
       "0",
       round(truncate(tab2.priceLiquido,2)*100),
       Upper(aliquota.tipo),
       ROUND(round(aliquota.aliquota-(aliquota.aliquota*(aliquota.reducao/100)),2)*100),
       if(tab2.situacao=0,'S','N'),
       if(tab4.tipo=0,2,3),
       if(tab4.tipo=0,2,3)))
               from conector.pedido tab

                        left join conector.pedidoItens tab2 on(tab.idPedido=tab2.idPedido )
                        left join conectorPDV.cupom_cabecalho tab3 on(tab.idPedido = tab3.pedido)
                        left join conectorPDV.produto tab4 on(tab2.idProduto = tab4.idProduto)
                        left join conectorPDV.unidadeMedida tab5 on(tab4.idUnidade = tab5.idUnidadeMedida)
                        left join conectorPDV.produtoImpostos tab6 on(tab2.idProduto = tab6.idProduto and tab.idLoja = tab6.idLoja)
                        left join conectorPDV.aliquota on(tab6.tributacao = aliquota.idAliquota)
                                    where  sequenciaDav is not null and emissao=di AND tab.sequenciaDav=chave order by 2,1,3;
    when 3 then

replace INTO `conector`.`dav04`
(
`d01`,
`d02`,
`d03`,
`d04`,
`d05`,
`d06`,
`d07`,
`d08`,
`d09`,
`d10`,
`d11`,
`d12`,
`d13`,
`d14`,
`d15`,
`d16`,
`d17`,
`d18`,
`d19`)select
       tab.sequenciaDav,
       ifnull(date_format(log_master.data_alteracao,'%d%m%Y'),ifnull(date_format(log_slave.data_alteracao,'%d%m%Y'),date_format(now(),'%d%m%Y'))),
       ifnull(date_format(log_master.hora_alteracao, '%h%m%s'),ifnull(date_format(log_slave.hora_alteracao, '%h%m%s'),date_format(now(), '%h%m%s'))),
       tab2.idProduto,
       tab4.nome,
       round(tab2.quantidade*1000),
       tab5.unidade,
       round(truncate(tab2.price,2)*100),
       round(truncate(tab2.valorDiscount,2)*100),
       0 as Acres,
       round(truncate(tab2.priceLiquido,2)*100),
       Upper(aliquota.tipo),
       ROUND(round(aliquota.aliquota-(aliquota.aliquota*(aliquota.reducao/100)),2)*100),
       if(tab2.situacao=0,'S','N') AS "Cancelamento",
       if(tab4.tipo=0,2,3) as Casas_dec_qtty,
       if(tab4.tipo=0,2,3) as Casas_dec_valor,ifnull(log_master.tipoAlteracao,log_slave.tipoAlteracao),"", password(concat(tab.sequenciaDav,
       ifnull(date_format(log_master.data_alteracao,'%d%m%Y'),date_format(log_slave.data_alteracao,'%d%m%Y')),
       ifnull(date_format(log_master.hora_alteracao, '%h%m%s'),date_format(log_slave.hora_alteracao, '%h%m%s')),
       tab2.idProduto,
       tab4.nome,
       round(tab2.quantidade*1000),
       tab5.unidade,
       round(truncate(tab2.price,2)*100),
       round(truncate(tab2.valorDiscount,2)*100),
       0,
       round(truncate(tab2.priceLiquido,2)*100),
       Upper(aliquota.tipo),
       ROUND(round(aliquota.aliquota-(aliquota.aliquota*(aliquota.reducao/100)),2)*100),
       if(tab2.situacao=0,'S','N'),
       if(tab4.tipo=0,2,3),
       if(tab4.tipo=0,2,3),ifnull(log_master.tipoAlteracao,log_slave.tipoAlteracao),""))
               from conector.pedido tab

                        left join conector.pedidoItens tab2 on(tab.idPedido=tab2.idPedido )
                        left join conectorPDV.cupom_cabecalho tab3 on(tab.idPedido = tab3.pedido)
                        left join conectorPDV.produto tab4 on(tab2.idProduto = tab4.idProduto)
                        left join conectorPDV.unidadeMedida tab5 on(tab4.idUnidade = tab5.idUnidadeMedida)
                        left join conectorPDV.produtoImpostos tab6 on(tab2.idProduto = tab6.idProduto and tab.idLoja = tab6.idLoja)
                        left join conectorPDV.aliquota on(tab6.tributacao = aliquota.idAliquota)
                        left join (SELECT tab.sequenciaDav,
                                          tab1.idProduto,
                                          tab1.sequencial,
                                          tab1.data_alteracao,
                                          hora_alteracao,
                                          tab1.idLoja,
                                          tab1.tipoAlteracao,
                                          tab1.indicador_canc FROM conectorPDV.pedido_temp tab
                              inner join conectorPDV.pedido_log_temp tab1 on(tab.idPedido = tab1.idPedido)
                               where tab.emissao=di) log_master on(tab.sequenciaDav = log_master.sequenciaDav and
                                                                           tab2.idProduto = log_master.idProduto and
                                                                           tab2.sequencial = log_master.sequencial)
                        left join (SELECT tab.idPedido,
                                             tab.sequenciaDav,
                                         tab1.idProduto,
                                         tab1.sequencial,
                                         tab1.data_alteracao,
                                         hora_alteracao,
                                         tab1.idLoja,
                                         tab1.tipoAlteracao,
                                         tab1.indicador_canc FROM conectorPDV.pedido tab
                                inner join conector.pedido_log tab1 on(tab.idPedido = tab1.idPedido)
                                 where tab.emissao=di) log_slave on(tab.sequenciaDav = log_slave.sequenciaDav and
                                                                           tab2.idProduto = log_slave.idProduto and
                                                                           tab2.sequencial = log_slave.sequencial)
                                    where  tab.sequenciaDav is not null and emissao=di  and tab.sequenciaDAV=chave order by 2,1,3;
end case;
end $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `conectorPDV_EFD_008`
--

DROP PROCEDURE IF EXISTS `conectorPDV_EFD_008`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='' */ $$
CREATE DEFINER=`master`@`localhost` PROCEDURE `conectorPDV_EFD_008`(tipo varchar(4), find_loja double, find_pessoa double, di date, df date, dateInv date, finalidade varchar(1), perfil varchar(1), atividade int,
                                                                    call_creditos smallint, call_debitos_nf smallint, call_debitos_cp smallint, invmovH int)
begin
case tipo
  when '0000' then
select '009' as Versao,
        1 as Finali,
       date_format(di,'%d%m%Y'),
       date_format(df,'%d%m%Y'),
       loja.razao,
       loja.CNPJ,
       "" as CPF,
       loja.UF,
       loja.IE,
       loja.codigoMunicipio,
       loja.IEmunicipal,
       "" as SUPRAMA,
       perfil AS PERFIL,
       atividade as tipo_atividade

                from loja
                     where idLoja = find_loja;
    when '0001' then

    select if(finalidade='A',0,1);

    when '0005' then

SELECT abreviatura,
       cep,
       logradouro,
       numero,
       endereco.complemento,
       bairro,
       concat(ifnull(mid(tab4.ddd,3,2),'000'), ifnull(tab4.telefone,'')) as Fone,
       concat(ifnull(mid(tab6.ddd,3,2),'000'),ifnull(tab6.telefone,'')) as Fax,
       tab5.mail

      from loja tab
      left join endereco on(tab.idloja = endereco.idcliente)
      left join estado tab3 on(endereco.estado = tab3.uf)
      left join(select tab.idCliente, tab.ddd, tab.telefone from fone tab
                                      inner join loja on(tab.idCliente = loja.idLoja)
                                      where tab.idFoneType=1 and tab.idCliente=find_loja) tab4 on(tab.idLoja = tab4.idCliente)
      left join (select email.idCliente,
       email.mail
        from email
             inner join loja on(email.idCliente = loja.idLoja)
                                 where loja.idLoja=find_loja and email.padrao=1) tab5 on(tab.idLoja = tab5.idCliente)
      left join(select tab.idCliente, tab.ddd, tab.telefone from fone tab
                                      inner join loja on(tab.idCliente = loja.idLoja)
                                      where tab.idFoneType=2 and tab.idCliente=find_loja) tab6 on(tab.idLoja = tab6.idCliente)
  where
       tab.idloja=find_loja;
    when '0100' then
  select max(cep) from funcionario_endereco where idFuncionario=find_pessoa into @find_cep;
  select cepCity.nome,cepbairro.idestado from cepbairro inner join cepCity on(cepbairro.idcepCity = cepCity.idcepCity) inner join estado on(cepbairro.idestado=estado.idestado) where cepbairro.cep = @find_cep into @a, @c;
  set @b = (select ifnull(idspedMunicipio,0) as cod_municipio from spedmunicipio where municipio like concat(@a,"%")  and idEstado=@c);
  SELECT tab.nome,
       tab.cpf,
       tab.crc,
       ifnull(contador_cnpj,'') as cnpj_obrigatorio,
       ifnull(tab1.cep,0),
       ifnull(tab1.logradouro,''),
       ifnull(tab1.numero,''),
       ifnull(tab1.complemento,''),
       ifnull(tab1.bairro,''),
       concat(mid((ifnull(tab2.ddd,'0000')),3,2),ifnull(tab2.telefone,'00000000')),
       concat(mid((ifnull(tab3.ddd,'0000')),3,2),ifnull(tab3.telefone,'00000000')) as fax,
       ifnull(tab.email,''),
       ifnull(@b,"")
                  from funcionario tab
               left join funcionario_endereco tab1 on(tab.idFuncionario = tab1.idFuncionario)
               left join funcionario_fone tab2 on(tab.idFuncionario = tab2.idFuncionario and tab2.idfonetype=1)
               left join (select idFuncionario,telefone, ddd from  funcionario_fone where idFonetype=2) tab3 on(tab.idFuncionario = tab3.idFuncionario)
                                           where tab.idFuncao=10 and tab.idFuncionario=find_pessoa;
    when '0150' then
select * from (
(select
	distinct tab.idcliente as chave,
    case tab.idtipoPessoa when 1 then tab1.nome
                          when 2 then tab2.razao
                          when 3 then tab3.nome end Nome_Razao,
    pais.codReceita,
    case tab.idtipoPessoa when 2 then tab2.cnpj
                          else '' end _CNPJ,
    case tab.idtipoPessoa when 1 then tab1.cpf
                          when 3 then tab3.cpf_1 else '' end _CPF,
    case tab.idtipoPessoa when 2 then tab2.ie
                          when 3 then tab3.ie else '' end Ie,
    ifnull(idSpedMunicipio,""),
    "" as SUPRAMA,
    ifnull(tab6.logradouro,""),
    ifnull(tab6.numero,""),
    ifnull(tab6.complemento,""),
    ifnull(tab6.bairro,"")

from
	cliente tab
  inner join tipoPessoa tp on(tab.idTipoPessoa = tp.idTipoPessoa)
  inner join loja on(tab.idloja = loja.idloja)
  left join pais on(tab.idPais = pais.idPais)
	left join fisica tab1 on(tab.idcliente = tab1.idcliente)
	left join juridica tab2 on(tab.idcliente = tab2.idcliente)
	left join (select rural.idcliente,rural.cpf as cpf_1,rural.nome,rural.nascimento,rural.ie,rural.idsexo,rural.identidade,rural.idcivil,sexo.descricao as sexo1,civil.descricao as civil1 from rural
                inner join sexo on(rural.idsexo = sexo.idsexo)
                inner join civil on(rural.idcivil = civil.idcivil)) as tab3
        		on(tab.idcliente = tab3.idcliente)
	left join sexo tab4 on(tab1.idsexo = tab4.idsexo)
	left join civil tab5 on(tab1.idcivil = tab5.idcivil)
  left join endereco tab6 on(tab.idCliente = tab6.idCLiente and tab6.idEnderecoType=1)
  left join nf on(tab.idCliente = nf.idCliente and nf.statusNf=1 and nf.modNotaFiscal in('01','04','55','1B'))
  left join cupom_cabecalho on(tab.idCliente = cupom_cabecalho.cliente and perfil='A')
  left join entrada on(tab.idCliente = entrada.idCliente and entrada.idLoja=find_loja)
where
    (
     tab2.cnpj is not null or
     tab1.cpf  is not null or
     tab3.cpf_1 is not null
    ) and (nf.emissao between di and df  ||
      cupom_cabecalho.dataVenda between di and df ||
      entrada.emissao between di and df) AND nf.serie not in ('X','x')) union distinct
  (select distinct tab.idAdministradora,
        tab.razao,
        pais.codReceita,
        tab.cnpj,
        '' as cpf,
        tab.ie,
        ifnull(tab3.idSpedMunicipio,0),
        "" as SUPRAMA,
        tab.rua,
        tab.numero,
        "",
        tab.bairro

        from administradora tab

             inner join cartao tab1 on(tab.idAdministradora = tab1.idAdministradora)
             inner join cliente tab2 on(tab.idAdministradora = tab2.idCliente)
             left join pais on(tab2.idPais = pais.idPais)
             left join (select idAdministradora,
                               idSpedMunicipio
                                            from administradora tab
                                             inner join spedMunicipio tab1 on(tab.municipio = tab1.municipio)) tab3 on(tab.idAdministradora = tab3.idAdministradora)
             where tab1.emissao between di and df and tab1.idLoja=find_loja and
             (coalesce(cupom,0) > 0 || coalesce(pedido,0)>0 || coalesce(chave_nota,0) > 0))) as history group by 1;
     when '0175' then
  select date_format(data,'%d%m%Y'), chaveorigem, cont_ant, chavepai from log where data >= di and data <= df and operacao in('MODULO [CLIENTE]','MODULO [ENDERECO]');
     when '0190' then
select distinct tab.unidade,upper(tab1.descricao)
        from cupom_detalhes tab
             inner join unidadeMedida tab1 on(tab.unidade = tab1.unidade)
               where tab.dataVenda >= di and tab.dataVenda <= df and tab.loja=find_loja union
select distinct tab2.unidade,upper(tab2.descricao)
        from nfitem tab
              inner join produtoEmbalagem tab1 on(tab.idProduto = tab1.idProduto)
              inner join unidadeMedida tab2 on(tab1.idUnidadeMedida = tab2.idUnidadeMedida)
               where tab.data >= di and tab.data <= df union
select distinct tab2.unidade,upper(tab2.descricao)
        from entradaItem tab
              inner join produtoEmbalagem tab1 on(tab.idProduto = tab1.idProduto)
              inner join unidadeMedida tab2 on(tab1.idUnidadeMedida = tab2.idUnidadeMedida)
               where tab.dateInsert >= di and tab.dateInsert <= df;
      when '0200' then
select distinct tab.idProduto,
                tab.nome,
                tab2.barra,
                if(lg.chavePai is not null, lg.chavePai,""),
                tab1.unidade,
                tab6.idtypeItem,
                tab6.spedNcm,
                "0" as tipi,
                tab6.idGenero,
                "" as cod_lst,
                ifnull(cast(converti/100 AS DECIMAL(10,2)),'0.00'),
                date_format(tab.dataAlteracao, '%d%m%Y')
         from produto tab
left join log lg on(tab.idProduto = lg.chavePai and tab.dataAlteracao=lg.data)
             inner join unidadeMedida tab1 on(tab.idunidade = tab1.idunidadeMedida)
             inner join produtoEmbalagem tab2 on(tab.idproduto = tab2.idproduto)
             inner join produtoStore tab3 on(tab.idproduto = tab3.idproduto)
             inner join produtoPrice tab4 on(tab.idproduto = tab4.idproduto)
             inner join produtoEstoques tab5 on(tab.idproduto = tab5.idproduto)
             inner join produtoImpostos tab6 on(tab.idProduto = tab6.idProduto)
             left join (select idUsuario, descricao from usuario order by 1) as tab7 on(tab.idUsuario = tab7.idUsuario)
             inner join juridica on(tab.idFornecedor = juridica.idcliente)
             left join spedNcm on(tab6.spedNcm =spedNcm.idSpedNcm)
             left join spedGeneroItem on(tab6.idGenero =spedGeneroItem.idGenero)
             left join cst on(tab6.cst = cst.idCst)
             left join pisCofins on(tab6.idpisCofins = pisCofins.idpisCofins)
             left join aliquota on (tab6.tributacao = aliquota.idAliquota)
             left join tributacao on(aliquota.idAliquota = tributacao.idAliquota)
             left join typeItem on(tab6.idTypeItem = typeItem.idTypeItem)
             left join cupom_detalhes suv on(tab.idProduto = suv.produto  and suv.loja=find_loja and suv.dataVenda between di and df)
             left join (select  tab1.idProduto, tab.loja, tab.emissao, tab1.idNf from nf tab
                                      inner join nfItem tab1 on(tab.nf = tab1.idNf) where tab.serie not in ('X','x')) suv1 on(tab.idProduto = suv1.idproduto and suv1.Loja=find_loja and suv1.emissao between di and df)
             left join (select tab.entrada, tab.idLoja, tab1.idProduto, tab.idEntrada from entrada tab
                                      inner join entradaItem tab1 on(tab.idEntrada = tab1.idEntrada) where tab.serie not in ('X','x')) suv2 on(tab.idProduto = suv2.idproduto and suv2.idLoja=find_loja and suv2.entrada between di and df)
             where if(invmovH != 0,(suv.numerocupom is not null or suv2.idEntrada is not null or suv1.idNf is not null),1=1) and tab2.defaultVenda='s';
     when '0205' then
  select cont_ant,date_format(di,'%d%m%Y'),date_format(df,'%d%m%Y'), chaveorigem, chavePai, date_format(log.data,'%d%m%Y') from log where data >= di and data <= df and operacao in('MODULO [PRODUTO]');

      when '0400' then

select distinct nf.idParamentro, tab.descricao
        from nf
             inner join paramentro_faturamento tab on(nf.idParamentro = tab.idParamentro)
                             where nf.serie not in ('X','x') and  nf.emissao >=di and nf.emissao <= df and nf.Loja=find_loja and nf.statusNF=1 union
select distinct
          tab.idOperacao, tab1.descricao
        from entrada tab
             inner join operacaoentrada tab1 on(tab.idOperacao = tab1.idOperacao)
                              where tab.emissao >=di and tab.emissao <= df and tab.idLoja=find_loja;

  WHEN '0990' then
select count(*) from (
	select '009' as Versao,
        1 as Finali,
       date_format(di,'%d%m%Y'),
       date_format(df,'%d%m%Y'),
       loja.razao,
       loja.CNPJ,
       "" as CPF,
       loja.UF,
       loja.IE,
       loja.codigoMunicipio,
       loja.IEmunicipal,
       "" as SUPRAMA,
       perfil AS PERFIL,
       atividade as tipo_atividade

                from loja
                     where idLoja = find_loja
) as sub0000 into @a;


select count(*) from (
	select if(finalidade='A',0,1)
) as sub0001 into @b;

select count(*) from (
	SELECT abreviatura,
       cep,
       logradouro,
       numero,
       endereco.complemento,
       bairro,
       concat(ifnull(mid(tab4.ddd,3,2),'000'), ifnull(tab4.telefone,'')) as Fone,
       concat(ifnull(mid(tab6.ddd,3,2),'000'),ifnull(tab6.telefone,'')) as Fax,
       tab5.mail

      from loja tab
      left join endereco on(tab.idloja = endereco.idcliente)
      left join estado tab3 on(endereco.estado = tab3.uf)
      left join(select tab.idCliente, tab.ddd, tab.telefone from fone tab
                                      inner join loja on(tab.idCliente = loja.idLoja)
                                      where tab.idFoneType=1 and tab.idCliente=find_loja) tab4 on(tab.idLoja = tab4.idCliente)
      left join (select email.idCliente,
       email.mail
        from email
             inner join loja on(email.idCliente = loja.idLoja)
                                 where loja.idLoja=find_loja and email.padrao=1) tab5 on(tab.idLoja = tab5.idCliente)
      left join(select tab.idCliente, tab.ddd, tab.telefone from fone tab
                                      inner join loja on(tab.idCliente = loja.idLoja)
                                      where tab.idFoneType=2 and tab.idCliente=find_loja) tab6 on(tab.idLoja = tab6.idCliente)
  where
       tab.idloja=find_loja

) as sub0005  into @c;

  select max(cep) from funcionario_endereco where idFuncionario=find_pessoa into @find_cep;
  select cepCity.nome,cepbairro.idestado from cepbairro inner join cepCity on(cepbairro.idcepCity = cepCity.idcepCity) inner join estado on(cepbairro.idestado=estado.idestado) where cepbairro.cep = @find_cep into @z, @x;
  set @w = (select ifnull(idspedMunicipio,0) as cod_municipio from spedmunicipio where municipio like concat(@z,"%")  and idEstado=@x);

select count(*) from (
  SELECT tab.nome,
       tab.cpf,
       tab.crc,
       ifnull(contador_cnpj,'') as cnpj_obrigatorio,
       ifnull(tab1.cep,0),
       ifnull(tab1.logradouro,''),
       ifnull(tab1.numero,''),
       ifnull(tab1.complemento,''),
       ifnull(tab1.bairro,''),
       concat(mid((ifnull(tab2.ddd,'0000')),3,2),ifnull(tab2.telefone,'')),
       concat(mid((ifnull(tab3.ddd,'0000')),3,2),ifnull(tab3.telefone,'')) as fax,
       ifnull(tab.email,''),
       ifnull(@w,"")
                  from funcionario tab
               left join funcionario_endereco tab1 on(tab.idFuncionario = tab1.idFuncionario)
               left join funcionario_fone tab2 on(tab.idFuncionario = tab2.idFuncionario and tab2.idfonetype=1)
               left join (select idFuncionario,telefone, ddd from  funcionario_fone where idFonetype=2) tab3 on(tab.idFuncionario = tab3.idFuncionario)
                                           where tab.idFuncao=10 and tab.idFuncionario=find_pessoa
) as sub0100 into @d;

select count(*) from (
select
	distinct tab.idcliente as chave,
    case tab.idtipoPessoa when 1 then tab1.nome
                          when 2 then tab2.razao
                          when 3 then tab3.nome end Nome_Razao,
    pais.codReceita,
    case tab.idtipoPessoa when 2 then tab2.cnpj
                          else '' end _CNPJ,
    case tab.idtipoPessoa when 1 then tab1.cpf
                          when 3 then tab3.cpf_1 else '' end _CPF,
    case tab.idtipoPessoa when 2 then tab2.ie
                          when 3 then tab3.ie else '' end Ie,
    ifnull(idSpedMunicipio,""),
    "" as SUPRAMA,
    ifnull(tab6.logradouro,""),
    ifnull(tab6.numero,""),
    ifnull(tab6.complemento,""),
    ifnull(tab6.bairro,"")

from
	cliente tab
  inner join tipoPessoa tp on(tab.idTipoPessoa = tp.idTipoPessoa)
  inner join loja on(tab.idloja = loja.idloja)
  left join pais on(tab.idPais = pais.idPais)
	left join fisica tab1 on(tab.idcliente = tab1.idcliente)
	left join juridica tab2 on(tab.idcliente = tab2.idcliente)
	left join (select rural.idcliente,rural.cpf as cpf_1,rural.nome,rural.nascimento,rural.ie,rural.idsexo,rural.identidade,rural.idcivil,sexo.descricao as sexo1,civil.descricao as civil1 from rural
                inner join sexo on(rural.idsexo = sexo.idsexo)
                inner join civil on(rural.idcivil = civil.idcivil)) as tab3
        		on(tab.idcliente = tab3.idcliente)
	left join sexo tab4 on(tab1.idsexo = tab4.idsexo)
	left join civil tab5 on(tab1.idcivil = tab5.idcivil)
  left join endereco tab6 on(tab.idCliente = tab6.idCLiente and tab6.idEnderecoType=1)
  left join nf on(tab.idCliente = nf.idCliente and nf.statusNf=1)
  left join cupom_cabecalho on(tab.idCliente = cupom_cabecalho.cliente)
  left join entrada on(tab.idCliente = entrada.idCliente and entrada.idLoja=find_loja)
where
    (
     tab2.cnpj is not null or
     tab1.cpf  is not null or
     tab3.cpf_1 is not null
    ) and (nf.emissao between di and df  ||
      cupom_cabecalho.dataVenda between di and df ||
      entrada.emissao between di and df) AND nf.serie not in ('X','x') union
  select distinct tab.idAdministradora,
        tab.razao,
        pais.codReceita,
        tab.cnpj,
        '' as cpf,
        tab.ie,
        ifnull(tab3.idSpedMunicipio,0),
        "" as SUPRAMA,
        tab.rua,
        tab.numero,
        "",
        tab.bairro

        from administradora tab

             inner join cartao tab1 on(tab.idAdministradora = tab1.idAdministradora)
             inner join cliente tab2 on(tab.idAdministradora = tab2.idCliente)
             left join pais on(tab2.idPais = pais.idPais)
             left join (select idAdministradora,
                               idSpedMunicipio
                                            from administradora tab
                                             inner join spedMunicipio tab1 on(tab.municipio = tab1.municipio)) tab3 on(tab.idAdministradora = tab3.idAdministradora)
             where tab1.emissao between di and df and tab1.idLoja=find_loja and
             (coalesce(cupom,0) > 0 || coalesce(pedido,0)>0 || coalesce(chave_nota,0) > 0)
) as sub0150 into @e;

select count(*) from (
select date_format(data,'%d%m%Y'), chaveorigem, cont_ant, chavepai from log where data >= di and data <= df and operacao in('MODULO [CLIENTE]','MODULO [ENDERECO]')
) as sub0175 into @f;

select count(*) from (
	select distinct tab.unidade,upper(tab1.descricao)
        from cupom_detalhes tab
             inner join unidadeMedida tab1 on(tab.unidade = tab1.unidade)
               where tab.dataVenda >= di and tab.dataVenda <= df and tab.loja=find_loja union
select distinct tab2.unidade,upper(tab2.descricao)
        from nfitem tab
              inner join produtoEmbalagem tab1 on(tab.idProduto = tab1.idProduto)
              inner join unidadeMedida tab2 on(tab1.idUnidadeMedida = tab2.idUnidadeMedida)
               where tab.data >= di and tab.data <= df union
select distinct tab2.unidade,upper(tab2.descricao)
        from entradaItem tab
              inner join produtoEmbalagem tab1 on(tab.idProduto = tab1.idProduto)
              inner join unidadeMedida tab2 on(tab1.idUnidadeMedida = tab2.idUnidadeMedida)
               where tab.dateInsert >= di and tab.dateInsert <= df
) as sub0190 into @g;

select count(*) from (
select distinct tab.idProduto as test,
                tab.nome,
                tab2.barra,
                tab.idProduto,
                tab1.unidade,
                tab6.idtypeItem,
                tab6.spedNcm,
                "0" as tipi,
                tab6.idGenero,
                "" as cod_lst,
                ifnull(cast(converti/100 AS DECIMAL(10,2)),'0.00'),
                date_format(tab.dataAlteracao, '%d%m%Y')
         from produto tab
             inner join unidadeMedida tab1 on(tab.idunidade = tab1.idunidadeMedida)
             inner join produtoEmbalagem tab2 on(tab.idproduto = tab2.idproduto)
             inner join produtoStore tab3 on(tab.idproduto = tab3.idproduto)
             inner join produtoPrice tab4 on(tab.idproduto = tab4.idproduto)
             inner join produtoEstoques tab5 on(tab.idproduto = tab5.idproduto)
             inner join produtoImpostos tab6 on(tab.idProduto = tab6.idProduto)
             left join (select idUsuario, descricao from usuario order by 1) as tab7 on(tab.idUsuario = tab7.idUsuario)
             inner join juridica on(tab.idFornecedor = juridica.idcliente)
             left join spedNcm on(tab6.spedNcm =spedNcm.idSpedNcm)
             left join spedGeneroItem on(tab6.idGenero =spedGeneroItem.idGenero)
             left join cst on(tab6.cst = cst.idCst)
             left join pisCofins on(tab6.idpisCofins = pisCofins.idpisCofins)
             left join aliquota on (tab6.tributacao = aliquota.idAliquota)
             left join tributacao on(aliquota.idAliquota = tributacao.idAliquota)
             left join typeItem on(tab6.idTypeItem = typeItem.idTypeItem)
             left join cupom_detalhes suv on(tab.idProduto = suv.produto  and suv.loja=find_loja and suv.dataVenda between di and df)
             left join (select  tab1.idProduto, tab.loja, tab.emissao, tab1.idNf from nf tab
                                      inner join nfItem tab1 on(tab.nf = tab1.idNf) where tab.serie not in ('X','x')) suv1 on(tab.idProduto = suv1.idproduto and suv1.Loja=find_loja and suv1.emissao between di and df)
             left join (select tab.entrada, tab.idLoja, tab1.idProduto, tab.idEntrada from entrada tab
                                      inner join entradaItem tab1 on(tab.idEntrada = tab1.idEntrada) where tab.serie not in ('X','x')) suv2 on(tab.idProduto = suv2.idproduto and suv2.idLoja=find_loja and suv2.entrada between di and df)
             where (suv.numerocupom is not null or suv2.idEntrada is not null or suv1.idNf is not null) and tab2.defaultVenda='s'
) as sub0200 into @h;


select count(*) from ( 
	select cont_ant,date_format(di,'%d%m%Y'),date_format(df,'%d%m%Y'), chaveorigem, chavePai, date_format(log.data,'%d%m%Y') from log where data >= di and data <= df and operacao in('MODULO [PRODUTO]')
) as sub0250 into @i;


select count(*) from (
select distinct concat(1,nf.idParamentro), tab.descricao
        from nf
             inner join paramentro_faturamento tab on(nf.idParamentro = tab.idParamentro)
                             where nf.serie not in ('X','x') and  nf.emissao >=di and nf.emissao <= df and nf.Loja=find_loja and nf.statusNF=1 union
select distinct
          concat(2,tab.idOperacao), tab1.descricao
        from entrada tab
             inner join operacaoentrada tab1 on(tab.idOperacao = tab1.idOperacao)
                              where tab.emissao >=di and tab.emissao <= df and tab.idLoja=find_loja
) as sub0400 into @j;

  select @a+@b+@c+@d+@e+@f+@g+@h+@i+@j+1 as bloco_0;

      when 'C001' then

        select if(finalidade='A',0,1);

      when 'C100' then
select distinct tab.nf,
       tab.typeNf,
       "0" as Emite_Propria,
       if(tab.modNotaFiscal=65,"",tab.idCliente),
       tab.modNotaFiscal,
       tab.idSituacaoFiscal,
       tab.serie,
       tab.nr_nota,
       ifnull(tab.chave_nfe,""),
       date_format(tab.emissao,'%d%m%Y'),
       date_format(tab.saida,'%d%m%Y'),
       round(tab.valorTotalNota,2),
       case tab1.typeVenda when 'AV' then 0 when 'AP' then 1 else 2 end,
       round(tab.descontoValor,2),
       0 as "ABA_ZFM",
       round((valorTotalProdutos + valorTotaServico),2),
       tab.typeFrete,
       round(tab.frete,2),
       round(tab.seguro,2),
       round(tab.contribuicaoSocial,2),
       round(tab.baseIcms,2),
       round(tab.valorIcms,2) as Icms,
       if(tab.modNotaFiscal=65,"",round(tab.baseCalculoIcmsSubstituicao,2)),
       if(tab.modNotaFiscal=65,"",round(tab.valorIcmsSubstituicao,2)),
       if(tab.modNotaFiscal=65,"",round(tab.valorIPI,2)),
       if(tab.modNotaFiscal=65,"",round(tab.valorPis,2)),
       if(tab.modNotaFiscal=65,"",round(tab.valorCofins,2)),
       "" as PIS_ST,
       ""  as COFINS_ST
           from nf tab
              left join finalizadora tab1 on(tab.condPgto = tab1.idFinalizadora)
                 where tab.emissao between di and df and tab.Loja=find_loja and tab.modNotaFiscal in('01','04','55','1B','65') AND tab.serie not in ('X','x')  and tab.statusNf=1

       union
select
distinct tab.idEntrada,
      0 as entr,
      1 as terceiro,
      tab.idCliente,
      tab.modNotaFiscal,
      tab.idSituacaoFiscal,
      tab.serie,
      tab.nr_Nota,
      ifnull(tab.chave_nfe,""),
      date_format(tab.emissao,'%d%m%Y'),
      date_format(tab.entrada,'%d%m%Y'),
      round(tab.valorTotalNota,2),
      case tab2.typeVenda when 'AV' then 0 when 'AP' then 1 else 2 end,
      round(tab.valorDesconto,2),
      0 as 'ABT_ZFM',
      round(tab.valorTotalProduto,2),
      case typeFrete when 'c' then 1 when 'f' then 2 else 9 end,
      round(tab.valorFrete,2),
      round(tab.vendo,2),
      round(tab.valorDespesasAcessorias,2),
      round(tab.baseCalculoIcms,2),
      round(tab.creditoIcms,2),
      round(tab.baseCalculoSubstituicao,2),
      round(tab.valorIcmsSubstuicao,2),
      round(tab.valorTotalIpi,2),
      round(tab.valorPis,2),
      round(tab.valorCofins,2),
      0 as Pis_ST,
      0 as Cofins_ST
       from entrada tab
           inner join entradaFinanceiro tab1 on(tab.idEntrada = tab1.idEntrada)
           left join finalizadora tab2 on(tab1.idFinalizadora = tab2.idFinalizadora)
                 where tab.entrada between di and df and tab.idLoja=find_loja and tab.serie not in ('X','x') and tab.modNotaFiscal in('01','04','55','65','1B') order by 8;
  when 'C170' then
select tab.sequencia,
       tab.idProduto,
       tab1.nome,
       tab.quantidade,
       tab2.unidade,
       round(tab.valorTotalProduto,2),
       round(tab.descontoValor,2),
       if(tab4.estoqueOrigem='s',0,1),
       tab.cstIcms,
       tab.cfop,
       concat(1,tab4.idParamentro),
       if(tab.cstIcms='060'  || tab.cstIcms='040' ,0, round(tab.baseCalculo,2)),
       round(tab.aliquota,2),
       round(tab.icms,2),
       round(tab.baseCalculoIcmsSubstituicao,2),
       round(tab.aliquotaIcmsSt,2),
       round(tab.valorIcmsSubstituicao,2),
       0 as IND_APUR,
       if(tab.cstIpi=''  || tab.cstIpi='0','02',mid(tab.cstIpi,2,2)),
       '' as Enquadra,
       round(tab.baseIpi,2),
       round(tab5.ipi,2),
       round(((tab.baseIpi*tab5.ipi)/100),2) as Vl_Ipi,
       if(tab.cstPis=''  || tab.cstPis='0','07',if(LENGTH(tab.cstPis)=2,tab.cstPis,mid(tab.cstPis,2,2))),
       round(tab.basePis,2),
       round(tab6.aliquotaPis,2),
       0 as QUANT_BC_PIS,
       0 as ALIQ_PIS,
       round(tab.valorPis,2),
       if(trim(tab.cstCofins)='' || tab.cstCofins='0','07',if(LENGTH(tab.cstCofins)=2,tab.cstCofins,mid(tab.cstCofins,2,2))),
       round(tab.baseCofins,2),
       round(tab6.aliquotaCofins,2),
       0 as QUANT_BC_COFINS,
       0 as ALIQ_COFINS,
       round(tab.valorCofins,2),
       "" as Conta_Contabil,
              tab3.nr_nota
      from nfItem tab
           inner join produto tab1 on(tab.idProduto = tab1.idProduto)
           inner join unidadeMedida tab2 on(tab.idUnidadeMedida = tab2.idUnidadeMedida)
           inner join nf tab3 on(tab.idNf = tab3.nf)
           inner join paramentro_faturamento tab4 on(tab3.idParamentro = tab4.idParamentro)
           inner join produtoImpostos tab5 on(tab.idProduto = tab5.idProduto)
           inner join loja tab6 on(tab3.loja = tab6.idLoja)
                         where tab6.idLoja = tab5.idLoja and tab3.emissao>=di and tab3.emissao<=df and tab3.serie not in('X','x')
                                and  tab3.statusNf=1 and tab5.idLoja=find_loja and tab6.idLoja=find_loja and tab3.modNotaFiscal in('01','04','55','1B') union
select tab.sequencia,
       tab.idProduto,
       tab1.Nome,
       tab.quantidade,
       tab2.unidade,
       round(tab.CustoTotal,2),
       round(tab.discountValue,2),
       tab4.flagUpdateEstoque,
       tab.cstIcms,
       tab.cfop,
       concat(2,tab4.idOPeracao),
       if(tab.cstIcms='040' || tab.cstIcms='060'  ,0, round((tab.baseIcms-(tab.baseIcms*tab.reducaoEntrada)/100),2)),
       round(tab.icmsEntrada,2),
       round(tab.creditoIcms,2),
       round(tab.baseCalculoSubstituicao,2),
       round(tab.substituicao,2),
       round(tab.valorIcmsSubstituicao,2),
       0 as IND_APUR,
       if(cstIpi.codigo=''  || cstIpi.codigo='0','02',mid(cstIpi.codigo,2,2)),
       '' as Enq_IPI,
       round(tab.CustoTotal,2) as Base_Ipi,
       round(tab5.ipi,2),
       round(tab.valorIpi,2),
       if(cstPis.codigo='' || cstPis.codigo='0','07',if(LENGTH(cstPis.codigo)=2,cstPis.codigo,mid(cstPis.codigo,2,2))),
       round(tab.basePis,2),
       round(tab6.aliquotaPis,2),
       0 as QUANT_BC_PIS,
       0 as ALIQ_PIS,
       round(tab.valorPis,2),
       if(trim(cstCofins.codigo || cstCofins.codigo='0')='','07',if(LENGTH(cstCofins.codigo)=2,cstCofins.codigo,mid(cstCofins.codigo,2,2))),
       round(tab.baseCofins,2),
       round(tab6.aliquotaCofins,2),
       0 as QUANT_BC_Cofins,
       0 as ALIQ_Cofins,
       round(tab.valorCofins,2),
       "" as Cod_Contabil,
       tab3.nr_nota

       from entradaItem tab
            inner join produto tab1 on(tab.idProduto = tab1.idProduto)
            inner join unidadeMedida tab2 on(tab.idUnidadeMedida = tab2.idUnidadeMedida)
            inner join entrada tab3 on(tab.identrada = tab3.idEntrada)
            inner join operacaoEntrada tab4 on(tab3.idOperacao = tab4.idOperacao)
            inner join produtoImpostos tab5 on(tab.idProduto = tab5.idProduto)
            inner join loja tab6 on(tab3.idloja = tab6.idLoja)
             left join cstPis on(tab.cstPis = cstPis.idCstPis)
             left join cstCofins on(tab.cstCofins = cstCofins.idCstCofins)
             left join cstIpi on(tab.cstIpi = cstIpi.idCstIpi)
                         where tab6.idLoja = tab5.idLoja and tab3.entrada >= di and tab3.entrada <= df and tab3.serie not in('X','x')
                                and tab5.idLoja=find_loja and tab6.idLoja=find_loja and tab3.modNotaFiscal in('01','04','55','1B');
  when 'C190' then
select
       tab.cstIcms,
       tab.cfop,
       round(tab.aliquota,2),
       round(sum(tab.valor),2) as Valor_Operacao, 
       round(sum(IF(tab.cstIcms='060' || tab.cstIcms='040' || tab.typeAliquota='s',0, round(tab.baseCalculo,2))),2) as Base_Calculo,
       round(sum(tab.icms),2),
       round(sum(IF(tab.cstIcms='060' || tab.cstIcms='040' || tab.typeAliquota='s',0, round(tab.baseCalculoIcmsSt,2))),2),
       round(sum(tab.icmsSt),2),
       round(sum(tab.reducao),2),
       round(sum(tab.valorIPI),2),
       tab1.msg01,
       tab1.nr_nota
            from nfImposto tab
                    inner join nf tab1 on(tab.idNf = tab1.nf)
                    where  tab1.statusNf=1 and tab1.emissao >= di and tab1.emissao <= df  and tab1.loja=find_loja and tab1.serie not in('X','x')

        group by 1,2,3,11,12
             union
select
       tab.cst,
       tab.cfop,
       round(tab.aliquota,2),
       round(SUM((tab.baseIsentoInformado+tab.valorInformado)),2),
       IF(tab.tipo='f' || tab.cst='060' || tab.cst='040',0, round(sum(tab.valorInformado),2)),
       round(sum(tab.impostoInformado),2),
       IF(tab.tipo='f' || tab.cst='060' || tab.cst='040',0, round(sum(tab1.totalBaseCalculoSubstituicao),2)),
       round(sum(tab1.totalIcmsSt),2),
       round(sum(tab.baseIsentoInformado),2),
       round(sum(tab.valorIpiApurado),2),
       tab1.informacaoComplementares,
       tab1.nr_nota
       from entradaImp tab
            inner join entrada tab1 on(tab.idEntrada = tab1.idEntrada)
                     where tab1.entrada >= di and tab1.entrada <= df and tab1.idLoja=find_loja and tab1.serie not in('X','x')
                      group by 1,2,3,11,12 order by 3,12 ;
  when 'C300' then
SELECT tab.modelo,
       tab.serie,
       "" as SubSerie,
       min(tab.idNotad),
       max(tab.idNotad),
       date_format(tab.emissao,'%d%m%Y'),
       round(sum(nat.valorTotal),2) as vl_doc,
       0 as Vl_pis,
       0 as vl_cofins, "" as COD_CTA
         FROM conectorpdv.notad tab
         inner join conectorpdv.notad_item nat on(tab.idNotad = nat.idNotad)
               where tab.emissao between di and df and tab.idLoja=find_loja group by 1,2,3,6,8,9,10;
  when 'C320' then
SELECT tab2.cst,
       if(tab2.cst='060','5403','5102') as Cfop,
       round(tab3.converti/100,2),
       round(sum(tab.valorTotal),2),
       if(tab2.cst='060',0,sum(tab.valorTotal)) as bs_calc,
       if(tab2.cst='060',0,round(((sum(tab.valorTotal)*round(tab3.converti/100,2))/100),2)) as vl_icms,
       0 as reducao, "" as cod_obs, nat.emissao

      FROM
          conectorpdv.notad_item tab
             inner join conectorpdv.notad nat on(tab.idNotad = nat.idNotad)
             inner join produto tab1 on(tab.idProduto = tab1.idProduto)
             inner join produtoImpostos tab2 on(tab.idProduto = tab2.idProduto and tab2.idLoja=find_loja)
             inner join tributacao tab3 on(tab2.tributacao = tab3.idAliquota)
                  where nat.emissao between di and df and nat.idLoja=find_loja group by 1,2,3,8 order by 1,2,3,8;

  when 'C321' then
SELECT tab.idProduto,
       sum(tab.qt),
       tab4.unidade,
       round(sum(tab.valorTotal),2) as Vl_acumul,
       0 as desconto,
       if(tab2.cst='060',0,round(sum(tab.valorTotal),2)) as bs_calc,
       if(tab2.cst='060',0,round(((sum(tab.valorTotal)*round(tab3.converti/100,2))/100),2)) as vl_icms,
       0 as vl_pis, 0 as vl_cofins, nat.emissao

      FROM
          conectorpdv.notad_item tab
             inner join conectorpdv.notad nat on(tab.idNotad = nat.idNotad)
             inner join produto tab1 on(tab.idProduto = tab1.idProduto)
             inner join produtoImpostos tab2 on(tab.idProduto = tab2.idProduto and tab2.idLoja=find_loja)
             inner join tributacao tab3 on(tab2.tributacao = tab3.idAliquota)
             inner join unidadeMedida tab4 on(tab1.idUnidade = tab4.idUnidadeMedida)
                  where nat.emissao between di and df and nat.idLoja=find_loja group by 1,3,8 order by 1,2,3,8;

  when 'C350' then

SELECT
       tab.serie,
       "" as SubSerie,
       tab.idNotad,
       date_format(tab.emissao,'%d%m%Y') as Emissao,
       case tab1.idTipopessoa
          when 1 then
              tab2.cpf
          when 2 then
              tab3.cnpj
          when 3 then
              tab4.cpf
          else 'Desconhecido' end as pessoa,
       sum(round(tab.totalProduto,2)) as vl_mercadorias,
       sum(round(tab.totalProduto,2)) as vl_total_merc,
       0 as descon,
       0 as Vl_pis,
       0 as vl_cofins, "" as COD_CTA
         FROM conectorpdv.notad tab
             inner join cliente tab1 on(tab.Cliente = tab1.idCliente)
             left join fisica tab2 on(tab.Cliente = tab2.idCliente)
             left join juridica tab3 on(tab.Cliente = tab3.idCliente)
             left join rural tab4 on(tab.Cliente = tab4.idCliente)
               where tab.emissao between di and df and tab.idLoja=find_loja
                group by 1,2,3,5,8,9,10;
  when 'C370' then

SELECT  'Falta Sequencia',
       tab.idProduto,
       sum(round(tab.qt,3)),
       tab4.unidade,
       sum(round(tab.valorTotal,2)) as Vl_acumul,
       0 as desconto, tab.idNotad,
       date_format(nat.emissao,'%d%m%Y') as Emissao
      FROM
          conectorpdv.notad_item tab
             inner join conectorpdv.notad nat on(tab.idNotad = nat.idNotad)
             inner join produto tab1 on(tab.idProduto = tab1.idProduto)
             inner join produtoImpostos tab2 on(tab.idProduto = tab2.idProduto and tab2.idLoja=find_loja)
             inner join tributacao tab3 on(tab2.tributacao = tab3.idAliquota)
             inner join unidadeMedida tab4 on(tab1.idUnidade = tab4.idUnidadeMedida)
                  where nat.emissao between di and df and nat.idLoja=find_loja group by 1,2,4 order by 7,2,4;
  when 'C390' then

SELECT tab2.cst,
       if(tab2.cst='060','5403','5102') as Cfop,
       round(tab3.converti/100,2),
       sum(tab.valorTotal),
       if(tab2.cst='060',0,sum(tab.valorTotal)) as bs_calc,
       if(tab2.cst='060',0,round(((sum(tab.valorTotal)*round(tab3.converti/100,2))/100),2)) as vl_icms,
       0 as reducao, "" as cod_obs,        date_format(nat.emissao,'%d%m%Y') as Emissao, tab.idNotad

      FROM
          conectorpdv.notad_item tab
             inner join conectorpdv.notad nat on(tab.idNotad = nat.idNotad)
             inner join produto tab1 on(tab.idProduto = tab1.idProduto)
             inner join produtoImpostos tab2 on(tab.idProduto = tab2.idProduto and tab2.idLoja=find_loja)
             inner join tributacao tab3 on(tab2.tributacao = tab3.idAliquota)
                  where nat.emissao between di and df and nat.idLoja=find_loja group by 1,2,3,8 order by 1,2,3,8;

  when 'C400' then
  select distinct tab.modeloFiscal,
       tab2.modelo,
       tab.numeroSerie,
       tab.caixa
        from
            licenca_ecf tab
            inner join cupom_cabecalho tab1 on(tab.caixa = tab1.terminal)
            inner join modelo_ecf tab2 on(tab.modelo = tab2.idMarca)
                  where tab1.dataVenda >= di and tab1.dataVenda <= df and tab1.loja=find_loja;
  when 'C405' then
 select tab.crz from movimentoDia tab where tab.movimento >=di and tab.movimento <=df and tab.idLoja = find_loja into @crz;
 SELECT valorAcumulado FROM detalhe_reducao where totalizador='DT' and crz=@crz into @desc;
  if(@desc is null)then set @desc="0"; end if;
select sum(round(tab.valorAcumulado,2)) - (select coalesce(sum(round(tab.valorAcumulado,2)),0)
        FROM conectorpdv.detalhe_reducao tab
           inner join movimentoDia tab1 on(tab.idLoja = tab1.idLoja and tab.numeroCaixa = tab1.numero_serie and tab.crz = tab1.crz)
           where tab1.movimento >= di and tab1.movimento <= df and tab1.idLoja=find_loja and round(tab.valorAcumulado,2) > 0 and tab.totalizador in('CT','OPNF'))
        FROM conectorpdv.detalhe_reducao tab
           inner join movimentoDia tab1 on(tab.idLoja = tab1.idLoja and tab.numeroCaixa = tab1.numero_serie and tab.crz = tab1.crz)
           where tab1.movimento >= di and tab1.movimento <= df and tab1.idLoja=find_loja and round(tab.valorAcumulado,2) > 0 into @vb;
    if(@vb is null)then set @vb=0; end if;
SELECT date_format(tab.movimento,'%d%m%Y'),
       mid(tab.cro,2,3),
       tab.crz,
       tab.coo,
       round(if(@vb is null,round(tab.venda_bruta,2),round(@vb,2))-@desc,2),

       round(tab1.total,2),
       tab.numero_serie
      FROM movimentodia tab
           inner join (SELECT max(grandeTotalEnd) as total,
                              dataMovimento,
                              loja,
                              terminal FROM conectorpdv.fechamentocaixa where dataMovimento>=di and dataMovimento<=df  group by 2,3,4)
           as tab1 on(tab.idLoja = tab1.loja and tab.numeroCaixa = tab1.terminal and tab.movimento = tab1.dataMovimento)
              where tab.movimento >=di and tab.movimento <=df and tab.idLoja = find_loja;
  when 'C420' THEN
  SELECT
       tab.totalizador,
       round(tab.valorAcumulado,2),
       case tab.totalizador when '01T1800' then '01'
                        when '02T1200' then '02'
                        when '03T0700' then '03' else "" end,
       case tab.totalizador when '01T1800' then concat('Totalizador', " ",tab.totalizador)
                        when '02T1200' then concat('Totalizador', " ",tab.totalizador)
                        when '03T0700' then concat('Totalizador', " ",tab.totalizador) else "" end,
       tab1.numero_serie,
       date_format(tab1.movimento,'%d%m%Y')

      FROM conector.detalhe_reducao tab
           inner join movimentoDia tab1 on(tab.idLoja = tab1.idLoja and tab.numeroCaixa = tab1.numero_serie and tab.crz = tab1.crz)
           where tab1.movimento >= di and tab1.movimento <= df and tab1.idLoja=find_loja and round(tab.valorAcumulado,2) > 0 and tab.totalizador not in('CT','OPNF','DT') order by 6;
   when 'C425' then
SELECT tab.produto,
       round(sum(tab.quantidade),3),
       tab.unidade,

       round(sum((tab.quantidade*tab.pricevenda)-(tab.quantidade*tab.valorDesconto)),2),

       0 as Pis,
       0 as Cofins,tab.aliquota,
       case tab.tipoTributacao when 's' then 'F1'
                               when 't' then
                                            case tab.aliquota when 18 then '01T1800'
                                                              when 12 then '02T1200'
                                                              when 7 then '03T0700' end
                               when 'i' then 'I1' else 'F1' end,
        date_format(tab.dataVenda,'%d%m%Y')
          FROM cupom_detalhes tab
                   where tab.loja=find_loja and dataVenda >= di and dataVenda <=df  and  tab.situacao=0  group by 1,3,5,6,7 order by 8;

    when 'C460' then

  select tab.modeloFiscal,
       tab.situacao,
       tab1.numeroCupom,
       date_format(tab1.dataVenda, '%d%m%Y'),
       round(tab1.totalBruto,2),
       0 as Pis,
       0 as Cofins,
       documentoCPF_CNPJ,
       ifnull(case tab3.idtipoPessoa when 1 then tab4.nome
                          when 2 then tab5.razao
                          when 3 then tab6.nome end, '') Nome_Razao
        from
            licenca_ecf tab
              inner join cupom_cabecalho tab1 on(tab.caixa = tab1.terminal)
              inner join modelo_ecf tab2 on(tab.modelo = tab2.idMarca)
              left join cliente tab3 on(tab1.cliente = tab3.idCliente)
            	left join fisica tab4 on(tab1.cliente = tab4.idcliente)
            	left join juridica tab5 on(tab1.cliente = tab5.idcliente)
            	left join (select rural.idcliente,rural.cpf as cpf_1,rural.nome,rural.nascimento,rural.ie,rural.idsexo,rural.identidade,rural.idcivil,sexo.descricao as sexo1,civil.descricao as civil1 from rural
                inner join sexo on(rural.idsexo = sexo.idsexo)
                inner join civil on(rural.idcivil = civil.idcivil)) as tab6
        		on(tab1.cliente = tab6.idcliente)
                           where
                                tab1.dataVenda >= di and tab1.dataVenda <= df and tab1.Loja=find_loja AND tab1.situacao=1;
    when 'C470' then
    select tab1.produto,
         round(tab1.quantidade,3),
         if(tab1.situacao=1, tab1.quantidade,0),
         tab1.unidade,
         round(tab1.total,2),
         tab1.cstICms,
         tab1.cfop,
         round(tab1.aliquota,2),
         0 AS Pis,
         0 as Cofins,
         tab1.numeroCupom,
         date_format(tab1.dataVenda, '%d%m%Y')

        from
            licenca_ecf tab
              inner join cupom_detalhes tab1 on(tab.caixa = tab1.terminal)
              inner join modelo_ecf tab2 on(tab.modelo = tab2.idMarca)
              inner join aliquota tab3 on(tab3.idaliquota = tab1.tributacao)
                      where
                             tab1.dataVenda >=di and tab1.dataVenda <=df and tab1.Loja=find_loja  AND tab1.situacao=0;
    when 'c490' THEN
  select
        tab1.cstIcms,
        tab1.cfop,
        round(tab1.aliquota,2),
        round(sum((tab1.quantidade*tab1.pricevenda)-(tab1.quantidade*tab1.valorDesconto)),2), 
        if(cstIcms='060',0,round(sum((tab1.quantidade*tab1.pricevenda)-(tab1.quantidade*tab1.valorDesconto)),2)), 
        if(cstIcms='060',0, round((round(sum((tab1.quantidade*tab1.pricevenda)-(tab1.quantidade*tab1.valorDesconto)),2)*round(tab1.aliquota,2))/100,2)),
        "" cod_obs,
        date_format(dataVenda, '%d%m%Y'),
        tab.numeroSerie

        from
            licenca_ecf tab
              inner join cupom_detalhes tab1 on(tab.caixa = tab1.terminal)
              inner join modelo_ecf tab2 on(tab.modelo = tab2.idMarca)
              inner join aliquota tab3 on(tab3.idaliquota = tab1.tributacao)
                      where
                             TAB1.situacao=0 and
                             tab1.dataVenda >=di and tab1.dataVenda <=df and tab1.Loja=find_loja
                                       group by 1,2,3,7,8 order by 7,8;
  when 'C495' then
  select
        round(tab1.aliquota,2),
        tab1.produto,
        round(tab1.quantidade,3),
        if(tab1.situacao=0, tab1.quantidade,0.00),
        tab1.unidade,
        round(tab1.priceVenda,2),
        round(tab1.valordesconto,2),
        if(tab1.situacao=1, round(sum(tab1.total),2),0.00) as Vl_Canc,
        round(tab1.valorAcrescimo,2),
        round(sum(tab1.total),2) as Base_Calc,
        round(sum(tab1.icms),2),
        if(tab3.tipo='i', round(sum(tab1.total),2),0) val_isen,
        0 as Var_Not,
        0 as base_st,
        round(sum(tab1.total),2) as full_,
        "" cod_obs

        from
            licenca_ecf tab
              inner join cupom_detalhes tab1 on(tab.caixa = tab1.terminal)
              inner join modelo_ecf tab2 on(tab.modelo = tab2.idMarca)
              inner join aliquota tab3 on(tab3.idaliquota = tab1.tributacao)
                      where
                             tab1.dataVenda >=di and tab1.dataVenda <=df and tab1.Loja=find_loja
                                       group by 1,2,3;

  when 'C990' then

select count(*) from (select distinct tab.nf,
       tab.typeNf,
       "0" as Emite_Propria,
       tab.loja,
       tab.modNotaFiscal,
       tab.idSituacaoFiscal,
       tab.serie,
       tab.nr_nota,
       ifnull(tab.chave_nfe,""),
       date_format(tab.emissao,'%d%m%Y'),
       date_format(tab.saida,'%d%m%Y'),
       tab.valorTotalNota,
       case tab1.typeVenda when 'AV' then 0 when 'AP' then 1 else 2 end,
       tab.descontoValor,
       0 as "ABA_ZFM",
       (valorTotalProdutos + valorTotaServico),
       tab.typeFrete,
       tab.frete,
       tab.seguro,
       tab.contribuicaoSocial,
       tab.baseIcms,
       tab.valorIcms,
       tab.baseCalculoIcmsSubstituicao,
       tab.valorIcmsSubstituicao,
       tab.valorIPI,
       tab.valorPis,
       tab.valorCofins,
       0 as PIS_ST,
       0  as COFINS_ST
           from nf tab
              left join finalizadora tab1 on(tab.condPgto = tab1.idFinalizadora)
                 where tab.emissao between di and df and tab.Loja=find_loja
       union
select
distinct tab.idEntrada,
      0 as entr,
      1 as terceiro,
      tab.idCliente,
      tab.modNotaFiscal,
      tab.idSituacaoFiscal,
      tab.serie,
      tab.nr_Nota,
      ifnull(tab.chave_nfe,""),
      date_format(tab.emissao,'%d%m%Y'),
      date_format(tab.entrada,'%d%m%Y'),
      tab.valorTotalNota,
      case tab2.typeVenda when 'AV' then 0 when 'AP' then 1 else 2 end,
      tab.valorDesconto,
      0 as 'ABT_ZFM',
      tab.valorTotalProduto,
      case typeFrete when 'c' then 1 when 'f' then 2 else 9 end,
      tab.valorFrete,
      tab.vendo,
      tab.valorDespesasAcessorias,
      tab.baseCalculoIcms,
      tab.creditoIcms,
      tab.baseCalculoSubstituicao,
      tab.valorIcmsSubstuicao,
      tab.valorTotalIpi,
      tab.valorPis,
      tab.valorCofins,
      0 as Pis_ST,
      0 as Cofins_ST
       from entrada tab
           inner join entradaFinanceiro tab1 on(tab.idEntrada = tab1.idEntrada)
           left join finalizadora tab2 on(tab1.idFinalizadora = tab2.idFinalizadora)
                 where tab.entrada between di and df and tab.idLoja=find_loja) as sub into @a1;

select count(*) from (select tab.sequencia,
       tab.idProduto,
       tab1.nome,
       tab.quantidade,
       tab2.unidade,
       tab.valorTotalProduto,
       tab.descontoValor,
       if(tab4.estoqueOrigem='s',0,1),
       tab.cstIcms,
       tab.cfop,
       tab4.idParamentro,
       tab.baseCalculo,
       tab.aliquota,
       tab.icms,
       tab.baseCalculoIcmsSubstituicao,
       tab.aliquotaIcmsSt,
       tab.valorIcmsSubstituicao,
       0 as IND_APUR,
       tab.cstIpi,
       "" as Enquadra,
       tab.baseIpi,
       tab5.ipi,
       (tab.baseIpi*tab5.ipi)/100 as Vl_Ipi,
       tab.cstPis,
       tab.basePis,
       tab6.aliquotaPis,
       0 as QUANT_BC_PIS,
       0 as ALIQ_PIS,
       tab.valorPis,
       tab.cstCofins,
       tab.baseCofins,
       tab6.aliquotaCofins,
       0 as QUANT_BC_COFINS,
       0 as ALIQ_COFINS,
       tab.valorCofins,
       "" as Conta_Contabil
      from nfItem tab
           inner join produto tab1 on(tab.idProduto = tab1.idProduto)
           inner join unidadeMedida tab2 on(tab.idUnidadeMedida = tab2.idUnidadeMedida)
           inner join nf tab3 on(tab.idNf = tab3.nf)
           inner join paramentro_faturamento tab4 on(tab3.idParamentro = tab4.idParamentro)
           inner join produtoImpostos tab5 on(tab.idProduto = tab5.idProduto)
           inner join loja tab6 on(tab3.loja = tab6.idLoja)
                         where tab6.idLoja = tab5.idLoja and tab3.emissao>=di and tab3.emissao<=df
                                and tab5.idLoja=find_loja and tab6.idLoja=find_loja union
select tab.sequencia,
       tab.idProduto,
       tab1.Nome,
       tab.quantidade,
       tab2.unidade,
       tab.CustoTotal,
       tab.discountValue,
       tab4.flagUpdateEstoque,
       tab.cstIcms,
       tab.cfop,
       tab4.idOPeracao,
       tab.baseIcms,
       tab.icmsEntrada,
       tab.creditoIcms,
       tab.baseCalculoSubstituicao,
       tab.substituicao,
       tab.valorIcmsSubstituicao,
       0 as IND_APUR,
       tab.cstIpi,
       0 as Enq_IPI,
       tab.CustoTotal as Base_Ipi,
       tab5.ipi,
       tab.valorIpi,
       tab.cstPis,
       tab.basePis,
       tab6.aliquotaPis,
       0 as QUANT_BC_PIS,
       0 as ALIQ_PIS,
       tab.valorPis,
       tab.cstPis,
       tab.baseCofins,
       tab6.aliquotaCofins,
       0 as QUANT_BC_Cofins,
       0 as ALIQ_Cofisn,
       tab.valorCofins,
       "" as Cod_Contabil

       from entradaItem tab
            inner join produto tab1 on(tab.idProduto = tab1.idProduto)
            inner join unidadeMedida tab2 on(tab.idUnidadeMedida = tab2.idUnidadeMedida)
            inner join entrada tab3 on(tab.identrada = tab3.idEntrada)
            inner join operacaoEntrada tab4 on(tab3.idOperacao = tab4.idOperacao)
            inner join produtoImpostos tab5 on(tab.idProduto = tab5.idProduto)
            inner join loja tab6 on(tab3.idloja = tab6.idLoja)
                         where tab6.idLoja = tab5.idLoja and tab3.entrada >= di and tab3.entrada <= df
                                and tab5.idLoja=find_loja and tab6.idLoja=find_loja) as sub  into @b1;

select count(*) from (select
       tab.cstIcms,
       tab.cfop,
       tab.aliquota,
       (tab.baseIcmsIsentos+tab.baseCalculo),
       tab.baseCalculo,
       tab.icms,
       tab.baseCalculoIcmsSt,
       tab.icmsSt,
       tab.reducao,
       tab.valorIPI,
       tab1.msg01
            from nfImposto tab
                    inner join nf tab1 on(tab.idNf = tab1.nf)
                    where tab1.emissao >= di and tab1.emissao <= df  and tab1.loja=find_loja
             union
select
       tab.cst,
       tab.cfop,
       tab.aliquota,
       (tab.baseIsentoApurado+tab.impostoApurado),
       tab.valorApurado,
       tab.impostoApurado,
       tab1.totalBaseCalculoSubstituicao,
       tab1.totalIcmsSt,
       tab.reducao,
       tab.valorIpiApurado,
       tab1.informacaoComplementares
       from entradaImp tab
            inner join entrada tab1 on(tab.idEntrada = tab1.idEntrada)
                     where tab1.entrada >= di and tab1.entrada <= df and tab1.idLoja=find_loja) as sub  into @c1;

select count(*) from (    select distinct tab.modeloFiscal,
       tab2.modelo,
       tab.numeroSerie,
       tab.caixa
        from
            licenca_ecf tab
            inner join cupom_cabecalho tab1 on(tab.caixa = tab1.terminal)
            inner join modelo_ecf tab2 on(tab.modelo = tab2.idMarca)
                  where tab1.dataVenda >= di and tab1.dataVenda <= df and tab1.loja=find_loja)  as sub into @d1;
select count(*) from (
SELECT date_format(tab.movimento,'%d%m%Y'),
       tab.cro,
       tab.crz,
       tab.coo,
       tab.venda_bruta,
       tab1.total
      FROM movimentodia tab
           inner join (SELECT max(grandeTotalEnd) as total,
                              dataMovimento,
                              loja,
                              terminal FROM conectorpdv.fechamentocaixa where dataMovimento>=di and dataMovimento<=df  group by 2,3,4)
           as tab1 on(tab.idLoja = tab1.loja and tab.numeroCaixa = tab1.terminal and tab.movimento = tab1.dataMovimento)
              where tab.movimento >=di and tab.movimento <=df and tab.idLoja = find_loja)  as sub into @e1;

select count(*) from (
  SELECT
       tab.totalizador,
       tab.valorAcumulado,
       case tab.totalizador when '01T1800' then '01'
                        when '02T1200' then '02'
                        when '03T0700' then '03' else "" end,
       concat('Totalizador', " ",tab.totalizador)
      FROM conectorpdv.detalhe_reducao tab
           inner join movimentoDia tab1 on(tab.idLoja = tab1.idLoja and tab.numeroCaixa = tab1.numero_serie and tab.crz = tab1.crz)
           where tab1.movimento >= di and tab1.movimento <= df and tab1.idLoja=find_loja) as sub into @f1;

select count(*) from (SELECT tab.produto,
       tab.quantidade,
       tab.unidade,
       tab.total,
       0 as Pis,
       0 as Cofins
          FROM cupom_detalhes tab
                   where tab.loja=find_loja and dataVenda >= di and dataVenda <=df) as sub  into @g1;

select count(*) from (
select tab.modeloFiscal,
       tab.situacao,
       tab1.numeroCupom,
       date_format(tab1.dataVenda, '%d%m%Y'),
       tab1.totalLiquido,
       0 as Pis,
       0 as Cofins,
       documentoCPF_CNPJ
        from
            licenca_ecf tab
              inner join cupom_cabecalho tab1 on(tab.caixa = tab1.terminal)
              inner join modelo_ecf tab2 on(tab.modelo = tab2.idMarca)
                           where
                                tab1.dataVenda >= di and tab1.dataVenda <= df and tab1.Loja=find_loja )  as sub into @h1;

select count(*) from (        select tab1.produto,
         tab1.quantidade,
         if(tab1.situacao=0, tab1.quantidade,0.00),
         tab1.unidade,
         tab1.total,
         tab1.cstICms,
         tab1.cfop,
         tab1.aliquota,
         0 AS Pis,
         0 as Cofins

        from
            licenca_ecf tab
              inner join cupom_detalhes tab1 on(tab.caixa = tab1.terminal)
              inner join modelo_ecf tab2 on(tab.modelo = tab2.idMarca)
              inner join aliquota tab3 on(tab3.idaliquota = tab1.tributacao)
                      where
                             tab1.dataVenda >=di and tab1.dataVenda <=df and tab1.Loja=find_loja)  as sub into @i1;

select count(*) from (   select
        tab1.cstIcms,
        tab1.cfop,
        tab1.aliquota,
        sum(tab1.total) as total,
        sum(tab1.total) as total1,
        sum(tab1.icms),
        "" cod_obs

        from
            licenca_ecf tab
              inner join cupom_detalhes tab1 on(tab.caixa = tab1.terminal)
              inner join modelo_ecf tab2 on(tab.modelo = tab2.idMarca)
              inner join aliquota tab3 on(tab3.idaliquota = tab1.tributacao)
                      where
                             tab1.dataVenda >=di and tab1.dataVenda <=df and tab1.Loja=find_loja
                                       group by 1,2,3)  as sub into @j1;

select count(*) from (
  select
        tab1.aliquota,
        tab1.produto,
        tab1.quantidade,
        if(tab1.situacao=0, tab1.quantidade,0.00),
        tab1.unidade,
        tab1.priceVenda,
        tab1.valordesconto,
        if(tab1.situacao=0, sum(tab1.total),0.00) as Vl_Canc,
        tab1.valorAcrescimo,
        sum(tab1.total) as Base_Calc,
        sum(tab1.icms),
        if(tab3.tipo='i', sum(tab1.total),0) val_isen,
        0 as Var_Not,
        0 as base_st,
        sum(tab1.total),
        "" cod_obs

        from
            licenca_ecf tab
              inner join cupom_detalhes tab1 on(tab.caixa = tab1.terminal)
              inner join modelo_ecf tab2 on(tab.modelo = tab2.idMarca)
              inner join aliquota tab3 on(tab3.idaliquota = tab1.tributacao)
                      where
                             tab1.dataVenda >=di and tab1.dataVenda <=df and tab1.Loja=find_loja
                                       group by 1,2,3)  as sub  into @l1;

select count(*) from ( select
       tab.sequencia,
       tab.idProduto,
       tab.quantidade,
       tab2.unidade,
       round(tab.priceVenda,2),
       round(tab.descontoValor,2)
      from nfItem tab
           inner join produto tab1 on(tab.idProduto = tab1.idProduto)
           inner join unidadeMedida tab2 on(tab.idUnidadeMedida = tab2.idUnidadeMedida)
           inner join nf tab3 on(tab.idNf = tab3.nf)
           inner join paramentro_faturamento tab4 on(tab3.idParamentro = tab4.idParamentro)
           inner join produtoImpostos tab5 on(tab.idProduto = tab5.idProduto)
           inner join loja tab6 on(tab3.loja = tab6.idLoja)
                         where tab6.idLoja = tab5.idLoja and tab3.emissao>=di and tab3.emissao<=df and tab3.serie not in('X','x')
                                and  tab3.statusNf=1 and tab5.idLoja=find_loja and tab6.idLoja=find_loja and tab3.modNotaFiscal in('02') )  as sub into @m1;
select count(*) from ( SELECT tab.modNotaFiscal,
       tab.serie,
       "" as SubSerie,
       tab.nr_nota,
       date_format(tab.emissao,'%d%m%Y') as Emissao,
       ifnull(case tab1.idtipoPessoa when 1 then tab2.cpf
                          when 2 then tab3.cnpj
                          when 3 then tab4.cpf_1 end, '') Doc_CGC,
       round(sum(tab.valorTotalProdutos),2),
       round(sum(tab.valorTotalNota),2),
       round(sum(tab.valorPis),2),
       round(sum(tab.valorCofins),2)
        from nf tab
              left join cliente tab1 on(tab.idcliente = tab1.idCliente)
            	left join fisica tab2 on(tab.idcliente = tab2.idcliente)
            	left join juridica tab3 on(tab.idcliente = tab3.idcliente)
            	left join (select rural.idcliente,rural.cpf as cpf_1,rural.nome,rural.nascimento,rural.ie,rural.idsexo,rural.identidade,rural.idcivil,sexo.descricao as sexo1,civil.descricao as civil1 from rural
                inner join sexo on(rural.idsexo = sexo.idsexo)
                inner join civil on(rural.idcivil = civil.idcivil)) as tab4
        		on(tab.idcliente = tab4.idcliente)
              where tab.serie not in('X','x',"","0") and tab.modNotaFiscal in('02') and
                    tab.emissao >= di and tab.emissao <= df and
                    tab.loja=find_loja and
                    tab.statusNf=1 group by 1,2,3 )  as sub into @n1;


  select @a1+@b1+@c1+@d1+@e1+@f1+@g1+@h1+@i1+@j1+@l1+@m1+@n1 as BLOCO_C;


      when 'D001' then
    select if(finalidade='A',0,1);

      when 'D100' then
  select
      if(tab.typeFrete='f',0,1) as tipo_operacao,
      if(tab.idLoja=tab.idCliente,0,1) as emissao_propria,
         tab.idCliente,
         tab.modNotaFiscal,
         tab.idSituacaoFiscal,
         if(tab.serie='','U',tab.serie),
         "" as Sub,
         tab.nr_nota,
         ifnull(tab.chave_nfe,""),
         DATE_FORMAT(tab.emissao,'%d%m%Y'),
         DATE_FORMAT(tab.emissao,'%d%m%Y') as DT_A_P,
         '00'  as 'TP_CT-e',
          1 as 'CHV_CTE_REF',
         ROUND(tab.valorTotalNota,2) as VL_DOC,
         ROUND(tab.valorDesconto,2),
         case typeFrete when 'c' then 2
                        when 'f' then 0
                        when 's' then 9
                        when 'o' then 1
                          else 9 end as IND_FRT,
         ROUND(tab.valorTotalNota,2) as VL_SERV,
         ROUND(tab.baseFrete,2) VL_DESC,
         ROUND(tab.icmsFrete,2),
         0 as VL_NT,
         "" as COD_INF,
         "" as COD_CTA
        from entrada tab
             where tab.typeFrete='f'
                       and tab.entrada >= di and tab.entrada <= df and tab.idLoja=find_loja;
    when 'D101' then
    select tab1.sequencia,
           tab1.idProduto,
           ROUND(tab1.custoNotaTotal,2),0
           from entrada tab
              inner join entradaItem tab1 on(tab.idEntrada = tab1.idEntrada)
                                where tab.typeNota='f' and tab.idLoja=find_loja and tab.entrada >=  di and tab.entrada <= df;
      when 'D190' then
      SELECT
        tab.cst,
        tab.cfop,
        ROUND(tab.aliquota,2),
        ROUND(tab1.valorTotalNota,2),
        ROUND(tab.valorInformado,2),
        ROUND(tab.impostoInformado,2),
        ROUND(tab.reducao,2),
        "" as obs
              FROM
                entradaimp tab
                     inner join entrada tab1 on(tab.idEntrada = tab1.idEntrada)
                           where tab1.entrada between di and df and tab1.idLoja = find_loja and tab1.conhecimentoFrete>0;
      when 'D990' then
select count(*) from (  select
      if(tab.typeFrete='f',0,1) as tipo_operacao,
      if(tab.idLoja=tab.idCliente,0,1) as emissao_propria,
         tab.idCliente,
         tab.modNotaFiscal,
         tab.idSituacaoFiscal,
         if(tab.serie='','U',tab.serie),
         "" as Sub,
         tab.nr_nota,
         ifnull(tab.chave_nfe,""),
         tab.emissao,
         tab.emissao as DT_A_P,
         '00'  as 'TP_CT-e',
          1 as 'CHV_CTE_REF',
         tab.valorTotalNota as VL_DOC,
         tab.valorDesconto,
         case typeFrete when 'c' then 2
                        when 'f' then 0
                        when 's' then 9
                        when 'o' then 1
                          else 9 end as IND_FRT,
         tab.valorTotalNota as VL_SERV,
         tab.baseFrete VL_DESC,
         tab.icmsFrete,
         0 as VL_NT,
         "" as COD_INF,
         "" as COD_CTA
        from entrada tab
             where tab.typeFrete='f'
                       and tab.entrada >= di and tab.entrada <= df and tab.idLoja=find_loja) as sub  into @a2;
select count(*) from (      SELECT
        tab.cst,
        tab.cfop,
        tab.aliquota,
        tab1.valorTotalNota,
        tab.valorInformado,
        tab.impostoInformado,
        tab.reducao,
        "" as obs
              FROM
                entradaimp tab
                     inner join entrada tab1 on(tab.idEntrada = tab1.idEntrada)
                           where tab1.entrada between di and df and tab1.idLoja = find_loja) as sub  into @b2;
    select @a2+@b2 as BLOCO_D;
      when 'H001' then
    select if(finalidade='A',0,1);
  when 'H005' then

SELECT        date_format(di,'%d%m%Y'),round(sum(tab1.quantidade* tab2.priceVenda),2)
      FROM produto tab
          inner join produtoEstoques tab1 on(tab.idProduto = tab1.idProduto)
          inner join produtoPrice tab2 on(tab.idProduto = tab2.idProduto)
                  where tab1.idLoja = tab2.idLoja and tab1.idLoja=find_loja and tab1.quantidade > 0 group by 1;

  when 'H010' then
  
SELECT tab.idProduto,
       tab3.unidade,
       round(tab1.quantidade,3),
       round(tab2.priceVenda,2),
       round(sum(tab1.quantidade* tab2.priceVenda),2),
       0 as "Proprio",
       "" as "Proprietario",
       tab.nome,
       "1044" as conta,
       "" as Valor_ImpRenda

      FROM produto tab
          inner join produtoEstoques tab1 on(tab.idProduto = tab1.idProduto)
          inner join produtoPrice tab2 on(tab.idProduto = tab2.idProduto)
          inner join unidadeMedida tab3 on(tab.idUnidade = tab3.idUnidadeMedida)
                  where tab1.idLoja = tab2.idLoja and tab1.idLoja=find_loja and tab1.quantidade > 0 and round(tab2.priceVenda,2)>0 group by 1;
  when 'H990' then
    select count(*) from (
                        SELECT date_format(tab.data, '%d%m%Y'),
                               tab.valor,
                               tab1.idInventarioMotivo
                                    FROM inventario tab
                                       inner join inventarioMotivo tab1 on(tab.idInventarioMotivo = tab1.idInventarioMotivo)
                                                   where status=1 and data=dateInv ) as sub  into @a3;
  select count(*) from (
  SELECT tab.idProduto,
         tab1.idunidade,
         tab.quantidadeAtual,
         tab.valor,
         tab.valor,
         0 as IND_PROP,
         tab2.idLoja,
         tab1.nome,
         '' as COD_CTA
            FROM inventarioitem tab
                     inner join produto tab1 on(tab.idProduto = tab1.idProduto)
                     inner join inventario tab2 on(tab.idInventario = tab2.idInventario)
                                          WHERE tab2.status=1 and tab2.data=dateInv) as sub  into @b3;
                                          select @a3 + @b3;
      when 'E001' then
    select if(finalidade='A',0,1);
  when 'E110' then
if(call_debitos_cp = 1)then
select
      ROUND(sum(icms),2) from cupom_detalhes
                  where dataVenda between di and df and loja=find_loja  and situacao=0 into @saidaCupom;
                  ELSE  set @saidaCupom=0;
end if;


if(call_debitos_nf= 1)then
SELECT ROUND(sum(coalesce(tab.icms,0)),2)
              FROM nfimposto tab
                    inner join nf tab1 on(tab.idNf = tab1.Nf)
                                       where tab1.emissao between di and df and tab1.Loja=find_loja and tab1.serie not in ('X','x') and tab1.modNotaFiscal in('01','04','55','65','1B') and
                                             tab1.Loja=1 and
                                            tab1.geraDanfe ='s' and tab1.chave_Nfe is not null and tab1.statusNf=1
                                            into @saidaNotas;
SELECT
       round(((sum(tab.valorTotal)*round(tab3.converti/100,2))/100),2) as vl_icms

      FROM
          conectorpdv.notad_item tab
             inner join conectorpdv.notad nat on(tab.idNotad = nat.idNotad)
             inner join conector.produto tab1 on(tab.idProduto = tab1.idProduto)
             inner join conector.produtoImpostos tab2 on(tab.idProduto = tab2.idProduto and tab2.idLoja=find_loja)
             inner join conector.tributacao tab3 on(tab2.tributacao = tab3.idAliquota)
                  where nat.emissao between di and df and nat.idLoja=find_loja into @nd;
  if(@nd is null)then set @nd=0; end if;

  set @saidaNotas = @saidaNotas+@nd;
                                            else set @saidaNotas=0;
end if;

if(call_creditos = 1)then
SELECT
        ROUND(sum(tab.impostoApurado),2)
                        FROM entradaimp tab
                             inner join entrada tab1 on(tab.idEntrada = tab1.idEntrada)
                              where tab1.entrada >= di and tab1.entrada <= df and tab1.serie not in('X','x')
                                 and tab1.idLoja=find_loja and tab1.modNotaFiscal in('01','04','55','65','1B') into @entradas;
                                  else set @entradas=0;
end if;




  select ROUND((coalesce(@saidaCupom,0) + coalesce(@saidaNotas,0)),2) as 'field_02',
         0 as 'field_03',
         0 as 'field_04',
         0 as 'field_05',
         ROUND(coalesce(@entradas,0),2) as 'field_06',
         0 as 'field_07',
         0 as 'field_08',
         0 as 'field_09',
         0 as 'field_10',
         if(ROUND(((coalesce(@saidaCupom,0) + coalesce(@saidaNotas,0))-(coalesce(@entradas,0))),2)<0,0,ROUND(((coalesce(@saidaCupom,0) + coalesce(@saidaNotas,0))-(coalesce(@entradas,0))),2)) as 'field_11',
         0 as 'field_12',
         if(ROUND(((coalesce(@saidaCupom,0) + coalesce(@saidaNotas,0))-(coalesce(@entradas,0))),2)<0,0,ROUND(((coalesce(@saidaCupom,0) + coalesce(@saidaNotas,0))-(coalesce(@entradas,0))),2)) as 'field_13',
         if(ROUND(((coalesce(@saidaCupom,0) + coalesce(@saidaNotas,0))-(coalesce(@entradas,0))),2)<0,ROUND(coalesce(@entradas,0),2),0) as 'field_14',
         0 as 'field_15';

    when 'E116' then

select '000' as field_1,
        round(valorPago,2)  as field_2,
        date_format(vencimento,'%d%m%Y') as field_3,
        '1206' as fiel4,
        '' as field_5,
        '' as field_6,
        '' as field_7,
        '' as field_8,
        date_format(vencimento,'%m%Y') as field9
             from pagar
                      where pagamento between di and df and loja=find_loja and idTipoContasPagar in(3,4);
    when 'E990' then

    select count(*) from ( select if(finalidade='A',0,1) ) as sub  into @e1;

if(call_debitos_cp = 1)then
select
      ROUND(sum(icms),2) from cupom_detalhes
                  where dataVenda between di and df and loja=find_loja into @saidaCupom;
      else set @saidaCupom=0;
end if;

if(call_creditos = 1)then
SELECT
        ROUND(sum(tab.impostoApurado),2)
                        FROM entradaimp tab
                             inner join entrada tab1 on(tab.idEntrada = tab1.idEntrada)
                                     where tab1.entrada between di and df and tab1.idLoja=find_loja
                                                                                     into @entradas;
      else set @entradas=0;
end if;

if(call_debitos_nf = 1)then
SELECT ROUND(sum(tab.icms),2)
              FROM nfimposto tab
                    inner join nf tab1 on(tab.idNf = tab1.Nf)
                                       where tab1.emissao between di and df and tab1.loja=find_loja into @saidaNotas;
      else set @saidaNotas=0;
end if;

    select count(*) from ( select ROUND((@saidaCupom + @saidaNotas),2) as 'field_02',
         0 as 'field_03',
         0 as 'field_04',
         0 as 'field_05',
         ROUND(@entradas,2) as 'field_06',
         0 as 'field_07',
         0 as 'field_08',
         0 as 'field_09',
         0 as 'field_10',
         ROUND(((@saidaCupom + @saidaNotas)-(@entradas)),2) as 'field_11',
         0 as 'field_12',
         ROUND(((@saidaCupom + @saidaNotas)-(@entradas)),2) as 'field_13',
         0 as 'field_14',
         0 as 'field_15'  ) as sub  into @e2;

    select count(*) from ( select '000' as field_2,
        round(valorPago,2)  as field_3,
        date_format(vencimento,'%d%m%Y') as field_3,
        '' as field_4,
        '' as field_5,
        '' as field_6,
        '' as field_7 from pagar
                      where vencimento between di and df and loja=find_loja  ) as sub  into @e3;
      select @e1+@e2+@e3;

  when '1001' then
  select count(*)
        from cartao
             where emissao between di and df and idLoja=find_loja into @card;
  if(@card > 0)then
    select 0;
  else
    select if(finalidade='A',0,1);
  end if;

  when '1010' then
  select count(*)
        from cartao
             where emissao between di and df and idLoja=find_loja into @card;
  if(@card is not null && @card > 0)then set @card='S'; else set @card='N'; end if;

  select
         'N' AS 'IND_EXP_02',
         'N' AS 'IND_CCRF_03',
         'N' AS 'IND_COMB_04',
         'N' AS 'IND_USINA_05',
         'N' AS 'IND_VA_06',
         'N' AS 'IND_EE_07',
          ifnull(@card,'N') AS 'IND_CART_08',
         'N' AS 'IND_FORM_09',
         'N' AS 'IND_AER_10';
    when '1600' then
   select tab.idAdministradora,
        if(tab.idtypeCartao=1, round(sum(tab1.valor),2),0),
        if(tab.idtypeCartao != 1, round(sum(tab1.valor),2),0)
        from administradora tab
             inner join cartao tab1 on(tab.idAdministradora = tab1.idAdministradora)
             inner join cliente tab2 on(tab.idAdministradora = tab2.idCliente)
             left join (select idAdministradora,
                               idSpedMunicipio
                                            from administradora tab
                                             inner join spedMunicipio tab1 on(tab.municipio = tab1.municipio)) tab3 on(tab.idAdministradora = tab3.idAdministradora)
             where tab1.emissao between di and df and tab1.idLoja=find_loja group by 1;

  when '9001' then
  select if(finalidade='A',0,1);

  end case;
    end $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `conectorPDV_EFD_008_Old`
--

DROP PROCEDURE IF EXISTS `conectorPDV_EFD_008_Old`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='' */ $$
CREATE DEFINER=`master`@`localhost` PROCEDURE `conectorPDV_EFD_008_Old`(tipo varchar(4), find_loja double, find_pessoa double, di date, df date, dateInv date, finalidade varchar(1), perfil varchar(1), atividade int,
                                                                    call_creditos smallint, call_debitos_nf smallint, call_debitos_cp smallint)
begin
IF(perfil = "A" or perfil = "a")THEN
case tipo
  when '0000' then
select '009' as Versao,
        1 as Finali,
       date_format(di,'%d%m%Y'),
       date_format(df,'%d%m%Y'),
       loja.razao,
       loja.CNPJ,
       "" as CPF,
       loja.UF,
       loja.IE,
       loja.codigoMunicipio,
       loja.IEmunicipal,
       "" as SUPRAMA,
       perfil AS PERFIL,
       atividade as tipo_atividade

                from loja
                     where idLoja = find_loja;
    when '0001' then

    select if(finalidade='A',0,1);

    when '0005' then

SELECT abreviatura,
       cep,
       logradouro,
       numero,
       endereco.complemento,
       bairro,
       concat(ifnull(mid(tab4.ddd,3,2),'000'), ifnull(tab4.telefone,'')) as Fone,
       concat(ifnull(mid(tab6.ddd,3,2),'000'),ifnull(tab6.telefone,'')) as Fax,
       tab5.mail

      from loja tab
      left join endereco on(tab.idloja = endereco.idcliente)
      left join estado tab3 on(endereco.estado = tab3.uf)
      left join(select tab.idCliente, tab.ddd, tab.telefone from fone tab
                                      inner join loja on(tab.idCliente = loja.idLoja)
                                      where tab.idFoneType=1 and tab.idCliente=find_loja) tab4 on(tab.idLoja = tab4.idCliente)
      left join (select email.idCliente,
       email.mail
        from email
             inner join loja on(email.idCliente = loja.idLoja)
                                 where loja.idLoja=find_loja and email.padrao=1) tab5 on(tab.idLoja = tab5.idCliente)
      left join(select tab.idCliente, tab.ddd, tab.telefone from fone tab
                                      inner join loja on(tab.idCliente = loja.idLoja)
                                      where tab.idFoneType=2 and tab.idCliente=find_loja) tab6 on(tab.idLoja = tab6.idCliente)
  where
       tab.idloja=find_loja;
    when '0100' then
  select max(cep) from funcionario_endereco where idFuncionario=find_pessoa into @find_cep;
  select cepCity.nome,cepbairro.idestado from cepbairro inner join cepCity on(cepbairro.idcepCity = cepCity.idcepCity) inner join estado on(cepbairro.idestado=estado.idestado) where cepbairro.cep = @find_cep into @a, @c;
  set @b = (select ifnull(idspedMunicipio,0) as cod_municipio from spedmunicipio where municipio like concat(@a,"%")  and idEstado=@c);
  SELECT tab.nome,
       tab.cpf,
       tab.crc,
       ifnull(contador_cnpj,'') as cnpj_obrigatorio,
       ifnull(tab1.cep,0),
       ifnull(tab1.logradouro,''),
       ifnull(tab1.numero,''),
       ifnull(tab1.complemento,''),
       ifnull(tab1.bairro,''),
       concat(mid((ifnull(tab2.ddd,'0000')),3,2),ifnull(tab2.telefone,'00000000')),
       concat(mid((ifnull(tab3.ddd,'0000')),3,2),ifnull(tab3.telefone,'00000000')) as fax,
       ifnull(tab.email,''),
       ifnull(@b,"")
                  from funcionario tab
               left join funcionario_endereco tab1 on(tab.idFuncionario = tab1.idFuncionario)
               left join funcionario_fone tab2 on(tab.idFuncionario = tab2.idFuncionario and tab2.idfonetype=1)
               left join (select idFuncionario,telefone, ddd from  funcionario_fone where idFonetype=2) tab3 on(tab.idFuncionario = tab3.idFuncionario)
                                           where tab.idFuncao=10 and tab.idFuncionario=find_pessoa;
    when '0150' then

select
	distinct tab.idcliente as chave,
    case tab.idtipoPessoa when 1 then tab1.nome
                          when 2 then tab2.razao
                          when 3 then tab3.nome end Nome_Razao,
    pais.codReceita,
    case tab.idtipoPessoa when 2 then tab2.cnpj
                          else '' end _CNPJ,
    case tab.idtipoPessoa when 1 then tab1.cpf
                          when 3 then tab3.cpf_1 else '' end _CPF,
    case tab.idtipoPessoa when 2 then tab2.ie
                          when 3 then tab3.ie else '' end Ie,
    ifnull(idSpedMunicipio,""),
    "" as SUPRAMA,
    ifnull(tab6.logradouro,""),
    ifnull(tab6.numero,""),
    ifnull(tab6.complemento,""),
    ifnull(tab6.bairro,"")

from
	cliente tab
  inner join tipoPessoa tp on(tab.idTipoPessoa = tp.idTipoPessoa)
  inner join loja on(tab.idloja = loja.idloja)
  left join pais on(tab.idPais = pais.idPais)
	left join fisica tab1 on(tab.idcliente = tab1.idcliente)
	left join juridica tab2 on(tab.idcliente = tab2.idcliente)
	left join (select rural.idcliente,rural.cpf as cpf_1,rural.nome,rural.nascimento,rural.ie,rural.idsexo,rural.identidade,rural.idcivil,sexo.descricao as sexo1,civil.descricao as civil1 from rural
                inner join sexo on(rural.idsexo = sexo.idsexo)
                inner join civil on(rural.idcivil = civil.idcivil)) as tab3
        		on(tab.idcliente = tab3.idcliente)
	left join sexo tab4 on(tab1.idsexo = tab4.idsexo)
	left join civil tab5 on(tab1.idcivil = tab5.idcivil)
  left join endereco tab6 on(tab.idCliente = tab6.idCLiente and tab6.idEnderecoType=1)
  left join nf on(tab.idCliente = nf.idCliente and nf.statusNf=1)
  left join cupom_cabecalho on(tab.idCliente = cupom_cabecalho.cliente)
  left join entrada on(tab.idCliente = entrada.idCliente and entrada.idLoja=find_loja)
where
    (
     tab2.cnpj is not null or
     tab1.cpf  is not null or
     tab3.cpf_1 is not null
    ) and (nf.emissao between di and df  ||
      cupom_cabecalho.dataVenda between di and df ||
      entrada.emissao between di and df) AND nf.serie not in ('X','x') union
  select distinct tab.idAdministradora,
        tab.razao,
        pais.codReceita,
        tab.cnpj,
        '' as cpf,
        tab.ie,
        ifnull(tab3.idSpedMunicipio,0),
        "" as SUPRAMA,
        tab.rua,
        tab.numero,
        "",
        tab.bairro

        from administradora tab

             inner join cartao tab1 on(tab.idAdministradora = tab1.idAdministradora)
             inner join cliente tab2 on(tab.idAdministradora = tab2.idCliente)
             left join pais on(tab2.idPais = pais.idPais)
             left join (select idAdministradora,
                               idSpedMunicipio
                                            from administradora tab
                                             inner join spedMunicipio tab1 on(tab.municipio = tab1.municipio)) tab3 on(tab.idAdministradora = tab3.idAdministradora)
             where tab1.emissao between di and df and tab1.idLoja=find_loja and
             (coalesce(cupom,0) > 0 || coalesce(pedido,0)>0 || coalesce(chave_nota,0) > 0);
     when '0175' then
  select date_format(data,'%d%m%Y'), chaveorigem, cont_ant, chavepai from log where data >= di and data <= df and operacao in('MODULO [CLIENTE]','MODULO [ENDERECO]');
     when '0190' then
select distinct tab.unidade,upper(tab1.descricao)
        from cupom_detalhes tab
             inner join unidadeMedida tab1 on(tab.unidade = tab1.unidade)
               where tab.dataVenda >= di and tab.dataVenda <= df and tab.loja=find_loja union
select distinct tab2.unidade,upper(tab2.descricao)
        from nfitem tab
              inner join produtoEmbalagem tab1 on(tab.idProduto = tab1.idProduto)
              inner join unidadeMedida tab2 on(tab1.idUnidadeMedida = tab2.idUnidadeMedida)
               where tab.data >= di and tab.data <= df union
select distinct tab2.unidade,upper(tab2.descricao)
        from entradaItem tab
              inner join produtoEmbalagem tab1 on(tab.idProduto = tab1.idProduto)
              inner join unidadeMedida tab2 on(tab1.idUnidadeMedida = tab2.idUnidadeMedida)
               where tab.dateInsert >= di and tab.dateInsert <= df;
      when '0200' then
select distinct tab.idProduto,
                tab.nome,
                tab2.barra,
                if(lg.chavePai is not null, lg.chavePai,""),
                tab1.unidade,
                tab6.idtypeItem,
                tab6.spedNcm,
                "0" as tipi,
                tab6.idGenero,
                "" as cod_lst,
                ifnull(cast(converti/100 AS DECIMAL(10,2)),'0.00'),
                date_format(tab.dataAlteracao, '%d%m%Y')
         from produto tab
left join log lg on(tab.idProduto = lg.chavePai and tab.dataAlteracao=lg.data)
             inner join unidadeMedida tab1 on(tab.idunidade = tab1.idunidadeMedida)
             inner join produtoEmbalagem tab2 on(tab.idproduto = tab2.idproduto)
             inner join produtoStore tab3 on(tab.idproduto = tab3.idproduto)
             inner join produtoPrice tab4 on(tab.idproduto = tab4.idproduto)
             inner join produtoEstoques tab5 on(tab.idproduto = tab5.idproduto)
             inner join produtoImpostos tab6 on(tab.idProduto = tab6.idProduto)
             left join (select idUsuario, descricao from usuario order by 1) as tab7 on(tab.idUsuario = tab7.idUsuario)
             inner join juridica on(tab.idFornecedor = juridica.idcliente)
             left join spedNcm on(tab6.spedNcm =spedNcm.idSpedNcm)
             left join spedGeneroItem on(tab6.idGenero =spedGeneroItem.idGenero)
             left join cst on(tab6.cst = cst.idCst)
             left join pisCofins on(tab6.idpisCofins = pisCofins.idpisCofins)
             left join aliquota on (tab6.tributacao = aliquota.idAliquota)
             left join tributacao on(aliquota.idAliquota = tributacao.idAliquota)
             left join typeItem on(tab6.idTypeItem = typeItem.idTypeItem)
             left join cupom_detalhes suv on(tab.idProduto = suv.produto  and suv.loja=find_loja and suv.dataVenda between di and df)
             left join (select  tab1.idProduto, tab.loja, tab.emissao, tab1.idNf from nf tab
                                      inner join nfItem tab1 on(tab.nf = tab1.idNf) where tab.serie not in ('X','x')) suv1 on(tab.idProduto = suv1.idproduto and suv1.Loja=find_loja and suv1.emissao between di and df)
             left join (select tab.entrada, tab.idLoja, tab1.idProduto, tab.idEntrada from entrada tab
                                      inner join entradaItem tab1 on(tab.idEntrada = tab1.idEntrada) where tab.serie not in ('X','x')) suv2 on(tab.idProduto = suv2.idproduto and suv2.idLoja=find_loja and suv2.entrada between di and df)
             where (suv.numerocupom is not null or suv2.idEntrada is not null or suv1.idNf is not null) and tab2.defaultVenda='s';
     when '0205' then
  select cont_ant,date_format(di,'%d%m%Y'),date_format(df,'%d%m%Y'), chaveorigem, chavePai, date_format(log.data,'%d%m%Y') from log where data >= di and data <= df and operacao in('MODULO [PRODUTO]');

      when '0400' then

select distinct nf.idParamentro, tab.descricao
        from nf
             inner join paramentro_faturamento tab on(nf.idParamentro = tab.idParamentro)
                             where nf.serie not in ('X','x') and  nf.emissao >=di and nf.emissao <= df and nf.Loja=find_loja and nf.statusNF=1 union
select distinct
          tab.idOperacao, tab1.descricao
        from entrada tab
             inner join operacaoentrada tab1 on(tab.idOperacao = tab1.idOperacao)
                              where tab.emissao >=di and tab.emissao <= df and tab.idLoja=find_loja;

  WHEN '0990' then
select count(*) from (
	select '009' as Versao,
        1 as Finali,
       date_format(di,'%d%m%Y'),
       date_format(df,'%d%m%Y'),
       loja.razao,
       loja.CNPJ,
       "" as CPF,
       loja.UF,
       loja.IE,
       loja.codigoMunicipio,
       loja.IEmunicipal,
       "" as SUPRAMA,
       perfil AS PERFIL,
       atividade as tipo_atividade

                from loja
                     where idLoja = find_loja
) as sub0000 into @a;


select count(*) from (
	select if(finalidade='A',0,1)
) as sub0001 into @b;

select count(*) from (
	SELECT abreviatura,
       cep,
       logradouro,
       numero,
       endereco.complemento,
       bairro,
       concat(ifnull(mid(tab4.ddd,3,2),'000'), ifnull(tab4.telefone,'')) as Fone,
       concat(ifnull(mid(tab6.ddd,3,2),'000'),ifnull(tab6.telefone,'')) as Fax,
       tab5.mail

      from loja tab
      left join endereco on(tab.idloja = endereco.idcliente)
      left join estado tab3 on(endereco.estado = tab3.uf)
      left join(select tab.idCliente, tab.ddd, tab.telefone from fone tab
                                      inner join loja on(tab.idCliente = loja.idLoja)
                                      where tab.idFoneType=1 and tab.idCliente=find_loja) tab4 on(tab.idLoja = tab4.idCliente)
      left join (select email.idCliente,
       email.mail
        from email
             inner join loja on(email.idCliente = loja.idLoja)
                                 where loja.idLoja=find_loja and email.padrao=1) tab5 on(tab.idLoja = tab5.idCliente)
      left join(select tab.idCliente, tab.ddd, tab.telefone from fone tab
                                      inner join loja on(tab.idCliente = loja.idLoja)
                                      where tab.idFoneType=2 and tab.idCliente=find_loja) tab6 on(tab.idLoja = tab6.idCliente)
  where
       tab.idloja=find_loja

) as sub0005  into @c;

  select max(cep) from funcionario_endereco where idFuncionario=find_pessoa into @find_cep;
  select cepCity.nome,cepbairro.idestado from cepbairro inner join cepCity on(cepbairro.idcepCity = cepCity.idcepCity) inner join estado on(cepbairro.idestado=estado.idestado) where cepbairro.cep = @find_cep into @z, @x;
  set @w = (select ifnull(idspedMunicipio,0) as cod_municipio from spedmunicipio where municipio like concat(@z,"%")  and idEstado=@x);

select count(*) from (
  SELECT tab.nome,
       tab.cpf,
       tab.crc,
       ifnull(contador_cnpj,'') as cnpj_obrigatorio,
       ifnull(tab1.cep,0),
       ifnull(tab1.logradouro,''),
       ifnull(tab1.numero,''),
       ifnull(tab1.complemento,''),
       ifnull(tab1.bairro,''),
       concat(mid((ifnull(tab2.ddd,'0000')),3,2),ifnull(tab2.telefone,'')),
       concat(mid((ifnull(tab3.ddd,'0000')),3,2),ifnull(tab3.telefone,'')) as fax,
       ifnull(tab.email,''),
       ifnull(@w,"")
                  from funcionario tab
               left join funcionario_endereco tab1 on(tab.idFuncionario = tab1.idFuncionario)
               left join funcionario_fone tab2 on(tab.idFuncionario = tab2.idFuncionario and tab2.idfonetype=1)
               left join (select idFuncionario,telefone, ddd from  funcionario_fone where idFonetype=2) tab3 on(tab.idFuncionario = tab3.idFuncionario)
                                           where tab.idFuncao=10 and tab.idFuncionario=find_pessoa
) as sub0100 into @d;

select count(*) from (
select
	distinct tab.idcliente as chave,
    case tab.idtipoPessoa when 1 then tab1.nome
                          when 2 then tab2.razao
                          when 3 then tab3.nome end Nome_Razao,
    pais.codReceita,
    case tab.idtipoPessoa when 2 then tab2.cnpj
                          else '' end _CNPJ,
    case tab.idtipoPessoa when 1 then tab1.cpf
                          when 3 then tab3.cpf_1 else '' end _CPF,
    case tab.idtipoPessoa when 2 then tab2.ie
                          when 3 then tab3.ie else '' end Ie,
    ifnull(idSpedMunicipio,""),
    "" as SUPRAMA,
    ifnull(tab6.logradouro,""),
    ifnull(tab6.numero,""),
    ifnull(tab6.complemento,""),
    ifnull(tab6.bairro,"")

from
	cliente tab
  inner join tipoPessoa tp on(tab.idTipoPessoa = tp.idTipoPessoa)
  inner join loja on(tab.idloja = loja.idloja)
  left join pais on(tab.idPais = pais.idPais)
	left join fisica tab1 on(tab.idcliente = tab1.idcliente)
	left join juridica tab2 on(tab.idcliente = tab2.idcliente)
	left join (select rural.idcliente,rural.cpf as cpf_1,rural.nome,rural.nascimento,rural.ie,rural.idsexo,rural.identidade,rural.idcivil,sexo.descricao as sexo1,civil.descricao as civil1 from rural
                inner join sexo on(rural.idsexo = sexo.idsexo)
                inner join civil on(rural.idcivil = civil.idcivil)) as tab3
        		on(tab.idcliente = tab3.idcliente)
	left join sexo tab4 on(tab1.idsexo = tab4.idsexo)
	left join civil tab5 on(tab1.idcivil = tab5.idcivil)
  left join endereco tab6 on(tab.idCliente = tab6.idCLiente and tab6.idEnderecoType=1)
  left join nf on(tab.idCliente = nf.idCliente and nf.statusNf=1)
  left join cupom_cabecalho on(tab.idCliente = cupom_cabecalho.cliente)
  left join entrada on(tab.idCliente = entrada.idCliente and entrada.idLoja=find_loja)
where
    (
     tab2.cnpj is not null or
     tab1.cpf  is not null or
     tab3.cpf_1 is not null
    ) and (nf.emissao between di and df  ||
      cupom_cabecalho.dataVenda between di and df ||
      entrada.emissao between di and df) AND nf.serie not in ('X','x') union
  select distinct tab.idAdministradora,
        tab.razao,
        pais.codReceita,
        tab.cnpj,
        '' as cpf,
        tab.ie,
        ifnull(tab3.idSpedMunicipio,0),
        "" as SUPRAMA,
        tab.rua,
        tab.numero,
        "",
        tab.bairro

        from administradora tab

             inner join cartao tab1 on(tab.idAdministradora = tab1.idAdministradora)
             inner join cliente tab2 on(tab.idAdministradora = tab2.idCliente)
             left join pais on(tab2.idPais = pais.idPais)
             left join (select idAdministradora,
                               idSpedMunicipio
                                            from administradora tab
                                             inner join spedMunicipio tab1 on(tab.municipio = tab1.municipio)) tab3 on(tab.idAdministradora = tab3.idAdministradora)
             where tab1.emissao between di and df and tab1.idLoja=find_loja and
             (coalesce(cupom,0) > 0 || coalesce(pedido,0)>0 || coalesce(chave_nota,0) > 0)
) as sub0150 into @e;

select count(*) from (
select date_format(data,'%d%m%Y'), chaveorigem, cont_ant, chavepai from log where data >= di and data <= df and operacao in('MODULO [CLIENTE]','MODULO [ENDERECO]')
) as sub0175 into @f;

select count(*) from (
	select distinct tab.unidade,upper(tab1.descricao)
        from cupom_detalhes tab
             inner join unidadeMedida tab1 on(tab.unidade = tab1.unidade)
               where tab.dataVenda >= di and tab.dataVenda <= df and tab.loja=find_loja union
select distinct tab2.unidade,upper(tab2.descricao)
        from nfitem tab
              inner join produtoEmbalagem tab1 on(tab.idProduto = tab1.idProduto)
              inner join unidadeMedida tab2 on(tab1.idUnidadeMedida = tab2.idUnidadeMedida)
               where tab.data >= di and tab.data <= df union
select distinct tab2.unidade,upper(tab2.descricao)
        from entradaItem tab
              inner join produtoEmbalagem tab1 on(tab.idProduto = tab1.idProduto)
              inner join unidadeMedida tab2 on(tab1.idUnidadeMedida = tab2.idUnidadeMedida)
               where tab.dateInsert >= di and tab.dateInsert <= df	
) as sub0190 into @g;

select count(*) from (
select distinct tab.idProduto as test,
                tab.nome,
                tab2.barra,
                tab.idProduto,
                tab1.unidade,
                tab6.idtypeItem,
                tab6.spedNcm,
                "0" as tipi,
                tab6.idGenero,
                "" as cod_lst,
                ifnull(cast(converti/100 AS DECIMAL(10,2)),'0.00'),
                date_format(tab.dataAlteracao, '%d%m%Y')
         from produto tab
             inner join unidadeMedida tab1 on(tab.idunidade = tab1.idunidadeMedida)
             inner join produtoEmbalagem tab2 on(tab.idproduto = tab2.idproduto)
             inner join produtoStore tab3 on(tab.idproduto = tab3.idproduto)
             inner join produtoPrice tab4 on(tab.idproduto = tab4.idproduto)
             inner join produtoEstoques tab5 on(tab.idproduto = tab5.idproduto)
             inner join produtoImpostos tab6 on(tab.idProduto = tab6.idProduto)
             left join (select idUsuario, descricao from usuario order by 1) as tab7 on(tab.idUsuario = tab7.idUsuario)
             inner join juridica on(tab.idFornecedor = juridica.idcliente)
             left join spedNcm on(tab6.spedNcm =spedNcm.idSpedNcm)
             left join spedGeneroItem on(tab6.idGenero =spedGeneroItem.idGenero)
             left join cst on(tab6.cst = cst.idCst)
             left join pisCofins on(tab6.idpisCofins = pisCofins.idpisCofins)
             left join aliquota on (tab6.tributacao = aliquota.idAliquota)
             left join tributacao on(aliquota.idAliquota = tributacao.idAliquota)
             left join typeItem on(tab6.idTypeItem = typeItem.idTypeItem)
             left join cupom_detalhes suv on(tab.idProduto = suv.produto  and suv.loja=find_loja and suv.dataVenda between di and df)
             left join (select  tab1.idProduto, tab.loja, tab.emissao, tab1.idNf from nf tab
                                      inner join nfItem tab1 on(tab.nf = tab1.idNf) where tab.serie not in ('X','x')) suv1 on(tab.idProduto = suv1.idproduto and suv1.Loja=find_loja and suv1.emissao between di and df)
             left join (select tab.entrada, tab.idLoja, tab1.idProduto, tab.idEntrada from entrada tab
                                      inner join entradaItem tab1 on(tab.idEntrada = tab1.idEntrada) where tab.serie not in ('X','x')) suv2 on(tab.idProduto = suv2.idproduto and suv2.idLoja=find_loja and suv2.entrada between di and df)
             where (suv.numerocupom is not null or suv2.idEntrada is not null or suv1.idNf is not null) and tab2.defaultVenda='s'
) as sub0200 into @h;


select count(*) from ( 
	select cont_ant,date_format(di,'%d%m%Y'),date_format(df,'%d%m%Y'), chaveorigem, chavePai, date_format(log.data,'%d%m%Y') from log where data >= di and data <= df and operacao in('MODULO [PRODUTO]')
) as sub0250 into @i;


select count(*) from ( 
select distinct concat(1,nf.idParamentro), tab.descricao
        from nf
             inner join paramentro_faturamento tab on(nf.idParamentro = tab.idParamentro)
                             where nf.serie not in ('X','x') and  nf.emissao >=di and nf.emissao <= df and nf.Loja=find_loja and nf.statusNF=1 union
select distinct
          concat(2,tab.idOperacao), tab1.descricao
        from entrada tab
             inner join operacaoentrada tab1 on(tab.idOperacao = tab1.idOperacao)
                              where tab.emissao >=di and tab.emissao <= df and tab.idLoja=find_loja	
) as sub0400 into @j;

  select @a+@b+@c+@d+@e+@f+@g+@h+@i+@j+1 as bloco_0;

      when 'C001' then

        select if(finalidade='A',0,1);

      when 'C100' then
select distinct tab.nf,
       tab.typeNf,
       "0" as Emite_Propria,
       tab.idCliente,
       tab.modNotaFiscal,
       tab.idSituacaoFiscal,
       tab.serie,
       tab.nr_nota,
       ifnull(tab.chave_nfe,""),
       date_format(tab.emissao,'%d%m%Y'),
       date_format(tab.saida,'%d%m%Y'),
       round(tab.valorTotalNota,2),
       case tab1.typeVenda when 'AV' then 0 when 'AP' then 1 else 2 end,
       round(tab.descontoValor,2),
       0 as "ABA_ZFM",
       round((valorTotalProdutos + valorTotaServico),2),
       tab.typeFrete,
       round(tab.frete,2),
       round(tab.seguro,2),
       round(tab.contribuicaoSocial,2),
       round(tab.baseIcms,2),
       round(tab.valorIcms,2),
       round(tab.baseCalculoIcmsSubstituicao,2),
       round(tab.valorIcmsSubstituicao,2),
       round(tab.valorIPI,2),
       round(tab.valorPis,2),
       round(tab.valorCofins,2),
       0 as PIS_ST,
       0  as COFINS_ST
           from nf tab
              left join finalizadora tab1 on(tab.condPgto = tab1.idFinalizadora)
                 where tab.emissao between di and df and tab.Loja=find_loja and tab.modNotaFiscal in('01','04','55','65','1B') AND tab.serie not in ('X','x')  and tab.statusNf=1

       union
select
distinct tab.idEntrada,
      0 as entr,
      1 as terceiro,
      tab.idCliente,
      tab.modNotaFiscal,
      tab.idSituacaoFiscal,
      tab.serie,
      tab.nr_Nota,
      ifnull(tab.chave_nfe,""),
      date_format(tab.emissao,'%d%m%Y'),
      date_format(tab.entrada,'%d%m%Y'),
      round(tab.valorTotalNota,2),
      case tab2.typeVenda when 'AV' then 0 when 'AP' then 1 else 2 end,
      round(tab.valorDesconto,2),
      0 as 'ABT_ZFM',
      round(tab.valorTotalProduto,2),
      case typeFrete when 'c' then 1 when 'f' then 2 else 9 end,
      round(tab.valorFrete,2),
      round(tab.vendo,2),
      round(tab.valorDespesasAcessorias,2),
      round(tab.baseCalculoIcms,2),
      round(tab.creditoIcms,2),
      round(tab.baseCalculoSubstituicao,2),
      round(tab.valorIcmsSubstuicao,2),
      round(tab.valorTotalIpi,2),
      round(tab.valorPis,2),
      round(tab.valorCofins,2),
      0 as Pis_ST,
      0 as Cofins_ST
       from entrada tab
           inner join entradaFinanceiro tab1 on(tab.idEntrada = tab1.idEntrada)
           left join finalizadora tab2 on(tab1.idFinalizadora = tab2.idFinalizadora)
                 where tab.entrada between di and df and tab.idLoja=find_loja and tab.serie not in ('X','x') and tab.modNotaFiscal in('01','04','55','65','1B');
  when 'C170' then
select tab.sequencia,
       tab.idProduto,
       tab1.nome,
       tab.quantidade,
       tab2.unidade,
       round(tab.valorTotalProduto,2),
       round(tab.descontoValor,2),
       if(tab4.estoqueOrigem='s',0,1),
       tab.cstIcms,
       tab.cfop,
       concat(1,tab4.idParamentro),
       if(tab.cstIcms='060'  || tab.cstIcms='040' ,0, round(tab.baseCalculo,2)),
       round(tab.aliquota,2),
       round(tab.icms,2),
       round(tab.baseCalculoIcmsSubstituicao,2),
       round(tab.aliquotaIcmsSt,2),
       round(tab.valorIcmsSubstituicao,2),
       0 as IND_APUR,
       if(tab.cstIpi=''  || tab.cstIpi='0','02',mid(tab.cstIpi,2,2)),
       '' as Enquadra,
       round(tab.baseIpi,2),
       round(tab5.ipi,2),
       round(((tab.baseIpi*tab5.ipi)/100),2) as Vl_Ipi,
       if(tab.cstPis=''  || tab.cstPis='0','07',if(LENGTH(tab.cstPis)=2,tab.cstPis,mid(tab.cstPis,2,2))),
       round(tab.basePis,2),
       round(tab6.aliquotaPis,2),
       0 as QUANT_BC_PIS,
       0 as ALIQ_PIS,
       round(tab.valorPis,2),
       if(trim(tab.cstCofins)='' || tab.cstCofins='0','07',if(LENGTH(tab.cstCofins)=2,tab.cstCofins,mid(tab.cstCofins,2,2))),
       round(tab.baseCofins,2),
       round(tab6.aliquotaCofins,2),
       0 as QUANT_BC_COFINS,
       0 as ALIQ_COFINS,
       round(tab.valorCofins,2),
       "" as Conta_Contabil,
              tab3.nr_nota
      from nfItem tab
           inner join produto tab1 on(tab.idProduto = tab1.idProduto)
           inner join unidadeMedida tab2 on(tab.idUnidadeMedida = tab2.idUnidadeMedida)
           inner join nf tab3 on(tab.idNf = tab3.nf)
           inner join paramentro_faturamento tab4 on(tab3.idParamentro = tab4.idParamentro)
           inner join produtoImpostos tab5 on(tab.idProduto = tab5.idProduto)
           inner join loja tab6 on(tab3.loja = tab6.idLoja)
                         where tab6.idLoja = tab5.idLoja and tab3.emissao>=di and tab3.emissao<=df and tab3.serie not in('X','x')
                                and  tab3.statusNf=1 and tab5.idLoja=find_loja and tab6.idLoja=find_loja and tab3.modNotaFiscal in('01','04','55','65','1B') union
select tab.sequencia,
       tab.idProduto,
       tab1.Nome,
       tab.quantidade,
       tab2.unidade,
       round(tab.CustoTotal,2),
       round(tab.discountValue,2),
       tab4.flagUpdateEstoque,
       tab.cstIcms,
       tab.cfop,
       concat(2,tab4.idOPeracao),
       if(tab.cstIcms='040' || tab.cstIcms='060'  ,0, round((tab.baseIcms-(tab.baseIcms*tab.reducaoEntrada)/100),2)),
       round(tab.icmsEntrada,2),
       round(tab.creditoIcms,2),
       round(tab.baseCalculoSubstituicao,2),
       round(tab.substituicao,2),
       round(tab.valorIcmsSubstituicao,2),
       0 as IND_APUR,
       if(cstIpi.codigo=''  || cstIpi.codigo='0','02',mid(cstIpi.codigo,2,2)),
       '' as Enq_IPI,
       round(tab.CustoTotal,2) as Base_Ipi,
       round(tab5.ipi,2),
       round(tab.valorIpi,2),
       if(cstPis.codigo='' || cstPis.codigo='0','07',if(LENGTH(cstPis.codigo)=2,cstPis.codigo,mid(cstPis.codigo,2,2))),
       round(tab.basePis,2),
       round(tab6.aliquotaPis,2),
       0 as QUANT_BC_PIS,
       0 as ALIQ_PIS,
       round(tab.valorPis,2),
       if(trim(cstCofins.codigo || cstCofins.codigo='0')='','07',if(LENGTH(cstCofins.codigo)=2,cstCofins.codigo,mid(cstCofins.codigo,2,2))),
       round(tab.baseCofins,2),
       round(tab6.aliquotaCofins,2),
       0 as QUANT_BC_Cofins,
       0 as ALIQ_Cofins,
       round(tab.valorCofins,2),
       "" as Cod_Contabil,
       tab3.nr_nota

       from entradaItem tab
            inner join produto tab1 on(tab.idProduto = tab1.idProduto)
            inner join unidadeMedida tab2 on(tab.idUnidadeMedida = tab2.idUnidadeMedida)
            inner join entrada tab3 on(tab.identrada = tab3.idEntrada)
            inner join operacaoEntrada tab4 on(tab3.idOperacao = tab4.idOperacao)
            inner join produtoImpostos tab5 on(tab.idProduto = tab5.idProduto)
            inner join loja tab6 on(tab3.idloja = tab6.idLoja)
             left join cstPis on(tab.cstPis = cstPis.idCstPis)
             left join cstCofins on(tab.cstCofins = cstCofins.idCstCofins)
             left join cstIpi on(tab.cstIpi = cstIpi.idCstIpi)
                         where tab6.idLoja = tab5.idLoja and tab3.entrada >= di and tab3.entrada <= df and tab3.serie not in('X','x')
                                and tab5.idLoja=find_loja and tab6.idLoja=find_loja and tab3.modNotaFiscal in('01','04','55','65','1B');
  when 'C190' then
select
       tab.cstIcms,
       tab.cfop,
       round(tab.aliquota,2),
       round(sum(tab.valor),2) as Valor_Operacao, 
       round(sum(IF(tab.cstIcms='060' || tab.cstIcms='040' || tab.typeAliquota='s',0, round(tab.baseCalculo,2))),2) as Base_Calculo,
       round(sum(tab.icms),2),
       round(sum(IF(tab.cstIcms='060' || tab.cstIcms='040' || tab.typeAliquota='s',0, round(tab.baseCalculoIcmsSt,2))),2),
       round(sum(tab.icmsSt),2),
       round(sum(tab.reducao),2),
       round(sum(tab.valorIPI),2),
       tab1.msg01,
       tab1.nr_nota
            from nfImposto tab
                    inner join nf tab1 on(tab.idNf = tab1.nf)
                    where  tab1.statusNf=1 and tab1.emissao >= di and tab1.emissao <= df  and tab1.loja=find_loja and tab1.serie not in('X','x')

        group by 1,2,3,11,12
             union
select
       tab.cst,
       tab.cfop,
       round(tab.aliquota,2),
       round(SUM((tab.baseIsentoInformado+tab.valorInformado)),2),
       IF(tab.tipo='f' || tab.cst='060' || tab.cst='040',0, round(sum(tab.valorInformado),2)),
       round(sum(tab.impostoInformado),2),
       IF(tab.tipo='f' || tab.cst='060' || tab.cst='040',0, round(sum(tab1.totalBaseCalculoSubstituicao),2)),
       round(sum(tab1.totalIcmsSt),2),
       round(sum(tab.baseIsentoInformado),2),
       round(sum(tab.valorIpiApurado),2),
       tab1.informacaoComplementares,
       tab1.nr_nota
       from entradaImp tab
            inner join entrada tab1 on(tab.idEntrada = tab1.idEntrada)
                     where tab1.entrada >= di and tab1.entrada <= df and tab1.idLoja=find_loja and tab1.serie not in('X','x')
                      group by 1,2,3,11,12 order by 3,12 ;
  when 'C350' then
SELECT tab.modNotaFiscal,
       tab.serie,
       "" as SubSerie,
       tab.nr_nota,
       date_format(tab.emissao,'%d%m%Y') as Emissao,
       ifnull(case tab1.idtipoPessoa when 1 then tab2.cpf
                          when 2 then tab3.cnpj
                          when 3 then tab4.cpf_1 end, '') Doc_CGC,
       round(sum(tab.valorTotalProdutos),2),
       round(sum(tab.valorTotalNota),2),
       round(sum(tab.valorPis),2),
       round(sum(tab.valorCofins),2), "09"
        from nf tab
              left join cliente tab1 on(tab.idcliente = tab1.idCliente)
            	left join fisica tab2 on(tab.idcliente = tab2.idcliente)
            	left join juridica tab3 on(tab.idcliente = tab3.idcliente)
            	left join (select rural.idcliente,rural.cpf as cpf_1,rural.nome,rural.nascimento,rural.ie,rural.idsexo,rural.identidade,rural.idcivil,sexo.descricao as sexo1,civil.descricao as civil1 from rural
                inner join sexo on(rural.idsexo = sexo.idsexo)
                inner join civil on(rural.idcivil = civil.idcivil)) as tab4
        		on(tab.idcliente = tab4.idcliente)
              where tab.serie not in('X','x',"","0") and tab.modNotaFiscal in('02') and
                    tab.emissao >= di and tab.emissao <= df and
                    tab.loja=find_loja and
                    tab.statusNf=1 group by 1,2,3;
  when 'C370' then
select 
       tab.sequencia,
       tab.idProduto,
       tab.quantidade,
       tab2.unidade,
       round(tab.priceVenda,2),
       round(tab.descontoValor,2)
      from nfItem tab
           inner join produto tab1 on(tab.idProduto = tab1.idProduto)
           inner join unidadeMedida tab2 on(tab.idUnidadeMedida = tab2.idUnidadeMedida)
           inner join nf tab3 on(tab.idNf = tab3.nf)
           inner join paramentro_faturamento tab4 on(tab3.idParamentro = tab4.idParamentro)
           inner join produtoImpostos tab5 on(tab.idProduto = tab5.idProduto)
           inner join loja tab6 on(tab3.loja = tab6.idLoja)
                         where tab6.idLoja = tab5.idLoja and tab3.emissao>=di and tab3.emissao<=df and tab3.serie not in('X','x')
                                and  tab3.statusNf=1 and tab5.idLoja=find_loja and tab6.idLoja=find_loja and tab3.modNotaFiscal in('02');

  when 'C400' then
  select distinct tab.modeloFiscal,
       tab2.modelo,
       tab.numeroSerie,
       tab.caixa
        from
            licenca_ecf tab
            inner join cupom_cabecalho tab1 on(tab.caixa = tab1.terminal)
            inner join modelo_ecf tab2 on(tab.modelo = tab2.idMarca)
                  where tab1.dataVenda >= di and tab1.dataVenda <= df and tab1.loja=find_loja;
  when 'C405' then
select sum(round(tab.valorAcumulado,2)) - (select coalesce(sum(round(tab.valorAcumulado,2)),0)
        FROM conectorpdv.detalhe_reducao tab
           inner join movimentoDia tab1 on(tab.idLoja = tab1.idLoja and tab.numeroCaixa = tab1.numero_serie and tab.crz = tab1.crz)
           where tab1.movimento >= di and tab1.movimento <= df and tab1.idLoja=find_loja and round(tab.valorAcumulado,2) > 0 and tab.totalizador in('CT','OPNF'))
        FROM conectorpdv.detalhe_reducao tab
           inner join movimentoDia tab1 on(tab.idLoja = tab1.idLoja and tab.numeroCaixa = tab1.numero_serie and tab.crz = tab1.crz)
           where tab1.movimento >= di and tab1.movimento <= df and tab1.idLoja=find_loja and round(tab.valorAcumulado,2) > 0 into @vb;
    if(@vb is null)then set @vb=0; end if;
SELECT date_format(tab.movimento,'%d%m%Y'),
       mid(tab.cro,2,3),
       tab.crz,
       tab.coo,
       if(@vb is null,round(tab.venda_bruta,2),round(@vb,2)),
       round(tab1.total,2),
       tab.numero_serie
      FROM movimentodia tab
           inner join (SELECT max(grandeTotalEnd) as total,
                              dataMovimento,
                              loja,
                              terminal FROM conectorpdv.fechamentocaixa where dataMovimento>=di and dataMovimento<=df  group by 2,3,4)
           as tab1 on(tab.idLoja = tab1.loja and tab.numeroCaixa = tab1.terminal and tab.movimento = tab1.dataMovimento)
              where tab.movimento >=di and tab.movimento <=df and tab.idLoja = find_loja;
  when 'C420' THEN
  SELECT
       tab.totalizador,
       round(tab.valorAcumulado,2),
       case tab.totalizador when '01T1800' then '01'
                        when '02T1200' then '02'
                        when '03T0700' then '03' else "" end,
       case tab.totalizador when '01T1800' then concat('Totalizador', " ",tab.totalizador)
                        when '02T1200' then concat('Totalizador', " ",tab.totalizador)
                        when '03T0700' then concat('Totalizador', " ",tab.totalizador) else "" end,
       tab1.numero_serie,
       date_format(tab1.movimento,'%d%m%Y')
      FROM conectorpdv.detalhe_reducao tab
           inner join movimentoDia tab1 on(tab.idLoja = tab1.idLoja and tab.numeroCaixa = tab1.numero_serie and tab.crz = tab1.crz)
           where tab1.movimento >= di and tab1.movimento <= df and tab1.idLoja=find_loja and round(tab.valorAcumulado,2) > 0 and tab.totalizador not in('CT','OPNF') order by 6;
   when 'C425' then
SELECT tab.produto,
       round(sum(tab.quantidade),3),
       tab.unidade,
       round(sum(tab.total),2),
       0 as Pis,
       0 as Cofins,tab.aliquota,
       case tab.tipoTributacao when 's' then 'F1'
                               when 't' then
                                            case tab.aliquota when 18 then '01T1800'
                                                              when 12 then '02T1200'
                                                              when 7 then '03T0700' end
                               when 'i' then 'I1' else 'F1' end,
        date_format(tab.dataVenda,'%d%m%Y')
          FROM cupom_detalhes tab
                   where tab.loja=find_loja and dataVenda >= di and dataVenda <=df  and  tab.situacao=0  group by 1,3,5,6,7 order by 8;

    when 'C460' then

  select tab.modeloFiscal,
       tab.situacao,
       tab1.numeroCupom,
       date_format(tab1.dataVenda, '%d%m%Y'),
       round(tab1.totalBruto,2),
       0 as Pis,
       0 as Cofins,
       documentoCPF_CNPJ,
       ifnull(case tab3.idtipoPessoa when 1 then tab4.nome
                          when 2 then tab5.razao
                          when 3 then tab6.nome end, '') Nome_Razao
        from
            licenca_ecf tab
              inner join cupom_cabecalho tab1 on(tab.caixa = tab1.terminal)
              inner join modelo_ecf tab2 on(tab.modelo = tab2.idMarca)
              left join cliente tab3 on(tab1.cliente = tab3.idCliente)
            	left join fisica tab4 on(tab1.cliente = tab4.idcliente)
            	left join juridica tab5 on(tab1.cliente = tab5.idcliente)
            	left join (select rural.idcliente,rural.cpf as cpf_1,rural.nome,rural.nascimento,rural.ie,rural.idsexo,rural.identidade,rural.idcivil,sexo.descricao as sexo1,civil.descricao as civil1 from rural
                inner join sexo on(rural.idsexo = sexo.idsexo)
                inner join civil on(rural.idcivil = civil.idcivil)) as tab6
        		on(tab1.cliente = tab6.idcliente)
                           where
                                tab1.dataVenda >= di and tab1.dataVenda <= df and tab1.Loja=find_loja AND tab1.situacao=1;
    when 'C470' then
    select tab1.produto,
         round(tab1.quantidade,3),
         if(tab1.situacao=1, tab1.quantidade,0),
         tab1.unidade,
         round(tab1.total,2),
         tab1.cstICms,
         tab1.cfop,
         round(tab1.aliquota,2),
         0 AS Pis,
         0 as Cofins,
         tab1.numeroCupom,
         date_format(tab1.dataVenda, '%d%m%Y')

        from
            licenca_ecf tab
              inner join cupom_detalhes tab1 on(tab.caixa = tab1.terminal)
              inner join modelo_ecf tab2 on(tab.modelo = tab2.idMarca)
              inner join aliquota tab3 on(tab3.idaliquota = tab1.tributacao)
                      where
                             tab1.dataVenda >=di and tab1.dataVenda <=df and tab1.Loja=find_loja  AND tab1.situacao=0;
    when 'c490' THEN
  select
        tab1.cstIcms,
        tab1.cfop,
        round(tab1.aliquota,2),
        round(sum(tab1.total),2) as total,
        round(sum(tab1.total),2) as fill,
        round(sum(tab1.icms),2),
        "" cod_obs,
        date_format(dataVenda, '%d%m%Y'),
        tab.numeroSerie

        from
            licenca_ecf tab
              inner join cupom_detalhes tab1 on(tab.caixa = tab1.terminal)
              inner join modelo_ecf tab2 on(tab.modelo = tab2.idMarca)
              inner join aliquota tab3 on(tab3.idaliquota = tab1.tributacao)
                      where
                             TAB1.situacao=0 and
                             tab1.dataVenda >=di and tab1.dataVenda <=df and tab1.Loja=find_loja
                                       group by 1,2,3,7,8 order by 7,8;
  when 'C495' then
  select
        round(tab1.aliquota,2),
        tab1.produto,
        round(tab1.quantidade,3),
        if(tab1.situacao=0, tab1.quantidade,0.00),
        tab1.unidade,
        round(tab1.priceVenda,2),
        round(tab1.valordesconto,2),
        if(tab1.situacao=1, round(sum(tab1.total),2),0.00) as Vl_Canc,
        round(tab1.valorAcrescimo,2),
        round(sum(tab1.total),2) as Base_Calc,
        round(sum(tab1.icms),2),
        if(tab3.tipo='i', round(sum(tab1.total),2),0) val_isen,
        0 as Var_Not,
        0 as base_st,
        round(sum(tab1.total),2) as full_,
        "" cod_obs

        from
            licenca_ecf tab
              inner join cupom_detalhes tab1 on(tab.caixa = tab1.terminal)
              inner join modelo_ecf tab2 on(tab.modelo = tab2.idMarca)
              inner join aliquota tab3 on(tab3.idaliquota = tab1.tributacao)
                      where
                             tab1.dataVenda >=di and tab1.dataVenda <=df and tab1.Loja=find_loja
                                       group by 1,2,3;

  when 'C990' then

select count(*) from (select distinct tab.nf,
       tab.typeNf,
       "0" as Emite_Propria,
       tab.loja,
       tab.modNotaFiscal,
       tab.idSituacaoFiscal,
       tab.serie,
       tab.nr_nota,
       ifnull(tab.chave_nfe,""),
       date_format(tab.emissao,'%d%m%Y'),
       date_format(tab.saida,'%d%m%Y'),
       tab.valorTotalNota,
       case tab1.typeVenda when 'AV' then 0 when 'AP' then 1 else 2 end,
       tab.descontoValor,
       0 as "ABA_ZFM",
       (valorTotalProdutos + valorTotaServico),
       tab.typeFrete,
       tab.frete,
       tab.seguro,
       tab.contribuicaoSocial,
       tab.baseIcms,
       tab.valorIcms,
       tab.baseCalculoIcmsSubstituicao,
       tab.valorIcmsSubstituicao,
       tab.valorIPI,
       tab.valorPis,
       tab.valorCofins,
       0 as PIS_ST,
       0  as COFINS_ST
           from nf tab
              left join finalizadora tab1 on(tab.condPgto = tab1.idFinalizadora)
                 where tab.emissao between di and df and tab.Loja=find_loja
       union
select
distinct tab.idEntrada,
      0 as entr,
      1 as terceiro,
      tab.idCliente,
      tab.modNotaFiscal,
      tab.idSituacaoFiscal,
      tab.serie,
      tab.nr_Nota,
      ifnull(tab.chave_nfe,""),
      date_format(tab.emissao,'%d%m%Y'),
      date_format(tab.entrada,'%d%m%Y'),
      tab.valorTotalNota,
      case tab2.typeVenda when 'AV' then 0 when 'AP' then 1 else 2 end,
      tab.valorDesconto,
      0 as 'ABT_ZFM',
      tab.valorTotalProduto,
      case typeFrete when 'c' then 1 when 'f' then 2 else 9 end,
      tab.valorFrete,
      tab.vendo,
      tab.valorDespesasAcessorias,
      tab.baseCalculoIcms,
      tab.creditoIcms,
      tab.baseCalculoSubstituicao,
      tab.valorIcmsSubstuicao,
      tab.valorTotalIpi,
      tab.valorPis,
      tab.valorCofins,
      0 as Pis_ST,
      0 as Cofins_ST
       from entrada tab
           inner join entradaFinanceiro tab1 on(tab.idEntrada = tab1.idEntrada)
           left join finalizadora tab2 on(tab1.idFinalizadora = tab2.idFinalizadora)
                 where tab.entrada between di and df and tab.idLoja=find_loja) as sub into @a1;

select count(*) from (select tab.sequencia,
       tab.idProduto,
       tab1.nome,
       tab.quantidade,
       tab2.unidade,
       tab.valorTotalProduto,
       tab.descontoValor,
       if(tab4.estoqueOrigem='s',0,1),
       tab.cstIcms,
       tab.cfop,
       tab4.idParamentro,
       tab.baseCalculo,
       tab.aliquota,
       tab.icms,
       tab.baseCalculoIcmsSubstituicao,
       tab.aliquotaIcmsSt,
       tab.valorIcmsSubstituicao,
       0 as IND_APUR,
       tab.cstIpi,
       "" as Enquadra,
       tab.baseIpi,
       tab5.ipi,
       (tab.baseIpi*tab5.ipi)/100 as Vl_Ipi,
       tab.cstPis,
       tab.basePis,
       tab6.aliquotaPis,
       0 as QUANT_BC_PIS,
       0 as ALIQ_PIS,
       tab.valorPis,
       tab.cstCofins,
       tab.baseCofins,
       tab6.aliquotaCofins,
       0 as QUANT_BC_COFINS,
       0 as ALIQ_COFINS,
       tab.valorCofins,
       "" as Conta_Contabil
      from nfItem tab
           inner join produto tab1 on(tab.idProduto = tab1.idProduto)
           inner join unidadeMedida tab2 on(tab.idUnidadeMedida = tab2.idUnidadeMedida)
           inner join nf tab3 on(tab.idNf = tab3.nf)
           inner join paramentro_faturamento tab4 on(tab3.idParamentro = tab4.idParamentro)
           inner join produtoImpostos tab5 on(tab.idProduto = tab5.idProduto)
           inner join loja tab6 on(tab3.loja = tab6.idLoja)
                         where tab6.idLoja = tab5.idLoja and tab3.emissao>=di and tab3.emissao<=df
                                and tab5.idLoja=find_loja and tab6.idLoja=find_loja union
select tab.sequencia,
       tab.idProduto,
       tab1.Nome,
       tab.quantidade,
       tab2.unidade,
       tab.CustoTotal,
       tab.discountValue,
       tab4.flagUpdateEstoque,
       tab.cstIcms,
       tab.cfop,
       tab4.idOPeracao,
       tab.baseIcms,
       tab.icmsEntrada,
       tab.creditoIcms,
       tab.baseCalculoSubstituicao,
       tab.substituicao,
       tab.valorIcmsSubstituicao,
       0 as IND_APUR,
       tab.cstIpi,
       0 as Enq_IPI,
       tab.CustoTotal as Base_Ipi,
       tab5.ipi,
       tab.valorIpi,
       tab.cstPis,
       tab.basePis,
       tab6.aliquotaPis,
       0 as QUANT_BC_PIS,
       0 as ALIQ_PIS,
       tab.valorPis,
       tab.cstPis,
       tab.baseCofins,
       tab6.aliquotaCofins,
       0 as QUANT_BC_Cofins,
       0 as ALIQ_Cofisn,
       tab.valorCofins,
       "" as Cod_Contabil

       from entradaItem tab
            inner join produto tab1 on(tab.idProduto = tab1.idProduto)
            inner join unidadeMedida tab2 on(tab.idUnidadeMedida = tab2.idUnidadeMedida)
            inner join entrada tab3 on(tab.identrada = tab3.idEntrada)
            inner join operacaoEntrada tab4 on(tab3.idOperacao = tab4.idOperacao)
            inner join produtoImpostos tab5 on(tab.idProduto = tab5.idProduto)
            inner join loja tab6 on(tab3.idloja = tab6.idLoja)
                         where tab6.idLoja = tab5.idLoja and tab3.entrada >= di and tab3.entrada <= df
                                and tab5.idLoja=find_loja and tab6.idLoja=find_loja) as sub  into @b1;

select count(*) from (select
       tab.cstIcms,
       tab.cfop,
       tab.aliquota,
       (tab.baseIcmsIsentos+tab.baseCalculo),
       tab.baseCalculo,
       tab.icms,
       tab.baseCalculoIcmsSt,
       tab.icmsSt,
       tab.reducao,
       tab.valorIPI,
       tab1.msg01
            from nfImposto tab
                    inner join nf tab1 on(tab.idNf = tab1.nf)
                    where tab1.emissao >= di and tab1.emissao <= df  and tab1.loja=find_loja
             union
select
       tab.cst,
       tab.cfop,
       tab.aliquota,
       (tab.baseIsentoApurado+tab.impostoApurado),
       tab.valorApurado,
       tab.impostoApurado,
       tab1.totalBaseCalculoSubstituicao,
       tab1.totalIcmsSt,
       tab.reducao,
       tab.valorIpiApurado,
       tab1.informacaoComplementares
       from entradaImp tab
            inner join entrada tab1 on(tab.idEntrada = tab1.idEntrada)
                     where tab1.entrada >= di and tab1.entrada <= df and tab1.idLoja=find_loja) as sub  into @c1;

select count(*) from (    select distinct tab.modeloFiscal,
       tab2.modelo,
       tab.numeroSerie,
       tab.caixa
        from
            licenca_ecf tab
            inner join cupom_cabecalho tab1 on(tab.caixa = tab1.terminal)
            inner join modelo_ecf tab2 on(tab.modelo = tab2.idMarca)
                  where tab1.dataVenda >= di and tab1.dataVenda <= df and tab1.loja=find_loja)  as sub into @d1;
select count(*) from (
SELECT date_format(tab.movimento,'%d%m%Y'),
       tab.cro,
       tab.crz,
       tab.coo,
       tab.venda_bruta,
       tab1.total
      FROM movimentodia tab
           inner join (SELECT max(grandeTotalEnd) as total,
                              dataMovimento,
                              loja,
                              terminal FROM conectorpdv.fechamentocaixa where dataMovimento>=di and dataMovimento<=df  group by 2,3,4)
           as tab1 on(tab.idLoja = tab1.loja and tab.numeroCaixa = tab1.terminal and tab.movimento = tab1.dataMovimento)
              where tab.movimento >=di and tab.movimento <=df and tab.idLoja = find_loja)  as sub into @e1;

select count(*) from (
  SELECT
       tab.totalizador,
       tab.valorAcumulado,
       case tab.totalizador when '01T1800' then '01'
                        when '02T1200' then '02'
                        when '03T0700' then '03' else "" end,
       concat('Totalizador', " ",tab.totalizador)
      FROM conectorpdv.detalhe_reducao tab
           inner join movimentoDia tab1 on(tab.idLoja = tab1.idLoja and tab.numeroCaixa = tab1.numero_serie and tab.crz = tab1.crz)
           where tab1.movimento >= di and tab1.movimento <= df and tab1.idLoja=find_loja) as sub into @f1;

select count(*) from (SELECT tab.produto,
       tab.quantidade,
       tab.unidade,
       tab.total,
       0 as Pis,
       0 as Cofins
          FROM cupom_detalhes tab
                   where tab.loja=find_loja and dataVenda >= di and dataVenda <=df) as sub  into @g1;

select count(*) from (
select tab.modeloFiscal,
       tab.situacao,
       tab1.numeroCupom,
       date_format(tab1.dataVenda, '%d%m%Y'),
       tab1.totalLiquido,
       0 as Pis,
       0 as Cofins,
       documentoCPF_CNPJ
        from
            licenca_ecf tab
              inner join cupom_cabecalho tab1 on(tab.caixa = tab1.terminal)
              inner join modelo_ecf tab2 on(tab.modelo = tab2.idMarca)
                           where
                                tab1.dataVenda >= di and tab1.dataVenda <= df and tab1.Loja=find_loja )  as sub into @h1;

select count(*) from (        select tab1.produto,
         tab1.quantidade,
         if(tab1.situacao=0, tab1.quantidade,0.00),
         tab1.unidade,
         tab1.total,
         tab1.cstICms,
         tab1.cfop,
         tab1.aliquota,
         0 AS Pis,
         0 as Cofins

        from
            licenca_ecf tab
              inner join cupom_detalhes tab1 on(tab.caixa = tab1.terminal)
              inner join modelo_ecf tab2 on(tab.modelo = tab2.idMarca)
              inner join aliquota tab3 on(tab3.idaliquota = tab1.tributacao)
                      where
                             tab1.dataVenda >=di and tab1.dataVenda <=df and tab1.Loja=find_loja)  as sub into @i1;

select count(*) from (   select
        tab1.cstIcms,
        tab1.cfop,
        tab1.aliquota,
        sum(tab1.total) as total,
        sum(tab1.total) as total1,
        sum(tab1.icms),
        "" cod_obs

        from
            licenca_ecf tab
              inner join cupom_detalhes tab1 on(tab.caixa = tab1.terminal)
              inner join modelo_ecf tab2 on(tab.modelo = tab2.idMarca)
              inner join aliquota tab3 on(tab3.idaliquota = tab1.tributacao)
                      where
                             tab1.dataVenda >=di and tab1.dataVenda <=df and tab1.Loja=find_loja
                                       group by 1,2,3)  as sub into @j1;

select count(*) from (
  select
        tab1.aliquota,
        tab1.produto,
        tab1.quantidade,
        if(tab1.situacao=0, tab1.quantidade,0.00),
        tab1.unidade,
        tab1.priceVenda,
        tab1.valordesconto,
        if(tab1.situacao=0, sum(tab1.total),0.00) as Vl_Canc,
        tab1.valorAcrescimo,
        sum(tab1.total) as Base_Calc,
        sum(tab1.icms),
        if(tab3.tipo='i', sum(tab1.total),0) val_isen,
        0 as Var_Not,
        0 as base_st,
        sum(tab1.total),
        "" cod_obs

        from
            licenca_ecf tab
              inner join cupom_detalhes tab1 on(tab.caixa = tab1.terminal)
              inner join modelo_ecf tab2 on(tab.modelo = tab2.idMarca)
              inner join aliquota tab3 on(tab3.idaliquota = tab1.tributacao)
                      where
                             tab1.dataVenda >=di and tab1.dataVenda <=df and tab1.Loja=find_loja
                                       group by 1,2,3)  as sub  into @l1;

select count(*) from ( select 
       tab.sequencia,
       tab.idProduto,
       tab.quantidade,
       tab2.unidade,
       round(tab.priceVenda,2),
       round(tab.descontoValor,2)
      from nfItem tab
           inner join produto tab1 on(tab.idProduto = tab1.idProduto)
           inner join unidadeMedida tab2 on(tab.idUnidadeMedida = tab2.idUnidadeMedida)
           inner join nf tab3 on(tab.idNf = tab3.nf)
           inner join paramentro_faturamento tab4 on(tab3.idParamentro = tab4.idParamentro)
           inner join produtoImpostos tab5 on(tab.idProduto = tab5.idProduto)
           inner join loja tab6 on(tab3.loja = tab6.idLoja)
                         where tab6.idLoja = tab5.idLoja and tab3.emissao>=di and tab3.emissao<=df and tab3.serie not in('X','x')
                                and  tab3.statusNf=1 and tab5.idLoja=find_loja and tab6.idLoja=find_loja and tab3.modNotaFiscal in('02') )  as sub into @m1;
select count(*) from ( SELECT tab.modNotaFiscal,
       tab.serie,
       "" as SubSerie,
       tab.nr_nota,
       date_format(tab.emissao,'%d%m%Y') as Emissao,
       ifnull(case tab1.idtipoPessoa when 1 then tab2.cpf
                          when 2 then tab3.cnpj
                          when 3 then tab4.cpf_1 end, '') Doc_CGC,
       round(sum(tab.valorTotalProdutos),2),
       round(sum(tab.valorTotalNota),2),
       round(sum(tab.valorPis),2),
       round(sum(tab.valorCofins),2)
        from nf tab
              left join cliente tab1 on(tab.idcliente = tab1.idCliente)
            	left join fisica tab2 on(tab.idcliente = tab2.idcliente)
            	left join juridica tab3 on(tab.idcliente = tab3.idcliente)
            	left join (select rural.idcliente,rural.cpf as cpf_1,rural.nome,rural.nascimento,rural.ie,rural.idsexo,rural.identidade,rural.idcivil,sexo.descricao as sexo1,civil.descricao as civil1 from rural
                inner join sexo on(rural.idsexo = sexo.idsexo)
                inner join civil on(rural.idcivil = civil.idcivil)) as tab4
        		on(tab.idcliente = tab4.idcliente)
              where tab.serie not in('X','x',"","0") and tab.modNotaFiscal in('02') and
                    tab.emissao >= di and tab.emissao <= df and
                    tab.loja=find_loja and
                    tab.statusNf=1 group by 1,2,3 )  as sub into @n1;


  select @a1+@b1+@c1+@d1+@e1+@f1+@g1+@h1+@i1+@j1+@l1+@m1+@n1 as BLOCO_C;


      when 'D001' then
    select if(finalidade='A',0,1);

      when 'D100' then
  select
      if(tab.typeFrete='f',0,1) as tipo_operacao,
      if(tab.idLoja=tab.idCliente,0,1) as emissao_propria,
         tab.idCliente,
         tab.modNotaFiscal,
         tab.idSituacaoFiscal,
         if(tab.serie='','U',tab.serie),
         "" as Sub,
         tab.nr_nota,
         ifnull(tab.chave_nfe,""),
         DATE_FORMAT(tab.emissao,'%d%m%Y'),
         DATE_FORMAT(tab.emissao,'%d%m%Y') as DT_A_P,
         '00'  as 'TP_CT-e',
          1 as 'CHV_CTE_REF',
         ROUND(tab.valorTotalNota,2) as VL_DOC,
         ROUND(tab.valorDesconto,2),
         case typeFrete when 'c' then 2
                        when 'f' then 0
                        when 's' then 9
                        when 'o' then 1
                          else 9 end as IND_FRT,
         ROUND(tab.valorTotalNota,2) as VL_SERV,
         ROUND(tab.baseFrete,2) VL_DESC,
         ROUND(tab.icmsFrete,2),
         0 as VL_NT,
         "" as COD_INF,
         "" as COD_CTA
        from entrada tab
             where tab.typeFrete='f'
                       and tab.entrada >= di and tab.entrada <= df and tab.idLoja=find_loja;
    when 'D101' then
    select tab1.sequencia,
           tab1.idProduto,
           ROUND(tab1.custoNotaTotal,2),0
           from entrada tab
              inner join entradaItem tab1 on(tab.idEntrada = tab1.idEntrada)
                                where tab.typeNota='f' and tab.idLoja=find_loja and tab.entrada >=  di and tab.entrada <= df;
      when 'D190' then
      SELECT
        tab.cst,
        tab.cfop,
        ROUND(tab.aliquota,2),
        ROUND(tab1.valorTotalNota,2),
        ROUND(tab.valorInformado,2),
        ROUND(tab.impostoInformado,2),
        ROUND(tab.reducao,2),
        "" as obs
              FROM
                entradaimp tab
                     inner join entrada tab1 on(tab.idEntrada = tab1.idEntrada)
                           where tab1.entrada between di and df and tab1.idLoja = find_loja and tab1.conhecimentoFrete>0;
      when 'D990' then
select count(*) from (  select
      if(tab.typeFrete='f',0,1) as tipo_operacao,
      if(tab.idLoja=tab.idCliente,0,1) as emissao_propria,
         tab.idCliente,
         tab.modNotaFiscal,
         tab.idSituacaoFiscal,
         if(tab.serie='','U',tab.serie),
         "" as Sub,
         tab.nr_nota,
         ifnull(tab.chave_nfe,""),
         tab.emissao,
         tab.emissao as DT_A_P,
         '00'  as 'TP_CT-e',
          1 as 'CHV_CTE_REF',
         tab.valorTotalNota as VL_DOC,
         tab.valorDesconto,
         case typeFrete when 'c' then 2
                        when 'f' then 0
                        when 's' then 9
                        when 'o' then 1
                          else 9 end as IND_FRT,
         tab.valorTotalNota as VL_SERV,
         tab.baseFrete VL_DESC,
         tab.icmsFrete,
         0 as VL_NT,
         "" as COD_INF,
         "" as COD_CTA
        from entrada tab
             where tab.typeFrete='f'
                       and tab.entrada >= di and tab.entrada <= df and tab.idLoja=find_loja) as sub  into @a2;
select count(*) from (      SELECT
        tab.cst,
        tab.cfop,
        tab.aliquota,
        tab1.valorTotalNota,
        tab.valorInformado,
        tab.impostoInformado,
        tab.reducao,
        "" as obs
              FROM
                entradaimp tab
                     inner join entrada tab1 on(tab.idEntrada = tab1.idEntrada)
                           where tab1.entrada between di and df and tab1.idLoja = find_loja) as sub  into @b2;
    select @a2+@b2 as BLOCO_D;
      when 'H001' then
    select if(finalidade='A',0,1);
  when 'H005' then
  SELECT date_format(tab.data, '%d%m%Y'),
         tab.valor,
         tab1.idInventarioMotivo
          FROM inventario tab
               inner join inventarioMotivo tab1 on(tab.idInventarioMotivo = tab1.idInventarioMotivo)
                             where status=1 and data=dateInv;
  when 'H010' then
  SELECT tab.idProduto,
         tab1.idunidade,
         tab.quantidadeAtual,
         tab.valor,
         tab.valor,
         0 as IND_PROP,
         tab2.idLoja,
         tab1.nome,
         '' as COD_CTA
            FROM inventarioitem tab
                     inner join produto tab1 on(tab.idProduto = tab1.idProduto)
                     inner join inventario tab2 on(tab.idInventario = tab2.idInventario)
                                         WHERE  tab2.status=1 and tab2.data=dateInv;
  when 'H990' then
    select count(*) from (
                        SELECT date_format(tab.data, '%d%m%Y'),
                               tab.valor,
                               tab1.idInventarioMotivo
                                    FROM inventario tab
                                       inner join inventarioMotivo tab1 on(tab.idInventarioMotivo = tab1.idInventarioMotivo)
                                                   where status=1 and data=dateInv ) as sub  into @a3;
  select count(*) from (
  SELECT tab.idProduto,
         tab1.idunidade,
         tab.quantidadeAtual,
         tab.valor,
         tab.valor,
         0 as IND_PROP,
         tab2.idLoja,
         tab1.nome,
         '' as COD_CTA
            FROM inventarioitem tab
                     inner join produto tab1 on(tab.idProduto = tab1.idProduto)
                     inner join inventario tab2 on(tab.idInventario = tab2.idInventario)
                                          WHERE tab2.status=1 and tab2.data=dateInv) as sub  into @b3;
                                          select @a3 + @b3;
      when 'E001' then
    select if(finalidade='A',0,1);
  when 'E110' then
if(call_debitos_cp = 1)then
select
      ROUND(sum(icms),2) from cupom_detalhes
                  where dataVenda between di and df and loja=find_loja  and situacao=0 into @saidaCupom;
                  ELSE  set @saidaCupom=0;
end if;


if(call_debitos_nf= 1)then
SELECT ROUND(sum(coalesce(tab.icms,0)),2)
              FROM nfimposto tab
                    inner join nf tab1 on(tab.idNf = tab1.Nf)
                                       where tab1.emissao between di and df and tab1.Loja=find_loja and tab1.serie not in ('X','x') and tab1.modNotaFiscal in('01','04','55','65','1B') and
                                             tab1.Loja=1 and
                                            tab1.geraDanfe ='s' and tab1.chave_Nfe is not null and tab1.statusNf=1
                                            into @saidaNotas;
                                            else set @saidaNotas=0;
end if;

if(call_creditos = 1)then
SELECT
        ROUND(sum(tab.impostoApurado),2)
                        FROM entradaimp tab
                             inner join entrada tab1 on(tab.idEntrada = tab1.idEntrada)
                              where tab1.entrada >= di and tab1.entrada <= df and tab1.serie not in('X','x')
                                 and tab1.idLoja=find_loja and tab1.modNotaFiscal in('01','04','55','65','1B') into @entradas;
                                  else set @entradas=0;
end if;




  select ROUND((coalesce(@saidaCupom,0) + coalesce(@saidaNotas,0)),2) as 'field_02',
         0 as 'field_03',
         0 as 'field_04',
         0 as 'field_05',
         ROUND(coalesce(@entradas,0),2) as 'field_06',
         0 as 'field_07',
         0 as 'field_08',
         0 as 'field_09',
         0 as 'field_10',
         if(ROUND(((coalesce(@saidaCupom,0) + coalesce(@saidaNotas,0))-(coalesce(@entradas,0))),2)<0,0,ROUND(((coalesce(@saidaCupom,0) + coalesce(@saidaNotas,0))-(coalesce(@entradas,0))),2)) as 'field_11',
         0 as 'field_12',
         if(ROUND(((coalesce(@saidaCupom,0) + coalesce(@saidaNotas,0))-(coalesce(@entradas,0))),2)<0,0,ROUND(((coalesce(@saidaCupom,0) + coalesce(@saidaNotas,0))-(coalesce(@entradas,0))),2)) as 'field_13',
         if(ROUND(((coalesce(@saidaCupom,0) + coalesce(@saidaNotas,0))-(coalesce(@entradas,0))),2)<0,ROUND(coalesce(@entradas,0),2),0) as 'field_14',
         0 as 'field_15';

    when 'E116' then

select '000' as field_1,
        round(valorPago,2)  as field_2,
        date_format(vencimento,'%d%m%Y') as field_3,
        '1206' as fiel4,
        '' as field_5,
        '' as field_6,
        '' as field_7,
        '' as field_8,
        date_format(vencimento,'%m%Y') as field9
             from pagar
                      where vencimento between di and df and loja=find_loja and idTipoContasPagar in(3,4);
    when 'E990' then

    select count(*) from ( select if(finalidade='A',0,1) ) as sub  into @e1;

if(call_debitos_cp = 1)then
select
      ROUND(sum(icms),2) from cupom_detalhes
                  where dataVenda between di and df and loja=find_loja into @saidaCupom;
      else set @saidaCupom=0;
end if;

if(call_creditos = 1)then
SELECT
        ROUND(sum(tab.impostoApurado),2)
                        FROM entradaimp tab
                             inner join entrada tab1 on(tab.idEntrada = tab1.idEntrada)
                                     where tab1.entrada between di and df and tab1.idLoja=find_loja
                                                                                     into @entradas;
      else set @entradas=0;
end if;

if(call_debitos_nf = 1)then
SELECT ROUND(sum(tab.icms),2)
              FROM nfimposto tab
                    inner join nf tab1 on(tab.idNf = tab1.Nf)
                                       where tab1.emissao between di and df and tab1.loja=find_loja into @saidaNotas;
      else set @saidaNotas=0;
end if;

    select count(*) from ( select ROUND((@saidaCupom + @saidaNotas),2) as 'field_02',
         0 as 'field_03',
         0 as 'field_04',
         0 as 'field_05',
         ROUND(@entradas,2) as 'field_06',
         0 as 'field_07',
         0 as 'field_08',
         0 as 'field_09',
         0 as 'field_10',
         ROUND(((@saidaCupom + @saidaNotas)-(@entradas)),2) as 'field_11',
         0 as 'field_12',
         ROUND(((@saidaCupom + @saidaNotas)-(@entradas)),2) as 'field_13',
         0 as 'field_14',
         0 as 'field_15'  ) as sub  into @e2;
   
    select count(*) from ( select '000' as field_2,
        round(valorPago,2)  as field_3,
        date_format(vencimento,'%d%m%Y') as field_3,
        '' as field_4,
        '' as field_5,
        '' as field_6,
        '' as field_7 from pagar
                      where vencimento between di and df and loja=find_loja  ) as sub  into @e3;
      select @e1+@e2+@e3;

  when '1001' then
  select count(*)
        from cartao
             where emissao between di and df and idLoja=find_loja into @card;
  if(@card > 0)then
    select 0;
  else
    select if(finalidade='A',0,1);
  end if;

  when '1010' then
  select count(*)
        from cartao
             where emissao between di and df and idLoja=find_loja into @card;
  if(@card is not null && @card > 0)then set @card='S'; else set @card='N'; end if;

  select
         'N' AS 'IND_EXP_02',
         'N' AS 'IND_CCRF_03',
         'N' AS 'IND_COMB_04',
         'N' AS 'IND_USINA_05',
         'N' AS 'IND_VA_06',
         'N' AS 'IND_EE_07',
          ifnull(@card,'N') AS 'IND_CART_08',
         'N' AS 'IND_FORM_09',
         'N' AS 'IND_AER_10';
    when '1600' then
   select tab.idAdministradora,
        if(tab.idtypeCartao=1, round(sum(tab1.valor),2),0),
        if(tab.idtypeCartao != 1, round(sum(tab1.valor),2),0)
        from administradora tab
             inner join cartao tab1 on(tab.idAdministradora = tab1.idAdministradora)
             inner join cliente tab2 on(tab.idAdministradora = tab2.idCliente)
             left join (select idAdministradora,
                               idSpedMunicipio
                                            from administradora tab
                                             inner join spedMunicipio tab1 on(tab.municipio = tab1.municipio)) tab3 on(tab.idAdministradora = tab3.idAdministradora)
             where tab1.emissao between di and df and tab1.idLoja=find_loja group by 1;

  when '9001' then
  select if(finalidade='A',0,1);



  end case;

    else IF(perfil = "B" or perfil = "b")THEN 

case tipo
  when '0000' then
select '009' as Versao,
        1 as Finali,
       date_format(di,'%d%m%Y'),
       date_format(df,'%d%m%Y'),
       loja.razao,
       loja.CNPJ,
       "" as CPF,
       loja.UF,
       loja.IE,
       loja.codigoMunicipio,
       loja.IEmunicipal,
       "" as SUPRAMA,
       perfil AS PERFIL,
       atividade as tipo_atividade

                from loja
                     where idLoja = find_loja;
    when '0001' then

    select if(finalidade='A',0,1);

    when '0005' then

SELECT abreviatura,
       cep,
       logradouro,
       numero,
       endereco.complemento,
       bairro,
       concat(ifnull(mid(tab4.ddd,3,2),'000'), ifnull(tab4.telefone,'')) as Fone,
       concat(ifnull(mid(tab6.ddd,3,2),'000'),ifnull(tab6.telefone,'')) as Fax,
       tab5.mail

      from loja tab
      left join endereco on(tab.idloja = endereco.idcliente)
      left join estado tab3 on(endereco.estado = tab3.uf)
      left join(select tab.idCliente, tab.ddd, tab.telefone from fone tab
                                      inner join loja on(tab.idCliente = loja.idLoja)
                                      where tab.idFoneType=1 and tab.idCliente=find_loja) tab4 on(tab.idLoja = tab4.idCliente)
      left join (select email.idCliente,
       email.mail
        from email
             inner join loja on(email.idCliente = loja.idLoja)
                                 where loja.idLoja=find_loja and email.padrao=1) tab5 on(tab.idLoja = tab5.idCliente)
      left join(select tab.idCliente, tab.ddd, tab.telefone from fone tab
                                      inner join loja on(tab.idCliente = loja.idLoja)
                                      where tab.idFoneType=2 and tab.idCliente=find_loja) tab6 on(tab.idLoja = tab6.idCliente)
  where
       tab.idloja=find_loja;
    when '0100' then
  select max(cep) from funcionario_endereco where idFuncionario=find_pessoa into @find_cep;
  select cepCity.nome,cepbairro.idestado from cepbairro inner join cepCity on(cepbairro.idcepCity = cepCity.idcepCity) inner join estado on(cepbairro.idestado=estado.idestado) where cepbairro.cep = @find_cep into @a, @c;
  set @b = (select ifnull(idspedMunicipio,0) as cod_municipio from spedmunicipio where municipio like concat(@a,"%")  and idEstado=@c);
  SELECT tab.nome,
       tab.cpf,
       tab.crc,
       ifnull(contador_cnpj,'') as cnpj_obrigatorio,
       ifnull(tab1.cep,0),
       ifnull(tab1.logradouro,''),
       ifnull(tab1.numero,''),
       ifnull(tab1.complemento,''),
       ifnull(tab1.bairro,''),
       concat(mid((ifnull(tab2.ddd,'0000')),3,2),ifnull(tab2.telefone,'')),
       concat(mid((ifnull(tab3.ddd,'0000')),3,2),ifnull(tab3.telefone,'')) as fax,
       ifnull(tab.email,''),
       ifnull(@b,"")
                  from funcionario tab
               left join funcionario_endereco tab1 on(tab.idFuncionario = tab1.idFuncionario)
               left join funcionario_fone tab2 on(tab.idFuncionario = tab2.idFuncionario and tab2.idfonetype=1)
               left join (select idFuncionario,telefone, ddd from  funcionario_fone where idFonetype=2) tab3 on(tab.idFuncionario = tab3.idFuncionario)
                                           where tab.idFuncao=10 and tab.idFuncionario=find_pessoa;
    when '0150' then
  
select
	distinct tab.idcliente as chave,
    case tab.idtipoPessoa when 1 then tab1.nome
                          when 2 then tab2.razao
                          when 3 then tab3.nome end Nome_Razao,
    pais.codReceita,
    case tab.idtipoPessoa when 2 then tab2.cnpj
                          else '' end _CNPJ,
    case tab.idtipoPessoa when 1 then tab1.cpf
                          when 3 then tab3.cpf_1 else '' end _CPF,
    case tab.idtipoPessoa when 2 then tab2.ie
                          when 3 then tab3.ie else '' end Ie,
    ifnull(idSpedMunicipio,""),
    "" as SUPRAMA,
    ifnull(tab6.logradouro,""),
    ifnull(tab6.numero,""),
    ifnull(tab6.complemento,""),
    ifnull(tab6.bairro,"")

from
	cliente tab
  inner join tipoPessoa tp on(tab.idTipoPessoa = tp.idTipoPessoa)
  inner join loja on(tab.idloja = loja.idloja)
  left join pais on(tab.idPais = pais.idPais)
	left join fisica tab1 on(tab.idcliente = tab1.idcliente)
	left join juridica tab2 on(tab.idcliente = tab2.idcliente)
	left join (select rural.idcliente,rural.cpf as cpf_1,rural.nome,rural.nascimento,rural.ie,rural.idsexo,rural.identidade,rural.idcivil,sexo.descricao as sexo1,civil.descricao as civil1 from rural
                inner join sexo on(rural.idsexo = sexo.idsexo)
                inner join civil on(rural.idcivil = civil.idcivil)) as tab3
        		on(tab.idcliente = tab3.idcliente)
	left join sexo tab4 on(tab1.idsexo = tab4.idsexo)
	left join civil tab5 on(tab1.idcivil = tab5.idcivil)
  left join endereco tab6 on(tab.idCliente = tab6.idCLiente and tab6.idEnderecoType=1)
  left join nf on(tab.idCliente = nf.idCliente and nf.statusNf=1)
  left join cupom_cabecalho on(tab.idCliente = cupom_cabecalho.cliente)
  left join entrada on(tab.idCliente = entrada.idCliente and entrada.idLoja=find_loja)
where
    (
     tab2.cnpj is not null or
     tab1.cpf  is not null or
     tab3.cpf_1 is not null
    ) and (nf.emissao between di and df  ||
      cupom_cabecalho.dataVenda between di and df ||
      entrada.emissao between di and df) AND nf.serie not in ('X','x') union
  select distinct tab.idAdministradora,
        tab.razao,
        pais.codReceita,
        tab.cnpj,
        '' as cpf,
        tab.ie,
        ifnull(tab3.idSpedMunicipio,0),
        "" as SUPRAMA,
        tab.rua,
        tab.numero,
        "",
        tab.bairro

        from administradora tab

             inner join cartao tab1 on(tab.idAdministradora = tab1.idAdministradora)
             inner join cliente tab2 on(tab.idAdministradora = tab2.idCliente)
             left join pais on(tab2.idPais = pais.idPais)
             left join (select idAdministradora,
                               idSpedMunicipio
                                            from administradora tab
                                             inner join spedMunicipio tab1 on(tab.municipio = tab1.municipio)) tab3 on(tab.idAdministradora = tab3.idAdministradora)
             where tab1.emissao between di and df and tab1.idLoja=find_loja and
             (coalesce(cupom,0) > 0 || coalesce(pedido,0)>0 || coalesce(chave_nota,0) > 0);
     when '0175' then
  select date_format(data,'%d%m%Y'), chaveorigem, cont_ant, chavepai from log where data >= di and data <= df and operacao in('MODULO [CLIENTE]','MODULO [ENDERECO]');
     when '0190' then
select distinct tab.unidade,upper(tab1.descricao)
        from cupom_detalhes tab
             inner join unidadeMedida tab1 on(tab.unidade = tab1.unidade)
               where tab.dataVenda >= di and tab.dataVenda <= df and tab.loja=find_loja union
select distinct tab2.unidade,upper(tab2.descricao)
        from nfitem tab
              inner join produtoEmbalagem tab1 on(tab.idProduto = tab1.idProduto)
              inner join unidadeMedida tab2 on(tab1.idUnidadeMedida = tab2.idUnidadeMedida)
               where tab.data >= di and tab.data <= df union
select distinct tab2.unidade,upper(tab2.descricao)
        from entradaItem tab
              inner join produtoEmbalagem tab1 on(tab.idProduto = tab1.idProduto)
              inner join unidadeMedida tab2 on(tab1.idUnidadeMedida = tab2.idUnidadeMedida)
               where tab.dateInsert >= di and tab.dateInsert <= df;
      when '0200' then
select distinct tab.idProduto,
                tab.nome,
                tab2.barra,
                tab.idProduto,
                tab1.unidade,
                tab6.idtypeItem,
                tab6.spedNcm,
                "0" as tipi,
                tab6.idGenero,
                "" as cod_lst,
                ifnull(cast(converti/100 AS DECIMAL(10,2)),'0.00'),
                date_format(tab.dataAlteracao, '%d%m%Y')
         from produto tab
             inner join unidadeMedida tab1 on(tab.idunidade = tab1.idunidadeMedida)
             inner join produtoEmbalagem tab2 on(tab.idproduto = tab2.idproduto)
             inner join produtoStore tab3 on(tab.idproduto = tab3.idproduto)
             inner join produtoPrice tab4 on(tab.idproduto = tab4.idproduto)
             inner join produtoEstoques tab5 on(tab.idproduto = tab5.idproduto)
             inner join produtoImpostos tab6 on(tab.idProduto = tab6.idProduto)
             left join (select idUsuario, descricao from usuario order by 1) as tab7 on(tab.idUsuario = tab7.idUsuario)
             inner join juridica on(tab.idFornecedor = juridica.idcliente)
             left join spedNcm on(tab6.spedNcm =spedNcm.idSpedNcm)
             left join spedGeneroItem on(tab6.idGenero =spedGeneroItem.idGenero)
             left join cst on(tab6.cst = cst.idCst)
             left join pisCofins on(tab6.idpisCofins = pisCofins.idpisCofins)
             left join aliquota on (tab6.tributacao = aliquota.idAliquota)
             left join tributacao on(aliquota.idAliquota = tributacao.idAliquota)
             left join typeItem on(tab6.idTypeItem = typeItem.idTypeItem)
             left join cupom_detalhes suv on(tab.idProduto = suv.produto  and suv.loja=find_loja and suv.dataVenda between di and df)
             left join (select  tab1.idProduto, tab.loja, tab.emissao, tab1.idNf from nf tab
                                      inner join nfItem tab1 on(tab.nf = tab1.idNf) where tab.serie not in ('X','x')) suv1 on(tab.idProduto = suv1.idproduto and suv1.Loja=find_loja and suv1.emissao between di and df)
             left join (select tab.entrada, tab.idLoja, tab1.idProduto, tab.idEntrada from entrada tab
                                      inner join entradaItem tab1 on(tab.idEntrada = tab1.idEntrada) where tab.serie not in ('X','x')) suv2 on(tab.idProduto = suv2.idproduto and suv2.idLoja=find_loja and suv2.entrada between di and df)
             where (suv.numerocupom is not null or suv2.idEntrada is not null or suv1.idNf is not null) and tab2.defaultVenda='s';
     when '0205' then
  select cont_ant,date_format(di,'%d%m%Y'),date_format(df,'%d%m%Y'), chaveorigem, chavePai, date_format(log.data,'%d%m%Y') from log where data >= di and data <= df and operacao in('MODULO [PRODUTO]');

      when '0400' then

select distinct concat(1,nf.idParamentro), tab.descricao
        from nf
             inner join paramentro_faturamento tab on(nf.idParamentro = tab.idParamentro)
                             where nf.serie not in ('X','x') and  nf.emissao >=di and nf.emissao <= df and nf.Loja=find_loja and nf.statusNF=1 union
select distinct
          concat(2,tab.idOperacao), tab1.descricao
        from entrada tab
             inner join operacaoentrada tab1 on(tab.idOperacao = tab1.idOperacao)
                              where tab.emissao >=di and tab.emissao <= df and tab.idLoja=find_loja;

  WHEN '0990' then
select count(*) from (
select if((select count(*) from cupom_cabecalho where dataVenda >=di and dataVenda <= df and loja=find_loja)>0, tab.operacaoVendaCupom,""),
       if((select count(*) from cupom_cabecalho where dataVenda >=di and dataVenda <= df and loja=find_loja)>0, tab1.descricao,"")
        from system tab
             inner join paramentro_faturamento tab1 on(tab.operacaoVendaCupom = tab1.idParamentro) union
select distinct nf.idParamentro, tab.descricao
        from nf
             inner join paramentro_faturamento tab on(nf.idParamentro = tab.idParamentro)
                             where nf.emissao >=di and nf.emissao <= df and nf.Loja=find_loja union
select distinct
          tab.idOperacao, tab1.descricao
        from entrada tab
             inner join operacaoentrada tab1 on(tab.idOperacao = tab1.idOperacao)
                              where tab.emissao >=di and tab.emissao <= df and tab.idLoja=find_loja
) as sub into @a;

select count(*) from (
  select cont_ant,di,df, chaveorigem from log where data >= di and data <= df and operacao in('MODULO [PRODUTO]')
) as sub into @b;

select count(*) from (
select distinct tab.idProduto as test,
                tab.nome,
                tab2.barra,
                tab.idProduto,
                tab1.unidade,
                tab6.idtypeItem,
                tab6.spedNcm,
                "0" as tipi,
                tab6.idGenero,
                "0" as cod_lst,
                tributacao.converti
         from produto tab
             inner join unidadeMedida tab1 on(tab.idunidade = tab1.idunidadeMedida)
             inner join produtoEmbalagem tab2 on(tab.idproduto = tab2.idproduto)
             inner join produtoStore tab3 on(tab.idproduto = tab3.idproduto)
             inner join produtoPrice tab4 on(tab.idproduto = tab4.idproduto)
             inner join produtoEstoques tab5 on(tab.idproduto = tab5.idproduto)
             inner join produtoImpostos tab6 on(tab.idProduto = tab6.idProduto)
             left join (select idUsuario, descricao from usuario order by 1) as tab7 on(tab.idUsuario = tab7.idUsuario)
             inner join juridica on(tab.idFornecedor = juridica.idcliente)
             left join spedNcm on(tab6.spedNcm =spedNcm.idSpedNcm)
             left join spedGeneroItem on(tab6.idGenero =spedGeneroItem.idGenero)
             left join cst on(tab6.cst = cst.idCst)
             left join pisCofins on(tab6.idpisCofins = pisCofins.idpisCofins)
             left join aliquota on (tab6.tributacao = aliquota.idAliquota)
             left join tributacao on(aliquota.idAliquota = tributacao.idAliquota)
             left join typeItem on(tab6.idTypeItem = typeItem.idTypeItem)
             left join cupom_detalhes suv on(tab.idProduto = suv.produto  and suv.loja=find_loja and suv.dataVenda between di and df)
             left join (select  tab1.idProduto as prd, tab.loja, tab.emissao from nf tab
                                      inner join nfItem tab1 on(tab.nf = tab1.idNf)) suv1 on(tab.idProduto = suv1.prd and suv1.Loja=find_loja and suv1.emissao between di and df)
             left join (select tab.entrada, tab.idLoja, tab1.idProduto from entrada tab
                                      inner join entradaItem tab1 on(tab.idEntrada = tab1.idEntrada)) suv2 on(tab.idProduto = suv2.idproduto and suv2.idLoja=find_loja and suv2.entrada between di and df)
) as sub3 into @c;

select count(*) from (
select distinct tab.unidade,upper(tab1.descricao)
        from cupom_detalhes tab
             inner join unidadeMedida tab1 on(tab.unidade = tab1.unidade)
               where tab.dataVenda >= di and tab.dataVenda <= df and tab.loja=find_loja union
select distinct tab2.unidade,upper(tab2.descricao)
        from nfitem tab
              inner join produtoEmbalagem tab1 on(tab.idProduto = tab1.idProduto)
              inner join unidadeMedida tab2 on(tab1.idUnidadeMedida = tab2.idUnidadeMedida)
               where tab.data >= di and tab.data <= df union
select distinct tab2.unidade,upper(tab2.descricao)
        from entradaItem tab
              inner join produtoEmbalagem tab1 on(tab.idProduto = tab1.idProduto)
              inner join unidadeMedida tab2 on(tab1.idUnidadeMedida = tab2.idUnidadeMedida)
               where tab.dateInsert >= di and tab.dateInsert <= df
) as sub into @d;
select count(*) from (
  select data, chaveorigem, cont_ant from log where data >= di and data <= df and operacao in('MODULO [CLIENTE]','MODULO [ENDERECO]')
) as sub into @e;

select count(*) from (
  
select
	distinct tab.idcliente as chave,
    case tab.idtipoPessoa when 1 then tab1.nome
                          when 2 then tab2.razao
                          when 3 then tab3.nome end Nome_Razao,
    tab.idpais,
    case tab.idtipoPessoa when 2 then tab2.cnpj
                          else 0 end _CNPJ,
    case tab.idtipoPessoa when 1 then tab1.cpf
                          when 3 then tab3.cpf_1 else 0 end _CPF,
    case tab.idtipoPessoa when 2 then tab2.ie
                          when 3 then tab3.ie else 0 end Ie,
    ifnull(idSpedMunicipio,0),
    "" as SUPRAMA,
    ifnull(tab6.logradouro,""),
    ifnull(tab6.numero,""),
    ifnull(tab6.complemento,""),
    ifnull(tab6.bairro,"")

from
	cliente tab
  inner join tipoPessoa tp on(tab.idTipoPessoa = tp.idTipoPessoa)
  inner join loja on(tab.idloja = loja.idloja)
	left join fisica tab1 on(tab.idcliente = tab1.idcliente)
	left join juridica tab2 on(tab.idcliente = tab2.idcliente)
	left join (select rural.idcliente,rural.cpf as cpf_1,rural.nome,rural.nascimento,rural.ie,rural.idsexo,rural.identidade,rural.idcivil,sexo.descricao as sexo1,civil.descricao as civil1 from rural
                inner join sexo on(rural.idsexo = sexo.idsexo)
                inner join civil on(rural.idcivil = civil.idcivil)) as tab3
        		on(tab.idcliente = tab3.idcliente)
	left join sexo tab4 on(tab1.idsexo = tab4.idsexo)
	left join civil tab5 on(tab1.idcivil = tab5.idcivil)
  left join endereco tab6 on(tab.idCliente = tab6.idCLiente and tab6.idEnderecoType=1)
  left join nf on(tab.idCliente = nf.idCliente)
  left join cupom_cabecalho on(tab.idCliente = cupom_cabecalho.cliente)
  left join entrada on(tab.idCliente = entrada.idCliente and entrada.idLoja=find_loja)
where
    (
     tab2.cnpj is not null or
     tab1.cpf  is not null or
     tab3.cpf_1 is not null
    ) and (nf.emissao between di and df  ||
      cupom_cabecalho.dataVenda between di and df ||
      entrada.emissao between di and df)
) as sub into @f;

  select max(cep) from funcionario_endereco where idFuncionario=find_pessoa into @find_cep;
  select cepCity.nome,cepbairro.idestado from cepbairro inner join cepCity on(cepbairro.idcepCity = cepCity.idcepCity) inner join estado on(cepbairro.idestado=estado.idestado) where cepbairro.cep = @find_cep into @aa, @cc;
  set @bb = (select ifnull(idspedMunicipio,0) as cod_municipio from spedmunicipio where municipio like concat(@aa,"%")  and idEstado=@cc);
select count(*) from (
  SELECT tab.nome,
       tab.cpf,
       tab.crc,
       "0" as cnpj_se_houver,
       ifnull(tab1.cep,''),
       ifnull(tab1.logradouro,''),
       ifnull(tab1.numero,''),
       ifnull(tab1.complemento,''),
       ifnull(tab1.bairro,''),
       ifnull(tab2.telefone,''),
       ifnull(tab3.telefone,'') as fax,
       ifnull(tab.email,''),
       ifnull(@bb,"")


                  from funcionario tab
               left join funcionario_endereco tab1 on(tab.idFuncionario = tab1.idFuncionario)
               left join funcionario_fone tab2 on(tab.idFuncionario = tab2.idFuncionario and tab2.idfonetype=1)
               left join (select idFuncionario,telefone from  funcionario_fone where idFonetype=2) tab3 on(tab.idFuncionario = tab3.idFuncionario)
                                           where tab.idFuncao=10 and tab.idFuncionario=find_pessoa
) as sub into @g;
select count(*) from (
SELECT abreviatura,
       cep,
       logradouro,
       numero,
       endereco.complemento,
       bairro,
       concat(ifnull(tab4.ddd,'000'), ifnull(tab4.telefone,'00000000')) as Fone,
       tab5.mail, concat(ifnull(tab6.ddd,'000'), ifnull(tab6.telefone,'00000000')) as Fax

      from loja tab
      left join endereco on(tab.idloja = endereco.idcliente)
      left join estado tab3 on(endereco.estado = tab3.uf)
      left join(select tab.idCliente, tab.ddd, tab.telefone from fone tab
                                      inner join loja on(tab.idCliente = loja.idLoja)
                                      where tab.idFoneType=1 and tab.idCliente=find_loja) tab4 on(tab.idLoja = tab4.idCliente)
      left join (select email.idCliente,
       email.mail
        from email
             inner join loja on(email.idCliente = loja.idLoja)
                                 where loja.idLoja=find_loja and email.padrao=1) tab5 on(tab.idLoja = tab5.idCliente)
      left join(select tab.idCliente, tab.ddd, tab.telefone from fone tab
                                      inner join loja on(tab.idCliente = loja.idLoja)
                                      where tab.idFoneType=2 and tab.idCliente=find_loja) tab6 on(tab.idLoja = tab6.idCliente)
  where
       tab.idloja=find_loja
) as sub into @h;
select count(*) from (
select '004' as Versao,
       '0' as Finalidade,
       loja.razao,
       loja.CNPJ,
       "" as CPF,
       loja.UF,
       loja.IE,
       loja.codigoMunicipio,
       loja.IEmunicipal,
       "" as SUPRAMA,
       'A' AS PERFIL,
       1 tipo_atividade

                from loja
                     where idLoja = find_loja
) as sub into @i;
  select @a+@c+@b+@d+@e+@f+@g+@h as bloco_0;

      when 'C001' then

        select if(finalidade='A',0,1);

      when 'C100' then
select distinct tab.nf,
       tab.typeNf,
       "0" as Emite_Propria,
       tab.idCliente,
       tab.modNotaFiscal,
       tab.idSituacaoFiscal,
       tab.serie,
       tab.nr_nota,
       ifnull(tab.chave_nfe,""),
       date_format(tab.emissao,'%d%m%Y'),
       date_format(tab.saida,'%d%m%Y'),
       round(tab.valorTotalNota,2),
       case tab1.typeVenda when 'AV' then 0 when 'AP' then 1 else 2 end,
       round(tab.descontoValor,2),
       0 as "ABA_ZFM",
       round((valorTotalProdutos + valorTotaServico),2),
       tab.typeFrete,
       round(tab.frete,2),
       round(tab.seguro,2),
       round(tab.contribuicaoSocial,2),
       round(tab.baseIcms,2),
       round(tab.valorIcms,2),
       round(tab.baseCalculoIcmsSubstituicao,2),
       round(tab.valorIcmsSubstituicao,2),
       round(tab.valorIPI,2),
       round(tab.valorPis,2),
       round(tab.valorCofins,2),
       0 as PIS_ST,
       0  as COFINS_ST
           from nf tab
              left join finalizadora tab1 on(tab.condPgto = tab1.idFinalizadora)
                 where tab.emissao between di and df and tab.Loja=find_loja and tab.modNotaFiscal in('01','04','55','65','1B') AND tab.serie not in ('X','x')  and tab.statusNf=1
       union
select
distinct tab.idEntrada,
      0 as entr,
      1 as terceiro,
      tab.idCliente,
      tab.modNotaFiscal,
      tab.idSituacaoFiscal,
      tab.serie,
      tab.nr_Nota,
      ifnull(tab.chave_nfe,""),
      date_format(tab.emissao,'%d%m%Y'),
      date_format(tab.entrada,'%d%m%Y'),
      round(tab.valorTotalNota,2),
      case tab2.typeVenda when 'AV' then 0 when 'AP' then 1 else 2 end,
      round(tab.valorDesconto,2),
      0 as 'ABT_ZFM',
      round(tab.valorTotalProduto,2),
      case typeFrete when 'c' then 1 when 'f' then 2 else 9 end,
      round(tab.valorFrete,2),
      round(tab.vendo,2),
      round(tab.valorDespesasAcessorias,2),
      round(tab.baseCalculoIcms,2),
      round(tab.creditoIcms,2),
      round(tab.baseCalculoSubstituicao,2),
      round(tab.valorIcmsSubstuicao,2),
      round(tab.valorTotalIpi,2),
      round(tab.valorPis,2),
      round(tab.valorCofins,2),
      0 as Pis_ST,
      0 as Cofins_ST
       from entrada tab
           inner join entradaFinanceiro tab1 on(tab.idEntrada = tab1.idEntrada)
           left join finalizadora tab2 on(tab1.idFinalizadora = tab2.idFinalizadora)
                 where tab.entrada between di and df and tab.idLoja=find_loja and tab.serie not in ('X','x') and tab.modNotaFiscal in('01','04','55','65','1B');
  when 'C170' then
select tab.sequencia,
       tab.idProduto,
       tab1.nome,
       tab.quantidade,
       tab2.unidade,
       round(tab.valorTotalProduto,2),
       round(tab.descontoValor,2),
       if(tab4.estoqueOrigem='s',0,1),
       tab.cstIcms,
       tab.cfop,
       concat(1,tab4.idParamentro),
       if(tab.cstIcms='060'  || tab.cstIcms='040' ,0, round(tab.baseCalculo,2)),
       round(tab.aliquota,2),
       round(tab.icms,2),
       round(tab.baseCalculoIcmsSubstituicao,2),
       round(tab.aliquotaIcmsSt,2),
       round(tab.valorIcmsSubstituicao,2),
       0 as IND_APUR,
       if(tab.cstIpi=''  || tab.cstIpi='0','02',mid(tab.cstIpi,1,2)),
       '' as Enquadra,
       round(tab.baseIpi,2),
       round(tab5.ipi,2),
       round(((tab.baseIpi*tab5.ipi)/100),2) as Vl_Ipi,
       if(tab.cstPis=''  || tab.cstPis='0','07',if(LENGTH(tab.cstPis)=2,tab.cstPis,mid(tab.cstPis,1,2))),
       round(tab.basePis,2),
       round(tab6.aliquotaPis,2),
       0 as QUANT_BC_PIS,
       0 as ALIQ_PIS,
       round(tab.valorPis,2),
       if(trim(tab.cstCofins)='' || tab.cstCofins='0','07',if(LENGTH(tab.cstCofins)=2,tab.cstCofins,mid(tab.cstCofins,2,2))),
       round(tab.baseCofins,2),
       round(tab6.aliquotaCofins,2),
       0 as QUANT_BC_COFINS,
       0 as ALIQ_COFINS,
       round(tab.valorCofins,2),
       "" as Conta_Contabil,
              tab3.nr_nota
      from nfItem tab
           inner join produto tab1 on(tab.idProduto = tab1.idProduto)
           inner join unidadeMedida tab2 on(tab.idUnidadeMedida = tab2.idUnidadeMedida)
           inner join nf tab3 on(tab.idNf = tab3.nf)
           inner join paramentro_faturamento tab4 on(tab3.idParamentro = tab4.idParamentro)
           inner join produtoImpostos tab5 on(tab.idProduto = tab5.idProduto)
           inner join loja tab6 on(tab3.loja = tab6.idLoja)
                         where tab6.idLoja = tab5.idLoja and tab3.emissao>=di and tab3.emissao<=df and tab3.serie not in('X','x')
                                and  tab3.statusNf=1 and tab5.idLoja=find_loja and tab6.idLoja=find_loja and tab3.modNotaFiscal in('01','04','55','65','1B') union
select tab.sequencia,
       tab.idProduto,
       tab1.Nome,
       tab.quantidade,
       tab2.unidade,
       round(tab.CustoTotal,2),
       round(tab.discountValue,2),
       tab4.flagUpdateEstoque,
       tab.cstIcms,
       tab.cfop,
       concat(2,tab4.idOPeracao),
       if(tab.cstIcms='040' || tab.cstIcms='060'  ,0, round((tab.baseIcms-(tab.baseIcms*tab.reducaoEntrada)/100),2)),
       round(tab.icmsEntrada,2),
       round(tab.creditoIcms,2),
       round(tab.baseCalculoSubstituicao,2),
       round(tab.substituicao,2),
       round(tab.valorIcmsSubstituicao,2),
       0 as IND_APUR,
       if(cstIpi.codigo=''  || cstIpi.codigo='0','02',mid(cstIpi.codigo,2,2)),
       '' as Enq_IPI,
       round(tab.CustoTotal,2) as Base_Ipi,
       round(tab5.ipi,2),
       round(tab.valorIpi,2),
       if(cstPis.codigo='' || cstPis.codigo='0','07',if(LENGTH(cstPis.codigo)=2,cstPis.codigo,mid(cstPis.codigo,2,2))),
       round(tab.basePis,2),
       round(tab6.aliquotaPis,2),
       0 as QUANT_BC_PIS,
       0 as ALIQ_PIS,
       round(tab.valorPis,2),
       if(trim(cstCofins.codigo || cstCofins.codigo='0')='','07',if(LENGTH(cstCofins.codigo)=2,cstCofins.codigo,mid(cstCofins.codigo,2,2))),
       round(tab.baseCofins,2),
       round(tab6.aliquotaCofins,2),
       0 as QUANT_BC_Cofins,
       0 as ALIQ_Cofins,
       round(tab.valorCofins,2),
       "" as Cod_Contabil,
       tab3.nr_nota

       from entradaItem tab
            inner join produto tab1 on(tab.idProduto = tab1.idProduto)
            inner join unidadeMedida tab2 on(tab.idUnidadeMedida = tab2.idUnidadeMedida)
            inner join entrada tab3 on(tab.identrada = tab3.idEntrada)
            inner join operacaoEntrada tab4 on(tab3.idOperacao = tab4.idOperacao)
            inner join produtoImpostos tab5 on(tab.idProduto = tab5.idProduto)
            inner join loja tab6 on(tab3.idloja = tab6.idLoja)
             left join cstPis on(tab.cstPis = cstPis.idCstPis)
             left join cstCofins on(tab.cstCofins = cstCofins.idCstCofins)
             left join cstIpi on(tab.cstIpi = cstIpi.idCstIpi)
                         where tab6.idLoja = tab5.idLoja and tab3.entrada >= di and tab3.entrada <= df and tab3.serie not in('X','x')
                                and tab5.idLoja=find_loja and tab6.idLoja=find_loja and tab3.modNotaFiscal in('01','04','55','65','1B');
  when 'C190' then
select
       tab.cstIcms,
       tab.cfop,
       round(tab.aliquota,2),
       round((tab.baseIcmsIsentos+tab.baseCalculo),2),
       IF(tab.cstIcms='060' || tab.cstIcms='040' || tab.typeAliquota='s',0, round(tab.baseCalculo,2)),
       round(tab.icms,2),
       IF(tab.cstIcms='060' || tab.cstIcms='040' || tab.typeAliquota='s',0, round(tab.baseCalculoIcmsSt,2)),
       round(tab.icmsSt,2),
       round(tab.reducao,2),
       round(tab.valorIPI,2),
       tab1.msg01,
       tab1.nr_nota
            from nfImposto tab
                    inner join nf tab1 on(tab.idNf = tab1.nf)
                    where  tab1.statusNf=1 and tab1.emissao >= di and tab1.emissao <= df  and tab1.loja=find_loja and tab1.serie not in('X','x')
             union
select
       tab.cst,
       tab.cfop,
       round(tab.aliquota,2),
       round(SUM((tab.baseIsentoInformado+tab.valorInformado)),2),
       IF(tab.tipo='f' || tab.cst='060' || tab.cst='040',0, round(sum(tab.valorInformado),2)),
       round(sum(tab.impostoInformado),2),
       IF(tab.tipo='f' || tab.cst='060' || tab.cst='040',0, round(sum(tab1.totalBaseCalculoSubstituicao),2)),
       round(sum(tab1.totalIcmsSt),2),
       round(sum(tab.baseIsentoInformado),2),
       round(sum(tab.valorIpiApurado),2),
       tab1.informacaoComplementares,
       tab1.nr_nota
       from entradaImp tab
            inner join entrada tab1 on(tab.idEntrada = tab1.idEntrada)
                     where tab1.entrada >= di and tab1.entrada <= df and tab1.idLoja=find_loja and tab1.serie not in('X','x')
                      group by 1,2,3,12 order by 12 ;
  when 'C320' then 
SELECT tab.modNotaFiscal,
       tab.serie,
       "" as SubSerie,
       min(tab.nr_nota) as Nr_Inicial,
       max(tab.nr_nota) as Nr_Final,
       date_format(min(tab.emissao),'%d%m%Y') as DT_incial,
       date_format(max(tab.emissao),'%d%m%Y') as DT_final,
       date_format(tab.emissao,'%d%m%Y') as Emissao,
       round(sum(tab.valorTotalNota),2),
       round(sum(tab.valorPis),2),
       round(sum(tab.valorCofins),2),""


        from nf tab
              where tab.serie not in('X','x',"","0") and tab.modNotaFiscal in('02') and
                    tab.emissao >= di and tab.emissao <= df and
                    tab.loja=find_loja and
                    tab.statusNf=1 group by 1,2,3,8;
  when 'C321' then
select
       tab.cstIcms,
       tab.cfop,
       round(sum(tab.valorTotalProduto),2),
       round(sum(if(tab.cstIcms='060'  || tab.cstIcms='040' ,0, round(tab.baseCalculo,2))),2),
       round(sum(tab.icms),2),
       round(sum(tab.reducao),2)
      from nfItem tab
           inner join produto tab1 on(tab.idProduto = tab1.idProduto)
           inner join unidadeMedida tab2 on(tab.idUnidadeMedida = tab2.idUnidadeMedida)
           inner join nf tab3 on(tab.idNf = tab3.nf)
           inner join paramentro_faturamento tab4 on(tab3.idParamentro = tab4.idParamentro)
           inner join produtoImpostos tab5 on(tab.idProduto = tab5.idProduto)
           inner join loja tab6 on(tab3.loja = tab6.idLoja)
                         where tab6.idLoja = tab5.idLoja and tab3.emissao>=di and tab3.emissao<=df and tab3.serie not in('X','x')
                                and  tab3.statusNf=1 and tab5.idLoja=find_loja and tab6.idLoja=find_loja and tab3.modNotaFiscal in('02')
                                 group by 1,2;
  when 'C400' then
  select distinct tab.modeloFiscal,
       tab2.modelo,
       tab.numeroSerie,
       tab.caixa
        from
            licenca_ecf tab
            inner join cupom_cabecalho tab1 on(tab.caixa = tab1.terminal)
            inner join modelo_ecf tab2 on(tab.modelo = tab2.idMarca)
                  where tab1.dataVenda >= di and tab1.dataVenda <= df and tab1.loja=find_loja;
  when 'C405' then
select sum(round(tab.valorAcumulado,2)) - (select coalesce(sum(round(tab.valorAcumulado,2)),0)
        FROM conectorpdv.detalhe_reducao tab
           inner join movimentoDia tab1 on(tab.idLoja = tab1.idLoja and tab.numeroCaixa = tab1.numero_serie and tab.crz = tab1.crz)
           where tab1.movimento >= di and tab1.movimento <= df and tab1.idLoja=find_loja and round(tab.valorAcumulado,2) > 0 and tab.totalizador in('CT'))
        FROM conectorpdv.detalhe_reducao tab
           inner join movimentoDia tab1 on(tab.idLoja = tab1.idLoja and tab.numeroCaixa = tab1.numero_serie and tab.crz = tab1.crz)
           where tab1.movimento >= di and tab1.movimento <= df and tab1.idLoja=find_loja and round(tab.valorAcumulado,2) > 0 into @vb;
    if(@vb is null)then set @vb=0; end if;
SELECT date_format(tab.movimento,'%d%m%Y'),
       mid(tab.cro,2,3),
       tab.crz,
       tab.coo,
       if(@vb is null,round(tab.venda_bruta,2),round(@vb,2)),
       round(tab1.total,2),
       tab.numero_serie
      FROM movimentodia tab
           inner join (SELECT max(grandeTotalEnd) as total,
                              dataMovimento,
                              loja,
                              terminal FROM conectorpdv.fechamentocaixa where dataMovimento>=di and dataMovimento<=df  group by 2,3,4)
           as tab1 on(tab.idLoja = tab1.loja and tab.numeroCaixa = tab1.terminal and tab.movimento = tab1.dataMovimento)
              where tab.movimento >=di and tab.movimento <=df and tab.idLoja = find_loja;
  when 'C420' THEN
  SELECT
       tab.totalizador,
       round(tab.valorAcumulado,2),
       case tab.totalizador when '01T1800' then '01'
                        when '02T1200' then '02'
                        when '03T0700' then '03' else "" end,
       case tab.totalizador when '01T1800' then concat('Totalizador', " ",tab.totalizador)
                        when '02T1200' then concat('Totalizador', " ",tab.totalizador)
                        when '03T0700' then concat('Totalizador', " ",tab.totalizador) else "" end,
       tab1.numero_serie,
       date_format(tab1.movimento,'%d%m%Y')
      FROM conectorpdv.detalhe_reducao tab
           inner join movimentoDia tab1 on(tab.idLoja = tab1.idLoja and tab.numeroCaixa = tab1.numero_serie and tab.crz = tab1.crz)
           where tab1.movimento >= di and tab1.movimento <= df and tab1.idLoja=find_loja and round(tab.valorAcumulado,2) > 0 and tab.totalizador not in('CT') order by 6;
   when 'C425' then
SELECT tab.produto,
       round(sum(tab.quantidade),3),
       tab.unidade,
       round(sum(tab.total),2),
       0 as Pis,
       0 as Cofins,tab.aliquota,
       case tab.tipoTributacao when 's' then 'F1'
                               when 't' then
                                            case tab.aliquota when 18 then '01T1800'
                                                              when 12 then '02T1200'
                                                              when 7 then '03T0700' end
                               when 'i' then 'I1' else 'F1' end,
        date_format(tab.dataVenda,'%d%m%Y')
          FROM cupom_detalhes tab
                   where tab.loja=find_loja and dataVenda >= di and dataVenda <=df  and  tab.situacao=0  group by 1,3,5,6,7 order by 8;

    when 'C460' then

  select tab.modeloFiscal,
       tab.situacao,
       tab1.numeroCupom,
       date_format(tab1.dataVenda, '%d%m%Y'),
       round(tab1.totalBruto,2),
       0 as Pis,
       0 as Cofins,
       documentoCPF_CNPJ,
       ifnull(case tab3.idtipoPessoa when 1 then tab4.nome
                          when 2 then tab5.razao
                          when 3 then tab6.nome end, '') Nome_Razao
        from
            licenca_ecf tab
              inner join cupom_cabecalho tab1 on(tab.caixa = tab1.terminal)
              inner join modelo_ecf tab2 on(tab.modelo = tab2.idMarca)
              left join cliente tab3 on(tab1.cliente = tab3.idCliente)
            	left join fisica tab4 on(tab1.cliente = tab4.idcliente)
            	left join juridica tab5 on(tab1.cliente = tab5.idcliente)
            	left join (select rural.idcliente,rural.cpf as cpf_1,rural.nome,rural.nascimento,rural.ie,rural.idsexo,rural.identidade,rural.idcivil,sexo.descricao as sexo1,civil.descricao as civil1 from rural
                inner join sexo on(rural.idsexo = sexo.idsexo)
                inner join civil on(rural.idcivil = civil.idcivil)) as tab6
        		on(tab1.cliente = tab6.idcliente)
                           where
                                tab1.dataVenda >= di and tab1.dataVenda <= df and tab1.Loja=find_loja AND tab1.situacao=1;
    when 'C470' then
    select tab1.produto,
         round(tab1.quantidade,3),
         if(tab1.situacao=1, tab1.quantidade,0),
         tab1.unidade,
         round(tab1.total,2),
         tab1.cstICms,
         tab1.cfop,
         round(tab1.aliquota,2),
         0 AS Pis,
         0 as Cofins,
         tab1.numeroCupom,
         date_format(tab1.dataVenda, '%d%m%Y')

        from
            licenca_ecf tab
              inner join cupom_detalhes tab1 on(tab.caixa = tab1.terminal)
              inner join modelo_ecf tab2 on(tab.modelo = tab2.idMarca)
              inner join aliquota tab3 on(tab3.idaliquota = tab1.tributacao)
                      where
                             tab1.dataVenda >=di and tab1.dataVenda <=df and tab1.Loja=find_loja  AND tab1.situacao=0;
    when 'c490' THEN
  select
        tab1.cstIcms,
        tab1.cfop,
        round(tab1.aliquota,2),
        round(sum(tab1.total),2) as total,
        round(sum(tab1.total),2) as fill,
        round(sum(tab1.icms),2),
        "" cod_obs,
        date_format(dataVenda, '%d%m%Y'),
        tab.numeroSerie

        from
            licenca_ecf tab
              inner join cupom_detalhes tab1 on(tab.caixa = tab1.terminal)
              inner join modelo_ecf tab2 on(tab.modelo = tab2.idMarca)
              inner join aliquota tab3 on(tab3.idaliquota = tab1.tributacao)
                      where
                             TAB1.situacao=0 and
                             tab1.dataVenda >=di and tab1.dataVenda <=df and tab1.Loja=find_loja
                                       group by 1,2,3,7,8 order by 7,8;
  when 'C495' then
  select
        round(tab1.aliquota,2),
        tab1.produto,
        round(tab1.quantidade,3),
        if(tab1.situacao=0, tab1.quantidade,0.00),
        tab1.unidade,
        round(tab1.priceVenda,2),
        round(tab1.valordesconto,2),
        if(tab1.situacao=1, round(sum(tab1.total),2),0.00) as Vl_Canc,
        round(tab1.valorAcrescimo,2),
        round(sum(tab1.total),2) as Base_Calc,
        round(sum(tab1.icms),2),
        if(tab3.tipo='i', round(sum(tab1.total),2),0) val_isen,
        0 as Var_Not,
        0 as base_st,
        round(sum(tab1.total),2) as full_,
        "" cod_obs

        from
            licenca_ecf tab
              inner join cupom_detalhes tab1 on(tab.caixa = tab1.terminal)
              inner join modelo_ecf tab2 on(tab.modelo = tab2.idMarca)
              inner join aliquota tab3 on(tab3.idaliquota = tab1.tributacao)
                      where
                             tab1.dataVenda >=di and tab1.dataVenda <=df and tab1.Loja=find_loja
                                       group by 1,2,3;

  when 'C990' then

select count(*) from (select distinct tab.nf,
       tab.typeNf,
       "0" as Emite_Propria,
       tab.loja,
       tab.modNotaFiscal,
       tab.idSituacaoFiscal,
       tab.serie,
       tab.nr_nota,
       ifnull(tab.chave_nfe,""),
       date_format(tab.emissao,'%d%m%Y'),
       date_format(tab.saida,'%d%m%Y'),
       tab.valorTotalNota,
       case tab1.typeVenda when 'AV' then 0 when 'AP' then 1 else 2 end,
       tab.descontoValor,
       0 as "ABA_ZFM",
       (valorTotalProdutos + valorTotaServico),
       tab.typeFrete,
       tab.frete,
       tab.seguro,
       tab.contribuicaoSocial,
       tab.baseIcms,
       tab.valorIcms,
       tab.baseCalculoIcmsSubstituicao,
       tab.valorIcmsSubstituicao,
       tab.valorIPI,
       tab.valorPis,
       tab.valorCofins,
       0 as PIS_ST,
       0  as COFINS_ST
           from nf tab
              left join finalizadora tab1 on(tab.condPgto = tab1.idFinalizadora)
                 where tab.emissao between di and df and tab.Loja=find_loja
       union
select
distinct tab.idEntrada,
      0 as entr,
      1 as terceiro,
      tab.idCliente,
      tab.modNotaFiscal,
      tab.idSituacaoFiscal,
      tab.serie,
      tab.nr_Nota,
      ifnull(tab.chave_nfe,""),
      date_format(tab.emissao,'%d%m%Y'),
      date_format(tab.entrada,'%d%m%Y'),
      tab.valorTotalNota,
      case tab2.typeVenda when 'AV' then 0 when 'AP' then 1 else 2 end,
      tab.valorDesconto,
      0 as 'ABT_ZFM',
      tab.valorTotalProduto,
      case typeFrete when 'c' then 1 when 'f' then 2 else 9 end,
      tab.valorFrete,
      tab.vendo,
      tab.valorDespesasAcessorias,
      tab.baseCalculoIcms,
      tab.creditoIcms,
      tab.baseCalculoSubstituicao,
      tab.valorIcmsSubstuicao,
      tab.valorTotalIpi,
      tab.valorPis,
      tab.valorCofins,
      0 as Pis_ST,
      0 as Cofins_ST
       from entrada tab
           inner join entradaFinanceiro tab1 on(tab.idEntrada = tab1.idEntrada)
           left join finalizadora tab2 on(tab1.idFinalizadora = tab2.idFinalizadora)
                 where tab.entrada between di and df and tab.idLoja=find_loja) as sub into @a1;

select count(*) from (select tab.sequencia,
       tab.idProduto,
       tab1.nome,
       tab.quantidade,
       tab2.unidade,
       tab.valorTotalProduto,
       tab.descontoValor,
       if(tab4.estoqueOrigem='s',0,1),
       tab.cstIcms,
       tab.cfop,
       tab4.idParamentro,
       tab.baseCalculo,
       tab.aliquota,
       tab.icms,
       tab.baseCalculoIcmsSubstituicao,
       tab.aliquotaIcmsSt,
       tab.valorIcmsSubstituicao,
       0 as IND_APUR,
       tab.cstIpi,
       "" as Enquadra,
       tab.baseIpi,
       tab5.ipi,
       (tab.baseIpi*tab5.ipi)/100 as Vl_Ipi,
       tab.cstPis,
       tab.basePis,
       tab6.aliquotaPis,
       0 as QUANT_BC_PIS,
       0 as ALIQ_PIS,
       tab.valorPis,
       tab.cstCofins,
       tab.baseCofins,
       tab6.aliquotaCofins,
       0 as QUANT_BC_COFINS,
       0 as ALIQ_COFINS,
       tab.valorCofins,
       "" as Conta_Contabil
      from nfItem tab
           inner join produto tab1 on(tab.idProduto = tab1.idProduto)
           inner join unidadeMedida tab2 on(tab.idUnidadeMedida = tab2.idUnidadeMedida)
           inner join nf tab3 on(tab.idNf = tab3.nf)
           inner join paramentro_faturamento tab4 on(tab3.idParamentro = tab4.idParamentro)
           inner join produtoImpostos tab5 on(tab.idProduto = tab5.idProduto)
           inner join loja tab6 on(tab3.loja = tab6.idLoja)
                         where tab6.idLoja = tab5.idLoja and tab3.emissao>=di and tab3.emissao<=df
                                and tab5.idLoja=find_loja and tab6.idLoja=find_loja union
select tab.sequencia,
       tab.idProduto,
       tab1.Nome,
       tab.quantidade,
       tab2.unidade,
       tab.CustoTotal,
       tab.discountValue,
       tab4.flagUpdateEstoque,
       tab.cstIcms,
       tab.cfop,
       tab4.idOPeracao,
       tab.baseIcms,
       tab.icmsEntrada,
       tab.creditoIcms,
       tab.baseCalculoSubstituicao,
       tab.substituicao,
       tab.valorIcmsSubstituicao,
       0 as IND_APUR,
       tab.cstIpi,
       0 as Enq_IPI,
       tab.CustoTotal as Base_Ipi,
       tab5.ipi,
       tab.valorIpi,
       tab.cstPis,
       tab.basePis,
       tab6.aliquotaPis,
       0 as QUANT_BC_PIS,
       0 as ALIQ_PIS,
       tab.valorPis,
       tab.cstPis,
       tab.baseCofins,
       tab6.aliquotaCofins,
       0 as QUANT_BC_Cofins,
       0 as ALIQ_Cofisn,
       tab.valorCofins,
       "" as Cod_Contabil

       from entradaItem tab
            inner join produto tab1 on(tab.idProduto = tab1.idProduto)
            inner join unidadeMedida tab2 on(tab.idUnidadeMedida = tab2.idUnidadeMedida)
            inner join entrada tab3 on(tab.identrada = tab3.idEntrada)
            inner join operacaoEntrada tab4 on(tab3.idOperacao = tab4.idOperacao)
            inner join produtoImpostos tab5 on(tab.idProduto = tab5.idProduto)
            inner join loja tab6 on(tab3.idloja = tab6.idLoja)
                         where tab6.idLoja = tab5.idLoja and tab3.entrada >= di and tab3.entrada <= df
                                and tab5.idLoja=find_loja and tab6.idLoja=find_loja) as sub  into @b1;

select count(*) from (select
       tab.cstIcms,
       tab.cfop,
       tab.aliquota,
       (tab.baseIcmsIsentos+tab.baseCalculo),
       tab.baseCalculo,
       tab.icms,
       tab.baseCalculoIcmsSt,
       tab.icmsSt,
       tab.reducao,
       tab.valorIPI,
       tab1.msg01
            from nfImposto tab
                    inner join nf tab1 on(tab.idNf = tab1.nf)
                    where tab1.emissao >= di and tab1.emissao <= df  and tab1.loja=find_loja
             union
select
       tab.cst,
       tab.cfop,
       tab.aliquota,
       (tab.baseIsentoApurado+tab.impostoApurado),
       tab.valorApurado,
       tab.impostoApurado,
       tab1.totalBaseCalculoSubstituicao,
       tab1.totalIcmsSt,
       tab.reducao,
       tab.valorIpiApurado,
       tab1.informacaoComplementares
       from entradaImp tab
            inner join entrada tab1 on(tab.idEntrada = tab1.idEntrada)
                     where tab1.entrada >= di and tab1.entrada <= df and tab1.idLoja=find_loja) as sub  into @c1;

select count(*) from (    select distinct tab.modeloFiscal,
       tab2.modelo,
       tab.numeroSerie,
       tab.caixa
        from
            licenca_ecf tab
            inner join cupom_cabecalho tab1 on(tab.caixa = tab1.terminal)
            inner join modelo_ecf tab2 on(tab.modelo = tab2.idMarca)
                  where tab1.dataVenda >= di and tab1.dataVenda <= df and tab1.loja=find_loja)  as sub into @d1;
select count(*) from (
SELECT date_format(tab.movimento,'%d%m%Y'),
       tab.cro,
       tab.crz,
       tab.coo,
       tab.venda_bruta,
       tab1.total
      FROM movimentodia tab
           inner join (SELECT max(grandeTotalEnd) as total,
                              dataMovimento,
                              loja,
                              terminal FROM conectorpdv.fechamentocaixa where dataMovimento>=di and dataMovimento<=df  group by 2,3,4)
           as tab1 on(tab.idLoja = tab1.loja and tab.numeroCaixa = tab1.terminal and tab.movimento = tab1.dataMovimento)
              where tab.movimento >=di and tab.movimento <=df and tab.idLoja = find_loja)  as sub into @e1;

select count(*) from (
  SELECT
       tab.totalizador,
       tab.valorAcumulado,
       case tab.totalizador when '01T1800' then '01'
                        when '02T1200' then '02'
                        when '03T0700' then '03' else "" end,
       concat('Totalizador', " ",tab.totalizador)
      FROM conectorpdv.detalhe_reducao tab
           inner join movimentoDia tab1 on(tab.idLoja = tab1.idLoja and tab.numeroCaixa = tab1.numero_serie and tab.crz = tab1.crz)
           where tab1.movimento >= di and tab1.movimento <= df and tab1.idLoja=find_loja) as sub into @f1;

select count(*) from (SELECT tab.produto,
       tab.quantidade,
       tab.unidade,
       tab.total,
       0 as Pis,
       0 as Cofins
          FROM cupom_detalhes tab
                   where tab.loja=find_loja and dataVenda >= di and dataVenda <=df) as sub  into @g1;

select count(*) from (
select tab.modeloFiscal,
       tab.situacao,
       tab1.numeroCupom,
       date_format(tab1.dataVenda, '%d%m%Y'),
       tab1.totalLiquido,
       0 as Pis,
       0 as Cofins,
       documentoCPF_CNPJ
        from
            licenca_ecf tab
              inner join cupom_cabecalho tab1 on(tab.caixa = tab1.terminal)
              inner join modelo_ecf tab2 on(tab.modelo = tab2.idMarca)
                           where
                                tab1.dataVenda >= di and tab1.dataVenda <= df and tab1.Loja=find_loja )  as sub into @h1;

select count(*) from (        select tab1.produto,
         tab1.quantidade,
         if(tab1.situacao=0, tab1.quantidade,0.00),
         tab1.unidade,
         tab1.total,
         tab1.cstICms,
         tab1.cfop,
         tab1.aliquota,
         0 AS Pis,
         0 as Cofins

        from
            licenca_ecf tab
              inner join cupom_detalhes tab1 on(tab.caixa = tab1.terminal)
              inner join modelo_ecf tab2 on(tab.modelo = tab2.idMarca)
              inner join aliquota tab3 on(tab3.idaliquota = tab1.tributacao)
                      where
                             tab1.dataVenda >=di and tab1.dataVenda <=df and tab1.Loja=find_loja)  as sub into @i1;

select count(*) from (   select
        tab1.cstIcms,
        tab1.cfop,
        tab1.aliquota,
        sum(tab1.total) as total,
        sum(tab1.total) as total1,
        sum(tab1.icms),
        "" cod_obs

        from
            licenca_ecf tab
              inner join cupom_detalhes tab1 on(tab.caixa = tab1.terminal)
              inner join modelo_ecf tab2 on(tab.modelo = tab2.idMarca)
              inner join aliquota tab3 on(tab3.idaliquota = tab1.tributacao)
                      where
                             tab1.dataVenda >=di and tab1.dataVenda <=df and tab1.Loja=find_loja
                                       group by 1,2,3)  as sub into @j1;

select count(*) from (
  select
        tab1.aliquota,
        tab1.produto,
        tab1.quantidade,
        if(tab1.situacao=0, tab1.quantidade,0.00),
        tab1.unidade,
        tab1.priceVenda,
        tab1.valordesconto,
        if(tab1.situacao=0, sum(tab1.total),0.00) as Vl_Canc,
        tab1.valorAcrescimo,
        sum(tab1.total) as Base_Calc,
        sum(tab1.icms),
        if(tab3.tipo='i', sum(tab1.total),0) val_isen,
        0 as Var_Not,
        0 as base_st,
        sum(tab1.total),
        "" cod_obs

        from
            licenca_ecf tab
              inner join cupom_detalhes tab1 on(tab.caixa = tab1.terminal)
              inner join modelo_ecf tab2 on(tab.modelo = tab2.idMarca)
              inner join aliquota tab3 on(tab3.idaliquota = tab1.tributacao)
                      where
                             tab1.dataVenda >=di and tab1.dataVenda <=df and tab1.Loja=find_loja
                                       group by 1,2,3)  as sub  into @l1;

select count(*) from ( SELECT tab.modNotaFiscal,
       tab.serie,
       "" as SubSerie,
       min(tab.nr_nota) as Nr_Inicial,
       max(tab.nr_nota) as Nr_Final,
       date_format(min(tab.emissao),'%d%m%Y') as DT_incial,
       date_format(max(tab.emissao),'%d%m%Y') as DT_final,
       date_format(tab.emissao,'%d%m%Y') as Emissao,
       round(sum(tab.valorTotalNota),2),
       round(sum(tab.valorPis),2),
       round(sum(tab.valorCofins),2)


        from nf tab
              where tab.serie not in('X','x',"","0") and tab.modNotaFiscal in('02') and
                    tab.emissao >= di and tab.emissao <= df and
                    tab.loja=find_loja and
                    tab.statusNf=1 group by 1,2,3,8 )  as sub into @m1;
select count(*) from ( select 
       tab.cstIcms,
       tab.cfop,
       round(sum(tab.valorTotalProduto),2),
       round(sum(if(tab.cstIcms='060'  || tab.cstIcms='040' ,0, round(tab.baseCalculo,2))),2),
       round(sum(tab.icms),2),
       round(sum(tab.reducao),2)
      from nfItem tab
           inner join produto tab1 on(tab.idProduto = tab1.idProduto)
           inner join unidadeMedida tab2 on(tab.idUnidadeMedida = tab2.idUnidadeMedida)
           inner join nf tab3 on(tab.idNf = tab3.nf)
           inner join paramentro_faturamento tab4 on(tab3.idParamentro = tab4.idParamentro)
           inner join produtoImpostos tab5 on(tab.idProduto = tab5.idProduto)
           inner join loja tab6 on(tab3.loja = tab6.idLoja)
                         where tab6.idLoja = tab5.idLoja and tab3.emissao>=di and tab3.emissao<=df and tab3.serie not in('X','x')
                                and  tab3.statusNf=1 and tab5.idLoja=find_loja and tab6.idLoja=find_loja and tab3.modNotaFiscal in('02')
                                 group by 1,2 )  as sub into @n1;


  select @a1+@b1+@c1+@d1+@e1+@f1+@g1+@h1+@i1+@j1+@l1+@m1+@n1 as BLOCO_C;


      when 'D001' then
    select if(finalidade='A',0,1);

      when 'D100' then
  select
      if(tab.typeFrete='f',0,1) as tipo_operacao,
      if(tab.idLoja=tab.idCliente,0,1) as emissao_propria,
         tab.idCliente,
         tab.modNotaFiscal,
         tab.idSituacaoFiscal,
         if(tab.serie='','U',tab.serie),
         "" as Sub,
         tab.nr_nota,
         ifnull(tab.chave_nfe,""),
         DATE_FORMAT(tab.emissao,'%d%m%Y'),
         DATE_FORMAT(tab.emissao,'%d%m%Y') as DT_A_P,
         '00'  as 'TP_CT-e',
          1 as 'CHV_CTE_REF',
         ROUND(tab.valorTotalNota,2) as VL_DOC,
         ROUND(tab.valorDesconto,2),
         case typeFrete when 'c' then 2
                        when 'f' then 0
                        when 's' then 9
                        when 'o' then 1
                          else 9 end as IND_FRT,
         ROUND(tab.valorTotalNota,2) as VL_SERV,
         ROUND(tab.baseFrete,2) VL_DESC,
         ROUND(tab.icmsFrete,2),
         0 as VL_NT,
         "" as COD_INF,
         "" as COD_CTA
        from entrada tab
             where tab.typeFrete='f'
                       and tab.entrada >= di and tab.entrada <= df and tab.idLoja=find_loja;
    when 'D101' then
    select tab1.sequencia,
           tab1.idProduto,
           ROUND(tab1.custoNotaTotal,2),0
           from entrada tab
              inner join entradaItem tab1 on(tab.idEntrada = tab1.idEntrada)
                                where tab.typeNota='f' and tab.idLoja=find_loja and tab.entrada >=  di and tab.entrada <= df;
      when 'D190' then
      SELECT
        tab.cst,
        tab.cfop,
        ROUND(tab.aliquota,2),
        ROUND(tab1.valorTotalNota,2),
        ROUND(tab.valorInformado,2),
        ROUND(tab.impostoInformado,2),
        ROUND(tab.reducao,2),
        "" as obs
              FROM
                entradaimp tab
                     inner join entrada tab1 on(tab.idEntrada = tab1.idEntrada)
                           where tab1.entrada between di and df and tab1.idLoja = find_loja and tab1.conhecimentoFrete>0;
      when 'D990' then
select count(*) from (  select
      if(tab.typeFrete='f',0,1) as tipo_operacao,
      if(tab.idLoja=tab.idCliente,0,1) as emissao_propria,
         tab.idCliente,
         tab.modNotaFiscal,
         tab.idSituacaoFiscal,
         if(tab.serie='','U',tab.serie),
         "" as Sub,
         tab.nr_nota,
         ifnull(tab.chave_nfe,""),
         tab.emissao,
         tab.emissao as DT_A_P,
         '00'  as 'TP_CT-e',
          1 as 'CHV_CTE_REF',
         tab.valorTotalNota as VL_DOC,
         tab.valorDesconto,
         case typeFrete when 'c' then 2
                        when 'f' then 0
                        when 's' then 9
                        when 'o' then 1
                          else 9 end as IND_FRT,
         tab.valorTotalNota as VL_SERV,
         tab.baseFrete VL_DESC,
         tab.icmsFrete,
         0 as VL_NT,
         "" as COD_INF,
         "" as COD_CTA
        from entrada tab
             where tab.typeFrete='f'
                       and tab.entrada >= di and tab.entrada <= df and tab.idLoja=find_loja) as sub  into @a2;
select count(*) from (      SELECT
        tab.cst,
        tab.cfop,
        tab.aliquota,
        tab1.valorTotalNota,
        tab.valorInformado,
        tab.impostoInformado,
        tab.reducao,
        "" as obs
              FROM
                entradaimp tab
                     inner join entrada tab1 on(tab.idEntrada = tab1.idEntrada)
                           where tab1.entrada between di and df and tab1.idLoja = find_loja) as sub  into @b2;
    select @a2+@b2 as BLOCO_D;
      when 'H001' then
    select if(finalidade='A',0,1);
  when 'H005' then
  SELECT date_format(tab.data, '%d%m%Y'),
         tab.valor,
         tab1.idInventarioMotivo
          FROM inventario tab
               inner join inventarioMotivo tab1 on(tab.idInventarioMotivo = tab1.idInventarioMotivo)
                             where status=1 and data=dateInv;
  when 'H010' then
  SELECT tab.idProduto,
         tab1.idunidade,
         tab.quantidadeAtual,
         tab.valor,
         tab.valor,
         0 as IND_PROP,
         tab2.idLoja,
         tab1.nome,
         '' as COD_CTA
            FROM inventarioitem tab
                     inner join produto tab1 on(tab.idProduto = tab1.idProduto)
                     inner join inventario tab2 on(tab.idInventario = tab2.idInventario)
                                         WHERE  tab2.status=1 and tab2.data=dateInv;
  when 'H990' then
    select count(*) from (
                        SELECT date_format(tab.data, '%d%m%Y'),
                               tab.valor,
                               tab1.idInventarioMotivo
                                    FROM inventario tab
                                       inner join inventarioMotivo tab1 on(tab.idInventarioMotivo = tab1.idInventarioMotivo)
                                                   where status=1 and data=dateInv ) as sub  into @a3;
  select count(*) from (
  SELECT tab.idProduto,
         tab1.idunidade,
         tab.quantidadeAtual,
         tab.valor,
         tab.valor,
         0 as IND_PROP,
         tab2.idLoja,
         tab1.nome,
         '' as COD_CTA
            FROM inventarioitem tab
                     inner join produto tab1 on(tab.idProduto = tab1.idProduto)
                     inner join inventario tab2 on(tab.idInventario = tab2.idInventario)
                                          WHERE tab2.status=1 and tab2.data=dateInv) as sub  into @b3;
                                          select @a3 + @b3;
      when 'E001' then
    select if(finalidade='A',0,1);
  when 'E110' then
if(call_debitos_cp = 1)then
select
      ROUND(sum(icms),2) from cupom_detalhes
                  where dataVenda between di and df and loja=find_loja  and situacao=0 into @saidaCupom;
                  ELSE  set @saidaCupom=0;
end if;


if(call_debitos_nf= 1)then
SELECT ROUND(sum(coalesce(tab.icms,0)),2)
              FROM nfimposto tab
                    inner join nf tab1 on(tab.idNf = tab1.Nf)
                                       where tab1.emissao between di and df and tab1.Loja=find_loja and tab1.serie not in ('X','x') and tab1.modNotaFiscal in('01','04','55','65','1B')
                                            into @saidaNotas;
                                            else set @saidaNotas=0;
end if;

if(call_creditos = 1)then
SELECT
        ROUND(sum(tab.impostoApurado),2)
                        FROM entradaimp tab
                             inner join entrada tab1 on(tab.idEntrada = tab1.idEntrada)
                              where tab1.entrada >= di and tab1.entrada <= df and tab1.serie not in('X','x')
                                 and tab1.idLoja=find_loja and tab1.modNotaFiscal in('01','04','55','65','1B') into @entradas;
                                  else set @entradas=0;
end if;




  select ROUND((coalesce(@saidaCupom,0) + coalesce(@saidaNotas,0)),2) as 'field_02',
         0 as 'field_03',
         0 as 'field_04',
         0 as 'field_05',
         ROUND(coalesce(@entradas,0),2) as 'field_06',
         0 as 'field_07',
         0 as 'field_08',
         0 as 'field_09',
         0 as 'field_10',
         if(ROUND(((coalesce(@saidaCupom,0) + coalesce(@saidaNotas,0))-(coalesce(@entradas,0))),2)<0,0,ROUND(((coalesce(@saidaCupom,0) + coalesce(@saidaNotas,0))-(coalesce(@entradas,0))),2)) as 'field_11',
         0 as 'field_12',
         if(ROUND(((coalesce(@saidaCupom,0) + coalesce(@saidaNotas,0))-(coalesce(@entradas,0))),2)<0,0,ROUND(((coalesce(@saidaCupom,0) + coalesce(@saidaNotas,0))-(coalesce(@entradas,0))),2)) as 'field_13',
         if(ROUND(((coalesce(@saidaCupom,0) + coalesce(@saidaNotas,0))-(coalesce(@entradas,0))),2)<0,ROUND(coalesce(@entradas,0),2),0) as 'field_14',
         0 as 'field_15';

    when 'E116' then

select '000' as field_1,
        round(valorPago,2)  as field_2,
        date_format(vencimento,'%d%m%Y') as field_3,
        '1206' as fiel4,
        '' as field_5,
        '' as field_6,
        '' as field_7,
        '' as field_8,
        date_format(vencimento,'%m%Y') as field9
             from pagar
                      where vencimento between di and df and loja=find_loja and idTipoContasPagar in(3,4);
    when 'E990' then

    select count(*) from ( select if(finalidade='A',0,1) ) as sub  into @e1;

if(call_debitos_cp = 1)then
select
      ROUND(sum(icms),2) from cupom_detalhes
                  where dataVenda between di and df and loja=find_loja into @saidaCupom;
      else set @saidaCupom=0;
end if;

if(call_creditos = 1)then
SELECT
        ROUND(sum(tab.impostoApurado),2)
                        FROM entradaimp tab
                             inner join entrada tab1 on(tab.idEntrada = tab1.idEntrada)
                                     where tab1.entrada between di and df and tab1.idLoja=find_loja
                                                                                     into @entradas;
      else set @entradas=0;
end if;

if(call_debitos_nf = 1)then
SELECT ROUND(sum(tab.icms),2)
              FROM nfimposto tab
                    inner join nf tab1 on(tab.idNf = tab1.Nf)
                                       where tab1.emissao between di and df and tab1.loja=find_loja into @saidaNotas;
      else set @saidaNotas=0;
end if;

    select count(*) from ( select ROUND((@saidaCupom + @saidaNotas),2) as 'field_02',
         0 as 'field_03',
         0 as 'field_04',
         0 as 'field_05',
         ROUND(@entradas,2) as 'field_06',
         0 as 'field_07',
         0 as 'field_08',
         0 as 'field_09',
         0 as 'field_10',
         ROUND(((@saidaCupom + @saidaNotas)-(@entradas)),2) as 'field_11',
         0 as 'field_12',
         ROUND(((@saidaCupom + @saidaNotas)-(@entradas)),2) as 'field_13',
         0 as 'field_14',
         0 as 'field_15'  ) as sub  into @e2;
   
    select count(*) from ( select '000' as field_2,
        round(valorPago,2)  as field_3,
        date_format(vencimento,'%d%m%Y') as field_3,
        '' as field_4,
        '' as field_5,
        '' as field_6,
        '' as field_7 from pagar
                      where vencimento between di and df and loja=find_loja  ) as sub  into @e3;
      select @e1+@e2+@e3;

  when '1001' then
  select count(*)
        from cartao
             where emissao between di and df and idLoja=find_loja into @card;
  if(@card > 0)then
    select 0;
  else
    select if(finalidade='A',0,1);
  end if;

  when '1010' then
  select count(*)
        from cartao
             where emissao between di and df and idLoja=find_loja into @card;
  if(@card is not null && @card > 0)then set @card='S'; else set @card='N'; end if;

  select
         'N' AS 'IND_EXP_02',
         'N' AS 'IND_CCRF_03',
         'N' AS 'IND_COMB_04',
         'N' AS 'IND_USINA_05',
         'N' AS 'IND_VA_06',
         'N' AS 'IND_EE_07',
          ifnull(@card,'N') AS 'IND_CART_08',
         'N' AS 'IND_FORM_09',
         'N' AS 'IND_AER_10';
    when '1600' then
   select tab.idAdministradora,
        if(tab.idtypeCartao=1, round(sum(tab1.valor),2),0),
        if(tab.idtypeCartao != 1, round(sum(tab1.valor),2),0)
        from administradora tab
             inner join cartao tab1 on(tab.idAdministradora = tab1.idAdministradora)
             inner join cliente tab2 on(tab.idAdministradora = tab2.idCliente)
             left join (select idAdministradora,
                               idSpedMunicipio
                                            from administradora tab
                                             inner join spedMunicipio tab1 on(tab.municipio = tab1.municipio)) tab3 on(tab.idAdministradora = tab3.idAdministradora)
             where tab1.emissao between di and df and tab1.idLoja=find_loja group by 1;

  when '9001' then
  select if(finalidade='A',0,1);



  end case;
    end if;
    END IF;
    end $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `conectorPDV_find_paramentro_crediario`
--

DROP PROCEDURE IF EXISTS `conectorPDV_find_paramentro_crediario`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='' */ $$
CREATE DEFINER=`master`@`localhost` PROCEDURE `conectorPDV_find_paramentro_crediario`(in find varchar(45))
begin
select trocoCartao,
       flagRecebimento,
       idAdministradora,
       flagGrandTotal,
       valueTrocoCard,
       `tipoAmbienteNfe`,
       `descricaoHomoloNfe`,
       operacaoVendaCupom,
       flagHomologacao,
       autorizacaoMd5
                  from system into @a,
                                @b,
                             @c,
                         @d,
                     @e,
                  @f,
               @g,
           @h,
       @i,
   @j;
SELECT
  tab1.Razao,
  tab.`prazoQuitacaoAfter`,
  tab.`prazoQuitacaoBefore`,
  round(tab.`indiceSingleday`,2),
  round(tab.`indiceAtrasoMora`,2),
  tab.`carenciaSingleDay`,
  tab.`carenciaAtrasoMora`,
  tab.`idadeSpc`,
  round(tab.`altValuePrestacao`,2),
  round(tab.`altValueEntrada`,2),
  tab.`logicaCredito`,
  round(tab.`limiteDiscountPrestacao`,2),
  tab.`liberacaocaoCredito`,
    ROUND(tab.`limiteRenda`,2),
    tab.`categoriaLimite`,
    tab.`variacaoLimite`,
    ifnull(@a,"n"),
    ifnull(@b,"n"),
    ifnull(@c,"0"),
    ifnull(@d,"n"),
    ifnull(@c,"0"),
    tab1.aliquotaPis,
    tab1.aliquotaCofins,
    ifnull(@f,""),
    ifnull(@g,""),
    ifnull(@h,""),
    ifnull(@i,""),
    ifnull(@j,"")
                FROM
                     PARAMENTRO_CREDIARIO tab
                     inner join loja tab1 on(tab.loja = tab1.idLoja)
                                WHERE
                                          tab.`loja`=find;
end $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `conectorPDV_PAFECF_DAV`
--

DROP PROCEDURE IF EXISTS `conectorPDV_PAFECF_DAV`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='' */ $$
CREATE DEFINER=`master`@`localhost` PROCEDURE `conectorPDV_PAFECF_DAV`(tipo varchar(2), di DATE, df DATE,store double)
begin
  case tipo
    when 'D1' then
      SELECT cnpj,ie,ieMunicipal,razao FROM LOJA where idLoja=store;
    when 'D2' then
SELECT tab.numeroCupom as 'COO',
       tab.pedido,
       tab1.emissao,
       case tab2.flagParamentro when 'v' then 'VENDA'
                                when 'd' then 'DEVOLUCAO'
                                when 'o' then 'ORCAMENTO'
                                when 'r' then 'TROCA'
                                when 'b' then 'BRINDE'
                                when 's' then 'S. FATURAMENTO' else 'DESCONHECIDO' end, tab1.valorLiquido,
      "000000"  AS COO_VIN, "000000" AS sequencia,
       case tab3.idTipoPessoa
                  when 1 then
                    tab4.nome
                  when 2 then
                    tab5.razao
                  when 3 then
                    tab6.nome end,
       case tab3.idTipoPessoa
                  when 1 then
                    tab4.cpf
                  when 2 then
                    tab5.cnpj
                  when 3 then
                    tab6.cpf end, rel.modeloCrypt

        FROM conectorpdv.cupom_cabecalho tab
              inner join pedido tab1 on(tab.pedido = tab1.idPedido)
              inner join pedidoitensrelacionamento rel on(tab.idPedido = rel.idPedido and tab.loja = rel.idLoja)
              inner join conectorpdv.paramentro_faturamento tab2 on(tab1.idParamentro = tab2.idParamentro)
              left join conectorPDV.cliente tab3 on(tab1.idCliente = tab3.idCliente)
              left join conectorPDV.fisica tab4 on(tab3.idCliente = tab4.idCliente)
              left join conectorPDV.juridica tab5 on(tab3.idCliente = tab5.idCliente)
              left join conectorPDV.rural tab6 on(tab3.idCliente = tab6.idCliente)
                        where tab.emissao between di and df;
    END CASE;
    end $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `conectorPDV_PAFECF_tributos`
--

DROP PROCEDURE IF EXISTS `conectorPDV_PAFECF_tributos`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='' */ $$
CREATE DEFINER=`root`@`localhost` PROCEDURE `conectorPDV_PAFECF_tributos`(coo double, store int(11), cx integer)
begin
SELECT round(((tab.total*tab2.ibptax_nacionalFederal)/100),2), round(((tab.total*tab2.aliquotaInterna)/100),2)
                                      from
                                          CUPOM_DETALHES tab
                                               inner join produtoImpostos tab1 on(tab.Produto = tab1.idProduto and tab.Loja = tab1.idLoja)
                                               inner join spedNcm tab2 on(tab1.spedNcm = tab2.idSpedNcm)
                                                        where numeroCupom=coo and loja=store and terminal=cx;
end $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `conectorPDV_sintegra`
--

DROP PROCEDURE IF EXISTS `conectorPDV_sintegra`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='' */ $$
CREATE DEFINER=`master`@`localhost` PROCEDURE `conectorPDV_sintegra`(tipo varchar(7), di date, df date, store double, geraProdNf smallint, geraProdCp smallint)
begin
  DECLARE R10 int default 0;
  DECLARE R11 int default 0;
  DECLARE R50 int default 0;
  DECLARE R54 int default 0;
  DECLARE R50_U int default 0;
  DECLARE R54_U int default 0;
  DECLARE R53 int default 0;
  DECLARE R60M int default 0;
  DECLARE R60A int default 0;
  DECLARE R60D int default 0;
  DECLARE R60I int default 0;
  DECLARE R60R int default 0;
  DECLARE R75 int default 0;
  DECLARE R90 int default 0;
  DECLARE R70 int default 0;
  DECLARE R88 int default 0;
  DECLARE R61 int default 0;
  DECLARE R99 int default 0;
  DECLARE R60 int default 0;


case tipo
  when '10' then
    select
          tipo as "Registro_10",
          tab.cnpj,
          tab.ie,
          tab.razao,
          tab1.municipio,
          tab.uf,
          concat(ifnull(mid(fone.ddd,2,2),"000"),fone.telefone),
          date_format(di, '%Y%m%d') as Data_Inicial,
          date_format(df, '%Y%m%d') as Data_Final,
          3 as Id_Convenio,
          3 as Id_Natureza

        from loja tab
             inner join spedMunicipio tab1 on(tab1.idSpedMunicipio = tab.codigoMunicipio)
             left join fone on(fone.idCliente = tab.idLoja)
              where tab.idLoja=store and fone.priori='v';
  when '11' then
    select
       tipo as "Registro_11",
       tab1.logradouro,
       tab1.numero,
       tab1.complemento,
       tab1.bairro,
       tab1.cep,
       tab.responsavel,
       concat(fone.ddd,fone.telefone) as telefone
    from loja tab
          left join endereco tab1 on(tab1.idCliente = tab.idLoja)
          left join spedMunicipio tab2 on(tab2.idSpedMunicipio = tab.codigoMunicipio)
          left join fone on(fone.idCliente = tab.idLoja)
              where tab.idLoja=1 and fone.priori='v';
  when '50' then

SELECT
    tipo as "Registro_50",
    case tab1.idtipoPessoa when 1 then tab3.cpf
                           when 2 then tab2.cnpj
                           when 3 then tab4.cpf end CPF_CNPJ,
    case tab1.idtipoPessoa when 1 then tab3.identidade
                          when 2 then tab2.ie
                          when 3 then tab4.identidade end Ie_Identidade,
    date_format(tab.emissao,'%Y%m%d'),
    tab1.uf,
    tab.modNotaFiscal,
    tab.serie,
    tab.nr_nota,
    tab5.cfop,
    if(store = tab.loja, 'P', 'T'),
    if(typeAliquota='s' || typeAliquota='f',round((tab5.valor*100)), round(round(tab5.baseCalculo,2)*100) + round(round(tab5.reducao,2)*100)) as TotalNota,
    round(round(tab5.baseCalculo,2)*100) as BaseCalculo,
    round(round(tab5.icms,2)*100) as ValorIcms,
    round(round(tab5.baseIcmsIsentos,2)*100) as IsentoNotTributada,
    0 as Outras,
    round(round(tab5.aliquota,2)*100) as Aliquota,
    if(tab.statusNf = 1, 'N', 'C') as 'Situacao'
        FROM nf tab
           inner join cliente tab1 on(tab.idCliente = tab1.idCliente)
           left join juridica tab2 on(tab.idCliente = tab2.idCliente)
           left join fisica tab3 on(tab.idCliente = tab3.idCliente)
           left join rural tab4 on(tab.idCliente = tab4.idCliente)
           inner join nfImposto tab5 on(tab.nf = tab5.idNf)
    where
          tab.statusNf in (1,5) and
          tab.emissao >= di and tab.emissao <= df and
          tab.modNotaFiscal in("01","55", '65') order by 3,7,8;

    when '54' then

select
    tipo as "Registro_54",
    case tab1.idtipoPessoa when 1 then tab3.cpf
                           when 2 then tab2.cnpj
                           when 3 then tab4.cpf end CPF_CNPJ,
    tab.modNotaFiscal,
    tab.serie,
    tab.nr_nota,
    tab6.cfop,
    tab6.cstIcms,
    tab5.sequencia,
    tab5.idProduto,
    round(round(tab5.quantidade,3)*1000),
    round((tab5.priceVenda*quantidade)*100),
    round(tab5.descontoValor*100),
    round(tab5.baseCalculo*100),
    round(tab5.baseCalculoIcmsSubstituicao*100),
    round(tab5.ipiValor*100),
    round(tab5.aliquota*100),
    tab.emissao
       from
           nf tab
           inner join cliente tab1 on(tab.idCliente = tab1.idCliente)
           left join juridica tab2 on(tab.idCliente = tab2.idCliente)
           left join fisica tab3 on(tab.idCliente = tab3.idCliente)
           left join rural tab4 on(tab.idCliente = tab4.idCliente)
           inner join nfItem tab5 on(tab.nf = tab5.idNf)
           inner join nfImposto tab6 on(tab.nf = tab6.idNf)
                                      where tab.statusNf = 1 and tab6.cfop = tab5.cfop and
                                               tab.emissao >= di and tab.emissao <= df and tab.modNotaFiscal in("01","55", '65');
  when '53' then
select
    tipo as "Registro_53",
    case tab1.idtipoPessoa when 1 then tab3.cpf
                           when 2 then tab2.cnpj
                           when 3 then tab4.cpf end CPF_CNPJ,
    case tab1.idtipoPessoa when 1 then tab3.identidade
                          when 2 then tab2.ie
                          when 3 then tab4.identidade end Ie_Identidade,
    date_format(tab.emissao,'%Y%m%d'),
    tab1.uf,
    tab.modNotaFiscal,
    tab.serie,
    tab.nr_nota,
    tab5.cfop,
    if(store = tab.loja, 'P', 'T'),
    round(round(tab.baseCalculoIcmsSubstituicao,2)*100) as BaseCalculoSt,
    round(round(tab.valorIcmsSubstituicao,2)*100) as ValorIcmsSt,
    round(round((tab.seguro + tab.acrecismoValor + tab.frete),2)*100) as Despesas_assessorias,
    if(tab.statusNf = 1, 'N', 'C') as 'Situacao'
        FROM nf tab
           inner join cliente tab1 on(tab.idCliente = tab1.idCliente)
           left join juridica tab2 on(tab.idCliente = tab2.idCliente)
           left join fisica tab3 on(tab.idCliente = tab3.idCliente)
           left join rural tab4 on(tab.idCliente = tab4.idCliente)
           inner join nfImposto tab5 on(tab.nf = tab5.idNf)
           inner join cst tab6 on(tab5.cstIcms=tab6.idcst)
    where
          tab.emissao >= di and tab.emissao <= df and
          tab.statusNf in (1,5) and
          tab.geraDanfe='s' and
          tab6.typeCst='s' order by 3,7;

  when '75' then
  
select * from(
(  select
        distinct tab.idProduto,
        "Registro_75",
        date_format(di, '%Y%m%d') as ar1,
        date_format(df, '%Y%m%d') as ar2,
        tab.idProduto as prod,
        substring(tab.nome,1,53),
        substring(tab1.spedNcm,1,8),
        substring(tab2.unidade,1,6),
        round(round(tab1.ipi,2)*100),
        round(round(tab3.aliquota,2)*100),
        round(round(tab3.reducao,2)*100),
        0 as RedBaseCalc
                from
                    produto tab
                    left join nfItem tab5 on(tab.idProduto = tab5.idproduto and 1=geraProdNf)
                    inner join produtoImpostos tab1 on(tab.idProduto = tab1.idProduto)
                    inner join unidadeMedida tab2 on(tab.idUnidade = tab2.idunidadeMedida)
                    inner join aliquota tab3 on(tab1.tributacao=tab3.idAliquota)
                    left join nf tab6 on(tab5.idNf = tab6.nf)
                                                            where tab1.idLoja=store and tab6.modNotaFiscal in(55,'2D',65) and
                                                                  (((tab5.data >= di and tab5.data <= df))))  union
(  select
        distinct tab.idProduto,
        "Registro_75",
        date_format(di, '%Y%m%d') as as1,
        date_format(df, '%Y%m%d') as as2,
        tab.idProduto,
        substring(tab.nome,1,53),
        substring(tab1.spedNcm,1,8),
        substring(tab2.unidade,1,6),
        round(round(tab1.ipi,2)*100),
        round(round(tab3.aliquota,2)*100),
        round(round(tab3.reducao,2)*100),
        0 as RedBaseCalc
                from
                    produto tab
                    left join cupom_detalhes tab4 on(tab.idProduto = tab4.produto and 1=geraProdCp)
                    inner join produtoImpostos tab1 on(tab.idProduto = tab1.idProduto)
                    inner join unidadeMedida tab2 on(tab.idUnidade = tab2.idunidadeMedida)
                    inner join aliquota tab3 on(tab1.tributacao=tab3.idAliquota)
                                                            where tab1.idLoja=store and tab4.loja=store and
                                                                  ((tab4.dataVenda >= di and tab4.dataVenda <= df))) order by 1) as history;
  when '70' then
select
    tipo as "Registro_70",
    case tab1.idtipoPessoa when 1 then tab3.cpf
                           when 2 then tab2.cnpj
                           when 3 then tab4.cpf end CPF_CNPJ,
    case tab1.idtipoPessoa when 1 then tab3.identidade
                          when 2 then tab2.ie
                          when 3 then tab4.identidade end Ie_Identidade,
    date_format(tab.emissao,'%Y%m%d'),
    tab1.uf,
    tab.modNotaFiscal,
    tab.serie,
    '' as SubSerie,
    mid(tab.conhecimentoFrete,1,6),
    tab5.cfop,
    round(round(tab5.valorApurado,2)*100) + round(round(tab5.baseIsentoApurado,2)*100) as TotalNota,
    round(round(tab5.valorInformado,2)*100) as BaseCalculo,
    round(round(tab5.impostoInformado,2)*100) as ValorIcms,
    round(round(tab5.baseIsentoInformado,2)*100) as IsentoNotTributada,
    0 as Outras,
    if(typeFrete='c',1,if(typeFrete='f',2,0))as CIF_COF,
    if(tab.status = 5, 'C', 'N') as 'Situacao'

      from entrada tab
           inner join cliente tab1 on(tab.idCliente = tab1.idCliente)
           left join juridica tab2 on(tab.idCliente = tab2.idCliente)
           left join fisica tab3 on(tab.idCliente = tab3.idCliente)
           left join rural tab4 on(tab.idCliente = tab4.idCliente)
           inner join entradaImp tab5 on(tab.idEntrada = tab5.idEntrada)
            where tab.status = 1
            and tab.entrada >= di and tab.entrada <= df and
            tab.modNotaFiscal in("07");
    when '60M' then
    SELECT date_format(tab1.movimento,'%Y%m%d'),
       tab1.numeroCaixa,
       tab1.numero_serie,
       tab1.numeroCaixa,
       tab1.modelo_ecf,
       tab.contadorInicial,
       tab.contadorFinal,
       tab1.crz,
       mid(tab1.cro,2,3),
       round(tab1.venda_bruta*100), round(tab.grandeTotalEnd*100),date_format(tab1.movimento,'%d%m%Y')
                      FROM conectorPDV.fechamentocaixa tab
                                    inner join conectorPDV.movimentoDia tab1 on(tab.contadorReducao = trim(tab1.crz))
                                        where tab1.movimento between di and df and tab.loja = store and tab.contadorFinal is not null;
    when '60A' then
    
select date_format(tab.dataVenda,'%Y%m%d'),
			tab4.numeroSerie,
        case tab.tipoTributacao
		  when 's' then 'F'
          when 'i' then 'I'
          when 't' then lpad(round(tab3.converti*100),4,'0') end,
        round(sum(tab.quantidade*tab.priceVenda)*100)
        
			from conectorPDV.cupom_detalhes tab
					inner join produto tab1 on(tab.produto =tab1.idProduto)
                    inner join produtoImpostos tab2 on(tab.produto = tab2.idProduto and tab.loja = tab2.idloja)
					inner join tributacao tab3 on(tab.tributacao = tab3.idAliquota)
                    inner join licenca_ecf tab4 on(tab4.caixa = tab.terminal)
                    where dataVenda between di and df and tab.situacao in(0) and tab.loja=store group by 1,2,3 union
select date_format(tab.dataVenda,'%Y%m%d'),
			tab4.numeroSerie,
		  case tab.situacao
		  when 2 then 'CANC' end,
        round(sum(tab.quantidade*tab.priceVenda)*100)
        
			from conectorPDV.cupom_detalhes tab
					inner join produto tab1 on(tab.produto =tab1.idProduto)
                    inner join produtoImpostos tab2 on(tab.produto = tab2.idProduto and tab.loja = tab2.idloja)
					inner join tributacao tab3 on(tab.tributacao = tab3.idAliquota)
                    inner join licenca_ecf tab4 on(tab4.caixa = tab.terminal)
                    where dataVenda between di and df and tab.situacao in(1,2) and tab.loja=store group by 1,2,3
                    ORDER BY 1,4;
    when '60D' then
select
      date_format(tab.dataVenda,'%Y%m%d'),
      tab.produto,
      round(sum(tab.quantidade)*1000),
      round(sum(abs(tab.total))*100),
      if(tab.tipoTributacao = 's' || tab.tipoTributacao = 'i', 0, round(sum(abs(tab.total))*100)),
      if(tab.tipoTributacao = 's' || tab.tipoTributacao = 'i', if(tab.tipoTributacao = 's','F',UPPER(tab.tipoTributacao)), lpad(round(tab.aliquota*100),4,'0')),
      if(tab.tipoTributacao = 's' || tab.tipoTributacao = 'i', 0, abs(round(round(((tab.total*tab.aliquota)/100),2)*100))), tab2.numero_serie,
      tab.numeroCupom
           FROM conectorPDV.cupom_detalhes tab
                       inner join conectorPDV.cupom_cabecalho tab1 on(tab.numeroCupom = tab1.numeroCupom and tab.loja = tab1.loja and tab.terminal = tab1.terminal and tab.dataVenda = tab1.dataVenda)
                       inner join movimentoDia tab2 on(tab.dataVenda = tab2.movimento and tab.loja = tab2.idloja and tab.terminal = tab2.numeroCaixa)
                       where tab1.operador = tab2.operador and tab.dataVenda between di and df and tab.loja=store group by 1,2,9;
    when '60I' then
SELECT
      date_format(tab.dataVenda,'%Y%m%d'),
      TAB.NUMEROCUPOM,
      tab.sequencia,
      tab.produto,
      round(tab.quantidade*1000),
      round(abs(tab.total)*100),
      if(tab.tipoTributacao = 's' || tab.tipoTributacao = 'i', 0, round(sum(abs(tab.total))*100)) AS BASE,
      if(tab.tipoTributacao = 's' || tab.tipoTributacao = 'i', if(tab.tipoTributacao = 's','F',UPPER(tab.tipoTributacao)), lpad(round(tab.aliquota*100),4,'0')),
      if(tab.tipoTributacao = 's' || tab.tipoTributacao = 'i', 0, abs(round(round(((tab.total*tab.aliquota)/100),2)*100))), tab2.numero_serie
           FROM conectorPDV.cupom_detalhes tab
                       inner join conectorPDV.cupom_cabecalho tab1 on(tab.numeroCupom = tab1.numeroCupom and tab.loja = tab1.loja and tab.terminal = tab1.terminal and tab.dataVenda = tab1.dataVenda)
                       inner join movimentoDia tab2 on(tab.dataVenda = tab2.movimento and tab.loja and tab.loja and tab.terminal = tab2.numeroCaixa)
                       where tab1.operador = tab2.operador and tab.dataVenda between di and df and tab.loja=store group by 1,2,3,4;

select
    COUNT(*) as 'Registro_54'
       from
           nf tab
           inner join cliente tab1 on(tab.idCliente = tab1.idCliente)
           left join juridica tab2 on(tab.idCliente = tab2.idCliente)
           left join fisica tab3 on(tab.idCliente = tab3.idCliente)
           left join rural tab4 on(tab.idCliente = tab4.idCliente)
           inner join nfItem tab5 on(tab.nf = tab5.idNf)
           inner join nfImposto tab6 on(tab.nf = tab6.idNf)
                                      where tab.statusNf = 1 and
                                               tab.emissao >= di and tab.emissao <= df and tab.modNotaFiscal in("01","55") into R54;


    when '60R' then
    SELECT
      date_format(tab.dataVenda,'%m%Y'),
      tab.produto,
      round(sum(tab.quantidade)*1000),
      round(sum(tab.total)*100),
      round(sum(tab.total)*100) AS bASE,
      if(tab.tipoTributacao = 's' || tab.tipoTributacao = 'i', if(tab.tipoTributacao = 's','F',UPPER(tab.tipoTributacao)), lpad(round(tab.aliquota*100),4,'0'))
           FROM conectorpdv.cupom_detalhes tab
                 where tab.dataVenda between di and df and tab.loja=store group by 1,2;
    when '90' then
        select
         count(*) as "Registro_10"

        from loja tab
             inner join spedMunicipio tab1 on(tab1.idSpedMunicipio = tab.codigoMunicipio)
             left join fone on(fone.idCliente = tab.idLoja)
              where tab.idLoja=store and fone.priori='v' into R10;

    select
       count(*) as "Registro_11"
    from loja tab
          left join endereco tab1 on(tab1.idCliente = tab.idLoja)
          left join spedMunicipio tab2 on(tab2.idSpedMunicipio = tab.codigoMunicipio)
          left join fone on(fone.idCliente = tab.idLoja)
              where tab.idLoja=1 and fone.priori='v'  into R11;

SELECT
      COUNT(*) AS 'Registro_50_U'
        FROM nf tab
           inner join cliente tab1 on(tab.idCliente = tab1.idCliente)
           left join juridica tab2 on(tab.idCliente = tab2.idCliente)
           left join fisica tab3 on(tab.idCliente = tab3.idCliente)
           left join rural tab4 on(tab.idCliente = tab4.idCliente)
           inner join nfImposto tab5 on(tab.nf = tab5.idNf)
    where
          tab.statusNf in (1,5) and
          tab.emissao >= di and tab.emissao <= df and
          tab.modNotaFiscal in("01","55", '65') into R50_U;


select
      count(*) as "Registro_54"
       from
           nf tab
           inner join cliente tab1 on(tab.idCliente = tab1.idCliente)
           left join juridica tab2 on(tab.idCliente = tab2.idCliente)
           left join fisica tab3 on(tab.idCliente = tab3.idCliente)
           left join rural tab4 on(tab.idCliente = tab4.idCliente)
           inner join nfItem tab5 on(tab.nf = tab5.idNf)
           inner join nfImposto tab6 on(tab.nf = tab6.idNf)
                                      where tab.statusNf = 1 and
                                               tab.emissao >= di and tab.emissao <= df and tab.modNotaFiscal in("01","55",'65') into R54;






select count(*) from(
(  select
        distinct tab.idProduto,
        "Registro_75",
        date_format(di, '%Y%m%d') as ar1,
        date_format(df, '%Y%m%d') as ar2,
        tab.idProduto as prod,
        substring(tab.nome,1,53),
        substring(tab1.spedNcm,1,8),
        substring(tab2.unidade,1,6),
        round(round(tab1.ipi,2)*100),
        round(round(tab3.aliquota,2)*100),
        round(round(tab3.reducao,2)*100),
        0 as RedBaseCalc
                from
                    produto tab
                    left join nfItem tab5 on(tab.idProduto = tab5.idproduto and 1=geraProdNf)
                    inner join produtoImpostos tab1 on(tab.idProduto = tab1.idProduto)
                    inner join unidadeMedida tab2 on(tab.idUnidade = tab2.idunidadeMedida)
                    inner join aliquota tab3 on(tab1.tributacao=tab3.idAliquota)
                    left join nf tab6 on(tab5.idNf = tab6.nf)
                                                            where tab1.idLoja=store and tab6.modNotaFiscal in(55,'2D',65) and
                                                                  (((tab5.data >= di and tab5.data <= df))))  union
(  select
        distinct tab.idProduto,
        "Registro_75",
        date_format(di, '%Y%m%d') as as1,
        date_format(df, '%Y%m%d') as as2,
        tab.idProduto,
        substring(tab.nome,1,53),
        substring(tab1.spedNcm,1,8),
        substring(tab2.unidade,1,6),
        round(round(tab1.ipi,2)*100),
        round(round(tab3.aliquota,2)*100),
        round(round(tab3.reducao,2)*100),
        0 as RedBaseCalc
                from
                    produto tab
                    left join cupom_detalhes tab4 on(tab.idProduto = tab4.produto and 1=geraProdCp)
                    inner join produtoImpostos tab1 on(tab.idProduto = tab1.idProduto)
                    inner join unidadeMedida tab2 on(tab.idUnidade = tab2.idunidadeMedida)
                    inner join aliquota tab3 on(tab1.tributacao=tab3.idAliquota)
                                                            where tab1.idLoja=store and tab4.loja=store and
                                                                  ((tab4.dataVenda >= di and tab4.dataVenda <= df))) order by 1) as R75a into R75;

    SELECT count(*) as "60M"
                      FROM conectorpdv.fechamentocaixa tab
                                    inner join conectorpdv.movimentoDia tab1 on(tab.contadorReducao = trim(tab1.crz))
                                        where dataMovimento between di and df and tab.loja = store and tab.contadorFinal is not null  into R60M;
    select
          COUNT(*) AS "60A"
            from detalhe_reducao_aliquota tab
            WHERE
              tab.idloja=store and tab.movimento between di and df INTO R60A;


    SELECT
        COUNT(*) as "60D"
           FROM conectorpdv.cupom_detalhes tab
               where tab.dataVenda between di and df and tab.loja=store INTO R60D;
SELECT
      COUNT(*) as "60I"
           FROM conectorpdv.cupom_detalhes tab
               where tab.dataVenda between di and df and tab.loja=store INTO R60I;

   SELECT
         COUNT(*) AS "60R"
           FROM conectorpdv.cupom_detalhes tab
                 where tab.dataVenda between di and df and tab.loja=store INTO R60R;
    select
          tab.cnpj,
          tab.ie

        from loja tab
              where tab.idLoja=store INTO @A,@B;

  SET R90 = R90 + 1;
  IF(geraProdCp = 1)THEN
  set R60 = Coalesce(R60M,0)+Coalesce(R60A,0)+Coalesce(R60D,0)+Coalesce(R60I,0)+Coalesce(R60R,0);
      ELSE
         SET R60 = 0;
  END IF;

  set R99 =(coalesce(R50_U,0)+coalesce(R53,0)+coalesce(R54,0)+coalesce(R60,0)+coalesce(R70,0)+coalesce(R75,0)+coalesce(R88,0)+coalesce(r90,0));

  SELECT (coalesce(R50_U,0)),coalesce(R53,0),(coalesce(R54,0)),coalesce(R60,0),coalesce(R70,0),coalesce(R75,0),coalesce(R88,0),coalesce(R99,0), @A,@B;

end case;
end $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `conector_alt_administradora`
--

DROP PROCEDURE IF EXISTS `conector_alt_administradora`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='' */ $$
CREATE DEFINER=`master`@`localhost` PROCEDURE `conector_alt_administradora`(
   newIdAdministradora int,
  `newrazao` VARCHAR(40),
  `newdescricao` VARCHAR(20),
  `newtaxa` DECIMAL(5,3),
  `newprazo` INT(11),
  `newidtypeCartao` INT,
  `newcnpj` VARCHAR(14),
  `newie` VARCHAR(30),
  `newcep` VARCHAR(8),
  `newrua` VARCHAR(45),
  `newnumero` INT,
  `newbairro` VARCHAR(45),
  `newmunicipio` VARCHAR(45),
  `newidestado` INT,
  `newuf` CHAR(2),
  `newinativo` smallint(6) ,
  `newhistoricoCredito` SMALLINT,
  `newhistoricoDebito` SMALLINT,
  `newnetworkCard` INT,
  `newnetworkFix` CHAR(1),
  `newidconectCard` INT)
begin
    update administradora set  `razao`=`newrazao`,
  `descricao`=`newdescricao`,
  `taxa`=`newtaxa`,
  `prazo`=`newprazo`,
  `idtypeCartao`=`newidtypeCartao`,
  `cnpj`=`newcnpj`,
  `ie`=`newie`,
  `cep`=`newcep`,
  `rua`=`newrua`,
  `numero`=`newnumero`,
  `bairro`=`newbairro`,
  `municipio`=`newmunicipio`,
  `idestado`=`newidestado`,
  `uf`=`newuf`,
  `inativo`=`newinativo`,
  `historicoCredito`=`newhistoricoCredito`,
  `historicoDebito`=`newhistoricoDebito`,
  `networkCard`=`newnetworkCard`,
  `networkFix`=`newnetworkFix`,
  `idconectCard`=`newidconectCard`
				where
				idAdministradora=newIdAdministradora;
end $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `conector_alt_aliquota`
--

DROP PROCEDURE IF EXISTS `conector_alt_aliquota`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='STRICT_TRANS_TABLES,STRICT_ALL_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,TRADITIONAL,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION' */ $$
CREATE DEFINER=`master`@`localhost` PROCEDURE `conector_alt_aliquota`(
                                        in new_idaliquota char(2),
                                        in new_nome varchar(30),
                                        in new_aliquota decimal(10,4),
                                        in new_reducao decimal(10,4),
                                        in new_tipo char(1),
                                        in new_cst char(3),
                                        in new_mesagem varchar(45),
                                        in new_status boolean
                                      )
begin
      update aliquota
      set
idaliquota=new_idaliquota,
                    nome=new_nome,
                    aliquota=new_aliquota,
                    reducao=new_reducao,
                    tipo=new_tipo,
                    cst=new_cst,mesagem=new_mesagem, status=new_status
      where
                    idaliquota=new_idaliquota;
end $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `conector_alt_banco`
--

DROP PROCEDURE IF EXISTS `conector_alt_banco`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='' */ $$
CREATE DEFINER=`master`@`localhost` PROCEDURE `conector_alt_banco`(
  in `newidbanco` INT,
  in `newNome` VARCHAR(30),
  in `newdigito` CHAR(1))
begin
    update banco set nome=newNome,digito=newDigito where idBanco=newidbanco;
  end $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `conector_alt_boletos`
--

DROP PROCEDURE IF EXISTS `conector_alt_boletos`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='' */ $$
CREATE DEFINER=`master`@`localhost` PROCEDURE `conector_alt_boletos`(
                in newidboleto DOUBLE,
                in newcedente INT(11),
                in newsacador INT(11),
                in newcodBarra VARCHAR(44),
                in newbanco VARCHAR(3),
                in newmoeda VARCHAR(1),
                in newagencia VARCHAR(4),
                in newnossoNumero VARCHAR(11),
                in newconvenio VARCHAR(8),
                in newvencimentoValue VARCHAR(4),
                in newdv1 VARCHAR(1),
                in newdv2 VARCHAR(1),
                in newdv3 VARCHAR(1),
                in newdvFull VARCHAR(1),
                in newcarteira VARCHAR(2),
                in newvencimento DATE,
                in newmulta DECIMAL(15,3),
                in newmultaDiaria DECIMAL(15,3),
                in newdesconto DECIMAL(15,3),
                in newacrescimo DECIMAL(15,3),
                in newmessagem BLOB,
                in newespecial VARCHAR(2),
                in newnr_documento VARCHAR(10),
                in newparcela INT(11),
                in newHistorico varchar(100),
                in newConta INT(11)
)
begin
update boleto
	set
    `sacador`=`newsacador`,
     flagAlteracao=now(),
     conta=newConta,
    `codBarra`=`newcodBarra`,
    `banco`=`newbanco`,
    `moeda`=`newmoeda`,
    `agencia`=`newagencia`,
    `nossoNumero`=`newnossoNumero`,
    `convenio`=`newconvenio`,
    `vencimentoValue`=`newvencimentoValue`,
    `dv1`=`newdv1`,
    `dv2`=`newdv2`,
    `dv3`=`newdv3`,
    `dvFull`=`newdvFull`,
    `carteira`=`newcarteira`,
    `vencimento`=`newvencimento`,
    `multa`=`newmulta`,
     historico=newHistorico,
    `multaDiaria`=`newmultaDiaria`,
    `desconto`=`newdesconto`,
    `acrescimo`=`newacrescimo`,
    `messagem`=`newmessagem`,
    `especial`=`newespecial`,
    `nr_documento`=`newnr_documento`,
    `parcela`=`newparcela`
                where
                    `cedente`=`newcedente` and
                     idboleto=newidboleto;

end $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `conector_alt_caixa`
--

DROP PROCEDURE IF EXISTS `conector_alt_caixa`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='' */ $$
CREATE DEFINER=`master`@`localhost` PROCEDURE `conector_alt_caixa`(
   newId DOUBLE,
  `newdescricao` varchar(30),
  `newinativo` smallint(6),
  `newsaldoInicial` decimal(15,3),
  `newidloja` int(11),
  `newzeraCaixa` char(1),
  `newcaixaAberto` char(1),
  `newpermiteNegativo` char(1))
begin
  UPDATE  `conector`.`caixa`
	SET 
    `descricao`=`newdescricao`,
    `inativo`=`newinativo`,
    `saldoInicial`=`newsaldoInicial`,
    `idloja`=`newidloja`,
    `zeraCaixa`=`newzeraCaixa`,
    `caixaAberto`=`newcaixaAberto`,
    `permiteNegativo`=`permiteNegativo`
			WHERE 
				idCaixa = newID;

  end $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `conector_alt_cartao`
--

DROP PROCEDURE IF EXISTS `conector_alt_cartao`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='' */ $$
CREATE DEFINER=`master`@`localhost` PROCEDURE `conector_alt_cartao`(
  `newidcartao` DOUBLE,
  `newidAdministradora` INT,
  `newidloja` INT,
  `newalteracao` DATE,
  `newcupom` DOUBLE,
  `newpedido` DOUBLE,
  `newterminal` INT(11),
  `newvencimento` VARCHAR(45),
  `newobservacao` VARCHAR(50),
  `newparcela` INT,
  `newqttyParcela` INT,
  `newtypeCartao` INT,
  `newbandeira` DOUBLE,
  `newvalor` DECIMAL(15,3),
  newnetworkCard int,
  newConectCard int)
begin
  update cartao set
                     `idAdministradora`=`newidAdministradora`,
                     `idloja`=`newidloja`,
                     `alteracao`=`newalteracao`,
                     `cupom`=`newcupom` ,
                     `pedido`=`newpedido`,
                     `terminal`=`newterminal`,
                     `vencimento`=`newvencimento`,
                     `observacao`=`newobservacao`,
                     `parcela`=`newparcela`,
                     `qttyParcela`=`newqttyParcela`,
                     `typeCartao`=`newtypeCartao`,
                     `bandeira`=`newbandeira`,
                     `valor`=`newvalor`, networkCard = newnetworkCard,
                      idConectCard=newConectCard
                                where `idcartao`=`newidcartao`;
  end $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `conector_alt_categoria`
--

DROP PROCEDURE IF EXISTS `conector_alt_categoria`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='STRICT_TRANS_TABLES,STRICT_ALL_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,TRADITIONAL,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION' */ $$
CREATE DEFINER=`master`@`localhost` PROCEDURE `conector_alt_categoria`(
						    in newidcategoria integer,
                                                    in newsetor integer,
                                                    in newgrupo integer,
                                                    in newdescricao varchar(45),
                                                    in newstatus boolean,
                                                    in newitem integer,
                                                    in newcomissao decimal,
                                                    in newdesconto decimal
                                                 )
BEGIN
start Transaction;
	update 
        	categoria
	set 
		idsetor=newsetor,
	        idgrupo=newgrupo,
		descricao=newdescricao,
		status=newstatus,
		nItens=newitem,
		comissao=newcomissao,
		desconto=newdesconto
	where
	        idcategoria=newidcategoria;
commit;
END $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `conector_alt_cfop`
--

DROP PROCEDURE IF EXISTS `conector_alt_cfop`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='' */ $$
CREATE DEFINER=`master`@`localhost` PROCEDURE `conector_alt_cfop`(

  in  newcfop varchar(6),
  in `newnome` varchar(30),
  in `newtipo` char(1),
  in `newmodelo` char(2),
  in `newmsg01` varchar(100),
  in `newmsg02` varchar(100),
  in newstatus boolean
)
begin

  update 
     cfop 
    set
    `nome`=`newnome`,
    `tipo`=`newtipo`,
    `modelo`=`newmodelo`,
    `msg01`=`newmsg01`,
    `msg02`=`newmsg02`,
    status=newstatus
    
    where
    
     cfop = newcfop;
     
end $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `conector_alt_cheque`
--

DROP PROCEDURE IF EXISTS `conector_alt_cheque`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='' */ $$
CREATE DEFINER=`master`@`localhost` PROCEDURE `conector_alt_cheque`(
   newidcheque double,
  `newbanco` INT,
  `newidloja` INT,
  `newidcliente` INT,
  `newtypeRecebimento` CHAR(1),
  `newcontaCorrente` VARCHAR(12),
  `newserie` VARCHAR(3),
  `newagencia` VARCHAR(12),
  `newtypeCheque` CHAR(1),
  `newprazo` INT(11),
  `newemissao` DATE,
  `newvencimento` DATE,
  `newcityBanco` VARCHAR(50),
  `newnumberCheque` VARCHAR(12),
  `newvalueCheque` DECIMAL(15,3),
  `newhistorico` VARCHAR(100),
  `newtypeLancamento` CHAR(2),
  `newpagamento` VARCHAR(8),
  `newobservacao` VARCHAR(100),
  `newidUsuarioLiberacao` INT,
  `newmotivoLiberacao` VARCHAR(12),
  `newcmc7` VARCHAR(50),
  `newidusuario` INT,
  `newalteracao` DATE,
  `newreserva` double)
begin
  update cheque 
                set
                    `banco`=`newbanco`,
                    `idloja`=`newidloja`,
                    `idcliente`=`newidcliente`,
                    `typeRecebimento`=`newtypeRecebimento`,
                    `contaCorrente`=`newcontaCorrente`,
                    `serie`=`newserie`,
                    `agencia`=`newagencia`,
                    `typeCheque`=`newtypeCheque`,
                    `prazo`=`newprazo`,
                    `emissao`=`newemissao`,
                    `vencimento`=`newvencimento`,
                    `cityBanco`=`newcityBanco`,
                    `numberCheque`=`newnumberCheque`,
                    `valueCheque`=`newvalueCheque`,
                    `historico`=`newhistorico`,
                    `typeLancamento`=`newtypeLancamento`,
                    `pagamento`=`newpagamento`,
                    `observacao`=`newobservacao`,
                    `idUsuarioLiberacao`=`newidUsuarioLiberacao`,
                    `motivoLiberacao`=`newmotivoLiberacao`,
                    `cmc7`=`newcmc7`,
                    `idusuario`=`newidusuario`,
                    `alteracao`=`newalteracao`,
                    `reserva` = `newreserva`
                                            where 
                                                    idcheque=newidcheque;
  end $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `conector_alt_cliente`
--

DROP PROCEDURE IF EXISTS `conector_alt_cliente`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='' */ $$
CREATE DEFINER=`master`@`localhost` PROCEDURE `conector_alt_cliente`(
                                    in alt_idcliente integer,
                                    in alt_idloja integer,
                                    in alt_idtipoPessoa integer,
                                    in alt_idusuario integer,
                                    in alt_idatividade integer,
                                    in alt_observacao varchar(45),
                                    in alt_dataEmissao date,
                                    in alt_dataAlteracao date,
                                    in alt_idestado integer,
                                    in alt_uf char(2),
                                    in alt_codMun integer,
                                    in alt_status boolean,
                                    in send_id integer,
                                    in send_cep integer,
                                    in send_idcepbairro integer,
                                    in send_idenderecoType integer,
                                    in send_bairro varchar(45),
                                    in send_logradouro varchar(45),
                                    in send_complemento varchar(60),
                                    in send_municipio varchar(45),
                                    in send_estado char(2),
                                    in send_numero integer
                                  )
begin
start Transaction;
update
            cliente
        set
            idloja=alt_idloja,
            idtipoPessoa=alt_idtipoPessoa,
            idusuario=alt_idusuario,
            idatividade=alt_idatividade,
            observacao=alt_observacao,
            dataEmissao=alt_dataEmissao,
            dataAlteracao=alt_dataAlteracao,
            idestado=alt_idestado,
            uf=alt_uf,
            status=alt_status,
            idspedMunicipio=alt_codMun
        where
            cliente.idcliente=alt_idcliente;


   select sequencia from conector.endereco where endereco.idcliente=alt_idCliente and idEnderecoType = 1 and idEndereco=send_id into @a;

   if((select count(*) from conector.endereco where endereco.idcliente=alt_idcliente and idEnderecoType = send_idenderecoType)=1)then

    call conector_alt_endereco(
                                          send_id,
                                          alt_idcliente,
                                          send_cep,
                                          send_idcepbairro,
                                          send_idenderecoType,
                                          send_bairro,
                                          send_logradouro,
                                          send_complemento,
                                          send_municipio,
                                          send_estado,
                                          send_numero,@a,1
                                );

  else

              call conector_inc_endereco(
                                          alt_idcliente,
                                          send_cep,
                                          send_idcepbairro,
                                          send_idenderecoType,
                                          send_bairro,
                                          send_logradouro,
                                          send_complemento,
                                          send_municipio,
                                          send_estado,
                                          send_numero
                                        );
  end if;
commit;
end $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `conector_alt_clienteProfissional`
--

DROP PROCEDURE IF EXISTS `conector_alt_clienteProfissional`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='' */ $$
CREATE DEFINER=`master`@`localhost` PROCEDURE `conector_alt_clienteProfissional`(

				    in newidClienteProfissional int,

				    in newidcliente int,

				    in newidendereco int,

				    in newempresa varchar(40),

				    in newsalarioDeclarado numeric(15,3),

				    in newsalarioComprovado numeric(15,3),

				    in newidprofissao int,

				    in newidEscolaridade int,

            in newDefault boolean,

            in send_id integer,

            in send_cep integer,

            in send_idcepbairro integer,

            in send_idenderecoType integer,

            in send_bairro varchar(45),

            in send_logradouro varchar(45),

            in send_complemento varchar(60),

            in send_municipio varchar(45),

            in send_estado char(2),

            in send_numero integer

)
begin

start Transaction;

update

       clienteProfissional

set

	  idendereco = newidendereco,

	  empresa = newempresa,

	  salarioDeclarado=newsalarioDeclarado,

	  salarioComprovado=newsalarioComprovado,

	  idprofissao = newidprofissao,

	  idEscolaridade=newidEscolaridade,

    default1=newDefault

where

	idClienteProfissional=newidClienteProfissional and

	idcliente = newidcliente;



commit;



    call conector_alt_endereco(send_id
                              ,newidcliente,
                               send_cep,
                               send_idcepbairro,
                               send_idenderecoType,
                               send_bairro,
                               send_logradouro,
                               send_complemento,
                               send_municipio,
                               send_estado,
                               send_numero,
                               4,0);


if newDefault = 1 then
    call conector_alt_statusClienteRisco(newidcliente,newidClienteProfissional);
end if;
if((select count(default1) as codigo from clienteProfissional where idcliente=newidcliente and default1 = 1) <= 0) then
set @a=(select max(idClienteProfissional) from clienteProfissional where idcliente=newidcliente);
   update clienteProfissional set default1=1 where idcliente=newIdcliente and idClienteProfissional=@a;
end if;



end $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `conector_alt_clienteReferencia`
--

DROP PROCEDURE IF EXISTS `conector_alt_clienteReferencia`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='' */ $$
CREATE DEFINER=`master`@`localhost` PROCEDURE `conector_alt_clienteReferencia`(
  in newIdReferencia int,
  in newidcliente int,
  in newidtypeReferencia int,
  in newempresaContato varchar(40),
  in newcontato varchar(40),
  in newddd CHAR(4),
  in newfone CHAR(8),
  in newramal INT(11),
  in newdata DATE,
  in newobservacao VARCHAR(100)
)
begin
update clienteReferencia
set
  idcliente=newidcliente,
  idtypeReferencia=newidtypeReferencia,
  empresaContato=newempresaContato,
  contato=newcontato,
  ddd=newddd,
  fone=newfone,
  ramal=newramal,
  data=newdata,
  observacao=newobservacao
where
  idReferencia=newIdReferencia;
end $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `conector_alt_clienteRisco`
--

DROP PROCEDURE IF EXISTS `conector_alt_clienteRisco`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='' */ $$
CREATE DEFINER=`master`@`localhost` PROCEDURE `conector_alt_clienteRisco`(
  `newidclienteRisco` INT,
  `newidcliente` INT,
  `newcooperado` smallint(6),
  `newpreferencial` smallint(6),
  `newlimiteCheque` DECIMAL(15,3),
  `newonlyHourCheque` smallint(6),
  `newconvenio` INT,
  `newpagador` INT,
  `newlimiteEstouro` DECIMAL(15,3),
  `newlimiteConvenio` DECIMAL(15,3),
  `newnoteCobrancaConvenio` smallint(6),
  `newtypePrazo` VARCHAR(1),
  `newdiaEncerramento` INT(11),
  `newdiaFechamento` INT(11),
  `newprazoDias` INT(11),
   newUsuarioAceiteCheque INT(11),
   newUsuarioAceiteConvenio INT(11))
begin

  select limitecheque from clienteRisco where
                                           `idclienteRisco`=`newidclienteRisco` and
                                           `idcliente`=`newidcliente` into @a;
  select limiteConvenio from clienteRisco where
                                           `idclienteRisco`=`newidclienteRisco` and
                                           `idcliente`=`newidcliente` into @i;
                                           
 if(newlimitecheque != @a)then

  update clienteRisco
              set
                            `cooperado`=`newcooperado`,
                            `preferencial`=`newpreferencial`,
                            `limiteCheque`=`newlimiteCheque`,
                            `onlyHourCheque`=`newonlyHourCheque`,
                             usuarioAceiteCheque=newUsuarioAceiteCheque,
                             dataAceiteCheque=now()
                                       where
                                           `idclienteRisco`=`newidclienteRisco` and
                                           `idcliente`=`newidcliente`;
        else  if(newlimiteConvenio != @i)then

  update clienteRisco
              set
                            `cooperado`=`newcooperado`,
                            `preferencial`=`newpreferencial`,
                            `convenio`=`newconvenio`,
                            `pagador`=`newpagador`,
                            `limiteEstouro`=`newlimiteEstouro`,
                            `limiteConvenio`=`newlimiteConvenio`,
                            `noteCobrancaConvenio`=`newnoteCobrancaConvenio`,
                            `typePrazo`=`newtypePrazo`,
                            `diaEncerramento`=`newdiaEncerramento`,
                            `diaFechamento`=`newdiaFechamento`,
                            `prazoDias`=`newprazoDias`,
                             usuarioAceiteConvenio=newUsuarioAceiteConvenio,
                             dataAceiteConvenio=now()
                                       where
                                           `idclienteRisco`=`newidclienteRisco` and
                                           `idcliente`=`newidcliente`;
        else 
        
  update clienteRisco
              set
                            `cooperado`=`newcooperado`,
                            `preferencial`=`newpreferencial`,
                            `limiteCheque`=`newlimiteCheque`,
                            `onlyHourCheque`=`newonlyHourCheque`,
                            `convenio`=`newconvenio`,
                            `pagador`=`newpagador`,
                            `limiteEstouro`=`newlimiteEstouro`,
                            `limiteConvenio`=`newlimiteConvenio`,
                            `noteCobrancaConvenio`=`newnoteCobrancaConvenio`,
                            `typePrazo`=`newtypePrazo`,
                            `diaEncerramento`=`newdiaEncerramento`,
                            `diaFechamento`=`newdiaFechamento`,
                            `prazoDias`=`newprazoDias`
                                       where
                                           `idclienteRisco`=`newidclienteRisco` and
                                           `idcliente`=`newidcliente`;
        end if;
    end if;
end $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `conector_alt_condicaoParcelaPgto`
--

DROP PROCEDURE IF EXISTS `conector_alt_condicaoParcelaPgto`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='' */ $$
CREATE DEFINER=`master`@`localhost` PROCEDURE `conector_alt_condicaoParcelaPgto`(
  in `newidcondicaoPgto` int(11),
  in `newidcondicaoPgtoParcela` int(11),
  in `newdias` int,
  in `newporcentagem` decimal(15,3),
  in `newparticipaLivro` smallint(6))
begin
                  update
                                        condicaopgtoparcela
                  set
                                        `dias`=`newdias`,
                                        `porcentagem`=newporcentagem,
                                        `participaLivro`=`newparticipaLivro`
                  where
                                        `idcondicaoPgto`=`newidcondicaoPgto` and `idcondicaoPgtoParcela`=`newidcondicaoPgtoParcela`;

  end $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `conector_alt_condicaoPgto`
--

DROP PROCEDURE IF EXISTS `conector_alt_condicaoPgto`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='' */ $$
CREATE DEFINER=`master`@`localhost` PROCEDURE `conector_alt_condicaoPgto`(
  in `newIdcondicaoPgto` INT,
  in `newidfinalizadora` INT(11),
  in `newdescricao` VARCHAR(30) ,
  in `newdiasVencimento` INT(11),
  in `newnumeroParcelas` INT(11),
  in `newstatus` smallint(6),
  in `newvezesIguais` smallint(6),
   in newtotalPorcentagem numeric(15,3))
begin
                  update  
                                        condicaopgto
                  set
                                        
                                        `descricao`=`newdescricao`,
                                        `diasVencimento`=`newdiasVencimento`,
                                        `numeroParcelas`=`newnumeroParcelas`,
                                        `status`=`newstatus`,
                                        `vezesIguais`=`newvezesIguais`, totalPorcentagem=newtotalPorcentagem
                  where
                                        `idcondicaoPgto`=`newidcondicaoPgto`;
                                        
  end $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `conector_alt_condicaoPgtoParcela`
--

DROP PROCEDURE IF EXISTS `conector_alt_condicaoPgtoParcela`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='' */ $$
CREATE DEFINER=`master`@`localhost` PROCEDURE `conector_alt_condicaoPgtoParcela`(
                                                                        in `newidcondicaoPgto` INT,
                                                                        in `newidcondicaoPgtoParcela` INT,
                                                                        in `newidfinalizadora` INT,
                                                                        in `newdias` DECIMAL(15,3),
                                                                        in `newporcentagem` DECIMAL(15,3),
                                                                        in `newparticipaLivro` smallint(6) 
                                                    )
begin
                                            
                                                update 
                                                    conector.condicaoPgtoParcela
                                                
                                                set
                                                    
                                                    `dias`=`newdias`,
                                                    `porcentagem`=`newporcentagem`,
                                                    `participaLivro`=`newparticipaLivro`
                                                where
                                                    `idcondicaoPgto`=`newidcondicaoPgto` and
                                                    `idcondicaoPgtoParcela`=`newidcondicaoPgtoParcela`;    
                                                    
                                            end $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `conector_alt_configuracao`
--

DROP PROCEDURE IF EXISTS `conector_alt_configuracao`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='' */ $$
CREATE DEFINER=`master`@`localhost` PROCEDURE `conector_alt_configuracao`(
                                `newidconfiguracao` INT  ,
                                `newidusuario` INT  ,
                                `newadministradoraCartao` CHAR(1) ,
                                `newbanco` CHAR(1) ,
                                `newcaixa` CHAR(1) ,
                                `newcargo` CHAR(1) ,
                                `newcep` CHAR(1) ,
                                `newconvenios` CHAR(1) ,
                                `newcodicaoPgto` CHAR(1) ,
                                `newcontaCorrente` CHAR(1) ,
                                `newcliente` CHAR(1) ,
                                `newescolaridade` CHAR(1) ,
                                `newferiados` CHAR(1) ,
                                `newfinalizadoras` CHAR(1) ,
                                `newfornecedor` CHAR(1) ,
                                `newfuncionario` CHAR(1) ,
                                `newloja` CHAR(1) ,
                                `newmetodos` CHAR(1) ,
                                `newprofissao` CHAR(1) ,
                                `newrepresentante` CHAR(1) ,
                                `newtelefone` CHAR(1) ,
                                `newterminal` CHAR(1) ,
                                `newtransportadora` CHAR(1) ,
                                `newusuario` CHAR(1) ,
                                `newveiculo` CHAR(1) ,
                                `newproduto` CHAR(1) ,
                                `newsetor` CHAR(1) ,
                                `newgrupo` CHAR(1) ,
                                `newcategoria` CHAR(1) ,
                                `newcompra` CHAR(1) ,
                                `newmaximo` CHAR(1) ,
                                `newentrada` CHAR(1) ,
                                `newprecificacao` CHAR(1) ,
                                `newtransferencia` CHAR(1) ,
                                `newmovimentacaoEstoque` CHAR(1) ,
                                `newsaldoEstoque` CHAR(1) ,
                                `newzeraEstoque` CHAR(1) ,
                                `newoperacaoEntrada` CHAR(1) ,
                                `newtipoProduto` CHAR(1) ,
                                `newtrocaProduto` CHAR(1) ,
                                `newcontasReceber` CHAR(1) ,
                                `newcartaoCredito` CHAR(1) ,
                                `newcheque` CHAR(1) ,
                                `newcrediario` CHAR(1) ,
                                `newdevolucao` CHAR(1) ,
                                `newcaixaCadastro` CHAR(1) ,
                                `newsitegra` CHAR(1) ,
                                `newnotaFiscal` CHAR(1) ,
                                `newsped` CHAR(1) ,
                                `newapuracaoImposto` CHAR(1) ,
                                `newmapaResumo` CHAR(1) ,
                                `newcfop` CHAR(1) ,
                                `newaliquotaFiscal` CHAR(1) ,
                                `newoperacaoFaturamento` CHAR(1) ,
                                `newcontroleReservas` CHAR(1) ,
                                `newanaliseCredito` CHAR(1) ,
                                `newpdvSingle` CHAR(1) ,
                                `newcontasPagar` CHAR(1) ,
                                `newtrocaSenha` CHAR(1) ,
                                `newliberacao` CHAR(1) ,
                                `newcargas` CHAR(1) ,
                                `newinterfacePdv` CHAR(1) ,
                                `newdre` CHAR(1) ,
                                `newfluxoCaixa` CHAR(1) ,
                                `newflashReserva` CHAR(1) ,
                                `newflashVenda` CHAR(1) ,
                                `newrelatorios` CHAR(1) ,
                                `newchequeDevolvido` CHAR(1),
                                `newconvenio` CHAR(1) ,
                                `newlog` CHAR(1) ,
                                `newalteracao` DATE  ,
                                `newmenuCadastro` SMALLINT,
                                `newmenuProduto` SMALLINT,
                                `newmenuFinanceiro` SMALLINT,
                                `newmenuFiscal` SMALLINT,
                                `newmenuFaturamento` SMALLINT,
                                `newmenuPagar` SMALLINT,
                                `newmenuUtilitario` SMALLINT,
                                `newmenuContabil` SMALLINT,
                                `newmenuVenda` SMALLINT,
                                `newmenuRelatorio` SMALLINT,
                                `newinventario` CHAR(1),
                                `newestoqueRede` CHAR(1),
                                `newsaldoCrediario` CHAR(1),
                                newCrediarioContrato CHAR(1),
                                newCrediarioResumoContabil CHAR(1),
                                newCrediarioInadimplencia CHAR(1),
                                newCrediarioConfiguracao CHAR(1),
                                newmenuBoletos smallint,
                                newtableFiscal char(1),
                                newprecoIndividual char(1)
                     )
begin
		  update configuracao
				set
                                `administradoraCartao` = `newadministradoraCartao` ,
                                `banco` = `newbanco` ,
                                `caixa` = `newcaixa` ,
                                `cargo` = `newcargo` ,
                                `cep` = `newcep` ,
                                `convenios` = `newconvenios` ,
                                `codicaoPgto` = `newcodicaoPgto` ,
                                `contaCorrente` = `newcontaCorrente` ,
                                `cliente` = `newcliente` ,
                                `escolaridade` = `newescolaridade` ,
                                `feriados` = `newferiados` ,
                                `finalizadoras` = `newfinalizadoras` ,
                                `fornecedor` = `newfornecedor` ,
                                `funcionario` = `newfuncionario` ,
                                `loja` = `newloja` ,
                                `metodos` = `newmetodos` ,
                                `profissao` = `newprofissao` ,
                                `representante` = `newrepresentante` ,
                                `telefone` = `newtelefone` ,
                                `terminal` = `newterminal` ,
                                `transportadora` = `newtransportadora` ,
                                `usuario` = `newusuario` ,
                                `veiculo` = `newveiculo` ,
                                `produto` = `newproduto` ,
                                `setor` = `newsetor` ,
                                `grupo` = `newgrupo` ,
                                `categoria` = `newcategoria` ,
                                `compra` = `newcompra` ,
                                `maximo` = `newmaximo` ,
                                `entrada` = `newentrada` ,
                                `precificacao` = `newprecificacao` ,
                                `transferencia` = `newtransferencia` ,
                                `movimentacaoEstoque` = `newmovimentacaoEstoque` ,
                                `saldoEstoque` = `newsaldoEstoque` ,
                                `zeraEstoque` = `newzeraEstoque` ,
                                `operacaoEntrada` = `newoperacaoEntrada` ,
                                `tipoProduto` = `newtipoProduto` ,
                                `trocaProduto` = `newtrocaProduto` ,
                                `contasReceber` = `newcontasReceber` ,
                                `cartaoCredito` = `newcartaoCredito` ,
                                `cheque` = `newcheque` ,
                                `crediario` = `newcrediario` ,
                                `devolucao` = `newdevolucao` ,
                                `caixaCadastro` = `newcaixaCadastro` ,
                                `sitegra` = `newsitegra` ,
                                `notaFiscal` = `newnotaFiscal` ,
                                `sped` = `newsped` ,
                                `apuracaoImposto` = `newapuracaoImposto` ,
                                `mapaResumo` = `newmapaResumo` ,
                                `cfop` = `newcfop` ,
                                `aliquotaFiscal` = `newaliquotaFiscal` ,
                                `operacaoFaturamento` = `newoperacaoFaturamento` ,
                                `controleReservas` = `newcontroleReservas` ,
                                `analiseCredito` = `newanaliseCredito` ,
                                `pdvSingle` = `newpdvSingle` ,
                                `contasPagar` = `newcontasPagar` ,
                                `trocaSenha` = `newliberacao` ,
                                `liberacao` = `newliberacao`,
                                `cargas` = `newcargas` ,
                                `interfacePdv` = `newinterfacePdv` ,
                                `dre` = `newdre` ,
                                `fluxoCaixa` = `newfluxoCaixa` ,
                                `flashReserva` = `newflashReserva` ,
                                `relatorios` = `newrelatorios` ,
                                `chequeDevolvido`=`newchequeDevolvido`,
                                `convenio` = `newconvenio` ,
                                `log` = `newlog` ,
                                `alteracao`=`newalteracao`,
                                `menuCadastro` = `newmenuCadastro` ,
                                `menuProduto` = `newmenuProduto` ,
                                 tableFiscal=newtableFiscal,
                                `menuFinanceiro` = `newmenuFinanceiro` ,
                                `menuFiscal` = `newmenuFiscal` ,
                                `menuFaturamento` = `newmenuFaturamento` ,
                                `menuPagar` = `newmenuPagar` ,
                                `menuUtilitario` = `newmenuUtilitario` ,
                                `menuContabil` = `newmenuContabil` ,
                                `menuVenda` = `newmenuVenda` ,
                                `menuRelatorio` = `newmenuRelatorio`,
                                `inventario`=`newinventario`,
                                `estoqueRede`=`newestoqueRede`,
                                `saldoCrediario`=`newsaldoCrediario`,
                                crediarioContrato=newCrediarioContrato,
                                crediarioResumoContabil=newCrediarioResumoContabil,
                                crediarioInadimplencia=newCrediarioInadimplencia,
                                crediarioConfiguracao=newCrediarioConfiguracao,
                                menuBoletos=newmenuBoletos,
                                precoIndividual=newprecoIndividual
					where
					`idusuario`= `newidusuario` and
			                `idconfiguracao`=`newidconfiguracao`;

end $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `conector_alt_configuraNotaFiscal`
--

DROP PROCEDURE IF EXISTS `conector_alt_configuraNotaFiscal`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='' */ $$
CREATE DEFINER=`master`@`localhost` PROCEDURE `conector_alt_configuraNotaFiscal`(
                            in newIdconfiguracaoNotaFiscal integer,
                            in newRazaoSocialCabecalhoX smallint,
                            in newRazaoSocialCabecalhoY smallint,
                            in newEnderecoCabecalhoX smallint,
                            in newEnderecoCabecalhoY smallint,
                            in newBairroCabecalhoX smallint,
                            in newBairroCabecalhoY smallint,
                            in newCidadeCabecalhoX smallint,
                            in newCidadeCabecalhoY smallint,
                            in newCepCabecalhoX smallint,
                            in newCepCabecalhoY smallint,
                            in newEstadoCabecalhoX smallint,
                            in newEstadoCabecalhoY smallint,
                            in newTelefoneCabecalhoX smallint,
                            in newTelefoneCabecalhoY smallint,
                            in newCnpjCabecalhoX smallint,
                            in newCnpjCabecalhoY smallint,
                            in newInscricaoEstadualCabecalhoX smallint,
                            in newInscricaoEstadualCabecalhoY smallint,
                            in newLojaCabecalhoX smallint,
                            in newLojaCabecalhoY smallint,
                            in newIeStTributarioCabecalhoX smallint,
                            in newIeStTributarioCabecalhoY smallint,
                            in newInscricaoMunicipalCabecalhoX smallint,
                            in newInscricaoMunicipalCabecalhoY smallint,
                            in newRazaoSocialDestRemX smallint,
                            in newRazaoSocialDestRemY smallint,
                            in newCnpjCpfDestRemX smallint,
                            in newCnpjCpfDestRemY smallint,
                            in newInscricaoEstadualDestRemX smallint,
                            in newInscricaoEstadualDestRemY smallint,
                            in newEnderecoDestRemX smallint,
                            in newEnderecoDestRemY smallint,
                            in newBairroDestRemX smallint,
                            in newBairroDestRemY smallint,
                            in newCepDestRemX smallint,
                            in newCepDestRemY smallint,
                            in newCidadeDestRemX smallint,
                            in newCidadeDestRemY smallint,
                            in newTelefoneDestRemX smallint,
                            in newTelefoneDestRemY smallint,
                            in newEstadoDestRemX smallint,
                            in newEstadoDestRemY smallint,
                            in newEnderecoCobrancaDestRemX smallint,
                            in newEnderecoCobrancaDestRemY smallint,
                            in newPracaPagamentoDestRemX smallint,
                            in newPracaPagamentoDestRemY smallint,
                            in newCepCobrancaDestRemX smallint,
                            in newCepCobrancaDestRemY smallint,
                            in newCodigoClienteDestRemX smallint,
                            in newCodigoClienteDestRemY smallint,
                            in newFantasiaEntregaDestRemX smallint,
                            in newFantasiaEntregaDestRemY smallint,
                            in newEnderecoEntregaDestRemX smallint,
                            in newEnderecoEntregaDestRemY smallint,
                            in newBairroEntregaDestRemX smallint,
                            in newBairroEntregaDestRemY smallint,
                            in newComplementoEntregaDestRemX smallint,
                            in newComplementoEntregaDestRemY smallint,
                            in newCepEntregaDestRemX smallint,
                            in newCepEntregaDestRemY smallint,
                            in newCidadeEntregaDestRemX smallint,
                            in newCidadeEntregaDestRemY smallint,
                            in newEntradaEmissaoX smallint,
                            in newEntradaEmissaoY smallint,
                            in newSaidaEmissaoX smallint,
                            in newSaidaEmissaoY smallint,
                            in newNumeroNotaEmissaoX smallint,
                            in newNumeroNotaEmissaoY smallint,
                            in newCodigoCfopEmissaoX smallint,
                            in newCodigoCfopEmissaoY smallint,
                            in newDescricaoCfopEmissaoX smallint,
                            in newDescricaoCfopEmissaoY smallint,
                            in newDataEmissaoEmissaoX smallint,
                            in newDataEmissaoEmissaoY smallint,
                            in newDataSaidaEmissaoX smallint,
                            in newDataSaidaEmissaoY smallint,
                            in newHoraSaidaEmissaoX smallint,
                            in newHoraSaidaEmissaoY smallint,
                            in newPaginaEmissaoX smallint,
                            in newPaginaEmissaoY smallint,
                            in newFatura1FaturamentoX smallint,
                            in newFatura1FaturamentoY smallint,
                            in newFatura2FaturamentoX smallint,
                            in newFatura2FaturamentoY smallint,
                            in newFatura3FaturamentoX smallint,
                            in newFatura3FaturamentoY smallint,
                            in newFatura4FaturamentoX smallint,
                            in newFatura4FaturamentoY smallint,
                            in newFatura5FaturamentoX smallint,
                            in newFatura5FaturamentoY smallint,
                            in newFatura6FaturamentoX smallint,
                            in newFatura6FaturamentoY smallint,
                            in newFatura7FaturamentoX smallint,
                            in newFatura7FaturamentoY smallint,
                            in newFatura8FaturamentoX smallint,
                            in newFatura8FaturamentoY smallint,
                            in newFatura9FaturamentoX smallint,
                            in newFatura9FaturamentoY smallint,
                            in newFatura10FaturamentoX smallint,
                            in newFatura10FaturamentoY smallint,
                            in newFatura11FaturamentoX smallint,
                            in newFatura11FaturamentoY smallint,
                            in newFatura12FaturamentoX smallint,
                            in newFatura12FaturamentoY smallint,
                            in newExtenso1FaturamentoX smallint,
                            in newExtenso1FaturamentoY smallint,
                            in newData1FaturamentoX smallint,
                            in newData1FaturamentoY smallint,
                            in newData2FaturamentoX smallint,
                            in newData2FaturamentoY smallint,
                            in newData3FaturamentoX smallint,
                            in newData3FaturamentoY smallint,
                            in newData4FaturamentoX smallint,
                            in newData4FaturamentoY smallint,
                            in newData5FaturamentoX smallint,
                            in newData5FaturamentoY smallint,
                            in newData6FaturamentoX smallint,
                            in newData6FaturamentoY smallint,
                            in newData7FaturamentoX smallint,
                            in newData7FaturamentoY smallint,
                            in newData8FaturamentoX smallint,
                            in newData8FaturamentoY smallint,
                            in newData9FaturamentoX smallint,
                            in newData9FaturamentoY smallint,
                            in newData10FaturamentoX smallint,
                            in newData10FaturamentoY smallint,
                            in newData11FaturamentoX smallint,
                            in newData11FaturamentoY smallint,
                            in newData12FaturamentoX smallint,
                            in newData12FaturamentoY smallint,
                            in newExtenso2FaturamentoX smallint,
                            in newExtenso2FaturamentoY smallint,
                            in newValor1FaturamentoX smallint,
                            in newValor1FaturamentoY smallint,
                            in newValor2FaturamentoX smallint,
                            in newValor2FaturamentoY smallint,
                            in newValor3FaturamentoX smallint,
                            in newValor3FaturamentoY smallint,
                            in newValor4FaturamentoX smallint,
                            in newValor4FaturamentoY smallint,
                            in newValor5FaturamentoX smallint,
                            in newValor5FaturamentoY smallint,
                            in newValor6FaturamentoX smallint,
                            in newValor6FaturamentoY smallint,
                            in newValor7FaturamentoX smallint,
                            in newValor7FaturamentoY smallint,
                            in newValor8FaturamentoX smallint,
                            in newValor8FaturamentoY smallint,
                            in newValor9FaturamentoX smallint,
                            in newValor9FaturamentoY smallint,
                            in newValor10FaturamentoX smallint,
                            in newValor10FaturamentoY smallint,
                            in newValor11FaturamentoX smallint,
                            in newValor11FaturamentoY smallint,
                            in newValor12FaturamentoX smallint,
                            in newValor12FaturamentoY smallint,
                            in newEmissaoFaturaFaturamentoX smallint,
                            in newEmissaoFaturaFaturamentoY smallint,
                            in newCodigoProdutoItensX smallint,
                            in newCodigoProdutoItensY smallint,
                            in newDescricaoProdutoItensX smallint,
                            in newDescricaoProdutoItensY smallint,
                            in newTamanhoProdutoItensX smallint,
                            in newTamanhoProdutoItensY smallint,
                            in newStItensX smallint,
                            in newStItensY smallint,
                            in newClassificacaoFiscalItensX smallint,
                            in newClassificacaoFiscalItensY smallint,
                            in newEmbalagemItensX smallint,
                            in newEmbalagemItensY smallint,
                            in newUnidadesItensX smallint,
                            in newUnidadesItensY smallint,
                            in newQuantidadeItensX smallint,
                            in newQuantidadeItensY smallint,
                            in newValorUnitarioItensX smallint,
                            in newValorUnitarioItensY smallint,
                            in newValorTotalItensX smallint,
                            in newValorTotalItensY smallint,
                            in newAliquotaIcmsItensX smallint,
                            in newAliquotaIcmsItensY smallint,
                            in newAliquotaIpiItensX smallint,
                            in newAliquotaIpiItensY smallint,
                            in newValorIpiItensX smallint,
                            in newValorIpiItensY smallint,
                            in newEspecificacaoTecnicaItensX smallint,
                            in newEspecificacaoTecnicaItensY smallint,
                            in newDescontoItensX smallint,
                            in newDescontoItensY smallint,
                            in newValorLiquidoItensX smallint,
                            in newValorLiquidoItensY smallint,
                            in newReferenciaFornecedorItensX smallint,
                            in newReferenciaFornecedorItensY smallint,
                            in newCfopItensX smallint,
                            in newCfopItensY smallint,
                            in newPesoItensX smallint,
                            in newPesoItensY smallint,
                            in newMipItensX smallint,
                            in newMipItensY smallint,
                            in newNumeroItensItens smallint,
                            in newServicosItensX smallint,
                            in newServicosItensY smallint,
                            in newValorServicosItensX smallint,
                            in newValorServicosItensY smallint,
                            in auxUtilizaPulaLinhaAdicional smallint,
                            in newComplementoItensX smallint,
                            in newComplementoItensY smallint,
                            in newTituloAdicional1ItensX smallint,
                            in newTituloAdicional1ItensY smallint,
                            in newValorTituloAdicional1ItensX smallint,
                            in newValorTituloAdicional1ItensY smallint,
                            in newTituloAdicional2ItensX smallint,
                            in newTituloAdicional2ItensY smallint,
                            in newValorTituloAdicional2ItensX smallint,
                            in newValorTituloAdicional2ItensY smallint,
                            in newEstadoProdutoItensX smallint,
                            in newEstadoProdutoItensY smallint,
                            in newGarantia1ItensX smallint,
                            in newGarantia1ItensY smallint,
                            in newGarantia2ItensX smallint,
                            in newGarantia2ItensY smallint,
                            in newBaseIcmsCalculosDiversosX smallint,
                            in newBaseIcmsCalculosDiversosY smallint,
                            in newValorIcmsCalculosDiversosX smallint,
                            in newValorIcmsCalculosDiversosY smallint,
                            in newBaseIcmsStCalculosDiversosX smallint,
                            in newBaseIcmsStCalculosDiversosY smallint,
                            in newValorIcmsStCalculosDiversosX smallint,
                            in newValorIcmsStCalculosDiversosY smallint,
                            in newValorProdutosFinanceiroCalculosDiversosX smallint,
                            in newValorProdutosFinanceiroCalculosDiversosY smallint,
                            in newValorFreteCalculosDiversosX smallint,
                            in newValorFreteCalculosDiversosY smallint,
                            in newValorSeguroCalculosDiversosX smallint,
                            in newValorSeguroCalculosDiversosY smallint,
                            in newValorDespesasCalculosDiversosX smallint,
                            in newValorDespesasCalculosDiversosY smallint,
                            in newValorIpiCalculosDiversosX smallint,
                            in newValorIpiCalculosDiversosY smallint,
                            in newValorProdutosCabecalhoCalculosDiversosX smallint,
                            in newValorProdutosCabecalhoCalculosDiversosY smallint,
                            in newValorTotalNotaCalculosDiversosX smallint,
                            in newValorTotalNotaCalculosDiversosY smallint,
                            in newAcrescimosDiversosX smallint,
                            in newAcrescimosDiversosY smallint,
                            in newDescontoDiversosX smallint,
                            in newDescontoDiversosY smallint,
                            in new1linhaServicosDiversosX smallint,
                            in new1linhaServicosDiversosY smallint,
                            in new2linhaServicosDiversosX smallint,
                            in new2linhaServicosDiversosY smallint,
                            in newAliquotaIssDiversosX smallint,
                            in newAliquotaIssDiversosY smallint,
                            in newInscricaoMunicipalDiversosX smallint,
                            in newInscricaoMunicipalDiversosY smallint,
                            in newValorIssDiversosX smallint,
                            in newValorIssDiversosY smallint,
                            in newTotalServicosDiversosX smallint,
                            in newTotalServicosDiversosY smallint,
                            in newFunruralDiversosX smallint,
                            in newFunruralDiversosY smallint,
                            in newImpostoRendaDiversosX smallint,
                            in newImpostoRendaDiversosY smallint,
                            in newNomeRazaoTransportadorX smallint,
                            in newNomeRazaoTransportadorY smallint,
                            in newTipoFreteTransportadorX smallint,
                            in newTipoFreteTransportadorY smallint,
                            in newPlacaVeiculoTransportadorX smallint,
                            in newPlacaVeiculoTransportadorY smallint,
                            in newEstadoPlacaTransportadorX smallint,
                            in newEstadoPlacaTransportadorY smallint,
                            in newCnpjCpfTransportadorX smallint,
                            in newCnpjCpfTransportadorY smallint,
                            in newEnderecoTransportadorX smallint,
                            in newEnderecoTransportadorY smallint,
                            in newCidadeTransportadorX smallint,
                            in newCidadeTransportadorY smallint,
                            in newEstadoTransportadorX smallint,
                            in newEstadoTransportadorY smallint,
                            in newInscricaoEstadualTransportadorX smallint,
                            in newInscricaoEstadualTransportadorY smallint,
                            in newEncarregadoTransferenciaTransportadorX smallint,
                            in newEncarregadoTransferenciaTransportadorY smallint,
                            in auxImprimeEncarregadosTransferencia smallint,
                            in newQuantidadeVolumesComplementosX smallint,
                            in newQuantidadeVolumesComplementosY smallint,
                            in newEspecieComplementosX smallint,
                            in newEspecieComplementosY smallint,
                            in newMarcaComplementosX smallint,
                            in newMarcaComplementosY smallint,
                            in newNumeroComplementosX smallint,
                            in newNumeroComplementosY smallint,
                            in newPesoBrutoComplementosX smallint,
                            in newPesoBrutoComplementosY smallint,
                            in newPesoLiquidoComplementosX smallint,
                            in newPesoLiquidoComplementosY smallint,
                            in newNumeroPedidoComplementosX smallint,
                            in newNumeroPedidoComplementosY smallint,
                            in newSeuPedidoComplementosX smallint,
                            in newSeuPedidoComplementosY smallint,
                            in newVendedorComplementosX smallint,
                            in newVendedorComplementosY smallint,
                            in newNomeVendedorComplementosX smallint,
                            in newNomeVendedorComplementosY smallint,
                            in newProdutorComplementosX smallint,
                            in newProdutorComplementosY smallint,
                            in newQuantidadeItensComplementosX smallint,
                            in newQuantidadeItensComplementosY smallint,
                            in newNumeroCargaComplementosX smallint,
                            in newNumeroCargaComplementosY smallint,
                            in new1LinhaMensagemComplementosX smallint,
                            in new1LinhaMensagemComplementosY smallint,
                            in new2LinhaMensagemComplementosX smallint,
                            in new2LinhaMensagemComplementosY smallint,
                            in new3LinhaMensagemComplementosX smallint,
                            in new3LinhaMensagemComplementosY smallint,
                            in new4LinhaMensagemComplementosX smallint,
                            in new4LinhaMensagemComplementosY smallint,
                            in new5LinhaMensagemComplementosX smallint,
                            in new5LinhaMensagemComplementosY smallint,
                            in new1LinhaImpostosComplementosX smallint,
                            in new1LinhaImpostosComplementosY smallint,
                            in new2LinhaImpostosComplementosX smallint,
                            in new2LinhaImpostosComplementosY smallint,
                            in new3LinhaImpostosComplementosX smallint,
                            in new3LinhaImpostosComplementosY smallint,
                            in newNumeroNotaCanhotoComplementosX smallint,
                            in newNumeroNotaCanhotoComplementosY smallint,
                            in newVencimentoCanhotoComplementosX smallint,
                            in newVencimentoCanhotoComplementosY smallint,
                            in newOrdemServicoComplementosX smallint,
                            in newOrdemServicoComplementosY smallint,
                            in newNomeOperacaoComplementosX smallint,
                            in newNomeOperacaoComplementosY smallint,
                            in newReterIssComplementosX smallint,
                            in newReterIssComplementosY smallint,
                            in newNumeroRotaComplementosX smallint,
                            in newNumeroRotaComplementosY smallint,
                            in newNotaOrigemComplementosX smallint,
                            in newNotaOrigemComplementosY smallint,
                            in new1LinhaClassificacaoFiscalComplementosX smallint,
                            in new1LinhaClassificacaoFiscalComplementosY smallint,
                            in new2LinhaClassificacaoFiscalComplementosX smallint,
                            in new2LinhaClassificacaoFiscalComplementosY smallint,
                            in new3LinhaClassificacaoFiscalComplementosX smallint,
                            in new3LinhaClassificacaoFiscalComplementosY smallint,
                            in new4LinhaClassificacaoFiscalComplementosX smallint,
                            in new4LinhaClassificacaoFiscalComplementosY smallint,
                            in new5LinhaClassificacaoFiscalComplementosX smallint,
                            in new5LinhaClassificacaoFiscalComplementosY smallint,
                            in new6LinhaClassificacaoFiscalComplementosX smallint,
                            in new6LinhaClassificacaoFiscalComplementosY smallint,
                            in newInformacaoComplementarComplementosX smallint,
                            in newInformacaoComplementarComplementosY smallint,
                            in newQuantidadeInformacaoComplementarComplementos smallint,
                            in newCstImpostosX smallint,
                            in newCstImpostosY smallint,
                            in newAliquotaImpostosX smallint,
                            in newAliquotaImpostosY smallint,
                            in newBaseIcmsImpostosX smallint,
                            in newBaseIcmsImpostosY smallint,
                            in newValorIcmsImpostosX smallint,
                            in newValorIcmsImpostosY smallint,
                            in newCfopImpostosX smallint,
                            in newCfopImpostosY smallint,
                            in newNumeroLinhasImpostos smallint,
                            in newNomeArquivoNotaFiscal varchar(15),
                            in status smallint
)
BEGIN
 UPDATE `conector`.`configuracaonotafiscal`
SET
`idconfiguracaoNotaFiscal` = newIdconfiguracaoNotaFiscal,
`idloja` = newidloja,
`razaoSocialCabecalhoX` = newRazaoSocialCabecalhoX,
`razaoSocialCabecalhoY` = newRazaoSocialCabecalhoY,
`enderecoCabecalhoX` = newEnderecoCabecalhoX,
`enderecoCabecalhoY` = newEnderecoCabecalhoY,
`bairroCabecalhoX` = newBairroCabecalhoX,
`bairroCabecalhoY` = newBairroCabecalhoY,
`cidadeCabecalhoX` = newCidadeCabecalhoX,
`cidadeCabecalhoY` = newCidadeCabecalhoY,
`cepCabecalhoX` = newCepCabecalhoX,
`cepCabecalhoY` = newCepCabecalhoY,
`estadoCabecalhoX` = newEstadoCabecalhoX,
`estadoCabecalhoY` = newEstadoCabecalhoY,
`telefoneCabecalhoX` = newTelefoneCabecalhoX,
`telefoneCabecalhoY` = newTelefoneCabecalhoY,
`cnpjCabecalhoX` = newCnpjCabecalhoX,
`cnpjCabecalhoY` = newCnpjCabecalhoY,
`inscricaoEstadualCabecalhoX` = newInscricaoEstadualCabecalhoX,
`inscricaoEstadualCabecalhoY` = newInscricaoEstadualCabecalhoY,
`lojaCabecalhoX` = newLojaCabecalhoX,
`lojaCabecalhoY` = newLojaCabecalhoY,
`ieStTributarioCabecalhoX` = newIeStTributarioCabecalhoX,
`ieStTributarioCabecalhoY` = newIeStTributarioCabecalhoY,
`inscricaoMunicipalCabecalhoX` = newInscricaoMunicipalCabecalhoX,
`inscricaoMunicipalCabecalhoY` = newInscricaoMunicipalCabecalhoY,
`razaoSocialDestRemX` = newRazaoSocialDestRemX,
`razaoSocialDestRemY` = newRazaoSocialDestRemY,
`cnpjCpfDestRemX` = newCnpjCpfDestRemX,
`cnpjCpfDestRemY` = newCnpjCpfDestRemY,
`inscricaoEstadualDestRemX` = newInscricaoEstadualDestRemX,
`inscricaoEstadualDestRemY` = newInscricaoEstadualDestRemY,
`enderecoDestRemX` = newEnderecoDestRemX,
`enderecoDestRemY` = newEnderecoDestRemY,
`bairroDestRemX` = newBairroDestRemX,
`bairroDestRemY` = newBairroDestRemY,
`cepDestRemX` = newCepDestRemX,
`cepDestRemY` = newCepDestRemY,
`cidadeDestRemX` = newCidadeDestRemX,
`cidadeDestRemY` = newCidadeDestRemY,
`telefoneDestRemX` = newTelefoneDestRemX,
`telefoneDestRemY` = newTelefoneDestRemY,
`estadoDestRemX` = newEstadoDestRemX,
`estadoDestRemY` = newEstadoDestRemY,
`enderecoCobrancaDestRemX` = newEnderecoCobrancaDestRemX,
`enderecoCobrancaDestRemY` = newEnderecoCobrancaDestRemY,
`pracaPagamentoDestRemX` = newPracaPagamentoDestRemX,
`pracaPagamentoDestRemY` = newPracaPagamentoDestRemY,
`cepCobrancaDestRemX` = newCepCobrancaDestRemX,
`cepCobrancaDestRemY` = newCepCobrancaDestRemY,
`codigoClienteDestRemX` = newCodigoClienteDestRemX,
`codigoClienteDestRemY` = newCodigoClienteDestRemY,
`fantasiaEntregaDestRemX` = newFantasiaEntregaDestRemX,
`fantasiaEntregaDestRemY` = newFantasiaEntregaDestRemY,
`enderecoEntregaDestRemX` = newEnderecoEntregaDestRemX,
`enderecoEntregaDestRemY` = newEnderecoEntregaDestRemY,
`bairroEntregaDestRemX` = newBairroEntregaDestRemX,
`bairroEntregaDestRemY` = newBairroEntregaDestRemY,
`complementoEntregaDestRemX` = newComplementoEntregaDestRemX,
`complementoEntregaDestRemY` = newComplementoEntregaDestRemY,
`cepEntregaDestRemX` = newCepEntregaDestRemX,
`cepEntregaDestRemY` = newCepEntregaDestRemY,
`cidadeEntregaDestRemX` = newCidadeEntregaDestRemX,
`cidadeEntregaDestRemY` = newCidadeEntregaDestRemY,
`entradaEmissaoX` = newEntradaEmissaoX,
`entradaEmissaoY` = newEntradaEmissaoY,
`saidaEmissaoX` = newSaidaEmissaoX,
`saidaEmissaoY` = newSaidaEmissaoY,
`numeroNotaEmissaoX` = newNumeroNotaEmissaoX,
`numeroNotaEmissaoY` = newNumeroNotaEmissaoY,
`codigoCfopEmissaoX` = newCodigoCfopEmissaoX,
`codigoCfopEmissaoY` = newCodigoCfopEmissaoY,
`descricaoCfopEmissaoX` = newDescricaoCfopEmissaoX,
`descricaoCfopEmissaoY` = newDescricaoCfopEmissaoY,
`dataEmissaoEmissaoX` = newDataEmissaoEmissaoX,
`dataEmissaoEmissaoY` = newDataEmissaoEmissaoY,
`dataSaidaEmissaoX` = newDataSaidaEmissaoX,
`dataSaidaEmissaoY` = newDataSaidaEmissaoY,
`horaSaidaEmissaoX` = newHoraSaidaEmissaoX,
`horaSaidaEmissaoY` = newHoraSaidaEmissaoY,
`paginaEmissaoX` = newPaginaEmissaoX,
`paginaEmissaoY` = newPaginaEmissaoY,
`fatura1FaturamentoX` = newFatura1FaturamentoX,
`fatura1FaturamentoY` = newFatura1FaturamentoY,
`fatura2FaturamentoX` = newFatura2FaturamentoX,
`fatura2FaturamentoY` = newFatura2FaturamentoY,
`fatura3FaturamentoX` = newFatura3FaturamentoX,
`fatura3FaturamentoY` = newFatura3FaturamentoY,
`fatura4FaturamentoX` = newFatura4FaturamentoX,
`fatura4FaturamentoY` = newFatura4FaturamentoY,
`fatura5FaturamentoX` = newFatura5FaturamentoX,
`fatura5FaturamentoY` = newFatura5FaturamentoY,
`fatura6FaturamentoX` = newFatura6FaturamentoX,
`fatura6FaturamentoY` = newFatura6FaturamentoY,
`fatura7FaturamentoX` = newFatura7FaturamentoX,
`fatura7FaturamentoY` = newFatura7FaturamentoY,
`fatura8FaturamentoX` = newFatura8FaturamentoX,
`fatura8FaturamentoY` = newFatura8FaturamentoY,
`fatura9FaturamentoX` = newFatura9FaturamentoX,
`fatura9FaturamentoY` = newFatura9FaturamentoY,
`fatura10FaturamentoX` = newFatura10FaturamentoX,
`fatura10FaturamentoY` = newFatura10FaturamentoY,
`fatura11FaturamentoX` = newFatura11FaturamentoX,
`fatura11FaturamentoY` = newFatura11FaturamentoY,
`fatura12FaturamentoX` = newFatura12FaturamentoX,
`fatura12FaturamentoY` = newFatura12FaturamentoY,
`extenso1FaturamentoX` = newExtenso1FaturamentoX,
`extenso1FaturamentoY` = newExtenso1FaturamentoY,
`data1FaturamentoX` = newData1FaturamentoX,
`data1FaturamentoY` = newData1FaturamentoY,
`data2FaturamentoX` = newData2FaturamentoX,
`data2FaturamentoY` = newData2FaturamentoY,
`data3FaturamentoX` = newData3FaturamentoX,
`data3FaturamentoY` = newData3FaturamentoY,
`data4FaturamentoX` = newData4FaturamentoX,
`data4FaturamentoY` = newData4FaturamentoY,
`data5FaturamentoX` = newData5FaturamentoX,
`data5FaturamentoY` = newData5FaturamentoY,
`data6FaturamentoX` = newData6FaturamentoX,
`data6FaturamentoY` = newData6FaturamentoY,
`data7FaturamentoX` = newData7FaturamentoX,
`data7FaturamentoY` = newData7FaturamentoY,
`data8FaturamentoX` = newData8FaturamentoX,
`data8FaturamentoY` = newData8FaturamentoY,
`data9FaturamentoX` = newData9FaturamentoX,
`data9FaturamentoY` = newData9FaturamentoY,
`data10FaturamentoX` = newData10FaturamentoX,
`data10FaturamentoY` = newData10FaturamentoY,
`data11FaturamentoX` = newData11FaturamentoX,
`data11FaturamentoY` = newData11FaturamentoY,
`data12FaturamentoX` = newData12FaturamentoX,
`data12FaturamentoY` = newData12FaturamentoY,
`extenso2FaturamentoX` = newExtenso2FaturamentoX,
`extenso2FaturamentoY` = newExtenso2FaturamentoY,
`valor1FaturamentoX` = newValor1FaturamentoX,
`valor1FaturamentoY` = newValor1FaturamentoY,
`valor2FaturamentoX` = newValor2FaturamentoX,
`valor2FaturamentoY` = newValor2FaturamentoY,
`valor3FaturamentoX` = newValor3FaturamentoX,
`valor3FaturamentoY` = newValor3FaturamentoY,
`valor4FaturamentoX` = newValor4FaturamentoX,
`valor4FaturamentoY` = newValor4FaturamentoY,
`valor5FaturamentoX` = newValor5FaturamentoX,
`valor5FaturamentoY` = newValor5FaturamentoY,
`valor6FaturamentoX` = newValor6FaturamentoX,
`valor6FaturamentoY` = newValor6FaturamentoY,
`valor7FaturamentoX` = newValor7FaturamentoX,
`valor7FaturamentoY` = newValor7FaturamentoY,
`valor8FaturamentoX` = newValor8FaturamentoX,
`valor8FaturamentoY` = newValor8FaturamentoY,
`valor9FaturamentoX` = newValor9FaturamentoX,
`valor9FaturamentoY` = newValor9FaturamentoY,
`valor10FaturamentoX` = newValor10FaturamentoX,
`valor10FaturamentoY` = newValor10FaturamentoY,
`valo11FaturamentoX` = newValo11FaturamentoX,
`valo11FaturamentoY` = newValo11FaturamentoY,
`valo12FaturamentoX` = newValo12FaturamentoX,
`valo12FaturamentoY` = newValo12FaturamentoY,
`emissaoFaturaFaturamentoX` = newEmissaoFaturaFaturamentoX,
`emissaoFaturaFaturamentoY` = newEmissaoFaturaFaturamentoY,
`codigoProdutoItensX` = newCodigoProdutoItensX,
`codigoProdutoItensY` = newCodigoProdutoItensY,
`descricaoProdutoItensX` = newDescricaoProdutoItensX,
`descricaoProdutoItensY` = newDescricaoProdutoItensY,
`tamanhoProdutoItensX` = newTamanhoProdutoItensX,
`tamanhoProdutoItensY` = newTamanhoProdutoItensY,
`stItensX` = newStItensX,
`stItensY` = newStItensY,
`classificacaoFiscalItensX` = newClassificacaoFiscalItensX,
`classificacaoFiscalItensY` = newClassificacaoFiscalItensY,
`embalagemItensX` = newEmbalagemItensX,
`embalagemItensY` = newEmbalagemItensY,
`unidadesItensX` = newUnidadesItensX,
`unidadesItensY` = newUnidadesItensY,
`quantidadeItensX` = newQuantidadeItensX,
`quantidadeItensY` = newQuantidadeItensY,
`valorUnitarioItensX` = newValorUnitarioItensX,
`valorUnitarioItensY` = newValorUnitarioItensY,
`valorTotalItensX` = newValorTotalItensX,
`valorTotalItensY` = newValorTotalItensY,
`aliquotaIcmsItensX` = newAliquotaIcmsItensX,
`aliquotaIcmsItensY` = newAliquotaIcmsItensY,
`aliquotaIpiItensX` = newAliquotaIpiItensX,
`aliquotaIpiItensY` = newAliquotaIpiItensY,
`valorIpiItensX` = newValorIpiItensX,
`valorIpiItensY` = newValorIpiItensY,
`especificacaoTecnicaItensX` = newEspecificacaoTecnicaItensX,
`especificacaoTecnicaItensY` = newEspecificacaoTecnicaItensY,
`descontoItensX` = newDescontoItensX,
`descontoItensY` = newDescontoItensY,
`valorLiquidoItensX` = newValorLiquidoItensX,
`valorLiquidoItensY` = newValorLiquidoItensY,
`referenciaFornecedorItensX` = newReferenciaFornecedorItensX,
`referenciaFornecedorItensY` = newReferenciaFornecedorItensY,
`cfopItensX` = newCfopItensX,
`cfopItensY` = newCfopItensY,
`pesoItensX` = newPesoItensX,
`pesoItensY` = newPesoItensY,
`mipItensX` = newMipItensX,
`mipItensY` = newMipItensY,
`numeroItensItens` = newNumeroItensItens,
`servicosItensX` = newServicosItensX,
`servicosItensY` = newServicosItensY,
`valorServicosItensX` = newValorServicosItensX,
`valorServicosItensY` = newValorServicosItensY,
`utilizaPulaLinhaAdicional` = auxUtilizaPulaLinhaAdicional,
`complementoItensX` = newComplementoItensX,
`complementoItensY` = newComplementoItensY,
`tituloAdicional1ItensX` = newTituloAdicional1ItensX,
`tituloAdicional1ItensY` = newTituloAdicional1ItensY,
`valorTituloAdicional1ItensX` = newValorTituloAdicional1ItensX,
`valorTituloAdicional1ItensY` = newValorTituloAdicional1ItensY,
`tituloAdicional2ItensX` = newTituloAdicional2ItensX,
`tituloAdicional2ItensY` = newTituloAdicional2ItensY,
`valorTituloAdicional2ItensX` = newValorTituloAdicional2ItensX,
`valorTituloAdicional2ItensY` = newValorTituloAdicional2ItensY,
`estadoProdutoItensX` = newEstadoProdutoItensX,
`estadoProdutoItensY` = newEstadoProdutoItensY,
`garantia1ItensX` = newGarantia1ItensX,
`garantia1ItensY` = newGarantia1ItensY,
`garantia2ItensX` = newGarantia2ItensX,
`garantia2ItensY` = newGarantia2ItensY,
`baseIcmsCalculosDiversosX` = newBaseIcmsCalculosDiversosX,
`baseIcmsCalculosDiversosY` = newBaseIcmsCalculosDiversosY,
`valorIcmsCalculosDiversosX` = newValorIcmsCalculosDiversosX,
`valorIcmsCalculosDiversosY` = newValorIcmsCalculosDiversosY,
`baseIcmsStCalculosDiversosX` = newBaseIcmsStCalculosDiversosX,
`baseIcmsStCalculosDiversosY` = newBaseIcmsStCalculosDiversosY,
`valorIcmsStCalculosDiversosX` = newValorIcmsStCalculosDiversosX,
`valorIcmsStCalculosDiversosY` = newValorIcmsStCalculosDiversosY,
`valorProdutosFinanceiroCalculosDiversosX` = newValorProdutosFinanceiroCalculosDiversosX,
`valorProdutosFinanceiroCalculosDiversosY` = newValorProdutosFinanceiroCalculosDiversosY,
`valorFreteCalculosDiversosX` = newValorFreteCalculosDiversosX,
`valorFreteCalculosDiversosY` = newValorFreteCalculosDiversosY,
`valorSeguroCalculosDiversosX` = newValorSeguroCalculosDiversosX,
`valorSeguroCalculosDiversosY` = newValorSeguroCalculosDiversosY,
`valorDespesasCalculosDiversosX` = newValorDespesasCalculosDiversosX,
`valorDespesasCalculosDiversosY` = newValorDespesasCalculosDiversosY,
`valorIpiCalculosDiversosX` = newValorIpiCalculosDiversosX,
`valorIpiCalculosDiversosY` = newValorIpiCalculosDiversosY,
`valorProdutosCabecalhoCalculosDiversosX` = newValorProdutosCabecalhoCalculosDiversosX,
`valorProdutosCabecalhoCalculosDiversosY` = newValorProdutosCabecalhoCalculosDiversosY,
`valorTotalNotaCalculosDiversosX` = newValorTotalNotaCalculosDiversosX,
`valorTotalNotaCalculosDiversosY` = newValorTotalNotaCalculosDiversosY,
`acrescimosDiversosX` = newAcrescimosDiversosX,
`acrescimosDiversosY` = newAcrescimosDiversosY,
`descontoDiversosX` = newDescontoDiversosX,
`descontoDiversosY` = newDescontoDiversosY,
`1linhaServicosDiversosX` = new1linhaServicosDiversosX,
`1linhaServicosDiversosY` = new1linhaServicosDiversosY,
`2linhaServicosDiversosX` = new2linhaServicosDiversosX,
`2linhaServicosDiversosY` = new2linhaServicosDiversosY,
`aliquotaIssDiversosX` = newAliquotaIssDiversosX,
`aliquotaIssDiversosY` = newAliquotaIssDiversosY,
`inscricaoMunicipalDiversosX` = newInscricaoMunicipalDiversosX,
`inscricaoMunicipalDiversosY` = newInscricaoMunicipalDiversosY,
`valorIssDiversosX` = newValorIssDiversosX,
`valorIssDiversosY` = newValorIssDiversosY,
`totalServicosDiversosX` = newTotalServicosDiversosX,
`totalServicosDiversosy` = newTotalServicosDiversosy,
`funruralDiversosX` = newFunruralDiversosX,
`funruralDiversosY` = newFunruralDiversosY,
`impostoRendaDiversosX` = newImpostoRendaDiversosX,
`impostoRendaDiversosY` = newImpostoRendaDiversosY,
`nomeRazaoTransportadorX` = newNomeRazaoTransportadorX,
`nomeRazaoTransportadorY` = newNomeRazaoTransportadorY,
`tipoFreteTransportadorX` = newTipoFreteTransportadorX,
`tipoFreteTransportadorY` = newTipoFreteTransportadorY,
`placaVeiculoTransportadorX` = newPlacaVeiculoTransportadorX,
`placaVeiculoTransportadorY` = newPlacaVeiculoTransportadorY,
`estadoPlacaTransportadorX` = newEstadoPlacaTransportadorX,
`estadoPlacaTransportadorY` = newEstadoPlacaTransportadorY,
`cnpjCpfTransportadorX` = newCnpjCpfTransportadorX,
`cnpjCpfTransportadorY` = newCnpjCpfTransportadorY,
`enderecoTransportadorX` = newEnderecoTransportadorX,
`enderecoTransportadorY` = newEnderecoTransportadorY,
`cidadeTransportadorX` = newCidadeTransportadorX,
`cidadeTransportadorY` = newCidadeTransportadorY,
`estadoTransportadorX` = newEstadoTransportadorX,
`estadoTransportadorY` = newEstadoTransportadorY,
`inscricaoEstadualTransportadorX` = newInscricaoEstadualTransportadorX,
`inscricaoEstadualTransportadorY` = newInscricaoEstadualTransportadorY,
`encarregadoTransferenciaTransportadorX` = newEncarregadoTransferenciaTransportadorX,
`encarregadoTransferenciaTransportadorY` = newEncarregadoTransferenciaTransportadorY,
`imprimeEncarregadosTransferencia` = auxImprimeEncarregadosTransferencia,
`quantidadeVolumesComplementosX` = newQuantidadeVolumesComplementosX,
`quantidadeVolumesComplementosY` = newQuantidadeVolumesComplementosY,
`especieComplementosX` = newEspecieComplementosX,
`especieComplementosY` = newEspecieComplementosY,
`marcaComplementosX` = newMarcaComplementosX,
`marcaComplementosY` = newMarcaComplementosY,
`numeroComplementosX` = newNumeroComplementosX,
`numeroComplementosY` = newNumeroComplementosY,
`pesoBrutoComplementosX` = newPesoBrutoComplementosX,
`pesoBrutoComplementosY` = newPesoBrutoComplementosY,
`pesoLiquidoComplementosX` = newPesoLiquidoComplementosX,
`pesoLiquidoComplementosY` = newPesoLiquidoComplementosY,
`numeroPedidoComplementosX` = newNumeroPedidoComplementosX,
`numeroPedidoComplementosY` = newNumeroPedidoComplementosY,
`seuPedidoComplementosX` = newSeuPedidoComplementosX,
`seuPedidoComplementosY` = newSeuPedidoComplementosY,
`vendedorComplementosX` = newVendedorComplementosX,
`vendedorComplementosY` = newVendedorComplementosY,
`nomeVendedorComplementosX` = newNomeVendedorComplementosX,
`nomeVendedorComplementosY` = newNomeVendedorComplementosY,
`produtorComplementosX` = newProdutorComplementosX,
`produtorComplementosY` = newProdutorComplementosY,
`quantidadeItensComplementosX` = newQuantidadeItensComplementosX,
`quantidadeItensComplementosY` = newQuantidadeItensComplementosY,
`numeroCargaComplementosX` = newNumeroCargaComplementosX,
`numeroCargaComplementosY` = newNumeroCargaComplementosY,
`1LinhaMensagemComplementosX` = new1LinhaMensagemComplementosX,
`1LinhaMensagemComplementosY` = new1LinhaMensagemComplementosY,
`2LinhaMensagemComplementosX` = new2LinhaMensagemComplementosX,
`2LinhaMensagemComplementosY` = new2LinhaMensagemComplementosY,
`3LinhaMensagemComplementosX` = new3LinhaMensagemComplementosX,
`3LinhaMensagemComplementosY` = new3LinhaMensagemComplementosY,
`4LinhaMensagemComplementosX` = new4LinhaMensagemComplementosX,
`4LinhaMensagemComplementosY` = new4LinhaMensagemComplementosY,
`5LinhaMensagemComplementosX` = new5LinhaMensagemComplementosX,
`5LinhaMensagemComplementosY` = new5LinhaMensagemComplementosY,
`1LinhaImpostosComplementosX` = new1LinhaImpostosComplementosX,
`1LinhaImpostosComplementosY` = new1LinhaImpostosComplementosY,
`2LinhaImpostosComplementosX` = new2LinhaImpostosComplementosX,
`2LinhaImpostosComplementosY` = new2LinhaImpostosComplementosY,
`3LinhaImpostosComplementosX` = new3LinhaImpostosComplementosX,
`3LinhaImpostosComplementosY` = new3LinhaImpostosComplementosY,
`numeroNotaCanhotoComplementosX` = newNumeroNotaCanhotoComplementosX,
`numeroNotaCanhotoComplementosY` = newNumeroNotaCanhotoComplementosY,
`vencimentoCanhotoComplementosX` = newVencimentoCanhotoComplementosX,
`vencimentoCanhotoComplementosY` = newVencimentoCanhotoComplementosY,
`ordemServicoComplementosX` = newOrdemServicoComplementosX,
`ordemServicoComplementosY` = newOrdemServicoComplementosY,
`nomeOperacaoComplementosX` = newNomeOperacaoComplementosX,
`nomeOperacaoComplementosY` = newNomeOperacaoComplementosY,
`reterIssComplementosX` = newReterIssComplementosX,
`reterIssComplementosY` = newReterIssComplementosY,
`numeroRotaComplementosX` = newNumeroRotaComplementosX,
`numeroRotaComplementosY` = newNumeroRotaComplementosY,
`notaOrigemComplementosX` = newNotaOrigemComplementosX,
`notaOrigemComplementosY` = newNotaOrigemComplementosY,
`1LinhaClassificacaoFiscalComplementosX` = new1LinhaClassificacaoFiscalComplementosX,
`1LinhaClassificacaoFiscalComplementosY` = new1LinhaClassificacaoFiscalComplementosY,
`2LinhaClassificacaoFiscalComplementosX` = new2LinhaClassificacaoFiscalComplementosX,
`2LinhaClassificacaoFiscalComplementosY` = new2LinhaClassificacaoFiscalComplementosY,
`3LinhaClassificacaoFiscalComplementosX` = new3LinhaClassificacaoFiscalComplementosX,
`3LinhaClassificacaoFiscalComplementosY` = new3LinhaClassificacaoFiscalComplementosY,
`4LinhaClassificacaoFiscalComplementosX` = new4LinhaClassificacaoFiscalComplementosX,
`4LinhaClassificacaoFiscalComplementosY` = new4LinhaClassificacaoFiscalComplementosY,
`5LinhaClassificacaoFiscalComplementosX` = new5LinhaClassificacaoFiscalComplementosX,
`5LinhaClassificacaoFiscalComplementosY` = new5LinhaClassificacaoFiscalComplementosY,
`6LinhaClassificacaoFiscalComplementosX` = new6LinhaClassificacaoFiscalComplementosX,
`6LinhaClassificacaoFiscalComplementosY` = new6LinhaClassificacaoFiscalComplementosY,
`informacaoComplementarComplementosX` = newInformacaoComplementarComplementosX,
`informacaoComplementarComplementosY` = newInformacaoComplementarComplementosY,
`quantidadeInformacaoComplementarComplementos` = newQuantidadeInformacaoComplementarComplementos,
`cstImpostosX` = newCstImpostosX,
`cstImpostosY` = newCstImpostosY,
`aliquotaImpostosX` = newAliquotaImpostosX,
`aliquotaImpostosY` = newAliquotaImpostosY,
`baseIcmsImpostosX` = newBaseIcmsImpostosX,
`baseIcmsImpostosY` = newBaseIcmsImpostosY,
`valorIcmsImpostosX` = newValorIcmsImpostosX,
`valorIcmsImpostosY` = newValorIcmsImpostosY,
`cfopImpostosX` = newCfopImpostosX,
`cfopImpostosY` = newCfopImpostosY,
`numeroLinhasImpostos` = newNumeroLinhasImpostos,
`nomeArquivoNotaFiscal` = newNomeArquivoNotaFiscal,
`status` = status
WHERE `idconfiguracaoNotaFiscal` = newIdconfiguracaoNotaFiscal; 
 
END $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `conector_alt_conta`
--

DROP PROCEDURE IF EXISTS `conector_alt_conta`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='' */ $$
CREATE DEFINER=`master`@`localhost` PROCEDURE `conector_alt_conta`(
         newIdConta double,
        `newnome` VARCHAR(30),
        `newidloja` INT,
        `newbanco` INT,
        `newlimite` DECIMAL(15,3),
        `newtipoConta` VARCHAR(15),
        `newtitular` VARCHAR(50),
        `newtarifaContrato` DECIMAL(15,3),
        `newtarifaCustodia` DECIMAL(15,3),
        `newtarifaDescontoCheque` DECIMAL(15,3),
        `newtaxaIOF` DECIMAL(15,3),
        `newcedente` VARCHAR(20),
        `newtarifaCobranca` DECIMAL(15,3),
        `newdiasCredito` INT,
        `newpermitiConciliarManual` CHAR(1),
        `newespecieDoc` VARCHAR(40),
        `newconvenio` INT(11),
        `newinativo` smallint(6),
        `newtipoCobranca` CHAR(1),
        `newcodigoTipoConta` INT,
        `newcodDiasProtesto` INT ,
        `newqttyDiasProtesto` INT,
        `newnumeroCheque` VARCHAR(6),
        `newdataFechamento` DATE,
        `newconta` VARCHAR(10),
        `newcarteira` INT,
        `newcidade` VARCHAR(30),
        `newbalanco` VARCHAR(1),
        `newcompensacao` VARCHAR(3),
        `newmulta` decimal(15,3),
        `newagencia` VARCHAR(7),
         newtitleCarteiraBank varchar(15),
         newmessagemCobranca blob)
begin
  update conta set  
        `nome`=`newnome`,
        `idloja`=`newidloja`,
        `banco`=`newbanco`,
        `limite`=`newlimite`,
        `tipoConta`=`newtipoConta`,
        `titular`=`newtitular`,
        `tarifaContrato`=`newtarifaContrato`,
        `tarifaCustodia`=`newtarifaCustodia`,
        `tarifaDescontoCheque`=`newtarifaDescontoCheque`,
        `taxaIOF`=`newtaxaIOF`,
        `cedente`=`newcedente`,
        `tarifaCobranca`=`newtarifaCobranca`,
        `diasCredito`=`newdiasCredito`,
        `permitiConciliarManual`=`newpermitiConciliarManual`,
        `especieDoc`=`newespecieDoc`,
        `convenio`=`newconvenio`,
        `inativo`=`newinativo`,
        `tipoCobranca`=`newtipoCobranca`,
        agencia=newagencia,
        titleCarteiraBank = newtitleCarteiraBank,
        `codigoTipoConta`=`newcodigoTipoConta`,
        `codDiasProtesto`=`newcodDiasProtesto`,
        `qttyDiasProtesto`=`newqttyDiasProtesto`,
        `numeroCheque`=`newnumeroCheque`,
        `dataFechamento`=`newdataFechamento`,
        `conta`=`newconta`,
        `carteira`=`newcarteira`,
        `cidade`=`newcidade`,
        `balanco`=`newbalanco`,
        `compensacao`=`newcompensacao`,
        `multa`=`newmulta`,
         messagemCobranca=newmessagemCobranca
                                    where
                            idConta = newIdConta;
  end $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `conector_alt_contaCorrente`
--

DROP PROCEDURE IF EXISTS `conector_alt_contaCorrente`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='' */ $$
CREATE DEFINER=`root`@`localhost` PROCEDURE `conector_alt_contaCorrente`(
   newIdContaCorrente double,
  `newidloja` INT(11),
  `newcodigo` DOUBLE,
  `newhistorico` VARCHAR(100),
  `newtipo` VARCHAR(1),
  `newvencimento` DATE,
  `newcodigoHistorico` SMALLINT,
  `newvalor` DECIMAL(15,3),
  `newlancamento` VARCHAR(10),
   newusuarioAlt int)
begin
      update `conector`.`contacorrente`
			set

			  `idloja`=`newidloja`,
			  `codigo`=`newcodigo`,
			  `historico`=`newhistorico`,
			  `tipo`=`newtipo`,
			  `vencimento`=`newvencimento`,
			  `codigoHistorico`=`newcodigoHistorico`,
			  `valor`=`newvalor`,
			  `lancamento`=`newlancamento`,
			   usuarioAlt = usuarioAlt
					where
					   IdContaCorrente=newIdContaCorrente;
end $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `conector_alt_contasReceber`
--

DROP PROCEDURE IF EXISTS `conector_alt_contasReceber`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='' */ $$
CREATE DEFINER=`master`@`localhost` PROCEDURE `conector_alt_contasReceber`(
                in `newId` double,
                in `newfatura` VARCHAR(20),
                in `newidloja` INT,
                in `newvencimento` DATE,
                in `newfinalizadora` INT(11),
                in `newvalorPago` DECIMAL(15,3),
                in `newobservacao` VARCHAR(50),
                in `newtipoMovimentacao` VARCHAR(1),
                in `newconta` DOUBLE,
                in `newbanco` INT,
                in `newflagAlteracao` DATE,
                in `newcarteira` INt,
                in `newnossoNumero` VARCHAR(20),
                in `newhistoricoBaixa` VARCHAR(50),
                in `newtarifa` DECIMAL(15,3),
                in `newtipoBaixa` VARCHAR(2),
                in `newcaixa` DOUBLE,
                in `newabatimentos` DECIMAL(15,3),
                in `newdescontos` DECIMAL(15,3),
                in `newacrescimos` DECIMAL(15,3),
                in `newvencimentoCobranca` date,
                in newusuarioBaixa int(11),
                in newconfirmadas char(1),
                in `newvalor` DECIMAL(15,3))
begin
  update contasReceber
                set
                 `fatura`=`newfatura` ,
                 `idloja`=`newidloja`,
                 `vencimento`=`newvencimento`,
                 `finalizadora`=`newfinalizadora`,
                 `valorPago`=`newvalorPago`,
                 `observacao`=`newobservacao`,
                 `tipoMovimentacao`=`newtipoMovimentacao`,
                 `conta`=`newconta`,
                 `banco`=`newbanco`,
                 `flagAlteracao`=`newflagAlteracao`,
                 `carteira`=`newcarteira`,
                 `nossoNumero`=`newnossoNumero`,                 
                 `historicoBaixa`=`newhistoricoBaixa`,                 
                 `tarifa`=`newtarifa`,
                 `tipoBaixa`=`newtipoBaixa`,
                 `caixa`=`newcaixa`,
                 `abatimentos`=`newabatimentos`,
                 `descontos`=`newdescontos`,
                 `acrescimos`=`newacrescimos`,
                 `vencimentoCobranca`=`newvencimentoCobranca`,
                  usuarioBaixa=newusuarioBaixa,
                  confirmadas=newconfirmadas,
                 `valor`=`newvalor`
                            where
                                    idContasReceber=newId;
  end $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `conector_alt_contrato`
--

DROP PROCEDURE IF EXISTS `conector_alt_contrato`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='' */ $$
CREATE DEFINER=`master`@`localhost` PROCEDURE `conector_alt_contrato`(
  `newidCrediario` double,
  `newidloja` INT,
  `newidmetodo` INT,
  `newidcliente` INT ,
  `newidfuncionario` int,
  `newvalueEntry` DECIMAL(15,3),
  `newtotal` DECIMAL(15,3),
  `newencargos` DECIMAL(15,3),
  `newstatus` CHAR(1),
  `newobservacao` CHAR(100),
  `newentrada` smallint(6),
  `newtac` DECIMAL(15,3),
  `newcet` DECIMAL(15,3) ,
  `newtaxa` DECIMAL(15,3),
  `newparcelamento` int,
  `newUsuarioAlt` int)
begin
            update crediario	set

                                    `idmetodo`=`newidmetodo`,
                                    `idcliente`=`newidcliente`,
                                    `idfuncionario`=`newidfuncionario`,
                                    `valueEntry`=newvalueEntry,
                                    `total`=`newtotal`,
                                    `encargos`=`newencargos`,
                                    `status`=`newstatus`,
                                    `observacao`=`newobservacao`,
                                    `entrada`=`newentrada`,
                                    `tac`=`newtac`,
                                    `cet`=`newcet`,
                                    `taxa`=`newtaxa`,
                                    `parcelamento`=`newparcelamento`,
                                    `idUsuarioLastAlt`=`newUsuarioAlt`
							where
								`idloja`=`newidloja` and idCrediario=newidCrediario;
  end $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `conector_alt_convenio`
--

DROP PROCEDURE IF EXISTS `conector_alt_convenio`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='' */ $$
CREATE DEFINER=`master`@`localhost` PROCEDURE `conector_alt_convenio`(
  in newIdConvenio integer,
  in `newrazao` VARCHAR(45) ,
  in `newabreviatura` VARCHAR(30) ,
  in `newcnpj` VARCHAR(14) ,
  in `newie` VARCHAR(30) ,
  in `newlimite` DECIMAL(15,3)  ,
  in `newdiaEncerramento` INT(11) ,
  in `newdiasUteisEncerramento` smallint(6),
  in `newdiaRecebimento` INT(11)  ,
  in `newdiasUteisRecebimento` smallint(6),
  in `newporcetagemEstouro` DECIMAL(5,3)  ,
  in `newtypePrazo` VARCHAR(1) ,
  in `newbloqueado` VARCHAR(1) ,
  in `newtaxaLivre` smallint(6),
  in `newdias` INT(11),
  in `newpreFixado` smallint(6)  ,
  in `newidspedMunicipio` INT(10),
  in `newidcepbairro` INT(11)  ,
  in `newcep` INT(11)  ,
  in `newaddressLogradouro` VARCHAR(30),
  in `newaddressBairro` VARCHAR(30),
  in `newaddressCity` VARCHAR(30),
  in `newaddressComplemento` VARCHAR(45),
  in `newaddressNumber` INT(11),
  in newUf varchar(2),
  in `newstatus` smallint(6)
  )
begin
update convenio
	set
	    `razao`=`newrazao`,
	    `abreviatura`=`newabreviatura`,
	    `cnpj`=`newcnpj`,
	    `ie`=`newie`,
	    `limite`=`newlimite`,
	    `diaEncerramento`=`newdiaEncerramento`,
	    `diaRecebimento`=`newdiaRecebimento`,
	    `porcetagemEstouro`=`newporcetagemEstouro`,
	    `typePrazo`=`newtypePrazo`,
	    `bloqueado`=`newbloqueado`,
	    `taxaLivre`=`newtaxaLivre`,
	    `dias`=`newdias`,
	    `preFixado`=`newpreFixado`,
	    `idspedMunicipio`=`newidspedMunicipio`,
	    `idcepbairro`=`newidcepbairro`,
	    `cep`=`newcep`,
	    `addressLogradouro`=`newaddressLogradouro`,
	    `addressBairro`=`newaddressBairro`,
	    `addressCity`=`newaddressCity`,
	   `addressComplemento`=`newaddressComplemento`,
	   `addressNumber`=`newaddressNumber`,
     `diasUteisEncerramento`=`newdiasUteisEncerramento`,
     `diasUteisRecebimento`=`newdiasUteisRecebimento`,
      uf=newUf,
	   `status`=`newstatus`
	Where
	    newIdConvenio=idConvenio;
end $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `conector_alt_convenioMovimento`
--

DROP PROCEDURE IF EXISTS `conector_alt_convenioMovimento`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='' */ $$
CREATE DEFINER=`master`@`localhost` PROCEDURE `conector_alt_convenioMovimento`(
  `newidMovimento` double,
  `newidcliente` INT,
  `newidloja` INT,
  `newempresa` INT,
  `newvencimento` DATE,
  `newvalor` DECIMAL(15,3),
  `newprazo` INT,
  `newcupom` DOUBLE,
  `newidfuncionario` Int,
  `newterminal` INT,
  `newdesconto` DECIMAL(15,3),
  `newjuros` DECIMAL(15,3),
  `newobservacao` VARCHAR(100),
  `newflagAlteracao` DATE)
begin

  
  update  convenioMovimento
                            set
                                  `idcliente`=`newidcliente`,
                                  `idloja`=`newidloja`,
                                  `empresa`=`newempresa`,
                                  `vencimento`=`newvencimento`,
                                  `valor`=`newvalor`,
                                  `prazo`=`newprazo`,
                                  `cupom`=`newcupom`,
                                  `idfuncionario`=`newidfuncionario`,
                                  `terminal`=`newterminal`,
                                  `desconto`=`newdesconto`,
                                  `juros`=`newjuros`,
                                  `observacao`=`newobservacao`,
                                   `flagAlteracao`=`newflagAlteracao`
                                        where
                                             `idMovimento`=`newidMovimento`;
  end $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `conector_alt_discount`
--

DROP PROCEDURE IF EXISTS `conector_alt_discount`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='' */ $$
CREATE DEFINER=`master`@`localhost` PROCEDURE `conector_alt_discount`(
                                            in chave integer,
                                            in store integer,
                                            in valueDiscount numeric(15,3),
                                            in pessoa integer,
                                            in tipo char(1)
                                        )
begin

  declare pedido double;
  declare transformacao numeric(15,3);
  declare liquido numeric(15,3);
  declare custo numeric(15,3);
  declare max_discount numeric(15,3);
  declare valuePerson numeric(15,3);
  declare contador int;
  declare i int;

   set  i = 1;

   set  contador = (select max(sequencial) from pedidoItens tab where tab.idPedido = chave and tab.idLoja = store and tab.promocional='N');

while (i <= contador) do



select
        tab.idPedido,
        round(sum(tab.quantidade* tab.price),2) as Total_Bruto,
        round(sum(tab.quantidade* tab1.custoLiquido),2) as Total_Custo,
        (round((1-(sum(tab.quantidade* tab1.custoLiquido)/
                sum(tab.quantidade* tab.priceLiquido))),2)*100) Representacao_Desconto
  from
      pedidoItens tab
              inner join produtoPrice tab1 on(tab.idProduto = tab1.idProduto)
   where
       tab.idPedido = chave and tab.idLoja = store and tab1.idLoja = store and tab.promocional='N' group by idPedido into pedido, liquido, custo, max_discount;

select
        discount
        from
            conector.funcao
            where especifica=1 and idFuncao=pessoa into valuePerson;

case tipo
  when 'v' then

    set transformacao = ((valueDiscount/liquido)*100);
insert into bof(texto)values(transformacao);
    if((transformacao <= max_discount)||(pessoa = 5))then

        if((transformacao <= valuePerson)||(pessoa = 5)) then

            update pedidoItens tab set priceLiquido = (round((quantidade*price),3) - round((((quantidade*price)*transformacao)/100),3)),
                       valorDiscount = round((((quantidade*price)*transformacao)/100),3),
                       priceFull = (round((quantidade*price),3) - round((((quantidade*price)*transformacao)/100),3))
                                                                        where  tab.idPedido = chave and tab.idLoja = store and tab.sequencial = i and tab.promocional='N';
    end if;
  end if;

  when 'p' then

    if((valueDiscount <= max_discount)||(pessoa = 5))then

        if((valueDiscount <= valuePerson)||(pessoa = 5)) then

            update pedidoItens tab set priceLiquido = (round((quantidade*price),3) - round((((quantidade*price)*valueDiscount)/100),3)),
                       valorDiscount = round((((quantidade*price)*valueDiscount)/100),3),
                       priceFull = (round((quantidade*price),3) - round((((quantidade*price)*valueDiscount)/100),3))
                                                                        where  tab.idPedido = chave and tab.idLoja = store and tab.sequencial = i and tab.promocional='N';

      end if;
    end if;
  end case;

    set i = i + 1;

END WHILE;
end $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `conector_alt_ean`
--

DROP PROCEDURE IF EXISTS `conector_alt_ean`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='' */ $$
CREATE DEFINER=`master`@`localhost` PROCEDURE `conector_alt_ean`(
                                                in newIdProduto integer,
                                                in newBarra double,
                                                in oldBarra double,
                                                in newIdUnidadeMedida integer,
                                                in newquantidade numeric(15,3),
                                                in newDefaultVenda char(1),
                                                in newDefaultCompra char(1),
                                                in newDefaultTransferencia char(1),
                                                in newStatus boolean,
                                                in newTypeEan char(1)
				 )
begin

  set @OldVenda = (select defaultVenda from produtoEmbalagem where barra=OldBarra and  idProduto=newIdProduto);
  set @OldCompra = (select defaultCompra from produtoEmbalagem where barra=OldBarra and  idProduto=newIdProduto);
  set @OldTransferencia = (select defaultTransferencia from produtoEmbalagem where barra=OldBarra and  idProduto=newIdProduto);
  set @OldChave = (select idprodutoEmbalagem from produtoEmbalagem where idProduto=newIdProduto and barra=oldBarra);
SET foreign_key_checks=0;
update
	produtoEmbalagem
set
      	barra = newBarra,
        quantidade = newQuantidade,
      	typeEan = newTypeEan,
      	defaultVenda = newDefaultVenda,
      	defaultCompra = newDefaultCompra,
      	defaultTransferencia = newDefaultTransferencia,
      	status = newStatus,
      	idunidadeMedida = newIdUnidadeMedida
where
	idProduto=newIdProduto and barra=oldBarra;
SET foreign_key_checks=1;


if ((newDefaultVenda = 's')&&(newDefaultVenda <> @OldVenda)) then
        update produtoEmbalagem set defaultVenda="n" where idProduto=newIdProduto and idprodutoEmbalagem <> @OldChave;
    end if;
if ((newDefaultCompra = 's')&&(newDefaultCompra <> @OldCompra)) then
        update produtoEmbalagem set defaultCompra="n" where idProduto=newIdProduto and idprodutoEmbalagem <> @OldChave;
    end if;
if ((newDefaultTransferencia = 's')&&(newDefaultTransferencia <> @OldTransferencia)) then
        update produtoEmbalagem set defaultTransferencia="n" where idProduto=newIdProduto and idprodutoEmbalagem <> @OldChave;
    end if;
    update produto set dataAlteracao=now() where idProduto=newIdProduto;


end $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `conector_alt_ean_insert`
--

DROP PROCEDURE IF EXISTS `conector_alt_ean_insert`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='STRICT_TRANS_TABLES,STRICT_ALL_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,TRADITIONAL,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION' */ $$
CREATE DEFINER=`master`@`localhost` PROCEDURE `conector_alt_ean_insert`(
						in defaultEanV char(1),
						in defaultEanC char(1),
						in defaultEanT char(1),
						in newIdProduto integer,
						in newIdProdutoEan double
					)
begin

if (defaultEanV = 's') then
        update produtoEmbalagem set defaultVenda="n" where idProduto=newIdProduto and idprodutoEmbalagem <> newIdProdutoEan;
    end if;
if (defaultEanC = 's') then
        update produtoEmbalagem set defaultCompra="n" where idProduto=newIdProduto and idprodutoEmbalagem <> newIdProdutoEan;
    end if;
if (defaultEanT = 's') then
        update produtoEmbalagem set defaultTransferencia="n" where idProduto=newIdProduto and idprodutoEmbalagem <> newIdProdutoEan;
    end if;
    update produto set dataAlteracao=now() where idProduto=newIdProduto;
end $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `conector_alt_email`
--

DROP PROCEDURE IF EXISTS `conector_alt_email`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='' */ $$
CREATE DEFINER=`master`@`localhost` PROCEDURE `conector_alt_email`(
   `newidemail` int(11),
  `newidcliente` int(11),
  `newmail` varchar(70),
  `newpadrao` smallint(6))
begin
    update `conector`.`email` set
    `mail`=`newmail`,
    `padrao`=`newpadrao` where `idemail`=`newidemail` and
    `idcliente`=`newidcliente`;

end $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `conector_alt_endereco`
--

DROP PROCEDURE IF EXISTS `conector_alt_endereco`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='' */ $$
CREATE DEFINER=`master`@`localhost` PROCEDURE `conector_alt_endereco`(
                                            in alt_idendereco integer,
                                            in alt_idcliente integer,
                                            in alt_cep integer,
                                            in alt_idcepbairro integer,
                                            in alt_idenderecoType integer,
                                            in alt_bairro varchar(45),
                                            in alt_logradouro varchar(45),
                                            in alt_complemento varchar(60),
                                            in alt_municipio varchar(45),
                                            in alt_estado char(2),
                                            in alt_numero integer,
                                            in alt_seq integer,
                                            in newDefault int
                                      )
begin
    update
            endereco
    set
            cep=alt_cep,
            idcepbairro=alt_idcepbairro,
            idenderecoType=alt_idenderecoType,
            bairro=alt_bairro,
            logradouro=alt_logradouro,
            complemento=alt_complemento,
            municipio=alt_municipio,
            estado=alt_estado,
            numero=alt_numero
    where
            idendereco=alt_idendereco  and idcliente=alt_idcliente and
            sequencia=alt_seq;

           if(alt_idenderecoType = 4 and newDefault = 1)then 
                call conector_alt_entregaStatus(alt_idcliente,alt_idendereco);
           end if;

end $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `conector_alt_entradaConhecimento`
--

DROP PROCEDURE IF EXISTS `conector_alt_entradaConhecimento`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='' */ $$
CREATE DEFINER=`master`@`localhost` PROCEDURE `conector_alt_entradaConhecimento`(
   newidentradaConhecimento DOUBLE,
  `newchaveEntrada` DOUBLE,
  `newnr_nota_fiscal` VARCHAR(10),
  `newserie` VARCHAR(3),
  `newcpf_cnpj` VARCHAR(20),
   newvalor decimal(15,3)
)
begin
                update entradaConhecimento 
                                        set
                                         `nr_nota_fiscal`=`newnr_nota_fiscal`,
                                         `serie`=`newserie`,
                                         `cpf_cnpj`=`newcpf_cnpj`,
                                          valor=newvalor
                                                where
                                                    chaveEntrada=`newchaveEntrada` and
                                                    identradaConhecimento = newidentradaConhecimento;
  end $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `conector_alt_entradaFinanceiro`
--

DROP PROCEDURE IF EXISTS `conector_alt_entradaFinanceiro`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='' */ $$
CREATE DEFINER=`master`@`localhost` PROCEDURE `conector_alt_entradaFinanceiro`(
in `newidentradaFinanceiro` double,
in   `newidentrada` DOUBLE,
in   `newidfinalizadora` INT(11),
in   `newdocumento` VARCHAR(20),
in   `newprazo` INT(11),
in   `newvencimento` DATE,
in   `newcompetencia` DATE,
in   `newemissaoDocumento` DATE,
in   `newdesconto` DECIMAL(15,3),
in   `newfinanceiro` DECIMAL(15,3),
in   `newvalor` DECIMAL(15,3) ,
in   `newparcela` VARCHAR(5) ,
in   `newidbanco` INt,
in   `newnossoNumero` VARCHAR(20) ,
in   `newcedente` VARCHAR(20), in newformaPgto varchar(2) )
begin

    if(newidbanco is null)then
        select newidbanco="0";
    end if;
    
   update entradaFinanceiro
	set
   `idfinalizadora`=`newidfinalizadora`,
   `documento`=`newdocumento`,
   `prazo`=`newprazo`,
   `vencimento`=`newvencimento`,
   `competencia`=`newcompetencia`,
   `emissaoDocumento`=`newemissaoDocumento`,
   `desconto`=`newdesconto`,
   `financeiro`=`newfinanceiro`,
   `valor`=`newvalor`,
   `parcela`=`newparcela`,
   `idbanco`=`newidbanco`,
   `nossoNumero`=`newnossoNumero`, formaPgto = newformaPgto, cedente=newcedente
   where `identrada`=`newidentrada` and `identradaFinanceiro`=`newidentradaFinanceiro` ;
   
   select sum(valor) from entradaFinanceiro where `identrada`=`newidentrada` into @total;
   
   select  @total;
  end $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `conector_alt_entradaImp`
--

DROP PROCEDURE IF EXISTS `conector_alt_entradaImp`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='' */ $$
CREATE DEFINER=`master`@`localhost` PROCEDURE `conector_alt_entradaImp`(
  in `newNFimPidentradaImp` DOUBLE,
  in `newNFimPidentrada` DOUBLE,
  in `newNFimPcfop` VARCHAR(6),
  in `newNFimPcst` CHAR(3),
  in `newNFimPaliquota` DECIMAL(15,3),
  in `newNFimPreducao` DECIMAL(15,3) ,
  in `newNFimPvalorApurado` DECIMAL(15,3) ,
  in `newNFimPvalorInformado` DECIMAL(15,3) ,
  in `newNFimPimpostoApurado` DECIMAL(15,3) ,
  in `newNFimPimpostoInformado` DECIMAL(15,3) ,
  in `newNFimPbaseIsentoApurado` DECIMAL(15,3) ,
  in `newNFimPbaseIsentoInformado` DECIMAL(15,3) ,
  in `newNFimPbaseIpiApurado` DECIMAL(15,3) ,
  in `newNFimPvalorIpiApurado` DECIMAL(15,3) ,
  in `newNFimPtipo` VARCHAR(1) )
begin
update  entradaImp
set
      `cfop`=`newNFimPcfop`,
      `cst`=`newNFimPcst`,
      `aliquota`=`newNFimPaliquota`,
      `reducao`=`newNFimPreducao`,
      `valorApurado`=`newNFimPvalorApurado`,
      `valorInformado`=`newNFimPvalorInformado`,
      `impostoApurado`=`newNFimPimpostoApurado`,
      `impostoInformado`=`newNFimPimpostoInformado`,
      `baseIsentoApurado`=`newNFimPbaseIsentoApurado`,
      `baseIsentoInformado`=`newNFimPbaseIsentoInformado`,
      `baseIpiApurado`=`newNFimPbaseIpiApurado`,
      `valorIpiApurado`=`newNFimPvalorIpiApurado`,
      `tipo`=`newNFimPtipo` 
where 
      `identradaImp`=`newNFimPidentradaImp` and 
      `identrada`=`newNFimPidentrada`;
end $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `conector_alt_entradaItem`
--

DROP PROCEDURE IF EXISTS `conector_alt_entradaItem`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='' */ $$
CREATE DEFINER=`master`@`localhost` PROCEDURE `conector_alt_entradaItem`(
                   in  `newEntItemidentradaItem` DOUBLE,
                   in  `newEntItemidentrada` DOUBLE,
                   in  `newEntItemidProduto` INT,
                   in  `newEntItemcustoLiquido` DECIMAL(15,3),
                   in  `newEntItemcustoBruto` DECIMAL(15,3),
                   in  `newEntItemcustoNota` DECIMAL(15,3),
                   in  `newEntItemcustoNotaTotal` DECIMAL(15,3),
                   in  `newEntItemcustoReposicao` DECIMAL(15,3),
                   in  `newEntItemcustoTotal` DECIMAL(15,3),
                   in  `newEntItemdiscount1` DECIMAL(15,3),
                   in  `newEntItemdiscount2` DECIMAL(15,3),
                   in  `newEntItemdiscount3` DECIMAL(15,3),
                   in  `newEntItemdiscountValue` DECIMAL(15,3),
                   in  `newEntItemacrescimo` DECIMAL(15,3),
                   in  `newEntItembonificacao` DECIMAL(15,3),
                   in  `newEntItemdespesasNaoTributadas` DECIMAL(15,3),
                   in  `newEntItemdespesasTributadas` DECIMAL(15,3),
                   in  `newEntItemchaveEmbalagem` INT,
                   in  `newEntItembarra` DOUBLE,
                   in  `newEntItemidunidadeMedida` INT(11) ,
                   in  `newEntItementregue` VARCHAR(1),
                   in  `newEntItemfinanceiro` DECIMAL(15,3),
                   in  `newEntItemfrete` DECIMAL(15,3),
                   in  `newEntItemicmsEntrada` DECIMAL(15,3),
                   in  `newEntItemreducaoEntrada` DECIMAL(15,3),
                   in  `newEntItemicmsFrete` DECIMAL(15,3),
                   in  `newEntItemicmsSaida` DECIMAL(15,3),
                   in  `newEntItemreducaoSaida` DECIMAL(15,3),
                   in  `newEntItemipi` DECIMAL(15,3),
                   in  `newEntItempriceVenda` DECIMAL(15,3),
                   in  `newEntItemquantidade` DECIMAL(15,3),
                   in  `newEntItemsugestao` DECIMAL(15,3),
                   in  `newEntItemvalorIpi` DECIMAL(15,3),
                   in  `newEntItemsubstituicao` DECIMAL(15,3),
                   in  `newEntItemlucro` DECIMAL(15,3),
                   in  `newEntItemlucroValor` DECIMAL(15,3),
                   in  `newEntItemlucroBruto` DECIMAL(15,3),
                   in  `newEntItemquantidadeRecebida` DECIMAL(15,3),
                   in  `newEntItemquantidadePendente` DECIMAL(15,3),
                   in  `newEntItemcreditoIcms` DECIMAL(15,3),
                   in  `newEntItemcreditoPis` DECIMAL(15,3),
                   in  `newEntItemcreditoCofins` DECIMAL(15,3),
                   in  `newEntItemvalorFinanceiro` DECIMAL(15,3),
                   in  `newEntItemvalorFrete` DECIMAL(15,3),
                   in  `newEntItemsumFrete` smallint(6),
                   in  `newEntItemnumeroNota` VARCHAR(10),
                   in  `newEntItemserie` VARCHAR(3),
                   in  `newEntItemdiferencaQtty` DECIMAL(15,3),
                   in  `newEntItemdiferencaCustoLiqNota` DECIMAL(15,3),
                   in  `newEntItemdiferencaCustoTotalNota` DECIMAL(15,3),
                   in  `newEntItemdateInsert` date,
                   in  `newEntItemmargem` DECIMAL(15,3),
                   in  `newEntItemsumSt` smallint(6),
                   in  `newEntItemcstIpi` INT,
                   in  `newEntItemcstPis` INT,
                   in  `newEntItemcstCofins` INT,
                   in  `newEntItemcstIcms` CHAR(3),
                   in  `newEntItemicmsCreditoSt` DECIMAL(15,3),
                   in  `newEntItemicmsTotalSt` DECIMAL(15,3),
                   in  `newEntItemcfop` VARCHAR(6),
                   in  `newEntItemcteInterna` DECIMAL(15,3),
                   in  `newEntItemcteInterestadual` DECIMAL(15,3),
                   in  `newEntItemvalorIcmsSubstituicao` DECIMAL(15,3),
                   in  `newEntItembaseCalculoSubstituicao` DECIMAL(15,3),
                   in  `newEntItembasePis` DECIMAL(15,3),
                   in  `newEntItembaseCofins` DECIMAL(15,3),
                   in  `newEntItemvalorPis` DECIMAL(15,3),
                   in  `newEntItemvalorCofins` DECIMAL(15,3),
                   in  `newEntItemvalorIpiTotal` DECIMAL(15,3),
                   in  `newEntItembaseIcms` DECIMAL(15,3),
                   in  `newEntItembonificacaoValor` DECIMAL(15,3),
                   in  `newEntItemvalidade` CHAR(8),
                   in  `newEntItemflagRecebe` smallint(6),
                   IN   newEntItemtypeAliquota CHAR(1),
                   in   newEntItemVendo numeric(15,3),
                   in   newEntItemChaveItemCompra double,
                   in   newnovoPrecoVenda numeric(15,3))
begin





update entradaItem
			set
                         `custoLiquido`=`newEntItemcustoLiquido`,
                         `custoBruto`=`newEntItemcustoBruto`,
                         `custoNota`=`newEntItemcustoNota`,
                         `custoNotaTotal`=`newEntItemcustoNotaTotal`,
                         `custoReposicao`=`newEntItemcustoReposicao`,
                         `custoTotal`=`newEntItemcustoTotal`,
                         `discount1`=`newEntItemdiscount1`,
                         `discount2`=`newEntItemdiscount2`,
                         `discount3`=`newEntItemdiscount3`,
                         `discountValue`=`newEntItemdiscountValue`,
                         `acrescimo`=`newEntItemacrescimo`,
                         `bonificacao`=`newEntItembonificacao`,
                         `despesasNaoTributadas`=`newEntItemdespesasNaoTributadas`,
                         `despesasTributadas`=`newEntItemdespesasTributadas`,
                         `chaveEmbalagem`=`newEntItemchaveEmbalagem`,
                         `barra`=`newEntItembarra`,
                         `idunidadeMedida`=`newEntItemidunidadeMedida`,
                         `entregue`=`newEntItementregue`,
                         `financeiro`=`newEntItemfinanceiro`,
                         `frete`=`newEntItemfrete`,
                         `icmsEntrada`=`newEntItemicmsEntrada`,
                         `reducaoEntrada`=`newEntItemreducaoEntrada`,
                         `icmsFrete`=`newEntItemicmsFrete`,
                         `icmsSaida`=`newEntItemicmsSaida`,
                         `reducaoSaida`=`newEntItemreducaoSaida`,
                         `ipi`=`newEntItemipi`,
                         `priceVenda`=`newEntItempriceVenda`,
                         `quantidade`=`newEntItemquantidade`,
                         `sugestao`=`newEntItemsugestao`,
                         `valorIpi`=`newEntItemvalorIpi`,
                         `substituicao`=`newEntItemsubstituicao`,
                         `lucro`=`newEntItemlucro`,
                         `lucroValor`=`newEntItemlucroValor`,
                         `lucroBruto`=`newEntItemlucroBruto`,
                         `quantidadeRecebida`=`newEntItemquantidadeRecebida`,
                         `quantidadePendente`=`newEntItemquantidadePendente`,
                         `creditoIcms`=`newEntItemcreditoIcms`,
                         `creditoPis`=`newEntItemcreditoPis`,
                         `creditoCofins`=`newEntItemcreditoCofins`,
                         `valorFinanceiro`=`newEntItemvalorFinanceiro`,
                         `valorFrete`=`newEntItemvalorFrete`,
                         `sumFrete`=`newEntItemsumFrete`,
                         `numeroNota`=`newEntItemnumeroNota`,
                         `serie`=`newEntItemserie`,
                         `diferencaQtty`=`newEntItemdiferencaQtty`,
                         `diferencaCustoLiqNota`=`newEntItemdiferencaCustoLiqNota`,
                         `diferencaCustoTotalNota`=`newEntItemdiferencaCustoTotalNota`,
                         `dateInsert`=`newEntItemdateInsert`,
                         `margem`=`newEntItemmargem`,
                         `sumSt`=`newEntItemsumSt`,
                         `cstIpi`=`newEntItemcstIpi`,
                         `cstPis`=`newEntItemcstPis`,
                         `cstCofins`=`newEntItemcstCofins`,
                         `cstIcms`=`newEntItemcstIcms`,
                         `icmsCreditoSt`=`newEntItemicmsCreditoSt`,
                         `icmsTotalSt`=`newEntItemicmsTotalSt`,
                         `cfop`=`newEntItemcfop`,




                         `cteInterna`=`newEntItemcteInterna`,
                         `cteInterestadual`=`newEntItemcteInterestadual`,
                         `valorIcmsSubstituicao`=`newEntItemvalorIcmsSubstituicao`,
                         `baseCalculoSubstituicao`=`newEntItembaseCalculoSubstituicao`,
                         `basePis`=`newEntItembasePis`,
                         `baseCofins`=`newEntItembaseCofins`,
                         `valorPis`=`newEntItemvalorPis`,
                         `valorCofins`=`newEntItemvalorCofins`,
                         `valorIpiTotal`=`newEntItemvalorIpiTotal`,
                         `baseIcms`=`newEntItembaseIcms`,
                         `bonificacaoValor`=`newEntItembonificacaoValor`,
                         `validade`=`newEntItemvalidade`,
                         `flagRecebe`=`newEntItemflagRecebe`,
			                    typeAliquota=newEntItemtypeAliquota,
                          vendo=newEntItemVendo,
                          chaveItemCompra=newEntItemChaveItemCompra,
                          novoPrecoVenda=newnovoPrecoVenda

	where
			 `identradaItem`=`newEntItemidentradaItem` and
                         `identrada`=`newEntItemidentrada` and
                         `idProduto`=`newEntItemidProduto`;
end $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `conector_alt_entregaStatus`
--

DROP PROCEDURE IF EXISTS `conector_alt_entregaStatus`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='' */ $$
CREATE DEFINER=`master`@`localhost` PROCEDURE `conector_alt_entregaStatus`(in cliente int, in endereco int)
begin
update clienteEntrega tab, endereco
                                 set default1=1
                                                where tab.idEndereco = endereco.idEndereco and
                                                      tab.idCliente=cliente and
                                                      endereco.idEndereco = endereco;
update clienteEntrega tab, endereco
                                 set default1=0
                                                where tab.idEndereco = endereco.idEndereco and
                                                      tab.idCliente=cliente and
                                                      endereco.idEndereco != endereco;
end $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `conector_alt_escolaridade`
--

DROP PROCEDURE IF EXISTS `conector_alt_escolaridade`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='' */ $$
CREATE DEFINER=`master`@`localhost` PROCEDURE `conector_alt_escolaridade`(
                                            in newId integer,
                                            in newDescricao varchar(45),
                                            in newStatus boolean
                                          )
begin
update escolaridade 
set    descricao=newDescricao,
       status = newStatus
       where idEscolaridade=newId;
end $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `conector_alt_fechamentoCaixa`
--

DROP PROCEDURE IF EXISTS `conector_alt_fechamentoCaixa`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='' */ $$
CREATE DEFINER=`master`@`localhost` PROCEDURE `conector_alt_fechamentoCaixa`(
        newdataMovimento DATE,
        newloja INT,
        newterminal INT,
        newfuncionario INT,
        newdataHoraSaida DATETIME,
        newgrandeTotalEnd DECIMAL(15,2),
        newcontadorFinal INT,
        newcancelado DECIMAL(15,2),
        newdesconto DECIMAL(15,2),
        newnumeroCupom DOUBLE,
        newcontadorReducao INT, newcontadorCancelados int,
        newcontadorNaoFiscal int,
        newtotalNotaFiscal decimal(15,2),
        newtotalSangrias decimal(15,2)
                                                )
begin

    declare newsequencia integer;
    declare numberClient double;

    select count(*) from cupom_cabecalho where operador=newfuncionario and dataVenda=newdataMovimento and terminal=newterminal and loja=newloja into numberClient;

    set newsequencia = (select max(ifnull(sequencia,0)) from fechamentoCaixa
                                    where
                                        dataMovimento=newdataMovimento and
                                        loja=newloja and
                                        terminal=newterminal and
                                        funcionario=newfuncionario);



    update `conector`.`fechamentocaixa`
            set
                `dataHoraSaida`=`newdataHoraSaida`,
                `grandeTotalEnd`=`newgrandeTotalEnd`,
                `contadorFinal`=`newcontadorFinal`,
                 contadorCancelados=newcontadorCancelados,
                `desconto`=`newdesconto`,
                `numeroCupom`=`newnumeroCupom`,
                `numeroClienteAtendidos`=numberClient,
                `contadorReducao`=`newcontadorReducao`,
                contadorNaoFiscal=newcontadorNaoFiscal,
                totalnotaFiscal=newtotalnotaFiscal,
                totalSangrias=newtotalSangrias

                                        where
                                                            `dataMovimento`=`newdataMovimento` and
                                                            `loja`=`newloja` and
                                                            `terminal`=`newterminal` and
                                                            `sequencia`=`newsequencia` and
                                                            `funcionario`=`newfuncionario`;
    end $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `conector_alt_feriado`
--

DROP PROCEDURE IF EXISTS `conector_alt_feriado`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='' */ $$
CREATE DEFINER=`master`@`localhost` PROCEDURE `conector_alt_feriado`(
                in `newidferiado` INT,
                in `newdescricao` VARCHAR(30),
                in `newidloja` INT,
                in `newferiado` DATE,
                in `newtodasLoja` smallint(6)
                )
begin
        update  feriado
        set
                                `descricao`=`newdescricao`,
                                `idloja`=`newidloja`,
                                `feriado`=`newferiado`,
                                `todasLoja` =`newtodasLoja`
         where `idferiado`=`newidferiado`;
end $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `conector_alt_finalizadora`
--

DROP PROCEDURE IF EXISTS `conector_alt_finalizadora`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='' */ $$
CREATE DEFINER=`master`@`localhost` PROCEDURE `conector_alt_finalizadora`(
			 in newidFinalizadora integer,
                         in newDescricaoFinalizadora varchar(30),
                         in newTaxaFinanceiraFinalizadora numeric(9,3),
                         in newTrocoMaximoFinalizadora numeric(9,3),
                         in newtypeFinalizadora char(1),
                         in newcobrancaObrigatoria boolean, 
                         in newtaxaObrigatoria numeric(9,3), 
                         in newidFinalizadoraTroco integer, 
                         in newtypeVenda char(2), 
                         in newflagRestrige boolean, 
                         in newflagVencimento boolean,
                         in newflagPermitiTroco boolean, 
                         in newflagBoleto boolean, 
                         in newflagPromissoria boolean, 
                         in newadministradora integer, 
                         in newstatus boolean
                                            
                                          )
begin
update 
		 finalizadora
set
			  descricao=newDescricaoFinalizadora,
                          tac=newTaxaFinanceiraFinalizadora,
                          trocoMax=newTrocoMaximoFinalizadora,
                          typeFinalizadora=newtypeFinalizadora,
                          cobrancaObrigatoria=newcobrancaObrigatoria,
                          taxaObrigatoria=newtaxaObrigatoria,
                          idFinalizadoraTroco=newidFinalizadoraTroco, 
                          typeVenda=newtypeVenda, 
                          flagRestringe=newflagRestrige,
                          flagVencimento=newflagVencimento,
                          flagPermitiTroco=newflagPermitiTroco,
                          flagBoleto=newflagBoleto,
                          flagPromissoria=newflagPromissoria,
                          administradora=newadministradora,
                          status=newstatus
where
			  idFinalizadora=newidFinalizadora;

end $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `conector_alt_fisica`
--

DROP PROCEDURE IF EXISTS `conector_alt_fisica`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='' */ $$
CREATE DEFINER=`master`@`localhost` PROCEDURE `conector_alt_fisica`(

                                    in alt_idcliente integer,
                                    in alt_cpf varchar(12),
                                    in alt_idatividade integer,
                                    in alt_nome varchar(45),
                                    in alt_nascimento date,
                                    in alt_idsexo integer,
                                    in alt_identidade varchar(45),
                                    in alt_idcivil int(11),
                                    in alt_idTipoFornecedor integer
                                  )
BEGIN
start Transaction;
update
            fisica
        set
            cpf=alt_cpf,
            nome=alt_nome,
            nascimento=alt_nascimento,
            idsexo=alt_idsexo,
            idcivil=alt_idcivil,
            identidade=alt_identidade,
            idTipoFornecedor = alt_idTipoFornecedor
        where
            fisica.idcliente=alt_idcliente and
            fisica.idatividade=alt_idatividade;		
commit;
END $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `conector_alt_fone`
--

DROP PROCEDURE IF EXISTS `conector_alt_fone`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='STRICT_TRANS_TABLES,STRICT_ALL_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,TRADITIONAL,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION' */ $$
CREATE DEFINER=`master`@`localhost` PROCEDURE `conector_alt_fone`(
                                    in new_idfone integer, 
                                    in new_idcliente integer, 
                                    in new_idatividade integer,
                                    in new_ddd char(4),
                                    in new_telefone varchar(8),
                                    in new_ramal integer,
                                    in new_idfonetype integer,
                                    in new_complemento varchar(30), 
                                    in new_priori char(1)
                                  )
begin
update 
	 fone
     set
		idcliente = new_idcliente,
		idatividade=new_idatividade,
		ddd=new_ddd,
		telefone=new_telefone,
		ramal=new_ramal,
		idfonetype=new_idfonetype,
		complemento=new_complemento,
		priori=new_priori
	where
		idfone=new_idfone and idcliente=new_idcliente;
if new_priori = 'v' then
    call conector_alt_foneStatus(new_idcliente,new_idfone);
end if;
if((select count(priori) as codigo from fone where idcliente=new_idcliente and priori = 'v') <= 0) then
set @a=(select min(idfone) from fone where idcliente=new_idcliente);
   update fone set priori='v' where idcliente=new_idcliente and idfone=@a;
end if;

end $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `conector_alt_foneStatus`
--

DROP PROCEDURE IF EXISTS `conector_alt_foneStatus`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='' */ $$
CREATE DEFINER=`master`@`localhost` PROCEDURE `conector_alt_foneStatus`(in find_cliente integer, in find_fond integer)
begin
start Transaction;
    update funcionario_fone set priori="v" where idcliente =find_cliente and idFuncionariofone = find_fond;
    update funcionario_fone set priori="f" where idcliente =find_cliente and idFuncionariofone != find_fond;
commit;
end $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `conector_alt_funcionario`
--

DROP PROCEDURE IF EXISTS `conector_alt_funcionario`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='' */ $$
CREATE DEFINER=`master`@`localhost` PROCEDURE `conector_alt_funcionario`(
                      				   in alt_idFuncionario integer,
                                 in alt_nome varchar(45),
                                 in alt_apelido varchar(12),
                            	   in alt_nascimento date,
                            	   in alt_idloja integer,
                                 in alt_idfuncao integer,
                            	   in alt_idcivil integer,
                            	   in alt_idsexo integer,
                                 in alt_comissaoAvista numeric(5,3),
                                 in alt_comissaoAprazo numeric(5,3),
                                 in alt_cpf varchar(12),
                                 in alt_identidade varchar(21),
                                 in alt_email varchar(45),
                                 in alt_pis varchar(21),
                                 in alt_idusuario integer,
                                 in alt_admissao date,
                                 in alt_demissao char(8),
                                 in alt_carteira varchar(21),
                                 in alt_obs blob,
                                 in alt_idPremiacao integer,
                                 in alt_idMetaVenda integer,
                                 in alt_idprofissao integer,
                                 in alt_idEscolaridade integer,
                                 in alt_acessoFiscal smallint,
                                 in alt_acessoMenuFiscal smallint,
                                 in alt_crc varchar(15),
                                 in alt_contador_cnpj varchar(14),
                                 in send_id integer,
                                 in send_cep integer,
                                 in send_idcepbairro integer,
                                 in send_idenderecoType integer,
                                 in send_bairro varchar(45),
                                 in send_complemento varchar(60),
                                 in send_municipio varchar(45),
                                 in send_estado char(2),
                                 in send_numero integer,
                                 in send_logradouro varchar(45)

			)
BEGIN

start Transaction;

  update
		funcionario
  set
          crc=alt_crc,
  			  nome=alt_nome,
				  apelido=alt_apelido,
				  nascimento=alt_nascimento,
				  idloja=alt_idloja,
				  idfuncao=alt_idfuncao,
				  idcivil=alt_idcivil,
				  idsexo=alt_idsexo,
				  comissaoAvista=alt_comissaoAvista,
				  comissaoAprazo=alt_comissaoAprazo,
				  cpf=alt_cpf,
				  identidade=alt_identidade,
				  email=alt_email,
				  pis=alt_pis,
				  idusuario=alt_idusuario,
				  Admissao=alt_admissao,
				  demissao=alt_demissao,
				  carteira=alt_carteira,
				  observacao=alt_obs,
				  idPremiacao=alt_idPremiacao,
				  idMetaVenda=alt_idMetaVenda,
				  idprofissao=alt_idprofissao,
				  idEscolaridade=alt_idEscolaridade,
          acessoFiscal=alt_acessoFiscal,
          acessoMenuFiscal=alt_acessoMenuFiscal,
          contador_cnpj=alt_contador_cnpj
where
		idfuncionario = alt_idFuncionario;

   call conector_alt_funcionarioEndereco(send_id,alt_idfuncionario,send_cep,send_idcepbairro,send_idenderecoType,send_bairro,send_logradouro,send_complemento,send_municipio,send_estado,send_numero,1);

commit;
      END $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `conector_alt_funcionarioEndereco`
--

DROP PROCEDURE IF EXISTS `conector_alt_funcionarioEndereco`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='' */ $$
CREATE DEFINER=`master`@`localhost` PROCEDURE `conector_alt_funcionarioEndereco`(
                                            in alt_idFuncionarioEndereco integer,
                                            in alt_idFuncionario integer,
                                            in alt_cep integer,
                                            in alt_idcepbairro integer,
                                            in alt_idenderecoType integer,
                                            in alt_bairro varchar(45),
                                            in alt_logradouro varchar(45),
                                            in alt_complemento varchar(60),
                                            in alt_municipio varchar(45),
                                            in alt_estado char(2),
                                            in alt_numero integer,
                                            in alt_seq integer
                                      )
begin
    update
            funcionario_endereco
    set
            cep=alt_cep,
            idcepbairro=alt_idcepbairro,
            idenderecoType=alt_idenderecoType,
            bairro=alt_bairro,
            logradouro=alt_logradouro,
            complemento=alt_complemento,
            municipio=alt_municipio,
            estado=alt_estado,
            numero=alt_numero
    where
            idFuncionarioEndereco=alt_idFuncionarioEndereco  and idfuncionario=alt_idFuncionario and
            sequencia=alt_seq;

end $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `conector_alt_funcionario_fone`
--

DROP PROCEDURE IF EXISTS `conector_alt_funcionario_fone`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='' */ $$
CREATE DEFINER=`master`@`localhost` PROCEDURE `conector_alt_funcionario_fone`(
   newidFuncionarioFone int(11),
  `newidfuncionario` int(11),
  `newddd` char(4),
  `newtelefone` varchar(8),
  `newramal` int(11),
  `newidfoneType` int(11),
  `newcomplemento` varchar(30),
  `newpriori` char(1))
begin 
  
    update 
        `conector`.`funcionario_fone`
    set
        `ddd`=`newddd`,
        `telefone`=`newtelefone`,
        `ramal`=`newramal`,
        `idfoneType`=`newidfoneType`,
        `complemento`=`newcomplemento`,
        `priori`=`newpriori` where `idfuncionario`=`newidfuncionario` and idFuncionarioFone = newidFuncionarioFone;
    if new_priori = 'v' then
    call conector_alt_funcionario_foneStatus(newidfuncionario,newidFuncionarioFone);
end if;
if((select count(priori) as codigo from fone where idcliente=newidfuncionario and priori = 'v') <= 0) then
set @a=(select min(idFuncionariofone) from fone where idcliente=newidfuncionario);
   update fone set priori='v' where idcliente=newidfuncionario and idFuncionariofone=@a;
end if;
end $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `conector_alt_funcionario_foneStatus`
--

DROP PROCEDURE IF EXISTS `conector_alt_funcionario_foneStatus`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='' */ $$
CREATE DEFINER=`master`@`localhost` PROCEDURE `conector_alt_funcionario_foneStatus`(in find_cliente integer, in find_fond integer)
begin
start Transaction;
    update funcionario_fone set priori="v" where idFuncionario=find_cliente and idfone = find_fond;
    update funcionario_fone set priori="f" where idFuncionario =find_cliente and idfone != find_fond;
commit;
end $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `conector_alt_grupo`
--

DROP PROCEDURE IF EXISTS `conector_alt_grupo`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='STRICT_TRANS_TABLES,STRICT_ALL_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,TRADITIONAL,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION' */ $$
CREATE DEFINER=`master`@`localhost` PROCEDURE `conector_alt_grupo`(
                                                    in newid integer,
                                                    in newidsetor integer,
                                                    in newidcomprador integer,
                                                    in newdescricao varchar(45),
                                                    in newstatus bool
                                                 )
BEGIN
start Transaction;
        update
                grupo
        set
                idsetor=newidsetor, idcomprador=newidcomprador,
                descricao=newdescricao, status=newstatus
        where
                idgrupo=newid;
commit;
END $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `conector_alt_historico`
--

DROP PROCEDURE IF EXISTS `conector_alt_historico`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='' */ $$
CREATE DEFINER=`master`@`localhost` PROCEDURE `conector_alt_historico`(
   newIdHistorico int(11),
  `newdescricao` VARCHAR(30),
  `newtipo` VARCHAR(1),
  `newlancamentoNegativo` VARCHAR(1),
  `newinativa` smallint(6))
begin
            update HISTORICO 
                        set 
                            DESCRICAO=newdescricao, TIPO=newtipo, LANCAMENTONEGATIVO=newlancamentonegativo, INATIVA=newinativa
                        where 
                            idhistorico=newIdHistorico;
end $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `conector_alt_juridica`
--

DROP PROCEDURE IF EXISTS `conector_alt_juridica`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='' */ $$
CREATE DEFINER=`master`@`localhost` PROCEDURE `conector_alt_juridica`(
                                    in alt_idcliente integer,
                                    in alt_cnpj varchar(14),
                                    in alt_idatividade integer,
                                    in alt_razao varchar(45),
                                    in alt_fantasia varchar(45),
                                    in alt_ie varchar(30),
                                    in alt_dataAbertura date,
                                    in alt_idtipoFornecedor integer
                                  )
begin
start Transaction;
update
            juridica
        set
            idcliente=alt_idcliente,
            cnpj=alt_cnpj,
            idatividade=alt_idatividade,
            razao=alt_razao,
            fantasia=alt_fantasia,
            ie=alt_ie,
            dataAbertura=alt_dataAbertura,
            idtipoFornecedor=alt_idtipoFornecedor
        where
            juridica.idcliente=alt_idcliente and
            juridica.idatividade=alt_idatividade;		
commit;
end $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `conector_alt_licenca_ecf`
--

DROP PROCEDURE IF EXISTS `conector_alt_licenca_ecf`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='' */ $$
CREATE DEFINER=`root`@`localhost` PROCEDURE `conector_alt_licenca_ecf`(
`newcaixa` INT,
`newcnpj` varchar(45),
`newnumeroSerie` VARCHAR(45),
`newinativa` SMALLINT,
`newaquisicao` DATE,
`newliberacao` DATE,
`newmodelo` INT,
`newSituacao` smallint)
begin

    update `licenca_ecf`
        set
        `numeroSerie`=`newnumeroSerie`,
        `inativa`=`newinativa`,
        `aquisicao`=`newaquisicao`,
        `liberacao`=`newliberacao`,
        `modelo`=`newmodelo`
                where
                    `caixa`=`newcaixa` and
                    `cnpj`=`newcnpj`;
                    end $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `conector_alt_loja`
--

DROP PROCEDURE IF EXISTS `conector_alt_loja`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='' */ $$
CREATE DEFINER=`root`@`localhost` PROCEDURE `conector_alt_loja`(
                  			            in alt_idLoja integer,
                          	        in alt_razao varchar(45),
                                    in alt_abreviatura varchar(45),
                                    in alt_cnpj varchar(14),
                                    in alt_ie varchar(21),
                                    in alt_iemunicipal varchar(21),
                                    in alt_type char(1),
                                    in alt_idestado integer,
                                    in alt_uf char(2),
                                    in alt_codigoMunicipio integer,
                                    in alt_TypeLoja CHAR(1),
                                    in alt_AliquotaPis NUMERIC(15,3),
                                    in alt_AliquotaCofins NUMERIC(15,3),
                                    in alt_ControlaEstoque CHAR(1),
                                    in alt_TypeCalculo CHAR(1),
                                    in alt_EmpresaTroca INTEGER,
                                    in alt_AliquotaInss NUMERIC(5,3),
                                    in alt_AliquotaIss NUMERIC(5,3),
                                    in alt_Matriz BOOLEAN,
                                    in alt_Deposito BOOLEAN,
                                    in alt_SerieNota INTEGER,
                                    in alt_NumeroNota INTEGER,
                                    in alt_AtualizaCusto BOOLEAN,
                                    in alt_status BOOLEAN,
                                    in alt_ramo char(1),
                                    in alt_cnae varchar(30),
                                    in `alt_lojaNf` INT,
                                    in `alt_ieSubstituicao` VARCHAR(30),
                                    in `alt_contribuicao` decimal(15,3),
                                    in `alt_ir` decimal(15,3),
                                    in `alt_irMinima` decimal(15,3),
                                    in `alt_valorRetencaoPisCofins` decimal(15,3),
                                    in `alt_flagCalcAboutSTPisCofins` smallint(6),
                                    in `alt_custoOperacional` decimal(15,3),
                                    in alt_tipoComissao int,
                                    in alt_diasDevComissao smallint,
                                    in alt_abertura date,
                                    in alt_SubSerie varchar(2),
                                    in alt_numeroNotaSerie double,
                                    in alt_serieNfce varchar(3),
                                    in alt_numeroNotaConsumidor double,
                                    in send_id integer,
                                    in send_cep integer,
                                    in send_idcepbairro integer,
                                    in send_idenderecoType integer,
                                    in send_bairro varchar(45),
                                    in send_logradouro varchar(45),
                                    in send_complemento varchar(60),
                                    in send_municipio varchar(45),
                                    in send_estado char(2),
                                    in send_numero integer
                                  )
begin
 start Transaction;
update
            loja
        set
            razao=alt_razao,
            abreviatura=alt_abreviatura,
            cnpj=alt_cnpj,
            tipoComissao=alt_tipoComissao,
            diasDevComissao=alt_diasDevComissao,
            ie=alt_ie,
            iemunicipal=alt_iemunicipal,
            type=alt_type,
            idestado=alt_idestado,
            uf=alt_uf,
            SubSerie=alt_SubSerie,
            numeroNotaSerie=alt_numeroNotaSerie,
            codigoMunicipio=alt_codigoMunicipio,
            typeLoja=alt_TypeLoja,
        		aliquotaPis=alt_AliquotaPis,
        		aliquotaCofins=alt_AliquotaCofins,
        		controlaEstoque=alt_ControlaEstoque,
        		typeCalculo=alt_TypeCalculo,
        		empresaTroca=alt_EmpresaTroca,
        		aliquotaInss=alt_AliquotaInss,
        		aliquotaIss=alt_AliquotaIss,
        		matriz=alt_Matriz,
        		deposito=alt_Deposito,
        		serieNota=alt_SerieNota,
        		numeroNota=alt_NumeroNota,
        		atualizaCusto=alt_AtualizaCusto,
            status=alt_status,
             ramo=alt_ramo, cnae=alt_cnae,
            `lojaNf`=`alt_lojaNf`,
            `ieSubstituicao`=`alt_ieSubstituicao`,
            `contribuicao`=`alt_contribuicao`,
            `ir`=`alt_ir`,
            `valorRetencaoPisCofins`=`alt_valorRetencaoPisCofins`,
            `flagCalcAboutSTPisCofins`=`alt_flagCalcAboutSTPisCofins`,
            `custoOperacional`=`alt_custoOperacional`, abertura=alt_abertura,
                                    serieNfce=alt_serieNfce,
                                    numeroNotaConsumidor=alt_numeroNotaConsumidor
        where
            loja.idloja=alt_idLoja;
 commit;

   if((select count(*) from conector.endereco where endereco.idcliente=alt_idLoja and idEnderecoType = send_idenderecoType)>0)then

    call conector_alt_endereco(
                                  send_id,
                                  alt_idLoja,
                                  send_cep,
                                  send_idcepbairro,
                                  send_idenderecoType,
                                  send_bairro,
                                  send_logradouro,
                                  send_complemento,
                                  send_municipio,
                                  send_estado,
                                  send_numero,1,1
                               );

  else

    call conector_inc_endereco(
                                  alt_idLoja,
                                  send_cep,
                                  send_idcepbairro,
                                  send_idenderecoType,
                                  send_bairro,
                                  send_logradouro,
                                  send_complemento,
                                  send_municipio,
                                  send_estado,
                                  send_numero
                              );
  end if;

end $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `conector_alt_lojaRelacionamento`
--

DROP PROCEDURE IF EXISTS `conector_alt_lojaRelacionamento`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='' */ $$
CREATE DEFINER=`root`@`%` PROCEDURE `conector_alt_lojaRelacionamento`(
  `newidlojaOrigem` INT(11),
  `newidlojaDestino` INT(11),
  `newcontrolaEstoque` SMALLINT,
  `newatualizaProduto` SMALLINT,
  `newatualizaPrice` SMALLINT,
  `newunificaEstoque` SMALLINT)
begin
  

update lojaRelacionamento set
    controlaEstoque=newcontrolaEstoque,
    atualizaProduto=newatualizaProduto,
    atualizaPrice=newatualizaPrice,
    unificaEstoque=newunificaEstoque,dataAlt=now()
            where idlojaOrigem=newidlojaOrigem and idLojaDestino=newidLojaDestino;


    
  end $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `conector_alt_metodo`
--

DROP PROCEDURE IF EXISTS `conector_alt_metodo`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='' */ $$
CREATE DEFINER=`master`@`localhost` PROCEDURE `conector_alt_metodo`(
  `newidMetodo` INT(11),
  `newidfinalizadora` INT(11),
  `newdescricao` VARCHAR(45),
  `newabreviatura` VARCHAR(12),
  `newmult` DECIMAL(15,3),
  `newnroparcelas` INT(11),
  `newitaxa` DECIMAL(15,3),
  `newforcePasswd` smallint(6),
  `newvalueMin` smallint(6),
  `newforceMinimoVenda` smallint(6),
  `newminimoVenda` DECIMAL(15,3),
  `newforceEntrada` smallint(6),
  `newcarencia` INT(11),
  `newvalueMinEntrada` DECIMAL(15,3),
  `newtac` DECIMAL(15,3),
  `newseguro` DECIMAL(15,3),
  `newfinanceiro` DECIMAL(15,3),
  `newitaxaEspecial` DECIMAL(15,3),
  `newinibeDiscount` smallint(6),
  `newdayPgto` SMALLINT,
  `newstatus` smallint(6),
   newtypeMetodo smallint(6)
)
begin
update metodo
  set
  `idfinalizadora`=`newidfinalizadora`,
  `descricao`=  `newdescricao`,
  `abreviatura`=  `newabreviatura`,
  `mult`=  `newmult`,
  `nroparcelas`=`newnroparcelas`,
  `itaxa`=`newitaxa`,
  `forcePasswd`=`newforcePasswd`,
  `valueMin`=`newvalueMin`,
  `forceMinimoVenda`=`newforceMinimoVenda`,
  `minimoVenda`=`newminimoVenda`,
  `forceEntrada`=`newforceEntrada`,
  `carencia`=`newcarencia`,
  `valueMinEntrada`=`newvalueMinEntrada`,
  `tac`=`newtac`,
  `seguro`=`newseguro`,
  `financeiro`=`newfinanceiro`,
  `itaxaEspecial`=`newitaxaEspecial`,
  `inibeDiscount`=`newinibeDiscount`,
  `dayPgto`=`newdayPgto`,
  `status`=`newstatus`,
   typeMetodo=newtypeMetodo
  where
idMetodo = newidMetodo;
end $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `conector_alt_movimento`
--

DROP PROCEDURE IF EXISTS `conector_alt_movimento`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='' */ $$
CREATE DEFINER=`master`@`localhost` PROCEDURE `conector_alt_movimento`(
                                          in newLoja integer,
                                          in newProduto Double,
                                          in newSaldo numeric(15,3)
                                       )
begin
    update produtoExtrato set saldo=newSaldo where (idloja= newloja) and (idproduto=newProduto);
end $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `conector_alt_nf`
--

DROP PROCEDURE IF EXISTS `conector_alt_nf`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='' */ $$
CREATE DEFINER=`master`@`localhost` PROCEDURE `conector_alt_nf`(
  `newnf` DOUBLE,
  `newloja` INT,
  `newidcliente` INT,
  `newidparamentro` INT,
  `newidtransportadora` INT,
  `newcfop` VARCHAR(6),
  `newidFuncionario` INT,
  `newidusuario` INT,
  `newidpedido` DOUBLE,


  `newsaida` DATE,
  `newalteracao` DATE,
  `newhora` TIME,
  `newdesconto` DECIMAL(15,3),
  `newuf` CHAR(2),
  `newitens` DECIMAL(15,3),
  `newseguro` DECIMAL(15,3),
  `newfrete` DECIMAL(15,3),
  `newtypeFrete` smallint,
  `newpeso` DECIMAL(15,3),
  `newcontribuicaoSocial` DECIMAL(15,3),
  `newquantidadePedido` DECIMAL(15,3),
  `newquantidadeRecebida` DECIMAL(15,3),
  `newimpresso` smallint(6) ,
  `newnr_impressao` DECIMAL(15,3),
  `newmodNotaFiscal` VARCHAR(3),
  `newidSituacaoFiscal` CHAR(2),
    `newtypenf` VARCHAR(1),
  `newMsg01` VARCHAR(100),
  `newMsg02` VARCHAR(100),
  `newMsg03` VARCHAR(100),
  `newnr_nota_entrada` double,
  `newserie_entrada` VARCHAR(3),
  `newrestituicao` char(1),
     newcondPgto integer)
begin

    update
	nf set
  `loja`=`newloja`,
  `idcliente`=`newidcliente`,
  `idparamentro`=`newidparamentro`,
  `idtransportadora`=`newidtransportadora`,
  `cfop`=`newcfop`,
  `idFuncionario`=`newidFuncionario`,
  `idusuario`=`newidusuario`,
  `idpedido`=`newidpedido`,
  
  
  
  `saida`=`newsaida`,
  `alteracao`=`newalteracao`,
  `hora`=`newhora`,
  `desconto`=`newdesconto`,
  `uf`=`newuf`,
  `itens`=`newitens`,
  `seguro`=`newseguro`,
  `frete`=`newfrete`,
  `typeFrete`=`newtypeFrete`,

  `peso`=`newpeso`,
  `contribuicaoSocial`=`newcontribuicaoSocial`,
  `quantidadePedido`=`newquantidadePedido`,
  `quantidadeRecebida`=`newquantidadeRecebida`,
  `impresso`=`newimpresso`,
  `nr_impressao`=`newnr_impressao`,
  `modNotaFiscal`=`newmodNotaFiscal`,
  `idSituacaoFiscal`=`newidSituacaoFiscal`,
    `typenf`=`newtypenf`,
  `Msg01`=`newMsg01`,
  `Msg02`=`newMsg02`,
  `Msg03`=`newMsg03`,
  
  `nr_nota_entrada`=`newnr_nota_entrada`,
  `serie_entrada`=`newserie_entrada`,
  `restituicao`=`newrestituicao`,
      condPgto=newcondPgto
  where
    `nf`=`newnf`;
  end $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `conector_alt_nfinfortransporte`
--

DROP PROCEDURE IF EXISTS `conector_alt_nfinfortransporte`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='' */ $$
CREATE DEFINER=`master`@`localhost` PROCEDURE `conector_alt_nfinfortransporte`(
  `newnfinfortransporte` double,
  `newnf` double,
  `newuf` varchar(2),
  `newqtty_volume` decimal(15,3),
  `newespecie` char(30),
  `newmarca` varchar(30),
  `newnumeracao` decimal(15,3),
  `newpesoliquido` decimal(15,3),
  `newpesoBruto` decimal(15,3),
  `newidtransportadora` INT,
  `newretencaoBaseCalculo` DECIMAL(15,3),
  `newretencaoAliquotaFrete` DECIMAL(15,3),
  `newretencaoIcmsFrete` DECIMAL(15,3),
  `newretencaoValorFrete` DECIMAL(15,3),
  `newretencaoCfopFrete` VARCHAR(10),
  `newisentoIcms` smallint(6))
begin
    update nfinfortransporte
    set
                    `uf`=`newuf`,
                    `qtty_volume`=`newqtty_volume`,
                    `especie`=`newespecie`,
                    `marca`=`newmarca`,
                    `numeracao`=`newnumeracao`,
                    `pesoliquido`=`newpesoliquido`,
                    `pesoBruto`=`newpesoBruto`,
                    `idtransportadora`=`newidtransportadora`,
                    `retencaoBaseCalculo`=`newretencaoBaseCalculo`,
                    `retencaoAliquotaFrete`=`newretencaoAliquotaFrete`,
                    `retencaoIcmsFrete`=`newretencaoIcmsFrete`,
                    `retencaoValorFrete`=`newretencaoValorFrete`,
                    `retencaoCfopFrete`=`newretencaoCfopFrete`,
                    `isentoIcms`=`newisentoIcms`
                                                where
                                                     `nf`=`newnf` and `idnfinfortransporte`=`newnfinfortransporte`;  end $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `conector_alt_nfInforVeiculo`
--

DROP PROCEDURE IF EXISTS `conector_alt_nfInforVeiculo`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='' */ $$
CREATE DEFINER=`master`@`localhost` PROCEDURE `conector_alt_nfInforVeiculo`(
  newnfInforVeiculo double,
  `newnf` DOUBLE,
  `newnfInforTransporte` DOUBLE,
  `newuf` VARCHAR(2),
  `newplaca` VARCHAR(45),
  `newrntc` VARCHAR(45), `newidveiculo` int)
BEGIN
    update nfInforVeiculo
                            set  
                                `uf`=`newuf`,
                                `placa`=`newplaca`,
                                `rntc`=`newrntc`,
                                `idveiculo`=`newidveiculo`
                                                where
                                                        `nf`=`newnf` and
                                                        `nfInforTransporte`=`newnfInforTransporte` and
                                                         idnfInforVeiculo=newnfInforVeiculo;
        
END $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `conector_alt_nfItem`
--

DROP PROCEDURE IF EXISTS `conector_alt_nfItem`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='' */ $$
CREATE DEFINER=`master`@`localhost` PROCEDURE `conector_alt_nfItem`(
  `newidNfItem` DOUBLE,
  `newidnf` DOUBLE,
  `newidProduto` INT,
  `newvalorLiquido` DECIMAL(15,3),
  `newpriceOriginal` DECIMAL(15,3),
  `newpriceVenda` DECIMAL(15,3),
  `newpriceCusto` DECIMAL(15,3),
  `newestoque` DECIMAL(15,3),
  `newpeso` DECIMAL(15,3),
  `newaliquota` DECIMAL(15,3),
  `newreducao` DECIMAL(15,3),
  `newquantidade` DECIMAL(15,3),
  `newipi` DECIMAL(15,3),
  `newipiValor` DECIMAL(15,3),
  `newvalorIpi` DECIMAL(15,3),
  `newidunidadeMedida` INT(11),
  `newicms` DECIMAL(15,3),
  `newbaseCalculo` DECIMAL(15,3),
  `newdesconto` DECIMAL(15,3),
  `newbaseCalculoIcmsSubstituicao` DECIMAL(15,3),
  `newacrescimo` DECIMAL(15,3),
  `newvalorTotalProduto` DECIMAL(15,3),
  `newvalorTotalNota` VARCHAR(45),
  `newbasePis` DECIMAL(15,3),
  `newbaseCofins` DECIMAL(15,3),
  `newvalorPis` DECIMAL(15,3),
  `newvalorCofins` DECIMAL(15,3),
  `newcfop` VARCHAR(6),
  `newcstIcms` CHAR(3),
  `newcstPis` INT,
  `newcstCofins` INT,
  `newcstIpi` INT,
  `newdescontoValor` DECIMAL(15,3) ,
  `newacrescimoValor` DECIMAL(15,3),
  `newvalorIcmsSubstituicao` DECIMAL(15,3),
  `newaliquotaIcmsSt` DECIMAL(15,3),
  `newreducaoIcmsSt` DECIMAL(15,3),
  `newmargem` DECIMAL(15,3),
   newtypeAliquota char(1),
   newchaveEntrada double,
   `newValorFrete` DECIMAL(15,3), newIdGenero int, newSeguro Decimal(15,3), neworigemMercadoria char(1))
begin
update
            nfItem
	set
                `valorLiquido`=`newvalorLiquido`,
                `priceOriginal`=`newpriceOriginal`,
                `priceVenda`=`newpriceVenda`,
                `priceCusto`=`newpriceCusto`,
                `estoque`=`newestoque`,
                `peso`=`newpeso`,
                `aliquota`=`newaliquota`,
                `reducao`=`newreducao`,
                `quantidade`=`newquantidade`,
                `ipi`=`newipi`,
                `ipiValor`=`newipiValor`,
                `idunidadeMedida`=`newidunidadeMedida`,
                `icms`=`newicms`,
                `baseCalculo`=`newbaseCalculo`,
                `desconto`=`newdesconto`,
                `baseCalculoIcmsSubstituicao`=`newbaseCalculoIcmsSubstituicao`,
                `acrescimo`=`newacrescimo`,
                `valorTotalProduto`=`newvalorTotalProduto`,
                 valorIpi=newvalorIpi,
                `valorTotalNota`=`newvalorTotalNota`,
                `basePis`=`newbasePis`,
                `baseCofins`=`newbaseCofins`,
                `valorPis`=`newvalorPis`,
                `valorCofins`=`newvalorCofins`,
                `cfop`=`newcfop`,
                `cstIcms`=`newcstIcms`,
                `cstPis`=`newcstPis`,
                `cstCofins`=`newcstCofins`,
                `cstIpi`=`newcstIpi`,
                `descontoValor`=`newdescontoValor`,
                `acrescimoValor`=`newacrescimoValor`,
                `valorIcmsSubstituicao`=`newvalorIcmsSubstituicao`,
                `aliquotaIcmsSt`=`newaliquotaIcmsSt`,
                `reducaoIcmsSt`=`newreducaoIcmsSt`,
                `margem`=`newmargem`,
                 typeAliquota = newtypeAliquota,
                 chaveEntrada=newchaveEntrada,`valorFrete`=`newValorFrete`, idGenero = newIdGenero, seguro = newSeguro, origemMercadoria=neworigemMercadoria
				 where

                `idnf`=`newidnf` and
                `idProduto`=`newidProduto` and
		 idNfItem=newidNfItem;

  end $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `conector_alt_notaFiscalEntrada`
--

DROP PROCEDURE IF EXISTS `conector_alt_notaFiscalEntrada`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='' */ $$
CREATE DEFINER=`master`@`localhost` PROCEDURE `conector_alt_notaFiscalEntrada`(
  in `newNFIdEntrada` DOUBLE,
  in `newNFidloja` INT,
  in `newNFidcliente` INT,
  in `newNFcfop` VARCHAR(6),
  in `newNFidOperacao` INT,
  in `newNFidSituacaoFiscal` CHAR(2),
  in `newNfidCodigoFiscal` INT,
  in `newNfmodNotaFiscal` VARCHAR(3),
  in `newNFidUsuario` INT,
  in `newNFemissao` DATE,
  in `newNFentrada` DATE,
  in `newNFnr_nota` VARCHAR(10),
  in `newNFserie` VARCHAR(3),
  in `newNFtypeNota` VARCHAR(1),
  in `newNFidCompra` DOUBLE,
  in `newNFsumSt` smallint(6),
  in `newNFsubstituicao` DECIMAL(15,3),
  in `newNFcreditoIcms` DECIMAL(15,3),
  in `newNFbonificacao` DECIMAL(15,3),
  in `newNFconhecimentoFrete` VARCHAR(10),
  in `newNFidtransportadora` DOUBLE,
  in `newNFsumFrete` smallint(6),
  in `newNFfrete` DECIMAL(15,3),
  in `newNFvalorFrete` DECIMAL(15,3),
  in `newNFicmsFrete` DECIMAL(15,3),
  in `newNFvendo` DECIMAL(15,3),
  in `newNFvendoValor` DECIMAL(15,3),
  IN `newNFincideFinanProduto` smallint(6),
  in `newNFfinanceiro` DECIMAL(15,3),
  in `newNFfinanceiroValor` DECIMAL(15,3),
  in `newNFbaseCalculoIcms` DECIMAL(15,3),
  in `newNFbaseCalculoIpi` DECIMAL(15,3),
  in `newNFvalorIcmsSubstuicao` DECIMAL(15,3),
  in `newNFbaseCalculoSubstituicao` DECIMAL(15,3),
  in `newNFtotalProdutoSubstituicao` DECIMAL(15,3),
  in `newNFdiscountFinalNota` DECIMAL(15,3),
  IN `newNFvalorDesconto` DECIMAL(15,3),
  in `newNFporcetagemDesconto` DECIMAL(15,3),
  in `newNFvalorDespesasAcessorias` DECIMAL(15,3),
  in `newNFporcentagemDespesasAcessorias` DECIMAL(15,3) ,
  in `newNFtypeFrete` CHAR(1),
  in `newNFtotalItens` DECIMAL(15,3),
  in `newNFvolume` DECIMAL(15,3),
  in `newNFvalorDivergenciaFinal` DECIMAL(15,3),
  in `newNFvalorTotalCompra` DECIMAL(15,3),
  in `newNFvalorTotalBonificacao` DECIMAL(15,3),
  in `newNFvalorTotalIpi` DECIMAL(15,3),
  in `newNFvalorTotalCustoLiquido` DECIMAL(15,3),
  in `newNFvalorTotalNota` DECIMAL(15,3),
  in `newNFvalorTotalProduto` DECIMAL(15,3),
  in `newNFvalorTotalVenda` DECIMAL(15,3),
  in `newNFinformacaoComplementares` VARCHAR(100),
  in `newNFstatus` CHAR(1),
  in  newNFbaseFrete decimal(15,3)
)
begin

update conector.entrada
	set
   `idSituacaoFiscal`=`newNFidSituacaoFiscal`,
   `idUsuario`=`newNFidUsuario`,
   `emissao`=`newNFemissao`,
   `entrada`=`newNFentrada`,
   `nr_nota`=`newNFnr_nota`,
   `serie`=`newNFserie`,
   `typeNota`=`newNFtypeNota`,
   `idCompra`=`newNFidCompra`,
   `idCodigoFiscal`=`newNfidCodigoFiscal`,
   `modNotaFiscal`=`newNfmodNotaFiscal`,
   `sumSt`=`newNFsumSt`,
   `substituicao`=`newNFsubstituicao`,
   `creditoIcms`=`newNFcreditoIcms`,
   `bonificacao`=`newNFbonificacao`,
   `conhecimentoFrete`=`newNFconhecimentoFrete`,
   `idtransportadora`=`newNFidtransportadora`,
   `sumFrete`=`newNFsumFrete`,
   `frete`=`newNFfrete`,
   `valorFrete`=`newNFvalorFrete`,
   `vendo`=`newNFvendo`,
   `vendoValor`=`newNFvendoValor`,
   `incideFinanProduto`=`newNFincideFinanProduto`,
   `financeiro`=`newNFfinanceiro`,
   `financeiroValor`=`newNFfinanceiroValor`,
   `baseCalculoIcms`=`newNFbaseCalculoIcms`,
   `baseCalculoIpi`=`newNFbaseCalculoIpi`,
   `valorIcmsSubstuicao`=`newNFvalorIcmsSubstuicao`,
   `baseCalculoSubstituicao`=`newNFbaseCalculoSubstituicao`,
   `totalProdutoSubstituicao`=`newNFtotalProdutoSubstituicao`,
   `discountFinalNota`=`newNFdiscountFinalNota`,
   `valorDesconto`=`newNFvalorDesconto`,
   `porcetagemDesconto`=`newNFporcetagemDesconto`,
   `valorDespesasAcessorias`=`newNFvalorDespesasAcessorias`,
   `porcentagemDespesasAcessorias`=`newNFporcentagemDespesasAcessorias`,
   `typeFrete`=`newNFtypeFrete`,
   `totalItens`=`newNFtotalItens`,
   `icmsFrete`=`newNFicmsFrete`,
   `volume`=`newNFvolume`,
   `valorDivergenciaFinal`=`newNFvalorDivergenciaFinal`,
   `valorTotalCompra`=`newNFvalorTotalCompra`,
   `valorTotalBonificacao`=`newNFvalorTotalBonificacao`,
   `valorTotalIpi`=`newNFvalorTotalIpi`,
   `valorTotalCustoLiquido`=`newNFvalorTotalCustoLiquido`,
   `valorTotalNota`=`newNFvalorTotalNota`,
   `valorTotalProduto`=`newNFvalorTotalProduto`,
   `valorTotalVenda`=`newNFvalorTotalVenda`,
   `informacaoComplementares`=`newNFinformacaoComplementares`,
   `status`=`newNFstatus`,
   `cfop`=`newNFcfop`,
   `idOperacao`=`newNFidOperacao`,`idcliente`=`newNFidcliente`,
    baseFrete=newNFbaseFrete
where
   `identrada`=`newNFidentrada` and
   `idloja`=`newNFidloja`;
   
end $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `conector_alt_operacaoEntrada`
--

DROP PROCEDURE IF EXISTS `conector_alt_operacaoEntrada`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='' */ $$
CREATE DEFINER=`master`@`localhost` PROCEDURE `conector_alt_operacaoEntrada`(
  in `newidoperacao` INT,
  in `newdescricao` VARCHAR(45),
  in `newflagCompra` smallint(6) ,
  in `newflagUpdateProduto` smallint(6),
  in `newflagUpdateProdutoStore` smallint(6),
  in `newflagPriceVenda` smallint(6),
  in `newflagPriceCusto` smallint(6),
  in `newflagDivergenciaNxP` smallint(6),
  in `newflagRomaneio` smallint(6),
  in `newflagZeraCompra` smallint(6),
  in `newflagComparaData` smallint(6),
  in `newflagForceLojaLogon` smallint(6),
  in `newflagDivergenciaNxItens` smallint(6),
  in `newpercentualDivergenciaNxItens` DECIMAL(15,3),
  in `newflagDivergenciaNxFinanceiro` smallint(6),
  in `newflagUpdatePagar` smallint(6),
  in `newflagFinanceiro` smallint(6),
  in `newflagSugestaFinanceira` smallint(6),
  in `newflagEmissaoIgualVencer` smallint(6),
  in `newflagLimiteComprador` smallint(6),
  in `newvalorCompras` DECIMAL(15,3),
  in `newflagUpdateFiscal` smallint(6),
  in `newflagGeraPis` smallint(6),
  in `newflagGeraCofins` smallint(6),
  in `newflagGeraIcms` smallint(6),
  in `newflagAtivaDivergencia` smallint(6),
  in `newdivergenciaImposto` DECIMAL(15,3),
  in `newdivergenciaIpi` DECIMAL(15,3),
  in `newdivergenciaSubstituicao` DECIMAL(15,3),
  in `newdivergenciaTotalNf` DECIMAL(15,3),
  in `newflagTypeNota` CHAR(1),
  in `newflagInCfopSugestao` VARCHAR(4),
  in `newflagOnCfopSugestao` VARCHAR(4),
  in `newflagUpdateEstoque` smallint(6),
  in `newstatus` VARCHAR(45),
  in newsituacaoFiscal VARCHAR(2),
  in newmodeloFiscal VARCHAR(3),
  in newprodutoServico double
   )
begin
update operacaoEntrada
	set
  `descricao`=`newdescricao`,
  `flagCompra`=`newflagCompra`,
  `flagUpdateProduto`=`newflagUpdateProduto`,
   flagUpdateProdutoStore = newflagUpdateProdutoStore,
  `flagPriceVenda`=`newflagPriceVenda`,
  `flagPriceCusto`=`newflagPriceCusto`,
  `flagDivergenciaNxP`=`newflagDivergenciaNxP`,
  `flagRomaneio`=`newflagRomaneio`,
  `flagZeraCompra`=`newflagZeraCompra`,
  `flagComparaData`=`newflagComparaData`,
  `flagForceLojaLogon`=`newflagForceLojaLogon`,
  `flagDivergenciaNxItens`=`newflagDivergenciaNxItens`,
  `percentualDivergenciaNxItens`=`newpercentualDivergenciaNxItens`,
  `flagDivergenciaNxFinanceiro`=`newflagDivergenciaNxFinanceiro`,
  `flagUpdatePagar`=`newflagUpdatePagar`,
  `flagForceFinanceiro`=`newflagFinanceiro`,
  `flagSugestaFinanceira`=`newflagSugestaFinanceira`,
  `flagEmissaoIgualVencer`=`newflagEmissaoIgualVencer`,
   situacaoFiscal=newsituacaoFiscal,
   modeloFiscal=newmodeloFiscal,
  `flagLimiteComprador`=`newflagLimiteComprador`,
  `valorCompras`=`newvalorCompras`,
  `flagUpdateFiscal`=`newflagUpdateFiscal`,
  `flagGeraPis`=`newflagGeraPis`,
  `flagGeraCofins`=`newflagGeraCofins`,
  `flagGeraIcms`=`newflagGeraIcms`,
  `flagAtivaDivergencia`=`newflagAtivaDivergencia`,
  `divergenciaImposto`=`newdivergenciaImposto`,
  `divergenciaIpi`=`newdivergenciaIpi`,
  `divergenciaSubstituicao`=`newdivergenciaSubstituicao`,
  `divergenciaTotalNf`=`newdivergenciaTotalNf`,
  `flagTypeNota`=`newflagTypeNota`,
  `flagInCfopSugestao`=`newflagInCfopSugestao`,
  `flagOnCfopSugestao`=`newflagOnCfopSugestao`,
  `flagUpdateEstoque`=`newflagUpdateEstoque`,
   produtoServico=newprodutoServico,
  `status`=`newstatus`
                  where `idoperacao` = `newidoperacao`;

end $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `conector_alt_pagar`
--

DROP PROCEDURE IF EXISTS `conector_alt_pagar`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='' */ $$
CREATE DEFINER=`master`@`localhost` PROCEDURE `conector_alt_pagar`(
   newId double,
  `newloja` INT,
  `newcodigo` INT,
  `newemissao` DATE,
  `newvencimento` DATE,
  `newdataEntrada` DATE,
  `newprazo` INT,
  `newvalorNota` DECIMAL(15,3),
  `newnota` VARCHAR(10),
  `newflagPagamento` CHAR(1),
  `newparcela` VARCHAR(5),
  `newconfirmada` smallint(6),
   newqttyPagar integer,
   newtypePepleo char(1),
   `newaceite` DATE,
   `newmultaData` DATE,
   `newhistorico` VARCHAR(50),
   `newduplicata` VARCHAR(10),
   `newbancoDocumento` INT,
   `newmultaDias` INT,
   `newprotestoDias` INT,
   `newdesconto` DECIMAL(15,3),
   `newjurosPagos` DECIMAL(15,3),
   `newmultaValor` DECIMAL(15,3),
   `newvalor` DECIMAL(15,3),
   `newcodigoCedente` VARCHAR(20),
   `newnossoNumero` VARCHAR(10),
   `newnumeroDocumento` VARCHAR(10),
   `newcodigoBarraBoleto` VARCHAR(50),
   `newobservacao` BLOB ,
   `newdataProtesto` DATE,
   `newdataBoleto` DATE,
    newNotRecebimento date,
    newUsuarioAceite int

   )
BEGIN
  update pagar
        		set
                  			`loja`=`newloja`,
                        `codigo`=`newcodigo`,
                        `emissao`=`newemissao`,
                        `vencimento`=`newvencimento`,
                        `dataEntrada`=`newdataEntrada`,
                        `prazo`=`newprazo`,
                        `valorNota`=`newvalorNota`,
                        `nota`=`newnota`,
                        `flagPagamento`=`newflagPagamento`,
                        `parcela`=`newparcela`,
                        `confirmada`=`newconfirmada`,
                         qttyPagar=newqttyPagar,
                         typePepleo=newtypePepleo,
                         `aceite`=`newaceite`,
                        `multaData`=`newmultaData`,
                        `historico`=`newhistorico`,
                        `duplicata`=`newduplicata`,
                        `bancoDocumento`=`newbancoDocumento`,
                        `multaDias`=`newmultaDias`,
                        `protestoDias`=`newprotestoDias`,
                        `desconto`=`newdesconto`,
                        `jurosPagos`=`newjurosPagos`,
                        `multaValor`=`newmultaValor`,
                        `valor`=`newvalor`,
                        `codigoCedente`=`newcodigoCedente`,
                        `nossoNumero`=`newnossoNumero`,
                        `numeroDocumento`=`newnumeroDocumento`,
                        `codigoBarraBoleto`=`newcodigoBarraBoleto`,
                        `observacao`=`newobservacao`,
                        `dataProtesto`=`newdataProtesto`,
                         dataBoleto=newdataBoleto,
                         notRecebimento=newNotRecebimento,
                         usuarioAceite=newusuarioAceite
		where
			 idPagar = newId;
  END $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `conector_alt_paramentro_crediario`
--

DROP PROCEDURE IF EXISTS `conector_alt_paramentro_crediario`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='' */ $$
CREATE DEFINER=`master`@`localhost` PROCEDURE `conector_alt_paramentro_crediario`(
  `newloja` INT,
  `newprazoQuitacaoAfter` INT,
  `newprazoQuitacaoBefore` INT,
  `newindiceSingleday` DECIMAL(15,3),
  `newindiceAtrasoMora` DECIMAL(15,3),
  `newcarenciaSingleDay` INT,
  `newcarenciaAtrasoMora` INT,
  `newidadeSpc` INT ,
  `newaltValuePrestacao` DECIMAL(15,3),
  `newaltValueEntrada` DECIMAL(15,3),
  `newlogicaCredito` CHAR(1),
  `newlimiteDiscountPrestacao` DECIMAL(15,3),
  `newliberacaocaoCredito` char(1),
  `newlimiteRenda` numeric(15,3),
  `newcategoriaLimite` char(1),
  `newvariacaoLimite` char(1) )
begin
update paramentro_crediario set
  `prazoQuitacaoAfter`=`newprazoQuitacaoAfter`,
  `indiceSingleday`=`newindiceSingleday`,
  `indiceSingleday`=`newindiceSingleday`,
  `indiceAtrasoMora`=`newindiceAtrasoMora`,
  `carenciaSingleDay`=`newcarenciaSingleDay`,
  `carenciaAtrasoMora`=`newcarenciaAtrasoMora`,
  `idadeSpc`=`newidadeSpc`,
  `altValuePrestacao`=`newaltValuePrestacao`,
  `altValueEntrada`=`newaltValueEntrada`,
  `logicaCredito`=`newlogicaCredito`,
  `limiteDiscountPrestacao`=`newlimiteDiscountPrestacao`,
  `liberacaocaoCredito`=`newliberacaocaoCredito`,
  `limiteRenda`=`newlimiteRenda`,
  `categoriaLimite`=`newcategoriaLimite`,
  `variacaoLimite`=`newvariacaoLimite`
                              where   `loja` =  `newloja`;
end $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `conector_alt_paramentro_fornecedor_comercial`
--

DROP PROCEDURE IF EXISTS `conector_alt_paramentro_fornecedor_comercial`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='' */ $$
CREATE DEFINER=`root`@`localhost` PROCEDURE `conector_alt_paramentro_fornecedor_comercial`(
   newidComercial double,
  `newidcliente` INT,
  `newvisita` SMALLINT,
  `newanaliseCompra` VARCHAR(1),
  `newminVolume` INT,
  `newvalueBay` DECIMAL(15,3),
  `newcomprador` INT,
  `newprazoEntrega` INT,
  `newformaPgto` INT(11),
  `newbanco` INT,
  `newagencia` VARCHAR(10),
  `newcontaCorrente` VARCHAR(15))
begin
  if((select count(*) from paramentro_fornecedor_comercial  where idCliente=newidCliente)=0)then
    call conector_inc_paramentro_fornecedor_comercial(newidCliente,newvisita,newanaliseCompra,`newminVolume`,`newvalueBay`,`newcomprador`,`newprazoEntrega`,`newformaPgto`,`newbanco`,`newagencia`,`newcontaCorrente`);
  else
  update paramentro_fornecedor_comercial
		set
                                                `idcliente`=`newidcliente`,
                                                `visita`=`newvisita`,
                                                `analiseCompra`=`newanaliseCompra`,
                                                `minVolume`=`newminVolume`,
                                                `valueBay`=`newvalueBay`,
                                                `comprador`=`newcomprador`,
                                                `prazoEntrega`=`newprazoEntrega`,
                                                `formaPgto`=`newformaPgto`,
                                                `banco`=`newbanco`,
                                                `agencia`=`newagencia`,
                                                `contaCorrente`=`newcontaCorrente` where idComercial=newidComercial;
  end if;
  end $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `conector_alt_paramentro_fornecedor_fiscal`
--

DROP PROCEDURE IF EXISTS `conector_alt_paramentro_fornecedor_fiscal`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='' */ $$
CREATE DEFINER=`root`@`localhost` PROCEDURE `conector_alt_paramentro_fornecedor_fiscal`(
   newidfiscal double,
  `newidcliente` INT,
  `newforcePis` CHAR(1),
  `newforceIcms` CHAR(1),
  `newforceCofins` CHAR(1),
  `newdescatadaSt` CHAR(1),
  `newtypeGrade` CHAR(1))
begin

    if((select count(*) from paramentro_fornecedor_informacao  where idCliente=newidCliente)=0)then
      call conector_inc_paramentro_fornecedor_fiscal(newidcliente,newforcePis,newforceIcms,newforceCofins,newdescatadaSt,newtypeGrade);
    else
    update paramentro_fornecedor_fiscal
	set
                                            `idcliente`=`newidcliente`,
                                            `forcePis`=`newforcePis`,
                                             forceIcms=newforceIcms,
                                            `forceCofins`=`newforceCofins`,
                                            `descatadaSt`=`newdescatadaSt`,
                                            `typeGrade`=`newtypeGrade` where
											idFiscal = newidFiscal;
   end if;
end $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `conector_alt_paramentro_fornecedor_informacao`
--

DROP PROCEDURE IF EXISTS `conector_alt_paramentro_fornecedor_informacao`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='' */ $$
CREATE DEFINER=`root`@`localhost` PROCEDURE `conector_alt_paramentro_fornecedor_informacao`(
  `newidInformacao` DOUBLE,
  `newidcliente` INT,
  `newtypeTroca` CHAR(1),
  `newtypeFrete` char(1),
  `newporcentagemFrete` DECIMAL(15,3),
  `newlastVisita` DATE,
  `newnextVisita` DATE,
  `newdevPagar` smallint(6),
  `newbloquearEntregaFiscal` smallint(6),
  `newrepresentante` INT,
  `newidoperacao` INT,
  `newforceCompra` smallint(6),
  `newnameSugestao` VARCHAR(15),
  `newpasswdSugestao` VARCHAR(45),
  `newobservacao` VARCHAR(200),
   newtypeFornecedor varchar(1))
begin
    if((select count(*) from paramentro_fornecedor_comercial  where idCliente=newidCliente)=0)then
      call conector_inc_paramentro_fornecedor_informacao(`newidcliente`,`newtypeTroca`,`newtypeFrete`,`newporcentagemFrete`,`newlastVisita`,`newnextVisita`,`newdevPagar`,`newbloquearEntregaFiscal`,`newrepresentante`,`newidoperacao`,`newforceCompra`,`newnameSugestao`,`newpasswdSugestao`,`newobservacao`,newtypeFornecedor);
    else
    update paramentro_fornecedor_informacao
                    set
                                                 `idcliente`=`newidcliente`,
                                                 `typeTroca`=`newtypeTroca`,
                                                 `typeFrete`=`newtypeFrete`,
                                                 `porcentagemFrete`=`newporcentagemFrete`,
                                                 `lastVisita`=`newlastVisita`,
                                                 `nextVisita`=`newnextVisita`,
                                                 `devPagar`=`newdevPagar`,
                                                 `bloquearEntregaFiscal`=`newbloquearEntregaFiscal`,
                                                 `representante`=`newrepresentante`,
                                                 `idoperacao`=`newidoperacao`,
                                                 `forceCompra`=`newforceCompra`,
                                                 `nameSugestao`=`newnameSugestao`,
                                                 `passwdSugestao`=`newpasswdSugestao`,
                                                 `observacao`=`newobservacao`,
                                                  typeFornecedor=newtypeFornecedor where
                                                 `idInformacao`=`newidInformacao`;
  end if;
  end $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `conector_alt_parametroFaturamento`
--

DROP PROCEDURE IF EXISTS `conector_alt_parametroFaturamento`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='' */ $$
CREATE DEFINER=`master`@`localhost` PROCEDURE `conector_alt_parametroFaturamento`(
   newidparamentro integer,
   newdescricao VARCHAR(30),
   newstatus smallint(6),
   neworigem CHAR(1),
   newdestino CHAR(1) ,
   newflagParamentro CHAR(1),
   newforceVendedor smallint(6),
   newforceCliente smallint(6),
   newforceMetodo smallint(6),
   newforcetranspote smallint(6),
   newforceAtualizacao smallint(6),
   newforcePagamento smallint(6),
   newforceAdressEntrega smallint(6),
   newestoqueDestino CHAR(1),
   newestoqueOrigem CHAR(1),
   newestoqueNegativo CHAR(1),
   newfixaOrigem smallint(6),
   newfixaDestino smallint(6),
   neworigemFixa INT(11),
   newdestinoFixo INT(11),
   newrestrigeCliente smallint(6),
   newcustoLiquido smallint(6),
   newemissaoFixa smallint(6),
   newestoqueLoja smallint(6),
   newatualizaComNf smallint(6),
   neworigemDestinoIguais smallint(6),
   newexclusaoPedidos smallint(6),
   newliberaDesconto smallint(6),
   newdigitaDescontoValor smallint(6),
   newdigitaDescontoPercentual boolean,
   newflagExpiracao smallint(6),
   newdiasEspiracao SMALLINT,
   newflagPermiteAtualizar smallint(6),
   newflagAlteraLoja smallint(6),
   newflagDesconto CHAR(1),
   newmargemVendedor DECIMAL(5,3),
   newmargemGerente DECIMAL(5,3),
   newmargemDiretor DECIMAL(5,3),
   newmargemSupervisor DECIMAL(5,3),
   newestoqueDestinoKit CHAR(1),
   newestoqueOrigemKit CHAR(1),
   newflagEstoqueFutura smallint(6),
   newflagDetalhesItem smallint(6),
   newidHistorico int,
   newrestrigeFinanceiro smallint(6),
   newrestrigeAltpgto smallint(6),
   newlimiteCredito smallint(6),
   newcarenciaAprazo smallint(6),
   newflagTroco smallint(6),
   newgeraReceber smallint(6),
   newgeraCrediario smallint(6),
   newgeraPagarDestino smallint(6),
   newgeraPargarOrigem smallint(6),
   newgeraCheque smallint(6),
   newflagAlteraPreco smallint(6),
   newflagAlteraComissao smallint(6),
   newflagAlteraDesconto smallint(6),
   newflagAlteraIpi smallint(6),
   newflagAlteraVendedor smallint(6),
   newflagQttyZerada smallint(6),
   newflagItemZerada smallint(6),
   newflagEntrada smallint(6),
   newflagExplodeKit smallint(6),
   newflagMaxItemPedido smallint(6),
   newnumeroMaxItem INT(11),
   newflagRepetItem smallint(6),
   newflagAltExcIncItem smallint(6),
   newflagBloquearItem smallint(6),
   newflagEanDefault smallint(6),
   newbloqueiaQuantidade smallint(6),
   newflagRestrigeCliente char(1),
   newflagClienteAvista smallint(6),
   newflagClienteDocCorretos smallint(6),
   newflagClienteEmail smallint(6),
   newflagTypePrice CHAR(1),
   newflagAtualizaMedio smallint(6),
   newflagRatearDesconto smallint(6),
   newflagVerificaPriceCusto smallint(6),
   newflagComissaoProduto smallint(6),
   newflagComissaoIgnora smallint(6),
   newflagComissaoFaturamento smallint(6),
   newflagComissaoBaixa smallint(6),
   newidfuncionario int,
   `newidTable_Codigo` int,
   `newmodNotaFiscal` VARCHAR(3),
   `newidSituacaoFiscal` CHAR(2),
   `newcfop1` varchar(6),
  `newcfop2` varchar(6),
  `newcfop3` varchar(6),
  `newcfop4` varchar(7),
  `newflagCalculaIcms` smallint(6),
  `newflagCalculaPisCofins` smallint(6),
  `newflagCalculaIr` smallint(6),
  `newflagCalculaBaseSt` smallint(6),
  `newflagCalculoServicoProduto` smallint(6),
  `newflagCalculoServico` smallint(6) ,
  `newflagCalculaIpi` smallint(6),
  `newflagNFRestituicao` smallint(6),
  `newflagForceNfOrigem` smallint(6),
  `newflagTypeFrete` char(3),
  `newflagRetemPisCofins` smallint(6),
   newflagAbateFunrural  smallint(6),
   newflagPgtoDevolucao smallint(6),
   newIdFinalizadora int,
   newIdFinalizadoraPadrao int,
   newIdMetodoPadrao int, 
   newMargemTransf decimal(15,3), 
   newidOperacaoEntrada int, 
   newflagFormaFinalizacao char(1),
   newFlagNota char(1)
)
begin

update
	conector.paramentro_faturamento
set FlagNota=newFlagNota,
  flagFormaFinalizacao=newflagFormaFinalizacao,
  descricao=newdescricao,
  status = newstatus,
  origem = neworigem,
  destino = newdestino,
  flagParamentro = newflagParamentro,
  forceVendedor = newforceVendedor,
  forceCliente = newforceCliente,
  forceMetodo = newforceMetodo,
  forcetranspote = newforcetranspote,
  forceAtualizacao = newforceAtualizacao,
  forcePagamento = newforcePagamento,
  forceAdressEntrega =newforceAdressEntrega,
  estoqueDestino = newestoqueDestino,
  estoqueOrigem = newestoqueOrigem,
  estoqueNegativo = newestoqueNegativo,
  fixaOrigem = newfixaOrigem,
  fixaDestino = newfixaDestino,
  origemFixa = neworigemFixa,
  flagPgtoDevolucao=newflagPgtoDevolucao,
  idFinalizadora=newIdFinalizadora,
  destinoFixo =  newdestinoFixo,
  restrigeCliente = newrestrigeCliente,
  custoLiquido = newcustoLiquido,
  emissaoFixa = newemissaoFixa,
  estoqueLoja = newestoqueLoja,
  atualizaComNf = newatualizaComNf,
  origemDestinoIguais = neworigemDestinoIguais,
  exclusaoPedidos = newexclusaoPedidos,
  liberaDesconto = newliberaDesconto,
  digitaDescontoValor = newdigitaDescontoValor,
  digitaDescontoPercentual = newdigitaDescontoPercentual,
  flagExpiracao = newflagExpiracao,
  diasEspiracao= newdiasEspiracao,
  flagPermiteAtualizar = newflagPermiteAtualizar,
  flagAlteraLoja = newflagAlteraLoja,
  flagDesconto = newflagDesconto,
  margemVendedor = newmargemVendedor,
  margemGerente = newmargemGerente,
  margemDiretor = newmargemDiretor,
  margemSupervisor = newmargemSupervisor,
  estoqueDestinoKit = newestoqueDestinoKit,
  estoqueOrigemKit = newestoqueOrigemKit,
  flagEstoqueFutura = newflagEstoqueFutura,
  flagDetalhesItem = newflagDetalhesItem,
  idHistorico = newidHistorico,
  restrigeFinanceiro = newrestrigeFinanceiro,
  restrigeAltpgto = newrestrigeAltpgto,
  limiteCredito = newlimiteCredito,
  carenciaAprazo = newcarenciaAprazo,
  flagTroco =  newflagTroco,
  geraReceber = newgeraReceber,
  geraCrediario = newgeraCrediario,
  geraPagarDestino=newgeraPagarDestino,
  geraPargarOrigem=newgeraPargarOrigem,
  geraCheque=newgeraCheque,
  flagAlteraPreco=newflagAlteraPreco,
  flagAlteraComissao=newflagAlteraComissao,
  flagAlteraDesconto=newflagAlteraDesconto,
  flagAlteraIpi=newflagAlteraIpi,
  flagAlteraVendedor=newflagAlteraVendedor,
  flagQttyZerada=newflagQttyZerada,
  flagItemZerada=newflagItemZerada,
  flagEntrada=newflagEntrada,
  flagExplodeKit=newflagExplodeKit,
  flagMaxItemPedido=newflagMaxItemPedido,
  numeroMaxItem = newnumeroMaxItem,
  flagRepetItem = newflagRepetItem,
  flagAltExcIncItem = newflagAltExcIncItem,
  flagBloquearItem = newflagBloquearItem,
  flagEanDefault = newflagEanDefault,
  bloqueiaQuantidade = newbloqueiaQuantidade,
  flagRestrigeCliente =newflagRestrigeCliente,
  flagClienteAvista = newflagClienteAvista,
  flagClienteDocCorretos = newflagClienteDocCorretos,
  flagClienteEmail = newflagClienteEmail,
  flagTypePrice = newflagTypePrice,
  flagAtualizaMedio = newflagAtualizaMedio,
  flagRatearDesconto = newflagRatearDesconto,
  flagVerificaPriceCusto = newflagVerificaPriceCusto,
  flagComissaoProduto = newflagComissaoProduto,
  flagComissaoIgnora=newflagComissaoIgnora,
  flagComissaoFaturamento=newflagComissaoFaturamento,
  flagComissaoBaixa=newflagComissaoBaixa,
  `modNotaFiscal`=`newmodNotaFiscal`,
   `idTable_Codigo`=`newidTable_Codigo`,   
   `idSituacaoFiscal`=newidSituacaoFiscal,
   cfop1=newcfop1,
   cfop2=newcfop2,
   cfop3=newcfop3,
   cfop4=newcfop4,
   flagCalculaIcms=newflagCalculaIcms,
   flagCalculaPisCofins=newflagCalculaPisCofins,
   flagCalculaIr=newflagCalculaIr,
   flagCalculaBaseSt=newflagCalculaBaseSt,
   flagCalculoServicoProduto=newflagCalculoServicoProduto,
   flagCalculoServico=newflagCalculoServico,
   flagCalculaIpi=newflagCalculaIpi,
   flagNFRestituicao=newflagNFRestituicao,
   flagForceNfOrigem=newflagForceNfOrigem,
   flagTypeFrete=newflagTypeFrete,
   flagRetemPisCofins=newflagRetemPisCofins,
   flagAbateFunrural=newflagAbateFunrural,
   idfuncionario=newidfuncionario,
   idFinalizadoraPadrao=newIdFinalizadoraPadrao,
   idMetodoPadrao=newIdMetodoPadrao, margemTransf=newmargemTransf,
   idOperacaoEntrada=newidOperacaoEntrada
where
	idParamentro=newidparamentro;
end $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `conector_alt_parcela`
--

DROP PROCEDURE IF EXISTS `conector_alt_parcela`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='' */ $$
CREATE DEFINER=`master`@`localhost` PROCEDURE `conector_alt_parcela`(
  `newidcrediario` DOUBLE,
  `newnr_parcela` INT,
  `newPagamento` char(8),
  `newstatus` CHAR(1),
  `newobservacao` VARCHAR(30),
  `newvalorPago` DECIMAL(15,3),
  `newacrescimo` DECIMAL(15,3),
  `newdesconto` DECIMAL(15,3))
begin
    update parcela
                set
                `pagamento`=`newPagamento`,
                `status`=`newstatus`,
                `observacao`=`newobservacao`,
                `valorPago`=(`valorPago` + `newvalorPago`),
                `acrescimo`=`newacrescimo`,
                `desconto`=`newdesconto`
                        where
                            `idcrediario`=`newidcrediario` and `nr_parcela`=`newnr_parcela`;

  end $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `conector_alt_pedidoCompra`
--

DROP PROCEDURE IF EXISTS `conector_alt_pedidoCompra`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='' */ $$
CREATE DEFINER=`master`@`localhost` PROCEDURE `conector_alt_pedidoCompra`(
	  in `newidpedidoCompra` DOUBLE,
	  in `newidloja` INT,
	  in `newidclienteFornecedor` INT,
	  in `newdata` DATE,
	  in `newidfuncionario` INT,
	  in `newidusuario` INT,
	  in `newproximaVisita` DATE,
	  in `newitens` DECIMAL(15,3),
	  in `newfrete` DECIMAL(15,3),
	  in `newbonificacao` DECIMAL(15,3),
	  in `newfinanceiro` DECIMAL(15,3),
	  in `newtotalSubstituicao` DECIMAL(15,3),
	  in `newvendo` DECIMAL(15,3),
	  in `newpeso` DECIMAL(15,3),
	  in `newvalorIcmsSubstituicao` DECIMAL(15,3),
	  in `newacrescimos` DECIMAL(15,3),
	  in `newdesconto` DECIMAL(15,3),
    in `newvalorTotalProdutos` DECIMAL(15,3),
    in `newvalorTotalLiquido` DECIMAL(15,3),
	  in `newvalorTotal` DECIMAL(15,3),
	  in `newvalorPedente` DECIMAL(15,3),
	  in `newvalorRecebido` DECIMAL(15,3),
	  in `newrede` smallint(6),
	  in `newsomaFrete` smallint(6),
	  in `newsomaSubstituicao` smallint(6),
	  in `newflagRecebimento` VARCHAR(8),
	  in `newflagAlteracao` VARCHAR(8),
	  in `newtypeFrete` CHAR(1),
	  in `newidrepresentante` INT,
	  in `newidtransportadora` INT,
	  in `newseuPedido` VARCHAR(12) ,
	  in `newobservacao` VARCHAR(100) ,
	  in `newvolume`  DECIMAL(15,3),
	  in `newconfeccaoPrice` VARCHAR(1) ,
    in newacceptBoni boolean,
    in `newporcentagemFrete` DECIMAL(15,3),
    in `newporcentagemVendo` DECIMAL(15,3),
    in `newporcentagemFinanceiro` DECIMAL(15,3),
    in `newporcentagemDesconto` DECIMAL(15,3),
    in `newporcentagemBonificacao` DECIMAL(15,3),
    in newsomaDiscount boolean,
    in newsomaBoni boolean,
	  in `newsaldo` CHAR(1)
	)
begin
update pedidoCompra
    set
                    idclienteFornecedor=newidclienteFornecedor,
                    data=newdata,
                    idfuncionario=newidfuncionario,
                    idusuario=newidusuario,
                    proximaVisita=newproximaVisita,
                    itens=newitens,
                    frete=newfrete,
                    bonificacao=newbonificacao,
                    financeiro=newfinanceiro,
                    totalSubstituicao=newtotalSubstituicao,
                    vendo=newvendo,
                    peso=newpeso,
                    valorIcmsSubstituicao=newvalorIcmsSubstituicao,
                    acrescimos=newacrescimos,
                    desconto=newdesconto,
                   `valorTotalProdutos`=`newvalorTotalProdutos`,
                   `valorTotalLiquido`=`newvalorTotalLiquido`,
                    valorTotal=newvalorTotal,
                    valorPedente=newvalorPedente,
                    valorRecebido=newvalorRecebido,
                    rede=newrede,
                    somaFrete=newsomaFrete,
                    somaSubstituicao=newsomaSubstituicao,
                    flagRecebimento=newflagRecebimento,
                    flagAlteracao=newflagAlteracao,
                    typeFrete=newtypeFrete,
                    idrepresentante=newidrepresentante,
                    idtransportadora=newidtransportadora,
                    seuPedido=newseuPedido,
                    observacao=newobservacao,
                    volume=newvolume,
                    confeccaoPrice=newconfeccaoPrice,
                    acceptBoni=newacceptBoni,
                    `porcentagemFrete`=`newporcentagemFrete`,
                    `porcentagemVendo`=`newporcentagemVendo`,
                    `porcentagemFinanceiro`=`newporcentagemFinanceiro`,
                    `porcentagemDesconto`=`newporcentagemDesconto`,
                    `porcentagemBonificacao`=`newporcentagemBonificacao`,
                    somaDiscount=newsomaDiscount,
                    somaBoni=newsomaBoni,
                    saldo=newsaldo
where
	idPedidoCompra = newIdPedidoCompra and idLoJA = newidLoja;
END $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `conector_alt_pedidoCompraItens`
--

DROP PROCEDURE IF EXISTS `conector_alt_pedidoCompraItens`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='' */ $$
CREATE DEFINER=`root`@`localhost` PROCEDURE `conector_alt_pedidoCompraItens`(
  in `newidpedidoCompra` DOUBLE,
  in `newsequencial` int,
  in `newidProduto` INT,
  in `newcustoLiquido` DECIMAL(15,3),
  in `newcustoBruto` DECIMAL(15,3),
  in `newcustoNota` DECIMAL(15,3) ,
  in `newcustoNotaTotal` DECIMAL(15,3) ,
  in `newcustoReposicao` DECIMAL(15,3),
  in `newcustoTotal` DECIMAL(15,3),
  in `newdiscount1` DECIMAL(15,3),
  in `newdiscount2` DECIMAL(15,3),
  in `newdiscount3` DECIMAL(15,3),
  in `newdiscountValue` DECIMAL(15,3),
  in `newacrescimo` DECIMAL(15,3),
  in `newbonificacao` DECIMAL(15,3),
  in `newdespesasNaoTributadas` DECIMAL(15,3),
  in `newdespesasTributadas` DECIMAL(15,3),
  in `newchaveEmbalagem` INT,
  in `newbarra` DOUBLE,
  in `newidunidadeMedida` INT(11) ,
  in `newentregue` VARCHAR(1),
  in `newfinanceiro` DECIMAL(15,3),
  in `newfrete` DECIMAL(15,3),
  in `newicmsEntrada` DECIMAL(15,3),
  in `newreducaoEntrada` DECIMAL(15,3),
  in `newicmsFrete` DECIMAL(15,3),
  in `newicmsSaida` DECIMAL(15,3),
  in `newreducaoSaida` DECIMAL(15,3),
  in `newipi` DECIMAL(15,3),
  in `newpriceVenda` DECIMAL(15,3),
  in `newquantidade` DECIMAL(15,3),
  in `newsugestao` DECIMAL(15,3),
  in `newvalorIpi` DECIMAL(15,3),
  in `newsubstituicao` DECIMAL(15,3),
  in `newsugestaoCompra` DECIMAL(15,3),
  in `newlucro` DECIMAL(15,3),
  in `newlucroValor` DECIMAL(15,3),
  in `newlucroBruto` DECIMAL(15,3),
  in `newquantidadeRecebida` DECIMAL(15,3),
  in `newquantidadePendente` DECIMAL(15,3),
  in `newcreditoIcms` DECIMAL(15,3),
  in `newcreditoPis` DECIMAL(15,3),
  in `newcreditoCofins` DECIMAL(15,3),
  in `newbaseCalculoSubstituicao` DECIMAL(15,3),
  in `newicmsSt` DECIMAL(15,3),
  in `newacrescimoSubstituicao` DECIMAL(15,3),
  in `newvalorFinanceiro` DECIMAL(15,3),
  in `newvalorFrete` DECIMAL(15,3),
  in `newsumFrete` boolean,
  in `newmargem` DECIMAL(15,3),
  in  newsumSt smallint
 )
begin
update pedidoCompraItens
set
     `idProduto` = `newidProduto`,
     `custoLiquido` = `newcustoLiquido`,
     `custoBruto` = `newcustoBruto`,
     `custoNota` = `newcustoNota`,
     `custoNotaTotal` = `newcustoNotaTotal`,
     `custoReposicao` = `newcustoReposicao`,
     `custoTotal` = `newcustoTotal`,
     `discount1` = `newdiscount1`,
     `discount2` = `newdiscount2`,
     `discount3` = `newdiscount3`,
     `discountValue` = `newdiscountValue`,
     `acrescimo` = `newacrescimo`,
     `bonificacao` = `newbonificacao`,
     `despesasNaoTributadas`=`newdespesasNaoTributadas`,
     `despesasTributadas` = `newdespesasTributadas`,
     `chaveEmbalagem` = `newchaveEmbalagem`,
     `barra` = `newbarra`,
     `idunidadeMedida` = `newidunidadeMedida`,
     `entregue` = `newentregue`,
     `financeiro` = `newfinanceiro`,
     `frete` = `newfrete`,
     `icmsEntrada` = `newicmsEntrada`,
     `reducaoEntrada` = `newreducaoEntrada`,
     `icmsFrete` = `newicmsFrete`,
     `icmsSaida` = `newicmsSaida`,
     `reducaoSaida` = `newreducaoSaida`,
     `ipi` = `ipi`,
     `priceVenda` = `newpriceVenda`,
     `quantidade` = `newquantidade`,
     `sugestao` = `newsugestao`,
     `valorIpi` = `newvalorIpi`,
     `substituicao` = `newsubstituicao`,
     `sugestaoCompra` = `newsugestaoCompra`,
     `lucro` = `newlucro`,
     `lucroValor` = `newlucroValor`,
     `lucroBruto` = `newlucroBruto`,
     `quantidadeRecebida` = `newquantidadeRecebida`,
     `quantidadePendente` = `newquantidadePendente`,
     `creditoIcms` = `newcreditoIcms`,
     `creditoPis` = `newcreditoPis`,
     `creditoCofins` =  `newcreditoCofins`,
     `baseCalculoSubstituicao` = `newbaseCalculoSubstituicao`,
     `icmsSt` = `newicmsSt`,
     `acrescimoSubstituicao` = `newacrescimoSubstituicao`,
     `valorFinanceiro`= `newvalorFinanceiro`,
     `valorFrete` = `newvalorFrete`,
     `sumFrete`=`newsumFrete`, margem = newmargem, sumSt = newsumSt
	where
     `idpedidoCompra` = newIdpedidoCompra and
      `sequencial` = newsequencial;
end $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `conector_alt_pedidoFinanceiro`
--

DROP PROCEDURE IF EXISTS `conector_alt_pedidoFinanceiro`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='' */ $$
CREATE DEFINER=`master`@`localhost` PROCEDURE `conector_alt_pedidoFinanceiro`(
  `newidpedido` DOUBLE,
  `newidloja` INT(11),
  `newidmetodo` INT(11),
  `newidterminal` INT(11),
  `newidfinalizadora` INT(11),
  `newidfuncionario` INT(11),
  `newemissao` DATE,
  `newreferencia` DECIMAL(15,3),
  `newencargos` DECIMAL(15,3),
  `newentrada` DECIMAL(15,3),
  `newnumeroParcelas` INT(11),
  `newobservacao` VARCHAR(100)
)
begin
update
	pedidoFinanceiro
set
  `idmetodo`=`newidmetodo`,
  `idterminal`=`newidterminal`,
  `idfinalizadora`=`newidfinalizadora`,
  `idfuncionario`=`newidfuncionario`,
  `emissao`=`newemissao`,
  `referencia`=`newreferencia`,
  `encargos`=`newencargos`,
  `entrada`=`newentrada`,
  `numeroParcelas`=`newnumeroParcelas`,
  `observacao`=`newobservacao`
where
 `idpedido`=`newidpedido` and
  `idloja`=`newidloja`;

end $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `conector_alt_pedidoItens`
--

DROP PROCEDURE IF EXISTS `conector_alt_pedidoItens`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='' */ $$
CREATE DEFINER=`master`@`localhost` PROCEDURE `conector_alt_pedidoItens`(
  in newidpedido DOUBLE,
  in newidloja INT,
  in newidProduto varchar(45),
  in newidfuncionario INT,
  in newseq INT,
  in newsituacao INT(11),
  in newquantidade DECIMAL(15,3),
  in newpriceLiquido DECIMAL(15,3),
  in newprice DECIMAL(15,3),
  in newvalorDiscount DECIMAL(15,3),
  in newpriceFull DECIMAL(15,3),
  in newidEan INT,
  in newcodigoBarra DOUBLE,
  in newidunidadeMedida INT(11)
  )
begin
  DECLARE qtty numeric(15,3);
  DECLARE price1 numeric(15,3);
  DECLARE total numeric(15,3);
  DECLARE desconto numeric(15,3);

  set @prod=(select idProduto from produtoEmbalagem where barra=newidProduto);

update pedidoItens
	set
  `idfuncionario`=`newidfuncionario`,
  `situacao`=`newsituacao`,
  `quantidade`=`newquantidade`,
  `priceLiquido`=`newpriceLiquido`,
  `price`=`newprice`,
  `valorDiscount`=`newvalorDiscount`,
  `priceFull`=`newpriceFull`,
  `idEan`=`newidEan`,
  `codigoBarra`=newcodigoBarra,
  `idunidadeMedida`=newidunidadeMedida
where
   idPedido=newidpedido and
   idLoja=newidloja and
   idProduto=@prod and
   sequencial=newseq;

   select
      sum(quantidade),
      sum(priceLiquido),
      round(sum(quantidade*price),3) as teste,
      sum(valorDiscount)
from
      pedidoItens
where
   idPedido=newidpedido and
   idLoja=newidloja
into qtty,price1,total,desconto;

    update pedido set qttyItens=qtty,
                      valorLiquido = price1,
                      valorTotal = total,
                      discount =desconto
    where
           idPedido=newidpedido and
           idLoja=newidloja;

end $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `conector_alt_pisCofins`
--

DROP PROCEDURE IF EXISTS `conector_alt_pisCofins`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='' */ $$
CREATE DEFINER=`master`@`localhost` PROCEDURE `conector_alt_pisCofins`(
  in newid int,
  in `newdescricao` VARCHAR(30),
  in `newcofinSt` CHAR(1),
  in `newpiSt` CHAR(1),
  in `newcreditoPis` CHAR(1),
  in `newcreditoCofins` CHAR(1),
  in `newservico` CHAR(1))
begin
update pisCofins
			set
                        `descricao`=`newdescricao`,
                        `cofinSt`=`newcofinSt`,
                        `piSt`=`newpiSt`,
                        `creditoPis`=`newcreditoPis`,
                        `creditoCofins`=`newcreditoCofins`,
                        `servico`=`newservico`
     where
                        idpisCofins = newid;

  
  end $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `conector_alt_pisCofinsAnexo`
--

DROP PROCEDURE IF EXISTS `conector_alt_pisCofinsAnexo`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='' */ $$
CREATE DEFINER=`master`@`localhost` PROCEDURE `conector_alt_pisCofinsAnexo`(
   newId int,
  `newidpisCofins` INT,
  `newaliquotaCreditoPis` DECIMAL(15,3),
  `newaliquotaCreditoCofins` DECIMAL(15,3),
  `newaliquotaDebitoPis` DECIMAL(15,3),
  `newaliquotaDebitoCofins` DECIMAL(15,3),
  `newvigencia` DATE,
  `newincideIpi` smallint(6),
  `newincideSt` smallint(6),
  `newtypeAtividade` VARCHAR(45),
  `newidTable_Codigo` INT,
  `newtable_codigo` VARCHAR(3),
  `newcstPisEntrada` VARCHAR(3),
  `newcstCofinsEntrada` VARCHAR(3),
  `newcstPisSaida` VARCHAR(3),
  `newcstCofinsSaida` VARCHAR(3),
  `newgeraDebitoIcms` smallint(6),
  `newgeraCreditoIcms` smallint(6),
   newsubDescricao varchar(100))
begin
update pisCofinsAnexo
			set
				`aliquotaCreditoPis`=`newaliquotaCreditoPis`,
				`aliquotaCreditoCofins`=`newaliquotaCreditoCofins`,
				`aliquotaDebitoPis`=`newaliquotaDebitoPis`,
				`aliquotaDebitoCofins`=`newaliquotaDebitoCofins`,
				`vigencia`=`newvigencia`,
				`incideIpi`=`newincideIpi`,
				`incideSt`=`newincideSt`,
				`typeAtividade`=`newtypeAtividade`,
				`idTable_Codigo`=`newidTable_Codigo`,
				`table_codigo`=`newtable_codigo`,
				`cstPisEntrada`=`newcstPisEntrada`,
				`cstCofinsEntrada`=`newcstCofinsEntrada`,
				`cstPisSaida`=`newcstPisSaida`,
				`cstCofinsSaida`=`newcstCofinsSaida`,
        `geraDebitoIcms`=`newgeraDebitoIcms`,
        `geraCreditoIcms`=`newgeraCreditoIcms`,
        subDescricao = newsubDescricao
                where
										`idpisCofins`=`newidpisCofins` and
									         idpisCofinsAnexo = newId;
										          
end $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `conector_alt_price`
--

DROP PROCEDURE IF EXISTS `conector_alt_price`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='' */ $$
CREATE DEFINER=`master`@`localhost` PROCEDURE `conector_alt_price`(
                                      in find_produto integer,
                                      in find_loja integer,
                                      in new_custo numeric(15,3),
                                      in new_Price numeric(15,3),
                                      in new_status smallint(6),
                                      in new_lucroLiquido numeric(15,3),
                                      in new_lucroBruto numeric(15,3),
                                      in new_margem numeric(15,3),
                                      in new_sugestao numeric(15,3),
                                      in new_margemLiquida numeric(15,3),
                                      in new_margemBruta numeric(15,3)
                                   )
begin
  update
      produtoPrice
  set
      priceVenda=new_Price,
      margem=new_margem,
      lucroLiquido=new_lucroLiquido,
      lucroBruto=new_lucroBruto,
      priceSugestao=new_sugestao,
      statusPrice=new_status,
      margemLiquida=new_margemLiquida,
      margemBruta = new_margemBruta,
      pricePendente = 0
  where
      idProduto=find_produto
  and
      idLoja=find_loja;
end $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `conector_alt_produto`
--

DROP PROCEDURE IF EXISTS `conector_alt_produto`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='' */ $$
CREATE DEFINER=`master`@`localhost` PROCEDURE `conector_alt_produto`(
                                        in new_idProduto integer,
                                        in new_idLoja integer,
                                        in new_nome varchar(45),
                                        in new_nomePdv varchar(15),
                                        in new_nomeFull varchar(60),
                                        in new_observacao varchar(100),
                                        in new_status boolean,
                                        in new_dataAlteracao date,
                                        in new_idSetor integer,
                                        in new_idGrupo integer,
                                        in new_idCategoria integer,
                                        in new_idfornecedor integer,
                                        in new_idUsuarioAlt integer,
                                        in new_qttyObrigatoria boolean,
                                        in new_qttyMaximaVenda integer,
                                        in new_DescontoIndividual integer,
                                        in new_Restrito boolean,
                                        in new_idunidade integer,
                                        in new_tipo integer,
                                        in new_incideIpi boolean,
                                        in `new_inputCfop` varchar(10),
                                        in `new_outputCfop` varchar(10),
                                        in new_permitiMultiplicacao boolean
                                     )
begin

start Transaction;

    update

        produto
    set
        nome=new_nome,
        nomePdv=new_nomePdv,
        nomeFull=new_nomeFull,
        observacao=new_observacao,
        status=new_status,
        dataAlteracao=new_dataAlteracao,
        idSetor=new_idSetor,
        idGrupo=new_idGrupo,
        idCategoria=new_idCategoria,
        incideIpi=new_incideIpi,
        idfornecedor=new_idfornecedor,
        idUsuarioAlt=new_idUsuarioAlt,
        qttyObrigatoria = new_qttyObrigatoria,
        qttyMaxima= new_qttyMaximaVenda,
        descontoIndividual = new_DescontoIndividual ,
        restrito = new_Restrito,
        idunidade = new_idunidade,
        tipo = new_tipo,
        inputCfop=`new_inputCfop`,
        `outputCfop`=`new_outputCfop`,
        permitiMultiplicacao=new_permitiMultiplicacao
    where
        idProduto=new_idProduto;
    COMMIT;
end $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `conector_alt_produtoImpostos`
--

DROP PROCEDURE IF EXISTS `conector_alt_produtoImpostos`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='' */ $$
CREATE DEFINER=`master`@`localhost` PROCEDURE `conector_alt_produtoImpostos`(
  in `newImpidProduto` INT,
  in `newImpidloja` INT,
  in `newImptributacao` CHAR(2),
  in `newImptributacao1` CHAR(2),
  in `newImptributacao2` CHAR(2),
  in `newImpidpisCofins` INT,
  in `newImpcst` CHAR(3),
  in `newImpcstSaida` CHAR(3),
  in `newImpcstEntrada` CHAR(3),
  in `newImppauta` INT(11),
  in `newImpipi` DECIMAL(15,3),
  in `newImpipiValor` DECIMAL(15,3) ,
  in `newImpspedNcm` CHAR(30),
  in `newImpimpMercadoInterno` DECIMAL(15,3),
  in `newImpcsosn` VARCHAR(3),
  in `newImpidtypeItem` VARCHAR(2),
  in `newImpidGenero` INT,
  in `newreducaoCalcEspecial` decimal(15,3),
  in  newippt varchar(1))
begin
  
  update produtoImpostos 
            set
  
   `tributacao`=`newImptributacao`,
   `idpisCofins`=`newImpidpisCofins`,
   `cst`=`newImpcst`,
   `cstSaida`=`newImpcstSaida`,
   `cstEntrada`=`newImpcstEntrada`,
   `pauta`=`newImppauta`,
   `ipi`=`newImpipi`,
   `ipiValor`=`newImpipiValor`,
   `spedNcm`=`newImpspedNcm`,
   `impMercadoInterno`=`newImpimpMercadoInterno`,
   `csosn`=`newImpcsosn`,
   `idtypeItem`=`newImpidtypeItem`,
   `idGenero`=`newImpidGenero`,
   `tributacao1`=`newImptributacao1`,
   `tributacao2`=`newImptributacao2`,
    reducaoCalcEspecial =newreducaoCalcEspecial, ippt=newippt
   
   where
   `idProduto`=`newImpidProduto` and
   `idloja`=`newImpidloja`;
  end $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `conector_alt_produtoPrice`
--

DROP PROCEDURE IF EXISTS `conector_alt_produtoPrice`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='' */ $$
CREATE DEFINER=`master`@`localhost` PROCEDURE `conector_alt_produtoPrice`(	
	in newidProduto INT,
	in newidloja INT,
  in newpriceFull numeric(15,3),
	in newpriceVenda NUMERIC(15,3),
	in newpricePendente NUMERIC(15,3),
	in newcreditoIcms NUMERIC(15,3),
	in newcreditoRedIcms NUMERIC(15,3),
	in newcreditoPis NUMERIC(5,3),
	in newcreditoCofins NUMERIC(5,3),
	in newcreditoOutros NUMERIC(5,3),
	in newprimeiroDesconto NUMERIC(5,3),	
	in newsegundoDesconto NUMERIC(5,3),
	in newterceiroDesconto NUMERIC(5,3),
	in newdebitoIcms NUMERIC(15,3),
	in newdebitoRedIcms NUMERIC(15,3),
	in newlucroLiquido NUMERIC(15,3),
	in newlucroBruto NUMERIC(15,3),
	in newcustoBruto NUMERIC(15,3),
	in newcustoliquido NUMERIC(15,3),
	in newcustoMedio NUMERIC(15,3),
	in newIpiPorcentagem NUMERIC(5,3),
	in newmoedaIpi NUMERIC(5,3),
	in newmoedaFrete NUMERIC(15,3),
	in newfretePorcentagem NUMERIC(5,3),
	in newcomissao NUMERIC(5,3),
	in newpriceSugestao NUMERIC(15,3),
	in newsubstituicaoPorcetagem NUMERIC(5,3),
	in newacrescimoSubstituicao NUMERIC(5,3),
	in newmoedaSubstituicao NUMERIC(15,3),
	in newbonificacaoDesconto NUMERIC(5,3),
	in newmoedaBonificacao NUMERIC(15,3),
	in newmargem NUMERIC(15,3),
	in newdescontoMaximo NUMERIC(5,3),
	in newdespesasTributadas NUMERIC(15,3),
	in newdespesaNaoTributadas NUMERIC(15,3),
	in newcontribuicao NUMERIC(15,3),
	in newvendo NUMERIC(15,3),
	in newfinanceiro NUMERIC(15,3),
	in newdespesaFixa NUMERIC(15,3),
	in newstatusPrice CHAR(1),
  in newdescontoValor numeric(15,3),
  in newMargemBruta numeric(15,3),
  in newMargemLiquida numeric(15,3), newtrunca varchar(1)
)
begin

update produtoPrice
	set
    idloja=newidloja,
    priceFull=newpriceFull,
    priceVenda=newpriceVenda,
    pricePendente=newpricePendente,
    creditoIcms=newcreditoIcms,
    creditoRedIcms=newcreditoRedIcms,
    creditoPis=newcreditoPis,
    creditoCofins=newcreditoCofins,
    creditoOutros=newcreditoOutros,
    primeiroDesconto=newprimeiroDesconto,
    segundoDesconto=newsegundoDesconto,
    terceiroDesconto=newterceiroDesconto,
    debitoIcms=newdebitoIcms,
    debitoRedIcms=newdebitoRedIcms,
    lucroLiquido=newlucroLiquido,
    lucroBruto=newlucroBruto,
    custoBruto=newcustoBruto,
    custoliquido=newcustoliquido,
    custoMedio=newcustoMedio,
    IpiPorcentagem=newIpiPorcentagem,
    moedaIpi=newmoedaIpi,
    moedaFrete=newmoedaFrete,
    fretePorcentagem=newfretePorcentagem,
    comissao=newcomissao,
    priceSugestao=newpriceSugestao,
    substituicaoPorcetagem=newsubstituicaoPorcetagem,
    acrescimoSubstituicao=newacrescimoSubstituicao,
    moedaSubstituicao=newmoedaSubstituicao,
    bonificacaoDesconto=newbonificacaoDesconto,
    moedaBonificacao=newmoedaBonificacao,
    margem=newmargem,
    descontoMaximo=newdescontoMaximo,
    despesasTributadas=newdespesasTributadas,
    despesaNaoTributadas=newdespesaNaoTributadas,
    contribuicao=newcontribuicao,
    vendo=newvendo,
    financeiro=newfinanceiro,
    despesaFixa=newdespesaFixa,
    statusPrice=newstatusPrice,
    descontoValor=newdescontoValor,
    margemBruta=newMargemBruta,
    margemLiquida=newMargemLiquida, trunca=newtrunca
where
	    idloja=newidloja and idProduto=newidProduto;
end $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `conector_alt_profissao`
--

DROP PROCEDURE IF EXISTS `conector_alt_profissao`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='' */ $$
CREATE DEFINER=`master`@`localhost` PROCEDURE `conector_alt_profissao`(
                                            in newId integer,
                                            in newDescricao varchar(45),
                                            in newStatus boolean
                                          )
begin
update profissao
set    descricao=newDescricao,
       status = newStatus
       where idprofissao=newId;
end $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `conector_alt_promocao`
--

DROP PROCEDURE IF EXISTS `conector_alt_promocao`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='' */ $$
CREATE DEFINER=`root`@`%` PROCEDURE `conector_alt_promocao`(
   newidPromocao double,
  `newidProduto` double,
  `newidloja` double,
  `newdateFinal` date,
  `newtipoPromocao` int,
  `newqttyDisponivel` decimal(15,3),
  `newleve`  decimal(15,3),
  `newpague` decimal(15,3),
  `newprecoVenda` decimal(15,3),
  `newprecoPromocional` decimal(15,3),
  `newidFinalizadora`  int(11),
  `newidFornecedor` int(11),
  `newidSetor` int,
  `newidGrupo` int,
  `newidCategoria` int,
  `newtodasFinalizadora` smallint,
  `newtodasLojas` smallint,
  `newtodosProdutos` smallint,
  `newquantidadeMaxLevePague` decimal(15,3),
  `newdescontoCalc` decimal(15,3),
  `newdescontoAplicadoSetor`  decimal(15,3),
  `newcustoLiquido` decimal(15,3),
   newValidade smallint,
   newUser int)
begin
  update promocao
            set
    `dateFinal`=`newdateFinal`,
    `tipoPromocao`=`newtipoPromocao`,
    `qttyDisponivel`=`newqttyDisponivel`,
    `usuarioAlt`=newUser,
     dataAlt=now(),
    `horaAlt`=now(),
    `leve`=`newleve`,
    `pague`=`newpague`,
    `precoVenda`=`newprecoVenda`,
    `precoPromocional`=`newprecoPromocional`,
    `idFinalizadora`=`newidFinalizadora`,
    `idFornecedor`=`newidFornecedor`,
    `idSetor`=`newidSetor`,
    `idGrupo`=`newidGrupo`,
    `idCategoria`=`newidCategoria`,
    `todasFinalizadora`=`newtodasFinalizadora`,
    `todasLojas`=`newtodasLojas`,
    `todosProdutos`=`newtodosProdutos`,
    `quantidadeMaxLevePague`=`newquantidadeMaxLevePague`,
    `descontoCalc`=`newdescontoCalc`,
    `descontoAplicadoSetor`=`newdescontoAplicadoSetor`,
    `custoLiquido`=`newcustoLiquido`,
     validade=newvalidade 
            where     
            `idProduto`=`newidProduto` and 
             idPromocao=newidPromocao and
            `idloja`=`newidloja`;
  end $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `conector_alt_rateioEntrada`
--

DROP PROCEDURE IF EXISTS `conector_alt_rateioEntrada`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='' */ $$
CREATE DEFINER=`master`@`localhost` PROCEDURE `conector_alt_rateioEntrada`(find varchar(45))
begin
    declare VarTypeNota char(1);
    declare VarTotalNota decimal(15,3);
    declare VarValorFrete decimal(15,3);
    declare VarRateio decimal(15,3) default 0;
    
    select sum(valor)
            from entradaConhecimento
                                     WHERE
                                         chaveEntrada=find
                                                          into 
                                                               VarTotalNota;
    SELECT valorTotalNota, typeNota 
                        from entrada 
                                    where
                                            idEntrada=find
                                                            into
                                                               VarValorFrete,
                                                               VarTypeNota;    
                                                                         

            
        if(VarTypeNota is not null and VarTypeNota = "f")then
            set VarRateio = ((VarValorFrete/VarTotalNota)*100);

            update entradaConhecimento 
                           set rateio=VarRateio
                                            where
                                                    chaveEntrada=find;
            update
                   entrada
                        set frete = VarRateio
                                            where
                                                idEntrada=find;
        end if;            
end $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `conector_alt_reserva`
--

DROP PROCEDURE IF EXISTS `conector_alt_reserva`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='' */ $$
CREATE DEFINER=`root`@`localhost` PROCEDURE `conector_alt_reserva`(
  in newIdPedido int,
  in newidloja INT,
  in newidfuncionario INT,
  in newidcliente INT,
  in newpdv INT,
  in newidparamentro INT,
  in newidmetodo INT,
  in newstatus int(11),
  in newusuario INT,
  in `newgeraEntrega` smallint(6),
  in `newgeraMontagem` smallint(6),
  in `newsinal` varchar(8),
  in newEntrada date
)
begin
update  conector.pedido
set
  idfuncionario=newIdFuncionario,
  idcliente = newidcliente,
  pdv = newpdv,
  idparamentro = newidparamentro,
  idmetodo = newidMetodo,
  status = newstatus,
  usuario = newusuario,
  geraEntrega = `newgeraEntrega`,
  geraMontagem = `newgeraMontagem`,
  sinal = `newsinal`,
  entrada = newEntrada
where
    idloja =   newidloja and 
    idPedido = newIdPedido;

end $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `conector_alt_rural`
--

DROP PROCEDURE IF EXISTS `conector_alt_rural`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='' */ $$
CREATE DEFINER=`master`@`localhost` PROCEDURE `conector_alt_rural`(
                                    in alt_idcliente integer,
                                    in alt_cpf varchar(12),
                                    in alt_idatividade integer,
                                    in alt_nome varchar(45),
                                    in alt_identidade varchar(45),
                                    in alt_ie varchar(30),
                                    in alt_nascimento date,
                                    in alt_idsexo integer,
                                    in alt_idcivil integer,
                                    in alt_idTipoFornecedor integer
)
BEGIN
start Transaction;
update
            rural
        set
            idcliente=alt_idcliente,
            idatividade=alt_idatividade,
            cpf=alt_cpf,
            nome=alt_nome,
            identidade=alt_identidade,
            ie=alt_ie,
            nascimento=alt_nascimento,
            idsexo=alt_idsexo,
            idcivil=alt_idcivil,
            idTipoFornecedor = alt_idTipoFornecedor
        where
            rural.idcliente=alt_idcliente and
            rural.idatividade=alt_idatividade;
commit;
END $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `conector_alt_setor`
--

DROP PROCEDURE IF EXISTS `conector_alt_setor`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='' */ $$
CREATE DEFINER=`master`@`localhost` PROCEDURE `conector_alt_setor`(
                                                    in newid integer,
                                                    in newdescricao varchar(45),
                                                    in newmargem numeric(15,3),
                                                    in newstatus bool,
                                                    in newcomissao numeric(15,3),
                                                    in newpremiacao numeric(15,3)
                                                 )
BEGIN
start Transaction;
        update 
                setor
        set
                descricao=newdescricao, margem=newmargem,status=newstatus, comissao=newcomissao, premiacao=newpremiacao
        where 
                idsetor=newid;
commit;
END $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `conector_alt_spedncm`
--

DROP PROCEDURE IF EXISTS `conector_alt_spedncm`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='' */ $$
CREATE DEFINER=`master`@`localhost` PROCEDURE `conector_alt_spedncm`(in ncm varchar(30), in newdescricao varchar(100), in newmvaMain decimal(15,3),
                                        in `newaliquotaInterestadual` DECIMAL(15,3),
                                        in `newaliquotaInterna` DECIMAL(15,3),
                                        in `newmvaAjustada` DECIMAL(15,3))
begin
  update spedncm
    set
      descricao=newdescricao,
      mvaMain=newmvaMain,
      `aliquotaInterestadual`=newaliquotaInterestadual,
      `aliquotaInterna`=newaliquotaInterna,
      `mvaAjustada`=newmvaAjustada
      
      where idSpedNcm=ncm;
end $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `conector_alt_statusClienteRisco`
--

DROP PROCEDURE IF EXISTS `conector_alt_statusClienteRisco`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='' */ $$
CREATE DEFINER=`master`@`localhost` PROCEDURE `conector_alt_statusClienteRisco`(in find_cliente integer, in find_profissional integer)
begin
start Transaction;
    update clienteProfissional set default1=1 where idcliente =find_cliente and idClienteProfissional = find_profissional;
    update clienteProfissional set default1=0 where idcliente =find_cliente and idClienteProfissional != find_profissional;
commit;
end $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `conector_alt_statusLojaRelacionamento`
--

DROP PROCEDURE IF EXISTS `conector_alt_statusLojaRelacionamento`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='' */ $$
CREATE DEFINER=`root`@`%` PROCEDURE `conector_alt_statusLojaRelacionamento`(in find_origem integer, in find_destino integer)
begin
start Transaction;
    update lojaRelacionamento set flagRelacionamento=1 where idLojaOrigem = find_origem and idLojaDestino = find_destino;
    update lojaRelacionamento set flagRelacionamento=0 where idLojaOrigem = find_origem and idLojaDestino != find_destino;
commit;
end $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `conector_alt_tableFiscal`
--

DROP PROCEDURE IF EXISTS `conector_alt_tableFiscal`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='' */ $$
CREATE DEFINER=`master`@`localhost` PROCEDURE `conector_alt_tableFiscal`(
  in newidTable_Codigo int,
  in `newcodigo` VARCHAR(3),
  in `newidFiscal` INT,
  in `newdescricao` VARCHAR(45),
  in `newmodelo` VARCHAR(3),
  in `neworigemTipo` SMALLINT,
  in `newmovimentacao` SMALLINT,
  in `newnfecstpis` VARCHAR(3),
  in `newnfecstcofins` VARCHAR(3),
  in newimpostoAjuste smallint,
  in `newobservacao` VARCHAR(100),
  in `newstatus` smallint(6), in `newcodigoAjuste` VARCHAR(15))
begin
    update table_codigo
    set
   `codigo`=`newcodigo`,
   `codigoAjuste`=`newcodigoAjuste`,
   `descricao`=`newdescricao`,
   `modelo`=`newmodelo`,
   `origemTipo`=`neworigemTipo`,
   `movimentacao`=`newmovimentacao`,
   `nfecstpis`=`newnfecstpis`,
   `nfecstcofins`=`newnfecstcofins`,
   impostoAjuste=newimpostoAjuste,
   `observacao`=`newobservacao`,
   `status`=`newstatus`
   where `idFiscal` =`newidFiscal` and idTable_Codigo = newidTable_Codigo;
  end $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `conector_alt_terminal`
--

DROP PROCEDURE IF EXISTS `conector_alt_terminal`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='' */ $$
CREATE DEFINER=`master`@`localhost` PROCEDURE `conector_alt_terminal`(
  in newIdTerminal integer,
  in newidloja INTEGER,
  in newIdtypeTerminal INTEGER,
  in newdescricao VARCHAR(12),
  in newflagDesconto smallint(6),
  in newStatus smallint(6),
  in newOperacao int,
  in newMultiTarefa smallint(6)
                                      )
begin
update `Terminal` 
set
    idloja=newIdloja,
    idtypeTerminal=newIdtypeTerminal,
    descricao=newdescricao,
    flagDesconto=newflagDesconto,
    status=newStatus,
    operacao=newOperacao,
    multiTarefa=newMultiTarefa
where 
    idTerminal = newIdTerminal;
    end $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `conector_alt_terminalecfconfig`
--

DROP PROCEDURE IF EXISTS `conector_alt_terminalecfconfig`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='' */ $$
CREATE DEFINER=`master`@`localhost` PROCEDURE `conector_alt_terminalecfconfig`(

newterminal INT,
newcaixa INT,
newipCaixa VARCHAR(16),
newabeturaTroco SMALLINT,
newimprimiCheque SMALLINT,
newtimeBlock INT,
newblockTime SMALLINT,
newtrocaMercadoria SMALLINT,
newcarneRecebe SMALLINT,
newcodigoEmpresaTef VARCHAR(20),
newtrocoMax DECIMAL(15,3),
newutilizaTeclado SMALLINT,
newutilizaTef SMALLINT,
newutilizaBalanca SMALLINT,
newportTef VARCHAR(15),
newportBalanca VARCHAR(15),
newportEcf VARCHAR(15),
newfuncaoProgramada VARCHAR(1),
newmsgTef VARCHAR(30),
newidModeloEcf INT,
newautentica smallint,
newEmiteVinculo smallint,
newVinculoCrediario smallint,
newVinculoConvenio smallint,
newVinculoCartaoCredito smallint,
newVinculoCartaoDebito smallint,
newTypeTef smallint,
newAlertaSangria smallint,
newValueSangria decimal(15,3)
)
begin
    UPDATE
        `conector`.`terminalecfconfig`
    SET
        `ipCaixa` = newipCaixa,
        `abeturaTroco` = newabeturaTroco,
        `imprimiCheque` = newimprimiCheque,
        `timeBlock` = newtimeBlock,
        `blockTime` = newblockTime,
        `trocaMercadoria` = newtrocaMercadoria,
        `carneRecebe` = newcarneRecebe,
        `codigoEmpresaTef` = newcodigoEmpresaTef,
        `trocoMax` = newtrocoMax,
        `utilizaTeclado` = newutilizaTeclado,
        `utilizaTef` = newutilizaTef,
        `utilizaBalanca` = newutilizaBalanca,
        `portTef` = newportTef,
        `portBalanca` = newportBalanca,
        `portEcf` = newportEcf,
        `funcaoProgramada` = newfuncaoProgramada,
        `msgTef` = newmsgTef,
        `idModeloEcf` = newidModeloEcf,
        `autentica` = newautentica,
        emiteVinculo=newEmiteVinculo,
        vinculoCrediario=newVinculoCrediario,
        vinculoConvenio=newVinculoConvenio,
        vinculoCartaoCredito=newVinculoCartaoCredito ,
        vinculoCartaoDebito=newVinculoCartaoDebito, typeTef = newTypeTef,
        AlertaSangria=newAlertaSangria,
        ValueSangria=newValueSangria
    WHERE
        `terminal` = newterminal and
`caixa` = newcaixa;
end $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `conector_alt_tipopromocao`
--

DROP PROCEDURE IF EXISTS `conector_alt_tipopromocao`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='' */ $$
CREATE DEFINER=`master`@`localhost` PROCEDURE `conector_alt_tipopromocao`(
                                           newdescricao varchar(45),
                                           newidtipopromocao int)
begin
     update tipopromocao set
            descricao = newdescricao
     where
            idtipoPromocao = newidtipopromocao;
end $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `conector_alt_transportadora`
--

DROP PROCEDURE IF EXISTS `conector_alt_transportadora`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='' */ $$
CREATE DEFINER=`master`@`localhost` PROCEDURE `conector_alt_transportadora`(
  in `newidtransportadora` INT,
  in `newrazao` VARCHAR(40),
  in `newcnpj` VARCHAR(14),
  in `newie` VARCHAR(30),
  in `newabreviatura` VARCHAR(12),
  in `newcep` INT(11),
  in `newidspedMunicipio` INT(10),
  in `newstatus` smallint(6),
  in `newbairro` VARCHAR(45),
  in `newlogradouro` VARCHAR(45),
  in `newcomplemento` VARCHAR(60),
  in `newmunicipio` VARCHAR(45),
  in `newnumero` INT(11),
  in `newidestado` INT,
  in `newuf` CHAR(2)
)
begin
update transportadora
set
	   `razao`=`newrazao`,
	   `cnpj`=`newcnpj`,
	   `ie`=`newie`,
	   `abreviatura`=`newabreviatura`,
	   `cep`=`newcep`,
	   `idspedMunicipio`=`newidspedMunicipio`,
	   `status`=`newstatus`,
     `bairro`=`newbairro`,
     `logradouro`=`newlogradouro`,
     `complemento`=`newcomplemento`,
     `municipio`=`newmunicipio`,
     `numero`=`newnumero`,
     `idestado`=`newidestado`,
     `uf`=`newuf`
where
	   `idtransportadora`=`newidtransportadora`;
end $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `conector_alt_usuario`
--

DROP PROCEDURE IF EXISTS `conector_alt_usuario`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='' */ $$
CREATE DEFINER=`master`@`localhost` PROCEDURE `conector_alt_usuario`(
  newId integer,
  newdescricao VARCHAR(45),
  newlogin CHAR(15),
  newterminalVenda smallint(6),
  newterminalConsulta smallint(6),
  newterminalECF smallint(6),
  newterminalAnaliseCredito smallint(6),
  newterminalMataBurro smallint(6),
  newstatus smallint(6),
  newsupervisor smallint(6),
  newcadastro DATE,
  newonlyLogon char(1),
  newdefaultLoja integer
                                     )
begin
update 
	conector.usuario 
set
  descricao=newdescricao,
  login=newlogin,
  terminalVenda=newterminalVenda,
  terminalConsulta=newterminalConsulta,
  terminalECF=newterminalECF,
  terminalAnaliseCredito=newterminalAnaliseCredito,
  terminalMataBurro=newterminalMataBurro,
  status=newstatus,
  supervisor=newsupervisor,
  cadastro=newcadastro,
  onlyLogon=newonlyLogon,
  defaultLoja=newdefaultLoja
where
   idUsuario=newId;
end $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `conector_alt_veiculo`
--

DROP PROCEDURE IF EXISTS `conector_alt_veiculo`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='' */ $$
CREATE DEFINER=`master`@`localhost` PROCEDURE `conector_alt_veiculo`(
  `newidtipoVeiculo` INT,
  `newdescricao` VARCHAR(45),
  `newidveiculo` INT,
  `newplaca` VARCHAR(12),
  `newuf` VARCHAR(2),
  `newrntc` VARCHAR(45) )
begin
   update veiculo 
            set
                `idtipoVeiculo`=`newidtipoVeiculo`,
                `descricao`=`newdescricao`,
                `placa`=`newplaca`,
                `uf`=`newuf`,
                `rntc`=`newrntc`
            where 
                `idveiculo`=`newidveiculo`;
  end $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `conector_analise_historico`
--

DROP PROCEDURE IF EXISTS `conector_analise_historico`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='' */ $$
CREATE DEFINER=`root`@`%` PROCEDURE `conector_analise_historico`( in find_cliente int(11),
                                             in df date,
                                             in di date)
begin
      declare varInclusaoCadastroCliente date;
      declare varNumberVendaNf int(11) default 0;
      declare varNumberVendaCupom int(11) default 0;
      declare varTotalCompraNf decimal(15,3) default 0;
      declare varTotalCompraCupom decimal(15,3) default 0;
      declare varMediaAtraso decimal(15,3) default 0;
      declare varRendaComprovada decimal(15,3) default 0;
      declare ParValueBuy decimal(15,3) default 0;
      declare ParTypeBuy int default 0;
      declare ParCountBuy decimal(15,3) default 0;

      declare varValorCompraCrediario decimal(15,3) default 0;
      declare varValorCompraCartao decimal(15,3) default 0;
      declare varValorCompraDinheiro decimal(15,3) default 0;
      declare varValorCompraCheque decimal(15,3) default 0;
      declare varValorCompraBoleto decimal(15,3) default 0;
      declare varValorCompraConvenio decimal(15,3) default 0;
      declare varValorCompraDuplicata decimal(15,3) default 0;
      declare varValorCompraVale decimal(15,3) default 0;

      declare varCountCompraCrediario decimal(15,3) default 0;
      declare varCountCompraCartao decimal(15,3) default 0;
      declare varCountCompraDinheiro decimal(15,3) default 0;
      declare varCountCompraCheque decimal(15,3) default 0;
      declare varCountCompraBoleto decimal(15,3) default 0;
      declare varCountCompraConvenio decimal(15,3) default 0;
      declare varCountCompraDuplicata decimal(15,3) default 0;
      declare varCountCompraVale decimal(15,3) default 0;
      declare varArranqueNf int default 0;
      declare varArranqueCupom int default 0;
      DECLARE done INT DEFAULT FALSE;

      

      select dataEmissao from cliente where idCliente=find_cliente into varInclusaoCadastroCliente;

      
    select
      ifnull(abs(round(avg(datediff(tab.vencimento,if(((tab.pagamento = '00000000') or (tab.pagamento is null)),now(),date_format(tab.pagamento, '%Y-%m-%d')))))),0)
                                                from parcela tab
                                                        inner join crediario tab1 on(tab.idCrediario = tab1.idCrediario)
                                                                                                    where tab1.idCliente=3 and
                                                                                                          datediff(tab.vencimento,if(((tab.pagamento = '00000000') or (tab.pagamento is null)),now(),date_format(tab.pagamento, '%Y-%m-%d'))) < 0 into varMediaAtraso;
     if(varMediaAtraso is null)then set varMediaAtraso=-1; end if;

      

        select salarioComprovado from clienteProfissional where idCliente=find_cliente into varRendaComprovada;
      if(varRendaComprovada is null)then set varRendaComprovada=0; end if;

      
      select count(*) from  nf, paramentro_faturamento tab1
                                                          where
                                                               nf.idparamentro=tab1.idparamentro and
                                                               tab1.flagParamentro='v' and
                                                               typenf=1 and 
                                                               idCliente=find_cliente into varArranqueNf;

      IF(varArranqueNf)THEN
          begin
             DECLARE basicFonte CURSOR for select ifnull(condPgto,0),
                                                   count(*),
                                                   sum(valorTotalNota)
                                                          from
                                                               nf, paramentro_faturamento tab1
                                                                      where
                                                                        nf.idparamentro=tab1.idparamentro and
                                                                        tab1.flagParamentro='v' and
                                                                        typenf=1 and 
                                                                        idCliente=find_cliente
                                                                               group by 1;

                          DECLARE CONTINUE HANDLER FOR NOT FOUND SET done = TRUE;
                          open basicFonte;

                      read_loop: LOOP

                                   fetch basicFonte into ParTypeBuy, ParValueBuy, ParCountBuy;

                    IF done THEN
                        LEAVE read_loop;
                    END IF;
                                    case ParTypeBuy
                                            when 1 then

                                              set varValorCompraDinheiro = ParValueBuy;
                                              set varCountCompraDinheiro = ParCountBuy;


                                            when 2 then

                                              set varValorCompraCheque = ParValueBuy;
                                              set varCountCompraCheque = ParCountBuy;


                                            when 3 then

                                              set varValorCompraCrediario = ParValueBuy;
                                              set varCountCompraCrediario = ParCountBuy;

                                            when 4 then

                                              set varValorCompraConvenio = ParValueBuy;
                                              set varCountCompraConvenio = ParCountBuy;

                                            when 5 then

                                              set varValorCompraCartao = varValorCompraCartao + ParValueBuy;
                                              set varCountCompraCartao = varCountCompraCartao + ParCountBuy;

                                            when 6 then

                                              set varValorCompraCartao = varValorCompraCartao + ParValueBuy;
                                              set varCountCompraCartao = varCountCompraCartao + ParCountBuy;

                                            when 7 then

                                              set varValorCompraBoleto = ParValueBuy;
                                              set varCountCompraBoleto = ParCountBuy;

                                            when 8 then

                                              set varValorCompraDuplicata = ParValueBuy;
                                              set varCountCompraDuplicata = ParCountBuy;

                                            when 10 then

                                              set varValorCompraVale = ParValueBuy;
                                              set varCountCompraVale = ParCountBuy;

                                            when 11 then

                                              set varValorCompraCartao = varValorCompraCartao + ParValueBuy;
                                              set varCountCompraCartao = varCountCompraCartao + ParCountBuy;

                                            when 12 then

                                              set varValorCompraVale = ParValueBuy;
                                              set varCountCompraVale = ParCountBuy;
                                end case;
                  set varNumberVendaNf=varNumberVendaNf + ParCountBuy;
                  set varTotalCompraNf=varTotalCompraNf + ParValueBuy;
            end loop;
        close basicFonte;
    end; 

    ELSE
        set varArranqueNf = 0;
   END IF;

end $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `conector_autentic_cx`
--

DROP PROCEDURE IF EXISTS `conector_autentic_cx`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='' */ $$
CREATE DEFINER=`root`@`localhost` PROCEDURE `conector_autentic_cx`(
`inc_idLoja` int,
`inc_idFuncionario` int,
`inc_idTerminal` int,
`inc_idFinalizadora` int,
`inc_emissao` datetime,
`inc_historico` varchar(100),
`inc_total` decimal(15,3),
`inc_reserva` double)
begin

INSERT INTO `conector`.`autentic_cx`
(`idLoja`,
`idFuncionario`,
`idTerminal`,
 idFinalizadora,
`emissao`,
`historico`,
`total`,
`reserva`)
VALUES
(
`inc_idLoja`,
`inc_idFuncionario`,
`inc_idTerminal`,
 inc_idFinalizadora,
`inc_emissao`,
`inc_historico`,
`inc_total`,
`inc_reserva`
);
end $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `conector_avanca_nota`
--

DROP PROCEDURE IF EXISTS `conector_avanca_nota`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='' */ $$
CREATE DEFINER=`root`@`localhost` PROCEDURE `conector_avanca_nota`(store double, tipo smallint)
begin
  declare VarSerie varchar(6);
  declare VarNota double;
  declare VarNotaNew double;
  declare VarLoteNfeNew double;
  declare VarLoteNfceNew double;
  declare VarSerieNf varchar(6);
  declare VarNotaNf double;

case tipo
    when 1 then
    select operacaoVendaCupom from system into @a;
select origemFixa,destinoFixo,
       cfop3,
       idTable_Codigo,
       modNotaFiscal,
       idSituacaoFiscal
       from conectorpdv.paramentro_faturamento where idParamentro=@a into @b,@c,@d,@e,@f,@g;

select idCliente from cliente where idCliente=@b into @c;

INSERT INTO `conector`.`nf`
(
`loja`,
`idcliente`,
`idparamentro`,
`idtransportadora`,
`cfop`,
`idFuncionario`,
`idusuario`,
`idpedido`,
`nr_nota`,
`serie`,
`acrescimo`,
`baseIcms`,
`baseIcmsIsento`,
`valorIcmsSubstituicao`,
`baseCalculoIcmsSubstituicao`,
`baseIPI`,
`baseCofins`,
`basePis`,
`emissao`,
`saida`,
`alteracao`,
`hora`,
`desconto`,
`uf`,
`itens`,
`seguro`,
`frete`,
`typeFrete`,
`valorIcms`,
`valorIpi`,
`valorPis`,
`valorCofins`,
`acrecismoValor`,
`descontoValor`,
`valorTotalLiquido`,
`valorTotalNota`,
`valorTotalProdutos`,
`volumes`,
`peso`,
`contribuicaoSocial`,
`quantidadePedido`,
`quantidadeRecebida`,
`impresso`,
`nr_impressao`,
`idTable_Codigo`,
`modNotaFiscal`,
`idSituacaoFiscal`,
`emitiNfe`,
`typenf`,
`msg01`,
`msg02`,
`msg03`,
`valorTotaServico`,
`nr_nota_entrada`,
`serie_entrada`,
`statusNf`,
`restituicao`,
`iss`,
`impostoRenda`,
`funrural`,
`valorTotalFunrural`,
`geraDanfe`,
`condPgto`,
`chave_nfe`,
`protocolo`,
`motivo`,
`versaoNfe`,
`dataHoraRecbNfe`)
VALUES
(
@b,
@c,
@a,
"0",
@d,
default,
4,
default,
default,
default,
default,
default,
default,
default,
default,
default,
default,
default,
default,
default,
default,
default,
default,
default,
default,
default,
default,
default,
default,
default,
default,
default,
default,
default,
default,
default,
default,
default,
default,
default,
default,
default,
default,
default,
@e,
@f,
@g,
default,
default,
default,
default,
default,
default,
default,
default,
default,
default,
default,
default,
default,
default,
default,
default,
default,
default,
default,
default,
default
);

select last_insert_id() into @x;

   update conector.loja
           set numeroNotaConsumidor=ifnull(numeroNotaConsumidor,0)+1,
               loteNfce=ifnull(loteNfce,0)+1 where idLoja=store;

   SELECT loteNfce,
          serieNfce,
          numeroNotaConsumidor
              FROM
                  conector.loja where idLoja=store into VarLoteNfceNew, VarSerie, VarNota;


    select VarLoteNfceNew,VarNota,VarSerie, ifnull(@x,0);


    when 2 then
   select ifnull(max(idPedido),0) from conector.pedido into @a;

   update conector.loja
           set numeroNota=ifnull(numeroNota,0)+1,
               loteNfe=ifnull(loteNfe,0)+1 where idLoja=store;
   SELECT
           loteNfe,
           serieNota,
           numeroNota
              FROM
                  conector.loja where idLoja=store into VarLoteNfeNew, VarSerieNf, VarNotaNf;


    select VarLoteNfeNew, VarNotaNf, VarSerieNf, @a;

    when 3 then
   update conector.loja
           set
               loteNfe=ifnull(loteNfe,0)+1 where idLoja=store;
   SELECT
           loteNfe
              FROM
                  conector.loja where idLoja=store into VarLoteNfeNew;


    select VarLoteNfeNew;

end case;

end $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `conector_between_financeiroXitens`
--

DROP PROCEDURE IF EXISTS `conector_between_financeiroXitens`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='' */ $$
CREATE DEFINER=`master`@`localhost` PROCEDURE `conector_between_financeiroXitens`(in findPedido double, in findLoja integer)
begin
    declare nr_finalizadora int default 0;
    declare vFutura int default 0;
    declare vliquido numeric(15,3) default 0;
    declare vreferencia numeric(15,3) default 0;
    declare vFinanceiro bool default false;
    declare vFinalizadora int default 0;
    declare vItens int default 0;
    declare vData date default now();
    declare vFinal smallint default 0;
    declare vEntrada numeric(15,3);


SELECT
      reserva_status(findPedido,findLoja)
                                        into vfutura;

select
      count(idProduto)
                    from
                        pedidoItens
                            where idPedido=findPedido and idLoja=findLoja into vItens;


if((select
      count(idFinalizadora)
                        from
                            pedidoFinanceiro where idPedido=findPedido and idLoja=findLoja) = 1)then
select
      referencia, idFinalizadora, entrada
        from
            pedidoFinanceiro
                where idPedido=findPedido and idLoja=findLoja into vreferencia, vFinalizadora, vEntrada;

set nr_finalizadora = 1;
if(vFinalizadora = 3)then   set vreferencia = vreferencia + vEntrada; end if;
else
select
      sum(referencia), sum(entrada)
        from
            pedidoFinanceiro
                where idPedido=findPedido and idLoja=findLoja into vreferencia, vEntrada;

if(vFinalizadora = 3)then   set vreferencia = vreferencia + vEntrada; end if;

select
      count(idFinalizadora)
                        from
                            pedidoFinanceiro where idPedido=findPedido and idLoja=findLoja
                                                                               into nr_finalizadora;
set vFinalizadora = 3;
end if;


select
        valorLiquido, expiracao, final
        from
            pedido
                where idPedido=findPedido and idLoja=findLoja
                                                  into vliquido, vData, vFinal;

 if(nr_finalizadora >= 1)then

      if(vFinalizadora = 3 || vFinalizadora = 7 || vFinalizadora = 8 || vFinalizadora = 2 || vFinalizadora = 5 || vFinalizadora = 4) then

        if(vItens > 0) then 
          if((select if((datediff(vData,date(now()))) >= 0, 0, 1)) = 0)then 
            if(vreferencia = vliquido)then
                if(vFutura > 0 && vfinal = 0) then 
                    update pedido set final=1  where idPedido=findPedido and idLoja=findLoja;
                    update pedido set status=10  where idPedido=findPedido and idLoja=findLoja; 
                         if (vFutura > 0 && vfinal = 1) then
                            update pedido set final=2  where idPedido=findPedido and idLoja=findLoja;
                            update pedido set status=4  where idPedido=findPedido and idLoja=findLoja; 
                                else if (vFutura > 0 && vfinal = 2) then
                                    update pedido set final=4  where idPedido=findPedido and idLoja=findLoja;
                        end if; 

                    end if; 

                else
                 if(vFutura > 0 && vfinal = 1)then
                                update pedido set final=2  where idPedido=findPedido and idLoja=findLoja;
                                update pedido set status=4  where idPedido=findPedido and idLoja=findLoja; 

                else
                    if(vFutura = 0 && vfinal = 0) then 
                             update pedido set final=1  where idPedido=findPedido and idLoja=findLoja;
                                update pedido set status=10  where idPedido=findPedido and idLoja=findLoja;
                                 else if (vFutura = 0 && vfinal = 1) then
                                    update pedido set final = 2  where idPedido=findPedido and idLoja=findLoja;
                                        update pedido set status=3  where idPedido=findPedido and idLoja=findLoja;

                                            else if (vFutura = 0 && vfinal = 2) then

                                            update pedido set final=4  where idPedido=findPedido and idLoja=findLoja;
                                        update pedido set status=5  where idPedido=findPedido and idLoja=findLoja;
                                end if; 
                            end if; 
                 end if; 
                end if;
                end if; 

              end if; 
            else update pedido set status=7  where idPedido=findPedido and idLoja=findLoja;
        end if; 
       end if; 

               else 

        if(vItens > 0) then 
          if((select if((datediff(vData,date(now()))) >= 0, 0, 1)) = 0)then 
            if(vreferencia = vliquido)then
                 if(vFutura > 0 && vfinal = 0) then
                    update pedido set final=1  where idPedido=findPedido and idLoja=findLoja;
                    update pedido set status=10  where idPedido=findPedido and idLoja=findLoja; 
                         if (vFutura > 0 && vfinal = 1) then
                            update pedido set final=2  where idPedido=findPedido and idLoja=findLoja;
                                 if (vFutura > 0 && vfinal = 2) then
                                    update pedido set final=4  where idPedido=findPedido and idLoja=findLoja;
                        end if;
                    end if;
                else
                if(vFutura > 0 && vfinal = 1)then
                                update pedido set final=2  where idPedido=findPedido and idLoja=findLoja;
                                update pedido set status=4  where idPedido=findPedido and idLoja=findLoja; 
                    else

                        if(vFutura = 0 && vfinal = 0) then
                            update pedido set final=1  where idPedido=findPedido and idLoja=findLoja; 
                            update pedido set status=10  where idPedido=findPedido and idLoja=findLoja; 
                        else if(vFutura = 0 && vfinal = 1)then
insert into bof(texto)values(Concat("Item06 : " ,vfinal ));
                            update pedido set final=2  where idPedido=findPedido and idLoja=findLoja; 
                            update pedido set status=3  where idPedido=findPedido and idLoja=findLoja; 
                         else if (vFutura = 0 && vfinal = 2) then 
                                update pedido set final=3  where idPedido=findPedido and idLoja=findLoja;
                                else if (vFutura = 0 && vfinal = 3) then
                                    update pedido set final=4  where idPedido=findPedido and idLoja=findLoja;
                                    else
                                    update pedido set final=5  where idPedido=findPedido and idLoja=findLoja;
                         end if;
                        end if;
                      end if;
                    end if;
                END IF;
                end if; 
            end if; 

          else update pedido set status=7  where idPedido=findPedido and idLoja=findLoja;
        end if; 
       end if; 

      end if;
       else
          update pedido set final=3  where idPedido=findPedido and idLoja=findLoja;
     end if; 
end $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `conector_calc_custoLiquido_lbc`
--

DROP PROCEDURE IF EXISTS `conector_calc_custoLiquido_lbc`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='' */ $$
CREATE DEFINER=`master`@`localhost` PROCEDURE `conector_calc_custoLiquido_lbc`(
                                              in find_produto integer,
                                              in find_loja integer,
                                              in price numeric(15,3),
                                              out pv numeric(15,3),
                                              out reposicao numeric(15,3),
                                              out venda numeric(15,3),
                                              out minimo numeric(15,3),
                                              out sugestao numeric(15,3),
                                              out margem numeric(15,3),
                                              out lbruto numeric(15,3),
                                              out lliquido numeric(15,3),
                                              out mBruto numeric(15,3),
                                              out mLiquida numeric(15,3)

                                           )
begin

    set @a = (select (price - ((price*primeiroDesconto)/100)) from produtoPrice where idProduto=find_produto and idLoja = find_loja);
    set @b = (select (@a - ((@a*segundoDesconto)/100)) from produtoPrice where idProduto=find_produto and idLoja = find_loja);
    set @c = (select (@b - ((@b*terceiroDesconto)/100)) from produtoPrice where idProduto=find_produto and idLoja = find_loja);
    set @d = (select ((@c*IpiPorcentagem)/100) as IPI from produtoPrice where idProduto=find_produto and idLoja = find_loja);
    set @e = (select ((@c*fretePorcentagem)/100) as Frete from produtoPrice where idProduto=find_produto and idLoja = find_loja);
    set @f = (select ((@c*substituicaoPorcetagem)/100) as ST from produtoPrice where idProduto=find_produto and idLoja = find_loja);
    set @g = (select (@c+@d+@e+@f) as ST from produtoPrice where idProduto=find_produto and idLoja= find_loja);
    set @h =  'select idproduto,@g as custo, (1 + (margem/100)) as margem, ';
    set @i =  '(@g-((@g * (if(creditoRedIcms > 0, (creditoIcms-sum((((creditoIcms*creditoRedIcms)/100)))),creditoIcms)+creditoPis+creditoCofins))/100)) "Custo Reposição", ';
    set @f1 = '(@g * (1 + (margem/100))) as "Preço Venda" , ';
    set @j =  '(@g * (1 + (5/100))) as "Preço Minimo", '; 
    set @l =  concat('((@g * (1 + (margem/100))) -', price, ') as "lucro bruto", ');
    set @m =  '(@g * (1 + (30/100))) as "Sugestao" , '; 
    set @n = '(((100*(@g * (1 + (margem/100))))-';
    set @o = '(((((if(debitoRedIcms > 0, (debitoIcms-sum((((debitoIcms*debitoRedIcms)/100)))),debitoIcms)+creditoPis+creditoCofins +(financeiro+despesaFixa+contribuicao+vendo)))/100))*(@g * (1 + (margem/100))))-';
    set @p = '(100*@g))';
    set @q  = '/';
    set @r = '@g) as "Margem Bruta", ';
    set @s = '((@g * (1 + (margem/100)))-';
    set @t = '((@g * (1 + (margem/100)))*';
    set @u = '((((if(debitoRedIcms > 0, (debitoIcms-sum((((debitoIcms*debitoRedIcms)/100)))),debitoIcms)+creditoPis+creditoCofins +(financeiro+despesaFixa+contribuicao+vendo)))/100)))) -';
    set @v = '(@g-((@g * (if(creditoRedIcms > 0, (creditoIcms-sum((((creditoIcms*creditoRedIcms)/100)))),creditoIcms)+creditoPis+creditoCofins))/100)) as "lucro liquido", ';
    set @z = '(100*((((@g * (1 + (margem/100)))-';
    set @w = '((@g * (1 + (margem/100)))*';
    set @y = '((((if(debitoRedIcms > 0, (debitoIcms-sum((((debitoIcms*debitoRedIcms)/100)))),debitoIcms)+creditoPis+creditoCofins +(financeiro+despesaFixa+contribuicao+vendo)))/100)))) - ';
    set @k = '(@g-((@g * (if(creditoRedIcms > 0, (creditoIcms-sum((((creditoIcms*creditoRedIcms)/100)))),creditoIcms)+creditoPis+creditoCofins))/100))) / @g)) as "margem liquida"';
    set @a1 =  ' into @produto, @custo,@margem, @reposicao, @venda, @minimo, @lbruto, @sugestao, @mbruta, @lliquido, @margemLiquida from produtoPrice where idProduto= ';
    set @b1 = find_produto;
    set @c1 = ' and idloja= ';
    set @d1 = find_loja;
    set @e1 = ' group by 1 ';
    set @x = concat(@h,@i,@f1,@j,@l,@m,@n,@o,@p,@q,@r,@s,@t,@u,@v,@z,@w,@y,@k,@a1,@b1,@c1,@d1,@e1);
    PREPARE output from @x;
    EXECUTE output;


    set pv = @custo;
    set reposicao = @reposicao;
    set venda = @venda;
    set minimo = @minimo;
    set sugestao = @sugestao;
    set margem = @margem;
    set lbruto = @lbruto;
    set lliquido = @lliquido;
    set mBruto = @mbruta;
    set mLiquida = @margemLiquida;

end $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `conector_calc_custoLiquido_lbv`
--

DROP PROCEDURE IF EXISTS `conector_calc_custoLiquido_lbv`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='' */ $$
CREATE DEFINER=`master`@`localhost` PROCEDURE `conector_calc_custoLiquido_lbv`(
                                              in find_produto integer,
                                              in find_loja integer,
                                              in price numeric(15,3),
                                              out pv numeric(15,3),
                                              out reposicao numeric(15,3),
                                              out venda numeric(15,3),
                                              out minimo numeric(15,3),
                                              out sugestao numeric(15,3),
                                              out margem numeric(15,3),
                                              out lbruto numeric(15,3),
                                              out lliquido numeric(15,3),
                                              out mBruto numeric(15,3),
                                              out mLiquida numeric(15,3)

                                           )
begin
    set @a = (select (priceFull - ((priceFull*primeiroDesconto)/100)) from produtoPrice where idProduto=find_produto and idLoja = find_loja);
    set @b = (select (@a - ((@a*segundoDesconto)/100)) from produtoPrice where idProduto=find_produto and idLoja = find_loja);
    set @c = (select (@b - ((@b*terceiroDesconto)/100)) from produtoPrice where idProduto=find_produto and idLoja = find_loja);
    set @d = (select ((@c*IpiPorcentagem)/100) as IPI from produtoPrice where idProduto=find_produto and idLoja = find_loja);
    set @e = (select ((@c*fretePorcentagem)/100) as Frete from produtoPrice where idProduto=find_produto and idLoja = find_loja);
    set @f = (select ((@c*substituicaoPorcetagem)/100) as ST from produtoPrice where idProduto=find_produto and idLoja = find_loja);
    set @g = (select (@c+@d+@e+@f) as ST from produtoPrice where idProduto=find_produto and idLoja= find_loja);
    set @h =  'select idproduto,@g as custo, (1 - (margem/100)) as margem, ';
    set @i =  '(@g-((@g * (if(creditoRedIcms > 0, (creditoIcms-sum((((creditoIcms*creditoRedIcms)/100)))),creditoIcms)+creditoPis+creditoCofins))/100)) "Custo Reposição", ';
    set @f1 = '(@g / (1 - (margem/100))) as "Preço Venda" , ';
    set @j =  '(@g * (1 + (5/100))) as "Preço Minimo", '; 
    set @l =  concat('((@g / (1 - (margem/100))) -', price, ') as "lucro bruto", ');
    set @m =  '(@g * (1 + (30/100))) as "Sugestao" , '; 
    set @n = '(((100*(@g / (1 - (margem/100))))-';
    set @o = '(((((if(debitoRedIcms > 0, (debitoIcms-sum((((debitoIcms*debitoRedIcms)/100)))),debitoIcms)+creditoPis+creditoCofins +(financeiro+despesaFixa+contribuicao+vendo)))/100))*(@g / (1 - (margem/100))))-';
    set @p = '(100*@g))';
    set @q  = '/';
    set @r = '(@g / (1 - (margem/100)))) as "Margem Bruta", ';
    set @s = '((@g / (1 - (margem/100)))-';
    set @t = '((@g / (1 - (margem/100)))*';
    set @u = '((((if(debitoRedIcms > 0, (debitoIcms-sum((((debitoIcms*debitoRedIcms)/100)))),debitoIcms)+creditoPis+creditoCofins +(financeiro+despesaFixa+contribuicao+vendo)))/100)))) -';
    set @v = '(@g-((@g * (if(creditoRedIcms > 0, (creditoIcms-sum((((creditoIcms*creditoRedIcms)/100)))),creditoIcms)+creditoPis+creditoCofins))/100)) as "lucro liquido", ';

    set @z = '100*(((((@g / (1 - (margem/100)))-';
    set @w = '((@g / (1 - (margem/100)))*';
    set @y = '((((if(debitoRedIcms > 0, (debitoIcms-sum((((debitoIcms*debitoRedIcms)/100)))),debitoIcms)+creditoPis+creditoCofins +(financeiro+despesaFixa+contribuicao+vendo)))/100)))) - ';
    set @k = '(@g-((@g * (if(creditoRedIcms > 0, (creditoIcms-sum((((creditoIcms*creditoRedIcms)/100)))),creditoIcms)+creditoPis+creditoCofins))/100))) / (@g / (1 - (margem/100))))) as "margem liquida"';

    set @a1 =  ' into @produto, @custo,@margem, @reposicao, @venda, @minimo, @lbruto, @sugestao, @mbruta, @lliquido, @margemLiquida from produtoPrice where idProduto= ';
    set @b1 = find_produto;
    set @c1 = ' and idloja= ';
    set @d1 = find_loja;
    set @e1 = ' group by 1 ';
    set @x = concat(@h,@i,@f1,@j,@l,@m,@n,@o,@p,@q,@r,@s,@t,@u,@v,@z,@w,@y,@k,@a1,@b1,@c1,@d1,@e1);
    PREPARE output from @x;
    EXECUTE output;


    set pv = @custo;
    set reposicao = @reposicao;
    set venda = @venda;
    set minimo = @minimo;
    set sugestao = @sugestao;
    set margem = @margem;
    set lbruto = @lbruto;
    set lliquido = @lliquido;
    set mBruto = @mbruta;
    set mLiquida = @margemLiquida;

end $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `conector_calc_custoLiquido_llc`
--

DROP PROCEDURE IF EXISTS `conector_calc_custoLiquido_llc`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='' */ $$
CREATE DEFINER=`master`@`localhost` PROCEDURE `conector_calc_custoLiquido_llc`(
                                              in find_produto integer,
                                              in find_loja integer,
                                              in price numeric(15,3),
                                              out pv numeric(15,3),
                                              out reposicao numeric(15,3),
                                              out venda numeric(15,3),
                                              out minimo numeric(15,3),
                                              out sugestao numeric(15,3),
                                              out margem numeric(15,3),
                                              out lbruto numeric(15,3),
                                              out lliquido numeric(15,3),
                                              out mBruto numeric(15,3),
                                              out mLiquida numeric(15,3)
                                           )
begin
    set @a = (select (price - ((price*primeiroDesconto)/100)) from produtoPrice where idProduto=find_produto and idLoja = find_loja);
    set @b = (select (@a - ((@a*segundoDesconto)/100)) from produtoPrice where idProduto=find_produto and idLoja = find_loja);
    set @c = (select (@b - ((@b*terceiroDesconto)/100)) from produtoPrice where idProduto=find_produto and idLoja = find_loja);
    set @d = (select ((@c*IpiPorcentagem)/100) as IPI from produtoPrice where idProduto=find_produto and idLoja = find_loja);
    set @e = (select ((@c*fretePorcentagem)/100) as Frete from produtoPrice where idProduto=find_produto and idLoja = find_loja);
    set @f = (select ((@c*substituicaoPorcetagem)/100) as ST from produtoPrice where idProduto=find_produto and idLoja = find_loja);
    set @g = (select (@c+@d+@e+@f) as ST from produtoPrice where idProduto=find_produto and idLoja = find_loja);
    set @h =  ' select idproduto, ';
    set @i =  ' @g as custo, ';
    set @j =  ' (1+((margem)/100))/((1-(((((if(debitoRedIcms > 0, (debitoIcms-sum((((debitoIcms*debitoRedIcms)/100)))),debitoIcms)+creditoPis+creditoCofins +(financeiro+despesaFixa+contribuicao+vendo)))))/100))) "Margem Aplic", ';
    set @l =  ' (@g-((@g * (if(creditoRedIcms > 0, (creditoIcms-sum((((creditoIcms*creditoRedIcms)/100)))),creditoIcms)+creditoPis+creditoCofins))/100)) "Custo Reposição", ';
    set @m =  ' (((@g -((@g * (if(creditoRedIcms > 0, (creditoIcms-sum((((creditoIcms*creditoRedIcms)/100)))),creditoIcms)+creditoPis+creditoCofins))/100)) * (1+(margem/100))) ';
    set @n =  ' / ';
    set @o =  ' (1-(((((if(debitoRedIcms > 0, (debitoIcms-sum((((debitoIcms*debitoRedIcms)/100)))),debitoIcms)+creditoPis+creditoCofins+(financeiro+despesaFixa+contribuicao+vendo)))))/100)))  as venda, ';
    set @p =  ' (((@g -((@g * (if(creditoRedIcms > 0, (creditoIcms-sum((((creditoIcms*creditoRedIcms)/100)))),creditoIcms)+creditoPis+creditoCofins))/100))) ';
    set @q =  ' / ';
    set @r =  ' (1-(((((if(debitoRedIcms > 0, (debitoIcms-sum((((debitoIcms*debitoRedIcms)/100)))),debitoIcms)+creditoPis+creditoCofins+(financeiro+despesaFixa+contribuicao+vendo)))))/100))) as "Minimo Venda", ';
    set @s =  ' (((((@g -((@g * (if(creditoRedIcms > 0, (creditoIcms-sum((((creditoIcms*creditoRedIcms)/100)))),creditoIcms)+creditoPis+creditoCofins))/100)) * (1+(margem/100))) ';
    set @t =  ' / ';
    set @u =  concat(' (1-(((((if(debitoRedIcms > 0, (debitoIcms-sum((((debitoIcms*debitoRedIcms)/100)))),debitoIcms)+creditoPis+creditoCofins+(financeiro+despesaFixa+contribuicao+vendo)))))/100))))- ', price ,' ) as "Lucro Bruto", ');
    set @z =  ' (((@g -((@g * (if(creditoRedIcms > 0, (creditoIcms-sum((((creditoIcms*creditoRedIcms)/100)))),creditoIcms)+creditoPis+creditoCofins))/100)) * (1+(5/100))) ';
    set @w =  ' / ';
    set @k =  ' (1-(((((if(debitoRedIcms > 0, (debitoIcms-sum((((debitoIcms*debitoRedIcms)/100)))),debitoIcms)+creditoPis+creditoCofins+(financeiro+despesaFixa+contribuicao+vendo)))))/100)))  as sugestao, ';
    set @y =   ' ((((100*(((@g -((@g * (if(creditoRedIcms > 0, (creditoIcms-sum((((creditoIcms*creditoRedIcms)/100)))),creditoIcms)+creditoPis+creditoCofins))/100)) * (1+(margem/100))) ';
    set @a1 =  ' / ';
    set @b1 =  ' (1-(((((if(debitoRedIcms > 0, (debitoIcms-sum((((debitoIcms*debitoRedIcms)/100)))),debitoIcms)+creditoPis+creditoCofins+(financeiro+despesaFixa+contribuicao+vendo)))))/100))))';
    set @c1 =  ' - ';
    set @d1 =  ' (((((if(debitoRedIcms > 0, (debitoIcms-sum((((debitoIcms*debitoRedIcms)/100)))),debitoIcms)+creditoPis+creditoCofins +(financeiro+despesaFixa+contribuicao+vendo)))/100)) ';
    set @e1 =  ' * ';
    set @f1 =  ' (((@g -((@g * (if(creditoRedIcms > 0, (creditoIcms-sum((((creditoIcms*creditoRedIcms)/100)))),creditoIcms)+creditoPis+creditoCofins))/100)) * (1+(margem/100))) ';
    set @g1 =  ' / ';
    set @h1 =  ' (1-(((((if(debitoRedIcms > 0, (debitoIcms-sum((((debitoIcms*debitoRedIcms)/100)))),debitoIcms)+creditoPis+creditoCofins+(financeiro+despesaFixa+contribuicao+vendo)))))/100)))))';
    set @i1 =  ' - ';
    set @j1 =  '(100*@g))';
    set @l1 =  ' / ';
    set @m1 =  ' (((@g -((@g * (if(creditoRedIcms > 0, (creditoIcms-sum((((creditoIcms*creditoRedIcms)/100)))),creditoIcms)+creditoPis+creditoCofins))/100)) * (1+(margem/100))) ';
    set @n1 =  ' / ';
    set @o1 =  ' (1-(((((if(debitoRedIcms > 0, (debitoIcms-sum((((debitoIcms*debitoRedIcms)/100)))),debitoIcms)+creditoPis+creditoCofins+(financeiro+despesaFixa+contribuicao+vendo)))))/100)))) as "margem lucro", ';
    set @p1 =  ' (((((@g -((@g * (if(creditoRedIcms > 0, (creditoIcms-sum((((creditoIcms*creditoRedIcms)/100)))),creditoIcms)+creditoPis+creditoCofins))/100)) * (1+(margem/100))) ';
    set @q1 =  ' / ';
    set @r1 =  ' (1-(((((if(debitoRedIcms > 0, (debitoIcms-sum((((debitoIcms*debitoRedIcms)/100)))),debitoIcms)+creditoPis+creditoCofins+(financeiro+despesaFixa+contribuicao+vendo)))))/100))) - ';
    set @s1 =  ' ((((@g -((@g * (if(creditoRedIcms > 0, (creditoIcms-sum((((creditoIcms*creditoRedIcms)/100)))),creditoIcms)+creditoPis+creditoCofins))/100)) * (1+(margem/100))) ';
    set @t1 =  ' / ';
    set @u1 =  ' (1-(((((if(debitoRedIcms > 0, (debitoIcms-sum((((debitoIcms*debitoRedIcms)/100)))),debitoIcms)+creditoPis+creditoCofins+(financeiro+despesaFixa+contribuicao+vendo)))))/100)))';
    set @v1 =  ' * ';
    set @x1 =  ' ((((if(debitoRedIcms > 0, (debitoIcms-sum((((debitoIcms*debitoRedIcms)/100)))),debitoIcms)+creditoPis+creditoCofins +(financeiro+despesaFixa+contribuicao+vendo)))/100))))';
    set @z1 =  ' - ';
    set @w1 =  ' (@g-((@g * (if(creditoRedIcms > 0, (creditoIcms-sum((((creditoIcms*creditoRedIcms)/100)))),creditoIcms)+creditoPis+creditoCofins))/100))) as "lucro liquido", ';
    set @k1 =  ' 100*((((((@g -((@g * (if(creditoRedIcms > 0, (creditoIcms-sum((((creditoIcms*creditoRedIcms)/100)))),creditoIcms)+creditoPis+creditoCofins))/100)) * (1+(margem/100))) ';
    set @y1 =  ' / ';
    set @a2 =  ' (1-(((((if(debitoRedIcms > 0, (debitoIcms-sum((((debitoIcms*debitoRedIcms)/100)))),debitoIcms)+creditoPis+creditoCofins+(financeiro+despesaFixa+contribuicao+vendo)))))/100))) - ';
    set @b2 =  ' ((((@g -((@g * (if(creditoRedIcms > 0, (creditoIcms-sum((((creditoIcms*creditoRedIcms)/100)))),creditoIcms)+creditoPis+creditoCofins))/100)) * (1+(margem/100))) ';
    set @c2 =  ' / ';
    set @d2 =  ' (1-(((((if(debitoRedIcms > 0, (debitoIcms-sum((((debitoIcms*debitoRedIcms)/100)))),debitoIcms)+creditoPis+creditoCofins+(financeiro+despesaFixa+contribuicao+vendo)))))/100)))';
    set @e2 =  ' * ';
    set @f2 =  ' ((((if(debitoRedIcms > 0, (debitoIcms-sum((((debitoIcms*debitoRedIcms)/100)))),debitoIcms)+creditoPis+creditoCofins +(financeiro+despesaFixa+contribuicao+vendo)))/100))))';
    set @g2 =  ' - ';
    set @h2 =  ' (@g-((@g * (if(creditoRedIcms > 0, (creditoIcms-sum((((creditoIcms*creditoRedIcms)/100)))),creditoIcms)+creditoPis+creditoCofins))/100)))';
    set @i2 =  ' / ';
    set @j2 =  ' (((@g -((@g * (if(creditoRedIcms > 0, (creditoIcms-sum((((creditoIcms*creditoRedIcms)/100)))),creditoIcms)+creditoPis+creditoCofins))/100)) * (1+(margem/100))) ';
    set @l2 =  ' / ';
    set @m2 =  ' (1-(((((if(debitoRedIcms > 0, (debitoIcms-sum((((debitoIcms*debitoRedIcms)/100)))),debitoIcms)+creditoPis+creditoCofins+(financeiro+despesaFixa+contribuicao+vendo)))))/100))))  as mliquida ';
    set @n2 =  ' into @produto, @custo, @margem, @reposicao , @venda, @minimo, @lbruto, @sugestao, @mbruto, @lliquido, @margemLiquida from produtoPrice where idProduto= ';
    set @o2 = find_produto;
    set @p2 = ' and idloja= ';
    set @q2 = find_loja;
    set @r2 = ' group by 1 ';
    set @x = concat(@h,@i,@j,@l,@m,@n,@o,@p,@q,@r,@s,@t,@u,@z,@w,@k,@y,@a1,@b1,@c1,@d1,@e1,@f1,@g1,@h1,@i1,@j1,@l1,@m1,@n1,@o1,@p1,@q1,@r1,@s1,@t1,@u1,@v1,@x1,@z1,@w1,@k1,@y1,@a2,@b2,@c2,@d2,@e2,@f2,@g2,@h2,@i2,@j2,@l2,@m2,@n2,@o2,@p2,@q2,@r2);
    PREPARE output from @x;
    EXECUTE output;
    set margem = @margem;
    set reposicao = @reposicao;
    set venda = @venda;
    set pv = @custo;
    set minimo = @minimo;
    set lbruto = @lbruto;
    set lliquido = @lliquido;
    set sugestao = @sugestao;
    set mBruto = @mbruto;
    set mLiquida = @margemLiquida;
end $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `conector_calc_custoLiquido_llv`
--

DROP PROCEDURE IF EXISTS `conector_calc_custoLiquido_llv`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='' */ $$
CREATE DEFINER=`master`@`localhost` PROCEDURE `conector_calc_custoLiquido_llv`(
                                              in find_produto integer,
                                              in find_loja integer,
                                              in price numeric(15,3),
                                              out pv numeric(15,3),
                                              out reposicao numeric(15,3),
                                              out venda numeric(15,3),
                                              out minimo numeric(15,3),
                                              out sugestao numeric(15,3),
                                              out margem numeric(15,3),
                                              out lbruto numeric(15,3),
                                              out lliquido numeric(15,3),
                                              out mBruto numeric(15,3),
                                              out mLiquida numeric(15,3)
                                           )
begin
    set @a = (select (price - ((price*primeiroDesconto)/100)) from produtoPrice where idProduto=find_produto and idLoja = find_loja);
    set @b = (select (@a - ((@a*segundoDesconto)/100)) from produtoPrice where idProduto=find_produto and idLoja = find_loja);
    set @c = (select (@b - ((@b*terceiroDesconto)/100)) from produtoPrice where idProduto=find_produto and idLoja = find_loja);
    set @d = (select ((@c*IpiPorcentagem)/100) as IPI from produtoPrice where idProduto=find_produto and idLoja = find_loja);
    set @e = (select ((@c*fretePorcentagem)/100) as Frete from produtoPrice where idProduto=find_produto and idLoja = find_loja);
    set @f = (select ((@c*substituicaoPorcetagem)/100) as ST from produtoPrice where idProduto=find_produto and idLoja = find_loja);
    set @g = (select (@c+@d+@e+@f) as ST from produtoPrice where idProduto=find_produto and idLoja = find_loja);
    set @h =  ' select idproduto, ';
    set @i =  ' @g as custo, ';
    set @j =  ' (100*(1-((((margem + (if(debitoRedIcms > 0, (debitoIcms-sum((((debitoIcms*debitoRedIcms)/100)))),debitoIcms)+creditoPis+creditoCofins +(financeiro+despesaFixa+contribuicao+vendo)))))/100))) "Margem Aplic", ';
    set @l =  ' (@g-((@g * (if(creditoRedIcms > 0, (creditoIcms-sum((((creditoIcms*creditoRedIcms)/100)))),creditoIcms)+creditoPis+creditoCofins))/100)) "Custo Reposição", ';
    set @m =  ' (((@g -((@g * (if(creditoRedIcms > 0, (creditoIcms-sum((((creditoIcms*creditoRedIcms)/100)))),creditoIcms)+creditoPis+creditoCofins))/100))) ';
    set @n =  ' / ';
    set @o =  ' (1-((((margem + (if(debitoRedIcms > 0, (debitoIcms-sum((((debitoIcms*debitoRedIcms)/100)))),debitoIcms)+creditoPis+creditoCofins+(financeiro+despesaFixa+contribuicao+vendo)))))/100)))  as venda, ';
    set @p =  ' ((((@g -((@g * (if(creditoRedIcms > 0, (creditoIcms-sum((((creditoIcms*creditoRedIcms)/100)))),creditoIcms)+creditoPis+creditoCofins))/100))) ';
    set @q =  ' / ';
    set @r =  ' (1-((((if(debitoRedIcms > 0, (debitoIcms-sum((((debitoIcms*debitoRedIcms)/100)))),debitoIcms)+creditoPis+creditoCofins+(financeiro+despesaFixa+contribuicao+vendo)))))/100))) as "Minimo Venda", ';
    set @s =  ' (((((@g -((@g * (if(creditoRedIcms > 0, (creditoIcms-sum((((creditoIcms*creditoRedIcms)/100)))),creditoIcms)+creditoPis+creditoCofins))/100))) ';
    set @t =  ' / ';
    set @u =  concat(' (1-((((margem + (if(debitoRedIcms > 0, (debitoIcms-sum((((debitoIcms*debitoRedIcms)/100)))),debitoIcms)+creditoPis+creditoCofins+(financeiro+despesaFixa+contribuicao+vendo)))))/100))))-' , price, ') as "Lucro Bruto", ');
    set @z =  ' (((@g -((@g * (if(creditoRedIcms > 0, (creditoIcms-sum((((creditoIcms*creditoRedIcms)/100)))),creditoIcms)+creditoPis+creditoCofins))/100))) ';
    set @w =  ' / ';
    set @k =  ' (1-((((5 + (if(debitoRedIcms > 0, (debitoIcms-sum((((debitoIcms*debitoRedIcms)/100)))),debitoIcms)+creditoPis+creditoCofins+(financeiro+despesaFixa+contribuicao+vendo)))))/100)))  as sugestao, '; 
    set @y =   ' ((((100*(((@g -((@g * (if(creditoRedIcms > 0, (creditoIcms-sum((((creditoIcms*creditoRedIcms)/100)))),creditoIcms)+creditoPis+creditoCofins))/100))) ';
    set @a1 =  ' / ';
    set @b1 =  ' (1-((((margem + (if(debitoRedIcms > 0, (debitoIcms-sum((((debitoIcms*debitoRedIcms)/100)))),debitoIcms)+creditoPis+creditoCofins+(financeiro+despesaFixa+contribuicao+vendo)))))/100))))';
    set @c1 =  ' - ';
    set @d1 =  ' (((((if(debitoRedIcms > 0, (debitoIcms-sum((((debitoIcms*debitoRedIcms)/100)))),debitoIcms)+creditoPis+creditoCofins +(financeiro+despesaFixa+contribuicao+vendo)))/100)) ';
    set @e1 =  ' * ';
    set @f1 =  ' (((@g -((@g * (if(creditoRedIcms > 0, (creditoIcms-sum((((creditoIcms*creditoRedIcms)/100)))),creditoIcms)+creditoPis+creditoCofins))/100))) ';
    set @g1 =  ' / ';
    set @h1 =  ' (1-((((margem + (if(debitoRedIcms > 0, (debitoIcms-sum((((debitoIcms*debitoRedIcms)/100)))),debitoIcms)+creditoPis+creditoCofins+(financeiro+despesaFixa+contribuicao+vendo)))))/100)))))';
    set @i1 =  ' - ';
    set @j1 =  '(100*@g))';
    set @l1 =  ' / ';
    set @m1 =  ' (((@g -((@g * (if(creditoRedIcms > 0, (creditoIcms-sum((((creditoIcms*creditoRedIcms)/100)))),creditoIcms)+creditoPis+creditoCofins))/100))) ';
    set @n1 =  ' / ';
    set @o1 =  ' (1-((((margem + (if(debitoRedIcms > 0, (debitoIcms-sum((((debitoIcms*debitoRedIcms)/100)))),debitoIcms)+creditoPis+creditoCofins+(financeiro+despesaFixa+contribuicao+vendo)))))/100)))) as "margem lucro", ';
    set @p1 =  ' (((((@g -((@g * (if(creditoRedIcms > 0, (creditoIcms-sum((((creditoIcms*creditoRedIcms)/100)))),creditoIcms)+creditoPis+creditoCofins))/100))) ';
    set @q1 =  ' / ';
    set @r1 =  ' (1-((((margem + (if(debitoRedIcms > 0, (debitoIcms-sum((((debitoIcms*debitoRedIcms)/100)))),debitoIcms)+creditoPis+creditoCofins+(financeiro+despesaFixa+contribuicao+vendo)))))/100))) - ';
    set @s1 =  ' ((((@g -((@g * (if(creditoRedIcms > 0, (creditoIcms-sum((((creditoIcms*creditoRedIcms)/100)))),creditoIcms)+creditoPis+creditoCofins))/100))) ';
    set @t1 =  ' / ';
    set @u1 =  ' (1-((((margem + (if(debitoRedIcms > 0, (debitoIcms-sum((((debitoIcms*debitoRedIcms)/100)))),debitoIcms)+creditoPis+creditoCofins+(financeiro+despesaFixa+contribuicao+vendo)))))/100)))';
    set @v1 =  ' * ';
    set @x1 =  ' ((((if(debitoRedIcms > 0, (debitoIcms-sum((((debitoIcms*debitoRedIcms)/100)))),debitoIcms)+creditoPis+creditoCofins +(financeiro+despesaFixa+contribuicao+vendo)))/100))))';
    set @z1 =  ' - ';
    set @w1 =  ' (@g-((@g * (if(creditoRedIcms > 0, (creditoIcms-sum((((creditoIcms*creditoRedIcms)/100)))),creditoIcms)+creditoPis+creditoCofins))/100))) as "lucro liquido", ';
    set @k1 =  ' 100 * ((((((@g -((@g * (if(creditoRedIcms > 0, (creditoIcms-sum((((creditoIcms*creditoRedIcms)/100)))),creditoIcms)+creditoPis+creditoCofins))/100))) ';
    set @y1 =  ' / ';
    set @a2 =  ' (1-((((margem + (if(debitoRedIcms > 0, (debitoIcms-sum((((debitoIcms*debitoRedIcms)/100)))),debitoIcms)+creditoPis+creditoCofins+(financeiro+despesaFixa+contribuicao+vendo)))))/100))) - ';
    set @b2 =  ' ((((@g -((@g * (if(creditoRedIcms > 0, (creditoIcms-sum((((creditoIcms*creditoRedIcms)/100)))),creditoIcms)+creditoPis+creditoCofins))/100))) ';
    set @c2 =  ' / ';
    set @d2 =  ' (1-((((margem + (if(debitoRedIcms > 0, (debitoIcms-sum((((debitoIcms*debitoRedIcms)/100)))),debitoIcms)+creditoPis+creditoCofins+(financeiro+despesaFixa+contribuicao+vendo)))))/100)))';
    set @e2 =  ' * ';
    set @f2 =  ' ((((if(debitoRedIcms > 0, (debitoIcms-sum((((debitoIcms*debitoRedIcms)/100)))),debitoIcms)+creditoPis+creditoCofins +(financeiro+despesaFixa+contribuicao+vendo)))/100))))';
    set @g2 =  ' - ';
    set @h2 =  ' (@g-((@g * (if(creditoRedIcms > 0, (creditoIcms-sum((((creditoIcms*creditoRedIcms)/100)))),creditoIcms)+creditoPis+creditoCofins))/100)))';
    set @i2 =  ' / ';
    set @j2 =  ' (((@g -((@g * (if(creditoRedIcms > 0, (creditoIcms-sum((((creditoIcms*creditoRedIcms)/100)))),creditoIcms)+creditoPis+creditoCofins))/100))) ';
    set @l2 =  ' / ';
    set @m2 =  ' (1-((((margem + (if(debitoRedIcms > 0, (debitoIcms-sum((((debitoIcms*debitoRedIcms)/100)))),debitoIcms)+creditoPis+creditoCofins+(financeiro+despesaFixa+contribuicao+vendo)))))/100))))  as "Margem liquido" ';
    set @n2 =  ' into @produto, @custo, @margem, @reposicao , @venda, @minimo, @lbruto, @sugestao, @mbruto, @lliquido, @margemLiquida from produtoPrice where idProduto= ';
    set @o2 = find_produto;
    set @p2 = ' and idloja= ';
    set @q2 = find_loja;
    set @r2 = ' group by 1 ';
    set @x = concat(@h,@i,@j,@l,@m,@n,@o,@p,@q,@r,@s,@t,@u,@z,@w,@k,@y,@a1,@b1,@c1,@d1,@e1,@f1,@g1,@h1,@i1,@j1,@l1,@m1,@n1,@o1,@p1,@q1,@r1,@s1,@t1,@u1,@v1,@x1,@z1,@w1,@k1,@y1,@a2,@b2,@c2,@d2,@e2,@f2,@g2,@h2,@i2,@j2,@l2,@m2,@n2,@o2,@p2,@q2,@r2);
    PREPARE output from @x;
    EXECUTE output;
    set pv = @custo;
    set margem = @margem;
    set reposicao = @reposicao;
    set venda = @venda;
    set minimo = @minimo;
    set lbruto = @lbruto;
    set sugestao = @sugestao;
    set mBruto = @mbruto;
    set lliquido = @lliquido;
    set mLiquida = @margemLiquida;
end $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `conector_calc_discount`
--

DROP PROCEDURE IF EXISTS `conector_calc_discount`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='' */ $$
CREATE DEFINER=`master`@`localhost` PROCEDURE `conector_calc_discount`(
                                            in chave integer,
                                            in store integer,
                                            in valueDiscount numeric(15,3),
                                            in pessoa integer,
                                            in tipo char(1)
                                        )
begin

  declare pedido double;
  declare transformacao numeric(15,3);
  declare liquido numeric(15,3) default 0;
  declare custo numeric(15,3);
  declare max_discount numeric(15,3);
  declare valuePerson numeric(15,3);
  declare eminenciaDiscount numeric(15,3);

    set eminenciaDiscount = 0;

select
        tab.idPedido,
        truncate(sum(tab.quantidade* tab.price),2) as Total_Bruto,
        truncate(sum(tab.quantidade* tab1.custoLiquido),2) as Total_Custo,
        (truncate((1-(sum(tab.quantidade* tab1.custoLiquido)/
                sum(tab.quantidade* tab.priceLiquido))),2)*100) Representacao_Desconto
  from
      pedidoItens tab
              inner join produtoPrice tab1 on(tab.idProduto = tab1.idProduto)
   where
       tab.idPedido = chave and tab.idLoja = store and tab1.idLoja = store and tab.promocional='N' group by idPedido into pedido, liquido, custo, max_discount;

select
        truncate(discount,2)
        from
            funcao
            where especifica=1 and idFuncao=pessoa into valuePerson;

case tipo
  when 'v' then
        set transformacao = truncate(((valueDiscount/liquido)*100),2);
    if((transformacao <= max_discount)||(pessoa = 5))then

        if((transformacao <= valuePerson)||(pessoa = 5)) then

            set eminenciaDiscount = truncate((liquido - ((liquido*transformacao)/100)),2);

        else

            set eminenciaDiscount = 0;

    end if;

  end if;

  when 'p' then

    if((valueDiscount <= max_discount)||(pessoa = 5))then

        if((valueDiscount <= valuePerson)||(pessoa = 5)) then

            set eminenciaDiscount = truncate((liquido - ((liquido*valueDiscount)/100)),2);

        else

            set eminenciaDiscount = 0;

    end if;
  end if;

end case;

    select truncate(liquido,2), truncate(eminenciaDiscount,2) as TotalDesconto;

end $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `conector_calc_giro`
--

DROP PROCEDURE IF EXISTS `conector_calc_giro`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='' */ $$
CREATE DEFINER=`master`@`localhost` PROCEDURE `conector_calc_giro`(in find_produto double,
                                      in find_loja double,
                                      in diPeriodo date,
                                      in dfPeriodo date)
begin

    declare VarTotalEntrada numeric(15,3);
    declare VarIdEntrada double;
    declare VarQttyItemEntrada numeric(15,3);
    declare VarQttyItemSaidaNf numeric(15,3);
    declare VarChavePeriodo double;
    declare VarChaveWeek double;
    declare VarChaveMonth double;
    declare VarChaveYear double;
    declare VarSaldoBeginPeriodo numeric(15,3);
    declare VarSaldoBeginWeek numeric(15,3);
    declare VarSaldoBeginMonth numeric(15,3);
    declare VarSaldoBeginYear numeric(15,3);
    declare VarLastDayMonth date;
    declare VarLastDayYear date;
    declare VarFirtMonthWeek date;
    declare VarTotalVendaPeriodo numeric(15,3);
    declare VarTotalVendaWeek numeric(15,3);
    declare VarTotalVendaMonth numeric(15,3);
    declare VarTotalVendaYear numeric(15,3);
    declare VarSaldoBuyPeriodo numeric(15,3);
    declare VarSaldoBuyWeek numeric(15,3);
    declare VarSaldoBuyMonth numeric(15,3);
    declare VarSaldoBuyYear numeric(15,3);
    DECLARE done INT DEFAULT FALSE;
    DECLARE done1 INT DEFAULT FALSE; 
    DECLARE done2 int default false;
    DECLARE done3 int default false;

    SELECT ADDDATE(now(), -7) into VarFirtMonthWeek;
    

    SELECT ADDDATE(now(), -DAY(LAST_DAY(NOW()))) into VarLastDayMonth;
    
    SELECT ADDDATE(now(), -365) into VarLastDayYear;

    
    select 
        max(tab1.IdProdutoExtrato)
            from produtoEstoques tab
                inner join produtoExtrato tab1 on(tab.idProduto = tab1.idProduto and tab.idLoja = tab1.idLoja)
                                 where tab1.movimento between diPeriodo and dfPeriodo and
                                       (find_loja=0 or tab.idLoja=find_loja)and 
                                       tab.idProduto=find_produto into VarChavePeriodo;
                                       if(VarChavePeriodo is null)then set VarChavePeriodo = 0; end if;

    if(   (select 
            count(tab1.saldo)
            from produtoEstoques tab
                inner join produtoExtrato tab1 on(tab.idProduto = tab1.idProduto and tab.idLoja = tab1.idLoja)
                                 where tab1.idProdutoExtrato=VarChavePeriodo and 
                                       (find_loja=0 or tab.idLoja=find_loja) and 
                                       tab.idProduto=find_produto) > 0)then
    select 
        tab1.saldo
            from produtoEstoques tab
                inner join produtoExtrato tab1 on(tab.idProduto = tab1.idProduto and tab.idLoja = tab1.idLoja)
                                 where tab1.idProdutoExtrato=VarChavePeriodo and 
                                       (find_loja=0 or tab.idLoja=find_loja) and 
                                       tab.idProduto=find_produto into VarSaldoBeginPeriodo;
    end if;
                                       if(VarSaldoBeginPeriodo is null)then set VarSaldoBeginPeriodo = 0; end if;

    
    select 
        max(tab1.IdProdutoExtrato)
            from produtoEstoques tab
                inner join produtoExtrato tab1 on(tab.idProduto = tab1.idProduto and tab.idLoja = tab1.idLoja)
                                 where tab1.movimento <= VarFirtMonthWeek and
                                       (find_loja=0 or tab.idLoja=find_loja) and 
                                       tab.idProduto=find_produto into VarChaveWeek;
    select 
        tab1.saldo
            from produtoEstoques tab
                inner join produtoExtrato tab1 on(tab.idProduto = tab1.idProduto and tab.idLoja = tab1.idLoja)
                                 where tab1.idProdutoExtrato=VarChaveWeek and 
                                       (find_loja=0 or tab.idLoja=find_loja) and 
                                       tab.idProduto=find_produto into VarSaldoBeginWeek;
                                       if(VarSaldoBeginWeek is null)then set VarSaldoBeginWeek=0; end if;

    
    select 
        max(tab1.IdProdutoExtrato)
            from produtoEstoques tab
                inner join produtoExtrato tab1 on(tab.idProduto = tab1.idProduto and tab.idLoja = tab1.idLoja)
                                 where tab1.movimento <= VarLastDayMonth and
                                       (find_loja=0 or tab.idLoja=find_loja) and 
                                       tab.idProduto=find_produto into VarChaveMonth;
                                    
                                        
    select 
        tab1.saldo
            from produtoEstoques tab
                inner join produtoExtrato tab1 on(tab.idProduto = tab1.idProduto and tab.idLoja = tab1.idLoja)
                                 where tab1.idProdutoExtrato=VarChaveMonth and 
                                       (find_loja=0 or tab.idLoja=find_loja) and 
                                       tab.idProduto=find_produto into VarSaldoBeginMonth;
                                      if(VarSaldoBeginMonth is null)then set VarSaldoBeginMonth=0; end if;

    
    select 
        max(tab1.IdProdutoExtrato)
            from produtoEstoques tab
                inner join produtoExtrato tab1 on(tab.idProduto = tab1.idProduto and tab.idLoja = tab1.idLoja)
                                 where tab1.movimento <= VarLastDayYear and
                                       (find_loja=0 or tab.idLoja=find_loja) and 
                                       tab.idProduto=find_produto into VarChaveYear;
    select 
        tab1.saldo
            from produtoEstoques tab
                inner join produtoExtrato tab1 on(tab.idProduto = tab1.idProduto and tab.idLoja = tab1.idLoja)
                                 where tab1.idProdutoExtrato=VarChaveYear and 
                                       (find_loja=0 or tab.idLoja=find_loja) and 
                                       tab.idProduto=find_produto into VarSaldoBeginYear;
                                       if(VarSaldoBeginYear is null)then set VarSaldoBeginYear=0; end if;
    
    select sum(tab.quantidade)
                from nfItem tab
                      inner join nf tab1 on(tab.idNf = tab1.Nf)
                                  where tab.idProduto=find_produto and
                                        (find_loja=0 or tab1.Loja=find_loja) and
                                        tab1.statusNf=1
                                             into VarQttyItemSaidaNf;
                                             if(VarQttyItemSaidaNf is null)then set VarQttyItemSaidaNf= 0; end if;

    
    select sum(tab.quantidade)
                from nfItem tab
                      inner join nf tab1 on(tab.idNf = tab1.Nf)
                                  where tab.idProduto=find_produto and
                                        (find_loja=0 or tab1.Loja=find_loja) and
                                        tab1.statusNf=1 and
                                        tab1.emissao between diPeriodo and dfPeriodo into VarTotalVendaPeriodo;
                                        if(VarTotalVendaPeriodo is null)then set VarTotalVendaPeriodo=0; end if;
                                        
    
    select sum(tab.quantidade)
                from nfItem tab
                      inner join nf tab1 on(tab.idNf = tab1.Nf)
                                  where tab.idProduto=find_produto and
                                        (find_loja=0 or tab1.Loja=find_loja) and
                                        tab1.statusNf=1 and
                                        tab1.emissao between VarFirtMonthWeek and now() into VarTotalVendaWeek;
                                        if(VarTotalVendaWeek is null)then set VarTotalVendaWeek=0; end if;

    
    select sum(tab.quantidade)
                from nfItem tab
                      inner join nf tab1 on(tab.idNf = tab1.Nf)
                                  where tab.idProduto=find_produto and
                                        (find_loja=0 or tab1.Loja=find_loja) and
                                        tab1.statusNf=1 and
                                        tab1.emissao between VarLastDayMonth and now() into VarTotalVendaMonth;
                                        if(VarTotalVendaMonth is null)then set VarTotalVendaMonth=0; end if;
                                        
 
    select sum(tab.quantidade)
                from nfItem tab
                      inner join nf tab1 on(tab.idNf = tab1.Nf)
                                  where tab.idProduto=find_produto and
                                        (find_loja=0 or tab1.Loja=find_loja) and
                                        tab1.statusNf=1 and
                                        tab1.emissao between VarLastDayYear and now() into VarTotalVendaYear;
                                        if(VarTotalVendaYear is null)then set VarTotalVendaYear=0; end if;

    
    select distinct count(*) from entradaItem tab
                              inner join entrada tab1 on(tab.idEntrada = tab1.idEntrada)
                              inner JOIN produtoExtrato tab2 on(tab.idProduto = tab2.idProduto)
                                                                       where tab.idProduto=find_produto and (find_loja=0 or tab1.idLoja=find_loja)
                                                                                                           group by tab.idEntradaItem
                                                                                                                        into VarTotalEntrada;
    
    begin
             DECLARE basicFonte CURSOR for  select distinct tab.idEntradaItem,
                                                            tab.quantidade
                                                                          from
                                                                              entradaItem tab
                                                                                inner join produtoExtrato tab1 on(tab.idProduto = tab1.idProduto)
                                                                                                       where tab.idProduto=find_produto and
                                                                                                             (find_loja=0 or tab1.idLoja=find_loja) and
                                                                                                             tab.dateInsert between VarFirtMonthWeek and now();
                          DECLARE CONTINUE HANDLER FOR NOT FOUND SET done = TRUE;
    open basicFonte;

    read_loop: LOOP
                          fetch basicFonte into
                                          VarIdEntrada,
                                          VarQttyItemEntrada;
                                          if(VarQttyItemEntrada is null)then set VarQttyItemEntrada=0; end if;

                    IF done THEN
                        LEAVE read_loop;
                    END IF;

                        set VarSaldoBuyWeek = VarSaldoBuyWeek + VarQttyItemEntrada;

            end loop;
        close basicFonte;
    end;
    
    if(VarSaldoBuyWeek is null)then set VarSaldoBuyWeek=0; end if;
        
    begin
             DECLARE basicFonteTwo CURSOR for  select distinct tab.idEntradaItem,
                                                            tab.quantidade
                                                                          from
                                                                              entradaItem tab
                                                                                inner join produtoExtrato tab1 on(tab.idProduto = tab1.idProduto)
                                                                                                       where tab.idProduto=find_produto and
                                                                                                             (find_loja=0 or tab1.idLoja=find_loja) and
                                                                                                             tab.dateInsert between VarLastDayMonth and now();
                                                                                                             
                          DECLARE CONTINUE HANDLER FOR NOT FOUND SET done1 = TRUE;
                          
    open basicFonteTwo;

    read_loop1: LOOP
                          fetch basicFonteTwo into
                                          VarIdEntrada,
                                          VarQttyItemEntrada;
                                          if(VarQttyItemEntrada is null)then set VarQttyItemEntrada=0; end if;

                    IF done1 THEN
                        LEAVE read_loop1;
                    END IF;

                        set VarSaldoBuyMonth = VarSaldoBuyMonth + VarQttyItemEntrada;

            end loop;
        close basicFonteTwo;
    end;
    
    if(VarSaldoBuyMonth is null)then set VarSaldoBuyMonth=0; end if;
        
    begin
             DECLARE basicFonteThre CURSOR for  select distinct tab.idEntradaItem,
                                                            tab.quantidade
                                                                          from
                                                                              entradaItem tab
                                                                                inner join produtoExtrato tab1 on(tab.idProduto = tab1.idProduto)
                                                                                                       where tab.idProduto=find_produto and
                                                                                                             (find_loja=0 or tab1.idLoja=find_loja) and
                                                                                                             tab.dateInsert between VarLastDayYear and now();
                          DECLARE CONTINUE HANDLER FOR NOT FOUND SET done2 = TRUE;
    open basicFonteThre;

    read_loop2: LOOP
                          fetch basicFonteThre into
                                          VarIdEntrada,
                                          VarQttyItemEntrada;
                                          if(VarQttyItemEntrada is null)then set VarQttyItemEntrada=0; end if;

                    IF done2 THEN
                        LEAVE read_loop2;
                    END IF;

                        set VarSaldoBuyYear = VarSaldoBuyYear + VarQttyItemEntrada;

        if(VarSaldoBuyYear is null)then set VarSaldoBuyYear=0; end if;

            end loop;
        close basicFonteThre;
    end;

    begin
             DECLARE basicFonteFor CURSOR for  select distinct tab.idEntradaItem,
                                                            tab.quantidade
                                                                          from
                                                                              entradaItem tab
                                                                                inner join produtoExtrato tab1 on(tab.idProduto = tab1.idProduto)
                                                                                                       where tab.idProduto=find_produto and
                                                                                                             (find_loja=0 or tab1.idLoja=find_loja) and
                                                                                                             tab.dateInsert between diPeriodo and dfPeriodo;
                          DECLARE CONTINUE HANDLER FOR NOT FOUND SET done3 = TRUE;
    open basicFonteFor;

    read_loop3: LOOP
                          fetch basicFonteFor into
                                          VarIdEntrada,
                                          VarQttyItemEntrada;
                                          if(VarQttyItemEntrada is null)then set VarQttyItemEntrada=0; end if;

                    IF done3 THEN
                        LEAVE read_loop3;
                    END IF;

                        set VarSaldoBuyPeriodo = VarSaldoBuyPeriodo + VarQttyItemEntrada;

            end loop;
        close basicFonteFor;
    end;

    if(VarSaldoBuyPeriodo is null)then set VarSaldoBuyPeriodo=0; end if;

    set @ConsumoRealPeriodo = ((VarSaldoBeginPeriodo + VarSaldoBuyPeriodo) - VarTotalVendaPeriodo);
    set @ConsumoPeriodo=VarSaldoBeginPeriodo-@ConsumoRealPeriodo;
    
    set @ConsumoRealSemanal = ((VarSaldoBeginWeek + VarSaldoBuyWeek) - VarTotalVendaWeek);
    set @ConsumoSemanal = VarSaldoBeginWeek - @ConsumoRealSemanal;
    
    set @ConsumoRealMensal = ((VarSaldoBeginMonth + VarSaldoBuyMonth) - VarTotalVendaMonth);
    set @ConsumoMensal = VarSaldoBeginMonth - @ConsumoRealMensal;
    
    set @ConsumoRealAnual = ((VarSaldoBeginYear + VarSaldoBuyYear) - VarTotalVendaYear);
    set @ConsumoAnual = VarSaldoBeginYear - @ConsumoRealAnual;

    insert into bof(texto)values(concat('begin',VarSaldoBeginYear,'buy',VarSaldoBuyYear,'Venda',VarTotalVendaYear,'Consumo',@ConsumoPeriodo));

    set @GiroPeriodo = (((VarSaldoBeginPeriodo + VarSaldoBuyPeriodo) - VarTotalVendaPeriodo)/((VarSaldoBeginPeriodo+VarTotalVendaPeriodo)/2));

    set @GiroSemanal = (((VarSaldoBeginWeek + VarSaldoBuyWeek) - VarTotalVendaWeek)/((VarSaldoBeginWeek+VarTotalVendaWeek)/2));

    set @GiroMensal = (((VarSaldoBeginMonth + VarSaldoBuyMonth) - VarTotalVendaMonth)/((VarSaldoBeginMonth+VarTotalVendaMonth)/2));

    set @GiroAnual = (((VarSaldoBeginYear + VarSaldoBuyYear) - VarTotalVendaYear)/((VarSaldoBeginYear+VarTotalVendaYear)/2));

    select "Consumo Periodo" As Title, round(ifnull(@ConsumoPeriodo,0),3) as Indice
        union
    select "Consumo Semanal", round(ifnull(@ConsumoSemanal,0),3)
        union
    select "Consumo Mensal", round(ifnull(@ConsumoMensal,0),3)
        union
    select "Consumo Anual", round(ifnull(@ConsumoAnual,0),3)
        union
    select concat("Giro de ",date_format(diPeriodo, '%d/%m/%Y'),' a ',date_format(dfPeriodo, '%d/%m/%Y')), round(ifnull(@GiroPeriodo,0),3)
        union
    select concat("Giro de ",date_format(VarFirtMonthWeek, '%d/%m/%Y'),' a ',date_format(now(), '%d/%m/%Y')), round(ifnull(@GiroSemanal,0),3)
        union
    select concat("Giro de ",date_format(VarLastDayMonth, '%d/%m/%Y'),' a ',date_format(now(), '%d/%m/%Y')), round(ifnull(@GiroMensal,0),3)
        union
    select concat("Giro de ",date_format(VarLastDayYear, '%d/%m/%Y'),' a ',date_format(now(), '%d/%m/%Y')), round(ifnull(@GiroAnual,0),3);

end $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `conector_calc_icms`
--

DROP PROCEDURE IF EXISTS `conector_calc_icms`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='' */ $$
CREATE DEFINER=`master`@`localhost` PROCEDURE `conector_calc_icms`(
                                    in calc_produto double,
                                    in calc_origem varchar(2),
                                    in calc_destino integer,
                                    in calc_paramentro integer,
                                    in calc_tipo varchar(1),
                                    in calc_idFornecedor integer,
                                    in calc_Loja_Default double,
                                    out return_icms_entrada numeric(15,3),
                                    out return_reducao_entrada numeric(15,3),
                                    out return_icms_saida numeric(15,3),
                                    out return_reducao_saida numeric(15,3),
                                    out return_tipo_aliq_entrada char(1),
                                    out return_codigo_aliq_entrada char(2),
                                    out return_tipo_aliq_saida char(1),
                                    out return_codigo_aliq_saida char(2),
                                    out return_ipi numeric(15,3),
                                    out return_pis numeric(15,3),
                                    out return_cofins numeric(15,3),
                                    out return_aliq_grade numeric(15,3),
                                    out return_reducao_grade numeric(15,3),
                                    out return_reducao_gradeSaida numeric(15,3),
                                    out return_destaca varchar(1))
begin

  declare VarLoja integer;
  declare VarIcms numeric(15,3);
  declare VarReducao numeric(15,3);
  declare VarCliente varchar(1);
  declare VarAliquota char(2);
  declare VarTypeAliquota varchar(1);

  declare VarIcmsGradeEnt numeric(15,3) default -1;
  declare VarReducaoGradeEnt numeric(15,3);
  declare VarAliquotaGradeEnt char(2);
  declare VarTypeAliquotaGradeEnt char(1);

  declare VarIcmsGradeSaida numeric(15,3);
  declare VarReducaoGradeSaida numeric(15,3);
  declare VarAliquotaGradeSaida char(2);
  declare VarTypeAliquotaGradeSaida char(1);

  declare VarIcmsProdutor numeric(15,3);
  declare VarReducaoProdutor numeric(15,3);
  declare VarAliquotaProdutor char(2);
  declare VarTypeAliquotaProdutor varchar(1);
  declare VarProdutor varchar(1);

  declare VarEstadoOrigem char(2) default '';
  declare VarEstadoDestino char(2) default '';

  declare VarIcmsEstadoOrigem numeric(15,3);
  declare VarIcmsEstadoDestino numeric(15,3);
  declare VarReducaoEstadoOrigem numeric(15,3);
  declare VarReducaoEstadoDestino numeric(15,3);

  declare VarLojaUnificaImposto char(1);
  declare VarUtilizaRedEntrada varchar(1);
  declare VarIsentoForaEstado varchar(1);

  declare VarIcmsFora numeric(15,3);
  declare VarReducaoFora numeric(15,3);
  declare VarTypeAliquotaFora numeric(15,3);
  declare VarAliquotaFora numeric(15,3);

  declare VarGradeFiscal char(1);
  declare VarCalcTableFiscal char(1) default 'n';


  select idLoja,gradeFiscal
                    from system
                             into VarLoja, VarGradeFiscal;

  if(VarGradeFiscal is null)then set VarGradeFiscal = 'n'; end if;

            set return_reducao_grade = 0; 
            set return_reducao_gradeSaida = 0; 

if(VarGradeFiscal = 's')then


        set VarEstadoDestino = "";

  if(calc_tipo = 'e')then
    select tab1.uf
                from cliente tab
                inner join estado tab1 on(tab.uf =  tab1.uf)
                                                where
                                                  tab.idCliente in (select lojaNf from loja where idLoja =calc_Loja_Default)
                                                                                                                into VarEstadoDestino;

                                                                                                                if(VarEstadoDestino is null)then set VarEstadoDestino=''; end if;

                  if(VarEstadoDestino = '')then
                        select tab1.uf
                                      from cliente tab
                                      inner join estado tab1 on(tab.uf =  tab1.uf)
                                                                          where
                                                                          tab.idCliente=calc_destino
                                                                                                    into VarEstadoDestino; end if;
      if(VarEstadoDestino is null)then set VarEstadoDestino=''; end if;

  end if;
                

    select
           if(tab2.CalcBc = 1, tab4.icms,0.000) as IcmsEntrada,
           if(tab2.CalcRed = 1, tab4.reducao,0.000) as ReducaoEntrada,
           if(((tab11.idTipoFornecedor = 1) or (tab11.idTipoFornecedor = 2) or (tab11.idTipoFornecedor = 3)), tab7.aliquotaPis,0.000) AliquotaPis,
           if(((tab11.idTipoFornecedor = 1) or (tab11.idTipoFornecedor = 2) or (tab11.idTipoFornecedor = 3)), tab7.aliquotaCofins,0.000) AliquotaCofins,
           tab1.ipi,
           tab1.reducaoCalcEspecial

    from produto tab
                inner join produtoImpostos tab1 on(tab.idProduto = tab1.idProduto)
                inner join cst tab2 on(tab1.cst = tab2.idCst)
                inner join cliente tab3 on(tab.idFornecedor = tab3.idCliente)
                inner join estado tab4 on(tab3.uf =  tab4.uf)
                inner join aliquota tab5 on(tab1.Tributacao = tab5.idAliquota)
                inner join produtostore tab6 on(tab.idProduto = tab6.idProduto)
                inner join loja tab7 on(tab6.idloja = tab7.idloja)
                left join juridica tab8 on(tab.idFornecedor = tab8.idCliente)
                left join fisica tab9 on(tab.idFornecedor = tab9.idCliente)
                left join rural tab10 on(tab.idFornecedor = tab10.idCliente)
                left join tipoFornecedor tab11 on(tab8.idtipoFornecedor = tab11.idtipoFornecedor)

                where tab.idProduto=calc_produto

                                                into return_icms_entrada,
                                                     return_reducao_entrada,
                                                     return_pis,
                                                     return_cofins,
                                                     return_ipi,
                                                     return_reducao_grade;


Else
  select calcFigura, impostoUnificado, isentoForaEstado
                                  from system
                                          into VarCalcTableFiscal, VarLojaUnificaImposto, VarIsentoForaEstado;

      if(VarLojaUnificaImposto = 'n' && calc_tipo = 's')then
             select idLoja from loja
                                 where idLoja = calc_Loja_Default
                                                           into VarLoja;
          else
             select idLoja from system into VarLoja;
      end if;
       
      select  tab.aliquota,
              tab.reducao,
              tab.tipo,
              tab.idAliquota
                    from aliquota tab
                    inner join produtoImpostos tab1 on(tab.idAliquota = tab1.tributacao)
                                                                         where
                                                                            tab1.idLoja = VarLoja and
                                                                            tab1.idProduto = calc_produto
                                                                                                        into
                                                                                                              VarIcms,
                                                                                                              VarReducao,
                                                                                                              VarTypeAliquota,
                                                                                                              VarAliquota;
                                                                                                            if(VarIcms is null)then set VarIcms = 0; end if;
                                                                                                            if(VarReducao is null)then set VarReducao = 0; end if;
                                                                                                            if(VarTypeAliquota is null)then set VarTypeAliquota = ''; end if;
                                                                                                            if(VarAliquota is null)then set VarAliquota = ''; end if;

        
  if((select  count(*)
                    from aliquota tab
                    inner join produtoImpostos tab1 on(tab.idAliquota = tab1.tributacao1)
                                                                         where
                                                                            tab1.idLoja = VarLoja and
                                                                            tab1.idProduto = calc_produto)>0)then
        select  tab.aliquota,
              tab.reducao,
              tab.tipo,
              tab.idAliquota
                    from aliquota tab
                    inner join produtoImpostos tab1 on(tab.idAliquota = tab1.tributacao1)
                                                                         where
                                                                            tab1.idLoja = VarLoja and
                                                                            tab1.idProduto = calc_produto
                                                                                                        into
                                                                                                              VarIcmsProdutor,
                                                                                                              VarReducaoProdutor,
                                                                                                              VarTypeAliquotaProdutor,
                                                                                                              VarAliquotaProdutor;
      end if;
                                                                                                            if(VarIcmsProdutor is null)then set VarIcmsProdutor = 0; end if;
                                                                                                            if(VarReducaoProdutor is null)then set VarReducaoProdutor = 0; end if;
                                                                                                            if(VarTypeAliquotaProdutor is null)then set VarTypeAliquotaProdutor = '0'; end if;
                                                                                                            if(VarAliquotaProdutor is null)then set VarAliquotaProdutor = '0'; end if;

      
    if((      select count(*)
                    from aliquota tab
                    inner join produtoImpostos tab1 on(tab.idAliquota = tab1.tributacao2)
                                                                         where
                                                                            tab1.idLoja = VarLoja and
                                                                            tab1.idProduto = calc_produto)>0)then
      select  tab.aliquota,
              tab.reducao,
              tab.tipo,
              tab.idAliquota
                    from aliquota tab
                    inner join produtoImpostos tab1 on(tab.idAliquota = tab1.tributacao2)
                                                                         where
                                                                            tab1.idLoja = VarLoja and
                                                                            tab1.idProduto = calc_produto
                                                                                                        into
                                                                                                              VarIcmsFora,
                                                                                                              VarReducaoFora,
                                                                                                              VarTypeAliquotaFora,
                                                                                                              VarAliquotaFora;
    end if;
                                                                                                            if(VarIcmsFora is null)then set VarIcmsFora = 0; end if;
                                                                                                            if(VarReducaoFora is null)then set VarReducaoFora = 0; end if;
                                                                                                            if(VarTypeAliquotaFora is null)then set VarTypeAliquotaFora = '0'; end if;
                                                                                                            if(VarAliquotaFora is null)then set VarAliquotaFora = '0'; end if;

      select tab.uf, tab.icms, tab.reducao
                                      from estado tab
                                                  where
                                                      tab.uf = calc_origem
                                                                          into
                                                                               VarEstadoOrigem,
                                                                               VarIcmsEstadoOrigem,
                                                                               VarReducaoEstadoOrigem;
      if(VarEstadoOrigem is null)then set VarEstadoOrigem=""; end if;

select tab.uf, tab.icms,
                      tab.flagReducao,tab.reducao, tab1.idAtividade
                                                            from estado tab
                                                                 inner join cliente tab1 on(tab.idEstado = tab1.idEstado)
                                                                                                            where
                                                                                                                tab1.idCliente=calc_destino
                                                                                                            into
                                                                                                                   VarEstadoDestino,
                                                                                                                   VarIcmsEstadoDestino,
                                                                                                                   VarUtilizaRedEntrada,
                                                                                                                   VarReducaoEstadoDestino,
                                                                                                                   VarCliente;
                                                                                                                   if(VarEstadoDestino is null)then set VarEstadoDestino= ""; end if;
                                                                                                                   if(VarUtilizaRedEntrada is null)then set VarUtilizaRedEntrada='n'; end if;
                                                                                                                   if(varCliente is null)then set varCliente=''; end if;


      if(VarCalcTableFiscal = 's')then
          
                if(calc_tipo = 'e')then
                select
                      tab5.idAliquota,
                      tab5.aliquota,
                      tab5.Reducao,
                      tab5.tipo,
                      tab2.TypeCst As Destacadonota, 
                      if(tab2.CalcBc = 1, tab4.icms,0.000) as IcmsEntrada,
                      if(tab2.CalcRed = 1, if(tab1.reducaoCalcEspecial > 0, tab1.reducaoCalcEspecial, if(tab4.reducao > 0, tab4.reducao, 0.000)),0.000) as ReducaoEntrada 
                from produto tab
                                inner join produtoImpostos tab1 on(tab.idProduto = tab1.idProduto)
                                inner join cst tab2 on(tab1.cst = tab2.idCst)
                                inner join cliente tab3 on(tab.idFornecedor = tab3.idCliente)
                                inner join estado tab4 on(tab3.uf =  tab4.uf)
                                inner join aliquota tab5 on(tab1.Tributacao = tab5.idAliquota)
                                inner join produtostore tab6 on(tab.idProduto = tab6.idProduto)
                                inner join loja tab7 on(tab6.idloja = tab7.idloja)
                                left join juridica tab8 on(tab.idFornecedor = tab8.idCliente)
                                left join fisica tab9 on(tab.idFornecedor = tab9.idCliente)
                                left join rural tab10 on(tab.idFornecedor = tab10.idCliente)
                                left join tipoFornecedor tab11 on(tab8.idtipoFornecedor = tab11.idtipoFornecedor)
                where tab.idProduto=calc_produto
                into
                      VarAliquotaGradeEnt,
                      VarIcmsGradeEnt,
                      VarReducaoGradeEnt,
                      VarTypeAliquotaGradeEnt,
                      return_destaca,
                      return_aliq_grade,
                      return_reducao_grade;


                          if(VarAliquotaGradeEnt is null)then set VarAliquotaGradeEnt=''; end if;
                          if(VarIcmsGradeEnt is null)then set VarIcmsGradeEnt=-1; end if;
                          if(VarReducaoGradeEnt is null)then set VarReducaoGradeEnt=0; end if;
                          if(VarTypeAliquotaGradeEnt is null)then set VarTypeAliquotaGradeEnt=''; end if;
                          if(return_destaca is null)then set return_destaca='n'; end if;
                          if(return_aliq_grade is null)then set return_aliq_grade=0; end if;
                          if(return_reducao_grade is null)then set return_reducao_grade=0; end if;

        
        else

        
                select
                      tab5.idAliquota,
                      tab5.aliquota,
                      tab5.Reducao,
                      tab5.tipo,
                      if(tab2.calcBc=0,'n','s') As Destacadonota, 
                      if(tab2.CalcBc = 1, VarIcmsEstadoDestino,0.000) as IcmsSaida,
                      if(tab2.CalcRed = 1, if(tab1.reducaoCalcEspecial > 0, tab1.reducaoCalcEspecial, if(VarReducaoEstadoDestino > 0, VarReducaoEstadoDestino, 0.000)),0.000) as ReducaoEntrada 
                from produto tab
                                inner join produtoImpostos tab1 on(tab.idProduto = tab1.idProduto)
                                inner join cst tab2 on(tab1.cst = tab2.idCst)
                                inner join aliquota tab5 on(tab1.Tributacao = tab5.idAliquota)
                                inner join produtostore tab6 on(tab.idProduto = tab6.idProduto)
                                inner join loja tab7 on(tab6.idloja = tab7.idloja)
                where
                                tab.idProduto=calc_produto
                into
                      VarAliquotaGradeSaida,
                      VarIcmsGradeSaida,
                      VarReducaoGradeSaida,
                      VarTypeAliquotaGradeSaida,
                      return_destaca,
                      return_aliq_grade,
                      return_reducao_gradeSaida;

                          if(VarAliquotaGradeSaida is null)then set VarAliquotaGradeSaida=''; end if;
                          if(VarIcmsGradeSaida is null)then set VarIcmsGradeSaida=-1; end if;
                          if(VarReducaoGradeSaida is null)then set VarReducaoGradeSaida=0; end if;
                          if(VarTypeAliquotaGradeSaida is null)then set VarTypeAliquotaGradeSaida=''; end if;
                          if(return_destaca is null)then set return_destaca='n'; end if;
        
        end if;
      end if;

      if(calc_tipo = 'e')then

               set return_icms_saida = VarIcms;
               set return_reducao_saida = VarReducao;
               set return_tipo_aliq_saida = VarTypeAliquota;
               set return_codigo_aliq_saida = VarAliquota;
               set return_tipo_aliq_entrada = VarTypeAliquota;
               set return_codigo_aliq_entrada = VarAliquota;

                  if(VarEstadoOrigem = VarEstadoDestino)then

                        set return_icms_entrada = VarIcms;
                        set return_reducao_entrada = VarReducao;

                  else
                        if((VarIcmsFora is null) and (VarIcmsFora <> 0)) then

                              set return_icms_entrada = VarIcmsFora;
                              set return_reducao_entrada = VarReducaoFora;
                              set return_tipo_aliq_entrada = VarTypeAliquotaFora;
                              set return_codigo_aliq_entrada = VarAliquotaFora;
                        else
                              if(VarTypeAliquota = 't')then

                                  set return_icms_entrada = VarIcmsEstadoDestino;

                                if(VarUtilizaRedEntrada = 's')then

                                  set return_reducao_entrada = VarReducaoEstadoOrigem; else set return_reducao_entrada = 0; end if;

                              else

                                  set return_icms_entrada = 0;
                                  set return_reducao_entrada = 0; end if;


                         end if;
                        if(VarCalcTableFiscal = 's')then 
                            if(VarIcmsGradeEnt <> -1)then 
                              set return_icms_entrada = VarIcmsGradeEnt;
                              set return_reducao_entrada = VarReducaoGradeEnt;
                              set return_codigo_aliq_entrada = VarAliquotaGradeEnt;
                            end if;
                            if(VarIcmsGradeSaida <> -1)then
                              set return_icms_saida = VarIcmsGradeSaida;
                              set return_reducao_saida = VarReducaoGradeSaida;
                              set return_codigo_aliq_saida = VarAliquotaGradeSaida;
                            end if;
                        end if;


                  end if;

      else if(calc_tipo = 's')then

                        set return_icms_saida = VarIcms;
                        set return_reducao_saida = VarReducao;
                        set return_tipo_aliq_saida = VarTypeAliquota;
                        set return_codigo_aliq_saida = VarAliquota;

                      if(VarEstadoOrigem = VarEstadoDestino)then
                        if((VarTypeAliquota = 't')and(VarIsentoForaEstado = 's'))then 
                            select tab2.icms,
                                   tab2.reducao,
                                   tab1.tipo,
                                   tab1.idAliquota
                                    from aliquota tab1
                                         inner join estado tab2 on(tab1.Aliquota = tab2.icms AND tab1.reducao = tab2.reducao)
                                                 where tab2.uf = VarEstadoDestino
                                                        INTO
                                                              return_icms_saida,
                                                              return_reducao_saida,
                                                              return_tipo_aliq_saida,
                                                              return_codigo_aliq_saida;

                                                              if(return_icms_saida is null)then set return_icms_saida=0; end if;
                                                              if(return_reducao_saida is null)then set return_reducao_saida=0; end if;
                                                              if(return_tipo_aliq_saida is null)then set return_tipo_aliq_saida = ''; end if;
                                                              if(return_codigo_aliq_saida is null)then set return_codigo_aliq_saida = ''; end if;
                          end if;
                        if((VarTypeAliquotaFora is null) and (VarTypeAliquotaFora <> '0'))then
                            set return_icms_saida = VarIcmsFora;
                            set return_reducao_saida = VarReducaoFora;
                            set return_tipo_aliq_saida = VarTypeAliquotaFora;
                            set return_codigo_aliq_saida = VarAliquotaFora;
                        end if;
                        if((VarTypeAliquota = 't')or(VarCliente = '1'))then

                              select idTipoPessoa
                                            from cliente
                                                    where idCliente=calc_destino
                                                                     into VarProdutor;
                                                                     if(VarProdutor is null)then set VarProdutor = '0'; end if;

                                    if(VarProdutor = '3')then
                                      if((VarEstadoOrigem = VarEstadoDestino) and (VarTypeAliquotaProdutor <> '0'))then

                                            set return_icms_saida = VarIcmsProdutor;
                                            set return_reducao_saida = VarReducaoProdutor;
                                            set return_tipo_aliq_saida = VarTypeAliquotaProdutor;
                                            set return_codigo_aliq_saida = VarAliquotaProdutor;
                                      else if((VarTypeAliquotaProdutor = '0')or(VarTypeAliquotaProdutor is null))then
                                             if((VarTypeAliquota <> '') and (VarTypeAliquota is null))then

                                                set return_icms_saida = VarIcms;
                                                set return_reducao_saida = VarReducao;
                                                set return_tipo_aliq_saida = VarTypeAliquota;
                                                                                                set return_codigo_aliq_saida = VarAliquota;
                                               else
                                                select tab2.icms,
                                                       tab2.reducao,
                                                       tab1.tipo,
                                                       tab1.idAliquota
                                                                from aliquota tab1
                                                                     inner join estado tab2 on(tab1.Aliquota = tab2.icms AND tab1.reducao = tab2.reducao)
                                                                             where tab2.uf = VarEstadoDestino
                                                                                                            INTO
                                                                                                                return_icms_saida,
                                                                                                                return_reducao_saida,
                                                                                                                return_tipo_aliq_saida,
                                                                                                                return_codigo_aliq_saida;
                                             end if;
                                           end if;
                                      end if;
                                    end if;
                        end if;
                      end if;
           end if;

                        if(VarIcmsGradeEnt <> -1)then

                              set return_icms_entrada = VarIcmsGradeEnt;
                              set return_reducao_entrada = VarReducaoGradeEnt;
                              set return_codigo_aliq_entrada = VarAliquotaGradeEnt;

                       end if;

                       if(VarIcmsGradeSaida <> -1)then

                              set return_icms_saida = VarIcmsGradeSaida;
                              set return_reducao_saida = VarReducaoGradeSaida;
                              set return_codigo_aliq_saida = VarAliquotaGradeSaida;

                       end if;


      end if;

end if;


                                    set  return_icms_entrada = if(return_icms_entrada is null,0.000,return_icms_entrada);
                                    set  return_reducao_entrada = if(return_reducao_entrada is null, 0.000, return_reducao_entrada);
                                    set  return_icms_saida = if(return_icms_saida is null,0.000,return_icms_saida);
                                    set  return_reducao_saida = if(return_reducao_saida is null,0.000,return_reducao_saida);
                                    set  return_tipo_aliq_entrada = if(return_tipo_aliq_entrada is null,'t',return_tipo_aliq_entrada);
                                    set  return_codigo_aliq_entrada = if(return_codigo_aliq_entrada is null,'T0',return_codigo_aliq_entrada);
                                    set  return_tipo_aliq_saida = if(return_tipo_aliq_saida is null,'t',return_tipo_aliq_saida);
                                    set  return_codigo_aliq_saida = if(return_codigo_aliq_saida is null,'T0',return_codigo_aliq_saida);
                                    set  return_ipi = if(return_ipi is null,0.000,return_ipi);
                                    set  return_pis = if(return_pis is null,0.000,return_pis);
                                    set  return_cofins = if(return_cofins is null,0.000,return_cofins);
                                    set  return_aliq_grade = if(return_aliq_grade is null,0.000,return_aliq_grade);
                                    set  return_reducao_grade = if(return_reducao_grade is null,0.000,return_reducao_grade);
                                    set  return_reducao_gradeSaida = if(return_reducao_gradeSaida is null,0.000,return_reducao_gradeSaida);
                                    set  return_destaca = if(return_destaca is null,'n',return_destaca);

                                                            
end $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `conector_calc_Jcomposto`
--

DROP PROCEDURE IF EXISTS `conector_calc_Jcomposto`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='' */ $$
CREATE DEFINER=`master`@`localhost` PROCEDURE `conector_calc_Jcomposto`(
                                            in tipo smallint,
                                            in find_metodo integer,
                                            in calc_pontoPartida numeric(15,3),
                                            in calc_entrada numeric(15,3)
                                         )
begin


    declare pontoPartida numeric(15,3);
    declare entrada numeric(15,3);

    if (calc_entrada = 0) then
        set entrada = calc_entrada;
        set pontoPartida = calc_pontoPartida;
    else
        set entrada = calc_entrada;
        set pontoPartida = (calc_pontoPartida - calc_entrada);
    end if;

case tipo
  when 1 then

select
       truncate(entrada,2),
       metodoParcelas.idmetodoParcelas,
       finalizadora.descricao,
       truncate((fator*pontoPartida),2) as "Valor Parcela",

       truncate((entrada+(metodoParcelas.idMetodoParcelas*truncate((fator*pontoPartida),2))),2) as Financiamento
  from
    metodoParcelas
  inner join metodo on(metodoParcelas.idMetodo = metodo.idMetodo) 
  inner join finalizadora on(metodo.idFinalizadora = finalizadora.idFinalizadora)
  where
       metodoParcelas.idMetodo = find_metodo;

  when 2 then

select
       truncate(entrada,2),
       metodoParcelas.idmetodoParcelas,
       finalizadora.descricao,
       truncate((fator*pontoPartida),2) as "Valor Parcela",

       truncate((entrada+(metodoParcelas.idMetodoParcelas*truncate((fator*pontoPartida),2))),2) as Financiamento
  from
    metodoParcelas
  inner join metodo on(metodoParcelas.idMetodo = metodo.idMetodo and metodo.nroparcelas=metodoparcelas.idMetodoParcelas)
  inner join finalizadora on(metodo.idFinalizadora = finalizadora.idFinalizadora)
  where
       metodoParcelas.idMetodo = find_metodo;

end case;
end $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `conector_calc_margem_lbc`
--

DROP PROCEDURE IF EXISTS `conector_calc_margem_lbc`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='' */ $$
CREATE DEFINER=`master`@`localhost` PROCEDURE `conector_calc_margem_lbc`(
                                              in find_produto integer,
                                              in find_loja integer,
                                              in price numeric(15,3),
                                              in priceEnd numeric(15,3),
                                              out pv numeric(15,3),
                                              out reposicao numeric(15,3),
                                              out venda numeric(15,3),
                                              out minimo numeric(15,3),
                                              out sugestao numeric(15,3),
                                              out margem numeric(15,3),
                                              out lbruto numeric(15,3),
                                              out lliquido numeric(15,3),
                                              out mBruto numeric(15,3),
                                              out mLiquida numeric(15,3)
                                           )
begin

    set @a = (select (price - ((price*primeiroDesconto)/100)) from produtoPrice where idProduto=find_produto and idLoja = find_loja);
    if(@a = 0)then set @a=price; end if;     set @b = (select (@a - ((@a*segundoDesconto)/100)) from produtoPrice where idProduto=find_produto and idLoja = find_loja);
    set @c = (select (@b - ((@b*terceiroDesconto)/100)) from produtoPrice where idProduto=find_produto and idLoja = find_loja);
    set @d = (select ((@c*IpiPorcentagem)/100) as IPI from produtoPrice where idProduto=find_produto and idLoja = find_loja);
    set @e = (select ((@c*fretePorcentagem)/100) as Frete from produtoPrice where idProduto=find_produto and idLoja = find_loja);
    set @f = (select ((@c*substituicaoPorcetagem)/100) as ST from produtoPrice where idProduto=find_produto and idLoja = find_loja);
    set @g = (select (@c+@d+@e+@f) as ST from produtoPrice where idProduto=find_produto and idLoja= find_loja);
    set @h =  'select idproduto,@g as custo, (1 + (margem/100)) as margem, ';
    set @i =  '(@g-((@g * (if(creditoRedIcms > 0, (creditoIcms-sum((((creditoIcms*creditoRedIcms)/100)))),creditoIcms)+creditoPis+creditoCofins))/100)) "Custo Reposição", ';
    set @f1 = '(@g * (1 + (margem/100))) as "Preço Venda" , ';
    set @j =  '(@g * (1 + (5/100))) as "Preço Minimo", ';
    set @l =  concat('(' , priceEnd , '-', price, ') as "lucro bruto", ');
    set @m =  '(@g * (1 + (30/100))) as "Sugestao" , ';
    set @n = concat('(((100*', priceEnd, ')-');
    set @o = concat('(((((if(debitoRedIcms > 0, (debitoIcms-sum((((debitoIcms*debitoRedIcms)/100)))),debitoIcms)+creditoPis+creditoCofins +(financeiro+despesaFixa+contribuicao+vendo)))/100))*', priceEnd, ')-');
    set @p = '(100*@g))';
    set @q  = '/';
    set @r = concat('@g) as "Margem Bruta", ');
    set @s = concat('(', priceEnd, '-');
    set @t = concat('(', priceEnd, '*');
    set @u = '((((if(debitoRedIcms > 0, (debitoIcms-sum((((debitoIcms*debitoRedIcms)/100)))),debitoIcms)+creditoPis+creditoCofins +(financeiro+despesaFixa+contribuicao+vendo)))/100)))) -';
    set @v = '(@g-((@g * (if(creditoRedIcms > 0, (creditoIcms-sum((((creditoIcms*creditoRedIcms)/100)))),creditoIcms)+creditoPis+creditoCofins))/100)) as "lucro liquido", ';
    set @z = concat('(100*(((', priceEnd, '-');
    set @w = concat('(', priceEnd, '*');
    set @y = '((((if(debitoRedIcms > 0, (debitoIcms-sum((((debitoIcms*debitoRedIcms)/100)))),debitoIcms)+creditoPis+creditoCofins +(financeiro+despesaFixa+contribuicao+vendo)))/100)))) - ';
    set @k = '(@g-((@g * (if(creditoRedIcms > 0, (creditoIcms-sum((((creditoIcms*creditoRedIcms)/100)))),creditoIcms)+creditoPis+creditoCofins))/100))) / @g)) as "margem liquida"';
    set @a1 =  ' into @produto, @custo,@margem, @reposicao, @venda, @minimo, @lbruto, @sugestao, @mbruta, @lliquido, @margemLiquida from produtoPrice where idProduto= ';
    set @b1 = find_produto;
    set @c1 = ' and idloja= ';
    set @d1 = find_loja;
    set @e1 = ' group by 1 ';
    set @x = concat(@h,@i,@f1,@j,@l,@m,@n,@o,@p,@q,@r,@s,@t,@u,@v,@z,@w,@y,@k,@a1,@b1,@c1,@d1,@e1);
    PREPARE output from @x;
    EXECUTE output;


    set pv = @custo;
    set margem = @margem;
    set reposicao = @reposicao;
    set venda = @venda;
    set minimo = @minimo;
    set lbruto = @lbruto;
    set sugestao = @sugestao;
    set mBruto = @mbruta;
    set lliquido = @lliquido;
    set mLiquida = @margemLiquida;

end $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `conector_calc_margem_lbv`
--

DROP PROCEDURE IF EXISTS `conector_calc_margem_lbv`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='' */ $$
CREATE DEFINER=`master`@`localhost` PROCEDURE `conector_calc_margem_lbv`(
                                              in find_produto integer,
                                              in find_loja integer,
                                              in price numeric(15,3),
                                              in priceEnd numeric(15,3),
                                              out pv numeric(15,3),
                                              out reposicao numeric(15,3),
                                              out venda numeric(15,3),
                                              out minimo numeric(15,3),
                                              out sugestao numeric(15,3),
                                              out margem numeric(15,3),
                                              out lbruto numeric(15,3),
                                              out lliquido numeric(15,3),
                                              out mBruto numeric(15,3),
                                              out mLiquida numeric(15,3)
                                           )
begin

    set @a = (select (priceFull - ((priceFull*primeiroDesconto)/100)) from produtoPrice where idProduto=find_produto and idLoja = find_loja);
    if(@a = 0)then set @a=price; end if;     set @b = (select (@a - ((@a*segundoDesconto)/100)) from produtoPrice where idProduto=find_produto and idLoja = find_loja);
    set @c = (select (@b - ((@b*terceiroDesconto)/100)) from produtoPrice where idProduto=find_produto and idLoja = find_loja);
    set @d = (select ((@c*IpiPorcentagem)/100) as IPI from produtoPrice where idProduto=find_produto and idLoja = find_loja);
    set @e = (select ((@c*fretePorcentagem)/100) as Frete from produtoPrice where idProduto=find_produto and idLoja = find_loja);
    set @f = (select ((@c*substituicaoPorcetagem)/100) as ST from produtoPrice where idProduto=find_produto and idLoja = find_loja);
    set @g = (select (@c+@d+@e+@f) as ST from produtoPrice where idProduto=find_produto and idLoja= find_loja);
    set @h =  'select idproduto,@g as custo, (1 - (margem/100)) as margem, ';
    set @i =  '(@g-((@g * (if(creditoRedIcms > 0, (creditoIcms-sum((((creditoIcms*creditoRedIcms)/100)))),creditoIcms)+creditoPis+creditoCofins))/100)) "Custo Reposição", ';
    set @f1 = '(@g / (1 - (margem/100))) as "Preço Venda" , ';
    set @j =  '(@g * (1 + (5/100))) as "Preço Minimo", '; 
    set @l =  concat('(', priceEnd, '-', price, ') as "lucro bruto", ');
    set @m =  '(@g * (1 + (30/100))) as "Sugestao" , '; 
    set @n = concat('(((100*' ,priceEnd, ')-');
    set @o = concat('(((((if(debitoRedIcms > 0, (debitoIcms-sum((((debitoIcms*debitoRedIcms)/100)))),debitoIcms)+creditoPis+creditoCofins +(financeiro+despesaFixa+contribuicao+vendo)))/100))*', priceEnd,' )-');
    set @p = '(100*@g))';
    set @q  = '/';
    set @r = concat(' ' , priceEnd, ') as "Margem Bruta", ');
    set @s = concat('(', priceEnd, '-');
    set @t = concat('(' , priceEnd, '*');
    set @u = '((((if(debitoRedIcms > 0, (debitoIcms-sum((((debitoIcms*debitoRedIcms)/100)))),debitoIcms)+creditoPis+creditoCofins +(financeiro+despesaFixa+contribuicao+vendo)))/100)))) -';
    set @v = '(@g-((@g * (if(creditoRedIcms > 0, (creditoIcms-sum((((creditoIcms*creditoRedIcms)/100)))),creditoIcms)+creditoPis+creditoCofins))/100)) as "lucro liquido", ';
    set @z = concat('100*((((' , priceEnd, '-');
    set @w = concat('(' , priceEnd , '*');
    set @y = '((((if(debitoRedIcms > 0, (debitoIcms-sum((((debitoIcms*debitoRedIcms)/100)))),debitoIcms)+creditoPis+creditoCofins +(financeiro+despesaFixa+contribuicao+vendo)))/100)))) - ';
    set @k = concat('(@g-((@g * (if(creditoRedIcms > 0, (creditoIcms-sum((((creditoIcms*creditoRedIcms)/100)))),creditoIcms)+creditoPis+creditoCofins))/100))) / ' , priceEnd , ')) as "margem liquida"');
    set @a1 =  ' into @produto, @custo,@margem, @reposicao, @venda, @minimo, @lbruto, @sugestao, @mbruta, @lliquido, @margemLiquida from produtoPrice where idProduto= ';
    set @b1 = find_produto;
    set @c1 = ' and idloja= ';
    set @d1 = find_loja;
    set @e1 = ' group by 1 ';
    set @x = concat(@h,@i,@f1,@j,@l,@m,@n,@o,@p,@q,@r,@s,@t,@u,@v,@z,@w,@y,@k,@a1,@b1,@c1,@d1,@e1);
    PREPARE output from @x;
    EXECUTE output;

    set pv = @custo;
    set margem = @margem;
    set reposicao = @reposicao;
    set venda = @venda;
    set minimo = @minimo;
    set lbruto = @lbruto;
    set sugestao = @sugestao;
    set mBruto = @mbruto;
    set lliquido = @lliquido;
    set mLiquida = @margemLiquida;

end $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `conector_calc_margem_llc`
--

DROP PROCEDURE IF EXISTS `conector_calc_margem_llc`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='' */ $$
CREATE DEFINER=`master`@`localhost` PROCEDURE `conector_calc_margem_llc`(
                                              in find_produto integer,
                                              in find_loja integer,
                                              in price numeric(15,3),
                                              in priceEnd numeric(15,3),
                                              out pv numeric(15,3),
                                              out reposicao numeric(15,3),
                                              out venda numeric(15,3),
                                              out minimo numeric(15,3),
                                              out sugestao numeric(15,3),
                                              out margem numeric(15,3),
                                              out lbruto numeric(15,3),
                                              out lliquido numeric(15,3),
                                              out mBruto numeric(15,3),
                                              out mLiquida numeric(15,3)
                                           )
begin
    set @a = (select (priceFull - ((priceFull*primeiroDesconto)/100)) from produtoPrice where idProduto=find_produto and idLoja = find_loja);
    if(@a = 0)then set @a=price; end if;     set @b = (select (@a - ((@a*segundoDesconto)/100)) from produtoPrice where idProduto=find_produto and idLoja = find_loja);
    set @c = (select (@b - ((@b*terceiroDesconto)/100)) from produtoPrice where idProduto=find_produto and idLoja = find_loja);
    set @d = (select ((@c*IpiPorcentagem)/100) as IPI from produtoPrice where idProduto=find_produto and idLoja = find_loja);
    set @e = (select ((@c*fretePorcentagem)/100) as Frete from produtoPrice where idProduto=find_produto and idLoja = find_loja);
    set @f = (select ((@c*substituicaoPorcetagem)/100) as ST from produtoPrice where idProduto=find_produto and idLoja = find_loja);
    set @g = (select (@c+@d+@e+@f) as ST from produtoPrice where idProduto=find_produto and idLoja = find_loja);
    set @h =  ' select idproduto, ';
    set @i =  ' @g as custo, ';
    set @j =  ' (1+((margem)/100))/((1-(((((if(debitoRedIcms > 0, (debitoIcms-sum((((debitoIcms*debitoRedIcms)/100)))),debitoIcms)+creditoPis+creditoCofins +(financeiro+despesaFixa+contribuicao+vendo)))))/100))) "Margem Aplic", ';
    set @l =  ' (@g-((@g * (if(creditoRedIcms > 0, (creditoIcms-sum((((creditoIcms*creditoRedIcms)/100)))),creditoIcms)+creditoPis+creditoCofins))/100)) "Custo Reposição", ';
    set @m =  ' (((@g -((@g * (if(creditoRedIcms > 0, (creditoIcms-sum((((creditoIcms*creditoRedIcms)/100)))),creditoIcms)+creditoPis+creditoCofins))/100)) * (1+(margem/100))) ';
    set @n =  ' / ';
    set @o =  ' (1-(((((if(debitoRedIcms > 0, (debitoIcms-sum((((debitoIcms*debitoRedIcms)/100)))),debitoIcms)+creditoPis+creditoCofins+(financeiro+despesaFixa+contribuicao+vendo)))))/100)))  as venda, ';
    set @p =  ' (((@g -((@g * (if(creditoRedIcms > 0, (creditoIcms-sum((((creditoIcms*creditoRedIcms)/100)))),creditoIcms)+creditoPis+creditoCofins))/100))) ';
    set @q =  ' / ';
    set @r =  ' (1-(((((if(debitoRedIcms > 0, (debitoIcms-sum((((debitoIcms*debitoRedIcms)/100)))),debitoIcms)+creditoPis+creditoCofins+(financeiro+despesaFixa+contribuicao+vendo)))))/100))) as "Minimo Venda", ';
    set @s =  concat(' ((', priceEnd, ')- ', price ,' ) as "Lucro Bruto", ');
    set @t =  ' (((@g -((@g * (if(creditoRedIcms > 0, (creditoIcms-sum((((creditoIcms*creditoRedIcms)/100)))),creditoIcms)+creditoPis+creditoCofins))/100)) * (1+(5/100))) ';  
    set @u =  ' / ';
    set @v =  ' (1-(((((if(debitoRedIcms > 0, (debitoIcms-sum((((debitoIcms*debitoRedIcms)/100)))),debitoIcms)+creditoPis+creditoCofins+(financeiro+despesaFixa+contribuicao+vendo)))))/100)))  as sugestao, ';
    set @z =  concat(' (((100*', priceEnd, ')');
    set @w =  ' - ';
    set @y =  ' ((((if(debitoRedIcms > 0, (debitoIcms-sum((((debitoIcms*debitoRedIcms)/100)))),debitoIcms)+creditoPis+creditoCofins +(financeiro+despesaFixa+contribuicao+vendo)))/100) ';
    set @k =  ' * ';
    set @a1 =  concat(' ', priceEnd, ')');
    set @b1 =  ' - ';
    set @c1 =  '(100*@g))';
    set @d1 =  ' / ';
    set @e1 =  concat(' ', priceEnd, ') as "margem lucro", ');
    set @f1 =  concat(' ((', priceEnd, ' - ');
    set @g1 =  concat(' (', priceEnd, '');
    set @h1 =  ' * ';
    set @i1 =  ' ((((if(debitoRedIcms > 0, (debitoIcms-sum((((debitoIcms*debitoRedIcms)/100)))),debitoIcms)+creditoPis+creditoCofins +(financeiro+despesaFixa+contribuicao+vendo)))/100))))';
    set @j1 =  ' - ';
    set @l1 =  ' (@g-((@g * (if(creditoRedIcms > 0, (creditoIcms-sum((((creditoIcms*creditoRedIcms)/100)))),creditoIcms)+creditoPis+creditoCofins))/100))) as "lucro liquido", ';
    set @m1 =  concat(' 100*(((', priceEnd, ' - ');
    set @n1 =  concat(' (', priceEnd, '');
    set @o1 =  ' * ';
    set @p1 =  ' ((((if(debitoRedIcms > 0, (debitoIcms-sum((((debitoIcms*debitoRedIcms)/100)))),debitoIcms)+creditoPis+creditoCofins +(financeiro+despesaFixa+contribuicao+vendo)))/100))))';
    set @q1 =  ' - ';
    set @r1 =  ' (@g-((@g * (if(creditoRedIcms > 0, (creditoIcms-sum((((creditoIcms*creditoRedIcms)/100)))),creditoIcms)+creditoPis+creditoCofins))/100)))';
    set @s1 =  ' / ';
    set @t1 =  concat(' ',priceEnd, ')  as mliquida ');
    set @u1 =  ' into @produto, @custo, @margem, @reposicao , @venda, @minimo, @lbruto, @sugestao, @mbruto, @lliquido, @margemLiquida from produtoPrice where idProduto= ';
    set @v1 = find_produto;
    set @x1 = ' and idloja= ';
    set @z1 = find_loja;
    set @w1 = ' group by 1 ';
    set @x = concat(@h,@i,@j,@l,@m,@n,@o,@p,@q,@r,@s,@t,@u,@v,@z,@w,@y,@k,@a1,@b1,@c1,@d1,@e1,@f1,@g1,@h1,@i1,@j1,@l1,@m1,@n1,@o1,@p1,@q1,@r1,@s1,@t1,@u1,@v1,@x1,@z1,@w1);
    PREPARE output from @x;
    EXECUTE output;

    set pv = @custo;
    set margem = @margem;
    set reposicao = @reposicao;
    set venda = @venda;
    set minimo = @minimo;
    set lbruto = @lbruto;
    set sugestao = @sugestao;
    set mBruto = @mbruto;
    set lliquido = @lliquido;
    set mLiquida = @margemLiquida;

end $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `conector_calc_margem_llv`
--

DROP PROCEDURE IF EXISTS `conector_calc_margem_llv`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='' */ $$
CREATE DEFINER=`master`@`localhost` PROCEDURE `conector_calc_margem_llv`(
                                              in find_produto integer,
                                              in find_loja integer,
                                              in price numeric(15,3),
                                              in priceEnd numeric(15,3),
                                              out pv numeric(15,3),
                                              out reposicao numeric(15,3),
                                              out venda numeric(15,3),
                                              out minimo numeric(15,3),
                                              out sugestao numeric(15,3),
                                              out margem numeric(15,3),
                                              out lbruto numeric(15,3),
                                              out lliquido numeric(15,3),
                                              out mBruto numeric(15,3),
                                              out mLiquida numeric(15,3)
                                           )
begin
    set @a = (select (priceFull - ((priceFull*primeiroDesconto)/100)) from produtoPrice where idProduto=find_produto and idLoja = find_loja);
    if(@a = 0)then set @a=price; end if;     set @b = (select (@a - ((@a*segundoDesconto)/100)) from produtoPrice where idProduto=find_produto and idLoja = find_loja);
    set @c = (select (@b - ((@b*terceiroDesconto)/100)) from produtoPrice where idProduto=find_produto and idLoja = find_loja);
    set @d = (select ((@c*IpiPorcentagem)/100) as IPI from produtoPrice where idProduto=find_produto and idLoja = find_loja);
    set @e = (select ((@c*fretePorcentagem)/100) as Frete from produtoPrice where idProduto=find_produto and idLoja = find_loja);
    set @f = (select ((@c*substituicaoPorcetagem)/100) as ST from produtoPrice where idProduto=find_produto and idLoja = find_loja);
    set @g = (select (@c+@d+@e+@f) as ST from produtoPrice where idProduto=find_produto and idLoja = find_loja);
    set @h =  ' select idproduto, ';
    set @i =  ' @g as custo, ';
    set @j =  ' (100*(1-((((margem + (if(debitoRedIcms > 0, (debitoIcms-sum((((debitoIcms*debitoRedIcms)/100)))),debitoIcms)+creditoPis+creditoCofins +(financeiro+despesaFixa+contribuicao+vendo)))))/100))) "Margem Aplic", ';
    set @l =  ' (@g-((@g * (if(creditoRedIcms > 0, (creditoIcms-sum((((creditoIcms*creditoRedIcms)/100)))),creditoIcms)+creditoPis+creditoCofins))/100)) "Custo Reposição", ';
    set @m =  ' (((@g -((@g * (if(creditoRedIcms > 0, (creditoIcms-sum((((creditoIcms*creditoRedIcms)/100)))),creditoIcms)+creditoPis+creditoCofins))/100))) ';
    set @n =  ' / ';
    set @o =  ' (1-((((margem + (if(debitoRedIcms > 0, (debitoIcms-sum((((debitoIcms*debitoRedIcms)/100)))),debitoIcms)+creditoPis+creditoCofins+(financeiro+despesaFixa+contribuicao+vendo)))))/100)))  as venda, ';
    set @p =  ' ((((@g -((@g * (if(creditoRedIcms > 0, (creditoIcms-sum((((creditoIcms*creditoRedIcms)/100)))),creditoIcms)+creditoPis+creditoCofins))/100))) ';
    set @q =  ' / ';
    set @r =  ' (1-((((if(debitoRedIcms > 0, (debitoIcms-sum((((debitoIcms*debitoRedIcms)/100)))),debitoIcms)+creditoPis+creditoCofins+(financeiro+despesaFixa+contribuicao+vendo)))))/100))) as "Minimo Venda", ';
    set @s =  concat('(',priceEnd, ' - ' , price , ' ) as "Lucro Bruto",  ');
    set @t =  ' (((@g -((@g * (if(creditoRedIcms > 0, (creditoIcms-sum((((creditoIcms*creditoRedIcms)/100)))),creditoIcms)+creditoPis+creditoCofins))/100))) ';
    set @u =  ' / ';
    set @v =  ' (1-((((5 + (if(debitoRedIcms > 0, (debitoIcms-sum((((debitoIcms*debitoRedIcms)/100)))),debitoIcms)+creditoPis+creditoCofins+(financeiro+despesaFixa+contribuicao+vendo)))))/100)))  as sugestao, '; 
    set @z =  concat(' (((100 * ' , priceEnd, ')');
    set @y =  ' - ';
    set @w =  ' ((((if(debitoRedIcms > 0, (debitoIcms-sum((((debitoIcms*debitoRedIcms)/100)))),debitoIcms)+creditoPis+creditoCofins +(financeiro+despesaFixa+contribuicao+vendo)))/100) ';
    set @k =  ' * ';
    set @a1 =  concat('', priceEnd, ')');
    set @b1 =  ' - ';
    set @c1 =  '(100*@g))';
    set @d1 =  ' / ';
    set @e1 =  concat('', priceEnd, ' ) as "margem lucro", ');
    set @f1 =  concat(' ((' , priceEnd, ' - ');
    set @g1 =  concat(' (', priceEnd, '');
    set @h1 =  ' * ';
    set @i1 =  ' ((((if(debitoRedIcms > 0, (debitoIcms-sum((((debitoIcms*debitoRedIcms)/100)))),debitoIcms)+creditoPis+creditoCofins +(financeiro+despesaFixa+contribuicao+vendo)))/100))))';
    set @j1 =  ' - ';
    set @l1 =  ' (@g-((@g * (if(creditoRedIcms > 0, (creditoIcms-sum((((creditoIcms*creditoRedIcms)/100)))),creditoIcms)+creditoPis+creditoCofins))/100))) as "lucro liquido", ';
    set @m1 =  concat(' 100*(((', priceEnd, ' - ');
    set @n1 =  concat(' (', priceEnd, '');
    set @o1 =  ' * ';
    set @p1 =  ' ((((if(debitoRedIcms > 0, (debitoIcms-sum((((debitoIcms*debitoRedIcms)/100)))),debitoIcms)+creditoPis+creditoCofins +(financeiro+despesaFixa+contribuicao+vendo)))/100))))';
    set @q1 =  ' - ';
    set @r1 =  ' (@g-((@g * (if(creditoRedIcms > 0, (creditoIcms-sum((((creditoIcms*creditoRedIcms)/100)))),creditoIcms)+creditoPis+creditoCofins))/100)))';
    set @s1 =  ' / ';
    set @t1 =  concat(' ',priceEnd, ')  as "Margem liquida" ');
    set @u1 =  ' into @produto, @custo, @margem, @reposicao , @venda, @minimo, @lbruto, @sugestao, @mbruto, @lliquido, @margemLiquida from produtoPrice where idProduto= ';
    set @v1 = find_produto;
    set @x1 = ' and idloja= ';
    set @z1 = find_loja;
    set @y1 = ' group by 1 ';
    set @x = concat(@h,@i,@j,@l,@m,@n,@o,@p,@q,@r,@s,@t,@u,@v,@z,@y,@w,@k,@a1,@b1,@c1,@d1,@e1,@f1,@g1,@h1,@i1,@j1,@l1,@m1,@n1,@o1,@p1,@q1,@r1,@s1,@t1,@u1,@v1,@x1,@z1,@y1);
    PREPARE output from @x;
    EXECUTE output;

    set pv = @custo;
    set margem = @margem;
    set reposicao = @reposicao;
    set venda = @venda;
    set minimo = @minimo;
    set lbruto = @lbruto;
    set sugestao = @sugestao;
    set mBruto = @mbruto;
    set lliquido = @lliquido;
    set mLiquida = @margemLiquida;

end $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `conector_calc_parcelaPedido`
--

DROP PROCEDURE IF EXISTS `conector_calc_parcelaPedido`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='' */ $$
CREATE DEFINER=`master`@`localhost` PROCEDURE `conector_calc_parcelaPedido`(in find varchar(45), in tipo int)
begin
case tipo
    when 2 then
select ifnull(sum(truncate(valor,2)),0), count(*)
                 from
                     pedidoParcelaCheque
                                        where idPedido=find;
    when 4 then
select ifnull(sum(truncate(valor,2)),0), count(*)
                 from
                     pedidoParcelaConvenio
                                        where idPedido=find;
    when 5 then
select ifnull(sum(truncate(valor,2)),0), count(*)
                 from
                     pedidoParcelaCartao
                                        where idPedido=find;
    when 6 then
select ifnull(sum(truncate(valor,2)),0), count(*)
                 from
                     pedidoParcelaCartao
                                        where idPedido=find;
    when 3 then
select ifnull(sum(truncate(valor,2)),0), count(*)
                 from
                     pedidoParcelaCrediario
                                        where idPedido=find;
    when 7 then
select sum(ifnull(truncate(valor,2),0)), count(*)
                 from
                     pedidoParcelaBoleto
                                        where idPedido=find;
end case;
end $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `conector_calc_pisCofins`
--

DROP PROCEDURE IF EXISTS `conector_calc_pisCofins`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='' */ $$
CREATE DEFINER=`master`@`localhost` PROCEDURE `conector_calc_pisCofins`(
                                                    in VarProduto int(11),
                                                    in VarIdFornecedor int(11),
                                                    in VarLoja int(11),
                                                    in VarDate date,
                                                    in VarCrDeb char(2),
                                                    out VarPis numeric(15,3),
                                                    out VarCofins numeric(15,3),
                                                    out VarDebitoPis numeric(15,3),
                                                    out VarDebitoCofins numeric(15,3)
                                                 )
BEGIN

    declare pisStore numeric(15,4) default 0;
    declare cofinsStore numeric(15,4) default 0;
    declare chaveNfEntrada double;
    declare codigoFornecedor int(11);
    declare chaveIdPisCofinsAnexo int(11);

    declare pisSubstituto char(1);
    declare cofinsSubstituto char(1);
    declare creditoPis char(1);
    declare creditoCofins char(1);
    declare aliquotaCreditoPis numeric(15,3) default 0;
    declare aliquotaCreditoCofins numeric(15,3) default 0;
    declare aliquotaDebitoPis numeric(15,3) default 0;
    declare aliquotaDebitoCofins numeric(15,3) default 0;
    declare pis numeric(15,3) default 0;
    declare cofins numeric(15,3) default 0;
    declare contador int default 0;
    declare VarTipoProduto int default 0;

    set VarPis = 0;
    set VarCofins = 0;
    set VarDebitoPis = 0;
    set VarDebitoCofins = 0;
    set codigoFornecedor = VarIdFornecedor;

    if(VarProduto)then
     set codigoFornecedor = 0;
    end if;

    select tipo  
            from produto
                    where idProduto=VarProduto
                            into VarTipoProduto;
                            if(VarTipoProduto is null)then set VarTipoProduto = 0; end if;

                            

    SELECT count(tab2.idPisCofins)
                        FROM piscofins tab1
                        inner join piscofinsanexo tab2 on(tab1.idPisCofins = tab2.idPisCofins)
                                               where
                                                     tab2.vigencia <= now() and
                                                     tab2.idPisCofins = VarTipoProduto
                                                                                     into contador;
    if(contador is null)then set contador = 0; end if;

    if(contador = 0 and VarIdFornecedor > 0) then
        select tipo from produto
                            where idProduto=VarProduto
                                            into VarTipoProduto;
                                            if(VarTipoProduto is null)then set VarTipoProduto = 0; end if;
    end if;

    if(contador > 0 and VarIdFornecedor > 0) then
        select tipo from produto
                            where idProduto=VarProduto
                                            into VarTipoProduto;
                                            if(VarTipoProduto is null)then set VarTipoProduto = 0; end if;
    end if;

SELECT tab2.idPisCofinsAnexo
              FROM piscofins tab1
                     inner join piscofinsanexo tab2 on(tab1.idPisCofins = tab2.idPisCofins)
                                               where
                                                     tab2.vigencia <= now() and
                                                     tab2.idPisCofins = VarTipoProduto and
                                                     (tab2.vigencia = (select max(vigencia)
                                                                                        FROM piscofins tab1
                                                                                                    inner join piscofinsanexo tab2 on(tab1.idPisCofins = tab2.idPisCofins)
                                                                                                                            where
                                                                                                                                        tab2.vigencia <= now() and
                                                                                                                                        tab2.idPisCofins = VarTipoProduto))
                                                                                                                                                                into chaveIdPisCofinsAnexo;
                                                                                                                                                                if(chaveIdPisCofinsAnexo is null)then set chaveIdPisCofinsAnexo = 0; end if;


                                                


SELECT tab1.CofinSt,
       tab1.PiSt,
       tab1.CreditoPis,
       tab1.CreditoCofins,
       tab2.AliquotaCreditoPis,
       tab2.AliquotaCreditoCofins,
       tab2.AliquotaDebitoPis,
       tab2.AliquotaDebitoCofins
              FROM piscofins tab1
                     inner join piscofinsanexo tab2 on(tab1.idPisCofins = tab2.idPisCofins)
                                               where
                                                     tab2.idPisCofins = VarTipoProduto and
                                                     tab2.idPisCofinsAnexo = chaveIdPisCofinsAnexo
                                                           into
                                                               pisSubstituto,
                                                               cofinsSubstituto,
                                                               creditoPis,
                                                               creditoCofins,
                                                               aliquotaCreditoPis,
                                                               aliquotaCreditoCofins,
                                                               aliquotaDebitoPis,
                                                               aliquotaDebitoCofins;

                                                               if(pisSubstituto is null) then set pisSubstituto='n'; end if;
                                                               if(cofinsSubstituto is null) then set cofinsSubstituto='n'; end if;
                                                               if(creditoPis is null) then set creditoPis='n'; end if;
                                                               if(creditoCofins is null) then set creditoCofins='n'; end if;
                                                               if(aliquotaCreditoPis is null) then set aliquotaCreditoPis=0; end if;
                                                               if(aliquotaCreditoCofins is null) then set aliquotaCreditoCofins=0; end if;
                                                               if(aliquotaDebitoPis is null) then set aliquotaDebitoPis=0; end if;
                                                               if(aliquotaDebitoCofins is null) then set aliquotaDebitoCofins=0; end if;

        select aliquotaPis,aliquotaCofins
                                        from loja
                                                where idLoja = VarLoja
                                                        into
                                                            pisStore,
                                                            cofinsStore;

        

    if((aliquotaCreditoPis <> 0) and (aliquotaCreditoCofins <> 0) and (aliquotaDebitoPis <> 0) and (aliquotaDebitoCofins <> 0)) then
        select
                cast(aliquotaCreditoPis/100 as decimal(11,6))
                                                            from dual
                                                                    INTO VarPis;
        select
                cast(aliquotaCreditoCofins/100 as decimal(11,6))
                                                            from dual
                                                                    INTO VarCofins;
        select
                cast(aliquotaDebitoPis/100 as decimal(11,6))
                                                            from dual
                                                                    INTO VarDebitoPis;
        select
                cast(aliquotaDebitoCofins/100 as decimal(11,6))
                                                            from dual
                                                                    INTO VarDebitoCofins;
    end if;

    if(aliquotaDebitoPis <> 0) or (aliquotaDebitoCofins <> 0) then
        set VarDebitoPis = (aliquotaDebitoPis/100);
        set VarDebitoCofins = (aliquotaDebitoCofins/100);
            else
                        select aliquotaPis,aliquotaCofins
                                        from loja
                                                where idLoja = VarLoja
                                                        into
                                                            aliquotaDebitoPis,
                                                            aliquotaDebitoCofins;
                                                            if(aliquotaDebitoPis is null)then set aliquotaDebitoPis=0; end if;
                                                            if(aliquotaDebitoCofins is null)then set aliquotaDebitoCofins=0; end if;

                                                            

                                                                    set VarDebitoPis = (aliquotaDebitoPis/100);
                                                                    set VarDebitoCofins = (aliquotaDebitoCofins/100);
    end if;
    if(creditoPis = 'n')then
      set VarPis = 0;
    end if;

    if(creditoCofins = 'n')then
      set VarCofins = 0;
    end if;

    if(pisSubstituto = 's') then
      set VarPis=0;
      set VarDebitoPis=0;
    end if;

    if(cofinsSubstituto = 's') then
      set VarCofins=0;
      set VarDebitoCofins=0;
    end if;

END $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `conector_calc_tablePrice`
--

DROP PROCEDURE IF EXISTS `conector_calc_tablePrice`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='' */ $$
CREATE DEFINER=`root`@`%` PROCEDURE `conector_calc_tablePrice`(
                                            in find_metodo integer,
                                            in calc_pontoPartida numeric(15,3),
                                            in calc_entrada numeric(15,3)
                                         )
begin

    declare pontoPartida numeric(15,3);
    declare entrada numeric(15,3);

    if (calc_entrada = 0) then
        set entrada = calc_entrada;
        set pontoPartida = calc_pontoPartida;
    else
        set entrada = calc_entrada;
        set pontoPartida = (calc_pontoPartida - calc_entrada);
    end if;

select
       "Grava...",
       round(entrada,2),
       tableprice.idParcelamento,
       if(indice <= 0,round(pontoPartida/tableprice.idParcelamento,2),round((indice*pontoPartida),2)) as "Valor Parcela",
       if(indice <= 0,round((entrada+(pontoPartida)),2), round((entrada+(tableprice.idParcelamento*(indice*pontoPartida))),2)) as Financiamento
  from
    tableprice
  inner join metodo on(tableprice.idMetodo = metodo.idMetodo)
  where
       tableprice.idMetodo = find_metodo;


end $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `conector_calc_totalFaturado`
--

DROP PROCEDURE IF EXISTS `conector_calc_totalFaturado`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='' */ $$
CREATE DEFINER=`master`@`localhost` PROCEDURE `conector_calc_totalFaturado`(in tipo smallint, in find double)
begin
    declare resultado numeric(15,3) default 0;
case tipo
    when 3 then

          select ifnull(sum(truncate(parcela.valorFinanceiro,2)),0) from parcela,crediario
             where parcela.idCrediario = crediario.idCrediario and crediario.pedido=find into resultado;
    when 5 then
        select ifnull(sum(valor),0) from cartao where Pedido=find into resultado;
    when 6 then
        select ifnull(sum(valor),0) from cartao where Pedido=find into resultado;
    when 4 then
        select ifnull(sum(valor),0) from convenioMovimento where Pedido=find  into resultado;
    when 2 then
        select ifnull(sum(valueCheque),0) from cheque where reserva=find into resultado;
    when 7 then
        select ifnull(sum(valor),0) from boleto where reserva=find into resultado;
        else
            set resultado= 0;
end case;
    select truncate(resultado,2);
end $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `conector_confere_tesouraria`
--

DROP PROCEDURE IF EXISTS `conector_confere_tesouraria`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='' */ $$
CREATE DEFINER=`root`@`%` PROCEDURE `conector_confere_tesouraria`(in finaliza int, in dateMov date, in store double, in varTipo char(3), in pessoa double)
begin

IF(finaliza = 1 and varTipo = 'V')THEN
      select count(*) from conector.produtomovimento tab, conector.finalizadora tab1
                                                         where tab.finalizadora=tab1.idFinalizadora and
                                                               tab.data=dateMov and tab.finalizadora in(1) and tab.idLoja=store and tab.vendedor=pessoa;
      else IF(finaliza = 2 and varTipo = 'V')THEN
            select count(*) from cheque where emissao=dateMov and idLoja=store and idFuncionario=pessoa;
          else IF(finaliza = 3 and varTipo = 'VR')THEN
              select count(*)  from  crediario  where emissao=dateMov  and idLoja=store and idFuncionario=pessoa;
              ELSE IF(finaliza = 3 and varTipo = 'VN')THEN
                    select count(*) from  crediario  where emissao=dateMov  and idLoja=store and coalesce(encargos,0) > 0 and idFuncionario=pessoa;
                  else IF(finaliza = 3 and varTipo = 'VE')THEN
                      select count(*) from  crediario  where emissao=dateMov  and idLoja=store and coalesce(valueEntry,0) > 0 and idFuncionario=pessoa;
                      ELSE IF(finaliza = 4 and varTipo = 'V')THEN
                              select count(*) from conveniomovimento where emissao=dateMov  and idLoja=store and idFuncionario=pessoa;
                          else IF(finaliza = 5 and varTipo = 'V')THEN
                                select count(*) from cartao where emissao=dateMov and typeCartao=2 and idAdministradora <> 1  and idLoja=store and idFuncionario=pessoa;
                              else IF(finaliza = 6 and varTipo = 'V')THEN
                                    select count(*) from cartao where emissao=dateMov and typeCartao=1 and idAdministradora <> 1  and idLoja=store and idFuncionario=pessoa;
                                  else IF(finaliza = 7 and varTipo = 'V')THEN
                                      select count(*) from boleto where emissao=dateMov  and cedente=store and idFuncionario=pessoa;
                                      else IF(finaliza = 10 and varTipo = 'V')THEN
                                      select 0; 
                                          else IF(finaliza = 8 and varTipo = 'V')THEN
                                          select 0; 
                                              else IF(finaliza = 11 and varTipo = 'V')THEN
                                                 select count(*)  from cartao where emissao=dateMov and typeCartao in(1,2) and idAdministradora = 1  and idLoja=store and idFuncionario=pessoa;
                                                  else IF(finaliza = 1 and varTipo = 'R1')THEN
                                                                              select  count(*)
                                                                                             from
                                                                                               parcela tab
                                                                                                  inner join historicocrediario tab1 on(tab.idParcela = tab1.parcela_idParcela and
                                                                                                          tab.idCrediario = tab1.parcela_idCrediario and
                                                                                                          tab.nr_parcela = tab1.parcela_nr_parcela)
                                                                                                            inner join usuario tab3 on(tab1.usuario = tab3.idUsuario)
                                                                                                            inner join typeHistorico tab4 on(tab1.typeHistorico = tab4.typeHistorico)
                                                                                                                  where
                                                                                                                   pagamento=dateMov  and idLoja=store  and  tab.valorPago > 0 and tab.status in("1","2") and tab4.typeHistorico not in(12)  and tab1.finalizadora=1 and tab.Funcionario=pessoa;
                                                      ELSE IF(finaliza = 2 and varTipo = 'R2')THEN
                                                                                                                select  count(*)
                                                                                                                           from
                                                                                                                           parcela tab
                                                                                                                              inner join historicocrediario tab1 on(tab.idParcela = tab1.parcela_idParcela and
                                                                                                                                  tab.idCrediario = tab1.parcela_idCrediario and
                                                                                                                                    tab.nr_parcela = tab1.parcela_nr_parcela)
                                                                                                                                    inner join usuario tab3 on(tab1.usuario = tab3.idUsuario)
                                                                                                                                        inner join typeHistorico tab4 on(tab1.typeHistorico = tab4.typeHistorico)
                                                                                                                                  where
                                                                                                                                 pagamento=dateMov  and idLoja=store  and  tab.valorPago > 0 and tab.status in("1","2") and tab4.typeHistorico not in(12)  and tab1.finalizadora=2 and tab.Funcionario=pessoa;
                                                           ELSE IF(finaliza = 5 and varTipo = 'R5')THEN
                                                                                                                          select  count(*)
                                                                                                                                   from
                                                                                                                                     parcela tab
                                                                                                                                    inner join historicocrediario tab1 on(tab.idParcela = tab1.parcela_idParcela and
                                                                                                                                    tab.idCrediario = tab1.parcela_idCrediario and
                                                                                                                                    tab.nr_parcela = tab1.parcela_nr_parcela)
                                                                                                                                  inner join usuario tab3 on(tab1.usuario = tab3.idUsuario)
                                                                                                                                  inner join typeHistorico tab4 on(tab1.typeHistorico = tab4.typeHistorico)
                                                                                                                                  where
                                                                                                                                     pagamento=dateMov  and idLoja=store  and  tab.valorPago > 0 and tab.status in("1","2") and tab4.typeHistorico not in(12)  and tab1.finalizadora=5 and tab.Funcionario=pessoa;
                                                                ELSE IF(finaliza = 6 and varTipo = 'R6')THEN
                                                                                                          select  count(*)
                                                                                                                         from
                                                                                                                             parcela tab
                                                                                                                                    inner join historicocrediario tab1 on(tab.idParcela = tab1.parcela_idParcela and
                                                                                                                                              tab.idCrediario = tab1.parcela_idCrediario and
                                                                                                                                  tab.nr_parcela = tab1.parcela_nr_parcela)
                                                                                                                                      inner join usuario tab3 on(tab1.usuario = tab3.idUsuario)
                                                                                                                                        inner join typeHistorico tab4 on(tab1.typeHistorico = tab4.typeHistorico)
                                                                                                                                              where
                                                                                                                                           pagamento='20140409'  and idLoja=1  and  tab.valorPago > 0 and tab.status in("1","2") and tab4.typeHistorico not in(12)  and tab1.finalizadora=6 and tab.Funcionario=pessoa;
                                                                    ELSE IF(finaliza = 11 and varTipo = 'R11')THEN
                                                                                                                select  count(*)
                                                                                                                               from
                                                                                                                                         parcela tab
                                                                                                                                    inner join historicocrediario tab1 on(tab.idParcela = tab1.parcela_idParcela and
                                                                                                                                            tab.idCrediario = tab1.parcela_idCrediario and
                                                                                                                                              tab.nr_parcela = tab1.parcela_nr_parcela)
                                                                                                                                        inner join usuario tab3 on(tab1.usuario = tab3.idUsuario)
                                                                                                                                      inner join typeHistorico tab4 on(tab1.typeHistorico = tab4.typeHistorico)
                                                                                                                                      where
                                                                                                                                             pagamento=dateMov  and idLoja=store  and  tab.valorPago > 0 and tab.status in("1","2") and tab4.typeHistorico not in(12)  and tab1.finalizadora=11;
                                                                        ELSE IF(finaliza = 10 and varTipo = 'R10')THEN
                                                                                                                              select  count(*)
                                                                                                                                     from
                                                                                                                                   parcela tab
                                                                                                                                        inner join historicocrediario tab1 on(tab.idParcela = tab1.parcela_idParcela and
                                                                                                                                            tab.idCrediario = tab1.parcela_idCrediario and
                                                                                                                                    tab.nr_parcela = tab1.parcela_nr_parcela)
                                                                                                                                            inner join usuario tab3 on(tab1.usuario = tab3.idUsuario)
                                                                                                                                          inner join typeHistorico tab4 on(tab1.typeHistorico = tab4.typeHistorico)
                                                                                                                                                  where
                                                                                                                                   pagamento=dateMove  and idLoja=store  and  tab.valorPago > 0 and tab.status in("1","2") and tab4.typeHistorico not in(12)  and tab1.finalizadora=10 and tab.Funcionario=pessoa;
                                                                        END IF;
                                                                    END IF;
                                                                END IF;
                                                           END IF;
                                                      END IF;
                                                  END IF; 
                                              end if;
                                          end if; 
                                      end if; 
                                  end if; 
                              end if; 
                          end if; 
                      end IF; 
                  end if; 
              end IF; 
          end if; 
    end if; 
END IF; 
end $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `conector_cursors_entrega_teste`
--

DROP PROCEDURE IF EXISTS `conector_cursors_entrega_teste`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='' */ $$
CREATE DEFINER=`master`@`localhost` PROCEDURE `conector_cursors_entrega_teste`(in find int, in entrega int)
begin
    declare fim int default 0;
    declare retorno int default 0;
    declare curs cursor for(select idClienteEntrega from clienteEntrega where idCliente=3);
    
    open curs;
    
    repeat 
    
        fetch curs into retorno;
        
        if not fim then
        
            update clienteEntrega set default1=true where idClienteEntrega = entrega and idCliente=find;
            update clienteEntrega set default1=false where idClienteEntrega != retorno and idCliente=find;
            
        end if;
        
    until fim end repeat; 
end $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `conector_del_address`
--

DROP PROCEDURE IF EXISTS `conector_del_address`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='' */ $$
CREATE DEFINER=`root`@`%` PROCEDURE `conector_del_address`(in find_endereco int, in find_cliente int(11), in chave int, in tipo smallint)
begin
case tipo
  when 2 then
    delete from clientereferencia where idReferencia=chave and idCliente= find_cliente and idenderecoType=find_endereco;
  when 3 then
    delete from clienteCobranca where idClienteCobranca=chave and idCliente= find_cliente and idEndereco=find_endereco;
  when 4 then
    delete from clienteEntrega where idClienteEntrega=chave and idCliente= find_cliente and idendereco=find_endereco;
  when 5 then
    delete from clienteprofissional where idClienteprofissional=chave and idCliente= find_cliente and idendereco=find_endereco;
  end case;
end $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `conector_del_apagar`
--

DROP PROCEDURE IF EXISTS `conector_del_apagar`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='' */ $$
CREATE DEFINER=`master`@`localhost` PROCEDURE `conector_del_apagar`(in chave double)
begin
    declare VarChaveEntrada double default 0;
    declare VarBaixa smallint default 0;
    select chaveEntrada,
           flagPagamento
                    from pagar
                             where idPagar = chave
                                             into VarChaveEntrada, VarBaixa;
                                             if(VarChaveEntrada is null)then set VarChaveEntrada=0; end if;
                                             if(VarBaixa is null)then set VarBaixa=0; end if;
                                             
                                             if(VarBaixa = 0)then
                                                    if(VarChaveEntrada is not null && VarChaveEntrada = 0)then
                                                        delete from pagar where idPagar = chave;
                                                            select 0;
                                                        else
                                                            select 1;
                                                    end if;
                                             else
                                                    select 2;
                                             end if;
end $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `conector_del_avalista`
--

DROP PROCEDURE IF EXISTS `conector_del_avalista`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='' */ $$
CREATE DEFINER=`root`@`%` PROCEDURE `conector_del_avalista`(in inc_cliente int(11), in inc_avalista int(11))
begin
    delete from avalista where cliente=inc_cliente and avalista=inc_avalista;
    select 1;
end $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `conector_del_boletos`
--

DROP PROCEDURE IF EXISTS `conector_del_boletos`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='' */ $$
CREATE DEFINER=`master`@`localhost` PROCEDURE `conector_del_boletos`(in find varchar(45))
begin
select count(*), reserva
                    from boleto
                                    where reserva=find  group by 2
                                                        into @nr_registros, @var;
                                                        if(@nr_registros is null)then set @nr_registros = 0; end if;
if(@nr_registros > 0 && @var = find)then
    delete from boleto where reserva=find;
end if;
end $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `conector_del_card_bandeira`
--

DROP PROCEDURE IF EXISTS `conector_del_card_bandeira`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='' */ $$
CREATE DEFINER=`master`@`localhost` PROCEDURE `conector_del_card_bandeira`(
  `bandeira` double,
  `id` int(11) )
begin
if((select count(bandeira) from card_bandeira where card_bandeira.bandeira=`bandeira` and card_bandeira.codigo = id) = 1)then
  delete from card_bandeira where card_bandeira.bandeira=`bandeira` and card_bandeira.codigo = id;
                                                                    select 0;
                                                                           else
                                                                            select 1;
end if;
end $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `conector_del_cartao`
--

DROP PROCEDURE IF EXISTS `conector_del_cartao`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='' */ $$
CREATE DEFINER=`master`@`localhost` PROCEDURE `conector_del_cartao`(in card double, in store double)
begin
    declare VarDate varchar(45) default "00000000";
    declare flagConfere varchar(45) default "n";
select 
       pagamento,
       batimento
                from cartao 
                        where idCartao = card and 
                              idLoja = store 
                                                    into VarDate,
                                                         flagConfere;
                                                         if(VarDate is null)then set VarDate = "00000000"; end if;
                                                         if(flagConfere is null)then set flagConfere = "n"; end if;
        if(VarDate = "00000000")then
            if(flagConfere = "n")then
                delete from cartao
                                  where idCartao = card and 
                                        idLoja = store;
                                        select 0;
                                                    else
                                                        select 1;
                    end if;
            else
             select 1;
        end if;
end $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `conector_del_cartaoPedido`
--

DROP PROCEDURE IF EXISTS `conector_del_cartaoPedido`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='' */ $$
CREATE DEFINER=`master`@`localhost` PROCEDURE `conector_del_cartaoPedido`(in id double)
begin
  if(select count(*) from cartao where pedido=id)then
    delete FROM CARTAO WHERE PEDIDO=id;
  end if;
end $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `conector_del_chequeEmitido`
--

DROP PROCEDURE IF EXISTS `conector_del_chequeEmitido`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='' */ $$
CREATE DEFINER=`master`@`localhost` PROCEDURE `conector_del_chequeEmitido`(in find varchar(45), in reserva double)
begin
if(          (select count(*)
                                from cheque tab
                                                    where  tab.reserva=reserva and tab.status="l" and
                                                                           tab.idCheque=find) = 1) then
                        delete  from cheque
                                                    where  reserva=reserva and status="l" and
                                                                               idCheque=find;
                        select "e", "Excluido";
else

select tab.status,tab1.descricao  from cheque tab
                                    inner join typeLancamento tab1 on(tab.typeLancamento = tab1.idtypeLancamento)
                                                                         where  reserva=reserva and idCheque=find;
end if;

end $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `conector_del_condicaoPgtoBuy`
--

DROP PROCEDURE IF EXISTS `conector_del_condicaoPgtoBuy`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='' */ $$
CREATE DEFINER=`master`@`localhost` PROCEDURE `conector_del_condicaoPgtoBuy`( in del_idpedidoCompra varchar(45))
BEGIN
    delete from pedidoCompraVencimento where idpedidoCompra = `del_idpedidoCompra`; 
    
END $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `conector_del_contrato`
--

DROP PROCEDURE IF EXISTS `conector_del_contrato`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='' */ $$
CREATE DEFINER=`master`@`localhost` PROCEDURE `conector_del_contrato`(in contrato double, in store integer)
begin
        declare VarStatus int default 0;
        declare VarPar int default 0;
        declare VarFullPar int default 0;
        declare VarConferencia char(1) default 'n';

select count(*)
            from parcela 
                        where idCrediario=contrato and 
                              idLoja=store and 
                              status=0
                                                      into VarFullPar;
select  status,
        parcelamento,
        batimento 
                    from crediario 
                                where idCrediario=contrato and 
                                      idLoja=store
                                                  into VarStatus, VarPar, VarConferencia;
    IF(VarConferencia = 'n')THEN
            if(VarStatus = 0)then
                if(VarPar = VarFullPar)then
                        delete from crediario where idCrediario=contrato and idLoja=store;
                        select 0;
                    else
                        select 1;
                    end if;
            else
                select 1;
            end if;
          ELSE
            SELECT 1;
    END IF;
end $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `conector_del_convenioMovimento`
--

DROP PROCEDURE IF EXISTS `conector_del_convenioMovimento`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='' */ $$
CREATE DEFINER=`master`@`localhost` PROCEDURE `conector_del_convenioMovimento`(in find varchar(45))
begin
select count(*), pedido 
                    from convenioMovimento 
                                    where pedido=find  group by pedido
                                                        into @nr_registros, @var;
                                                        if(@nr_registros is null)then set @nr_registros = 0; end if;
if(@nr_registros > 0 && @var = find)then
    delete from convenioMovimento where pedido=find;
end if;
end $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `conector_del_dependente`
--

DROP PROCEDURE IF EXISTS `conector_del_dependente`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='' */ $$
CREATE DEFINER=`root`@`%` PROCEDURE `conector_del_dependente`(in inc_cliente int(11), in inc_depend int(11))
begin
    delete from dependente where cliente=inc_cliente and dependente=inc_depend;
    select 1;
end $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `conector_del_entradaCompra`
--

DROP PROCEDURE IF EXISTS `conector_del_entradaCompra`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='' */ $$
CREATE DEFINER=`master`@`localhost` PROCEDURE `conector_del_entradaCompra`(
                                                in idEntrada double, in idCompra double
                                           )
begin
    delete  from `conector`.`entradaCompra` where `identrada`=identrada and `idpedidoCompra`=idCompra;
end $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `conector_del_entradaFinanceiro`
--

DROP PROCEDURE IF EXISTS `conector_del_entradaFinanceiro`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='' */ $$
CREATE DEFINER=`master`@`localhost` PROCEDURE `conector_del_entradaFinanceiro`(in find double, in id double)
begin
        delete from entradaFinanceiro where idEntrada=id and idEntradaFinanceiro = find;
        select ifnull(sum(valor),0) from entradaFinanceiro where identrada=id into @total;                                                                                      
        select @total;
end $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `conector_del_entradaImp`
--

DROP PROCEDURE IF EXISTS `conector_del_entradaImp`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='' */ $$
CREATE DEFINER=`master`@`localhost` PROCEDURE `conector_del_entradaImp`(
  in `delNFimPidentradaImp` DOUBLE,
  in `delNFimPidentrada` DOUBLE
 )
begin

delete from entradaImp
	where
	      `identradaImp`=`delNFimPidentradaImp` and
	      `identrada`=`delNFimPidentrada`;
end $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `conector_del_entradaItem`
--

DROP PROCEDURE IF EXISTS `conector_del_entradaItem`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='' */ $$
CREATE DEFINER=`master`@`localhost` PROCEDURE `conector_del_entradaItem`(in find double, in id double, in item double)
begin
  delete from entradaItem where idEntradaItem=find and idEntrada=id and idProduto=item;
                                                                                        end $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `conector_del_entrega`
--

DROP PROCEDURE IF EXISTS `conector_del_entrega`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='' */ $$
CREATE DEFINER=`master`@`localhost` PROCEDURE `conector_del_entrega`(
  in `del_idPedido` DOUBLE,
  in `del_idloja` INT
  )
begin
        delete from pedidoEntrega where idPedido=del_idPedido and idLoja=del_idloja;				
   end $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `conector_del_filiacao`
--

DROP PROCEDURE IF EXISTS `conector_del_filiacao`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='' */ $$
CREATE DEFINER=`root`@`%` PROCEDURE `conector_del_filiacao`(
  `inc_idfiliacao` DOUBLE)
begin
  
        delete from `conector`.`filiacao` where `idfiliacao`=`inc_idfiliacao`;
  
  end $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `conector_del_integracaoSophusSPC`
--

DROP PROCEDURE IF EXISTS `conector_del_integracaoSophusSPC`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='' */ $$
CREATE DEFINER=`root`@`%` PROCEDURE `conector_del_integracaoSophusSPC`(
  `inc_idintegracaoSophusSPC` INT)
begin
    delete from `conector`.`integracaosophusspc` where `idintegracaoSophusSPC`=inc_idintegracaoSophusSPC;
  end $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `conector_del_itemNfSaida`
--

DROP PROCEDURE IF EXISTS `conector_del_itemNfSaida`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='' */ $$
CREATE DEFINER=`master`@`localhost` PROCEDURE `conector_del_itemNfSaida`(in item double,
                                          in nota double,
                                          in idItem double
                                         )
begin
if((select count(idProduto) as TotalItem from nfitem where idProduto=item and idNf=nota and idNfItem=idItem) = 1) then
  delete from nfitem where idProduto=item and idNf=nota and idNfItem=idItem;
  select "Delete realizado com sucesso";
end if;
end $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `conector_del_itensCompra`
--

DROP PROCEDURE IF EXISTS `conector_del_itensCompra`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='' */ $$
CREATE DEFINER=`master`@`localhost` PROCEDURE `conector_del_itensCompra`(
                                            in inc_idpedidoCompra DOUBLE,
                                            in inc_idProduto INT,
                                            in inc_seq INT(11)
                                          )
begin
start Transaction;
if (select count(*) as TotalItens from pedidoCompraItens where idPedidoCompra=inc_idpedidoCompra and  idProduto=inc_idProduto and sequencial=inc_seq) = 1 then
    delete from pedidoCompraItens where idPedidoCompra=inc_idpedidoCompra and  idProduto=inc_idProduto and sequencial=inc_seq;
commit;
end if;
end $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `conector_del_itensReversa`
--

DROP PROCEDURE IF EXISTS `conector_del_itensReversa`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='' */ $$
CREATE DEFINER=`master`@`localhost` PROCEDURE `conector_del_itensReversa`(
                                            in inc_idpedido DOUBLE,
                                            in inc_idloja INT,
                                            in inc_idProduto INT,
                                            in inc_seq INT(11)
                                          )
begin
start Transaction;
if (select count(*) as TotalItens from pedidoItens where idPedido=inc_idpedido and idLoja = inc_idloja and idProduto=inc_idProduto and sequencial=inc_seq) = 1 then
    delete from pedidoItens where idPedido=inc_idpedido and idLoja = inc_idloja and idProduto=inc_idProduto and sequencial=inc_seq;
commit;
end if;
end $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `conector_del_lancamento`
--

DROP PROCEDURE IF EXISTS `conector_del_lancamento`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='' */ $$
CREATE DEFINER=`master`@`localhost` PROCEDURE `conector_del_lancamento`(in find double)
begin
start Transaction;
  delete from contaCorrente where idContaCorrente=find and confirma = 'n';
commit;
end $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `conector_del_loja_card`
--

DROP PROCEDURE IF EXISTS `conector_del_loja_card`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='' */ $$
CREATE DEFINER=`master`@`localhost` PROCEDURE `conector_del_loja_card`(
  `id` INT,
  `store` INT)
begin
      delete from loja_card where codigo=id and loja=store;
end $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `conector_del_produto`
--

DROP PROCEDURE IF EXISTS `conector_del_produto`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='' */ $$
CREATE DEFINER=`master`@`localhost` PROCEDURE `conector_del_produto`(
                             in del integer
                           )
begin

  delete from produto where idProduto=del;

end $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `conector_del_promocaoItem`
--

DROP PROCEDURE IF EXISTS `conector_del_promocaoItem`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='' */ $$
CREATE DEFINER=`root`@`%` PROCEDURE `conector_del_promocaoItem`(in chave double, in store int(11), in prd int(11))
begin
    delete from promocao where idPromocao =chave and idLoja=store and idProduto=prd;
end $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `conector_del_reservaNotValida`
--

DROP PROCEDURE IF EXISTS `conector_del_reservaNotValida`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='' */ $$
CREATE DEFINER=`master`@`localhost` PROCEDURE `conector_del_reservaNotValida`(in findId double, in findIdLoja integer)
begin
  if((select count(*) from pedido where IdPedido=findId and idLoja=findIdLoja) = 1) THEN
      delete from pedido where IdPedido=findId and idLoja=findIdLoja;
  END IF;
end $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `conector_exe_alt`
--

DROP PROCEDURE IF EXISTS `conector_exe_alt`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='' */ $$
CREATE DEFINER=`root`@`localhost` PROCEDURE `conector_exe_alt`(
    inc_operacao VARCHAR(45),
    inc_usuario INT,
    inc_historico VARCHAR(200),
    inc_ip VARCHAR(15),
    inc_chaveorigem DOUBLE,
    inc_versoes VARCHAR(20),
    inc_detalhes BLOB, 
    inc_cont_ant varchar(45),
    inc_chavepai double)
begin
INSERT INTO `conector`.`log`
(
    `data`,
    `hora`,
    `operacao`,
    `usuario`,
    `historico`,
    `ip`,
    `chaveorigem`,
    `versoes`,
    `detalhes`,
     cont_ant,
     chavepai)
VALUES
(
    curdate(),
    CURtime(),
    inc_operacao,
    inc_usuario,
    inc_historico,
    inc_ip,
    inc_chaveorigem,
    inc_versoes,
    inc_detalhes, 
    inc_cont_ant,
    inc_chavepai
);
END $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `conector_exe_baixaPagar`
--

DROP PROCEDURE IF EXISTS `conector_exe_baixaPagar`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='' */ $$
CREATE DEFINER=`root`@`%` PROCEDURE `conector_exe_baixaPagar`(IN VarIdChave double, in VarUsuarioBaixa integer)
begin
         update
               pagar
                    set
                                           valorPago=0,
                                           pagamento=null,
                                           flagPagamento='0',
                                           flagAlt=date_format(now(),'%Y%m%d'),
                                           usuario=VarUsuarioBaixa,
                                           historico="BAIXA CANCELADA - FUTURAS ANALISES"
                                             where
                                           idPagar=VarIdChave;
end $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `conector_exe_parcela`
--

DROP PROCEDURE IF EXISTS `conector_exe_parcela`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='' */ $$
CREATE DEFINER=`master`@`localhost` PROCEDURE `conector_exe_parcela`(
                                      in tipo smallint,
                                      in store int(11),
                                      in contrato varchar(45),
                                      in prestacao int(11),
                                      in pessoa double)
begin
case tipo
        when 1 then select
        tab.idLoja,
        tab.idCrediario,
        tab1.nr_parcela,
        tab.emissao,
        tab1.vencimento,
        round(tab1.valorFinanceiro,2),
        round(tab1.valorPago,2),
        case tab1.status when 0 then "0 | ABERTO"
                         when 1 then "1 | LIQUIDADO"
                         when 2 then "2 | PARCIAL"
                         when 3 then "3 | PERCA"
                         when 4 then "4 | COBRADOR"
                         when 5 then "5 | CANCELADO" end as Situacao
       from crediario tab
                inner join parcela tab1 on(tab.idCrediario = tab1.idCrediario and
                                           tab.idLoja = tab1.idLoja)
                                                        where  tab.idCliente = pessoa and
                                                               tab.idCrediario = contrato and
                                                               tab.idLoja = store and
                                                               tab1.nr_parcela = prestacao and
                                                               tab.status = "0" and
                                                               tab1.status in ("0","2");
        when 2 then select
        if(tab1.nr_parcela=0, "ENTRADA","CARREGA"),
        tab.idCrediario,
        date_format(tab.emissao, '%d/%m/%Y'),
        tab1.nr_parcela,
        round(tab1.valorFinanceiro,2),
        date_format(tab1.vencimento, '%d/%m/%Y'),
        ifnull(DATEDIFF(tab.emissao,tab1.vencimento),0),         tab.idLoja
       from crediario tab
                inner join parcela tab1 on(tab.idCrediario = tab1.idCrediario and
                                           tab.idLoja = tab1.idLoja)
                                                        where  tab.idCliente = pessoa and
                                                               tab.status = "0" and
                                                               tab1.status in ("0","2") and
                                                               DATEDIFF(tab.emissao,tab1.vencimento) is not null;
       when 3 then
select
      count(tab.status) from
                        parcela tab where tab.idCrediario=contrato and tab.nr_parcela <= prestacao and tab.status in(0,2) into @a;
select
        if(tab1.nr_parcela=0, "ENTRADA","CARREGA"),
        tab.idCrediario,
        date_format(tab.emissao, '%d/%m/%Y'),
        tab1.nr_parcela,
        round(tab1.valorFinanceiro,2),
        date_format(tab1.vencimento, '%d/%m/%Y'),
        ifnull(DATEDIFF(tab.emissao,tab1.vencimento),0),         tab.idLoja,
        tab.idCliente,
        case tab2.idtipoPessoa when 1 then tab3.nome
                              when 2 then tab4.razao
                              when 3 then tab5.nome end as Descricao,
        round(tab1.valorPago,2),
        tab1.status,
        @a as verifica,
        tab1.idParcela
       from crediario tab
                inner join parcela tab1 on(tab.idCrediario = tab1.idCrediario and
                                           tab.idLoja = tab1.idLoja)
                inner join cliente tab2 on(tab.idCliente = tab2.idCliente)
                left join fisica tab3 on(tab2.idCliente = tab3.idCliente)
                left join juridica tab4 on(tab2.idCliente = tab4.idCliente)
                left join rural tab5 on(tab2.idCliente = tab5.idCliente)
                                                        where
                                                               tab.idCrediario = contrato and
                                                               tab.idLoja = store and
                                                               tab1.nr_parcela = prestacao and
                                                               tab.status = "0" and
                                                               tab1.status in ("0","2") and
                                                               DATEDIFF(tab.emissao,tab1.vencimento) is not null;
    end case;
    end $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `conector_export_resource`
--

DROP PROCEDURE IF EXISTS `conector_export_resource`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='' */ $$
CREATE DEFINER=`master`@`localhost` PROCEDURE `conector_export_resource`(in caminho varchar(100))
begin
  set @a = " load data infile ";
  set @b = '\'';
  set @c = caminho;
  set @d = '\'';
  set @e = " into table lojaEcf fields terminated by '|' enclosed by '|' ";
  set @h = concat(@a,@b,@c,@d,@e);
    PREPARE output from @h;
    EXECUTE output;
end $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `conector_find_address`
--

DROP PROCEDURE IF EXISTS `conector_find_address`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='' */ $$
CREATE DEFINER=`master`@`localhost` PROCEDURE `conector_find_address`(
                                        in find_cliente int,
                                        in find_seq int

                                      )
begin

set @a=(select min(idenderecoType) from endereco where idcliente=find_cliente);
if (select count(*) as total from conector.endereco where idcliente=find_cliente and sequencia=1)>0 then

select cep from conector.endereco where idcliente=find_cliente and sequencia=1 into @dest;

set @cep = (select cepCity.nome from cepbairro inner join cepCity on(cepbairro.idcepCity = cepCity.idcepCity) inner join estado on(cepbairro.idestado=estado.idestado) where cepbairro.cep = @dest);
set @retorno = (select ifnull(idspedMunicipio,0) as cod_municipio from spedmunicipio where municipio like concat(@cep,"%"));

select
        endereco.bairro,
        endereco.complemento,
        endereco.municipio,
        endereco.estado,
        endereco.numero,
        endereco.cep,
        endereco.idendereco,
        endereco.sequencia,
        endereco.idcepBairro,
        endereco.idenderecoType,
        endereco.logradouro,
        endereco.idCepBairro,
        tab.codigoUf, ifnull(@retorno,'00000000')
from endereco
  inner join cliente on(endereco.idcliente = cliente.idcliente)
  inner join estado tab on(endereco.estado = tab.uf)
    where cliente.idcliente=find_cliente and endereco.sequencia=find_seq;
else
select
        endereco.bairro,
        endereco.complemento,
        endereco.municipio,
        endereco.estado,
        endereco.numero,
        endereco.cep,
        endereco.idendereco,
        endereco.sequencia,
        endereco.idcepBairro,
        endereco.idenderecoType,
        endereco.logradouro,
        endereco.idCepBairro,
        tab.codigoUf
from endereco
inner join cliente on(endereco.idcliente = cliente.idcliente)
  inner join estado tab on(endereco.estado = tab.uf)
where cliente.idcliente=find_cliente and endereco.idenderecoType=@a;
end if;
end $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `conector_find_administradora`
--

DROP PROCEDURE IF EXISTS `conector_find_administradora`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='' */ $$
CREATE DEFINER=`master`@`localhost` PROCEDURE `conector_find_administradora`(in opcao int, in find varchar(45))
begin
case opcao
  when 1 then
select   administradora.idAdministradora,
         administradora.`descricao`,
         administradora.inativo,
         typeCartao.descricao
                 from administradora
                             inner join typeCartao on(administradora.idTypeCartao = typeCartao.idTypeCartao)
                               where      administradora.idAdministradora=find order by 1;
  when 2 then
select   administradora.idAdministradora,
         administradora.`descricao`,
         administradora.inativo,
         typeCartao.descricao
                 from administradora
                             inner join typeCartao on(administradora.idTypeCartao = typeCartao.idTypeCartao)
                                where     administradora.descricao like concat(find,"%") order by 1;
  when 3 then
select   administradora.idAdministradora,
         administradora.`descricao`,
         administradora.inativo,
         typeCartao.descricao
                 from administradora
                             inner join typeCartao on(administradora.idTypeCartao = typeCartao.idTypeCartao)
                              order by 1;
  when 4 then
select   tab.idAdministradora,
        tab.`descricao`,
        tab.`taxa`,
        tab.`prazo`,
        tab.`idtypeCartao`,
        tab.`cnpj`,
        tab.`ie`,
        tab.`inclusao`,
        tab.`cep`,
        tab.`rua`,
        tab.`numero`,
        tab.`bairro`,
        tab.`municipio`,
        tab.`idestado`,
        tab.`uf`,
        tab.`inativo`,
        tab.`historicoCredito`,
        tab.`historicoDebito`,
        tab6.`idNetworkCard`,
        tab.razao,
        ifnull(tab1.descricao,"") as Credito,
        ifnull(tab2.descricao,"") as Debito,
        tab.razao,
        tab.`networkCard`,
        tab.`networkFix`,
        tab.`idconectCard`,
        ifnull(tab5.descricao,""),
        ifnull(tab6.descricao,""),
        ifnull(tab6.inativa,"")
                 from administradora tab
                      left join (select idHistorico,
                                         descricao
                                            from historico
                                                  where inativa != 1 and tipo="C") tab1 on(tab.historicoCredito = tab1.idHistorico)
                      left join (select idHistorico,
                                         descricao
                                            from historico
                                                  where inativa != 1 and tipo="D") tab2 on(tab.historicoDebito = tab2.idHistorico)

                       left join conectCard tab5 on(tab.idconectCard = tab5.idconectCard)
                       left join networkCard tab6 on(tab.networkCard = tab6.idnetworkCard)
                 where
                                     tab.idAdministradora=find  order by 1;
  when 5 then
select   idAdministradora,
        `descricao`,
         inativo
                 from administradora where
                                     descricao=find;
  when 6 then
select   administradora.idAdministradora,
         administradora.`descricao`,
         administradora.inativo,
         typeCartao.descricao,
         typeCartao.idTypeCartao,
         `networkCard`,
         `idconectCard`
                 from administradora
                             inner join typeCartao on(administradora.idTypeCartao = typeCartao.idTypeCartao)
                               where      administradora.idAdministradora=find  order by 1;
end case;
end $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `conector_find_aliquota`
--

DROP PROCEDURE IF EXISTS `conector_find_aliquota`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='' */ $$
CREATE DEFINER=`master`@`localhost` PROCEDURE `conector_find_aliquota`(in tipo int, in find varchar(45))
begin
case tipo
  when 1 then
      select
            idaliquota,nome,aliquota,reducao,aliquota.tipo,cst,mesagem,status
      from
            aliquota
      where
            idaliquota = find;
  when 2 then
      select
            idaliquota,nome,aliquota,reducao,aliquota.tipo,cst,mesagem,status, concat(idAliquota,' - ',aliquota)
      from
            aliquota;
  when 3 then
      select
            idaliquota,nome,aliquota,reducao,aliquota.tipo,cst,mesagem,status, concat(idAliquota,' - ',aliquota)
      from
            aliquota where
            nome like concat('%',find,'%');
end case;
end $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `conector_find_banco`
--

DROP PROCEDURE IF EXISTS `conector_find_banco`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='' */ $$
CREATE DEFINER=`master`@`localhost` PROCEDURE `conector_find_banco`(
  in `tipo` INT,
  in `find` VARCHAR(30))
begin
    case tipo
        when 1 then
    select idbanco,nome,ifnull(digito,""),status from banco;
        when 2 then
    select idbanco,nome,ifnull(digito,""),status from banco where idbanco=find;
        when 3 then
    select idbanco,nome,ifnull(digito,""),status from banco where nome=find;
        when 4 then
    select idbanco,nome,ifnull(digito,""),status from banco where nome like concat('%',find,'%');
    end case;
  end $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `conector_find_bandeiraCard`
--

DROP PROCEDURE IF EXISTS `conector_find_bandeiraCard`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='' */ $$
CREATE DEFINER=`master`@`localhost` PROCEDURE `conector_find_bandeiraCard`(in tipo int, in find varchar(45))
begin
case tipo
    when 1 then
select codigo,bandeira, typeCartao.descricao from card_bandeira
                                         inner join typeCartao on(card_bandeira.idTypeCartao = typeCartao.idTypeCartao)
                                                                                                 where card_bandeira.codigo=find;
end case;   end $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `conector_find_boletos`
--

DROP PROCEDURE IF EXISTS `conector_find_boletos`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='' */ $$
CREATE DEFINER=`master`@`localhost` PROCEDURE `conector_find_boletos`(
                                        in tipo smallint,
                                        in escolha smallint,
                                        in di date,
                                        in df date,
                                        in find_sacador double,
                                        in find_cedente double,
                                        in fatura varchar(15),
                                        in pgto smallint,
                                        in VarTypeBaixa char(2),
                                        in VarCaixa int(11),
                                        in VarFinalizadora smallint(5),
                                        in VarConta int(11),
                                        in VarBanco int(11), in VarUser int
                                      )
begin

  declare VaridBoleto double default 0;
  declare VarValor decimal(15,3) default 0;
  DECLARE done INT DEFAULT FALSE;

case tipo
  when 1 then
select
       nr_documento,
       banco.nome,
       loja.razao,
       date_format(tab.emissao,'%d/%m/%Y') as Emissao,
       case tab1.idTipoPessoa when 1 then tab2.nome
                              when 2 then tab3.razao
                              when 3 then tab4.nome end as Nome,
                              date_format(tab.vencimento,'%d/%m/%Y') as Vencimento,
                              tab.batimento,
                              tab.valor,
                              date_format(tab.pagamento,'%d/%m/%Y') as Pgto,
                              tab.valorPago,
                              tab.codBarra,
                              tab.idBoleto
       from
            boleto tab
                inner join loja on(tab.cedente = loja.idLoja)
                inner join cliente tab1 on(tab.sacador = tab1.idCliente)
                left join fisica tab2 on(tab.sacador = tab2.idCliente)
                left join juridica tab3 on(tab.sacador = tab3.idCliente)
                left join rural tab4 on(tab.sacador = tab4.idCliente)
                inner join banco on(banco.idBanco = tab.banco)
                               where
                                     if(pgto=0, flagPagamento='n', ((flagPagamento='s' and tab.valorPago >= tab.valor) and (tab.pagamento is not null and tab.pagamento != '00000000'))) and
                                     (find_cedente=0 or tab.cedente = find_cedente) and
                                     (find_sacador=0 or tab.sacador = find_sacador ) and
                                     (fatura="0" or tab.nr_documento = fatura) and
                                                                                               if(escolha=1, tab.emissao between di and df, 0=0) and
                                                                                               if(escolha=2, tab.vencimento between di and df, 0=0) and
                                                                                               if(escolha=3, tab.pagamento between di and df, 0=0);

    when 2 then
                            select
                                   date_format(`emissao`, '%d/%m/%Y') as Emissao,
                                  `parcela`,
                                   abs(datediff(emissao,vencimento)) as Prazo,
                                   date_format(`vencimento`, '%d/%m/%Y') as Venc,
                                  round(`valor`,2) as Valor,
                                   idBoleto
                                                    from boleto
                                                              where reserva=fatura;
  when 3 then

  select idCliente from pedido where idPedido=fatura into @a;
  select
  distinct     conta.idConta,
       conta.Nome,
       conta.cedente,
       conta.agencia,
       conta.carteira,
       conta.especieDoc,
       banco.idBanco,
       tab.nossoNumero,
       tab.nr_documento,
       banco.nome,
       loja.razao,
       date_format(tab.emissao,'%d/%m/%Y') as Emissao,
       case tab1.idTipoPessoa when 1 then tab2.nome
                              when 2 then tab3.razao
                              when 3 then tab4.nome end as Nome,
                              tab.valor,
                              cast(concat(adress.Logradouro,"  B. ",adress.bairro) as char) as Adress01,
                              ifnull(adress.municipio,""),
                              ifnull(adress.estado,""),
                              ifnull(adress.cep,""),
                              ifnull(adress.numero,""),
                              tab.messagem
       from
            boleto tab
                inner join loja on(tab.cedente = loja.idLoja)
                inner join cliente tab1 on(tab.sacador = tab1.idCliente)
                left join fisica tab2 on(tab.sacador = tab2.idCliente)
                left join juridica tab3 on(tab.sacador = tab3.idCliente)
                left join rural tab4 on(tab.sacador = tab4.idCliente)
                inner join banco on(banco.idBanco = tab.banco)
                inner join conta on(tab.conta = conta.idConta)
                left join endereco adress on(tab.sacador = adress.idCliente and adress.idEnderecoType=(select min(idEnderecoType) from endereco where idCliente=@a))
                                                where
                                                    tab.reserva=fatura;
        when 4 then
  select sacador from boleto where idBoleto=fatura into @a;
  select
       conta.idConta,
       conta.Nome,
       conta.cedente,
       conta.agencia,
       conta.carteira,
       conta.especieDoc,
       banco.idBanco,
       tab.nossoNumero,
       tab.nr_documento,
       banco.nome,
       loja.razao,
       date_format(tab.emissao,'%d/%m/%Y') as Emissao,
       case tab1.idTipoPessoa when 1 then tab2.nome
                              when 2 then tab3.razao
                              when 3 then tab4.nome end as Nome,
                              tab.valor,
                              cast(concat(adress.Logradouro,"  B. ",adress.bairro) as char) as Adress01,
                              ifnull(adress.municipio,""),
                              ifnull(adress.estado,""),
                              ifnull(adress.cep,""),
                              ifnull(adress.numero,""),
                              tab.messagem,
                              tab.codBarra,
                              vencimento,
                              tab.parcela,
                         cast((concat(MID(CONCAT(lpad(tab.banco, 3,0),moeda,lpad(tab.agencia,4,0),lpad(tab.carteira,2,0),lpad(tab.nossoNumero,11,0),lpad(tab.convenio,8,0),lpad(vencimentoValue,4,0),lpad((tab.valor*100),10,0)),1,5), ".",
                                      MID(CONCAT(lpad(tab.banco, 3,0),moeda,lpad(tab.agencia,4,0),lpad(tab.carteira,2,0),lpad(tab.nossoNumero,11,0),lpad(tab.convenio,8,0),lpad(vencimentoValue,4,0),lpad((tab.valor*100),10,0)),6,4), dv1," ",
                                      MID(CONCAT(lpad(tab.banco, 3,0),moeda,lpad(tab.agencia,4,0),lpad(tab.carteira,2,0),lpad(tab.nossoNumero,11,0),lpad(tab.convenio,8,0),lpad(vencimentoValue,4,0),lpad((tab.valor*100),10,0)),10,5),'.',
                                      MID(CONCAT(lpad(tab.banco, 3,0),moeda,lpad(tab.agencia,4,0),lpad(tab.carteira,2,0),lpad(tab.nossoNumero,11,0),lpad(tab.convenio,8,0),lpad(vencimentoValue,4,0),lpad((tab.valor*100),10,0)),15,5), dv2," ",
                                      MID(CONCAT(lpad(tab.banco, 3,0),moeda,lpad(tab.agencia,4,0),lpad(tab.carteira,2,0),lpad(tab.nossoNumero,11,0),lpad(tab.convenio,8,0),lpad(vencimentoValue,4,0),lpad((tab.valor*100),10,0)),20,5),'.',
                                      MID(CONCAT(lpad(tab.banco, 3,0),moeda,lpad(tab.agencia,4,0),lpad(tab.carteira,2,0),lpad(tab.nossoNumero,11,0),lpad(tab.convenio,8,0),lpad(vencimentoValue,4,0),lpad((tab.valor*100),10,0)),25,5),dv3," ",dvFull," ",
                        Right(CONCAT(lpad(tab.banco, 3,0),moeda,lpad(tab.agencia,4,0),lpad(tab.carteira,2,0),lpad(tab.nossoNumero,11,0),lpad(tab.convenio,8,0),lpad(vencimentoValue,4,0),lpad((tab.valor*100),10,0)),14))) as char) as Linha_Digitavel,
                        ifnull(tab6.idTerminal,"0"),
                        ifnull(tab5.idFuncionario,"0")
       from
            boleto tab
                inner join loja on(tab.cedente = loja.idLoja)
                inner join cliente tab1 on(tab.sacador = tab1.idCliente)
                left join fisica tab2 on(tab.sacador = tab2.idCliente)
                left join juridica tab3 on(tab.sacador = tab3.idCliente)
                left join rural tab4 on(tab.sacador = tab4.idCliente)
                inner join banco on(banco.idBanco = tab.banco)
                inner join conta on(tab.conta = conta.idConta)
                left join endereco adress on(tab.sacador = adress.idCliente and adress.idEnderecoType=(select min(idEnderecoType) from endereco where idCliente=@a))
                left join funcionario tab5 on(tab.idFuncionario = tab5.idFuncionario)
                left join terminal tab6 on(tab.idTerminal = tab6.idTerminal)
                                where
                                    tab.idBoleto=fatura;
        when 5 then
        
select
                             round(sum(if(flagPagamento='n',tab.`valor`,0)),2) as abertas,
                              round(sum(tab.`valorPago`),2) as pagas
       from
            boleto tab
                inner join loja on(tab.cedente = loja.idLoja)
                inner join cliente tab1 on(tab.sacador = tab1.idCliente)
                left join fisica tab2 on(tab.sacador = tab2.idCliente)
                left join juridica tab3 on(tab.sacador = tab3.idCliente)
                left join rural tab4 on(tab.sacador = tab4.idCliente)
                inner join banco on(banco.idBanco = tab.banco)
                               where
                                   if(pgto=0, flagPagamento='n', ((flagPagamento='s' and tab.valorPago >= tab.valor) and (tab.pagamento is not null and tab.pagamento != '00000000'))) and
                                     (find_cedente=0 or tab.cedente = find_cedente) and
                                     (find_sacador=0 or tab.sacador = find_sacador) and
                                     (fatura="0" or tab.nr_documento = fatura) and
                                                                                               if(escolha=1, tab.emissao between di and df, 0=0) and
                                                                                               if(escolha=2, tab.vencimento between di and df, 0=0) and
                                                                                               if(escolha=3, tab.pagamento between di and df, 0=0);
when 6 then

select
      count(*)
       from
            boleto tab
                inner join loja on(tab.cedente = loja.idLoja)
                inner join cliente tab1 on(tab.sacador = tab1.idCliente)
                left join fisica tab2 on(tab.sacador = tab2.idCliente)
                left join juridica tab3 on(tab.sacador = tab3.idCliente)
                left join rural tab4 on(tab.sacador = tab4.idCliente)
                inner join banco on(banco.idBanco = tab.banco)
                               where
                                   if(pgto=0, flagPagamento='n', ((flagPagamento='s' and tab.valorPago >= tab.valor) and (tab.pagamento is not null and tab.pagamento != '00000000'))) and
                                     (find_cedente=0 or tab.cedente = find_cedente) and
                                     (find_sacador=0 or tab.sacador = find_sacador) and
                                     (fatura="0" or tab.idBoleto = fatura) and
                                                                                               if(escolha=1, tab.emissao between di and df, 0=0) and
                                                                                               if(escolha=2, tab.vencimento between di and df, 0=0) and
                                                                                               if(escolha=3, tab.pagamento between di and df, 0=0);

    when 7 then
    begin
    DECLARE basicFonte CURSOR for
    select
                 tab.idBoleto, round(tab.`valor`,2) from
            boleto tab
                inner join loja on(tab.cedente = loja.idLoja)
                inner join cliente tab1 on(tab.sacador = tab1.idCliente)
                left join fisica tab2 on(tab.sacador = tab2.idCliente)
                left join juridica tab3 on(tab.sacador = tab3.idCliente)
                left join rural tab4 on(tab.sacador = tab4.idCliente)
                inner join banco on(banco.idBanco = tab.banco)
                               where
                                   if(pgto=0, flagPagamento='n', ((flagPagamento='s' and tab.valorPago >= tab.valor) and (tab.pagamento is not null and tab.pagamento != '00000000'))) and
                                     (find_cedente=0 or tab.cedente = find_cedente) and
                                     (find_sacador=0 or tab.sacador = find_sacador) and
                                     (fatura="0" or tab.idBoleto = fatura) and
                                                                                               if(escolha=1, tab.emissao between di and df, 0=0) and
                                                                                               if(escolha=2, tab.vencimento between di and df, 0=0) and
                                                                                               if(escolha=3, tab.pagamento between di and df, 0=0);
                          DECLARE CONTINUE HANDLER FOR NOT FOUND SET done = TRUE;
    open basicFonte;

    read_loop: LOOP
                          fetch basicFonte into
                                              VaridBoleto,VarValor;


                    IF done THEN
                        LEAVE read_loop;
                    END IF;

                    update boleto set bancoBaixa=VarConta, valorPago=VarValor,finalizadoraRecebimento=VarFinalizadora, usuarioBaixa=VarUser, caixaBaixa = VarCaixa , tipoBaixa = VarTypeBaixa, flagPagamento = 's', pagamento = date_format(now(), '%Y%m%d'), flagAlteracao = date_format(now(), '%Y%m%d') where idBoleto = VaridBoleto;

            end loop;
        close basicFonte;
    end;
end case;
end $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `conector_find_caixa`
--

DROP PROCEDURE IF EXISTS `conector_find_caixa`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='' */ $$
CREATE DEFINER=`master`@`localhost` PROCEDURE `conector_find_caixa`(in tipo integer, in find varchar(45), in find_loja double)
begin
case tipo
when 1 then
select
    `idcaixa`,
    `descricao`,
    `inativo`,
    round(`saldoInicial`,2),
    `idloja`
                from
                    caixa
                        where
                            idCaixa=find and (find_loja=0 or idLoja=find_loja);
    when 2 then

select
    `idcaixa`,
    `descricao`,
    `inativo`,
    round(`saldoInicial`,2),
    `idloja`
                from
                    caixa
                        where
                            `descricao`=find and (find_loja=0 or idLoja=find_loja);
    when 3 then
select
    `idcaixa`,
    `descricao`,
    `inativo`,
    round(`saldoInicial`,2),
    `idloja`
                from
                    caixa where (find_loja=0 or idLoja=find_loja);
    when 4 then
select
    tab.`idcaixa`,
    tab.`descricao`,
    tab.`inativo`,
    round(`saldoInicial`,2),
    tab.`idloja`,
    tab1.Razao,
    tab.`zeraCaixa`,
    tab.`caixaAberto`,
    tab.`permiteNegativo`
                from
                    caixa tab
                        inner join loja tab1 on(tab.idLoja = tab1.idLoja)
                        where
                            tab.idCaixa=find and (find_loja=0 or tab.idLoja=find_loja);

end case;
end $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `conector_find_caixaCorrente`
--

DROP PROCEDURE IF EXISTS `conector_find_caixaCorrente`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='' */ $$
CREATE DEFINER=`master`@`localhost` PROCEDURE `conector_find_caixaCorrente`(
  `tipo` INT,
  `find` double,
   dataCaixa date)
begin

    declare VarzeraCaixa char(1);
    declare VarcaixaAberto char(1);
    declare VarpermiteNegativo char(1);
    declare VarsaldoOld decimal(15,3);
    declare VarTotal decimal(15,3);

    SELECT zeraCaixa,caixaAberto,permiteNegativo
                                        from caixa
                                              where idCaixa=find
                                                                  into VarzeraCaixa, VarcaixaAberto, VarpermiteNegativo;

  case tipo
    when 1 then
  select
        tab.`loja`,
        date_format(`data`, '%d/%m/%Y'),
        tab.`tipo`,
        tab.`historico`,
        truncate(tab.`valor`,2),
        tab.`origem`,
        tab.`chaveCaixa`
                from
                    `conector`.`caixacorrente` tab
                                        where
                                                tab.caixa = find and
                                                tab.data = dataCaixa;
     end case;
  end $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `conector_find_caixaMovimento`
--

DROP PROCEDURE IF EXISTS `conector_find_caixaMovimento`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='' */ $$
CREATE DEFINER=`master`@`localhost` PROCEDURE `conector_find_caixaMovimento`(in tipo int, in find varchar(45), in caixaData date)
begin


    declare VarzeraCaixa char(1);
    declare VarcaixaAberto char(1);
    declare VarpermiteNegativo char(1);
    declare VarsaldoOld decimal(15,3);
    declare VarTotal decimal(15,3);

    SELECT zeraCaixa,caixaAberto,permiteNegativo
                                        from caixa
                                              where idCaixa=find
                                                                  into VarzeraCaixa, VarcaixaAberto, VarpermiteNegativo;

case tipo
      when 1 then
select
        tab.idCaixa,
        tab.Descricao,
        if(tab1.aberto is null,tab.caixaAberto, tab1.aberto),
        tab.inativo,
        coalesce(tab1.data, date_format(now(),'%d/%m/%Y')),
        if(tab1.data is not null, 1, 0)
        from
                caixa tab
                      left join caixaRegistro tab1 on(tab1.caixa = tab.idCaixa)
                                                        where
                                                       tab.idCaixa=find and
                                                       if(tab1.data is not null,
                                                                           tab1.data = (select max(data) from caixaRegistro where caixaRegistro.caixa=find), 1=1);
     when 2 then

     select
        tab.idFinalizadora,
        tab.descricao,
        ifnull((select round(sum(valor),2)
                        from caixaFinalizadora
                                        where
                                    Codigo=tab1.codigo and
                                    caixa=find and 
                                    if(VarzeraCaixa = 's',data=caixaData,data <= caixaData)),0.00)
        from finalizadora tab
                left join caixaFinalizadora tab1 on(tab.idFinalizadora = tab1.Codigo)
                                                                            group by 1,2;
        when 3 then
        select
        case tab.tipo
                when "A" then "FUNDO TROCO"
                when "C" then "CREDITOS"
                when "D" then "DEBITOS"
                when "V" then "RECEBIMENTOS DE OUTROS"
                when "J" then "RECEBIMENTOS DE JUROS"
                when "G" then "TRANSPORTE DE VALORES"
                when "P" then "PAGAMENTOS"
                when "N" then "NUMERARIOS"
                when "R" then "RECEBIMENTOS DE CONTAS"
                when "B" then "LANCAMENTO TESOURARIA" end as SERVICOS,
        round(sum(tab.valor),2) as Total,
        count(tab.tipo) as Qtty_transaction
            from
                    caixaCorrente tab
                                where
                                    tab.caixa = find and
                                    tab.data = caixaData
                                                                group by 1;
        when 4 then
        select
        tab.idCaixa,
        tab.Descricao,
        if(tab1.aberto is null,tab.caixaAberto, tab1.aberto),
        tab.inativo,
        coalesce(tab1.data, date_format(now(),'%d/%m/%Y')),
        if(tab1.data is not null, 1, 0)
        from
                caixa tab
                      left join caixaRegistro tab1 on(tab1.caixa = tab.idCaixa)
                                                        where
                                                       tab.idCaixa=find and
                                                                           tab1.data=caixaData;
end case;
end $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `conector_find_cartao`
--

DROP PROCEDURE IF EXISTS `conector_find_cartao`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='' */ $$
CREATE DEFINER=`master`@`localhost` PROCEDURE `conector_find_cartao`(in tipo int, in find varchar(45), in reserva double, in card double)
begin
case tipo
    when 1 then
select
      "ALTERA",
      date_format(EMISSAO, '%d/%m/%Y'),
      PARCELA,
      PRAZO,
      date_format(vencimento, '%d/%m/%Y'),
      round(valor,2) as PRESTACAO,
      IDCARTAO,
      idAdministradora from cartao
                 where
                       pedido = reserva
                                          order by idcartao,parcela;
     when 2 then
select
      "ALTERA",
      EMISSAO,
      PARCELA,
      PRAZO,
      VENCIMENTO,
      round(valor,2) as PRESTACAO,
      IDCARTAO from cartao
                 where idAdministradora=find and
                       pedido = reserva and idCartao = card;
    when 3 then
select round(sum(valor),2) as Transmitir,
       round(finan.total,2) as Financiado,
       round(parcelado.par,2) as Parcelado,
       qttyParcela as Nr_Parcelas,
       idAdministradora,
       typeCartao,
       emissao, networkCard
               from cartao
                    inner join (select (referencia+encargos) as total,idPedido
                                            from pedidoFinanceiro where idfinalizadora in(5,6) and idPedido=reserva) as finan on(cartao.pedido=finan.idPedido)
                    inner join (select sum(valor)as par,ifnull(pedido,0) as id
                                            from cartao
                                                        where
                                                   pedido = reserva group by 2) as parcelado on(cartao.pedido=parcelado.id)
                 where idAdministradora=card and
                       pedido = reserva group by 2,3,4,5,6,7;
      when 4 then
select tab.idAdministradora,
       tab1.descricao
                  from cartao tab
                        inner join administradora tab1 on(tab.idAdministradora = tab1.idAdministradora)
                                             where
                                                  tab.pedido=reserva
                                                  group by 1,2;
end case;
end $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `conector_find_carteira`
--

DROP PROCEDURE IF EXISTS `conector_find_carteira`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='' */ $$
CREATE DEFINER=`master`@`localhost` PROCEDURE `conector_find_carteira`(in tipo int, in find varchar(45))
begin
case tipo
    when 1 then
    select idCarteira,
        nome from carteira;
    when 2 then
    select 
         idCarteira, nome
            from carteira
                where idCarteira = find;
    when 3 then
    select 
         idCarteira, nome
            from carteira
                where nome = find;
  end case;
end $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `conector_find_categoria`
--

DROP PROCEDURE IF EXISTS `conector_find_categoria`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='STRICT_TRANS_TABLES,STRICT_ALL_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,TRADITIONAL,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION' */ $$
CREATE DEFINER=`master`@`localhost` PROCEDURE `conector_find_categoria`(
                                               in tipo int(5),
                                               in find varchar(45),
                                                in find_setor varchar(45),
                                                in find_grupo varchar(45)
                                          )
BEGIN
     case tipo
            when 1 then
select 
                    categoria.idcategoria as codigo,
                    categoria.descricao,
                    categoria.status,
                    setor.descricao,
                    grupo.descricao,
                    categoria.comissao,
                    categoria.nitens,
                    categoria.desconto,
                    setor.idsetor,
                    grupo.idgrupo
        
            from
                    categoria
                        inner join setor on(categoria.idsetor = setor.idsetor)
                        inner join grupo on(categoria.idgrupo = grupo.idgrupo and categoria.idsetor = grupo.idsetor)
            where
                        (find_setor = 0 or setor.idsetor = find_setor) and
                        (find_grupo = 0 or grupo.idgrupo = find_grupo) and
                        (categoria.descricao like concat(find,"%"));
            when 2 then
                select 
                    categoria.idcategoria as codigo,
                    categoria.descricao,
                    categoria.status,
                    setor.descricao,
                    grupo.descricao,
                    categoria.comissao,
                    categoria.nitens,
                    categoria.desconto,
                    setor.idsetor,
                    grupo.idgrupo

            from 
                    categoria
                        inner join setor on(categoria.idsetor = setor.idsetor)
                        inner join grupo on(categoria.idgrupo = grupo.idgrupo and categoria.idsetor = grupo.idsetor)
            where
            (find_setor = 0 or setor.idsetor = find_setor) and
            (find_grupo = 0 or grupo.idgrupo = find_grupo) and
            (find=0 or categoria.idcategoria=find);
            else
            select
                    categoria.idcategoria as codigo,
                    categoria.descricao,
                    categoria.status,
                    setor.descricao,
                    grupo.descricao,
                    categoria.comissao,
                    categoria.nitens,
                    categoria.desconto,
                    setor.idsetor,
                    grupo.idgrupo
        
            from 
                    categoria
                        inner join setor on(categoria.idsetor = setor.idsetor)
                        inner join grupo on(categoria.idgrupo = grupo.idgrupo and categoria.idsetor = grupo.idsetor)
            where
            (find_setor = 0 or setor.idsetor = find_setor) and
            (find_grupo = 0 or grupo.idgrupo = find_grupo);
            
     end case;
END $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `conector_find_cedente`
--

DROP PROCEDURE IF EXISTS `conector_find_cedente`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='' */ $$
CREATE DEFINER=`master`@`localhost` PROCEDURE `conector_find_cedente`(in tipo smallint,in find double)
begin
case tipo
  when 1 then
    select tab.banco,
       tab.cedente,
       tab.agencia,
       tab.especieDoc,
       tab.carteira,
       tab2.nome,
       tab.idLoja,
       tab1.razao,
       tab.messagemCobranca
             from conta tab
                    inner join loja tab1 on(tab.idLoja = tab1.idLoja)
                    inner join carteira tab2 on(tab.carteira = tab2.idCarteira)
                     where idConta=find and tab.cedente != "";
end case;
end $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `conector_find_cep`
--

DROP PROCEDURE IF EXISTS `conector_find_cep`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='' */ $$
CREATE DEFINER=`master`@`localhost` PROCEDURE `conector_find_cep`(
                                                    in find_cep integer
                                                )
BEGIN
if(select count(cep) as cep from cepbairro where cepbairro.cep=find_cep) > 0 then



select cepCity.nome,cepbairro.idestado from cepbairro inner join cepCity on(cepbairro.idcepCity = cepCity.idcepCity) inner join estado on(cepbairro.idestado=estado.idestado) where cepbairro.cep = find_cep into @a, @c;
set @b = (select ifnull(idspedMunicipio,0) as cod_municipio from spedmunicipio where municipio like concat(@a,"%")  and idEstado=@c);
select
        cepbairro.cep,
        cepbairro.logradouro,
        cepbairro.bairro,
        cepbairro.Complemento,
        cepCity.nome,
        estado.uf,
        ifnull(round(@b),0) as cod_municipio,
        cepbairro.idcepbairro

         from
             cepbairro
                inner join cepCity on(cepbairro.idcepCity = cepCity.idcepCity)
                inner join estado on(cepbairro.idestado=estado.idestado)
         where
            cepbairro.cep = find_cep;
else
        select
                00000000 as cep,
                "Valido para emite de NFe." as logradouro,
                "NAO LOCALIZADO" as bairro,
                "NAO POSSUI" as complemento,
                "NAO LOCALIZADO" as nome,
                "XX" AS uf,
                999999 as cod_municipio,0;
end if;
END $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `conector_find_CFOP`
--

DROP PROCEDURE IF EXISTS `conector_find_CFOP`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='' */ $$
CREATE DEFINER=`master`@`localhost` PROCEDURE `conector_find_CFOP`(
                                                in parametro integer,
                                                in find varchar(45)
                                           )
begin
case parametro
    when 1 then
select
        cfop,
        nome,
        case tipo
            when 'e' then "entrada"
            when 's' then "saida" end,
        status, Modelo
from
        cfop
where
        cfop = find;

        when 2 then
select
        cfop,
        nome,
        case tipo
            when 'e' then "entrada"
            when 's' then "saida" end,
        status, Modelo
from
        cfop
where
        nome like concat("%",find,"%");
      when 3 then
select
        cfop,
        nome,
        case tipo
            when 'e' then "entrada"
            when 's' then "saida" end,
        status, Modelo
from
        cfop;
      when 4 then
select
        tab.cfop,
        tab.NOME,
        tab.TIPO,
        tab.MODELO,
        tab.msg01,
        tab.msg02,status,
        ifnull(tab1.modelo,"") as DescricaoModelo,
        concat(ifnull(tab1.codigo,""), " | ", ifnull(tab1.modelo,""))
from
        conector.cfop tab
        left join modeloFiscal tab1 on(tab.modelo = tab1.codigo)
 where cfop=find;

  when 5 then
  select 
      codigo,
      modelo,
      concat(codigo, " | ", modelo) as cmb
                            from modeloFiscal;
  when 6 then
  select 
      codigo,
      modelo,
      concat(codigo, " | ", modelo) as cmb
                            from modeloFiscal
   where codigo=find;
   when 7 then
select
        tab.cfop,
        tab.NOME,
        tab.TIPO,
        tab.MODELO,
        tab.msg01,
        tab.msg02,status,
        ifnull(tab1.modelo,"") as DescricaoModelo,
        concat(ifnull(tab1.codigo,""), " | ", ifnull(tab1.modelo,""))
from
        conector.cfop tab
        left join modeloFiscal tab1 on(tab.modelo = tab1.codigo)
 where cfop=find and tab.tipo="s";
        end case;
end $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `conector_find_chequeEmitido`
--

DROP PROCEDURE IF EXISTS `conector_find_chequeEmitido`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='' */ $$
CREATE DEFINER=`master`@`localhost` PROCEDURE `conector_find_chequeEmitido`(in tipo int, in find varchar(45), in reserva double)
begin
case tipo
    when 1 then
            select
                    tab.idCheque,
                    tab.`banco`,
                    tab.`idloja`,
                    tab.`idcliente`,
                    tab.`typeRecebimento`,
                    tab.`contaCorrente`,
                    tab.`serie`,
                    tab.`agencia`,
                    tab.`typeCheque`,
                    tab.`prazo`,
                    date_format(tab.`emissao`,'%d/%m/%Y'),
                    date_format(tab.vencimento,'%d/%m/%Y'),
                    tab.`cityBanco`,
                    tab.`numberCheque`,
                    tab.`valueCheque`,
                    tab.`historico`,
                    tab.`typeLancamento`,
                    tab.`flagPagamento`,
                    tab.`pagamento` ,
                    tab.`observacao`,
                    tab.`idUsuarioLiberacao`,
                    tab.`motivoLiberacao`,
                    tab.`cmc7`,
                    tab.`idusuario`,
                    tab.`alteracao`,
                    tab1.descricao,
                    tab2.razao,
                    case tab.`typeCheque` when 'v' then "A VISTA" else "A PRAZO" end tipoCheque,
                    tab.reserva,
                    tab3.numeroParcelas,
                    banco.nome

                                from cheque tab
                                    inner join typeLancamento tab1 on(tab.typeLancamento = tab1.idtypeLancamento)
                                    inner join loja tab2 on(tab.idLoja = tab2.idLoja)
                                    inner join pedidoFinanceiro tab3 on(tab.reserva = tab3.idPedido)
                                    inner join banco on(tab.banco = banco.idBanco)
                                                                   where
                                                                           tab3.idFinalizadora=2 and tab3.idPedido=reserva and
                                                                           tab.idCheque=find;
    when 2 then
    select "ALTERA",
           date_format(tab.vencimento,'%d/%m/%Y'),
           tab.banco,
           tab.agencia,
           tab.contaCorrente,
           tab.valueCheque,
           tab.prazo,
           tab.idCheque
                                from cheque tab
                                    inner join typeLancamento tab1 on(tab.typeLancamento = tab1.idtypeLancamento)
                                    inner join loja tab2 on(tab.idLoja = tab2.idLoja)
                                                                                        where  tab.reserva=reserva order by 2 desc;
    when 3 then
    select  count(*) emitidos,
            tab3.numeroParcelas parcelamento,
            round(sum(tab3.referencia + tab3.encargos),2) negociado,
            round(sum(tab.valueCheque),3) faturado

                                from cheque tab
                                    inner join typeLancamento tab1 on(tab.typeLancamento = tab1.idtypeLancamento)
                                    inner join loja tab2 on(tab.idLoja = tab2.idLoja)
                                    inner join pedidoFinanceiro tab3 on(tab.reserva = tab3.idPedido)
                                                                      where
                                                                           tab3.idFinalizadora=2 and tab3.idPedido=reserva
                                                                                   group by 2;
    when 4 then
    SELECT
        sequencial,
        valor,
        deposito
                FROM pedidoparcelacheque
                                where idPedido=reserva AND sequencial in(select  if(count(*)=0 || count(*) is null,1,count(*)+1) emitidos
                                                                                                                                  from cheque tab
                                                                                                                                         where
                                                                                                                                          tab.reserva=reserva);
        end case;
        end $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `conector_find_cliente`
--

DROP PROCEDURE IF EXISTS `conector_find_cliente`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='' */ $$
CREATE DEFINER=`master`@`localhost` PROCEDURE `conector_find_cliente`(
                                            in tipo int,
                                            in find_cliente varchar(45),
                                            in tipo_cliente char(5),
                                            in find_atividade int
                                        )
BEGIN
case tipo

            when 1 then
select
	tab.idcliente as chave,
    case tab.idtipoPessoa when 1 then tab1.nome
                          when 2 then tab2.razao
                          when 3 then tab3.nome end Nome_Razao,
    tab.uf,
    case tab.idtipoPessoa when 1 then date_format(tab1.nascimento, '%d/%m/%Y')
                         when 2 then date_format(tab2.dataAbertura, '%d/%m/%Y')
                         when 3 then date_format(tab3.nascimento, '%d/%m/%Y') end Nascimento_Abertura,
    tab.status,
    case tab.idtipoPessoa when 1 then tab1.cpf
                          when 2 then tab2.cnpj
                          when 3 then tab3.cpf_1 end CPF_CNPJ,
    case tab.idtipoPessoa when 1 then tab1.identidade
                          when 2 then tab2.ie
                          when 3 then tab3.identidade end Ie_Identidade,
  date_format(tab.dataEmissao, '%d/%m/%Y') as Inclusao,
  tab.idloja as chave_loja,
	tab.idtipoPessoa,
  tp.descricao,tab.idatividade

from
	cliente tab
  inner join tipoPessoa tp on(tab.idTipoPessoa = tp.idTipoPessoa)
  inner join loja on(tab.idloja = loja.idloja)
	left join fisica tab1 on(tab.idcliente = tab1.idcliente)
	left join juridica tab2 on(tab.idcliente = tab2.idcliente)
	left join (select rural.idcliente,rural.cpf as cpf_1,rural.nome,rural.nascimento,rural.ie,rural.idsexo,rural.identidade,rural.idcivil,sexo.descricao as sexo1,civil.descricao as civil1 from rural
                inner join sexo on(rural.idsexo = sexo.idsexo)
                inner join civil on(rural.idcivil = civil.idcivil)) as tab3
        		on(tab.idcliente = tab3.idcliente)
	left join sexo tab4 on(tab1.idsexo = tab4.idsexo)
	left join civil tab5 on(tab1.idcivil = tab5.idcivil)
where
    (
     tab2.cnpj is not null or
     tab1.cpf  is not null or
     tab3.cpf_1 is not null
    ) and tab.idcliente=find_cliente  AND if(tipo_cliente = 'x', 1=1, tab.idtipoPessoa=tipo_cliente) and tab.idatividade in(find_atividade,7) order by 1;

                when 2 then
select
	tab.idcliente as chave,
    case tab.idtipoPessoa when 1 then tab1.nome
                          when 2 then tab2.razao
                          when 3 then tab3.nome end Nome_Razao,
    tab.uf,
    case tab.idtipoPessoa when 1 then date_format(tab1.nascimento, '%d/%m/%Y')
                         when 2 then date_format(tab2.dataAbertura, '%d/%m/%Y')
                         when 3 then date_format(tab3.nascimento, '%d/%m/%Y') end Nascimento_Abertura,
    tab.status,
    case tab.idtipoPessoa when 1 then tab1.cpf
                          when 2 then tab2.cnpj
                          when 3 then tab3.cpf_1 end CPF_CNPJ,
    case tab.idtipoPessoa when 1 then tab1.identidade
                          when 2 then tab2.ie
                          when 3 then tab3.identidade end Ie_Identidade,
  date_format(tab.dataEmissao, '%d/%m/%Y') as Inclusao,
  tab.idloja as chave_loja,
	tab.idtipoPessoa,
  tp.descricao,tab.idatividade

from
	cliente tab
  inner join tipoPessoa tp on(tab.idTipoPessoa = tp.idTipoPessoa)
  inner join loja on(tab.idloja = loja.idloja)
	left join fisica tab1 on(tab.idcliente = tab1.idcliente)
	left join juridica tab2 on(tab.idcliente = tab2.idcliente)
	left join (select rural.idcliente,rural.cpf as cpf_1,rural.nome,rural.nascimento,rural.ie,rural.idsexo,rural.identidade,rural.idcivil,sexo.descricao as sexo1,civil.descricao as civil1 from rural
                inner join sexo on(rural.idsexo = sexo.idsexo)
                inner join civil on(rural.idcivil = civil.idcivil)) as tab3
        		on(tab.idcliente = tab3.idcliente)
	left join sexo tab4 on(tab1.idsexo = tab4.idsexo)
	left join civil tab5 on(tab1.idcivil = tab5.idcivil)
where
    (
     tab2.cnpj is not null or
     tab1.cpf  is not null or
     tab3.cpf_1 is not null
    ) and tab1.nome like concat(find_cliente,'%') and tab.idtipoPessoa=tipo_cliente and  tab.idatividade in(find_atividade,7,5,6) order by 1;

when 3 then
select
	tab.idcliente as chave,
    case tab.idtipoPessoa when 1 then tab1.nome
                          when 2 then tab2.razao
                          when 3 then tab3.nome end Nome_Razao,
    tab.uf,
    case tab.idtipoPessoa when 1 then date_format(tab1.nascimento, '%d/%m/%Y')
                         when 2 then date_format(tab2.dataAbertura, '%d/%m/%Y')
                         when 3 then date_format(tab3.nascimento, '%d/%m/%Y') end Nascimento_Abertura,
    tab.status,
    case tab.idtipoPessoa when 1 then tab1.cpf
                          when 2 then tab2.cnpj
                          when 3 then tab3.cpf_1 end CPF_CNPJ,
    case tab.idtipoPessoa when 1 then tab1.identidade
                          when 2 then tab2.ie
                          when 3 then tab3.identidade end Ie_Identidade,
  date_format(tab.dataEmissao, '%d/%m/%Y') as Inclusao,
  tab.idloja as chave_loja,
	tab.idtipoPessoa,
  tp.descricao,tab.idatividade

from
	cliente tab
  inner join tipoPessoa tp on(tab.idTipoPessoa = tp.idTipoPessoa)
  inner join loja on(tab.idloja = loja.idloja)
	left join fisica tab1 on(tab.idcliente = tab1.idcliente)
	left join juridica tab2 on(tab.idcliente = tab2.idcliente)
	left join (select rural.idcliente,rural.cpf as cpf_1,rural.nome,rural.nascimento,rural.ie,rural.idsexo,rural.identidade,rural.idcivil,sexo.descricao as sexo1,civil.descricao as civil1 from rural
                inner join sexo on(rural.idsexo = sexo.idsexo)
                inner join civil on(rural.idcivil = civil.idcivil)) as tab3
        		on(tab.idcliente = tab3.idcliente)
	left join sexo tab4 on(tab1.idsexo = tab4.idsexo)
	left join civil tab5 on(tab1.idcivil = tab5.idcivil)
where
    (
     tab2.cnpj is not null or
     tab1.cpf  is not null or
     tab3.cpf_1 is not null
    ) and tab2.razao like concat(find_cliente,'%') and tab.idtipoPessoa=tipo_cliente  and  tab.idatividade in(find_atividade,7,5,6) order by 1;

when 4 then

select
	tab.idcliente as chave,
    case tab.idtipoPessoa when 1 then tab1.nome
                          when 2 then tab2.razao
                          when 3 then tab3.nome end Nome_Razao,
    tab.uf,
    case tab.idtipoPessoa when 1 then date_format(tab1.nascimento, '%d/%m/%Y')
                         when 2 then date_format(tab2.dataAbertura, '%d/%m/%Y')
                         when 3 then date_format(tab3.nascimento, '%d/%m/%Y') end Nascimento_Abertura,
    tab.status,
    case tab.idtipoPessoa when 1 then tab1.cpf
                          when 2 then tab2.cnpj
                          when 3 then tab3.cpf_1 end CPF_CNPJ,
    case tab.idtipoPessoa when 1 then tab1.identidade
                          when 2 then tab2.ie
                          when 3 then tab3.identidade end Ie_Identidade,
  date_format(tab.dataEmissao, '%d/%m/%Y') as Inclusao,
  tab.idloja as chave_loja,
	tab.idtipoPessoa,
  tp.descricao,
  tab.idatividade
from
	cliente tab
  inner join tipoPessoa tp on(tab.idTipoPessoa = tp.idTipoPessoa)
  inner join loja on(tab.idloja = loja.idloja)
	left join fisica tab1 on(tab.idcliente = tab1.idcliente)
	left join juridica tab2 on(tab.idcliente = tab2.idcliente)
	left join (select rural.idcliente,rural.cpf as cpf_1,rural.nome,rural.nascimento,rural.ie,rural.idsexo,rural.identidade,rural.idcivil,sexo.descricao as sexo1,civil.descricao as civil1 from rural
                inner join sexo on(rural.idsexo = sexo.idsexo)
                inner join civil on(rural.idcivil = civil.idcivil)) as tab3
        		on(tab.idcliente = tab3.idcliente)
	left join sexo tab4 on(tab1.idsexo = tab4.idsexo)
	left join civil tab5 on(tab1.idcivil = tab5.idcivil)
where
    (
     tab2.cnpj is not null or
     tab1.cpf  is not null or
     tab3.cpf_1 is not null
    ) and tab2.cnpj = find_cliente and tab.idtipoPessoa=tipo_cliente  and  tab.idatividade in(find_atividade,7) order by 1;

when 5 then

select
	tab.idcliente as chave,
    case tab.idtipoPessoa when 1 then tab1.nome
                          when 2 then tab2.razao
                          when 3 then tab3.nome end Nome_Razao,
    tab.uf,
    case tab.idtipoPessoa when 1 then date_format(tab1.nascimento, '%d/%m/%Y')
                         when 2 then date_format(tab2.dataAbertura, '%d/%m/%Y')
                         when 3 then date_format(tab3.nascimento, '%d/%m/%Y') end Nascimento_Abertura,
    tab.status,
    case tab.idtipoPessoa when 1 then tab1.cpf
                          when 2 then tab2.cnpj
                          when 3 then tab3.cpf_1 end CPF_CNPJ,
    case tab.idtipoPessoa when 1 then tab1.identidade
                          when 2 then tab2.ie
                          when 3 then tab3.identidade end Ie_Identidade,
  date_format(tab.dataEmissao, '%d/%m/%Y') as Inclusao,
  tab.idloja as chave_loja,
	tab.idtipoPessoa,
  tp.descricao,
  tab.idatividade
from
	cliente tab
  inner join tipoPessoa tp on(tab.idTipoPessoa = tp.idTipoPessoa)
  inner join loja on(tab.idloja = loja.idloja)
	left join fisica tab1 on(tab.idcliente = tab1.idcliente)
	left join juridica tab2 on(tab.idcliente = tab2.idcliente)
	left join (select rural.idcliente,rural.cpf as cpf_1,rural.nome,rural.nascimento,rural.ie,rural.idsexo,rural.identidade,rural.idcivil,sexo.descricao as sexo1,civil.descricao as civil1 from rural
                inner join sexo on(rural.idsexo = sexo.idsexo)
                inner join civil on(rural.idcivil = civil.idcivil)) as tab3
        		on(tab.idcliente = tab3.idcliente)
	left join sexo tab4 on(tab1.idsexo = tab4.idsexo)
	left join civil tab5 on(tab1.idcivil = tab5.idcivil)
where
    (
     tab2.cnpj is not null or
     tab1.cpf  is not null or
     tab3.cpf_1 is not null
    ) and tab1.cpf = find_cliente and tab.idtipoPessoa=tipo_cliente  and  tab.idatividade in(find_atividade,7) order by 1;


    when 6 then
select
	tab.idcliente as chave,
    case tab.idtipoPessoa when 1 then tab1.nome
                          when 2 then tab2.razao
                          when 3 then tab3.nome end Nome_Razao,
    tab.uf,
    case tab.idtipoPessoa when 1 then date_format(tab1.nascimento, '%d/%m/%Y')
                         when 2 then date_format(tab2.dataAbertura, '%d/%m/%Y')
                         when 3 then date_format(tab3.nascimento, '%d/%m/%Y') end Nascimento_Abertura,
    tab.status,
    case tab.idtipoPessoa when 1 then tab1.cpf
                          when 2 then tab2.cnpj
                          when 3 then tab3.cpf_1 end CPF_CNPJ,
    case tab.idtipoPessoa when 1 then tab1.identidade
                          when 2 then tab2.ie
                          when 3 then tab3.identidade end Ie_Identidade,
  date_format(tab.dataEmissao, '%d/%m/%Y') as Inclusao,
  tab.idloja as chave_loja,
	tab.idtipoPessoa,
  tp.descricao,
  tab.idatividade
from
	cliente tab
  inner join tipoPessoa tp on(tab.idTipoPessoa = tp.idTipoPessoa)
  inner join loja on(tab.idloja = loja.idloja)
	left join fisica tab1 on(tab.idcliente = tab1.idcliente)
	left join juridica tab2 on(tab.idcliente = tab2.idcliente)
	left join (select rural.idcliente,rural.cpf as cpf_1,rural.nome,rural.nascimento,rural.ie,rural.idsexo,rural.identidade,rural.idcivil,sexo.descricao as sexo1,civil.descricao as civil1 from rural
                inner join sexo on(rural.idsexo = sexo.idsexo)
                inner join civil on(rural.idcivil = civil.idcivil)) as tab3
        		on(tab.idcliente = tab3.idcliente)
	left join sexo tab4 on(tab1.idsexo = tab4.idsexo)
	left join civil tab5 on(tab1.idcivil = tab5.idcivil)
where
    (
     tab2.cnpj is not null or
     tab1.cpf  is not null or
     tab3.cpf_1 is not null
    ) and tab3.nome like concat(find_cliente,"%") and tab.idtipoPessoa=tipo_cliente and  tab.idatividade in(find_atividade,7) order by 1;

    when 7 then

select
	tab.idcliente as chave,
    case tab.idtipoPessoa when 1 then tab1.nome
                          when 2 then tab2.razao
                          when 3 then tab3.nome end Nome_Razao,
    tab.uf,
    case tab.idtipoPessoa when 1 then date_format(tab1.nascimento, '%d/%m/%Y')
                         when 2 then date_format(tab2.dataAbertura, '%d/%m/%Y')
                         when 3 then date_format(tab3.nascimento, '%d/%m/%Y') end Nascimento_Abertura,
    tab.status,
    case tab.idtipoPessoa when 1 then tab1.cpf
                          when 2 then tab2.cnpj
                          when 3 then tab3.cpf_1 end CPF_CNPJ,
    case tab.idtipoPessoa when 1 then tab1.identidade
                          when 2 then tab2.ie
                          when 3 then tab3.identidade end Ie_Identidade,
  date_format(tab.dataEmissao, '%d/%m/%Y') as Inclusao,
  tab.idloja as chave_loja,
	tab.idtipoPessoa,
  tp.descricao,
  tab.idatividade
from
	cliente tab
  inner join tipoPessoa tp on(tab.idTipoPessoa = tp.idTipoPessoa)
  inner join loja on(tab.idloja = loja.idloja)
	left join fisica tab1 on(tab.idcliente = tab1.idcliente)
	left join juridica tab2 on(tab.idcliente = tab2.idcliente)
	left join (select rural.idcliente,rural.cpf as cpf_1,rural.nome,rural.nascimento,rural.ie,rural.idsexo,rural.identidade,rural.idcivil,sexo.descricao as sexo1,civil.descricao as civil1 from rural
                inner join sexo on(rural.idsexo = sexo.idsexo)
                inner join civil on(rural.idcivil = civil.idcivil)) as tab3
        		on(tab.idcliente = tab3.idcliente)
	left join sexo tab4 on(tab1.idsexo = tab4.idsexo)
	left join civil tab5 on(tab1.idcivil = tab5.idcivil)
where
    (
     tab2.cnpj is not null or
     tab1.cpf  is not null or
     tab3.cpf_1 is not null
    ) and tab3.cpf_1 = find_cpf and tab.idtipoPessoa=tipo_cliente  and  tab.idatividade in(find_atividade,7) order by 1;

when 8 then
  select
        idTipoPessoa
                  from cliente
                            where idCliente=find_cliente
                                                       into @a;

select
      tab.idCliente,
      case @a
     when 2 then
      tab1.Razao
     when 1 then
      tab2.nome
     when 3 then
      tab3.nome end as Nome,
      tab.status,tab.idtipoPessoa,tab.idatividade
          from

  cliente tab

  left join juridica tab1 on(tab.IdCliente = tab1.IdCliente)
  left join fisica tab2 on(tab.IdCliente = tab2.IdCliente)
   left join rural tab3 on(tab.IdCliente = tab3.IdCliente)
  where tab.idCliente=find_cliente;

  when 9 then

select
	tab.idcliente as chave,
	tab1.nome as nome_fisica,
	tab2.razao,
  tab3.nome as nome_rural,
	tab2.cnpj,
	tab1.cpf,
	tab1.identidade,
	tab2.ie,
  loja.razao as empresa,
	tab4.descricao as sexo_fisica,
	tab5.descricao as civil_fisica,
  tab1.nascimento,
  tab2.dataAbertura,
	tab2.fantasia,
  tab.uf,
  tab3.cpf_1,
  tab3.identidade,
  tab3.nascimento,
  tab3.sexo1,
  tab3.civil1,
	ifnull(tab2.idTipoFornecedor,0),
	tab.idloja as chave_loja,
	tab.idtipoPessoa,
	tab.idusuario,
	tab.idatividade,
	tab.observacao,
	tab.dataEmissao,
	tab.dataAlteracao,
	tab.idestado as chave_estado,
	tab1.idsexo as chave_sexo_fisica,
	tab1.idcivil as chave_sexo_civil,
	ifnull(tab3.ie,0),
  ifnull(tab3.idsexo,0),
  ifnull(tab3.idcivil,0),
  tab.status,
  tab.idspedMunicipio, tab.uf

from
	cliente tab
  inner join loja on(tab.idloja = loja.idloja)
	left join fisica tab1 on(tab.idcliente = tab1.idcliente)
	left join juridica tab2 on(tab.idcliente = tab2.idcliente)
	left join (select rural.idcliente,rural.cpf as cpf_1,rural.nome,rural.nascimento,rural.ie,rural.idsexo,rural.identidade,rural.idcivil,sexo.descricao as sexo1,civil.descricao as civil1 from rural
                inner join sexo on(rural.idsexo = sexo.idsexo)
                inner join civil on(rural.idcivil = civil.idcivil)) as tab3
        		on(tab.idcliente = tab3.idcliente)
	left join sexo tab4 on(tab1.idsexo = tab4.idsexo)
	left join civil tab5 on(tab1.idcivil = tab5.idcivil)
where
    (
     tab2.cnpj <> "" or
     tab1.cpf  <> "" or
     tab3.cpf_1 <> ""
    ) and tab2.cnpj=find_cliente AND tab.idtipoPessoa=tipo_cliente and tab.idatividade in(find_atividade,7);

when 11 then
select
	tab.idcliente as chave,
	ifnull(tab1.nome,"") as nome_fisica,
	ifnull(tab2.razao,""),
  ifnull(tab3.nome,"") as nome_rural,
	ifnull(tab2.cnpj,""),
	ifnull(tab1.cpf,""),
	ifnull(tab1.identidade,""),
	ifnull(tab2.ie,""),
  ifnull(loja.razao,"") as empresa,
	ifnull(tab4.descricao,"") as sexo_fisica,
	ifnull(tab5.descricao,"") as civil_fisica,
  ifnull(tab1.nascimento,""),
  ifnull(tab2.dataAbertura,""),
	ifnull(tab2.fantasia,""),
  ifnull(tab.uf,""),
  ifnull(tab3.cpf_1,""),
  ifnull(tab3.identidade,""),
  ifnull(tab3.nascimento,""),
  tab3.sexo1,
  tab3.civil1,
	ifnull(tab2.idTipoFornecedor,0),
	tab.idloja as chave_loja,
	ifnull(tab.idtipoPessoa,0),
	tab.idusuario,
	tab.idatividade,
	tab.observacao,
	tab.dataEmissao,
	tab.dataAlteracao,
	tab.idestado as chave_estado,
	tab1.idsexo as chave_sexo_fisica,
	tab1.idcivil as chave_sexo_civil,
	ifnull(tab3.ie,0),
  ifnull(tab3.idsexo,0),
  ifnull(tab3.idcivil,0),
  tab.status,
  ifnull(tab7.`visita`, ""),
  ifnull(tab7.`analiseCompra`, ""),
  ifnull(tab7.`minVolume`, ""),
  ifnull(tab7.`valueBay`, ""),
  ifnull(tab7.`comprador`, ""),
  ifnull(tab7.`prazoEntrega`, ""),
  ifnull(tab7.`formaPgto`, ""),
  ifnull(tab7.`banco`, ""),
  ifnull(tab7.`agencia`, ""),
  ifnull(tab7.`contaCorrente`, ""),
  ifnull(tab6.`typeTroca`, ""),
  ifnull(tab6.`typeFrete`, ""),
  ifnull(tab6.`porcentagemFrete`, ""),
  ifnull(tab6.`lastVisita`, ""),
  ifnull(tab6.`nextVisita`, ""),
  ifnull(tab6.`devPagar`, ""),
  ifnull(tab6.`bloquearEntregaFiscal`, ""),
  ifnull(tab6.`representante`, ""),
  ifnull(tab6.`idoperacao`, ""),
  ifnull(tab6.`forceCompra`, ""),
  ifnull(tab6.`nameSugestao`, ""),
  ifnull(tab6.`passwdSugestao`, ""),
  ifnull(tab6.`observacao`, ""),
  ifnull(tab8.`idcliente`, ""),
  ifnull(tab8.`forceIcms`, ""),
  ifnull(tab8.`forcePis`, ""),
  ifnull(tab8.`forceCofins`, ""),
  ifnull(tab8.`descatadaSt`, ""),
  ifnull(tab8.`typeGrade`, ""),
  ifnull(tab6.idInformacao,""),
  ifnull(tab7.idComercial,""),
  ifnull(tab8.idFiscal,""),
  tab.idspedMunicipio,
  ifnull(tab9.descricao,""),
  tab6.typeFornecedor,
  ifnull(tab0.nome,""),
  ifnull(email.idemail,""),
  ifnull(email.mail,"")
from
	cliente tab
  inner join loja on(tab.idloja = loja.idloja)
	left join fisica tab1 on(tab.idcliente = tab1.idcliente)
	left join juridica tab2 on(tab.idcliente = tab2.idcliente)
	left join (select rural.idcliente,rural.cpf as cpf_1,rural.nome,rural.nascimento,rural.ie,rural.idsexo,rural.identidade,rural.idcivil,sexo.descricao as sexo1,civil.descricao as civil1 from rural
                inner join sexo on(rural.idsexo = sexo.idsexo)
                inner join civil on(rural.idcivil = civil.idcivil)) as tab3
        		on(tab.idcliente = tab3.idcliente)
	left join sexo tab4 on(tab1.idsexo = tab4.idsexo)
	left join civil tab5 on(tab1.idcivil = tab5.idcivil)
  left join paramentro_fornecedor_informacao tab6 on(tab.idCliente = tab6.idCliente)
  left join paramentro_fornecedor_comercial tab7 on(tab.idCliente = tab7.idCliente)
  left join paramentro_fornecedor_fiscal tab8 on(tab.idCliente = tab8.idCliente)
  left join paramentro_faturamento tab9 on(tab6.idoperacao = tab9.idParamentro)
  left join funcionario tab0 on(tab7.comprador = tab0.idFuncionario)
  left join email on(tab.idCliente = email.idCliente)
where
    (
     tab2.cnpj is not null or
     tab1.cpf  is not null or
     tab3.cpf_1 is not null
    ) and tab.idcliente=find_cliente AND tab.idtipoPessoa=tipo_cliente and tab.idatividade in(find_atividade,7);

            when 12 then
select
	tab.idcliente as chave,
  case when tab.idTipoPessoa=1 Then  tab1.nome
  when tab.idTipoPessoa=2 Then  tab2.razao
  when tab.idTipoPessoa=3 Then  tab3.nome end,
	tab.idtipoPessoa,
	tab.idatividade,
  ifnull(tab6.idfone,0),
  ifnull(tab6.ddd,'0000'),
  ifnull(tab6.telefone,'00000000'),
  ifnull(mid(concat(tab6.ddd,tab6.telefone),3),'0000000000')
from
	cliente tab
  inner join loja on(tab.idloja = loja.idloja)
	left join fisica tab1 on(tab.idcliente = tab1.idcliente)
	left join juridica tab2 on(tab.idcliente = tab2.idcliente)
	left join (select rural.idcliente,rural.cpf as cpf_1,rural.nome,rural.nascimento,rural.ie,rural.idsexo,rural.identidade,rural.idcivil,sexo.descricao as sexo1,civil.descricao as civil1 from rural
                inner join sexo on(rural.idsexo = sexo.idsexo)
                inner join civil on(rural.idcivil = civil.idcivil)) as tab3
        		on(tab.idcliente = tab3.idcliente)
	left join sexo tab4 on(tab1.idsexo = tab4.idsexo)
	left join civil tab5 on(tab1.idcivil = tab5.idcivil)
  left join fone tab6 on(tab.idCliente = tab6.idcliente and tab6.priori = (select priori from fone,cliente where fone.idcliente=cliente.idCliente and fone.priori='v' and fone.idCliente=tab.idCliente))
where
    (tab2.cnpj <> "" or
     tab1.cpf  <> "" or
     tab3.cpf_1 <> "") and tab.idcliente=find_cliente AND tab.idtipoPessoa in(2) and tab.idatividade in(find_atividade,7);

    when 13 then

    select
    tab.idCliente,
    case tab.idtipoPessoa when 1 then ifnull(tab1.nome,"")
                          when 2 then ifnull(tab2.razao,"")
                          when 3 then ifnull(tab3.nome,"") end Nome_Razao,
    case tab.idtipoPessoa when 1 then ifnull(tab1.cpf,"")
                          when 2 then ifnull(tab2.cnpj,"")
                          when 3 then ifnull(tab3.cpf_1,"") end CPF_CNPJ,
    case tab.idtipoPessoa when 1 then ifnull(tab1.identidade,"")
                          when 2 then ifnull(tab2.ie,"")
                          when 3 then ifnull(tab3.identidade,tab.dataEmissao) end Ie_Identidade,
    case tab.idtipoPessoa when 1 then ifnull(tab1.nascimento,tab.dataEmissao)
                          when 2 then ifnull(tab2.dataAbertura,tab.dataEmissao)
                          when 3 then ifnull(tab3.nascimento,"") end Nascimento_Abertura,
    case tab.idtipoPessoa when 1 then ifnull(tab1.idsexo,"0")
                         when 2 then "Inexistente"
                         when 3 then ifnull(tab3.idSexo,"0") end Chave_Sexo,
    case tab.idtipoPessoa when 1 then ifnull(tab4.descricao,"")
                         when 2 then "Inexistente"
                         when 3 then ifnull(tab4.descricao,"") end Sexo,
    case tab.idtipoPessoa when 1 then ifnull(tab1.idcivil,"0")
                         when 2 then "Inexistente"
                         when 3 then ifnull(tab3.idCivil,"0") end Chave_Estado_Civil,
    case tab.idtipoPessoa when 1 then ifnull(tab5.descricao,"")
                         when 2 then "Inexistente"
                         when 3 then ifnull(tab5.descricao,"") end Estado_Civil,
  tab.idloja as chave_loja,
  tab.status,
  loja.razao as empresa,
	ifnull(tab2.fantasia,""),
  tab.uf,
	ifnull(tab2.idTipoFornecedor,0),
	tab.idtipoPessoa,
	tab.idusuario,
	tab.idatividade,
	tab.observacao,
	tab.dataEmissao,
	tab.dataAlteracao,
	tab.idestado as chave_estado,
	ifnull(tab3.ie,0),
  ifnull(tab7.`visita`, ""),
  ifnull(tab7.`analiseCompra`, ""),
  ifnull(tab7.`minVolume`, ""),
  ifnull(tab7.`valueBay`, ""),
  ifnull(tab7.`comprador`, ""),
  ifnull(tab7.`prazoEntrega`, ""),
  ifnull(tab7.`formaPgto`, ""),
  ifnull(tab7.`banco`, ""),
  ifnull(tab7.`agencia`, ""),
  ifnull(tab7.`contaCorrente`, ""),
  ifnull(tab6.`typeTroca`, ""),
  ifnull(tab6.`typeFrete`, ""),
  ifnull(tab6.`porcentagemFrete`, ""),
  ifnull(tab6.`lastVisita`, ""),
  ifnull(tab6.`nextVisita`, ""),
  ifnull(tab6.`devPagar`, ""),
  ifnull(tab6.`bloquearEntregaFiscal`, ""),
  ifnull(tab6.`representante`, ""),
  ifnull(tab6.`idoperacao`, ""),
  ifnull(tab6.`forceCompra`, ""),
  ifnull(tab6.`nameSugestao`, ""),
  ifnull(tab6.`passwdSugestao`, ""),
  ifnull(tab6.`observacao`, ""),
  ifnull(tab8.`idcliente`, ""),
  ifnull(tab8.`forceIcms`, ""),
  ifnull(tab8.`forcePis`, ""),
  ifnull(tab8.`forceCofins`, ""),
  ifnull(tab8.`descatadaSt`, ""),
  ifnull(tab8.`typeGrade`, ""),
  ifnull(tab6.idInformacao,""),
  ifnull(tab7.idComercial,""),
  ifnull(tab8.idFiscal,""),
  tab.idspedMunicipio,
  ifnull(tab9.descricao,""),
  ifnull(tab6.typeFornecedor,1),
  pais.idPais,
  pais.nome,
  pais.codReceita,
  ifnull(email.idemail,""),
  ifnull(email.mail,"")
from
	cliente tab
  inner join loja on(tab.idloja = loja.idloja)
  inner join pais on(tab.idpais = pais.idPais)
	left join fisica tab1 on(tab.idcliente = tab1.idcliente)
	left join juridica tab2 on(tab.idcliente = tab2.idcliente)
	left join (select rural.idcliente,rural.cpf as cpf_1,rural.nome,rural.nascimento,rural.ie,rural.idsexo,rural.identidade,rural.idcivil,sexo.descricao as sexo1,civil.descricao as civil1 from rural
                inner join sexo on(rural.idsexo = sexo.idsexo)
                inner join civil on(rural.idcivil = civil.idcivil)) as tab3
        		on(tab.idcliente = tab3.idcliente)
	left join sexo tab4 on(tab1.idsexo = tab4.idsexo)
	left join civil tab5 on(tab1.idcivil = tab5.idcivil)
  left join paramentro_fornecedor_informacao tab6 on(tab.idCliente = tab6.idCliente)
  left join paramentro_fornecedor_comercial tab7 on(tab.idCliente = tab7.idCliente)
  left join paramentro_fornecedor_fiscal tab8 on(tab.idCliente = tab8.idCliente)
  left join paramentro_faturamento tab9 on(tab6.idoperacao = tab9.idParamentro)
  left join email on(tab.idCliente = email.idCliente)
where
    (
     tab2.cnpj is not null or
     tab1.cpf  is not null or
     tab3.cpf_1 is not null
    ) and tab.idcliente=find_cliente;

    when 14 then
    select tab10.dependente,
       case tab.idtipoPessoa when 1 then tab1.nome
                             when 2 then tab2.razao
                             when 3 then tab3.nome end Nome_Razao

        from cliente tab

                inner join dependente tab10 on(tab.idCliente = tab10.dependente)
                left join fisica tab1 on(tab.idcliente = tab1.idcliente)
                left join juridica tab2 on(tab.idcliente = tab2.idcliente)
                left join (select rural.idcliente,rural.cpf as cpf_1,rural.nome,rural.nascimento,rural.ie,rural.idsexo,rural.identidade,rural.idcivil,sexo.descricao as sexo1,civil.descricao as civil1 from rural
                inner join sexo on(rural.idsexo = sexo.idsexo)
                inner join civil on(rural.idcivil = civil.idcivil)) as tab3
        		on(tab.idcliente = tab3.idcliente)
                                where tab10.Cliente=find_cliente;
    when 14 then
    select tab10.dependente,
       case tab.idtipoPessoa when 1 then tab1.nome
                             when 2 then tab2.razao
                             when 3 then tab3.nome end Nome_Razao

        from cliente tab
                
                inner join dependente tab10 on(tab.idCliente = tab10.dependente)
                left join fisica tab1 on(tab.idcliente = tab1.idcliente)
                left join juridica tab2 on(tab.idcliente = tab2.idcliente)
                left join (select rural.idcliente,rural.cpf as cpf_1,rural.nome,rural.nascimento,rural.ie,rural.idsexo,rural.identidade,rural.idcivil,sexo.descricao as sexo1,civil.descricao as civil1 from rural
                inner join sexo on(rural.idsexo = sexo.idsexo)
                inner join civil on(rural.idcivil = civil.idcivil)) as tab3
        		on(tab.idcliente = tab3.idcliente)
                                where tab10.Cliente=find_cliente;


            when 15 then
select tab10.avalista,
       case tab.idtipoPessoa when 1 then tab1.nome
                             when 2 then tab2.razao
                             when 3 then tab3.nome end Nome_Razao

        from cliente tab
                
                inner join avalista tab10 on(tab.idCliente = tab10.avalista)
                left join fisica tab1 on(tab.idcliente = tab1.idcliente)
                left join juridica tab2 on(tab.idcliente = tab2.idcliente)
                left join (select rural.idcliente,rural.cpf as cpf_1,rural.nome,rural.nascimento,rural.ie,rural.idsexo,rural.identidade,rural.idcivil,sexo.descricao as sexo1,civil.descricao as civil1 from rural
                inner join sexo on(rural.idsexo = sexo.idsexo)
                inner join civil on(rural.idcivil = civil.idcivil)) as tab3
        		on(tab.idcliente = tab3.idcliente)
                                where tab10.Cliente=find_cliente;

    when 16 then
    select tab10.dependente,
       case tab.idtipoPessoa when 1 then tab1.nome
                             when 2 then tab2.razao
                             when 3 then tab3.nome end Nome_Razao

        from cliente tab
                
                inner join dependente tab10 on(tab.idCliente = tab10.dependente)
                left join fisica tab1 on(tab.idcliente = tab1.idcliente)
                left join juridica tab2 on(tab.idcliente = tab2.idcliente)
                left join (select rural.idcliente,rural.cpf as cpf_1,rural.nome,rural.nascimento,rural.ie,rural.idsexo,rural.identidade,rural.idcivil,sexo.descricao as sexo1,civil.descricao as civil1 from rural
                inner join sexo on(rural.idsexo = sexo.idsexo)
                inner join civil on(rural.idcivil = civil.idcivil)) as tab3
        		on(tab.idcliente = tab3.idcliente)
                                where tab10.Cliente=find_cliente and tab10.dependente=find_cliente;


            when 17 then
select tab10.avalista,
       case tab.idtipoPessoa when 1 then tab1.nome
                             when 2 then tab2.razao
                             when 3 then tab3.nome end Nome_Razao

        from cliente tab
                
                inner join avalista tab10 on(tab.idCliente = tab10.avalista)
                left join fisica tab1 on(tab.idcliente = tab1.idcliente)
                left join juridica tab2 on(tab.idcliente = tab2.idcliente)
                left join (select rural.idcliente,rural.cpf as cpf_1,rural.nome,rural.nascimento,rural.ie,rural.idsexo,rural.identidade,rural.idcivil,sexo.descricao as sexo1,civil.descricao as civil1 from rural
                inner join sexo on(rural.idsexo = sexo.idsexo)
                inner join civil on(rural.idcivil = civil.idcivil)) as tab3
        		on(tab.idcliente = tab3.idcliente)
                                where tab10.Cliente=find_cliente and tab10.avalista=find_cliente;

          when 18 then
select
	tab.idcliente as chave,
  case when tab.idTipoPessoa=1 Then  tab1.nome
  when tab.idTipoPessoa=2 Then  tab2.razao
  when tab.idTipoPessoa=3 Then  tab3.nome end,
	tab.idtipoPessoa,
	tab.idatividade,
  ifnull(tab6.idfone,0),
  ifnull(tab6.ddd,'0000'),
  ifnull(tab6.telefone,'00000000'),
  ifnull(mid(concat(tab6.ddd,tab6.telefone),3),'0000000000'),
    case tab.idtipoPessoa when 1 then tab1.cpf
                          when 2 then tab2.cnpj
                          when 3 then tab3.cpf_1 end CPF_CNPJ
from
	cliente tab
  inner join loja on(tab.idloja = loja.idloja)
	left join fisica tab1 on(tab.idcliente = tab1.idcliente)
	left join juridica tab2 on(tab.idcliente = tab2.idcliente)
	left join (select rural.idcliente,rural.cpf as cpf_1,rural.nome,rural.nascimento,rural.ie,rural.idsexo,rural.identidade,rural.idcivil,sexo.descricao as sexo1,civil.descricao as civil1 from rural
                inner join sexo on(rural.idsexo = sexo.idsexo)
                inner join civil on(rural.idcivil = civil.idcivil)) as tab3
        		on(tab.idcliente = tab3.idcliente)
	left join sexo tab4 on(tab1.idsexo = tab4.idsexo)
	left join civil tab5 on(tab1.idcivil = tab5.idcivil)
  left join fone tab6 on(tab.idCliente = tab6.idcliente and tab6.priori = (select priori from fone,cliente where fone.idcliente=cliente.idCliente and fone.priori='v' and fone.idCliente=tab.idCliente))
where
    (tab2.cnpj <> "" or
     tab1.cpf  <> "" or
     tab3.cpf_1 <> "") and tab.idcliente=find_cliente;

    else
select
	tab.idcliente as chave,
    case tab.idtipoPessoa when 1 then tab1.nome
                          when 2 then tab2.razao
                          when 3 then tab3.nome end Nome_Razao,
    tab.uf,
    case tab.idtipoPessoa when 1 then date_format(tab1.nascimento, '%d/%m/%Y')
                         when 2 then date_format(tab2.dataAbertura, '%d/%m/%Y')
                         when 3 then date_format(tab3.nascimento, '%d/%m/%Y') end Nascimento_Abertura,
    tab.status,
    case tab.idtipoPessoa when 1 then tab1.cpf
                          when 2 then tab2.cnpj
                          when 3 then tab3.cpf_1 end CPF_CNPJ,
    case tab.idtipoPessoa when 1 then tab1.identidade
                          when 2 then tab2.ie
                          when 3 then tab3.identidade end Ie_Identidade,
  date_format(tab.dataEmissao, '%d/%m/%Y') as Inclusao,
  tab.idloja as chave_loja,
	tab.idtipoPessoa,
  tp.descricao, tab.idAtividade


from
	cliente tab
  inner join tipoPessoa tp on(tab.idTipoPessoa = tp.idTipoPessoa)
  inner join loja on(tab.idloja = loja.idloja)
	left join fisica tab1 on(tab.idcliente = tab1.idcliente)
	left join juridica tab2 on(tab.idcliente = tab2.idcliente)
	left join (select rural.idcliente,rural.cpf as cpf_1,rural.nome,rural.nascimento,rural.ie,rural.idsexo,rural.identidade,rural.idcivil,sexo.descricao as sexo1,civil.descricao as civil1 from rural
                inner join sexo on(rural.idsexo = sexo.idsexo)
                inner join civil on(rural.idcivil = civil.idcivil)) as tab3
        		on(tab.idcliente = tab3.idcliente)
	left join sexo tab4 on(tab1.idsexo = tab4.idsexo)
	left join civil tab5 on(tab1.idcivil = tab5.idcivil)
where
    (
     tab2.cnpj is not null or
     tab1.cpf  is not null or
     tab3.cpf_1 is not null
    )  AND if(tipo_cliente = 'x', 1=1, tab.idtipoPessoa=tipo_cliente) and tab.idatividade in(find_atividade,5,6,7) order by 1;
end case;
END $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `conector_find_cliente_Old`
--

DROP PROCEDURE IF EXISTS `conector_find_cliente_Old`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='' */ $$
CREATE DEFINER=`master`@`localhost` PROCEDURE `conector_find_cliente_Old`(
                                            in tipo int,
                                            in find_cliente varchar(45),
                                            in tipo_cliente int,
                                            in find_atividade int
                                        )
BEGIN
case tipo
            when 0 then
select
	tab.idcliente as chave,
    case tab.idtipoPessoa when 1 then tab1.nome
                          when 2 then tab2.razao
                          when 3 then tab3.nome end Nome_Razao,
    tab.uf,
    case tab.idtipoPessoa when 1 then tab1.nascimento
                         when 2 then tab2.dataAbertura
                         when 3 then tab3.nascimento end Nascimento_Abertura,
    tab.status,
    case tab.idtipoPessoa when 1 then tab1.cpf
                          when 2 then tab2.cnpj
                          when 3 then tab3.cpf_1 end CPF_CNPJ,
    case tab.idtipoPessoa when 1 then tab1.identidade
                          when 2 then tab2.ie
                          when 3 then tab3.identidade end Ie_Identidade,
  tab.dataEmissao as Inclusao,
  tab.idloja as chave_loja,
	tab.idtipoPessoa,
  tp.descricao

from
	cliente tab
  inner join tipoPessoa tp on(tab.idTipoPessoa = tp.idTipoPessoa)
  inner join loja on(tab.idloja = loja.idloja)
	left join fisica tab1 on(tab.idcliente = tab1.idcliente)
	left join juridica tab2 on(tab.idcliente = tab2.idcliente)
	left join (select rural.idcliente,rural.cpf as cpf_1,rural.nome,rural.nascimento,rural.ie,rural.idsexo,rural.identidade,rural.idcivil,sexo.descricao as sexo1,civil.descricao as civil1 from rural
                inner join sexo on(rural.idsexo = sexo.idsexo)
                inner join civil on(rural.idcivil = civil.idcivil)) as tab3
        		on(tab.idcliente = tab3.idcliente)
	left join sexo tab4 on(tab1.idsexo = tab4.idsexo)
	left join civil tab5 on(tab1.idcivil = tab5.idcivil)
where
    (
     tab2.cnpj is not null or
     tab1.cpf  is not null or
     tab3.cpf_1 is not null
    );
            when 1 then
select
	tab.idcliente as chave,
  ifnull(tab1.nome,"") as nome_fisica,
	ifnull(tab2.razao,""),
  ifnull(tab3.nome,"") as nome_rural,
	ifnull(tab2.cnpj,""),
	ifnull(tab1.cpf,""),
	ifnull(tab1.identidade,""),
	ifnull(tab2.ie,""),
  ifnull(loja.razao,"") as empresa,
	ifnull(tab4.descricao,"") as sexo_fisica,
	ifnull(tab5.descricao,"") as civil_fisica,
  ifnull(tab1.nascimento,""),
  ifnull(tab2.dataAbertura,""),
	ifnull(tab2.fantasia,""),
  tab.uf,
  ifnull(tab3.cpf_1,""),
  ifnull(tab3.identidade,""),
  ifnull(tab3.nascimento,now()),
  ifnull(tab3.sexo1,""),
  ifnull(tab3.civil1,""),
	ifnull(tab2.idTipoFornecedor,0),
	tab.idloja as chave_loja,
	tab.idtipoPessoa,
	tab.idusuario,
	tab.idatividade,
	tab.observacao,
	tab.dataEmissao,
	tab.dataAlteracao,
	tab.idestado as chave_estado,
	ifnull(tab1.idsexo,0) as chave_sexo_fisica,
	ifnull(tab1.idcivil,0) as chave_sexo_civil,
	ifnull(tab3.ie,0),
  ifnull(tab3.idsexo,0),
  ifnull(tab3.idcivil,0),
  tab.status,
  tab.idspedMunicipio

from
	cliente tab
  inner join loja on(tab.idloja = loja.idloja)
	left join fisica tab1 on(tab.idcliente = tab1.idcliente)
	left join juridica tab2 on(tab.idcliente = tab2.idcliente)
	left join (select rural.idcliente,rural.cpf as cpf_1,rural.nome,rural.nascimento,rural.ie,rural.idsexo,rural.identidade,rural.idcivil,sexo.descricao as sexo1,civil.descricao as civil1 from rural
                inner join sexo on(rural.idsexo = sexo.idsexo)
                inner join civil on(rural.idcivil = civil.idcivil)) as tab3
        		on(tab.idcliente = tab3.idcliente)
	left join sexo tab4 on(tab1.idsexo = tab4.idsexo)
	left join civil tab5 on(tab1.idcivil = tab5.idcivil)
where
    (
     tab2.cnpj <> "" or
     tab1.cpf  <> "" or
     tab3.cpf_1 <> ""
    ) and tab.idcliente=find_cliente AND if(tipo_cliente = 'x', 1=1, tab.idtipoPessoa=tipo_cliente) and tab.idatividade in(find_atividade,7);

                when 2 then
select
	tab.idcliente as chave,
	tab1.nome as nome_fisica,
	tab2.razao,
  tab3.nome as nome_rural,
	tab2.cnpj,
	tab1.cpf,
	tab1.identidade,
	tab2.ie,
  loja.razao as empresa,
	tab4.descricao as sexo_fisica,
	tab5.descricao as civil_fisica,
  tab1.nascimento,
  tab2.dataAbertura,
	tab2.fantasia,
  tab.uf,
  tab3.cpf_1,
  tab3.identidade,
  tab3.nascimento,
  tab3.sexo1,
  tab3.civil1,
	tab2.idTipoFornecedor,
	tab.idloja as chave_loja,
	tab.idtipoPessoa,
	tab.idusuario,
	tab.idatividade,
	tab.observacao,
	tab.dataEmissao,
	tab.dataAlteracao,
	tab.idestado as chave_estado,
	tab1.idsexo as chave_sexo_fisica,
	tab1.idcivil as chave_sexo_civil,
	tab3.ie,
  tab3.idsexo,
  tab3.idcivil,
  tab.status,
  tab.idspedMunicipio

from
	cliente tab
  inner join loja on(tab.idloja = loja.idloja)
	left join fisica tab1 on(tab.idcliente = tab1.idcliente)
	left join juridica tab2 on(tab.idcliente = tab2.idcliente)
	left join (select rural.idcliente,rural.cpf as cpf_1,rural.nome,rural.nascimento,rural.ie,rural.idsexo,rural.identidade,rural.idcivil,sexo.descricao as sexo1,civil.descricao as civil1 from rural 
                inner join sexo on(rural.idsexo = sexo.idsexo)
                inner join civil on(rural.idcivil = civil.idcivil)) as tab3
        		on(tab.idcliente = tab3.idcliente)
	left join sexo tab4 on(tab1.idsexo = tab4.idsexo)
	left join civil tab5 on(tab1.idcivil = tab5.idcivil)
where
    (
     tab2.cnpj <> "" or
     tab1.cpf  <> "" or
     tab3.cpf_1 <> ""
    ) and tab1.nome like concat(find_cliente,'%') and tab.idtipoPessoa=tipo_cliente and  tab.idatividade in(find_atividade,7);

when 3 then

select
	tab.idcliente as chave,
	tab1.nome as nome_fisica,
	tab2.razao,
  tab3.nome as nome_rural,
	tab2.cnpj,
	tab1.cpf,
	tab1.identidade,
	tab2.ie,
  loja.razao as empresa,
	tab4.descricao as sexo_fisica,
	tab5.descricao as civil_fisica,
  tab1.nascimento,
  tab2.dataAbertura,
	tab2.fantasia,
  tab.uf,
  tab3.cpf_1,
  tab3.identidade,
  tab3.nascimento,
  tab3.sexo1,
  tab3.civil1,
	tab2.idTipoFornecedor,
	tab.idloja as chave_loja,
	tab.idtipoPessoa,
	tab.idusuario,
	tab.idatividade,
	tab.observacao,
	tab.dataEmissao,
	tab.dataAlteracao,
	tab.idestado as chave_estado,
	tab1.idsexo as chave_sexo_fisica,
	tab1.idcivil as chave_sexo_civil,
	tab3.ie,
  tab3.idsexo,
  tab3.idcivil,
  tab.status,
  tab.idspedMunicipio

from
	cliente tab
  inner join loja on(tab.idloja = loja.idloja)
	left join fisica tab1 on(tab.idcliente = tab1.idcliente)
	left join juridica tab2 on(tab.idcliente = tab2.idcliente)
	left join (select rural.idcliente,rural.cpf as cpf_1,rural.nome,rural.nascimento,rural.ie,rural.idsexo,rural.identidade,rural.idcivil,sexo.descricao as sexo1,civil.descricao as civil1 from rural
                inner join sexo on(rural.idsexo = sexo.idsexo)
                inner join civil on(rural.idcivil = civil.idcivil)) as tab3
        		on(tab.idcliente = tab3.idcliente)
	left join sexo tab4 on(tab1.idsexo = tab4.idsexo)
	left join civil tab5 on(tab1.idcivil = tab5.idcivil)
where
    (
     tab2.cnpj <> "" or
     tab1.cpf  <> "" or
     tab3.cpf_1 <> ""
    ) and tab2.razao like concat(find_cliente,'%') and tab.idtipoPessoa=tipo_cliente  and  tab.idatividade in(find_atividade,7);

when 4 then

select
	tab.idcliente as chave,
	tab1.nome as nome_fisica,
	tab2.razao,
  tab3.nome as nome_rural,
	tab2.cnpj,
	tab1.cpf,
	tab1.identidade,
	tab2.ie,
  loja.razao as empresa,
	tab4.descricao as sexo_fisica,
	tab5.descricao as civil_fisica,
  tab1.nascimento,
  tab2.dataAbertura,
	tab2.fantasia,
  tab.uf,
  tab3.cpf_1,
  tab3.identidade,
  tab3.nascimento,
  tab3.sexo1,
  tab3.civil1,
	tab2.idTipoFornecedor,
	tab.idloja as chave_loja,
	tab.idtipoPessoa,
	tab.idusuario,
	tab.idatividade,
	tab.observacao,
	tab.dataEmissao,
	tab.dataAlteracao,
	tab.idestado as chave_estado,
	tab1.idsexo as chave_sexo_fisica,
	tab1.idcivil as chave_sexo_civil,
	tab3.ie,
  tab3.idsexo,
  tab3.idcivil,
  tab.status,
  tab.idspedMunicipio

from
	cliente tab
  inner join loja on(tab.idloja = loja.idloja)
	left join fisica tab1 on(tab.idcliente = tab1.idcliente)
	left join juridica tab2 on(tab.idcliente = tab2.idcliente)
	left join (select rural.idcliente,rural.cpf as cpf_1,rural.nome,rural.nascimento,rural.ie,rural.idsexo,rural.identidade,rural.idcivil,sexo.descricao as sexo1,civil.descricao as civil1 from rural
                inner join sexo on(rural.idsexo = sexo.idsexo)
                inner join civil on(rural.idcivil = civil.idcivil)) as tab3
        		on(tab.idcliente = tab3.idcliente)
	left join sexo tab4 on(tab1.idsexo = tab4.idsexo)
	left join civil tab5 on(tab1.idcivil = tab5.idcivil)
where
    (
     tab2.cnpj <> "" or
     tab1.cpf  <> "" or
     tab3.cpf_1 <> ""
    ) and tab2.cnpj = find_cliente and tab.idtipoPessoa=tipo_cliente  and  tab.idatividade in(find_atividade,7);

when 5 then

select
	tab.idcliente as chave,
	tab1.nome as nome_fisica,
	tab2.razao,
  tab3.nome as nome_rural,
	tab2.cnpj,
	tab1.cpf,
	tab1.identidade,
	tab2.ie,
  loja.razao as empresa,
	tab4.descricao as sexo_fisica,
	tab5.descricao as civil_fisica,
  tab1.nascimento,
  tab2.dataAbertura,
	tab2.fantasia,
  tab.uf,
  tab3.cpf_1,
  tab3.identidade,
  tab3.nascimento,
  tab3.sexo1,
  tab3.civil1,
	tab2.idTipoFornecedor,
	tab.idloja as chave_loja,
	tab.idtipoPessoa,
	tab.idusuario,
	tab.idatividade,
	tab.observacao,
	tab.dataEmissao,
	tab.dataAlteracao,
	tab.idestado as chave_estado,
	tab1.idsexo as chave_sexo_fisica,
	tab1.idcivil as chave_sexo_civil,
	tab3.ie,
  tab3.idsexo,
  tab3.idcivil,
  tab.status,
  tab.idspedMunicipio

from
	cliente tab
  inner join loja on(tab.idloja = loja.idloja)
	left join fisica tab1 on(tab.idcliente = tab1.idcliente)
	left join juridica tab2 on(tab.idcliente = tab2.idcliente)
	left join (select rural.idcliente,rural.cpf as cpf_1,rural.nome,rural.nascimento,rural.ie,rural.idsexo,rural.identidade,rural.idcivil,sexo.descricao as sexo1,civil.descricao as civil1 from rural
                inner join sexo on(rural.idsexo = sexo.idsexo)
                inner join civil on(rural.idcivil = civil.idcivil)) as tab3
        		on(tab.idcliente = tab3.idcliente)
	left join sexo tab4 on(tab1.idsexo = tab4.idsexo)
	left join civil tab5 on(tab1.idcivil = tab5.idcivil)
where
    (
     tab2.cnpj <> "" or
     tab1.cpf  <> "" or
     tab3.cpf_1 <> ""
    ) and tab2.cpf = find_cliente and tab.idtipoPessoa=tipo_cliente  and  tab.idatividade in(find_atividade,7);


    when 6 then

select
	tab.idcliente as chave,
	tab1.nome as nome_fisica,
	tab2.razao,
  tab3.nome as nome_rural,
	tab2.cnpj,
	tab1.cpf,
	tab1.identidade,
	tab2.ie,
  loja.razao as empresa,
	tab4.descricao as sexo_fisica,
	tab5.descricao as civil_fisica,
  tab1.nascimento,
  tab2.dataAbertura,
	tab2.fantasia,
  tab.uf,
  tab3.cpf_1,
  tab3.identidade,
  tab3.nascimento,
  tab3.sexo1,
  tab3.civil1,
	tab2.idTipoFornecedor,
	tab.idloja as chave_loja,
	tab.idtipoPessoa,
	tab.idusuario,
	tab.idatividade,
	tab.observacao,
	tab.dataEmissao,
	tab.dataAlteracao,
	tab.idestado as chave_estado,
	tab1.idsexo as chave_sexo_fisica,
	tab1.idcivil as chave_sexo_civil,
	tab3.ie,
  tab3.idsexo,
  tab3.idcivil,
  tab.status,
  tab.idspedMunicipio

from
	cliente tab
  inner join loja on(tab.idloja = loja.idloja)
	left join fisica tab1 on(tab.idcliente = tab1.idcliente)
	left join juridica tab2 on(tab.idcliente = tab2.idcliente)
	left join (select rural.idcliente,rural.cpf as cpf_1,rural.nome,rural.nascimento,rural.ie,rural.idsexo,rural.identidade,rural.idcivil,sexo.descricao as sexo1,civil.descricao as civil1 from rural
                inner join sexo on(rural.idsexo = sexo.idsexo)
                inner join civil on(rural.idcivil = civil.idcivil)) as tab3
        		on(tab.idcliente = tab3.idcliente)
	left join sexo tab4 on(tab1.idsexo = tab4.idsexo)
	left join civil tab5 on(tab1.idcivil = tab5.idcivil)
where
    (
     tab2.cnpj <> "" or
     tab1.cpf  <> "" or
     tab3.cpf_1 <> ""
    ) and tab3.nome like concat(find_cliente,"%") and tab.idtipoPessoa=tipo_cliente and  tab.idatividade in(find_atividade,7);

    when 7 then

select
	tab.idcliente as chave,
	tab1.nome as nome_fisica,
	tab2.razao,
  tab3.nome as nome_rural,
	tab2.cnpj,
	tab1.cpf,
	tab1.identidade,
	tab2.ie,
  loja.razao as empresa,
	tab4.descricao as sexo_fisica,
	tab5.descricao as civil_fisica,
  tab1.nascimento,
  tab2.dataAbertura,
	tab2.fantasia,
  tab.uf,
  tab3.cpf_1,
  tab3.identidade,
  tab3.nascimento,
  tab3.sexo1,
  tab3.civil1,
	tab2.idTipoFornecedor,
	tab.idloja as chave_loja,
	tab.idtipoPessoa,
	tab.idusuario,
	tab.idatividade,
	tab.observacao,
	tab.dataEmissao,
	tab.dataAlteracao,
	tab.idestado as chave_estado,
	tab1.idsexo as chave_sexo_fisica,
	tab1.idcivil as chave_sexo_civil,
	tab3.ie,
  tab3.idsexo,
  tab3.idcivil,
  tab.status,
  tab.idspedMunicipio

from
	cliente tab
  inner join loja on(tab.idloja = loja.idloja)
	left join fisica tab1 on(tab.idcliente = tab1.idcliente)
	left join juridica tab2 on(tab.idcliente = tab2.idcliente)
	left join (select rural.idcliente,rural.cpf as cpf_1,rural.nome,rural.nascimento,rural.ie,rural.idsexo,rural.identidade,rural.idcivil,sexo.descricao as sexo1,civil.descricao as civil1 from rural
                inner join sexo on(rural.idsexo = sexo.idsexo)
                inner join civil on(rural.idcivil = civil.idcivil)) as tab3
        		on(tab.idcliente = tab3.idcliente)
	left join sexo tab4 on(tab1.idsexo = tab4.idsexo)
	left join civil tab5 on(tab1.idcivil = tab5.idcivil)
where
    (
     tab2.cnpj <> "" or
     tab1.cpf  <> "" or
     tab3.cpf_1 <> ""
    ) and tab3.cpf_1 = find_cpf and tab.idtipoPessoa=tipo_cliente  and  tab.idatividade in(find_atividade,7);

when 8 then 
  select
        idTipoPessoa
                  from cliente
                            where idCliente=find_cliente
                                                       into @a;

select
      tab.idCliente,
      case @a
     when 2 then
      tab1.Razao
     when 1 then
      tab2.nome
     when 3 then
      tab3.nome end as Nome,
      tab.status
          from

  cliente tab

  left join juridica tab1 on(tab.IdCliente = tab1.IdCliente)
  left join fisica tab2 on(tab.IdCliente = tab2.IdCliente)
   left join rural tab3 on(tab.IdCliente = tab3.IdCliente)
  where tab.idCliente=find_cliente;

  when 9 then

select
	tab.idcliente as chave,
	tab1.nome as nome_fisica,
	tab2.razao,
  tab3.nome as nome_rural,
	tab2.cnpj,
	tab1.cpf,
	tab1.identidade,
	tab2.ie,
  loja.razao as empresa,
	tab4.descricao as sexo_fisica,
	tab5.descricao as civil_fisica,
  tab1.nascimento,
  tab2.dataAbertura,
	tab2.fantasia,
  tab.uf,
  tab3.cpf_1,
  tab3.identidade,
  tab3.nascimento,
  tab3.sexo1,
  tab3.civil1,
	ifnull(tab2.idTipoFornecedor,0),
	tab.idloja as chave_loja,
	tab.idtipoPessoa,
	tab.idusuario,
	tab.idatividade,
	tab.observacao,
	tab.dataEmissao,
	tab.dataAlteracao,
	tab.idestado as chave_estado,
	tab1.idsexo as chave_sexo_fisica,
	tab1.idcivil as chave_sexo_civil,
	ifnull(tab3.ie,0),
  ifnull(tab3.idsexo,0),
  ifnull(tab3.idcivil,0),
  tab.status,
  tab.idspedMunicipio, tab.uf

from
	cliente tab
  inner join loja on(tab.idloja = loja.idloja)
	left join fisica tab1 on(tab.idcliente = tab1.idcliente)
	left join juridica tab2 on(tab.idcliente = tab2.idcliente)
	left join (select rural.idcliente,rural.cpf as cpf_1,rural.nome,rural.nascimento,rural.ie,rural.idsexo,rural.identidade,rural.idcivil,sexo.descricao as sexo1,civil.descricao as civil1 from rural
                inner join sexo on(rural.idsexo = sexo.idsexo)
                inner join civil on(rural.idcivil = civil.idcivil)) as tab3
        		on(tab.idcliente = tab3.idcliente)
	left join sexo tab4 on(tab1.idsexo = tab4.idsexo)
	left join civil tab5 on(tab1.idcivil = tab5.idcivil)
where
    (
     tab2.cnpj <> "" or
     tab1.cpf  <> "" or
     tab3.cpf_1 <> ""
    ) and tab2.cnpj=find_cliente AND tab.idtipoPessoa=tipo_cliente and tab.idatividade in(find_atividade,7);

when 11 then
select
	tab.idcliente as chave,
	tab1.nome as nome_fisica,
	tab2.razao,
  tab3.nome as nome_rural,
	tab2.cnpj,
	tab1.cpf,
	tab1.identidade,
	tab2.ie,
  loja.razao as empresa,
	tab4.descricao as sexo_fisica,
	tab5.descricao as civil_fisica,
  tab1.nascimento,
  tab2.dataAbertura,
	tab2.fantasia,
  tab.uf,
  tab3.cpf_1,
  tab3.identidade,
  tab3.nascimento,
  tab3.sexo1,
  tab3.civil1,
	ifnull(tab2.idTipoFornecedor,0),
	tab.idloja as chave_loja,
	tab.idtipoPessoa,
	tab.idusuario,
	tab.idatividade,
	tab.observacao,
	tab.dataEmissao,
	tab.dataAlteracao,
	tab.idestado as chave_estado,
	tab1.idsexo as chave_sexo_fisica,
	tab1.idcivil as chave_sexo_civil,
	ifnull(tab3.ie,0),
  ifnull(tab3.idsexo,0),
  ifnull(tab3.idcivil,0),
  tab.status,
  ifnull(tab7.`visita`, ""),
  ifnull(tab7.`analiseCompra`, ""),
  ifnull(tab7.`minVolume`, ""),
  ifnull(tab7.`valueBay`, ""),
  ifnull(tab7.`comprador`, ""),
  ifnull(tab7.`prazoEntrega`, ""),
  ifnull(tab7.`formaPgto`, ""),
  ifnull(tab7.`banco`, ""),
  ifnull(tab7.`agencia`, ""),
  ifnull(tab7.`contaCorrente`, ""),
  ifnull(tab6.`typeTroca`, ""),
  ifnull(tab6.`typeFrete`, ""),
  ifnull(tab6.`porcentagemFrete`, ""),
  ifnull(tab6.`lastVisita`, ""),
  ifnull(tab6.`nextVisita`, ""),
  ifnull(tab6.`devPagar`, ""),
  ifnull(tab6.`bloquearEntregaFiscal`, ""),
  ifnull(tab6.`representante`, ""),
  ifnull(tab6.`idoperacao`, ""),
  ifnull(tab6.`forceCompra`, ""),
  ifnull(tab6.`nameSugestao`, ""),
  ifnull(tab6.`passwdSugestao`, ""),
  ifnull(tab6.`observacao`, ""),
  ifnull(tab8.`idcliente`, ""),
  ifnull(tab8.`forceIcms`, ""),
  ifnull(tab8.`forcePis`, ""),
  ifnull(tab8.`forceCofins`, ""),
  ifnull(tab8.`descatadaSt`, ""),
  ifnull(tab8.`typeGrade`, ""),
  ifnull(tab6.idInformacao,""),
  ifnull(tab7.idComercial,""),
  ifnull(tab8.idFiscal,""),
  tab.idspedMunicipio,  ifnull(tab9.descricao,""),
  tab6.typeFornecedor
from
	cliente tab
  inner join loja on(tab.idloja = loja.idloja)
	left join fisica tab1 on(tab.idcliente = tab1.idcliente)
	left join juridica tab2 on(tab.idcliente = tab2.idcliente)
	left join (select rural.idcliente,rural.cpf as cpf_1,rural.nome,rural.nascimento,rural.ie,rural.idsexo,rural.identidade,rural.idcivil,sexo.descricao as sexo1,civil.descricao as civil1 from rural
                inner join sexo on(rural.idsexo = sexo.idsexo)
                inner join civil on(rural.idcivil = civil.idcivil)) as tab3
        		on(tab.idcliente = tab3.idcliente)
	left join sexo tab4 on(tab1.idsexo = tab4.idsexo)
	left join civil tab5 on(tab1.idcivil = tab5.idcivil)
  left join paramentro_fornecedor_informacao tab6 on(tab.idCliente = tab6.idCliente)
  left join paramentro_fornecedor_comercial tab7 on(tab.idCliente = tab7.idCliente)
  left join paramentro_fornecedor_fiscal tab8 on(tab.idCliente = tab8.idCliente)
  left join paramentro_faturamento tab9 on(tab6.idoperacao = tab9.idParamentro)
where
    (
     tab2.cnpj <> "" or
     tab1.cpf  <> "" or
     tab3.cpf_1 <> ""
    ) and tab.idcliente=find_cliente AND tab.idtipoPessoa=tipo_cliente and tab.idatividade in(find_atividade,7);

            when 12 then
select
	tab.idcliente as chave,
  case when tab.idTipoPessoa=1 Then  tab1.nome
  when tab.idTipoPessoa=2 Then  tab2.razao
  when tab.idTipoPessoa=3 Then  tab3.nome end,
	tab.idtipoPessoa,
	tab.idatividade,
  ifnull(tab6.idfone,0),
  ifnull(tab6.ddd,'0000'),
  ifnull(tab6.telefone,'00000000'),
  ifnull(mid(concat(tab6.ddd,tab6.telefone),3),'0000000000')
from
	cliente tab
  inner join loja on(tab.idloja = loja.idloja)
	left join fisica tab1 on(tab.idcliente = tab1.idcliente)
	left join juridica tab2 on(tab.idcliente = tab2.idcliente)
	left join (select rural.idcliente,rural.cpf as cpf_1,rural.nome,rural.nascimento,rural.ie,rural.idsexo,rural.identidade,rural.idcivil,sexo.descricao as sexo1,civil.descricao as civil1 from rural
                inner join sexo on(rural.idsexo = sexo.idsexo)
                inner join civil on(rural.idcivil = civil.idcivil)) as tab3
        		on(tab.idcliente = tab3.idcliente)
	left join sexo tab4 on(tab1.idsexo = tab4.idsexo)
	left join civil tab5 on(tab1.idcivil = tab5.idcivil)
  left join fone tab6 on(tab.idCliente = tab6.idcliente and tab6.priori = (select priori from fone,cliente where fone.idcliente=cliente.idCliente and fone.priori='v' and fone.idCliente=tab.idCliente))
where
    (tab2.cnpj <> "" or
     tab1.cpf  <> "" or
     tab3.cpf_1 <> "") and tab.idcliente=find_cliente AND tab.idtipoPessoa in(0,1,2,3) and tab.idatividade in(find_atividade,7);

        else

select
	tab.idcliente as chave,
	tab1.nome as nome_fisica,
	tab2.razao,
  tab3.nome as nome_rural,
	tab2.cnpj,
	tab1.cpf,
	tab1.identidade,
	tab2.ie,
  loja.razao as empresa,
	tab4.descricao as sexo_fisica,
	tab5.descricao as civil_fisica,
  tab1.nascimento,
  tab2.dataAbertura,
	tab2.fantasia,
  tab.uf,
  tab3.cpf_1,
  tab3.identidade,
  tab3.nascimento,
  tab3.sexo1,
  tab3.civil1,
	tab2.idTipoFornecedor,
	tab.idloja as chave_loja,
	tab.idtipoPessoa,
	tab.idusuario,
	tab.idatividade,
	tab.observacao,
	tab.dataEmissao,
	tab.dataAlteracao,
	tab.idestado as chave_estado,
	tab1.idsexo as chave_sexo_fisica,
	tab1.idcivil as chave_sexo_civil,
	tab3.ie,
  tab3.idsexo,
  tab3.idcivil,
  tab.status,
  tab.idspedMunicipio

from
	cliente tab
  inner join loja on(tab.idloja = loja.idloja)
	left join fisica tab1 on(tab.idcliente = tab1.idcliente)
	left join juridica tab2 on(tab.idcliente = tab2.idcliente)
	left join (select rural.idcliente,rural.cpf as cpf_1,rural.nome,rural.nascimento,rural.ie,rural.idsexo,rural.identidade,rural.idcivil,sexo.descricao as sexo1,civil.descricao as civil1 from rural
                inner join sexo on(rural.idsexo = sexo.idsexo)
                inner join civil on(rural.idcivil = civil.idcivil)) as tab3
        		on(tab.idcliente = tab3.idcliente)
	left join sexo tab4 on(tab1.idsexo = tab4.idsexo)
	left join civil tab5 on(tab1.idcivil = tab5.idcivil)
where
    (
     tab2.cnpj <> "" or
     tab1.cpf  <> "" or
     tab3.cpf_1 <> ""
    ) and  tab.idatividade in(find_atividade,7) and 1=1 and tab.idtipoPessoa = tipo_cliente ;
end case;
END $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `conector_find_codBarra`
--

DROP PROCEDURE IF EXISTS `conector_find_codBarra`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='' */ $$
CREATE DEFINER=`master`@`localhost` PROCEDURE `conector_find_codBarra`(
                                          in tipo integer,
                                          in find varchar(45)
                                       )
begin
case tipo
when 1 then
select
      barra,
      quantidade,
      unidade,
      typeEan,
      defaultVenda,
      defaultCompra,
      defaultTransferencia,
      unidadeMedida.idunidadeMedida
from produtoembalagem
inner join unidadeMedida on(produtoembalagem.idunidadeMedida = unidadeMedida.idunidadeMedida)
where idProduto = find;
when 2 then
select
      idProduto,
      barra,
      quantidade,
      unidade,
      typeEan,
      defaultVenda,
      defaultCompra,
      defaultTransferencia,
      status,
      unidadeMedida.idunidadeMedida,
      idprodutoEmbalagem
from produtoembalagem
inner join unidadeMedida on(produtoembalagem.idunidadeMedida = unidadeMedida.idunidadeMedida)
where barra=find;

when 3 then

select
      barra,
      quantidade,
      unidade,
      typeEan,
      defaultVenda,
      defaultCompra,
      defaultTransferencia,
      unidadeMedida.idunidadeMedida,
      idprodutoembalagem
from produtoembalagem
inner join unidadeMedida on(produtoembalagem.idunidadeMedida = unidadeMedida.idunidadeMedida)
where (idProduto=find or barra = find) and defaultCompra='s';

when 4 then

select
      barra,
      quantidade,
      unidade,
      typeEan,
      defaultVenda,
      defaultCompra,
      defaultTransferencia,
      unidadeMedida.idunidadeMedida,
      idprodutoembalagem
from produtoembalagem
inner join unidadeMedida on(produtoembalagem.idunidadeMedida = unidadeMedida.idunidadeMedida)
where (barra = find or idProduto=find) and defaultVenda='s';
end case;
end $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `conector_find_complementoCliente`
--

DROP PROCEDURE IF EXISTS `conector_find_complementoCliente`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='' */ $$
CREATE DEFINER=`master`@`localhost` PROCEDURE `conector_find_complementoCliente`(
                                                      in tipo integer,
                                                      in find varchar(45)
                                                 )
begin

case tipo
when 1 then
  SELECT
    idReferencia as codigo,
    empresaContato as Empresa,
    Contato,
    ddd,
    Fone,
    ramal,
    data,
    observacao,
    idTypeReferencia as tipo

   FROM
   clientereferencia
  where
    idCliente = find;
when 2 then
select tab.cep
        from endereco tab
        inner join clienteEntrega tab1 on( tab.idendereco=tab1.idendereco and
                                            tab.idcliente = tab1.idcliente and
                                            tab.sequencia =tab1.sequencia)
                                          where
                                            tab.sequencia = tipo and tab.idCliente=find  and tab1.default1=1 into @x;
select cepCity.nome,cepbairro.idestado from cepbairro inner join cepCity on(cepbairro.idcepCity = cepCity.idcepCity) inner join estado on(cepbairro.idestado=estado.idestado) where cepbairro.cep = @x into @a, @c;
set @b = (select ifnull(idspedMunicipio,0) as cod_municipio from spedmunicipio where municipio like concat(@a,"%")  and idEstado=@c);

select
       tab.cep,
       tab1.default1,
       tab.bairro,
       tab.logradouro,
       tab.numero,
       tab.municipio,
       tab.estado,
       tab.complemento,
       tab.idendereco,
       tab.idcepbairro,
       tab.idenderecoType,
       tab1.idClienteEntrega,
       tab1.sequencia,
       ifnull(round(@b),0) as cod_municipio
 from endereco tab
        inner join clienteEntrega tab1 on( tab.idendereco=tab1.idendereco and
                                            tab.idcliente = tab1.idcliente and
                                            tab.sequencia =tab1.sequencia)
where
        tab.sequencia = tipo and tab.idCliente=find
        order by 2 desc;
when 3 then
select
       tab.cep,
       tab1.default1,
       tab.bairro,
       tab.logradouro,
       tab.numero,
       tab.municipio,
       tab.estado,
       tab.complemento,
       tab.idendereco,
       tab.idcepbairro,
       tab.idenderecoType,
       tab1.idClienteCobranca,
       tab1.sequencia
 from endereco tab
        inner join clienteCobranca tab1 on( tab.idendereco=tab1.idendereco and
                                            tab.idcliente = tab1.idcliente and
                                            tab.sequencia =tab1.sequencia)
where
        tab.sequencia = tipo and tab.idCliente=find;
when 4 then
SELECT
    tab.idClienteProfissional as Codigo,
    tab.empresa,
    tab.default1,
    round(tab.SalarioDeclarado,2),
    round(tab.SalarioComprovado,2),
    tab3.descricao as Profissao,
    tab2.descricao as Escolaridade,
    tab3.idProfissao as Cod_Profissao,
    tab2.idEscolaridade as Cod_Escola,
    tab1.idendereco,
    tab1.cep,
    tab1.idcepbairro,
    tab1.bairro,
    tab1.logradouro,
    tab1.complemento,
    tab1.municipio,
    tab1.estado,tab1.numero
FROM
    clienteprofissional tab
    left join (select idcliente,sequencia,idendereco, cep,idcepbairro,bairro,logradouro,complemento,municipio,estado,numero from Endereco where idCliente=find and sequencia = 4) as
               tab1 on(tab.idCliente = tab1.idCliente and tab.idEndereco = tab1.idEndereco)
    inner join profissao tab3 on(tab.idProfissao = tab3.idProfissao)
    inner join escolaridade tab2 on(tab.idEscolaridade = tab2.idEscolaridade)
where
    tab.idCliente=find and tab1.idendereco is not null;
    when 5 then
select
                            tab.idClienteRisco,
                            tab.`idcliente`,
                            tab.`cooperado`,
                            tab.`convenio`,
                            tab1.razao,
                            tab.`pagador`,
                            round(tab.`limiteEstouro`,2),
                            round(tab.`limiteConvenio`,2),
                            tab.`noteCobrancaConvenio`,
                            tab.`typePrazo`,
                            tab.`diaEncerramento`,
                            tab.`diaFechamento`,
                            tab.`prazoDias`,
                            tab.`motivo`,
                            tab1.diasUteisEncerramento,
                            tab1.diasUteisRecebimento,
                            tab1.`taxaLivre`,
                            tab1.`bloqueado`
                                  from
                                      clienteRisco tab
                                      inner join convenio tab1 on(tab.convenio = tab1.idConvenio)

                                    where
                                          tab.idCliente=find;
    when 6 then
select
                            tab.idClienteRisco,
                            tab.`idcliente`,
                            tab.`preferencial`,
                            round(tab.`limiteCheque`,2),
                            tab.`onlyHourCheque`
                                  from
                                      clienteRisco tab
                                    where
                                          tab.idCliente=find;
  when 7 then
SELECT
    round(sum(tab.SalarioComprovado),2)
FROM
    clienteprofissional tab
    inner join profissao tab3 on(tab.idProfissao = tab3.idProfissao)
    inner join escolaridade tab2 on(tab.idEscolaridade = tab2.idEscolaridade)
where
    tab.idCliente=find;
  when 8 then
select filiacaoSPCSerasa from system into @bof;
if(@bof is null)then set @bof="X"; end if;
case @bof
    when 'C' then
    select 
            date_format(consulta, '%d/%m/%Y'),
            nomeRetorno,
            motivo,
            usuario.descricao,
            razaoStore,
            date_format(nascimento, '%d/%m/%Y'),
            parentesco,
            servico,
            instituicao,
            idfiliacao
                     from filiacao
                           inner join usuario on(filiacao.usuario = usuario.idusuario)
                                                                 where cliente = find;
    when 'B' then
    select tab.idIntegracaoSophusSPC as chave, 
           tab.messagem as Retorno, 
           tab.data, 
           tab.usuario,
           tab.servico 
                from integracaoSophusSPC tab
                inner join usuario on(tab.usuario = usuario.idusuario)
                                                where tab.idcliente = find;
    end case;
end case;
end $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `conector_find_complementoFiscal`
--

DROP PROCEDURE IF EXISTS `conector_find_complementoFiscal`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='' */ $$
CREATE DEFINER=`master`@`localhost` PROCEDURE `conector_find_complementoFiscal`(in tipo int, in find varchar(200))
begin

case tipo

when 1 then
select
      idCstIpi,codigo,Descricao,typeIpi
                                 from cstipi;
when 2 then
select
      idCstIpi,codigo,Descricao,typeIpi
                                 from cstipi
                                    where descricao=find;
when 3 then
select
      idCstIpi,codigo,Descricao,typeIpi
                                 from cstipi
                                    where codigo=find;
when 4 then
select
      idCstPis,codigo,Descricao
                              from cstPis;
when 5 then
select
      idCstPis,codigo,Descricao
                              from cstPis
                                   where descricao=find;
when 6 then
select
      idCstPis,codigo,Descricao
                              from cstPis
                                   where codigo=find;
when 7 then
select
      idCstCofins,codigo,Descricao
                              from cstCofins;
when 8 then
select
      idCstCofins,codigo,Descricao
                              from cstCofins
                                     where descricao=find;
when 9 then
select
      idCstCofins,codigo,Descricao
                              from cstCofins
                                     where codigo=find;
end case;
end $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `conector_find_compra`
--

DROP PROCEDURE IF EXISTS `conector_find_compra`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='' */ $$
CREATE DEFINER=`master`@`localhost` PROCEDURE `conector_find_compra`(
                                            in tipo int,
                                            in find varchar(45),
                                            in di date,
                                            in df date,
                                            in typeCompra int,
                                            in loja int,
                                            in cliente int
                                    )
begin
case tipo
    when 1 then
select tab3.razao,
       tab.idPedidoCompra,
       date_format(tab.data,'%d/%m/%Y') as Emissao,
       tab2.razao,
       truncate(tab.valorTotalLiquido,2),
       truncate(tab.valorTotal,2),
       date_format(tab.dataEntrega, '%d/%m/%Y'),
       tab.emitido,
       tab.entregue,
       tab.recebido,
       truncate(tab.valorPedente,2),
       truncate(tab.valorRecebido,2),
       tab4.nome as comprador,
       ifnull(tab5.nome,"Representante Teste") as representante,
       tab2.idCliente,
       tab4.idFuncionario
from
   `conector`.`pedidoCompra` tab
    inner join cliente tab1 on(tab.idClienteFornecedor = tab1.idCliente)
    inner join juridica tab2 on(tab.idClienteFornecedor = tab2.idCliente)
    inner join loja tab3 on(tab.idLoja = tab3.idLoja)
    inner join funcionario tab4 on(tab.idfuncionario = tab4.idfuncionario)
    left join representante tab5 on(tab.idRepresentante = tab.idRepresentante)
   where
    tab.status = typeCompra and
    (find = 0 or `idpedidoCompra` = find)  and
    tab4.idFuncao=2 and
    tab.data between di and df and
    (loja=0 or tab3.idLoja = loja ) and
    (cliente = 0 or tab1.idCliente = cliente) order by 2,3;
    when 2 then
select tab3.razao,
       tab.idPedidoCompra,
       date_format(tab.data,'%d/%m/%Y') as Emissao,
       tab2.razao,
       truncate(tab.valorTotalLiquido,2),
       truncate(tab.valorTotal,2),
       date_format(tab.dataEntrega,'%d/%m/%Y'),
       tab.emitido,
       tab.entregue,
       tab.recebido,
       truncate(tab.valorPedente,2),
       truncate(tab.valorRecebido,2),
       tab4.nome as comprador,
       ifnull(tab5.nome,"Representante Teste") as representante,
       tab2.idCliente,
       tab4.idFuncionario
from
   `conector`.`pedidoCompra` tab
    inner join cliente tab1 on(tab.idClienteFornecedor = tab1.idCliente)
    inner join juridica tab2 on(tab.idClienteFornecedor = tab2.idCliente)
    inner join loja tab3 on(tab.idLoja = tab3.idLoja)
    inner join funcionario tab4 on(tab.idfuncionario = tab4.idfuncionario)
    left join representante tab5 on(tab.idRepresentante = tab.idRepresentante)
   where
   tab.status = typeCompra and
    (find = 0 or `idpedidoCompra` = find)  and
    tab4.idFuncao=2 and
    (loja=0 or tab3.idLoja = loja) and
    (cliente = 0 or tab1.idCliente = cliente) order by 2,3;
  when 3 then
select
  tab.`idpedidoCompra`,
  tab.`idloja`,
  tab.`idClienteFornecedor`,
  tab.`data`,
  tab.`idfuncionario`,
  tab.`idusuario`,
  tab.`proximaVisita`,
  tab.`itens`,
  truncate(tab.`frete`,2),
  truncate(tab.`bonificacao`,2),
  truncate(tab.`financeiro`,2),
  truncate(tab.`totalSubstituicao`,2),
  truncate(tab.`vendo`,2),
  tab.`peso`,
  truncate(tab.`valorIcmsSubstituicao`,2),
  truncate(tab.`acrescimos`,2),
  truncate(tab.`desconto`,2),
  truncate(tab.`valorTotalProdutos`,2),
  truncate(tab.`valorTotalLiquido`,2),
  truncate(tab.`valorTotal`,2),
  truncate(tab.`valorPedente`,2),
  truncate(tab.`valorRecebido`,2),
  tab.`rede`,
  tab.`emitido`,
  tab.`entregue`,
  tab.`recebido`,
  tab.`somaFrete`,
  truncate(tab.`somaSubstituicao`,2),
  tab.`flagRecebimento`,
  tab.`flagAlteracao`,
  tab.`typeFrete`,
  tab.`idrepresentante`,
  tab.`idtransportadora`,
  tab.`seuPedido`,
  tab.`observacao`,
  tab.`volume`,
  tab.`dataEntrega`,
  tab.`confeccaoPrice`,
  tab.`status`,
  tab.`acceptBoni`,
  tab6.razao,
  truncate(tab.`porcentagemFrete`,2),
  truncate(tab.`porcentagemVendo`,2),
  truncate(tab.`porcentagemFinanceiro`,2),
  truncate(tab.`porcentagemDesconto`,2),
  truncate(tab.`porcentagemBonificacao`,2),
  tab.somaDiscount,
                    tab.somaBoni
from
   `conector`.`pedidoCompra` tab
    inner join cliente tab1 on(tab.idClienteFornecedor = tab1.idCliente)
    inner join juridica tab2 on(tab.idClienteFornecedor = tab2.idCliente)
    inner join loja tab3 on(tab.idLoja = tab3.idLoja)
    inner join funcionario tab4 on(tab.idfuncionario = tab4.idfuncionario)
    left join representante tab5 on(tab.idRepresentante = tab.idRepresentante)
    left join transportadora tab6 on(tab.idTransportadora = tab.idTransportadora)
where
    tab.idPedidoCompra = find order by 1;
when 5 then
select
       tab.idPedidoCompra as compra,
       tab.data as Emissao,
       tab3.razao,
       tab2.razao,
       tab.itens,
       truncate(tab.valorTotalLiquido,2),
       truncate(tab.valorTotal,2),
       tab4.nome as comprador,
       tab2.idCliente as CodFornecedor,
       case tab.typeFrete when 'c' then "CIF" when 'p' then "FOB" when 's' then "SEM FRETE" when 'o' then "OUTROS" END as Frete,
       case tab.saldo when "p" then "Elimina Saldo" when "m" then "Mantem Saldo" end as Tipo
from
   `conector`.`pedidoCompra` tab
    inner join cliente tab1 on(tab.idClienteFornecedor = tab1.idCliente)
    inner join juridica tab2 on(tab.idClienteFornecedor = tab2.idCliente)
    inner join loja tab3 on(tab.idLoja = tab3.idLoja)
    inner join funcionario tab4 on(tab.idfuncionario = tab4.idfuncionario)
    left join representante tab5 on(tab.idRepresentante = tab.idRepresentante)
   where
    (find = 0 or `idpedidoCompra` = find)  and
    tab4.idFuncao=2 and
    (loja=0 or tab3.idLoja = loja) and
    (cliente = 0 or tab1.idCliente = cliente) order by 1;

when 6 then
select
       tab.idPedidoCompra as compra,
       tab.data as Emissao,
       tab3.razao,
       tab2.razao,
       tab.itens,
       truncate(tab.valorTotalLiquido,2),
       truncate(tab.valorTotal,2),
       tab4.nome as comprador,
       tab2.idCliente as CodFornecedor,
       case tab.typeFrete when 'c' then "CIF" when 'p' then "FOB" when 's' then "SEM FRETE" when 'o' then "OUTROS" END as Frete,
       case tab.saldo when "p" then "Elimina Saldo" when "m" then "Mantem Saldo" end as Tipo
from
   `conector`.`pedidoCompra` tab
    inner join cliente tab1 on(tab.idClienteFornecedor = tab1.idCliente)
    inner join juridica tab2 on(tab.idClienteFornecedor = tab2.idCliente)
    inner join loja tab3 on(tab.idLoja = tab3.idLoja)
    inner join funcionario tab4 on(tab.idfuncionario = tab4.idfuncionario)
    left join representante tab5 on(tab.idRepresentante = tab.idRepresentante)
    inner join entradaCompra tab7 on(tab.idPedidoCompra = tab7.idPedidoCompra)
where
    tab7.idEntrada=find order by 1;
        when 7 then
select tab3.razao,
       tab.idPedidoCompra,
       date_format(tab.data,'%d/%m/%Y') as Emissao,
       tab2.razao,
       truncate(tab.valorTotalLiquido,2),
       truncate(tab.valorTotal,2),
       date_format(tab.dataEntrega,'%d/%m/%Y'),
       tab.emitido,
       tab.entregue,
       tab.recebido,
       truncate(tab.valorPedente,2),
       truncate(tab.valorRecebido,2),
       tab4.nome as comprador,
       ifnull(tab5.nome,"Representante Teste") as representante,
       tab2.idCliente,
       tab4.idFuncionario,
       tab.status
from
   `conector`.`pedidoCompra` tab
    inner join cliente tab1 on(tab.idClienteFornecedor = tab1.idCliente)
    inner join juridica tab2 on(tab.idClienteFornecedor = tab2.idCliente)
    inner join loja tab3 on(tab.idLoja = tab3.idLoja)
    inner join funcionario tab4 on(tab.idfuncionario = tab4.idfuncionario)
    left join representante tab5 on(tab.idRepresentante = tab.idRepresentante)
   where
   tab.status != 1 and 
    (find = 0 or `idpedidoCompra` = find)  and
    tab4.idFuncao=2 and
    (loja=0 or tab3.idLoja = loja) and
    (cliente = 0 or tab1.idCliente = cliente) order by 1;
end case;
end $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `conector_find_comprador`
--

DROP PROCEDURE IF EXISTS `conector_find_comprador`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='STRICT_TRANS_TABLES,STRICT_ALL_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,TRADITIONAL,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION' */ $$
CREATE DEFINER=`master`@`localhost` PROCEDURE `conector_find_comprador`(
                                               in tipo int(5),
                                               in find varchar(45)
                                          )
BEGIN
     case tipo
            when 1 then
                select 
                        idcomprador,nome
                from
                        comprador
                where 
                        (nome like concat(find,"%"));
            when 2 then
                select 
                        idcomprador,nome
                from 
                        comprador
                where 
               (find=0 or idcomprador=find);
            else
            select 
                        idcomprador,nome
            from 
                        comprador;
     end case;
END $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `conector_find_condicaoPgto`
--

DROP PROCEDURE IF EXISTS `conector_find_condicaoPgto`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='' */ $$
CREATE DEFINER=`master`@`localhost` PROCEDURE `conector_find_condicaoPgto`( in tipo integer, in find varchar(45))
begin

case tipo
  when 1 then
select
    tab.idCondicaoPgto as Codigo,
    tab.Descricao,
    tab1.descricao as Finalizadora,
    tab.status,
    tab.numeroParcelas,
  tab.`idfinalizadora`
from
    condicaoPgto tab
    inner join finalizadora tab1 on(tab.idFinalizadora = tab1.idFinalizadora) order by 1;
  when 2 then
select
    tab.idCondicaoPgto as Codigo,
    tab.Descricao,
    tab1.descricao as Finalizadora,
    tab.status,
    tab.numeroParcelas,
    tab.`idfinalizadora`
from
    condicaoPgto tab
    inner join finalizadora tab1 on(tab.idFinalizadora = tab1.idFinalizadora)
where  tab.descricao like concat('%',find,'%') order by 1;
  when 3 then
select
  tab.`idcondicaoPgto`,
  tab.`idfinalizadora`,
  tab.`descricao`,
  tab.`diasVencimento`,
  tab.`numeroParcelas`,
  tab.`status`,
  tab.`vezesIguais`,
  round(tab.`totalPorcentagem`,2),
  tab1.descricao as Finalizadora
from
    condicaoPgto tab
    inner join finalizadora tab1 on(tab.idFinalizadora = tab1.idFinalizadora)
 where tab.`idcondicaoPgto` = find order by 1;
end case;
end $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `conector_find_condicaopgtoparcela`
--

DROP PROCEDURE IF EXISTS `conector_find_condicaopgtoparcela`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='' */ $$
CREATE DEFINER=`master`@`localhost` PROCEDURE `conector_find_condicaopgtoparcela`(in tipo int, in find varchar(45))
begin
case tipo
  when 1 then
SELECT concat(tab1.idcondicaoPgtoParcela,' / ',tab.numeroParcelas) as Parcelamento,
       tab2.descricao,tab1.dias,round(tab1.porcentagem,2),tab1.participaLivro FROM condicaopgto tab
              inner join condicaopgtoparcela tab1 on(tab.idcondicaoPgto = tab1.idcondicaoPgto)
              inner join finalizadora tab2 on (tab1.idFinalizadora = tab2.idFinalizadora)
      where tab.idcondicaoPgto=find;
  end case;
end $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `conector_find_conectCard`
--

DROP PROCEDURE IF EXISTS `conector_find_conectCard`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='' */ $$
CREATE DEFINER=`master`@`localhost` PROCEDURE `conector_find_conectCard`(in tipo smallint, in find varchar(45))
begin
case tipo
    when 1 then
select 
        idConectCard,descricao,forceConect 
                                        from conectCard;
    when 2 then
select 
        idConectCard,descricao,forceConect 
                                        from conectCard
                                            where idConectCard=find;
    when 3 then
select 
        idConectCard,descricao,forceConect 
                                        from conectCard
                                            where descricao=find;
    when 4 then
select 
        idConectCard,descricao,forceConect 
                                        from conectCard
                                            where descricao like concat(find,'%');
end case;
end $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `conector_find_configucaoUser`
--

DROP PROCEDURE IF EXISTS `conector_find_configucaoUser`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='' */ $$
CREATE DEFINER=`master`@`localhost` PROCEDURE `conector_find_configucaoUser`(in tipo int, in find varchar(45))
begin
             case tipo
                when 1 then
             select 
                            tab1.`descricao` ,
                            tab1.`login`,
                            tab1.`passwd`,
                            tab1.`terminalVenda`,
                            tab1.`terminalConsulta`,
                            tab1.`terminalECF`,
                            tab1.`terminalAnaliseCredito`,
                            tab1.`terminalMataBurro`,
                            tab1.`status`,
                            tab1.`supervisor`,
                            tab1.`cadastro`,
                            tab2.`idconfiguracao`,
                            tab2.`idusuario`,
                            tab2.`administradoraCartao`,
                            tab2.`banco`,
                            tab2.`caixa`,
                            tab2.`cargo`,
                            tab2.`cep`,
                            tab2.`convenios`,
                            tab2.`codicaoPgto`,
                            tab2.`contaCorrente`,
                            tab2.`cliente`,
                            tab2.`escolaridade`,
                            tab2.`feriados`,
                            tab2.`finalizadoras`,
                            tab2.`fornecedor`,
                            tab2.`funcionario`,
                            tab2.`loja`,
                            tab2.`metodos`,
                            tab2.`profissao`,
                            tab2.`representante`,
                            tab2.`telefone`,
                            tab2.`terminal`,
                            tab2.`transportadora`,
                            tab2.`usuario`,
                            tab2.`veiculo`,
                            tab2.`produto`,
                            tab2.`setor`,
                            tab2.`grupo`,
                            tab2.`categoria`,
                            tab2.`compra`,
                            tab2.`maximo`,
                            tab2.`entrada`,
                            tab2.`precificacao`,
                            tab2.`transferencia`,
                            tab2.`movimentacaoEstoque`,
                            tab2.`saldoEstoque`,
                            tab2.`zeraEstoque`,
                            tab2.`operacaoEntrada`,
                            tab2.`tipoProduto`,
                            tab2.`trocaProduto`,
                            tab2.`contasReceber`,
                            tab2.`cartaoCredito`,
                            tab2.`cheque`,
                            tab2.`crediario`,
                            tab2.`devolucao`,
                            tab2.`caixaCadastro`,
                            tab2.`sitegra`,
                            tab2.`notaFiscal`,
                            tab2.`sped`,
                            tab2.`apuracaoImposto`,
                            tab2.`mapaResumo`,
                            tab2.`cfop`,
                            tab2.`aliquotaFiscal`,
                            tab2.`operacaoFaturamento`,
                            tab2.`controleReservas`,
                            tab2.`analiseCredito`,
                            tab2.`pdvSingle`,
                            tab2.`contasPagar`,
                            tab2.`trocaSenha`,
                            tab2.`liberacao`,
                            tab2.`cargas`,
                            tab2.`interfacePdv`,
                            tab2.`dre`,
                            tab2.`fluxoCaixa`,
                            tab2.`flashReserva`,
                            tab2.`flashVenda`,
                            tab2.`relatorios`,
                            tab2.`chequeDevolvido`,
                            tab2.`convenio`,
                            tab2.`log`,
                            tab2.`inclusao`,
                            tab2.`alteracao`,
                            tab2.`menuCadastro`,
                            tab2.`menuProduto`,
                            tab2.`menuFinanceiro`,
                            tab2.`menuFiscal`,
                            tab2.`menuFaturamento`,
                            tab2.`menuPagar`,
                            tab2.`menuUtilitario`,
                            tab2.`menuContabil`,
                            tab2.`menuVenda`,
                            tab2.`menuRelatorio`,
                            tab2.`inventario`,
                            tab2.`estoqueRede`,
                            tab2.`saldoCrediario`,
                            tab2.CrediarioContrato,
                            tab2.CrediarioResumoContabil,
                            tab2.CrediarioInadimplencia,
                            tab2.CrediarioConfiguracao,
                            tab2.menuBoletos,
                            tab2.tableFiscal, 
                            tab2.precoIndividual
				        from usuario tab1
				                inner join configuracao tab2 on(tab1.idUsuario = tab2.idUsuario)
										where
										  tab1.idUsuario = find;
                end case;
    end $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `conector_find_consultaProduto`
--

DROP PROCEDURE IF EXISTS `conector_find_consultaProduto`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='' */ $$
CREATE DEFINER=`master`@`localhost` PROCEDURE `conector_find_consultaProduto`(

                                                    in find_produto varchar(30),
                                                    in tipo smallint,
                                                    in store double
                                                )
begin
case tipo
    when 1 then
select
       loja.Abreviatura,
       
       tab4.barra as codigo,
       tab.Nome,
       tab3.unidade,
       SUM(tab1.quantidade),
       date_format(tab1.DataAlteracao, '%d/%m/%Y')

from produto tab
    inner join produtoEstoques tab1 on(tab.idProduto = tab1.idProduto)
    inner join produtoStore tab2 on(tab.idProduto = tab2.idProduto)
    inner join unidadeMedida tab3 on(tab.idUnidade = tab3.idUnidadeMedida)
    inner join produtoEmbalagem tab4 on(tab.idProduto = tab4.idProduto)
    inner join loja on(tab2.idLoja = loja.idloja)
    where 
           tab4.barra = find_produto and
           tab2.idLoja=tab1.idLoja and
          (store=0 or tab2.idLoja = store) and
          (store=0 or loja.idLoja = store) and
          (store=0 or tab1.idLoja = store) GROUP BY 1,2,3,4,6;
    
    when 2 then
    
    select
      ifnull(round(sum(tab1.quantidade),0),0.000),
      tab.nome
                                    from produto tab
                                        inner join produtoEstoques tab1 on(tab.idProduto = tab1.idProduto)
                                        inner join produtoEmbalagem tab2 on(tab.idProduto = tab2.idProduto)
                                                                    where tab2.barra=find_produto group by 2;
    
    end case;
end $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `conector_find_conta`
--

DROP PROCEDURE IF EXISTS `conector_find_conta`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='' */ $$
CREATE DEFINER=`master`@`localhost` PROCEDURE `conector_find_conta`( in tipo int, in find varchar(45))
begin
case tipo
    when 1 then
select idContaCorrente,
       razao from contaCorrente;
    when 2 then
select idContaCorrente,
       razao from contaCorrente
             where razao = find;
             end case;
end $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `conector_find_contaBancaria`
--

DROP PROCEDURE IF EXISTS `conector_find_contaBancaria`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='' */ $$
CREATE DEFINER=`master`@`localhost` PROCEDURE `conector_find_contaBancaria`(
         in tipo smallint,
        `find` VARCHAR(45), in find_loja integer)
begin
    case tipo
            when 1 then
                select
                    idConta, nome, truncate(limite,2), inativo, idLoja, titular
                                                    from conta where (find_loja=0 or idLoja=find_loja);

            when 2 then
                select
                    idConta, nome, truncate(limite,2), inativo, idLoja, titular
                                                    from conta
                                                            where idConta = find and (find_loja=0 or idLoja=find_loja);
            when 3 then
            select
                    idConta, nome, truncate(limite,2), inativo, idLoja, titular,
                    ifnull(messagemCobranca,"") as Msg, truncate(multa,2), truncate(tarifaCobranca,2), qttyDiasProtesto
                                                    from conta
                                                            where nome like concat(find,'%') and (find_loja=0 or idLoja=find_loja);
            when 4 then
                select
                        tab.`idConta`,
                        tab.`nome`,
                        tab.`idloja`,
                        tab1.razao,
                        tab.`banco`,
                        truncate(tab.`limite`,2),
                        ifnull(tab.`tipoConta`,""),
                        ifnull(tab.`titular`,""),
                        truncate(tab.`tarifaContrato`,2),
                        truncate(tab.`tarifaCustodia`,2),
                        truncate(tab.`tarifaDescontoCheque`,2),
                        truncate(tab.`taxaIOF`,2),
                        tab.`cedente`,
                        truncate(tab.`tarifaCobranca`,2),
                        tab.`diasCredito`,
                        tab.`permitiConciliarManual`,
                        ifnull(tab.`especieDoc`,""),
                        ifnull(tab.`convenio`,"0"),
                        tab.`inativo`,
                        tab.`tipoCobranca`,
                        tab.`codigoTipoConta`,
                        tab.`codDiasProtesto`,
                        tab.`qttyDiasProtesto`,
                        ifnull(tab.`numeroCheque`,""),
                        ifnull(tab.`dataFechamento`,"0"),
                        tab.`conta`,
                        tab.`carteira`,
                        tab2.nome,
                        ifnull(tab.`cidade`,""),
                        tab.`balanco`,
                        ifnull(tab.`compensacao`,""),
                        ifnull(truncate(tab.`multa`,2),"0.00"),
                        ifnull(tab.`agencia`,""),
                        ifnull(tab.`titleCarteiraBank`,""),
                        ifnull(tab3.nome,"Desconhecido"),
                        ifnull(tab.messagemCobranca,"")
                                                    from conta tab
                                                        inner join loja tab1 on(tab.idLoja = tab1.idLoja)
                                                        inner join carteira tab2 on(tab.carteira= tab2.idCarteira)
                                                        inner join banco tab3 on(tab.banco = tab3.idBanco)
                                                            where tab.idConta = find and (find_loja=0 or tab.idLoja=find_loja);
            when 5 then
          SELECT ifnull(messagemCobranca,"") as Msg, truncate(multa,2), truncate(tarifaCobranca,2), qttyDiasProtesto, truncate(multa,2) from conta
                                where idConta = find and idLoja=find_loja;
    end case;
  end $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `conector_find_contrato`
--

DROP PROCEDURE IF EXISTS `conector_find_contrato`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='' */ $$
CREATE DEFINER=`master`@`localhost` PROCEDURE `conector_find_contrato`(
                                          in tipo integer,
                                          in contrato varchar(45),
                                          in di date,
                                          in df date,
                                          in situacao char(1),
                                          in pessoa double,
                                          in store double,
                                          in intervalo int )
begin
case tipo
  when 1 then
select
distinct       tab.idCrediario as Contrato,
       case tab2.idTipoPessoa when 1 then tab3.nome
                              when 2 then tab5.razao
                              when 3 then tab4.nome end as Pessoa,
       date_format(tab.`emissao`, '%d/%m/%Y'),
       tab.batimento,
       tab1.Razao,
       tab.idMetodo,
       case tab.status when 0 then "ABERTO"
                       when 1 then "LIQUIDADO"
                       when 2 then "PERCA"
                       when 3 then "COBRADOR"
                       when 4 then "REVER"
                       when 5 then "CANCELADO"
                                  end situacao,

       round(tab.total,2) as liquido,
       round(tab.encargos,2) as Encargos,
       tab1.idLoja,
       tab2.idCliente,
       tab.IdFuncionario
        from crediario tab
             inner join loja tab1 on(tab.idLoja = tab1.idLoja)
             inner join cliente tab2 on(tab.idCliente = tab2.idCliente)
             left join fisica tab3 on(tab.idCliente = tab3.idCliente)
             left join rural tab4 on(tab.idCliente = tab4.idCliente)
             left join juridica tab5 on(tab.idCliente = tab5.idCliente)
             inner join parcela tab0 on(tab.idCrediario = tab0.idCrediario and tab.idLoja = tab0.idLoja)
             WHERE
                  (contrato=0 or tab.idCrediario=contrato) and

                  (situacao='6' or tab.status=situacao) and
                  (pessoa=0 or tab.idCliente=pessoa) and
                  (store=0 or tab.idLoja = store) and
                                                         if(intervalo=1, tab.emissao between di and df, 0=0) and
                                                         if(intervalo=2, tab0.vencimento between di and df, 0=0) and
                                                         if(intervalo=3, tab0.pagamento between di and df, 0=0);

    when 2 then
                            select
                                    tab.idCrediario,
                                    tab.`idloja`,
                                    tab1.Razao,
                                    tab.`idmetodo`,
                                    tab2.descricao,
                                    tab.`idcliente`,
                                    case tab4.idTipoPessoa when 1 then tab5.nome
                                                           when 2 then tab6.razao
                                                           when 3 then tab7.nome end as Descricao,
                                    tab.`idfuncionario`,
                                    tab3.nome,
                                    tab.`emissao`,
                                    round(tab.`valueEntry`,2) ,
                                    round(tab.`total`,2),
                                    round(tab.`encargos`,2),
                                    tab.`status`,
                                    tab.`observacao`,
                                    tab.`entrada`,
                                    round(tab.`tac`,2),
                                    round(tab.`cet`,2),
                                    round(tab.`taxa`,2),
                                    tab.pedido,
                                    tab.batimento,
                                    round((tab.`total` + tab.`encargos`),2) as TotalContrato,
                                    tab.parcelamento,
                                    ifnull(tab.idUsuarioLastAlt,"Desconhecido"),
                                    ifnull(tab.idUsuarioInc,"Desconhecido"),
                                    ifnull(tab.dateAlt,"")
                                                from crediario tab
                                                        inner join loja tab1 on(tab.idLoja = tab1.idLoja)
                                                        inner join metodo tab2 on(tab.idMetodo = tab2.idMetodo)
                                                        inner join funcionario tab3 on(tab.idFuncionario = tab3.idFuncionario)
                                                        inner join cliente tab4 on(tab.idCliente = tab4.idCliente)
                                                        left join fisica tab5 on(tab.idCliente = tab5.idCliente)
                                                        left join juridica tab6 on(tab.idCliente = tab6.idCliente)
                                                        left join rural tab7 on(tab.idCliente = tab7.idCliente)

                                                                                                            where
                                                                                                                    tab.idCrediario = contrato;


    when 3 then
    select
           nr_parcela,
           date_format(vencimento, '%d/%m/%Y'),
           observacao,
       CASE status when 0 then "ABERTO"
                   when 1 then "LIQUIDADO"
                   when 2 then "PARCIAL"
                   when 3 then "PERCA"
                   when 4 then "COBRADOR"
                   when 5 then "CANCELADO" end as test,
       round(valorFinanceiro,2),
       date_format(pagamento, '%d/%m/%Y'),
        idParcela,
        idLoja
       from parcela
           where idCrediario = contrato;
    when 4 then
    select
       tab.nr_parcela,
       date_format(tab.pagamento, '%d/%m/%Y') as pgto,
       tab4.rotina,
       round(tab1.valor,2),
       round(tab.valorFinanceiro,2),
       tab1.usuario,
       tab.idParcela,
       tab.idLoja,
       tab1.finalizadora
               from
                   parcela tab
                  inner join historicocrediario tab1 on(tab.idParcela = tab1.parcela_idParcela and
                                                        tab.idCrediario = tab1.parcela_idCrediario and
                                                        tab.nr_parcela = tab1.parcela_nr_parcela)
                  inner join usuario tab3 on(tab1.usuario = tab3.idUsuario)
                  inner join typeHistorico tab4 on(tab1.typeHistorico = tab4.typeHistorico)
                            where
                                 tab.idCrediario=contrato and tab.valorPago > 0 and tab.status in("1","2") and tab4.typeHistorico not in(12);

    when 5 then
    SELECT tab.nr_parcela as Parcela,
       date_format(tab.pagamento, '%d/%m/%Y') as Pagamento,
       tab.prazo as Atraso,
       tab4.rotina,
       round(tab.desconto,2),
       round(tab1.valor,2) "Valor Pago",
       tab1.motivo,
       tab2.descricao,
       tab3.login
              FROM PARCELA tab
                  inner join historicocrediario tab1 on(tab.idParcela = tab1.parcela_idParcela and
                                                        tab.idCrediario = tab1.parcela_idCrediario and
                                                        tab.nr_parcela = tab1.parcela_nr_parcela)
                  inner join finalizadora tab2 on(tab1.finalizadora = tab2.idFinalizadora)
                  inner join usuario tab3 on(tab1.usuario = tab3.idUsuario)
                  inner join typeHistorico tab4 on(tab1.typeHistorico = tab4.typeHistorico)
                                                                                      where tab.idCrediario=contrato and tab.status not in("0");
  when 6 then

select
    round((sum(tab.total)+sum(tab.encargos)),2)
        from crediario tab
             inner join loja tab1 on(tab.idLoja = tab1.idLoja)
             inner join cliente tab2 on(tab.idCliente = tab2.idCliente)
             left join fisica tab3 on(tab.idCliente = tab3.idCliente)
             left join rural tab4 on(tab.idCliente = tab4.idCliente)
             left join juridica tab5 on(tab.idCliente = tab5.idCliente)
             WHERE
                  (contrato=0 or tab.idCrediario=contrato) and
                  if(intervalo=0, tab.`emissao`>='1900-01-01', tab.`emissao` between  di and df) and
                  (situacao='x' or tab.status=situacao) and
                  (pessoa=0 or tab.idCliente=pessoa) and
                  (store=0 or tab.idLoja = store);


  when 7 then

    select 
       ifnull(if(intervalo=1 || intervalo=0,round(sum(ifnull(tab.valorFinanceiro,0)),2),if(intervalo=3,(select round(sum(total),2) from crediario where (store = 0 or tab1.idLoja = store) and emissao between di and df and (pessoa=0 or tab1.idCliente=pessoa)),round(sum(tab1.total)+sum(tab1.encargos),2))),0.00),
       round(ifnull(sum(tab.valorPago - tab.desconto),0),2) Recebido,
        round(ifnull((if(intervalo=3,(select round(sum(ifnull(total,0)),2) from crediario where emissao between di and df and (store = 0 or tab1.idLoja = store) and (pessoa=0 or tab1.idCliente=pessoa)),sum(tab.valorFinanceiro + tab.acrescimo))-
        sum(tab.valorPago - tab.desconto)),0),2) Aberto
    from parcela tab
            inner join crediario tab1 on(tab.idCrediario = tab1.idCrediario and tab.idLoja = tab1.idLoja)
       where tab1.status != 5 and
             (pessoa=0 or tab1.idCliente=pessoa) and
             (contrato=0 or tab1.idCrediario=contrato) and
             (store = 0 or tab1.idLoja = store)  and
             (situacao='6' or tab1.status=situacao) and
                                                         if(intervalo=1, tab1.emissao between di and df, 0=0) and
                                                         if(intervalo=2, tab.vencimento between di and df, 0=0) and
                                                         if(intervalo=3, tab.pagamento between di and df, 0=0);

end case;
end $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `conector_find_convenio`
--

DROP PROCEDURE IF EXISTS `conector_find_convenio`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='' */ $$
CREATE DEFINER=`master`@`localhost` PROCEDURE `conector_find_convenio`(in tipo int, in find varchar(45))
begin
case tipo
when 1 then 
select 
    idConvenio,
    `razao`,
    `abreviatura`,
    `cnpj`,
    `ie`,
    `abertura`,
    `limite`,
    `diaEncerramento`,
    `diasUteisEncerramento`,
    `diaRecebimento`,
    `diasUteisRecebimento`,
    `porcetagemEstouro`,
    `typePrazo`,
    `bloqueado`,
    `taxaLivre`,
    `dias`,
    `preFixado`,
    `idspedMunicipio`,
    `idcepbairro`,
    `cep`,
    `addressLogradouro`,
    `addressBairro`,
    `addressCity`,
   `addressComplemento`,
   `addressNumber`,
   uf,
   `status`
   from convenio where idConvenio=find;
   when 2 then
   select 
    idConvenio,
    `razao`,
    `cnpj`,
    `ie`,
    `status`,
    `porcetagemEstouro`,
    `addressCity`
   from convenio where idConvenio=find;
   when 3 then
   select
    idConvenio,
    `razao`,
    `cnpj`,
    `ie`,
    `status`,
    `porcetagemEstouro`,
    `addressCity`
   from convenio where razao like concat(find,'%');
   when 4 then
   select
    idConvenio,
    `razao`,
    `cnpj`,
    `ie`,
    `status`,
    `porcetagemEstouro`,
    `addressCity`
   from convenio;
  when 5 then
select
        tab1.idConvenio,
        tab.limiteConvenio,
        tab.limiteEstouro,
        if(tab.motivo is null, "NADA CONSTA", tab2.descricao) as Motivo
        from clienteRisco tab
               inner join convenio tab1 on(tab.convenio = tab1.idConvenio)
               inner join fatorLiberacao tab2 on((if(tab.motivo is null,1,tab.motivo)) = tab2.idFatorLiberacao)
                                                   where tab.idCliente = find;
   end case;
   end $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `conector_find_convenioMovimento`
--

DROP PROCEDURE IF EXISTS `conector_find_convenioMovimento`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='' */ $$
CREATE DEFINER=`master`@`localhost` PROCEDURE `conector_find_convenioMovimento`(in tipo int, in find varchar(300), in reserva double)
begin
case tipo
    when 1 then
select
                                   date_format(`emissao`, '%d/%m/%Y'),
                                  `parcela`,
                                  `prazo`,
                                   date_format(`vencimento`, '%d/%m/%Y'),
                                  round(`valor`,2),
                                  `empresa`,
                                  idMovimento
                                                from 
                                                     convenioMovimento
                                                                    where pedido=reserva;
        when 2 then
select
                                   date_format(`emissao`, '%d/%m/%Y'),
                                  `parcela`,
                                  `prazo`,
                                   date_format(`vencimento`, '%d/%m/%Y'),
                                  round(`valor`,2),
                                  `empresa`,
                                  idMovimento
                                                from 
                                                     convenioMovimento
                                                                        where idMovimento = find;
        when 3 then
select
        tab.idCliente,
        case idtipoPessoa when 1 then tab4.nome
                          when 2 then tab5.razao
                          when 3 then tab6.nome end,
        tab1.convenio,
        tab1.limiteConvenio,
        ifnull(tab3.descricao,"NADA CONSTA") as Motivo, 
        tab1.limiteEstouro
            from cliente tab
                inner join clienteRisco tab1 on(tab.idCliente = tab1.idCliente)
                inner join convenio tab2 on(tab1.convenio = tab2.idConvenio)
                left join typeLancamento tab3 on(tab1.motivo = tab3.idtypeLancamento)
                left join fisica tab4 on(tab.idCliente = tab4.idCliente)
                left join juridica tab5 on(tab.idCliente = tab5.razao)
                left join rural tab6 on(tab.idCliente = tab6.idCliente)
                                                                    where
                                                                            tab.idCliente=find;
        when 4 then
        select
            date_format(emissao, '%d/%m/%Y'),
            date_format(vencimento, '%d/%m/%Y'),
            valor,
            juros,
            (valor + juros) as total,
            idLoja
                    from
                        convenioMovimento
                                        where
                                            idMovimento in(find);
      when 5 then
select
        tab.idCaixa,
        tab.Descricao,
        if(tab1.aberto is null,tab.caixaAberto, tab1.aberto),
        tab.inativo,
        coalesce(tab1.data, date_format(now(),'%d/%m/%Y')),
        if(tab1.data is not null, 1, 0)
        from
                caixa tab
                      left join caixaRegistro tab1 on(tab1.caixa = tab.idCaixa)
                                                        where
                                                       tab.idCaixa=find and
                                                       if(tab1.data is not null,
                                                                           tab1.data = (select max(data) from caixaRegistro where caixaRegistro.caixa=find), 1=1);
end case;
end $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `conector_find_crediario`
--

DROP PROCEDURE IF EXISTS `conector_find_crediario`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='' */ $$
CREATE DEFINER=`master`@`localhost` PROCEDURE `conector_find_crediario`(in tipo int, in find_loja varchar(45), in find_contrato varchar(45))
begin
case tipo
    when 1 then
select 
       tab.idCrediario,
       tab.idLoja,
       tab.idMetodo,
       tab.idCliente,
       case tab1.idTipoPessoa when 1 then
                                    tab2.nome
                              when 2 then 
                                    tab3.razao
                              when 3 then
                                    tab4.nome end as Descricao,
        tab.idfuncionario,
        tab.total,
        tab.encargos,
        tab.valueEntry,
        tab.emissao,
        tab.entrada
        
                from conector.crediario tab
                     inner join cliente tab1 on(tab.idCliente = tab1.idCliente)
                     left join fisica tab2 on(tab.idCliente = tab2.idCliente)
                     left join juridica tab3 on(tab.idCliente = tab3.idCliente)
                     left join rural tab4 on(tab.idCliente = tab4.idCliente)
                                                    where 
                                                            tab.idCrediario = find_contrato and
                                                            tab.idLoja =find_loja;
    when 2 then
            select 
        "Altera", 
        nr_parcela, 
        prazo, 
        date_format(vencimento, '%d/%m/%Y'), 
        valorFinanceiro 
                    from parcela
                            where idCrediario=find_contrato;
    
    end case;
end $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `conector_find_cst`
--

DROP PROCEDURE IF EXISTS `conector_find_cst`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='' */ $$
CREATE DEFINER=`master`@`localhost` PROCEDURE `conector_find_cst`(in tipo integer, in find varchar(30))
begin
case tipo
    when 1 then
          select idcst,descricao, concat(idcst , " | " , descricao), calcRed from cst where idcst=find;
    when 2 then
          select idcst,descricao from cst;
    when 3 then
          select idcst,descricao from cst where descricao=find;
    when 4 then
          select idcst,descricao, concat(idcst , " | " , descricao) from cst;
end case;
end $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `conector_find_ecf`
--

DROP PROCEDURE IF EXISTS `conector_find_ecf`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='' */ $$
CREATE DEFINER=`master`@`localhost` PROCEDURE `conector_find_ecf`(find varchar(45), tipo double)
begin
case tipo
    when 1 then
    select tab.numeroSerie from conector.licenca_ecf tab
                inner join loja on(tab.cnpj = loja.cnpj)
                                    where loja.cnpj=find;
    when 2 then
    
        select tab.numeroSerie from conector.licenca_ecf tab
                inner join loja on(tab.cnpj = loja.cnpj)
                                    where tab.caixa=find;
    end case;
end $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `conector_find_email`
--

DROP PROCEDURE IF EXISTS `conector_find_email`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='' */ $$
CREATE DEFINER=`master`@`localhost` PROCEDURE `conector_find_email`(in tipo smallint, in find varchar(45), in at int, in chave double)
begin
case tipo
when 1 then
select
       tab4.mail,
       case tab.idtipoPessoa when 1 then tab1.nome
                             when 2 then tab2.razao
                             when 3 then tab3.nome end Nome_Razao,
       tab4.padrao,
       tab4.idEmail
        from cliente tab
           	left join fisica tab1 on(tab.idcliente = tab1.idcliente)
           	left join juridica tab2 on(tab.idcliente = tab2.idcliente)
           	left join (select rural.idcliente,rural.cpf as cpf_1,rural.nome,rural.nascimento,rural.ie,rural.idsexo,rural.identidade,rural.idcivil,sexo.descricao as sexo1,civil.descricao as civil1 from rural
                inner join sexo on(rural.idsexo = sexo.idsexo)
                inner join civil on(rural.idcivil = civil.idcivil)) as tab3
        	    	on(tab.idcliente = tab3.idcliente)
                inner join email tab4 on(tab.idCliente = tab4.idCliente)
                                               where  (tab1.nome like concat('%',find,'%') or tab2.razao like concat('%',find,'%') or  tab3.nome like concat('%',find,'%')) and tab4.idCliente=chave and tab.idAtividade=at;
when 2 then
select
       tab4.mail,
       case tab.idtipoPessoa when 1 then tab1.nome
                             when 2 then tab2.razao
                             when 3 then tab3.nome end Nome_Razao,
       tab4.padrao,
       tab4.idEmail
        from cliente tab
           	left join fisica tab1 on(tab.idcliente = tab1.idcliente)
           	left join juridica tab2 on(tab.idcliente = tab2.idcliente)
           	left join (select rural.idcliente,rural.cpf as cpf_1,rural.nome,rural.nascimento,rural.ie,rural.idsexo,rural.identidade,rural.idcivil,sexo.descricao as sexo1,civil.descricao as civil1 from rural
                inner join sexo on(rural.idsexo = sexo.idsexo)
                inner join civil on(rural.idcivil = civil.idcivil)) as tab3
        	    	on(tab.idcliente = tab3.idcliente)
                inner join email tab4 on(tab.idCliente = tab4.idCliente)
                                               where  tab4.mail like concat(find,'%')  and tab4.idCliente=chave and tab.idAtividade=at;
when 3 then
select
       tab4.mail,
       case tab.idtipoPessoa when 1 then tab1.nome
                             when 2 then tab2.razao
                             when 3 then tab3.nome end Nome_Razao,
       tab4.padrao,
       tab4.idEmail
        from cliente tab
           	left join fisica tab1 on(tab.idcliente = tab1.idcliente)
           	left join juridica tab2 on(tab.idcliente = tab2.idcliente)
           	left join (select rural.idcliente,rural.cpf as cpf_1,rural.nome,rural.nascimento,rural.ie,rural.idsexo,rural.identidade,rural.idcivil,sexo.descricao as sexo1,civil.descricao as civil1 from rural
                inner join sexo on(rural.idsexo = sexo.idsexo)
                inner join civil on(rural.idcivil = civil.idcivil)) as tab3
        	    	on(tab.idcliente = tab3.idcliente)
                inner join email tab4 on(tab.idCliente = tab4.idCliente)  where tab4.idCliente=chave and tab.idAtividade=at;
when 4 then
select
       tab4.mail,
       case tab.idtipoPessoa when 1 then tab1.nome
                             when 2 then tab2.razao
                             when 3 then tab3.nome end Nome_Razao,
       tab4.padrao,
       tab4.idEmail
        from cliente tab
           	left join fisica tab1 on(tab.idcliente = tab1.idcliente)
           	left join juridica tab2 on(tab.idcliente = tab2.idcliente)
           	left join (select rural.idcliente,rural.cpf as cpf_1,rural.nome,rural.nascimento,rural.ie,rural.idsexo,rural.identidade,rural.idcivil,sexo.descricao as sexo1,civil.descricao as civil1 from rural
                inner join sexo on(rural.idsexo = sexo.idsexo)
                inner join civil on(rural.idcivil = civil.idcivil)) as tab3
        	    	on(tab.idcliente = tab3.idcliente)
                inner join email tab4 on(tab.idCliente = tab4.idCliente) where tab4.idEmail=find;
end case;
end $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `conector_find_entrada`
--

DROP PROCEDURE IF EXISTS `conector_find_entrada`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='' */ $$
CREATE DEFINER=`master`@`localhost` PROCEDURE `conector_find_entrada`(
            in tipo integer,
            in findStatus char(1),
            in findId double,
            in findCliente integer,
            in findLoja integer,
            in findNota varchar(10),
            in findCfop varchar(6),
            in di date,
            in df date,
            in findOp int(11))
begin
            case tipo
            when 1 then
    select
        tab1.Razao,
        tab2.Descricao,
        tab.cfop,
        tab.nr_Nota,
        date_format(tab.entrada, '%d/%m/%Y'),
        date_format(tab.emissao, '%d/%m/%Y'),
        case tab.typeNota when "f" then tab5.razao
                          else tab4.Razao end as Nome_Razao,
        truncate(tab.valorTotalNota,2),
        truncate(tab.valorTotalCustoLiquido,2),
        truncate(tab.valorTotalProduto,2),
        truncate(tab.valorDesconto,2),
        tab.idCliente,
        tab.idLoja,
        tab.`idEntrada`


        from
         entrada tab
            inner join loja tab1 on(tab.idLoja = tab1.idLoja)
            inner join operacaoEntrada tab2 on(tab.idOperacao = tab2.idoperacao)
            inner join cliente tab3 on(tab.idCliente = tab3.idCliente)
            inner join juridica tab4 on(tab3.idCliente = tab4.idCliente)
            left join transportadora tab5 on(tab.idTransportadora = tab5.idTransportadora)

        where
            (tab.status = findStatus or findStatus = 6) and
            (tab.`idEntrada` = findId or findId = 0) and
            (tab1.idLoja = findLoja or findLoja=0) and
            (tab3.idCliente = findCliente or findCliente= 0) and
            (tab.cfop = findCfop or findCfop=0) and
            (tab.nr_Nota = findNota or findNota=0) and
            (tab.idOperacao = findOp or findOp=0) and
            tab.entrada between di and df;

            when 2 then

  select
        tab1.Razao,
        tab2.Descricao,
        tab.cfop,
        tab.nr_Nota,
        date_format(tab.entrada, '%d/%m/%Y'),
        date_format(tab.emissao, '%d/%m/%Y'),
        case tab.typeNota when "f" then tab5.razao
                          else tab4.Razao end as Nome_Razao,
        truncate(tab.valorTotalNota,2),
        truncate(tab.valorTotalCustoLiquido,2),
        truncate(tab.valorTotalProduto,2),
        truncate(tab.valorDesconto,2),
        tab.idCliente,
        tab.idLoja,
        tab.`idEntrada`

        from
         entrada tab
            inner join loja tab1 on(tab.idLoja = tab1.idLoja)
            inner join operacaoEntrada tab2 on(tab.idOperacao = tab2.idoperacao)
            inner join cliente tab3 on(tab.idCliente = tab3.idCliente)
            inner join juridica tab4 on(tab3.idCliente = tab4.idCliente)
            left join transportadora tab5 on(tab.idTransportadora = tab5.idTransportadora)

        where
            (tab.status = findStatus or findStatus = 6) and
            (tab.`idEntrada` = findId or findId = 0) and
            (tab1.idLoja = findLoja or findLoja=0) and
            (tab3.idCliente = findCliente or findCliente= 0) and
            (tab.cfop = findCfop or findCfop=0) and
            (tab.nr_Nota = findNota or findNota=0) and
            (tab.idOperacao = findOp or findOp=0);

    when 3 then

    select
     tab.`idloja`,
     tab.`idcliente`,
     tab.`cfop`,
     tab.`idOperacao`,
     tab.`idSituacaoFiscal`,
     tab.`idCodigoFiscal`,
     tab.`modNotaFiscal`,
     tab.`idUsuario`,
     date_format(tab.`emissao`, '%d/%m/%Y'),
     date_format(tab.entrada, '%d/%m/%Y'),
     tab.`alteracao`,
     tab.`idUsuarioAlteracao`,
     tab.`nr_nota`,
     tab.`serie`,
     tab.`typeNota`,
     ifnull(tab.`idCompra`,0) as compra,
     tab.`sumSt`,
     truncate(tab.`substituicao`,2),
     tab4.cnpj,
     truncate(tab.`bonificacao`,2),
     tab.`conhecimentoFrete`,
     tab.`idtransportadora`,
     tab.`sumFrete`,
     truncate(tab.`frete`,2),
     truncate(tab.`valorFrete`,2),
     truncate(tab.`icmsFrete`,2),
     truncate(tab.`vendo`,2),
     truncate(tab.`vendoValor`,2),
     tab.`incideFinanProduto`,
     truncate(tab.`financeiro`,2),
     truncate(tab.`financeiroValor`,2),
     truncate(tab.`baseCalculoIcms`,2),
     truncate(tab.`baseCalculoIpi`,2),
     truncate(tab.`valorIcmsSubstuicao`,2),
     truncate(tab.`baseCalculoSubstituicao`,2),
     truncate(tab.`totalProdutoSubstituicao`,2),
     truncate(tab.`valorPis`,2),
     truncate(tab.`valorCofins`,2),
     truncate(tab.`baseCofins`,2),
     truncate(tab.`basePis`,2),
     tab.`discountFinalNota`,
     truncate(tab.`valorDesconto`,2),
     truncate(tab.`porcetagemDesconto`,2),
     truncate(tab.`valorDespesasAcessorias`,2),
     truncate(tab.`porcentagemDespesasAcessorias`,2),
     tab.`typeFrete`,
     tab.`totalItens`,
     tab.`volume`,
     truncate(tab.`valorDivergenciaFinal`,2),
     truncate(tab.`valorTotalCompra`,2),
     truncate(tab.`valorTotalBonificacao`,2),
     truncate(tab.`valorTotalIpi`,2),
     truncate(tab.`valorTotalCustoLiquido`,2),
     truncate(tab.`valorTotalNota`,2),
     truncate(tab.`valorTotalProduto`,2),
     truncate(tab.`valorTotalVenda`,2),
     tab.`informacaoComplementares`,
     tab.`status`,
     tab5.descricao,
     ifnull(truncate(tab6.valorTotal,2),0) as totalCompra,
     truncate(tab.creditoIcms,2),
     tab3.uf,
     ifnull(tab7.cnpj,""),
     ifnull(tab7.razao,""),
     tab8.descricao, ifnull(tab.idCompra,0)

        from
         entrada tab
            inner join loja tab1 on(tab.idLoja = tab1.idLoja)
            inner join operacaoEntrada tab2 on(tab.idOperacao = tab2.idoperacao)
            inner join cliente tab3 on(tab.idCliente = tab3.idCliente)
            inner join juridica tab4 on(tab3.idCliente = tab4.idCliente)
            inner join situacaoFiscal tab5 on(tab.idSituacaoFiscal = tab5.idSituacaoFiscal)
            left join pedidoCompra tab6 on(tab.idCompra = tab6.idPedidoCompra)
            left join transportadora tab7 on(tab.idTransportadora = tab7.idTransportadora)
            inner join table_codigo tab8 on(tab.idCodigoFiscal = tab8.idTable_codigo and tab.modNotaFiscal = tab8.codigo)

        where
            (tab.status = findStatus or findStatus = 6) and
            (tab.`idEntrada` = findId or findId = 0) and
            (tab1.idLoja = findLoja or findLoja=0) and
            (tab3.idCliente = findCliente or findCliente= 0) and
            (tab.cfop = findCfop or findCfop=0) and
            (tab.nr_Nota = findNota or findNota=0) and  (tab.idOperacao = findOp or findOp=0);


      when 4 then

      select
       idEntrada as chave,
       nr_nota,
       Serie,
       cfop,
       entrada.idCliente as Fornecedor,
       juridica.razao,
       emissao,
       truncate(valorTotalNota,2)
                  from
                     entrada
                          inner join juridica on(entrada.idCliente=juridica.idCliente)
                                 where
                                       nr_nota=findNota and serie = findCfop and
                                       entrada.idLoja = findLoja;

        end case;
  end $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `conector_find_entradaCompra`
--

DROP PROCEDURE IF EXISTS `conector_find_entradaCompra`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='' */ $$
CREATE DEFINER=`master`@`localhost` PROCEDURE `conector_find_entradaCompra`(
                                            in tipo int,
                                            in find varchar(45),
                                            in di date,
                                            in df date,
                                            in typeCompra int,
                                            in loja int,
                                            in cliente double,
                                            in findEntrada double
                                    )
begin
case tipo

  when 5 then 
select
       tab.idPedidoCompra as compra,
       DATE_FORMAT(tab.data,'%d/%m/%Y') as Emissao,
       tab3.razao,
       tab2.razao,
       tab.itens,
       truncate(tab.valorTotalLiquido,2),
       truncate(tab.valorTotal,2),
       tab4.nome as comprador,
       tab2.idCliente as CodFornecedor,
       case tab.typeFrete when 'c' then "CIF" when 'p' then "FOB" when 's' then "SEM FRETE" when 'o' then "OUTROS" END as Frete,
       case tab.saldo when "p" then "Elimina Saldo" when "m" then "Mantem Saldo" end as Tipo
from
   `conector`.`pedidoCompra` tab
    inner join cliente tab1 on(tab.idClienteFornecedor = tab1.idCliente)
    inner join juridica tab2 on(tab.idClienteFornecedor = tab2.idCliente)
    inner join loja tab3 on(tab.idLoja = tab3.idLoja)
    inner join funcionario tab4 on(tab.idfuncionario = tab4.idfuncionario)
    left join representante tab5 on(tab.idRepresentante = tab.idRepresentante)
   where
    (tab.`idpedidoCompra` = find or find = 0)  and
    tab4.idFuncao=2 and
    (tab3.idLoja = loja or loja=0) and
    (tab1.idCliente = cliente or cliente = 0);

when 6 then 
select
       tab.idPedidoCompra as compra,
       date_format(tab.data,'%d/%m/%Y') as Emissao,
       tab3.razao,
       tab2.razao,
       tab.itens,
       truncate(tab.valorTotalLiquido,2),
       truncate(tab.valorTotal,2),
       tab4.nome as comprador,
       tab2.idCliente as CodFornecedor,
       case tab.typeFrete when 'c' then "CIF" when 'p' then "FOB" when 's' then "SEM FRETE" when 'o' then "OUTROS" END as Frete,
       case tab.saldo when "p" then "Elimina Saldo" when "m" then "Mantem Saldo" end as Tipo
from
   `conector`.`pedidoCompra` tab
    inner join cliente tab1 on(tab.idClienteFornecedor = tab1.idCliente)
    inner join juridica tab2 on(tab.idClienteFornecedor = tab2.idCliente)
    inner join loja tab3 on(tab.idLoja = tab3.idLoja)
    inner join funcionario tab4 on(tab.idfuncionario = tab4.idfuncionario)
    left join representante tab5 on(tab.idRepresentante = tab.idRepresentante)
    inner join entradaCompra tab7 on(tab.idPedidoCompra = tab7.idPedidoCompra)
where
    tab7.idEntrada=findEntrada and     (tab.`idpedidoCompra` = find or find = 0);
end case;
end $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `conector_find_entradaConhecimento`
--

DROP PROCEDURE IF EXISTS `conector_find_entradaConhecimento`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='' */ $$
CREATE DEFINER=`master`@`localhost` PROCEDURE `conector_find_entradaConhecimento`(
   tipo smallint,
  `findChaveEntrada` DOUBLE,
  `findChaveConhecimento` DOUBLE
  )
begin
  case tipo
    when 1 then
    select tab.nr_nota_fiscal,
            tab.serie,
            tab.cpf_cnpj,
            tab1.razao,
            truncate(tab.valor,2),
            truncate(tab.rateio,2)
            from entradaConhecimento tab
                inner join juridica tab1 on(tab.cpf_cnpj = tab1.cnpj)
                inner join cliente tab2 on(tab1.idCliente = tab2.idCliente)
                                where
                                    idEntradaConhecimento=`findChaveConhecimento` and
                                    chaveEntrada=`findChaveEntrada`;                
    when 2 then
    select tab.nr_nota_fiscal,
            tab.serie,
            tab.cpf_cnpj,
            tab1.razao,
            truncate(tab.valor,2),
            truncate(tab.rateio,2)
            from entradaConhecimento tab
                inner join juridica tab1 on(tab.cpf_cnpj = tab1.cnpj)
                inner join cliente tab2 on(tab1.idCliente = tab2.idCliente)
                                where
                                    chaveEntrada=`findChaveEntrada`;                
    end case;
  end $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `conector_find_entradaFinanceiro`
--

DROP PROCEDURE IF EXISTS `conector_find_entradaFinanceiro`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='' */ $$
CREATE DEFINER=`master`@`localhost` PROCEDURE `conector_find_entradaFinanceiro`( in tipo integer, in find varchar(45))
begin
case tipo
    when 1 then
select 
    date_format(`emissaoDocumento`, '%d/%m/%Y') as DataDocumento,
    `prazo`,
    date_format(`vencimento`, '%d/%m/%Y') as DataVencimento,
    `documento`,
    `parcela`,
    truncate(`valor`,2),
    date_format(`competencia`, '%d/%m/%Y') AS DataCompetencia,
     identradaFinanceiro
     
        from 

            entradaFinanceiro
            
            where idEntrada=find order by 8;
            
            when 2 then 
select 
   tab.`identrada`,
   tab.`idfinalizadora`,
   tab.`documento`,
   tab.`prazo`,
   tab.`vencimento` ,
   date_format(tab.`competencia`, '%d/%m/%Y') AS DataCompetencia,
   date_format(tab.`emissaoDocumento`, '%d/%m/%Y') AS emissaoDoc,
   truncate(tab.`desconto`,2),
   truncate(tab.`financeiro`,2),
   truncate(tab.`valor`,2),
   tab.`parcela`,
   tab.`idbanco`,
   tab.`nossoNumero`,
   tab.`cedente`, 
   tab.formaPgto,  
        case formaPgto 
                when '00' then 
                    '00 | Banco' 
                when '01' then 
                    '01 | Caixa' 
                        end ComboFormaPgto,
   tab2.nome,
   tab3.descricao
     
        from 
        
            entradaFinanceiro tab
            inner join banco tab2 on(tab.idBanco = tab2.idBanco)
            inner join finalizadora tab3 on(tab.`idfinalizadora` = tab3.`idfinalizadora`)
            where tab.idEntradaFinanceiro=find;
    end case;
    end $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `conector_find_entradaImp`
--

DROP PROCEDURE IF EXISTS `conector_find_entradaImp`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='' */ $$
CREATE DEFINER=`master`@`localhost` PROCEDURE `conector_find_entradaImp`(
                                            in tipo integer,
                                            in id varchar(45),
                                            in find varchar(45))
begin
case tipo
  when 1 then
    select
      cfop,
      cst,
      truncate((aliquota),2),
      truncate(sum(reducao),2),
      truncate(sum(valorApurado),2),
      truncate(sum(impostoApurado),2),
      truncate(sum(valorInformado),2),
      truncate(sum(impostoInformado),2),
      truncate(sum(baseIsentoApurado),2),
      truncate(sum(baseIsentoInformado),2),
      0,
      0,
      idEntradaImp as chave,
      entradaImp.Tipo
    from entradaImp
  where entradaImp.identrada=id  group by 1,2,3,14;
  when 2 then
    select
      cfop,
      cst,
      truncate(aliquota,2),
      truncate(reducao,2),
      truncate(valorApurado,2),
      truncate(impostoApurado,2),
      truncate(valorInformado,2),
      truncate(impostoInformado,2),
      truncate(baseIsentoApurado,2),
      truncate(baseIsentoInformado,2),
      0,
      0,
      idEntradaImp as chave,
      entradaImp.Tipo
      from entradaImp
    where entradaImp.identrada=id and entradaImp.idEntradaImp = find;
  end case;
end $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `conector_find_entrega`
--

DROP PROCEDURE IF EXISTS `conector_find_entrega`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='' */ $$
CREATE DEFINER=`root`@`%` PROCEDURE `conector_find_entrega`(
                                                      in find varchar(45)
                                                 )
begin
set @aw=(select min(idenderecoType) from endereco where idcliente=find);

if((select count(*) as total from conector.clienteEntrega where idcliente=find) > 0) then
select tab.cep
        from endereco tab
        inner join clienteEntrega tab1 on( tab.idendereco=tab1.idendereco and
                                            tab.idcliente = tab1.idcliente and
                                            tab.sequencia =tab1.sequencia)
                                          where
                                            tab.sequencia = 2 and tab.idCliente=find  and tab1.default1=1 into @x;
select cepCity.nome,cepbairro.idestado from cepbairro inner join cepCity on(cepbairro.idcepCity = cepCity.idcepCity) inner join estado on(cepbairro.idestado=estado.idestado) where cepbairro.cep = @x into @a, @c;
set @b = (select ifnull(idspedMunicipio,0) as cod_municipio from spedmunicipio where municipio like concat(@a,"%")  and idEstado=@c);

select
       tab.logradouro,
       tab.numero,
       tab.complemento,
       tab.bairro,
       ifnull(round(@b),0) as cod_municipio,
       tab.municipio,
       tab.estado,
       tab.idendereco
 from endereco tab
        inner join clienteEntrega tab1 on( tab.idendereco=tab1.idendereco and
                                            tab.idcliente = tab1.idcliente and
                                            tab.sequencia =tab1.sequencia)
where
        tab.sequencia = 2 and tab.idCliente=find and tab1.default1=1
        order by 2 desc;
else if (select count(*) as total from conector.endereco where idcliente=find)>0 then

select
        endereco.logradouro,
        endereco.numero,
        endereco.complemento,
        endereco.bairro,
        cliente.idspedMunicipio,
        endereco.municipio,
        endereco.estado, endereco.idEndereco
from endereco
  inner join cliente on(endereco.idcliente = cliente.idcliente)
  inner join estado tab on(endereco.estado = tab.uf)
    where cliente.idcliente=find and endereco.sequencia=1;

else

select
        endereco.logradouro,
        endereco.numero,
        endereco.complemento,
        endereco.bairro,
        cliente.idspedMunicipio,
        endereco.municipio,
        endereco.estado, endereco.idEndereco
        from endereco
inner join cliente on(endereco.idcliente = cliente.idcliente)
  inner join estado tab on(endereco.estado = tab.uf)
where cliente.idcliente=find and endereco.idenderecoType=@a;
    end if;
end if;
end $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `conector_find_escolaridade`
--

DROP PROCEDURE IF EXISTS `conector_find_escolaridade`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='' */ $$
CREATE DEFINER=`master`@`localhost` PROCEDURE `conector_find_escolaridade`(
                                                in tipo integer,
                                                in find varchar(45)
                                           )
begin
case tipo
    when 1 then
select 
        idEscolaridade,
        descricao,
        status
from 
        escolaridade
where
        idEscolaridade = find;
        when 2 then
        select 
        idEscolaridade,
        descricao,
        status
from 
        escolaridade
where
        descricao like concat("%",find,"%");
        else
        select 
        idEscolaridade,
        descricao,
        status
from 
        escolaridade;
        end case;
end $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `conector_find_estado`
--

DROP PROCEDURE IF EXISTS `conector_find_estado`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='' */ $$
CREATE DEFINER=`master`@`localhost` PROCEDURE `conector_find_estado`(in tipo int(5), in find varchar(45))
BEGIN
       case tipo
            when 1 then
              SELECT
                    idestado,nome,uf
              FROM
                    estado
              where
                    1=1
              order by 2;
            when 2 then
              SELECT
                    idestado,nome,uf
              FROM
                    estado
              where
                    uf=find;
     end case;
END $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `conector_find_estadoCivil`
--

DROP PROCEDURE IF EXISTS `conector_find_estadoCivil`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='STRICT_TRANS_TABLES,STRICT_ALL_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,TRADITIONAL,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION' */ $$
CREATE DEFINER=`master`@`localhost` PROCEDURE `conector_find_estadoCivil`(in tipo int(5), in find varchar(45))
BEGIN
       case tipo
            when 1 then
              SELECT
                    idcivil,descricao
              FROM
                   civil
              where
                    1=1;
            when 2 then
              SELECT
                    idcivil,descricao
              FROM
                  civil
              where
                    descricao=find;
     end case;
END $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `conector_find_extrato`
--

DROP PROCEDURE IF EXISTS `conector_find_extrato`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='' */ $$
CREATE DEFINER=`master`@`localhost` PROCEDURE `conector_find_extrato`( in tipo integer,
                                        in escolha integer,
                                        in di date,
                                        in df date,
                                        in conciliacao char(1),
                                        in conta integer,
                                        in chave double,
                                        in VarValor decimal(15,3),
                                        in VarLancamento varchar(10))
begin
case tipo
  when 1 then 
select
        tab.idLoja,
        date_format(tab.emissao,'%d/%m/%Y'),
        date_format(tab.vencimento,'%d/%m/%Y'),
        tab.historico,
        tab.tipo,
        coalesce(tab.lancamento,""),
        round(tab.valor,2),
        round(tab1.Saldo,2),
        tab.confirma,
        tab.idContaCorrente,
        coalesce(tab.tipoOrigem,"") as TipoOrigem,
        tab.chavePagar
          from
                contaCorrente tab
                inner join contaSaldo tab1 on(tab.idContaCorrente = tab1.codigo)
                            where
                              if(escolha=1, tab.emissao between di and df, 0=0) and
                              if(escolha=2, tab.vencimento between di and df, 0=0) and
                              if(escolhaC=3, tab.dataConfirma between di and df, 0=0) and
                              (conciliacao="t" or tab.confirma = conciliacao) and
                              (conta = 0 or tab.codigo = conta);
  when 2 then
select
  "Credito",
  round(sum(tab.valor),2)
          from
                contaCorrente tab
                inner join contaSaldo tab1 on(tab.idContaCorrente = tab1.codigo)
                                            where tab.tipo = "C"  and
                                                  if(escolha=1, tab.emissao between di and df, 0=0) and
                                                  if(escolha=2, tab.vencimento between di and df, 0=0) and
                                                  if(escolha=3, tab.dataConfirma between di and df, 0=0) and
                                                  (conciliacao="t" or tab.confirma = conciliacao) and
                                                  (conta = 0 or tab.codigo = conta) group by 1
          union
select
  "Debitos",
  round(abs(sum(tab.valor)),2)
          from
                contaCorrente tab
                inner join contaSaldo tab1 on(tab.idContaCorrente = tab1.codigo)
                                            where tab.tipo = "D" and
                                                  if(escolha=1, tab.emissao between di and df, 0=0) and
                                                  if(escolha=2, tab.vencimento between di and df, 0=0) and
                                                  if(escolha=3, tab.dataConfirma between di and df, 0=0) and
                                                  (conciliacao="t" or tab.confirma = conciliacao) and
                                                  (conta = 0 or tab.codigo = conta) group by 1
          union
select "Creditos (-) Debitos",
       (select
          round(sum(tab.valor),2)
                from
                  contaCorrente tab
                inner join contaSaldo tab1 on(tab.idContaCorrente = tab1.codigo)
                                            where tab.tipo = "C" and
                                                  if(escolha=1, tab.emissao between di and df, 0=0) and
                                                  if(escolha=2, tab.vencimento between di and df, 0=0) and
                                                  if(escolha=3, tab.dataConfirma between di and df, 0=0) and
                                                  (conciliacao="t" or tab.confirma = conciliacao) and
                                                  (conta = 0 or tab.codigo = conta)) -
       (select
          round(sum(tab.valor),2)
                from
                  contaCorrente tab
                inner join contaSaldo tab1 on(tab.idContaCorrente = tab1.codigo)
                                            where tab.tipo = "D" and
                                                  if(escolha=1, tab.emissao between di and df, 0=0) and
                                                  if(escolha=2, tab.vencimento between di and df, 0=0) and
                                                  if(escolha=3, tab.dataConfirma between di and df, 0=0) and
                                                  (conciliacao="t" OR tab.confirma = conciliacao) and
                                                  (conta = 0 OR tab.codigo = conta)) as "Full";
  when 3 then 
select
  round(sum(if(tab.tipo='C',tab.valor,(tab.valor * -1))),2),
  
  round(tab2.limite,2),
  round((sum(if(tab.tipo='C',tab.valor,(tab.valor * -1))) + tab2.limite),2)
  
          from
                contaCorrente tab
                inner join contaSaldo tab1 on(tab.idContaCorrente = tab1.codigo)
                inner join conta tab2 on(tab.codigo = tab2.idConta)
                                            where
                                                  if(escolha=1, tab.emissao between di and df, 0=0) and
                                                  if(escolha=2, tab.vencimento between di and df, 0=0) and
                                                  if(escolha=3, tab.dataConfirma between di and df, 0=0) and
                                                  (conciliacao="t" OR tab.confirma = conciliacao) and
                                                  (conta = 0 OR tab.codigo = conta)  group by 2;
  when 4 then 
select
      round(contaSaldo.saldo,2),
      round(conta.limite,2),
      round((contaSaldo.saldo + conta.limite),2)
                   from
                      contaSaldo
                      inner join conta on(contaSaldo.conta = conta.idConta)
                                                                        where
                                                                    contaSaldo.codigo = (select max(codigo) from contaSaldo where contaSaldo.conta = conta);
  when 5 then 
select
       round(sum(if(tab.tipo="c",tab.valor,(tab.valor) * -1)),2),
       round(tab2.limite,2),
       round((sum(if(tab.tipo="c",tab.valor,(tab.valor) * -1)) + tab2.limite),2)
                from
                  contaCorrente tab
                      inner join contaSaldo tab1 on(tab.idContaCorrente = tab1.codigo)
                      inner join conta tab2 on(tab.codigo = tab2.idConta)
                                               where
                                                  if(escolha=1, tab.emissao between di and df, 0=0) and
                                                  if(escolha=2, tab.vencimento between di and df, 0=0) and
                                                  if(escolha=3, tab.dataConfirma between di and df, 0=0) and
                                                  (conciliacao="t" OR tab.confirma = conciliacao) and
                                                  (conta = 0 OR tab.codigo = conta)  group by 2;
  when 6 then
select
        tab.idLoja,
        date_format(tab.emissao,'%d/%m/%Y'),
        date_format(tab.vencimento,'%d/%m/%Y'),
        tab.historico,
        tab.tipo,
        coalesce(tab.lancamento,""),
        round(tab.valor,2),
        round(tab1.Saldo,2),
        tab.confirma,
        tab.idContaCorrente,
        coalesce(tab.tipoOrigem,"") as TipoOrigem,
        tab.chavePagar,
        tab3.razao,
        case tab.tipo when "D" then "DÉBITO"
                      when "C" then "CRÉDITO" end,
        tab4.idHistorico,
        tab4.descricao,
        tab.codigo
          from
                contaCorrente tab
                inner join contaSaldo tab1 on(tab.idContaCorrente = tab1.codigo)
                inner join conta tab2 on(tab.codigo = tab2.idConta)
                inner join loja tab3 on(tab.idLoja = tab3.idLoja)
                inner join historico tab4 on(tab.codigoHistorico = tab4.idHistorico)
                                                       where tab.idContaCorrente=chave;
  when 7 then 
select
        tab.idLoja,
        date_format(tab.emissao,'%d/%m/%Y'),
        date_format(tab.vencimento,'%d/%m/%Y'),
        tab.historico,
        tab.tipo,
        coalesce(tab.lancamento,""),
        round(tab.valor,2),
        round(tab1.Saldo,2),
        tab.confirma,
        tab.idContaCorrente,
        coalesce(tab.tipoOrigem,"") as TipoOrigem,
        tab.chavePagar
          from
                contaCorrente tab
                inner join contaSaldo tab1 on(tab.idContaCorrente = tab1.codigo)
                            where
                              if(escolha=1, tab.emissao between di and df, 0=0) and
                              if(escolha=2, tab.vencimento between di and df, 0=0) and
                              if(escolha=3, tab.dataConfirma between di and df, 0=0) and
                              (conciliacao="t" OR tab.confirma = conciliacao) and
                              (conta = 0 OR tab.codigo = conta) and
                              (VarLancamento="" OR tab.lancamento = VarLancamento) and
                              (VarValor=0 OR tab.valor = VarValor);
  end case;
end $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `conector_find_fatorLiberacao`
--

DROP PROCEDURE IF EXISTS `conector_find_fatorLiberacao`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='' */ $$
CREATE DEFINER=`master`@`localhost` PROCEDURE `conector_find_fatorLiberacao`(in tipo int, in find varchar(45))
begin
case tipo
    when 1 then
    SELECT idfatorLiberacao,
          descricao
                    FROM FATORlIBERACAO;
    when 2 then
    SELECT idfatorLiberacao,
          descricao
                    FROM FATORlIBERACAO
                            where 
                                idFatorLiberacao=find;
    when 3 then
    SELECT idfatorLiberacao,
          descricao
                    FROM FATORlIBERACAO
                            where 
                                descricao=find;
end case;
end $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `conector_find_faturamento`
--

DROP PROCEDURE IF EXISTS `conector_find_faturamento`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='' */ $$
CREATE DEFINER=`master`@`localhost` PROCEDURE `conector_find_faturamento`(
                                          in tipo int,
                                          in find_typenf varchar(45),
                                          in find varchar(45),
                                          in find_cliente varchar(45),
                                          in find_loja varchar(45),
                                          in find_parametro varchar(45),
                                          in find_cfop varchar(45),
                                          in find_nota varchar(45),
                                          in di date,
                                          in df date,
                                          in intervalo int)
begin
SET SQL_BIG_SELECTS=1;
case tipo
  when 1 then
select
      tab.idPedido,
      tab6.descricao,
      case tab1.idTipoPessoa when 1 then tab3.nome when 2 then tab4.razao when 3 then tab5.nome end,
      ifnull(tab0.nr_nota,"000000000") as Nota,
      coalesce(tab0.impresso,0) as Impresso,
      if(tab11.flagExpiracao = 0, tab.expiracao, if((datediff(tab.expiracao,date(now()))) < 0, 1, 0))  as Expirado,
      tab.valorTotal,
      tab.discount,
      0,
      tab.ValorLiquido,
      (sum(coalesce(tab8.valueEntry,0) + coalesce(tab8.total,0) + coalesce(tab8.encargos,0)) +
      sum(coalesce(tab10.valor,0)) +
      sum(coalesce(tab9.valor,0)) +
      sum(coalesce(tab7.valueCheque,0))),
      date_format(tab.emissao,'%d/%m/%Y') as Total_Faturado,
      tab.idCliente,
      tab.sinal
       from
          pedido tab
            inner join cliente tab1 on(tab.idCliente = tab1.idCliente)
            inner join loja tab2 on(tab.idloja = tab2.idLoja)
            left join nf tab0 on(tab.IdPedido =  tab0.idPedido)
            left join fisica tab3 on(tab.idCliente = tab3.idCliente)
            left join juridica tab4 on(tab.idCliente = tab4.idCliente)
            left join rural tab5 on(tab.idCliente = tab5.idCliente)
            inner join StatusPedido tab6 on(tab.status = tab6.idStatusPedido)
            left join cheque tab7 on(tab.idPedido = tab7.reserva)
            left join crediario tab8 on(tab.idPedido = tab8.pedido)
            left join convenioMovimento tab9 on(tab.idPedido = tab9.pedido)
            left join cartao tab10 on(tab.idPedido = tab10.pedido)
            inner join paramentro_faturamento tab11 on(tab.idParamentro = tab11.idParamentro)
                        where
                        (find = 0 OR tab.idPedido = find) and
                        (find_cliente = 0 OR tab.idCliente = find_cliente) and
                        (find_loja=0 OR tab.idloja = find_loja) and
                        (find_parametro=0 OR tab.idParamentro = find_parametro) and
                        if(find_typenf='7',tab.status=9,(find_typenf="x" OR tab.final= find_typenf))and
                        if(intervalo = 0, tab.emissao between di and df, tab.emissao >= '1900-01-01')
                              group by 1,2,3,4,5,6,7,8,9,10,12,13;
  when 2 then
select
      tab.nf,
      case tab.nr_nota when "000000" then "NAO GERADA" when "000000000" then "NAO GERADA" else
      if(tab6.modNotaFiscal=65, "NFC-E GERADA", if(tab6.modNotaFiscal=55,"NFe GERADA", if(tab6.modNotaFiscal <> 55 and tab6.modNotaFiscal <>65,"NOTA GERADA","DESCONHECIDO"))) end,
      case tab1.idTipoPessoa when 1 then tab3.nome when 2 then tab4.razao when 3 then tab5.nome end,
      tab.nr_nota,
      tab.impresso,
      0,
      tab.valorTotalProdutos,
      tab.descontoValor,
      tab.acrecismoValor,
      tab.ValorTotalLiquido,
      tab.ValorTotalNota,
      date_format(tab.emissao,'%d/%m/%Y'),
      tab.idCliente
       from
          nf tab
            inner join cliente tab1 on(tab.idCliente = tab1.idCliente)
            inner join loja tab2 on(tab.loja = tab2.idLoja)
            left join fisica tab3 on(tab.idCliente = tab3.idCliente)
            left join juridica tab4 on(tab.idCliente = tab4.idCliente)
            left join rural tab5 on(tab.idCliente = tab5.idCliente)
            inner join paramentro_faturamento tab6 on(tab.idParamentro = tab6.idParamentro)
            where
                        (find_cliente = 0 OR tab.idCliente = find_cliente) and
                        (find_loja=0 OR tab.loja = find_loja) and
                        (find_parametro=0 OR tab.idParamentro = find_parametro) and
                        (find_cfop=0 OR tab.cfop = find_cfop) and
                        (find_nota = 0 OR tab.nr_nota = find_nota) and
                        (find_typenf="x" OR tab.statusNf= find_typenf) and
                        if(intervalo = 0, tab.emissao between date_format(di,'%Y-%m-%d') and date_format(df,'%Y-%m-%d'), tab.emissao >= '1900-01-01');
end case;
end $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `conector_find_feriado`
--

DROP PROCEDURE IF EXISTS `conector_find_feriado`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='' */ $$
CREATE DEFINER=`master`@`localhost` PROCEDURE `conector_find_feriado`(
                in vdata date,
                out `vferiado` CHAR(1)
                )
BEGIN

declare total int;

   select
       count(idFeriado)
         from feriado
           where feriado = vdata
                         into total;

   If (total is null) Then
      set total = 0;
   end if;


   if  (total = 0) then
       set `vferiado` = 'N';
   else
       set `vferiado` = 'S';
   end if;

end $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `conector_find_finalizadora`
--

DROP PROCEDURE IF EXISTS `conector_find_finalizadora`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='' */ $$
CREATE DEFINER=`master`@`localhost` PROCEDURE `conector_find_finalizadora`( in tipo integer, in find varchar(45))
begin
case tipo
        when 1 then
select 
                          idFinalizadora, 
                          descricao,
                          tac,
                          trocoMax,
                          typeFinalizadora,
                          cobrancaObrigatoria,
                          taxaObrigatoria,
                          idFinalizadoraTroco,
                          typeVenda,
                          flagRestringe,
                          flagVencimento,
                          flagPermitiTroco,
                          flagBoleto,
                          flagPromissoria,
                          administradora,
                          status 
from 
                          conector.finalizadora
where
                          idFinalizadora=find;
                          when 2 then
select 
                          idFinalizadora, 
                          descricao,
                          tac,
                          trocoMax,
                          typeFinalizadora,
                          cobrancaObrigatoria,
                          taxaObrigatoria,
                          idFinalizadoraTroco,
                          typeVenda,
                          flagRestringe,
                          flagVencimento,
                          flagPermitiTroco,
                          flagBoleto,
                          flagPromissoria,
                          administradora,
                          status
from 
                          conector.finalizadora
where
                          descricao like concat(find,'%');
                          else
select 
                          idFinalizadora, 
                          descricao,
                          tac,
                          trocoMax,
                          typeFinalizadora,
                          cobrancaObrigatoria,
                          taxaObrigatoria,
                          idFinalizadoraTroco,
                          typeVenda,
                          flagRestringe,
                          flagVencimento,
                          flagPermitiTroco,
                          flagBoleto,
                          flagPromissoria,
                          administradora,
                          status 
from 
                          conector.finalizadora;
                          end case;
                          end $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `conector_find_fone`
--

DROP PROCEDURE IF EXISTS `conector_find_fone`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='' */ $$
CREATE DEFINER=`master`@`localhost` PROCEDURE `conector_find_fone`(
                                        in find varchar(45),
                                        in tipo integer
                                   )
begin
case tipo
    when 1 then
select 
        idfone,
        ddd,
        telefone,
        foneType.descricao, 
        priori,
        ramal,
        complemento,
        fone.idfonetype,
        idcliente,
        idatividade
        
        from fone
inner join foneType on(fone.idfonetype = foneType.idfonetype)
where idcliente=find;
    when 2 then
    select 
        idfone,
        ddd,
        telefone,
        foneType.descricao, 
        priori,
        ramal,
        complemento,
        fone.idfonetype,
        idcliente,
        idatividade
        
        from fone
inner join foneType on(fone.idfonetype = foneType.idfonetype)
where idcliente=find and priori='v';
end case;
end $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `conector_find_frete`
--

DROP PROCEDURE IF EXISTS `conector_find_frete`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='' */ $$
CREATE DEFINER=`master`@`localhost` PROCEDURE `conector_find_frete`( in tipo integer, in findTransporte double, in findNf double)
begin
    case tipo
        when 1 then
select
                    tab.idnfInforTransporte,
                    tab1.idnfInforVeiculo,
                    tab.`nf`,
                    tab.`uf`,
                    ifnull(tab.`qtty_volume`, ""),
                    ifnull(tab.`especie`, ""),
                    ifnull(tab.`marca`, ""),
                    ifnull(tab.`numeracao`, ""),
                    ifnull(tab.`pesoliquido`, ""),
                    ifnull(tab.`pesoBruto`, ""),
                    tab.`idtransportadora`,
                    tab.`retencaoBaseCalculo`,
                    tab.`retencaoAliquotaFrete`,
                    tab.`retencaoIcmsFrete`,
                    tab.`retencaoValorFrete`,
                    tab.`retencaoCfopFrete`,
                    tab.`isentoIcms`,
                    tab1.`uf`,
                    tab1.`placa`,
                    tab1.`rntc`,
                    ifnull(tab2.razao,""), tab1.idVeiculo
                    from
                        nfInforTransporte tab
                        inner join  nfInforVeiculo tab1 on(tab.idnfInforTransporte = tab1.nfInforTransporte)
                        left join transportadora tab2 on(tab.idTransportadora = tab2.idtransportadora)
                    where
                    tab.idnfInforTransporte = findTransporte and
                    tab.`nf` = findNf; end case;
end $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `conector_find_funcao`
--

DROP PROCEDURE IF EXISTS `conector_find_funcao`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='' */ $$
CREATE DEFINER=`master`@`localhost` PROCEDURE `conector_find_funcao`(
                                        in find varchar(30),
                                        in tipo integer
                                     )
begin
case tipo
    when 1 then
select
     idFuncao,
     descricao
from funcao;
    when 2 then
select
     idFuncao,
     descricao
from funcao
where
     descricao like concat('%',find,'%');
     when 3 then
select
     idFuncao,
     descricao
from funcao
where
     idFuncao=find;

    when 4 then
select
     idFuncao,
     descricao
from funcao where especifica = true and idFuncao != 11;
    when 5 then
select
     idFuncao,
     descricao, discount
from funcao
where
     descricao like concat('%',find,'%') and especifica = true;
     when 6 then
select
     idFuncao,
     descricao
from funcao
where
     idFuncao=find and especifica = true;

    when 7 then
select
     idFuncao,
     descricao
from funcao where especifica = true;
     end case;
     end $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `conector_find_funcionario`
--

DROP PROCEDURE IF EXISTS `conector_find_funcionario`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='' */ $$
CREATE DEFINER=`master`@`localhost` PROCEDURE `conector_find_funcionario`(
                                            in tipo integer,
                                            in find varchar(45),
                                            in find_loja integer,
                                            in find_meta integer,
                                            in find_premio integer,
                                            in find_escola integer,
                                            in find_funcao integer
                                          )
begin
case tipo
  when 1 then
  select tab8.cep from funcionario tab
          left join funcionario_endereco tab8 on(tab.idFuncionario = tab8.idFuncionario) where tab.idFuncionario=find into @find_cep;
  select cepCity.nome,cepbairro.idestado from cepbairro inner join cepCity on(cepbairro.idcepCity = cepCity.idcepCity) inner join estado on(cepbairro.idestado=estado.idestado) where cepbairro.cep = @find_cep into @a, @c;
  set @b = (select ifnull(idspedMunicipio,0) as cod_municipio from spedmunicipio where municipio like concat(@a,"%")  and idEstado=@c);


  select
          tab.idFuncionario,
          tab.nome,
				  tab.apelido,
				  date_format(tab.nascimento,'%d/%m/%Y'),
				  tab.idloja,
          tab1.razao,
				  tab.idfuncao,
          tab5.descricao,
				  tab.idcivil,
          ifnull(tab7.descricao,"") as civil,
				  tab.idsexo,
          ifnull(tab6.descricao,"") as sexo,
				  date_format(tab.inclusao,'%d/%m/%Y'),
				  tab.comissaoAvista,
				  tab.comissaoAprazo,
				  ifnull(tab.cpf,""),
				  ifnull(tab.identidade,""),
				  tab.email,
				  tab.pis,
				  tab.idusuario,
				  date_format(tab.Admissao,'%d/%m/%Y'),
				  ifnull(date_format(tab.demissao,'%d/%m/%Y'),"00000000"),
				  tab.carteira,
				  tab.observacao,
				  ifnull(tab.idPremiacao,"") as cod_premio,
				  ifnull(tab.idMetaVenda,"") as cod_meta,
				  ifnull(tab.idprofissao,"") as cod_profissao,
          ifnull(tab3.descricao,"") as profissao,
				  ifnull(tab.idEscolaridade,"") as cod_escola,
          ifnull(tab4.descricao,"") as descricao_escola,
				  ifnull(tab8.idFuncionarioEndereco,""),
				  ifnull(tab8.cep,""),
          ifnull(tab8.idcepbairro,""),
          ifnull(tab8.idenderecoType,""),
          ifnull(tab8.bairro,""),
          ifnull(tab8.logradouro,""),
          ifnull(tab8.complemento,""),
          ifnull(tab8.municipio,""),
          ifnull(tab8.estado,""),
          ifnull(tab8.numero,""),
          tab.status,
          date_format(tab.inclusao,'%d/%m/%Y'),
          date_format(tab.admissao,'%d/%m/%Y'),
          tab.idUsuario,
          ifnull(@b,"") as Cod_Municipio,
          tab.acessoFiscal,
          tab.acessoMenuFiscal, ifnull(tab.crc,""), ifnull(contador_cnpj,"")
from
          funcionario tab
          inner join loja tab1 on(tab.idLoja = tab1.idLoja)
          left join metaVenda tab2 on(tab.idMetaVenda = tab2.idMetaVenda)
          left join premiacao tab3 on(tab.idPremiacao = tab3.idPremiacao)
          left join escolaridade tab4 on(tab.idEscolaridade = tab4.idEscolaridade)
          left join funcao tab5 on(tab.idFuncao = tab5.idFuncao)
          left join sexo tab6 on(tab.idsexo = tab6.idsexo)
          left join civil tab7 on(tab.idCivil = tab7.idCivil)
          left join funcionario_endereco tab8 on(tab.idFuncionario = tab8.idFuncionario)
where tab.idFuncionario=find and (find_loja=0 OR tab.idLoja = find_loja) and (tab8.sequencia=1 or 1=1)
      and (find_funcao = 0 OR tab.idFuncao = find_funcao or tab.idFuncao in(7,11));
  when 2 then
select
          tab.idFuncionario,
          tab.nome,
				  tab.apelido,
				  date_format(tab.nascimento,'%d/%m/%Y'),
				  tab.idloja,
          tab1.razao,
				  tab.idfuncao,
          tab5.descricao,
				  tab.idcivil,
          ifnull(tab7.descricao,"") as civil,
				  tab.idsexo,
          ifnull(tab6.descricao,"") as sexo,
				  date_format(tab.inclusao,'%d/%m/%Y'),
				  tab.comissaoAvista,
				  tab.comissaoAprazo,
				  tab.cpf,
				  tab.identidade,
				  tab.email,
				  tab.pis,
				  tab.idusuario,
				  date_format(tab.Admissao,'%d/%m/%Y'),
				  date_format(tab.demissao,'%d/%m/%Y'),
				  tab.carteira,
				  tab.observacao,
				  ifnull(tab.idPremiacao,"") as cod_premio,
				  ifnull(tab.idMetaVenda,"") as cod_meta,
				  ifnull(tab.idprofissao,"") as cod_profissao,
          ifnull(tab3.descricao,"") as profissao,
				  ifnull(tab.idEscolaridade,"") as cod_escola,
          ifnull(tab4.descricao,"") as descricao_escola,
				  ifnull(tab8.idFuncionarioEndereco,""),
				  ifnull(tab8.cep,""),
          ifnull(tab8.idcepbairro,""),
          ifnull(tab8.idenderecoType,""),
          ifnull(tab8.bairro,""),
          ifnull(tab8.logradouro,""),
          ifnull(tab8.complemento,""),
          ifnull(tab8.municipio,""),
          ifnull(tab8.estado,""),
          ifnull(tab8.numero,""),tab.crc
from
          funcionario tab
          inner join loja tab1 on(tab.idLoja = tab1.idLoja)
          left join metaVenda tab2 on(tab.idMetaVenda = tab2.idMetaVenda)
          left join premiacao tab3 on(tab.idPremiacao = tab3.idPremiacao)
          left join escolaridade tab4 on(tab.idEscolaridade = tab4.idEscolaridade)
          left join funcao tab5 on(tab.idFuncao = tab5.idFuncao)
          left join sexo tab6 on(tab.idsexo = tab6.idsexo)
          left join civil tab7 on(tab.idCivil = tab7.idCivil)
          left join funcionario_endereco tab8 on(tab.idFuncionario = tab8.idFuncionario)
where tab.nome like concat('%',find,'%') and tab.idLoja = find_loja and tab8.sequencia=1
      and (find_funcao = 0 OR tab.idFuncao = find_funcao);
  when 3 then
select
          tab.idFuncionario,
          tab.nome,
          tab5.descricao,
				  date_format(tab.Admissao,'%d/%m/%Y'),
				  tab.apelido,
				  tab.cpf,
				  date_format(tab.nascimento,'%d/%m/%Y'),
          tab1.razao,
				  tab.identidade,
				  tab.idfuncao,
				  tab.idloja
from
          funcionario tab
          inner join loja tab1 on(tab.idLoja = tab1.idLoja)
          left join funcao tab5 on(tab.idFuncao = tab5.idFuncao)
where tab.idFuncionario=find and (find_loja=0 OR tab.idLoja = find_loja)
      and (find_funcao = 0 OR tab.idFuncao = find_funcao);
  when 4 then
select
          tab.idFuncionario,
          tab.nome,
          tab5.descricao,
				  date_format(tab.Admissao,'%d/%m/%Y'),
				  tab.apelido,
				  tab.cpf,
				  date_format(tab.nascimento,'%d/%m/%Y'),
          tab1.razao,
				  tab.identidade,
				  tab.idfuncao,
				  tab.idloja
from
          funcionario tab
          inner join loja tab1 on(tab.idLoja = tab1.idLoja)
          left join funcao tab5 on(tab.idFuncao = tab5.idFuncao)
where tab.nome like concat('%',find,'%') and (find_loja=0 OR tab.idLoja = find_loja)
      and (find_funcao = 0 OR tab.idFuncao = find_funcao);

  when 5 then

select
          tab.idFuncionario,
          tab.nome,
          tab5.descricao,
				  date_format(tab.Admissao,'%d/%m/%Y') as admissao,
				  tab.apelido,
				  tab.cpf,
				  date_format(tab.nascimento,'%d/%m/%Y') as nascimento,
          tab1.razao,
				  tab.identidade,
				  tab.idfuncao,
				  tab.idloja
from
          funcionario tab
          inner join loja tab1 on(tab.idLoja = tab1.idLoja)
          left join funcao tab5 on(tab.idFuncao = tab5.idFuncao)
where
          (find_funcao = 0 OR tab.idFuncao = find_funcao) and (find_loja=0 OR tab.idLoja = find_loja);

  when 6 then

select
          tab.idFuncionario,
          tab.nome,
				  tab.apelido,
				  tab.idfuncao,
          tab5.especifica,
          tab5.discount,
				  tab.idloja
from
          funcionario tab
          inner join loja tab1 on(tab.idLoja = tab1.idLoja)
          left join funcao tab5 on(tab.idFuncao = tab5.idFuncao)
where
          tab.idFuncao = find_funcao and tab.idLoja = find_loja;
    when 7 then
  select tab8.cep from funcionario tab
          left join funcionario_endereco tab8 on(tab.idFuncionario = tab8.idFuncionario) where tab.idFuncionario=2 into @find_cep;
  select cepCity.nome,cepbairro.idestado from cepbairro inner join cepCity on(cepbairro.idcepCity = cepCity.idcepCity) inner join estado on(cepbairro.idestado=estado.idestado) where cepbairro.cep = @find_cep into @a, @c;
  set @b = (select ifnull(idspedMunicipio,0) as cod_municipio from spedmunicipio where municipio like concat(@a,"%")  and idEstado=@c);


  select
          tab.idFuncionario,
          tab.nome,
				  tab.apelido,
				  date_format(tab.nascimento,'%d/%m/%Y'),
				  tab.idloja,
          tab1.razao,
				  tab.idfuncao,
          tab5.descricao,
				  tab.idcivil,
          ifnull(tab7.descricao,"") as civil,
				  tab.idsexo,
          ifnull(tab6.descricao,"") as sexo,
				  date_format(tab.inclusao,'%d/%m/%Y'),
				  tab.comissaoAvista,
				  tab.comissaoAprazo,
				  ifnull(tab.cpf,""),
				  ifnull(tab.identidade,""),
				  tab.email,
				  tab.pis,
				  tab.idusuario,
				  date_format(tab.Admissao,'%d/%m/%Y'),
				  date_format(tab.demissao,'%d/%m/%Y'),
				  tab.carteira,
				  tab.observacao,
				  ifnull(tab.idPremiacao,"") as cod_premio,
				  ifnull(tab.idMetaVenda,"") as cod_meta,
				  ifnull(tab.idprofissao,"") as cod_profissao,
          ifnull(tab3.descricao,"") as profissao,
				  ifnull(tab.idEscolaridade,"") as cod_escola,
          ifnull(tab4.descricao,"") as descricao_escola,
				  ifnull(tab8.idFuncionarioEndereco,""),
				  ifnull(tab8.cep,""),
          ifnull(tab8.idcepbairro,""),
          ifnull(tab8.idenderecoType,""),
          ifnull(tab8.bairro,""),
          ifnull(tab8.logradouro,""),
          ifnull(tab8.complemento,""),
          ifnull(tab8.municipio,""),
          ifnull(tab8.estado,""),
          ifnull(tab8.numero,""),
          tab.status,
          date_format(tab.inclusao,'%d/%m/%Y'),
          date_format(tab.admissao,'%d/%m/%Y'),
          tab.idUsuario, @b as Cod_Municipio,
          tab.acessoFiscal,
          tab.acessoMenuFiscal, tab.crc
from
          funcionario tab
          inner join loja tab1 on(tab.idLoja = tab1.idLoja)
          left join metaVenda tab2 on(tab.idMetaVenda = tab2.idMetaVenda)
          left join premiacao tab3 on(tab.idPremiacao = tab3.idPremiacao)
          left join escolaridade tab4 on(tab.idEscolaridade = tab4.idEscolaridade)
          left join funcao tab5 on(tab.idFuncao = tab5.idFuncao)
          left join sexo tab6 on(tab.idsexo = tab6.idsexo)
          left join civil tab7 on(tab.idCivil = tab7.idCivil)
          left join funcionario_endereco tab8 on(tab.idFuncionario = tab8.idFuncionario)
where tab.idFuncionario=find and (find_loja=0 OR tab.idLoja = find_loja) and (tab8.sequencia=1 or 1=1)
      and (tab.idFuncao in(11,3,4,5,7) );

end case;
end $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `conector_find_grupo`
--

DROP PROCEDURE IF EXISTS `conector_find_grupo`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='STRICT_TRANS_TABLES,STRICT_ALL_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,TRADITIONAL,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION' */ $$
CREATE DEFINER=`master`@`localhost` PROCEDURE `conector_find_grupo`(
                                                    in tipo int(5),
                                                    in find varchar(45)
                                                  )
BEGIN
     case tipo
            when 1 then
                select
                        idgrupo,idsetor,idcomprador,descricao,status
                from
                        grupo
                where
                        (descricao like concat(find,"%"));
            when 2 then
                select
                          grupo.idgrupo as codigo,
                          grupo.descricao,
                          grupo.status,
                          setor.descricao,
                          comprador.nome,
                          grupo.idsetor,
                          grupo.idcomprador
                from
                          grupo
                            inner join setor on(grupo.idsetor = setor.idsetor)
                            inner join comprador on(grupo.idcomprador = comprador.idcomprador)
                 where

                        (find=0 or grupo.idgrupo=find);
            when 3 then
                select
                          grupo.idgrupo as codigo,
                          grupo.descricao,
                          grupo.status,
                          setor.descricao,
                          comprador.nome,
                          grupo.idsetor,
                          grupo.idcomprador
                from
                          grupo
                            inner join setor on(grupo.idsetor = setor.idsetor)
                            inner join comprador on(grupo.idcomprador = comprador.idcomprador)
                 where
                          grupo.descricao like concat(find,"%") ;
            else
                select
                          grupo.idgrupo as codigo,
                          grupo.descricao,
                          grupo.status,
                          setor.descricao,
                          comprador.nome,
                          grupo.idsetor,
                          grupo.idcomprador
                from
                          grupo
                            inner join setor on(grupo.idsetor = setor.idsetor)
                            inner join comprador on(grupo.idcomprador = comprador.idcomprador)
                where
                          (find = 0 or grupo.idsetor = find);
     end case;
END $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `conector_find_historico`
--

DROP PROCEDURE IF EXISTS `conector_find_historico`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='' */ $$
CREATE DEFINER=`master`@`localhost` PROCEDURE `conector_find_historico`(in opcao int, in find varchar(45))
begin
case opcao
    when 1 then
select idHistorico,
       descricao,
       tipo,
       lancamentoNegativo,
       inativa
            from historico
                  where inativa != 1 and tipo="C";
                  when 2 then
select idHistorico,
       descricao,
       tipo,
       lancamentoNegativo,
       inativa
            from historico
                  where inativa != 1 and tipo="D";
                  when 3 then
select idHistorico,
       descricao,
       tipo,
       lancamentoNegativo,
       inativa
            from historico
                  where inativa != 1 and tipo="V";
                  when 4 then
select idHistorico,
       descricao,
       tipo,
       lancamentoNegativo,
       inativa
            from historico
                  where inativa != 1 and tipo="T";

                    when 5 then
                    
select idHistorico,
       descricao,
       tipo,
       lancamentoNegativo,
       inativa
            from historico
                  where inativa != 1 and tipo="C" and idHistorico=find;
                  when 6 then
select idHistorico,
       descricao,
       tipo,
       lancamentoNegativo,
       inativa
            from historico
                  where inativa != 1 and tipo="D"  and idHistorico=find;
                  when 7 then
select idHistorico,
       descricao,
       tipo,
       lancamentoNegativo,
       inativa
            from historico
                  where inativa != 1 and tipo="V"  and idHistorico=find; 
                  when 8 then
select idHistorico,
       descricao,
       tipo,
       lancamentoNegativo,
       inativa
            from historico
                  where inativa != 1 and tipo="T"  and idHistorico=find;

                when 9 then
select idHistorico,
       descricao,
       tipo,
       lancamentoNegativo,
       inativa
            from historico
                  where inativa != 1 and tipo="C" and descricao=find;
                  when 10 then
select idHistorico,
       descricao,
       tipo,
       lancamentoNegativo,
       inativa
            from historico
                  where inativa != 1 and tipo="D" and descricao=find;
                  when 11 then
select idHistorico,
       descricao,
       tipo,
       lancamentoNegativo,
       inativa
            from historico
                  where inativa != 1 and tipo="V"  and descricao=find;
                  when 12 then
select idHistorico,
       descricao,
       tipo,
       lancamentoNegativo,
       inativa
            from historico
                  where inativa != 1 and tipo="T" and descricao=find;
                  when 14 then
select idHistorico,
       descricao,
       tipo,
       lancamentoNegativo,
       inativa
            from historico
                  where inativa != 1 and descricao=find;
                  when 15 then
select idHistorico,
       descricao,
       tipo,
       lancamentoNegativo,
       inativa
            from historico
                  where inativa != 1;
                  end case;
end $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `conector_find_historicoCrediario`
--

DROP PROCEDURE IF EXISTS `conector_find_historicoCrediario`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='' */ $$
CREATE DEFINER=`master`@`localhost` PROCEDURE `conector_find_historicoCrediario`(in tipo integer, in find varchar(45))
begin
case tipo
  when 1 then
  select tab.typeHistorico,tab.rotina
     from typeHistorico tab where 1=1;
  when 2 then
  select tab.typeHistorico,tab.rotina
     from typeHistorico tab where tab.TypeHistorico=find;
  when 3 then
  select tab.typeHistorico,tab.rotina
     from typeHistorico tab where tab.rotina = find;
end case;
end $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `conector_find_indice`
--

DROP PROCEDURE IF EXISTS `conector_find_indice`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='' */ $$
CREATE DEFINER=`master`@`localhost` PROCEDURE `conector_find_indice`(in find varchar(45), in tipo int)
BEGIN
case tipo
    when 1 then
      select idMetodo as Metodo,idParcelamento as Parcela,indice,0 from tablePrice where idMetodo=find;
    when 2 then
      select idMetodo as Metodo,idMetodoParcelas as Parcela,fator,dias from metodoparcelas where idmetodo=find;
    end case;
END $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `conector_find_inventario`
--

DROP PROCEDURE IF EXISTS `conector_find_inventario`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='' */ $$
CREATE DEFINER=`root`@`%` PROCEDURE `conector_find_inventario`(in tipo smallint,
                                          in findloja int,
                                          in datainicio datetime,
                                          in datafinal datetime,
                                          in findstatus smallint,
                                          in findtipo smallint,
                                          in intervalo smallint, in inv double)
begin

case tipo
   when 1 then
select tab1.razao, tab.nome, tab.status,
       (select count(*) from inventarioitem where idinventario = tab.idinventario) as qtde,
       tab.valor,tab.custo,tab.idinventario
from inventario tab
       inner join loja tab1 on tab.idloja = tab1.idloja
       where tab.idloja = findloja and tab1.idloja = findloja and
       (tab.status = findstatus or findstatus=2) and (tab.idInventario=inv or inv=0) and
       (tab.tipo = findtipo or findtipo=2) and tab.data between datainicio and datafinal;

  when 2 then
select tab1.razao, tab.nome, tab.status,
       (select count(*) from inventarioitem where idinventario = tab.idinventario) as qtde,
       tab.valor,tab.custo,tab.idinventario
from inventario tab
       inner join loja tab1 on tab.idloja = tab1.idloja
       where tab.idloja = findloja and tab1.idloja = findloja and (tab.idInventario=inv or inv=0) and
       (tab.status = findstatus or findstatus=2) and (tab.tipo = findtipo or findtipo=2) and
       if(intervalo=1, tab.data between datainicio and datafinal, 0=0) and
       if(intervalo=2, tab.data between datafinal and datainicio, 0=0);
 when 3 then
   select tab1.razao, tab.nome, tab.status,
       (select count(*) from inventarioitem where idinventario = tab.idinventario) as qtde,
       tab.valor,tab.custo,tab.idinventario
from inventario tab
       inner join loja tab1 on tab.idloja = tab1.idloja
       where tab.idloja = findloja and tab1.idloja = findloja and (tab.idInventario=inv or inv=0) and (tab.status = findstatus or findstatus=2);
    when 0 then
    SELECT
`inventario`.`idinventario`,
`inventario`.`idloja`,
`inventario`.`status`,
`inventario`.`data`,
`inventario`.`nome`,
`inventario`.`atualizaCustorMedio`,
`inventario`.`usuario`,
`inventario`.`usuarioAtualiza`,
`inventario`.`valor`,
`inventario`.`custo`,
`inventario`.`tipo`,
`inventario`.`idinventarioMotivo`,
`inventario`.`final`,
`inventario`.`tipoEan`,
`inventario`.`setorFixo`,
`inventario`.`grupoFixo`,
`inventario`.`categoriaFixo`,
 inventario.idFornecedor
FROM `conector`.`inventario` where `inventario`.`idinventario`= findloja;
  when 4 then
select
    round(sum(quantidadeAtual*custoLiquido),2),
    round(sum(quantidadeAtual*precoVenda),2),
    round(sum(quantidadeAtual),3),
    round(sum(if(quantidadeAtual<0,quantidadeAtual,0)),3),
    round(sum(if(quantidadeAtual>0,quantidadeAtual,0)),3)
          from conector.inventarioItem where idInventario=findloja;
  when 5 then
select
    round(sum(quantidadeEncontrada*custoLiquido),2),
    round(sum(quantidadeEncontrada*precoVenda),2),
    round(sum(quantidadeEncontrada),3),
    round(sum(if(quantidadeEncontrada<0,quantidadeEncontrada,0)),3),
    round(sum(if(quantidadeEncontrada>0,quantidadeEncontrada,0)),3)
          from conector.inventarioItem where idInventario=findloja;
end case;
end $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `conector_find_itemCompra`
--

DROP PROCEDURE IF EXISTS `conector_find_itemCompra`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='' */ $$
CREATE DEFINER=`master`@`localhost` PROCEDURE `conector_find_itemCompra`(
                                            in pedido varchar(16),
                                            in tipo integer,
                                            in seq integer,
                                            in find varchar(45)
                                         )
begin
case tipo
    when 1 then
select
         tab.idProduto,
         tab.nome,
         tab1.unidade,
         truncate(sum(ifnull(item.custoBruto,0)),2) as Custo_Bruto,
         truncate(sum(ifnull(item.custoLiquido,0)),2) as Custo_Liquido,
         truncate(sum(ifnull(item.custoNotaTotal,0)),2) as CustoNota,
         truncate(sum(ifnull(item.priceVenda,0)),2) as Price,
         sum(ifnull(item.quantidade,0)) as Qtty_Pedido,
         tab2.barra,
         item.sequencial

             from
                        produto tab
             inner join unidadeMedida tab1 on(tab.idunidade = tab1.idunidadeMedida)
             inner join produtoEmbalagem tab2 on(tab.idproduto = tab2.idproduto)
             inner join produtoStore tab3 on(tab.idproduto = tab3.idproduto)
             inner join produtoPrice tab4 on(tab.idproduto = tab4.idproduto)
             left join  pedidoCompraitens item on(tab.idProduto = item.idProduto)
           where
             item.idPedidoCompra = pedido and
             tab2.defaultVenda = "s" and
             tab4.idloja = tab3.idloja and
             tab3.idLoja=find and
             tab4.idLoja=find
          group by 1,2,3
          order by item.sequencial;
    when 2 then
select
         item.idpedidoCompra,
         item.idProduto,
         item.sequencial,
         tab.nome,
         tab1.unidade,
         tab2.barra,
         item.emissaoPedido,
         truncate(item.custoLiquido,2),
         truncate(item.custoBruto,2),
         truncate(item.custoNota,2),
         truncate(item.custoNotaTotal,2),
         truncate(item.custoReposicao,2),
         truncate(item.custoTotal,2),
         truncate(item.discount1,2),
         truncate(item.discount2,2),
         truncate(item.discount3,2),
         truncate(item.discountValue,2),
         truncate(item.acrescimo,2),
         truncate(item.bonificacao,2),
         truncate(item.despesasNaoTributadas,2),
         truncate(item.despesasTributadas,2),
         item.chaveEmbalagem,
         item.barra,
         item.idunidadeMedida,
         item.entregue,
         truncate(item.financeiro,2),
         truncate(item.frete,2),
         truncate(item.icmsEntrada,2),
         truncate(item.reducaoEntrada,2),
         truncate(item.icmsFrete,2),
         truncate(item.icmsSaida,2),
         truncate(item.reducaoSaida,2),
         truncate(item.ipi,2),
         truncate(item.priceVenda,2),
         item.quantidade,
         truncate(item.sugestao,2),
         truncate(item.valorIpi,2),
         truncate(item.substituicao,2),
         truncate(item.sugestaoCompra,2),
         truncate(item.lucro,2),
         truncate(item.lucroValor,2),
         truncate(item.lucroBruto,2),
         item.quantidadeRecebida,
         item.quantidadePendente,
         truncate(item.creditoIcms,2),
         truncate(item.creditoPis,2),
         truncate(item.creditoCofins,2),
         truncate(item.baseCalculoSubstituicao,2),
         truncate(item.icmsSt,2),
         truncate(item.acrescimoSubstituicao,2),
         truncate(item.valorFinanceiro,2),
         truncate(item.valorFrete,2),
         item.sumFrete,
         truncate(item.margem,2),
         item.sumSt,
               tab2.quantidade
        from
           produto tab
             inner join unidadeMedida tab1 on(tab.idunidade = tab1.idunidadeMedida)
             inner join produtoEmbalagem tab2 on(tab.idproduto = tab2.idproduto)
             inner join produtoStore tab3 on(tab.idproduto = tab3.idproduto)
             inner join produtoPrice tab4 on(tab.idproduto = tab4.idproduto)
             left join  pedidoCompraitens item on(tab.idProduto = item.idProduto)
        where
             item.idPedidoCompra = pedido and

             tab2.defaultCompra = "s" and
             tab4.idloja = tab3.idloja and item.sequencial = seq and item.IdProduto = find;
end case;
end $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `conector_find_itemDev`
--

DROP PROCEDURE IF EXISTS `conector_find_itemDev`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='' */ $$
CREATE DEFINER=`root`@`localhost` PROCEDURE `conector_find_itemDev`(in tipo smallint, in store double, in find varchar(45), in seq smallint)
begin 
case tipo
      when 1 then
select
       item.sequencia,
       tab.IdProduto,
       tab.Nome,
       tab1.unidade,
       item.quantidade-item.quantidadeCanc,
       truncate(item.priceCusto,2),
       truncate(item.priceVenda,2),
       truncate(item.priceVenda*item.quantidade,2),
       item.cfop,
       item.csticms,
       tab2.barra,
       item.idnfItem
             from
                 produto tab
             inner join unidadeMedida tab1 on(tab.idunidade = tab1.idunidadeMedida)
             inner join produtoEmbalagem tab2 on(tab.idproduto = tab2.idproduto)
             inner join produtoStore tab3 on(tab.idproduto = tab3.idproduto)
             inner join produtoPrice tab4 on(tab.idproduto = tab4.idproduto)
             inner join produtoImpostos tab5 on(tab.idproduto = tab5.idproduto)
             inner join nfItem item on(tab.idProduto = item.idProduto)
             inner join cst on(tab5.cst = cst.idCst)
             inner join cfop on(item.cfop = cfop.cfop)
             where
             tab2.defaultVenda = "s" and
             tab3.Idloja = store and
             tab4.Idloja = store and
             tab5.Idloja = store and
             item.idnf = find;
             when 2 then select 1; 
             when 3 then 

select
               lpad(tab.IdProduto,13,0),
               tab.Nome,
               tab1.unidade,
               lpad(tab2.barra,13,0),
               item.`idnf`,
               item.`idnfItem`,
               truncate(item.`valorLiquido`,2),
               truncate(item.`priceOriginal`,2),
               truncate(item.`priceVenda`,2),
               truncate(item.`priceCusto`,2),
               item.`estoque`,
               item.`data`,
               item.`peso`,
               truncate(item.`aliquota`,2),
               truncate(item.`icms`,2),
               truncate(item.`baseCalculo`,2),
               truncate(item.`reducao`,2),
               item.`quantidade`,
               item.`idunidadeMedida`,
               item.`cfop`,
               concat(cst.idCst , " | " , cst.descricao),
               ifnull(item.`cstPis`,""),
               truncate(item.`valorPis`,2),
               truncate(item.`basePis`,2),
               ifnull(item.`cstCofins`,""),
               truncate(item.`valorCofins`,2),
               truncate(item.`baseCofins`,2),
               ifnull(item.`cstIpi`,""),
               truncate(item.`ipi`,2),
               truncate(item.`valoripi`,2),
               truncate(item.`baseIpi`,2),
               truncate(item.`desconto`,2),
               truncate(item.`descontoValor`,2),
               truncate(item.`acrescimo`,2),
               truncate(item.`acrescimoValor`,2),
               truncate(item.`aliquotaIcmsSt`,2),
               truncate(item.`baseCalculoIcmsSubstituicao`,2),
               truncate(item.`valorIcmsSubstituicao`,2),
               truncate(item.`reducaoIcmsSt`,2),
               truncate(item.`margem`,2),
               truncate(item.`valorTotalProduto`,2),
               truncate(item.`valorTotalNota`,2),
               truncate(item.`valorTotalLiquido`,2),
               item.`fornecedor`,
               item.`idsetor`,
               item.`tributacao`,
                cfop.nome,
                ifnull(cst.idCst,"") cst,
                ifnull(tab6.codigo,"") ipi,
                ifnull(tab7.codigo,"") pis,
                ifnull(tab8.codigo,"") cofins,
                ifnull(tab7.descricao,""),
                ifnull(tab8.descricao,""),
                ifnull(tab6.descricao,""),
               ifnull(tab5.spedNcm,"") AS NCM,
               truncate(item.ipiValor,2),
               item.chaveEntrada,
               truncate(item.valorIPI,2),
               truncate(item.valorFrete,2),
               item.idGenero,
               item.Seguro, ifnull(item.origemMercadoria,"0")
             from
                 produto tab
             inner join unidadeMedida tab1 on(tab.idunidade = tab1.idunidadeMedida)
             inner join produtoEmbalagem tab2 on(tab.idproduto = tab2.idproduto)
             inner join produtoStore tab3 on(tab.idproduto = tab3.idproduto)
             inner join produtoPrice tab4 on(tab.idproduto = tab4.idproduto)
             inner join produtoImpostos tab5 on(tab.idproduto = tab5.idproduto)
             inner join nfItem item on(tab.idProduto = item.idProduto)
             inner join cst on(item.cstIcms = cst.idCst)
             inner join cfop on(item.cfop = cfop.cfop)
             left join cstIpi tab6 on (item.`cstIpi`=tab6.idCstIpi)
             left join cstPis tab7 on (item.`cstPis`=tab7.idCstPis)
             left join cstCofins tab8 on (item.`cstCofins`=tab8.idCstCofins)
where
             tab2.defaultVenda = "s" and
             tab3.Idloja = store and
             tab4.Idloja = store and
             tab5.Idloja = store and
             item.idnf = find and item.sequencia=seq;
             end case;
end $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `conector_find_itemEntrada`
--

DROP PROCEDURE IF EXISTS `conector_find_itemEntrada`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='' */ $$
CREATE DEFINER=`master`@`localhost` PROCEDURE `conector_find_itemEntrada`(in tipo integer, in idLoja integer, in find varchar(45), in seq varchar(45), in varEan smallint)
begin
case tipo
  when 1 then
select
       tab.IdProduto,
       tab.Nome,
       tab1.unidade,
       item.quantidade,
       truncate(item.CustoBruto,2),
       truncate(item.CustoNota,2),
       item.flagRecebe,
       truncate(item.priceVenda,2),
       truncate(item.lucro,2),
       item.cfop,
       item.csticms,
       tab2.barra,
       item.idEntradaItem
             from
                 produto tab
             inner join unidadeMedida tab1 on(tab.idunidade = tab1.idunidadeMedida)
             inner join produtoEmbalagem tab2 on(tab.idproduto = tab2.idproduto)
             inner join produtoStore tab3 on(tab.idproduto = tab3.idproduto)
             inner join produtoPrice tab4 on(tab.idproduto = tab4.idproduto)
             inner join produtoImpostos tab5 on(tab.idproduto = tab5.idproduto)
             inner join entradaItem item on(tab.idProduto = item.idProduto  and tab2.barra = item.idProduto)
             inner join cst on(tab5.cst = cst.idCst)
             inner join cfop on(item.cfop = cfop.cfop)
where
             (tab2.defaultVenda = "s"  or tab.idProduto = tab2.barra) and
             tab3.Idloja = idLoja and
             tab4.Idloja = idLoja and
             tab5.Idloja = idLoja and
             item.idEntrada = find;

  when 2 then

select
                          tab.IdProduto,
                          tab.Nome,
                          tab1.unidade,
                          tab2.barra,
                          item.`identradaItem` ,
                          item.`identrada` ,
                          truncate(item.`custoLiquido`,2),
                          truncate(item.`custoBruto`,2),
                          truncate(item.`custoNota`,2),
                          truncate(item.`custoNotaTotal`,2),
                          truncate(item.`custoReposicao`,2),
                          truncate(item.`custoTotal`,2),
                          truncate(item.`discount1`,2),
                          truncate(item.`discount2`,2),
                          truncate(item.`discount3`,2),
                          truncate(item.`discountValue`,2),
                          truncate(item.`acrescimo`,2),
                          truncate(item.`bonificacao`,2),
                          truncate(item.`despesasNaoTributadas`,2),
                          truncate(item.`despesasTributadas`,2),
                          item.`chaveEmbalagem` ,
                          item.`barra` ,
                          item.`idunidadeMedida`,
                          item.`entregue`,
                          truncate(item.`financeiro`,2),
                          truncate(item.`frete`,2),
                          truncate(item.`icmsEntrada`,2),
                          truncate(item.`reducaoEntrada`,2),
                          truncate(item.`icmsFrete`,2),
                          truncate(item.`icmsSaida`,2),
                          truncate(item.`reducaoSaida`,2),
                          truncate(item.`ipi`,2),
                          truncate(item.`priceVenda`,2),
                          item.`quantidade`,
                          truncate(item.`sugestao`,2),
                          truncate(item.`valorIpi`,2),
                          truncate(item.`substituicao`,2),
                          truncate(item.`lucro`,2),
                          truncate(item.`lucroValor`,2),
                          truncate(item.`lucroBruto`,2),
                          item.`quantidadeRecebida`,
                          item.`quantidadePendente`,
                          truncate(item.`creditoIcms`,2),
                          truncate(item.`creditoPis`,2),
                          truncate(item.`creditoCofins`,2),
                          truncate(item.`valorFinanceiro`,2),
                          truncate(item.`valorFrete`,2),
                          truncate(item.`sumFrete`,2),
                          item.`numeroNota`,
                          item.`serie`,
                          item.`diferencaQtty`,
                          truncate(item.`diferencaCustoLiqNota`,2),
                          truncate(item.`diferencaCustoTotalNota`,2),
                          item.`dateInsert`,
                          truncate(item.`margem`,2),
                          truncate(item.`sumSt`,2),
                          truncate(item.`cstIpi`,2),
                          truncate(item.`cstPis`,2),
                          truncate(item.`cstCofins`,2),
                          truncate(item.`cstIcms`,2),
                          truncate(item.`icmsCreditoSt`,2),
                          truncate(item.`icmsTotalSt`,2),
                          item.`cfop`,
                          truncate(item.`cteInterna`,2),
                          truncate(item.`cteInterestadual`,2),
                          truncate(item.`valorIcmsSubstituicao`,2),
                          truncate(item.`baseCalculoSubstituicao`,2),
                          truncate(item.`basePis`,2),
                          truncate(item.`baseCofins`,2),
                          truncate(item.`valorPis`,2),
                          truncate(item.`valorCofins`,2),
                          item.`estoque`,
                          truncate(item.`valorIpiTotal`,2),
                          truncate(item.`baseIcms`,2),
                          truncate(item.`custoLiquidoAnterior`,2),
                          truncate(item.`lucroAnterior`,2),
                          truncate(item.`custoTransferencia`,2),
                          truncate(item.`bonificacaoValor`,2),
                          item.`validade`,
                          item.`flagRecebe`,
                          item.typeAliquota,
                          cfop.nome,
                          ifnull(cst.idCst,"") cst,
                          ifnull(tab6.codigo,"") ipi,
                          ifnull(tab7.codigo,"") pis,
                          ifnull(tab8.codigo,"") cofins, truncate(item.vendo,2), tab2.quantidade
             from
                 produto tab
             inner join unidadeMedida tab1 on(tab.idunidade = tab1.idunidadeMedida)
             inner join produtoEmbalagem tab2 on(tab.idproduto = tab2.idproduto)
             inner join produtoStore tab3 on(tab.idproduto = tab3.idproduto)
             inner join produtoPrice tab4 on(tab.idproduto = tab4.idproduto)
             inner join produtoImpostos tab5 on(tab.idproduto = tab5.idproduto)
             inner join entradaItem item on(tab.idProduto = item.idProduto)
             inner join cst on(item.cstIcms = cst.idCst)
             inner join cfop on(item.cfop = cfop.cfop)
             left join cstIpi tab6 on (item.`cstIpi`=tab6.idCstIpi)
             left join cstPis tab7 on (item.`cstPis`=tab7.idCstPis)
             left join cstCofins tab8 on (item.`cstCofins`=tab8.idCstCofins)
where
             if(varEan=1,tab2.defaultVenda = "s",tab2.defaultCompra='s')  and
             tab3.Idloja = idLoja and
             tab4.Idloja = idLoja and
             tab5.Idloja = idLoja and
             item.idEntrada = find and item.idEntradaItem=seq;
             when 3 then

select
       item.idEntradaItem,
       tab.IdProduto,
       tab.Nome,
       tab5.spedNcm,
       item.csticms,
       item.cfop,
       tab1.unidade,
       item.quantidade,
       truncate(item.CustoBruto,2),
       truncate(item.CustoNota,2),
       truncate(item.baseIcms,2),
       truncate(item.creditoIcms,2),
       truncate(item.ValorIpi,2),
       truncate(tab5.Tributacao,2),
       truncate(item.ipi,2)

             from
                 produto tab
             inner join unidadeMedida tab1 on(tab.idunidade = tab1.idunidadeMedida)
             inner join produtoEmbalagem tab2 on(tab.idproduto = tab2.idproduto)
             inner join produtoStore tab3 on(tab.idproduto = tab3.idproduto)
             inner join produtoPrice tab4 on(tab.idproduto = tab4.idproduto)
             inner join produtoImpostos tab5 on(tab.idproduto = tab5.idproduto)
             inner join entradaItem item on(tab.idProduto = item.idProduto)
             inner join cst on(tab5.cst = cst.idCst)
             inner join cfop on(item.cfop = cfop.cfop)
where
             tab2.defaultVenda = "s" and
             tab3.Idloja = idLoja and
             tab4.Idloja = idLoja and
             tab5.Idloja = idLoja and
             item.idEntrada = find;

            when 4 then
select
                          tab.IdProduto,
                          tab.Nome,
                          tab1.unidade,
                          tab2.barra,
                          item.`identradaItem` ,
                          item.`identrada` ,
                          truncate(item.`custoLiquido`,2),
                          truncate(item.`custoBruto`,2),
                          truncate(item.`custoNota`,2),
                          truncate(item.`custoNotaTotal`,2),
                          truncate(item.`custoReposicao`,2),
                          truncate(item.`custoTotal`,2),
                          truncate(item.`discount1`,2),
                          truncate(item.`discount2`,2),
                          truncate(item.`discount3`,2),
                          truncate(item.`discountValue`,2),
                          truncate(item.`acrescimo`,2),
                          truncate(item.`bonificacao`,2),
                          truncate(item.`despesasNaoTributadas`,2),
                          truncate(item.`despesasTributadas`,2),
                          item.`chaveEmbalagem` ,
                          item.`barra` ,
                          item.`idunidadeMedida`,
                          item.`entregue`,
                          item.`financeiro`,
                          truncate(item.`frete`,2),
                          truncate(item.`icmsEntrada`,2),
                          truncate(item.`reducaoEntrada`,2),
                          truncate(item.`icmsFrete`,2),
                          truncate(item.`icmsSaida`,2),
                          truncate(item.`reducaoSaida`,2),
                          truncate(item.`ipi`,2),
                          truncate(item.`priceVenda`,2),
                          item.`quantidade`,
                          truncate(item.`sugestao`,2),
                          truncate(item.`valorIpi`,2),
                          truncate(item.`substituicao`,2),
                          truncate(item.`lucro`,2),
                          truncate(item.`lucroValor`,2),
                          truncate(item.`lucroBruto`,2),
                          item.`quantidadeRecebida`,
                          item.`quantidadePendente`,
                          truncate(item.`creditoIcms`,2),
                          truncate(item.`creditoPis`,2),
                          truncate(item.`creditoCofins`,2),
                          truncate(item.`valorFinanceiro`,2),
                          truncate(item.`valorFrete`,2),
                          truncate(item.`sumFrete` ,2),
                          item.`numeroNota`,
                          item.`serie`,
                          item.`diferencaQtty`,
                          truncate(item.`diferencaCustoLiqNota`,2),
                          truncate(item.`diferencaCustoTotalNota`,2),
                          item.`dateInsert`,
                          item.`margem`,
                          item.`sumSt`,
                          item.`cstIpi` ,
                          item.`cstPis` ,
                          item.`cstCofins` ,
                          item.`cstIcms`,
                          truncate(item.`icmsCreditoSt`,2),
                          truncate(item.`icmsTotalSt`,2),
                          item.`cfop`,
                          truncate(item.`cteInterna`,2),
                          truncate(item.`cteInterestadual`,2),
                          truncate(item.`valorIcmsSubstituicao`,2),
                          truncate(item.`baseCalculoSubstituicao`,2),
                          truncate(item.`basePis`,2),
                          truncate(item.`baseCofins`,2),
                          truncate(item.`valorPis`,2),
                          truncate(item.`valorCofins`,2),
                          item.`estoque`,
                          truncate(item.`valorIpiTotal`,2),
                          truncate(item.`baseIcms`,2),
                          truncate(item.`custoLiquidoAnterior`,2),
                          truncate(item.`lucroAnterior`,2),
                          truncate(item.`custoTransferencia`,2),
                          truncate(item.`bonificacaoValor`,2),
                          item.`validade`,
                          item.`flagRecebe`,
                          item.typeAliquota,
                          cfop.nome,
                          ifnull(cst.idCst,"") cst,
                          ifnull(tab6.codigo,"") ipi,
                          ifnull(tab7.codigo,"") pis,
                          ifnull(tab8.codigo,"") cofins, truncate(item.vendo,2)
             from
                 produto tab
             inner join unidadeMedida tab1 on(tab.idunidade = tab1.idunidadeMedida)
             inner join produtoEmbalagem tab2 on(tab.idproduto = tab2.idproduto)
             inner join produtoStore tab3 on(tab.idproduto = tab3.idproduto)
             inner join produtoPrice tab4 on(tab.idproduto = tab4.idproduto)
             inner join produtoImpostos tab5 on(tab.idproduto = tab5.idproduto)
             inner join entradaItem item on(tab.idProduto = item.idProduto)
             inner join cst on(item.cstIcms = cst.idCst)
             inner join cfop on(item.cfop = cfop.cfop)
             left join cstIpi tab6 on (item.`cstIpi`=tab6.idCstIpi)
             left join cstPis tab7 on (item.`cstPis`=tab7.idCstPis)
             left join cstCofins tab8 on (item.`cstCofins`=tab8.idCstCofins)
where
             tab2.defaultVenda = "s" and
             tab3.Idloja = idLoja and
             tab4.Idloja = idLoja and
             tab5.Idloja = idLoja and
             item.idEntrada = find and (seq=0 or item.idEntradaItem=seq);
end case;
end $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `conector_find_itemNfSaida`
--

DROP PROCEDURE IF EXISTS `conector_find_itemNfSaida`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='' */ $$
CREATE DEFINER=`master`@`localhost` PROCEDURE `conector_find_itemNfSaida`(in tipo integer, in find_loja integer, in find varchar(45), in seq varchar(45))
begin
case tipo
  when 1 then

select
               item.`idnfItem`,

               tab.IdProduto,
               tab.Nome,
               ifnull(tab5.spedNcm,"") AS NCM,
               item.`cstIcms`,
               item.`cfop`,
               tab1.unidade,
               item.`quantidade`,
               truncate(item.`priceVenda`,2),
               truncate(item.`valorTotalNota`,3),
               truncate(item.`baseCalculo`,2),
               truncate(item.`icms`,2),
               truncate(item.`valorIpi`,2),
               truncate(item.`aliquota`,2),
               truncate(item.`ipi`,2),
               ifnull(item.origemMercadoria,"0"),
               item.reducaoIcmsSt,
               item.baseCalculoIcmsSubstituicao,
               item.aliquotaIcmsSt,
               item.valorIcmsSubstituicao,
               item.reducao,
               mid(tab7.codigo,2,2),
               truncate(item.basePis,2),
               truncate(item.valorPis,2),
               mid(tab8.codigo,2,2),
               truncate(item.baseCofins,2),
               truncate(item.valorCofins,2),truncate((truncate(item.`icms`,2)+truncate(item.valorCofins,2)+truncate(item.valorPis,2)),2)

   
             from
                 produto tab
             inner join unidadeMedida tab1 on(tab.idunidade = tab1.idunidadeMedida)
             inner join produtoEmbalagem tab2 on(tab.idproduto = tab2.idproduto)
             inner join produtoStore tab3 on(tab.idproduto = tab3.idproduto)
             inner join produtoPrice tab4 on(tab.idproduto = tab4.idproduto)
             inner join produtoImpostos tab5 on(tab.idproduto = tab5.idproduto)
             left join spedNcm on(tab5.spedNcm =spedNcm.idSpedNcm)
             inner join nfItem item on(tab.idProduto = item.idProduto)
             inner join cst on(item.cstIcms = cst.idCst)
             inner join cfop on(item.cfop = cfop.cfop)
             left join cstIpi tab6 on (item.`cstIpi`=tab6.codigo)
             left join cstPis tab7 on (item.`cstPis`=tab7.codigo)
             left join cstCofins tab8 on (item.`cstCofins`=tab8.codigo)
where
             tab2.defaultVenda = "s" and
             tab3.Idloja = find_loja and
             tab4.Idloja = find_loja and
             tab5.Idloja = find_loja and
             item.idnf = find and (seq=0 or item.idNfItem=seq);
  when 2 then
select
               lpad(tab.IdProduto,13,0),
               tab.Nome,
               tab1.unidade,
               lpad(tab2.barra,13,0),
               item.`idnf`,
               item.`idnfItem`,
               truncate(item.`valorLiquido`,2),
               truncate(item.`priceOriginal`,2),
               truncate(item.`priceVenda`,2),
               truncate(item.`priceCusto`,2),
               item.`estoque`,
               item.`data`,
               item.`peso`,
               truncate(item.`aliquota`,2),
               truncate(item.`icms`,2),
               truncate(item.`baseCalculo`,2),
               truncate(item.`reducao`,2),
               item.`quantidade`,
               item.`idunidadeMedida`,
               item.`cfop`,
               concat(cst.idCst , " | " , cst.descricao),
               ifnull(item.`cstPis`,""),
               truncate(item.`valorPis`,2),
               truncate(item.`basePis`,2),
               ifnull(item.`cstCofins`,""),
               truncate(item.`valorCofins`,2),
               truncate(item.`baseCofins`,2),
               ifnull(item.`cstIpi`,""),
               truncate(item.`ipi`,2),
               truncate(item.`valoripi`,2),
               truncate(item.`baseIpi`,2),
               truncate(item.`desconto`,2),
               truncate(item.`descontoValor`,2),
               truncate(item.`acrescimo`,2),
               truncate(item.`acrescimoValor`,2),
               truncate(item.`aliquotaIcmsSt`,2),
               truncate(item.`baseCalculoIcmsSubstituicao`,2),
               truncate(item.`valorIcmsSubstituicao`,2),
               truncate(item.`reducaoIcmsSt`,2),
               truncate(item.`margem`,2),
               truncate(item.`valorTotalProduto`,2),
               truncate(item.`valorTotalNota`,2),
               truncate(item.`valorTotalLiquido`,2),
               item.`fornecedor`,
               item.`idsetor`,
               item.`tributacao`,
                cfop.nome,
                ifnull(cst.idCst,"") cst,
                ifnull(tab6.codigo,"") ipi,
                ifnull(tab7.codigo,"") pis,
                ifnull(tab8.codigo,"") cofins,
                ifnull(tab7.descricao,""),
                ifnull(tab8.descricao,""),
                ifnull(tab6.descricao,""),
               ifnull(tab5.spedNcm,"") AS NCM,
               truncate(item.ipiValor,2),
               item.chaveEntrada,
               truncate(item.valorIPI,2),
               truncate(item.valorFrete,2),
               item.idGenero,
               item.Seguro, ifnull(item.origemMercadoria,"0")
             from
                 produto tab
             inner join unidadeMedida tab1 on(tab.idunidade = tab1.idunidadeMedida)
             inner join produtoEmbalagem tab2 on(tab.idproduto = tab2.idproduto)
             inner join produtoStore tab3 on(tab.idproduto = tab3.idproduto)
             inner join produtoPrice tab4 on(tab.idproduto = tab4.idproduto)
             inner join produtoImpostos tab5 on(tab.idproduto = tab5.idproduto)
             inner join nfItem item on(tab.idProduto = item.idProduto)
             inner join cst on(item.cstIcms = cst.idCst)
             inner join cfop on(item.cfop = cfop.cfop)
             left join cstIpi tab6 on (item.`cstIpi`=tab6.idCstIpi)
             left join cstPis tab7 on (item.`cstPis`=tab7.idCstPis)
             left join cstCofins tab8 on (item.`cstCofins`=tab8.idCstCofins)
where
             tab2.defaultVenda = "s" and
             tab3.Idloja = find_loja and
             tab4.Idloja = find_loja and
             tab5.Idloja = find_loja and
             item.idnf = find and item.idNfItem=seq;

  when 3 then

  select condPgto from nf where nf.nf=find into @condPgto;

  select descricao from finalizadora where idFinalizadora=@condPgto into @descricao;

  select
      ifnull(sum(tab.quantidade),0.00) AS QTTY,
      ifnull(count(tab.idProduto),0.00) AS CODIGO,
      ifnull(sum(tab.peso),0.00) AS PES,
      ifnull(sum(truncate(tab.descontoValor,2)),0.00) AS DESCONTO_VALOR,
      ifnull(sum(truncate(tab.acrescimoValor,2)),0.00) AS ACRESC,
      ifnull(sum(truncate(tab.baseCalculo,2)),0.00) AS BASE_CALCULO,
      ifnull(sum(truncate(tab.icms,2)),0.00) AS ICMS,
      ifnull(sum(truncate(tab.baseCalculoIcmsSubstituicao,2)),0.00) AS BASE_ICMS_ST,
      ifnull(sum(truncate(tab.valorIcmsSubstituicao,2)),0.00) AS ICMS_ST,
      ifnull(sum(truncate(tab.valorTotalLiquido,2)),0.00) AS TOTAL_LIQUIDO,
      ifnull(sum(truncate(tab.valorTotalNota+tab.valorIcmsSubstituicao+tab.valorIpi+tab.valorFrete,2)),0.00) AS TOTAL_NOTA,
      ifnull(sum(truncate(tab.valorTotalProduto,2)),0.00) AS TOTAL_PRODUTOS,
      ifnull(sum(truncate(tab.valorIpi,2)),0.00) AS VALOR_IPI,
      ifnull(sum(truncate(tab.basePis,2)),0.00) AS BASE_PIS,
      ifnull(sum(truncate(tab.baseCofins,2)),0.00) AS BASE_COFINS,
      tab1.nr_nota,
      tab1.serie,
      ifnull(sum(truncate(tab.valorFrete,2)),0.00),
      tab.cfop,
      ifnull(sum(truncate(tab.valorCofins,2)),0.00) AS VALOR_COFINS,
      ifnull(sum(truncate(tab.valorPis,2)),0.00) AS VALOR_PIS,
      ifnull(@descricao,1)
      from nfitem tab
           inner join nf tab1 on(tab.idNf = tab1.nf)
      where tab.idnf=find
      group by
             tab1.nr_nota,
             tab1.serie;

    when 4 then
    select tab.nf,
    tab.`loja`,
    tab.`idcliente`,
    tab.`idparamentro`,
    tab.`idtransportadora`,
    tab.`cfop`,
    tab.`idFuncionario`,
    tab.`idusuario`,
    tab.`idpedido`,
    tab.`nr_nota`,
    tab.`serie` ,
    tab.`emissao`,
    tab.`uf`,
    tab.`itens`,
    truncate(tab.`frete`,2),
    tab.`typeFrete`,
    tab.`impresso`,
    tab.`nr_impressao`,
    tab.`typenf`,
    ifnull(tab.`nr_nota_entrada`,""),
    ifnull(tab.`serie_entrada`,""),
    ifnull(tab.`statusNf`,""),
    tab.`restituicao`,
    tab1.descricao,
    tab2.razao,
    case tab3.idTipoPessoa when 1 then tab5.nome when 2 then tab6.razao when 3 then tab4.nome end
                from nf tab
                            inner join paramentro_faturamento tab1 on(tab.idParamentro = tab1.idParamentro)
                            inner join loja tab2 on(tab.loja = tab2.idLoja)
                            inner join cliente tab3 on(tab.idCliente = tab3.idCliente)
                            left join rural tab4 on(tab3.idCliente = tab4.idCliente)
                            left join fisica tab5 on(tab3.idCliente = tab5.idCliente)
                            left join juridica tab6 on(tab3.idCliente = tab6.idCliente)
                        where tab.nf=find;
    when 5 then
select

              tab.IdProduto,
              tab2.barra,
              
               tab.Nome,
               ifnull(tab5.spedNcm,"") AS NCM,
               item.idGenero,
               item.`cfop`,
               tab1.unidade,
               item.`quantidade`,
               truncate(item.`priceVenda`,2),
               truncate(item.`valorTotalProduto`,2),
	             tab2.barra,13,0,
               tab1.unidade,
               item.`quantidade`,
               truncate(item.`priceVenda`,2),
               truncate(item.valorFrete,2),
               truncate(item.Seguro,2),
               truncate(item.`descontoValor`,2),
	       truncate(item.`acrescimoValor`,2),
	       1,
           item.sequencia
             from
                 produto tab
             inner join unidadeMedida tab1 on(tab.idunidade = tab1.idunidadeMedida)
             inner join produtoEmbalagem tab2 on(tab.idproduto = tab2.idproduto)
             inner join produtoStore tab3 on(tab.idproduto = tab3.idproduto)
             inner join produtoPrice tab4 on(tab.idproduto = tab4.idproduto)
             inner join produtoImpostos tab5 on(tab.idproduto = tab5.idproduto)
             inner join nfItem item on(tab.idProduto = item.idProduto)
             inner join cst on(item.cstIcms = cst.idCst)
             inner join cfop on(item.cfop = cfop.cfop)
             left join cstIpi tab6 on (item.`cstIpi`=tab6.idCstIpi)
             left join cstPis tab7 on (item.`cstPis`=tab7.idCstPis)
             left join cstCofins tab8 on (item.`cstCofins`=tab8.idCstCofins)
where
             tab2.defaultVenda = "s" and
             tab3.Idloja = find_loja and
             tab4.Idloja = find_loja and
             tab5.Idloja = find_loja and
             item.idnf = find and (seq=0 or item.idNfItem=seq);
    when 6 then

select tab.`loja`,
    tab.`idcliente`,
    tab.`idparamentro`,
    tab.`idtransportadora`,
    tab.`cfop`,
    tab.`idFuncionario`,
    tab.`idusuario`,
    tab.`idpedido`,
    tab.`nr_nota`,
    tab.`serie` ,
    tab.`emissao`,
    tab.`uf`,
    estado.codigoUf,
    truncate(tab.`frete`,2),
    tab.`typeFrete`,
    tab.`impresso`,
    tab.`nr_impressao`,
    tab.`typenf`,
    ifnull(tab.`nr_nota_entrada`,""),
    ifnull(tab.`serie_entrada`,""),
    ifnull(tab.`statusNf`,""),
    tab.`restituicao`,
    tab1.descricao,
    tab2.razao,
    case tab3.idTipoPessoa when 1 then tab5.nome when 2 then tab6.razao when 3 then tab4.nome end,
    case tab1.flagParamentro when "v" then "venda"
                             when "t" then "transferencia"
                             when "r" then "troca"
                             when "d" then "devolucao"
                             when "c" then "consumo"
                             when "p" then "perda"
                             when "q" then "quebra"
                             when "e" then "entrada"
                             when "f" then "franquia"
                             when "s" then "simples faturamento"
                             when "n" then "conserto"
                             when "w" then "servico"
                             when "u" then "entrega futura"
                             when "o" then "orcamento"
                             when "b" then "brinde Doacao"
                             when "x" then "producao" end,
                             case tab7.typeVenda when 'AV' then 0 when 'AP' then 1 else 2 end,
                             tab.modNotaFiscal,
                             tab.typenf,
                             if(tab3.uf = "MG", 1, 2),
                             tab3.idSpedMunicipio,
                             1 as formatImp,
                             1 as TipoEmissaoNfe,
                             2 as IdentificacaoAMB,
                             1 as FinalizadadeEmissao,
                             0 as IndicadorConsumidor,
                             1 as IndicadorPress,
                             0 as ProcessoEmissao,
                             "1.0.192" as VersaoAplic, tab1.descricao



                from nf tab
                            inner join paramentro_faturamento tab1 on(tab.idParamentro = tab1.idParamentro)
                            inner join loja tab2 on(tab.loja = tab2.idLoja)
                            inner join cliente tab3 on(tab.idCliente = tab3.idCliente)
                            left join rural tab4 on(tab3.idCliente = tab4.idCliente)
                            left join fisica tab5 on(tab3.idCliente = tab5.idCliente)
                            left join juridica tab6 on(tab3.idCliente = tab6.idCliente)
                            left join finalizadora tab7 on(tab.condPgto = tab7.idFinalizadora)
                            inner join estado on(tab.uf = estado.uf)
                        where tab.nf=find;
end case;
end $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `conector_find_itens_inventario`
--

DROP PROCEDURE IF EXISTS `conector_find_itens_inventario`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='' */ $$
CREATE DEFINER=`root`@`%` PROCEDURE `conector_find_itens_inventario`(in tipo smallint, in findloja int,
                                                in findsetor int,
                                                in findgrupo int,
                                                in findcategoria int,
                                                in findfornecedor int,
                                                in conducao smallint, in find_inventario double,find_produto varchar(45),
                                                in find_intervalo smallint,
                                                in intervalo_inicio double,
                                                in intervalo_fim double)
begin

case tipo
  when 0 then
select tab.idproduto as 'Codigo',
       tab.nome as 'Descricao',
       tab2.quantidade as 'Qtty Sistema',
       item.quantidadeEncontrada as 'Qtty Contada',
       
       if(item.quantidadeAtual<0 && item.quantidadeEncontrada>0,(item.quantidadeAtual-(-1*item.quantidadeEncontrada)),(item.quantidadeAtual-item.quantidadeEncontrada)) as 'Divergencia',
       tab3.priceVenda as 'Preco',
       truncate((tab2.quantidade*tab3.priceVenda),2) as 'Total',
       truncate(((item.quantidadeEncontrada*item.precoVenda)+(tab2.quantidade*tab3.priceVenda)),2) as 'Valor Divergente',
       item.contador as "No Contagem",
       item.contagem1 as 'Contagem-1',item.contagem2 'Contagem-2',item.contagem3 'Contagem-3',item.contagem4 'Contagem-4',item.contagem5 'Contagem-5',item.contagem6 'Contagem-6', item.idInventarioItem
        from produto tab
       inner join produtostore tab1 on (tab1.idproduto = tab.idproduto)
       inner join produtoestoques tab2 on (tab2.idproduto = tab.idproduto) and (tab2.idloja = tab1.idloja)
       inner join produtoprice tab3 on (tab3.idproduto = tab.idproduto) and (tab3.idloja = tab1.idloja)
       inner join inventarioItem item on(tab.idProduto = item.idProduto)
       inner join inventario inv on(item.idInventario = inv.idInventario and inv.idLoja = tab3.idLoja)
where  inv.idInventario = find_inventario
       and item.idInventario = find_inventario
       and tab1.idloja = findloja
       and tab2.idloja = findloja
       and (findsetor = 0 or tab.idsetor = findsetor )
       and (findgrupo = 0 or tab.idgrupo = findgrupo)
       and (findcategoria = 0 or tab.idcategoria = findcategoria)
       and (findfornecedor = 0 or tab.idFornecedor = findfornecedor) and tab.nome like concat("%",find_produto,"%");
         when 1 then
select tab.idproduto as 'Codigo',
       tab.nome as 'Descricao',
       tab2.quantidade as 'Qtty Sistema',
       item.quantidadeEncontrada as 'Qtty Contada',
       
       if(item.quantidadeAtual<0 && item.quantidadeEncontrada>0,
         (item.quantidadeAtual-(-1*item.quantidadeEncontrada)),(item.quantidadeAtual-item.quantidadeEncontrada)) as 'Divergencia',
       tab3.priceVenda as 'Preco',
       truncate((tab2.quantidade*tab3.priceVenda),2) as 'Total',
       truncate(((item.quantidadeEncontrada*item.precoVenda)+(tab2.quantidade*tab3.priceVenda)),2) as 'Valor Divergente',
       item.contador as "No Contagem",
       item.contagem1 'Contagem-1',item.contagem2 'Contagem-2',item.contagem3 'Contagem-3',item.contagem4 'Contagem-4',item.contagem5 'Contagem-5',item.contagem6 'Contagem-6', item.idInventarioItem
        from produto tab
       inner join produtostore tab1 on (tab1.idproduto = tab.idproduto)
       inner join produtoestoques tab2 on (tab2.idproduto = tab.idproduto) and (tab2.idloja = tab1.idloja)
       inner join produtoprice tab3 on (tab3.idproduto = tab.idproduto) and (tab3.idloja = tab1.idloja)
       inner join inventarioItem item on(tab.idProduto = item.idProduto)
       inner join inventario inv on(item.idInventario = inv.idInventario and inv.idLoja = tab3.idLoja)
where  inv.idInventario = find_inventario
       and item.idInventario = find_inventario
       and tab1.idloja = findloja
       and tab2.idloja = findloja
       and (findsetor = 0 or tab.idsetor = findsetor )
       and (findgrupo = 0 or tab.idgrupo = findgrupo)
       and (findcategoria = 0 or tab.idcategoria = findcategoria)
       and (findfornecedor = 0 or tab.idFornecedor = findfornecedor);
  when 2 then

select tab.idproduto,
       tab2.quantidade as "QuantidadeAtual",
       tab3.priceVenda as "Valor",
       tab3.custoliquido as "Reposicao",
       tab3.custoliquido as "Custo Liquido",
       tab3.priceVenda as "Valor",
       "0.000" as "QuantidadeEncontrada", 
       truncate((tab2.quantidade*tab3.priceVenda),2) as Total,
       tab.idSetor,
       tab.idGrupo,
       tab.idCategoria,
       tab.idFornecedor,
       if(tab2.quantidade > 0, 0-tab2.quantidade, tab2.quantidade) as Divergencia,
       "0.00" as valorDivergente,
       "0" as 'contagem1',
       "0" as 'contagem2',
       "0" as 'contagem3',
       "" as "observacao"
        from produto tab
       inner join produtostore tab1 on (tab1.idproduto = tab.idproduto)
       inner join produtoestoques tab2 on (tab2.idproduto = tab.idproduto) and (tab2.idloja = tab1.idloja)
       inner join produtoprice tab3 on (tab3.idproduto = tab.idproduto) and (tab3.idloja = tab1.idloja)
        where
       tab1.idloja = findloja
       and (findsetor = 0 or tab.idsetor = findsetor )
       and (findgrupo = 0 or tab.idgrupo = findgrupo)
       and (findcategoria = 0 or tab.idcategoria = findcategoria)
       and (findfornecedor = 0 or tab.idFornecedor = findfornecedor) and
        if(conducao = 0, 1=1,if(conducao=1, tab2.quantidade>0, tab2.quantidade<0)) and
        if(find_intervalo = 0,0=0,(tab.idProduto>intervalo_inicio and tab.idProduto < intervalo_fim));
  when 3 then
select tab.idproduto,
       tab.nome,
       tab2.quantidade,
       item.quantidadeEncontrada as QttyContada,
       if(item.quantidadeAtual<0 && item.quantidadeEncontrada>0,(item.quantidadeAtual-(-1*item.quantidadeEncontrada)),(item.quantidadeAtual-item.quantidadeEncontrada)) as Diver,

       tab3.priceVenda,
       truncate((tab2.quantidade*tab3.priceVenda),2) as Total,
       truncate(((item.quantidadeEncontrada*item.precoVenda)-(tab2.quantidade*tab3.priceVenda)),2) as valorDivergente,
       tab.nome
        from produto tab
       inner join produtostore tab1 on (tab1.idproduto = tab.idproduto)
       inner join produtoestoques tab2 on (tab2.idproduto = tab.idproduto) and (tab2.idloja = tab1.idloja)
       inner join produtoprice tab3 on (tab3.idproduto = tab.idproduto) and (tab3.idloja = tab1.idloja)
       inner join inventarioItem item on(tab.idProduto = item.idProduto)
       inner join inventario inv on(item.idInventario = inv.idInventario and inv.idLoja = tab3.idLoja)
where  inv.idInventario = find_inventario
       and item.idInventario = find_inventario
       and tab1.idloja = findloja
       and tab2.idloja = findloja
       and (findsetor = 0 or tab.idsetor = findsetor )
       and (findgrupo = 0 or tab.idgrupo = findgrupo)
       and (findcategoria = 0 or tab.idcategoria = findcategoria)
       and (findfornecedor = 0 or tab.idFornecedor = findfornecedor) and item.idProduto=find_produto;
  when 4 then

if((select count(idProduto) from inventarioItem where idProduto=find_produto and idInventario=find_inventario) = 0)then
select tab.idproduto,
       tab2.quantidade as "QuantidadeAtual",
       tab3.priceVenda as "Valor",
       tab3.custoliquido as "Reposicao",
       tab3.custoliquido as "Custo Liquido",
       tab3.priceVenda as "Valor",
       "0.000" as "QuantidadeEncontrada", 
       truncate((tab2.quantidade*tab3.priceVenda),2) as Total,
       tab.idSetor,
       tab.idGrupo,
       tab.idCategoria,
       tab.idFornecedor,
       if(tab2.quantidade > 0, 0-tab2.quantidade, tab2.quantidade) as Divergencia,
       "0.00" as valorDivergente,
       "0" as 'contagem1',
       "0" as 'contagem2',
       "0" as 'contagem3',
       "" as "observacao"
        from produto tab
       inner join produtostore tab1 on (tab1.idproduto = tab.idproduto)
       inner join produtoestoques tab2 on (tab2.idproduto = tab.idproduto) and (tab2.idloja = tab1.idloja)
       inner join produtoprice tab3 on (tab3.idproduto = tab.idproduto) and (tab3.idloja = tab1.idloja)
        where
       tab1.idloja = findloja
       and (findsetor = 0 or tab.idsetor = findsetor )
       and (findgrupo = 0 or tab.idgrupo = findgrupo)
       and (findcategoria = 0 or tab.idcategoria = findcategoria)
       and (findfornecedor = 0 or tab.idFornecedor = findfornecedor) and
        if(conducao = 0, 1=1,if(conducao=1, tab2.quantidade>0, tab2.quantidade<0)) and tab.idProduto=find_produto;
else
    select 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0;
end if;
  end case;
end $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `conector_find_lacamentoCheque`
--

DROP PROCEDURE IF EXISTS `conector_find_lacamentoCheque`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='' */ $$
CREATE DEFINER=`master`@`localhost` PROCEDURE `conector_find_lacamentoCheque`(in tipo int, in find varchar(45))
begin
case tipo
    when 1 then
select `idtypeLancamento`,
  `descricao`,concat(`idtypeLancamento`," | ",`descricao`) from `typeLancamento` order by 1;
  when 2 then
select `idtypeLancamento`,
  `descricao` from `typeLancamento`
                    where `idtypeLancamento`=find;
when 3 then
select `idtypeLancamento`,
  `descricao` from `typeLancamento`
                    where `descricao`=find;
      when 4 then              
select `idtypeLancamento`,
  `descricao` from `typeLancamento`
                    where `descricao` like concat(find,'%');
end case;
end $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `conector_find_licenca_ecf`
--

DROP PROCEDURE IF EXISTS `conector_find_licenca_ecf`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='' */ $$
CREATE DEFINER=`master`@`localhost` PROCEDURE `conector_find_licenca_ecf`(in tipo smallint, in cnpj double, in pv int)
begin
case tipo
    when 1 then
            select tab.caixa,tab.numeroSerie,date_format(tab.aquisicao,'%d/%m/%Y'),date_format(tab.liberacao,'%d/%m/%Y'),tab.inativo,tab2.modelo,tab.cnpj from licenca_Ecf tab,loja tab1, modelo_ecf tab2 where tab.cnpj=tab1.cnpj and tab.cnpj=cnpj and tab.caixa=pv and tab.modelo=tab2.idMarca;

    when 2 then
            select tab.cnpj,tab1.razao,tab.numeroSerie,tab.caixa,tab.inativo,tab2.modelo,tab.situacao from licenca_Ecf tab,loja tab1, modelo_ecf tab2 where tab.cnpj=tab1.cnpj and tab.cnpj=cnpj  and tab.modelo=tab2.idMarca;

    when 3 then
            select tab.caixa,tab.numeroSerie,date_format(tab.aquisicao,'%d/%m/%Y'),date_format(tab.liberacao,'%d/%m/%Y'),tab.inativo,tab2.modelo,tab.cnpj from licenca_Ecf tab,loja tab1, modelo_ecf tab2 where tab.cnpj=tab1.cnpj and tab.cnpj=cnpj and tab.modelo=tab2.idMarca;
end case;
end $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `conector_find_loja`
--

DROP PROCEDURE IF EXISTS `conector_find_loja`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='' */ $$
CREATE DEFINER=`master`@`localhost` PROCEDURE `conector_find_loja`(
                                               in tipo integer,
                                               in find_loja varchar(45)
                                     )
BEGIN
     case tipo
            when 1 then
  select
        loja.idloja as codigo,
        loja.razao,
        loja.abreviatura as fantasia,
        loja.cnpj,
        loja.ie,
        loja.iemunicipal,
        loja.type,
        loja.idestado,
        loja.uf,
        loja.codigoMunicipio,
        loja.typeLoja,
    		loja.aliquotaPis,
		    loja.aliquotaCofins,
    		loja.controlaEstoque,
    		loja.typeCalculo,
    		loja.empresaTroca,
    		loja.aliquotaInss,
    		loja.aliquotaIss,
    		loja.matriz,
        loja.deposito,
    		loja.serieNota,
      	loja.numeroNota,
    		loja.atualizaCusto,
        loja.status,
        loja.ramo,
        ifnull(endereco.bairro,""),
        ifnull(endereco.complemento,""),
        ifnull(endereco.municipio,""),
        ifnull(endereco.estado,""),
        ifnull(endereco.numero,""),
        ifnull(endereco.cep,""),
        ifnull(endereco.idendereco,""),
        ifnull(endereco.sequencia,""),
        ifnull(endereco.idcepBairro,""),
        ifnull(endereco.idenderecoType,""),
        ifnull(endereco.logradouro,""),
        ifnull(loja.IdPais,""),
        ifnull(tipoComissao,"0"),
        ifnull(diasDevComissao,"0"),
        ifnull(tab3.codigoUf,"0"),
        ifnull(loja.SubSerie,""),
        ifnull(loja.numeroNotaSerie,"0")
      from loja
      left join endereco on(loja.idloja = endereco.idcliente)
      left join estado tab3 on(endereco.estado = tab3.uf)
  where
       loja.idloja=find_loja and if(endereco.sequencia is null, 1=1,endereco.sequencia=1);

	   when 2 then

          select
        loja.idloja as codigo,
        loja.razao,
        loja.abreviatura as fantasia,
        loja.cnpj,
        loja.ie,
        loja.iemunicipal,
        loja.type,
        loja.idestado,
        loja.uf,
        loja.codigoMunicipio,
        loja.typeLoja,
    		loja.aliquotaPis,
		    loja.aliquotaCofins,
    		loja.controlaEstoque,
    		loja.typeCalculo,
    		loja.empresaTroca,
    		loja.aliquotaInss,
    		loja.aliquotaIss,
    		loja.matriz,
        loja.deposito,
    		loja.serieNota,
      	loja.numeroNota,
    		loja.atualizaCusto,
        loja.status,
        loja.ramo,
        ifnull(endereco.bairro,""),
        ifnull(endereco.complemento,""),
        ifnull(endereco.municipio,""),
        ifnull(endereco.estado,""),
        ifnull(endereco.numero,""),
        ifnull(endereco.cep,""),
        ifnull(endereco.idendereco,""),
        ifnull(endereco.sequencia,""),
        ifnull(endereco.idcepBairro,""),
        ifnull(endereco.idenderecoType,""),
        ifnull(endereco.logradouro,""),
        ifnull(loja.IdPais,""),
        `valorRetencaoPisCofins`,
        `flagCalcAboutSTPisCofins`, ifnull(loja.SubSerie,""), ifnull(loja.numeroNotaSerie,"0")
      from loja
      left join endereco on(loja.idloja = endereco.idcliente)
  where
       loja.razao like concat(find_loja,"%") and if(endereco.sequencia is null,1=1, endereco.sequencia);
            when 3 then
  select
        loja.idloja as codigo,
        loja.razao,
        loja.abreviatura as fantasia,
        loja.cnpj,
        loja.ie,
        loja.iemunicipal,
        loja.type,
        loja.idestado,
        loja.uf,
        loja.codigoMunicipio,
        loja.typeLoja,
    		loja.aliquotaPis,
		    loja.aliquotaCofins,
    		loja.controlaEstoque,
    		loja.typeCalculo,
    		loja.empresaTroca,
    		loja.aliquotaInss,
    		loja.aliquotaIss,
    		loja.matriz,
        loja.deposito,
    		loja.serieNota,
      	loja.numeroNota,
    		loja.atualizaCusto,
        loja.status,
        loja.ramo,
        ifnull(endereco.bairro,""),
        ifnull(endereco.complemento,""),
        ifnull(endereco.municipio,""),
        ifnull(endereco.estado,""),
        ifnull(endereco.numero,""),
        ifnull(endereco.cep,""),
        ifnull(endereco.idendereco,""),
        ifnull(endereco.sequencia,""),
        ifnull(endereco.idcepBairro,""),
        ifnull(endereco.idenderecoType,""),
        ifnull(endereco.logradouro,""),
        ifnull(loja.SubSerie,""),
        ifnull(loja.numeroNotaSerie,"0")
      from loja
      left join endereco on(loja.idLoja = endereco.idcliente)
      inner join cliente on(loja.idLoja = cliente.idCliente)
  where
		( if(endereco.sequencia is null, 1=1,endereco.sequencia=1)) and cliente.idAtividade = 7;
        when 4 then
        select lojaNf
                    from loja
                            where loja.idloja=find_loja into @a;
        select razao
                    from loja
                            where loja.idloja=@a into @stringRazao;


        select
        loja.idloja as codigo,
        loja.razao,
        loja.abreviatura as fantasia,
        loja.cnpj,
        loja.ie,
        loja.iemunicipal,
        loja.type,
        loja.idestado,
        loja.uf,
        loja.codigoMunicipio,
        loja.typeLoja,
    		loja.aliquotaPis,
		    loja.aliquotaCofins,
    		loja.controlaEstoque,
    		loja.typeCalculo,
    		loja.empresaTroca,
    		loja.aliquotaInss,
    		loja.aliquotaIss,
    		loja.matriz,
        loja.deposito,
    		loja.serieNota,
      	loja.numeroNota,
    		loja.atualizaCusto,
        loja.status,
        loja.ramo,
        ifnull(endereco.bairro,""),
        ifnull(endereco.complemento,""),
        ifnull(endereco.municipio,""),
        ifnull(endereco.estado,""),
        ifnull(endereco.numero,""),
        ifnull(endereco.cep,""),
        ifnull(endereco.idendereco,""),
        ifnull(endereco.sequencia,""),
        ifnull(endereco.idcepBairro,""),
        ifnull(endereco.idenderecoType,""),
        ifnull(endereco.logradouro,""),
        ifnull(loja.IdPais,""),
        ifnull(loja.ieSubstituicao,""),
        ifnull(loja.lojaNf,""),
        ifnull(@stringRazao, ""),
        `valorRetencaoPisCofins`,
        `flagCalcAboutSTPisCofins`,
        custoOperacional,
        ifnull(tipoComissao,"0"),
        ifnull(diasDevComissao,"0"),
        ifnull(date_format(abertura, '%d%m%Y'),"00-00-0000"),
        ifnull(loja.SubSerie,""),
        ifnull(loja.numeroNotaSerie,"0"),loja.serieNfce, loja.numeroNotaConsumidor
      from loja
      left join endereco on(loja.idloja = endereco.idcliente)
  where
       loja.idloja=find_loja and if(endereco.sequencia is null, 1=1,endereco.sequencia=1);
      when 5 then
      select idCliente, razao from juridica;
     end case;
END $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `conector_find_lojaCard`
--

DROP PROCEDURE IF EXISTS `conector_find_lojaCard`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='' */ $$
CREATE DEFINER=`master`@`localhost` PROCEDURE `conector_find_lojaCard`(in tipo int, in find varchar(65), in id varchar(45))
begin
case tipo
    when 1 then
select 
       tab3.nome as Conta,
       tab1.razao,
       tab.fullStore
       from loja_card tab
              inner join loja tab1 on(tab.loja = tab1.idloja)
              inner join administradora tab2 on(tab.codigo = tab2.idadministradora)
              inner join conta tab3 on(tab.contaCorrente = tab3.idConta)
                                        where tab.codigo = find;
    when 2 then
select 
       tab.codigo,
       tab2.descricao,
       tab.loja,
       tab1.razao,
       tab.contaCorrente,
       tab3.razao as Conta,
       tab.fullStore
       from loja_card tab
              inner join loja tab1 on(tab.loja = tab1.idloja)
              inner join administradora tab2 on(tab.codigo = tab2.idadministradora)
              inner join contaCorrente tab3 on(tab.contaCorrente = tab3.idContaCorrente)
                                        where tab.codigo = find and tab.loja=id;
end case;
end $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `conector_find_lojaRelacionamento`
--

DROP PROCEDURE IF EXISTS `conector_find_lojaRelacionamento`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='' */ $$
CREATE DEFINER=`root`@`%` PROCEDURE `conector_find_lojaRelacionamento`(in tipo smallint(6), in origem double, in destino double)
begin
case tipo
  when 1 then
select if(flagRelacionamento=0,"ATUALIZA","ATUALIZADO"),
       tab1.Razao,
       tab2.Razao,
       tab.atualizaProduto,
       tab.ControlaEstoque,
       tab.atualizaPrice,
       tab.unificaEstoque, tab1.idLoja,tab2.idLoja

      from lojaRelacionamento tab
           inner join (select * from loja where idLoja=origem) tab1 on(tab.idLojaOrigem = tab1.idLoja)
           inner join (select * from loja) tab2 on(tab.idLojaDestino = tab2.idLoja)
                   where
                       tab.idLojaOrigem=origem;
    when 2 then
    select
       tab1.idLoja,
       tab1.Razao,
       tab2.Razao,
       tab.atualizaProduto,
       tab.ControlaEstoque,
       tab.atualizaPrice,
       tab.unificaEstoque

      from lojaRelacionamento tab
           inner join (select * from loja) tab1 on(tab.idLojaOrigem = tab1.idLoja)
           inner join (select * from loja) tab2 on(tab.idLojaDestino = tab2.idLoja)
                   where
                       tab1.idLoja=origem and tab2.idLoja=destino;
 end case;
end $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `conector_find_metodo`
--

DROP PROCEDURE IF EXISTS `conector_find_metodo`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='' */ $$
CREATE DEFINER=`master`@`localhost` PROCEDURE `conector_find_metodo`(
                                       in find varchar(45),
                                       in tipo int
                                     )
begin
case tipo
  when 1 then
select
    tab.idMetodo,
    tab.descricao,
    tab.status,
    ifnull(tab1.descricao,"TODOS") as Finalizadora,
    tab.abreviatura,
    tab.nroparcelas
  from
    metodo tab
    left join finalizadora tab1 on(tab.idFinalizadora = tab1.idfinalizadora)
   where tab.idMetodo = find order by 1;
  when 2 then
select
    tab.idMetodo,
    tab.descricao,
    tab.status,
    ifnull(tab1.descricao,"TODOS") as Finalizadora,
    tab.abreviatura,
    tab.nroparcelas
  from
    metodo tab
    left join finalizadora tab1 on(tab.idFinalizadora = tab1.idfinalizadora)
   where tab.descricao like concat(find,'%') order by 1;
  when 3 then
select
    tab.idMetodo,
    tab.descricao,
    tab.status,
    ifnull(tab1.descricao,"TODOS") as Finalizadora,
    tab.abreviatura,
    tab.nroparcelas
  from
    metodo tab
    left join finalizadora tab1 on(tab.idFinalizadora = tab1.idfinalizadora) order by 1;
  when 4 then
SELECT
    tab.idMetodo,
    tab.`idfinalizadora`,
    tab.`descricao`,
    tab.`abreviatura`,
    tab.`mult`,
    tab.`nroparcelas`,
    tab.`itaxa`,
    tab.`forcePasswd`,
    tab.`valueMin`,
    tab.`forceMinimoVenda`,
    round(tab.`minimoVenda`,2),
    tab.`forceEntrada`,
    tab.`carencia`,
    round(tab.`valueMinEntrada`,2),
    round(tab.`tac`,2),
    round(tab.`seguro`,2),
    round(tab.`financeiro`,2),
    round(tab.`itaxaEspecial`,2),
    round(tab.`inibeDiscount`,2),
    tab.`dayPgto`,
    ifnull(tab1.descricao,"TODOS") as Finalizadora,
    tab.`status`,tab.typeMetodo
  from
    metodo tab
    left join finalizadora tab1 on(tab.idFinalizadora = tab1.idfinalizadora)
  where
    tab.idMetodo = find;
end case;
end $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `conector_find_modelo`
--

DROP PROCEDURE IF EXISTS `conector_find_modelo`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='' */ $$
CREATE DEFINER=`root`@`localhost` PROCEDURE `conector_find_modelo`(in tipo smallint, in find varchar(45))
begin
            case tipo
                when 3 then
                select idMarca from modelo_ecf where modelo=find;
                when 0 then
                select modelo from modelo_ecf;
                when 1 then
                select concat(idMarca, ' - ',marca,' - ',modelo) from modelo_ecf;
                when 2 then
                select idMarca, marca, modelo from modelo_ecf where idMarca=find;
                end case;
            end $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `conector_find_motivo`
--

DROP PROCEDURE IF EXISTS `conector_find_motivo`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='' */ $$
CREATE DEFINER=`root`@`localhost` PROCEDURE `conector_find_motivo`(in tipo smallint, in find varchar(45))
begin
       case tipo
            when 1 then
                select idInventarioMotivo,descricao from inventarioMotivo;
            when 2 then
                select idInventarioMotivo,descricao from inventarioMotivo where idinventarioMotivo=find;
            when 3 then
                select idInventarioMotivo,descricao from inventarioMotivo where descricao=find;
                end case;
       end $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `conector_find_motivoCheque`
--

DROP PROCEDURE IF EXISTS `conector_find_motivoCheque`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='' */ $$
CREATE DEFINER=`master`@`localhost` PROCEDURE `conector_find_motivoCheque`(in tipo int, in find varchar(300))
begin
case tipo
when 1 then
select idMotivo,
        descricao
            from    
                motivo;
                when 2 then
select idMotivo,
        descricao
            from    
                motivo
                    where 
                        idMotivo=find;
                        when 3 then
select idMotivo,
        descricao
            from    
                motivo
                        where 
                            descricao = find;
                            end case;
end $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `conector_find_movimentacao`
--

DROP PROCEDURE IF EXISTS `conector_find_movimentacao`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='' */ $$
CREATE DEFINER=`master`@`localhost` PROCEDURE `conector_find_movimentacao`(
                                              in find_produto double,
                                              in find_inicio date,
                                              in find_final date,
                                              in find_type integer,
                                              in find_store integer
                                           )
begin
select
                            date_format(movimento,'%d/%m/%Y') as mov,
                            historico,
                            quantidade,
                            typeAritimetico as tipo,
                            tab.descricao,
                            round(saldo,3) as 'saldo',
                            round(custoLiquido,2) as 'custoLiquido',
                            round(custoMedio,2) as 'custoMedio',
                            round(priceVenda,2) as 'priceVenda',
                            idProduto,
                            idLoja,
                            cupom,
                            pdv,
                            round(margem,2) as margem,
                            tab.idTypeMovimentacao,
                            idProdutoExtrato

from produtoExtrato
inner join typeMovimentacao tab on(produtoExtrato.idTypeMovimentacao=tab.idTypeMovimentacao)
where idProduto = find_produto and date_format(movimento,'%Y%m%d') between date_format(find_inicio,'%Y%m%d') and date_format(find_final,'%Y%m%d')
      and (find_type = 0 or tab.idTypeMovimentacao = find_type) and (find_store=0 or idLoja=find_store)
order by 1,16;
end $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `conector_find_municipio`
--

DROP PROCEDURE IF EXISTS `conector_find_municipio`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='STRICT_TRANS_TABLES,STRICT_ALL_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,TRADITIONAL,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION' */ $$
CREATE DEFINER=`master`@`localhost` PROCEDURE `conector_find_municipio`(
                                                    in tipo int(5),
                                                    in find_municipio varchar(45),
                                                    in tabela varchar(15)
                                                  )
BEGIN
case tabela
      when "spedMunicipio" then
             case tipo
                  when 1 then
                        select
            			ifnull(idspedMunicipio,0) as cod_municipio,
            			municipio,
            			unidadeFederativa
          		from
            			spedmunicipio
          		where
            			municipio like concat(find_municipio,"%");
                  when 2 then
                        select
                   ifnull(idspedMunicipio,0) as cod_municipio,
            			municipio,
            			unidadeFederativa
          		from
            			spedmunicipio
          		where
            			idspedMunicipio=find_municipio;
                    else
                      select
                  			ifnull(idspedMunicipio,0) as cod_municipio,
                  			municipio,
                  			unidadeFederativa
                		from
                  			spedmunicipio
                		where
              			1=1;
             end case;
      when "cepcity" then

             case tipo
                  when 1 then
                SELECT idcepCity,nome,uf FROM cepcity where nome like (concat(find_municipio,"%"));
                  when 2 then
                SELECT idcepCity,nome,uf FROM cepcity where idcepCity=find_municipio;
              else
                  SELECT idcepCity,nome,uf FROM cepcity where 1=1;
             end case;


end case;
END $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `conector_find_notaFiscal`
--

DROP PROCEDURE IF EXISTS `conector_find_notaFiscal`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='' */ $$
CREATE DEFINER=`master`@`localhost` PROCEDURE `conector_find_notaFiscal`(
                                                in tipo int, 
                                                in find varchar(45),
                                                in dataInicial date,
                                                in dataFinal date,
                                                in nr double,
                                                in situacao char(1),
                                                in cfo1 char(6),
                                                in find_cliente int
                                            )
begin
case tipo
  when 1 then
select
    tab1.razao,
    tab4.descricao,
    tab.cfop,
    tab.nr_nota,
    tab.entrada,
    tab.emissao,
    juridica.razao,
    tab.valorTotalNota,
    tab.valorTotalCustoLiquido,
    tab.valorTotalProduto,
    tab.status,
    tab.valorDesconto,
    tab.idCliente,
    tab.idLoja
     from
            entrada tab
            inner join loja tab1 on(tab.idLoja = tab1.idLoja)
            inner join cliente tab2 on(tab.idCliente = tab2.idCliente)
            inner join juridica on(tab2.idCliente = juridica.idCliente)
            inner join cfop tab3 on(tab.cfop = tab3.cfop)
            inner join operacaoEntrada tab4 on(tab.idOperacao = tab4.idOperacao)
            inner join usuario tab5 on(tab.idUsuario=tab5.idUsuario)
            inner join situacaoFiscal tab6 on(tab.idSituacaoFiscal = tab6.idSituacaoFiscal)
            inner join table_codigo tab7 on(tab.idCodigoFiscal = tab7.idTable_codigo and tab.modNotaFiscal = tab7.codigo)
            where
            tab.entrada between dataInicial and dataFinal and (nr = 0 or tab.nr_nota = nr) and (find_cliente = 0 or tab.idCliente = find_cliente) and
            (cfo1 = 0 or tab.cfop = cfo1);
            
            when 2 then
            
select
    tab1.razao,
    tab4.descricao,
    tab.cfop,
    tab.nr_nota,
    tab.entrada,
    tab.emissao,
    juridica.razao,
    tab.valorTotalNota,
    tab.valorTotalCustoLiquido,
    tab.valorTotalProduto,
    tab.status,
    tab.valorDesconto,
    tab.idCliente,
    tab.idLoja
     from
            entrada tab
            inner join loja tab1 on(tab.idLoja = tab1.idLoja)
            inner join cliente tab2 on(tab.idCliente = tab2.idCliente)
            inner join juridica on(tab2.idCliente = juridica.idCliente)
            inner join cfop tab3 on(tab.cfop = tab3.cfop)
            inner join operacaoEntrada tab4 on(tab.idOperacao = tab4.idOperacao)
            inner join usuario tab5 on(tab.idUsuario=tab5.idUsuario)
            inner join situacaoFiscal tab6 on(tab.idSituacaoFiscal = tab6.idSituacaoFiscal)
            inner join table_codigo tab7 on(tab.idCodigoFiscal = tab7.idTable_codigo and tab.modNotaFiscal = tab7.codigo)
            where
            (nr = 0 or tab.nr_nota = nr) and (find_cliente = 0 or tab.idCliente = find_cliente) and
            (cfo1 = 0 or tab.cfop = cfo1);
end case;
end $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `conector_find_operacaoEntrada`
--

DROP PROCEDURE IF EXISTS `conector_find_operacaoEntrada`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='' */ $$
CREATE DEFINER=`master`@`localhost` PROCEDURE `conector_find_operacaoEntrada`( in tipo int, in find varchar(45))
begin
case tipo
when 1 then
select
        idOperacao,
        descricao
from operacaoEntrada
where status != 1;
when 2 then
select
   tab.`descricao`,
  tab.`flagCompra`,
  tab.`flagUpdateProduto`,
  tab.`flagUpdateProdutoStore`,
  tab.`flagPriceVenda`,
  tab.`flagPriceCusto`,
  tab.`flagDivergenciaNxP`,
  tab.`flagRomaneio`,
  tab.`flagZeraCompra`,
  tab.`flagComparaData`,
  tab.`flagForceLojaLogon`,
  tab.`flagDivergenciaNxItens`,
  tab.`percentualDivergenciaNxItens`,
  tab.`flagDivergenciaNxFinanceiro`,
  tab.`flagUpdatePagar`,
  tab.`flagForceFinanceiro`,
  tab.`flagSugestaFinanceira`,
  tab.`flagEmissaoIgualVencer`,
  tab.`flagLimiteComprador`,
  tab.`valorCompras`,
  tab.`flagUpdateFiscal`,
  tab.`flagGeraPis`,
  tab.`flagGeraCofins`,
  tab.`flagGeraIcms`,
  tab.`flagAtivaDivergencia`,
  tab.`divergenciaImposto`,
  tab.`divergenciaIpi`,
  tab.`divergenciaSubstituicao`,
  tab.`divergenciaTotalNf`,
  tab.`flagTypeNota`,
  tab.`flagInCfopSugestao`,
  tab.`flagOnCfopSugestao`,
  tab.`flagUpdateEstoque`,
  tab.`status`, TAB.idOperacao,
  tab.situacaoFiscal,
  tab.modeloFiscal,
  tab1.descricao,
  tab2.modelo,
  tab3.descricao,
  tab.produtoServico
from
	operacaoEntrada tab
        inner join situacaoFiscal tab1 on(tab.situacaoFiscal = tab1.idSituacaoFiscal)
        inner join modeloFiscal tab2 on(tab.modeloFiscal = tab2.codigo)
        inner join table_codigo tab3 on(tab2.codigo = tab3.`modelo`)
  where tab.idOperacao = find and tab3.idFiscal=1;

when 3 then
select
        idOperacao,
        descricao
from operacaoEntrada
where status != 1 and descricao like concat(find,"%");

end case;
end $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `conector_find_pagar`
--

DROP PROCEDURE IF EXISTS `conector_find_pagar`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='' */ $$
CREATE DEFINER=`master`@`localhost` PROCEDURE `conector_find_pagar`(in tipo smallint,
                                         in find varchar(1),
                                         in di date,
                                         in df date,
                                         in store double,
                                         in pessoa double,
                                         in escolha smallint,
                                         in paga smallint,
                                         in chave double,
                                         in VartipoBaixa char(2),
                                         in VarUsuarioBaixa integer,
                                         in VarbancoPgto integer,
                                         in VarcontaCorrente integer,
                                         in VarcodigoFormaPgto integer,
                                         in VarchaveBaixaCaixa integer,
                                         in VarbaixaFinalizadora integer,
                                         in VarHistorico varchar(50)
                                       )
begin

    DECLARE done INT DEFAULT FALSE;
    declare VarIdChave double default 0;
    declare VarvalorPago decimal(15,3) default 0;

case tipo
    when 1 then
    select
      tab.loja,
      date_format(tab.emissao, '%d-%m-%Y'),
      date_format(tab.vencimento,'%d-%m-%Y'),
      tab.nota,
      ifnull(tab.duplicata,""),
      tab.codigo,
      IFNULL(
  case tab1.idTipoPessoa when 1 then tab2.nome
                                  when 2 then tab3.razao
                                  when 3 then tab4.nome end,"DESCONHECIDO"),
                    round(tab.valor,2),
                    if(tab.parcela is null,concat(tab.parcela,"/",tab.qttyPagar), tab.parcela),
                    tab.historico,
                    date_format(ifnull(tab.pagamento,'00000000'),'%d-%m-%Y'),
                    round(tab.valorPago,2),
                    tab.idPagar,
                    round(tab.valorNota,2),
                    ifnull(sum(tab.aceite),0)
        from pagar tab
                left join cliente tab1 on(tab.codigo = tab1.idCliente)
                left join fisica tab2 on(tab.codigo = tab2.idCliente)
                left join juridica tab3 on(tab.codigo = tab3.idCliente)
                left join rural tab4 on(tab.codigo = tab4.idCliente)
                left join transportadora tab5 on(tab.codigo = tab5.IdTransportadora)
                inner join loja tab6 on(tab.Loja = tab6.idLoja)
                        where
                            (store=0 OR tab.loja = store) and
                            (pessoa=0 OR tab.codigo = pessoa) and
                            if(escolha=1, tab.emissao between di and df, 0=0) and
                            if(escolha=2, tab.vencimento between di and df, 0=0) and
                            if(escolha=3, tab.pagamento between di and df, 0=0) and
                            if(escolha=4, tab.dataEntrada between di and df, 0=0) and
                            (if(paga=0,tab.flagPagamento='N', if(paga=1,tab.flagPagamento='S',1=1)))and
                            (find="o" OR tab.typePepleo = find) group by 13 order by 13,2,3;
    when 2 then
    select
  tab.`idpagar`,
  tab.`loja`,
  tab.`codigo`,
  date_format(tab.`emissao`,'%d-%m-%Y'),
  date_format(tab.`vencimento`,'%d-%m-%Y'),
  date_format(ifnull(tab.`competencia`,'00000000'),'%d-%m-%Y') as competencia,
  date_format(ifnull(tab.`pagamento`,'00000000'),'%d-%m-%Y') as pgto,
  date_format(ifnull(tab.`dataLimite`,'00000000'),'%d-%m-%Y') as dtLimite,
  date_format(tab.`dataEntrada`, '%d-%m-%Y'),
  date_format(ifnull(tab.`notRecebimento`,'00000000'),'%d-%m-%Y') as notRec,
  date_format(ifnull(tab.`multaData`,'00000000'),'%d-%m-%Y') as dtMulta,
  date_format(ifnull(tab.`aceite`,'00000000'),'%d-%m-%Y') as dtAceite,
  date_format(tab.`flagAlt`, '%d-%m-%Y'),
  date_format(tab.`flagInc`, '%d-%m-%Y'),
  date_format(ifnull(tab.`dataImportacao`,'00000000'),'%d-%m-%Y') as importacao,
  ifnull(tab.`historico`,""),
  ifnull(tab.`duplicata`,""),
  tab.`lote`,
  tab.`prazo`,
  ifnull(tab.`banco`,""),
  ifnull(tab.`bancoDocumento`,""),
  ifnull(tab.`bancoPgto`,""),
  ifnull(tab.`contaCorrente`,""),
  ifnull(tab.`multaDias`,""),
  ifnull(tab.`protestoDias`,""),
  ifnull(tab.`usuario`,""),
  ifnull(tab.`usuarioAceite`,""),
  ifnull(tab.`usuarioBaixa`,""),
  ifnull(tab.`usuarioInclusao`,""),
  ifnull(tab.`codigoFormaPgto`,""),
  ifnull(tab.`chaveBaixaCaixa`,""),
  ifnull(tab.`baixaFinalizadora`,""),
  ifnull(tab.`baixaCaixa`,""),
  ifnull(tab.`chaveContaCorrente`,""),
  ifnull(tab.`chaveCheque`,""),
  ifnull(tab.`chaveCaixa`,""),
  ifnull(tab.`chaveEntrada`,""),
  ifnull(tab.`pedido`,""),
  round(ifnull(tab.`desconto`,0),2),
  round(ifnull(tab.`descontoConcedido`,0),2),
  round(ifnull(tab.`financeiro`,0),2),
  round(ifnull(tab.`jurosPagos`,0),2),
  round(ifnull(tab.`multaValor`,0),2),
  round(ifnull(tab.`valor`,0),2),
  round(tab.`valorNota`,2),
  round(tab.`valorPago`,2),
  round(tab.`abatimento`,2),
  round(tab.`taxa`,2),
  ifnull(tab.`tipoDocumento`,""),
  ifnull(tab.`nota`,""),
  ifnull(tab.`codigoCedente`,""),
  ifnull(tab.`formaPgto`,""),
  coalesce(tab.`nossoNumero`,""),
  tab.`flagPagamento`,
  coalesce(tab.`numeroDocumento`,""),
  tab.`parcela`,
  coalesce(tab.`tipoBaixa`,""),
  tab.`confirmada`,
  coalesce(tab.`codigoBarraBoleto`,""),
  coalesce(tab.`observacao`,""),
  date_format(ifnull(tab.`dataProtesto`,'00000000'),'%d-%m-%Y') as dtProtesto,
  tab.`qttyPagar`,
  tab.`typePepleo`,
      IFNULL(
                 case tab1.idTipoPessoa when 1 then tab2.nome
                                  when 2 then tab3.razao
                                  when 3 then tab4.nome end,"DESCONHECIDO"),
                    if(tab.parcela is null,concat(tab.parcela,"/",tab.qttyPagar), tab.parcela),
                    tab.qttyPagar,
                    date_format(ifnull(tab.pagamento,'00000000'),'%d-%m-%Y'),
                    ifnull(tab0.descricao,"") descFinalizadora,
                    ifnull(tab9.descricao,"") descCaixa,
                    ifnull(tab8.nome,"") descConta,
                    ifnull(tab7.nome,"") descBancoDoc,
                    ifnull(tabx.nome,"") descBanco,
                    tab6.razao,
                    date_format(ifnull(tab.dataBoleto,'00000000'),'%d-%m-%Y') as dtDoc,
                    round(tab.acrescimo,2),
                    coalesce(tcp.idTipoContasPagar,1),
                    ifnull(tcp.descricao,"")
        from pagar tab
                left join cliente tab1 on(tab.codigo = tab1.idCliente)
                left join fisica tab2 on(tab.codigo = tab2.idCliente)
                left join juridica tab3 on(tab.codigo = tab3.idCliente)
                left join rural tab4 on(tab.codigo = tab4.idCliente)
                left join transportadora tab5 on(tab.codigo = tab5.IdTransportadora)
                inner join loja tab6 on(tab.Loja = tab6.idLoja)
                left join banco tab7 on(tab.bancoDocumento = tab7.idBanco)
                left join banco tabx on(tab.banco = tabx.idBanco)
                left join conta tab8 on(tab.chaveContaCorrente = tab8.idConta)
                left join caixa tab9 on(tab.chaveBaixaCaixa = tab9.idCaixa)
                left join finalizadora tab0 on(tab.codigoFormaPgto = tab0.idFinalizadora)
                left join tipoContasPagar tcp on(tab.idTipoContasPagar = tcp.idTipoContasPagar)
                                                             where
                                                                 tab.idPagar=chave;
    when 4 then
    select
      count(*)
        from pagar tab
                left join cliente tab1 on(tab.codigo = tab1.idCliente)
                left join fisica tab2 on(tab.codigo = tab2.idCliente)
                left join juridica tab3 on(tab.codigo = tab3.idCliente)
                left join rural tab4 on(tab.codigo = tab4.idCliente)
                left join transportadora tab5 on(tab.codigo = tab5.IdTransportadora)
                inner join loja tab6 on(tab.Loja = tab6.idLoja)
                        where
                            (store=0 OR tab.loja = store) and
                            (pessoa=0 OR tab.codigo = pessoa) and
                            if(escolha=1, tab.emissao between di and df, 0=0) and
                            if(escolha=2, tab.vencimento between di and df, 0=0) and
                            if(escolha=3, tab.pagamento between di and df, 0=0) and
                            if(escolha=4, tab.dataEntrada between di and df, 0=0) and
                            (paga=3 OR tab.flagPagamento=paga)and
                            (find="o" OR tab.typePepleo = find);
    when 3 then
    begin

    DECLARE basicFonte CURSOR for

    select tab.idPagar, tab.valor
        from pagar tab
                left join cliente tab1 on(tab.codigo = tab1.idCliente)
                left join fisica tab2 on(tab.codigo = tab2.idCliente)
                left join juridica tab3 on(tab.codigo = tab3.idCliente)
                left join rural tab4 on(tab.codigo = tab4.idCliente)
                left join transportadora tab5 on(tab.codigo = tab5.IdTransportadora)
                inner join loja tab6 on(tab.Loja = tab6.idLoja)
                        where
                            (store=0 OR tab.loja = store) and
                            (pessoa=0 OR tab.codigo = pessoa) and
                            if(escolha=1, tab.emissao between di and df, 0=0) and
                            if(escolha=2, tab.vencimento between di and df, 0=0) and
                            if(escolha=3, tab.pagamento between di and df, 0=0) and
                            if(escolha=4, tab.dataEntrada between di and df, 0=0) and
                            (if(paga=0,tab.flagPagamento='N', if(paga=1,tab.flagPagamento='S',1=1)))and
                            (find="o" OR tab.typePepleo = find);
                          DECLARE CONTINUE HANDLER FOR NOT FOUND SET done = TRUE;
                          open basicFonte;

                          read_loop: LOOP

                          fetch basicFonte into VarIdChave,VarvalorPago;


                    IF done THEN
                        LEAVE read_loop;
                    END IF;

         update
               pagar
                    set
                                           valorPago=VarvalorPago,
                                           pagamento=date_format(now(),'%Y-%m-%d'),
                                           flagPagamento='1',
                                           tipoBaixa=VartipoBaixa,
                                           flagAlt=date_format(now(),'%Y-%m-%d'),
                                           usuarioBaixa=VarUsuarioBaixa,
                                           bancoPgto=VarbancoPgto,
                                           contaCorrente=VarcontaCorrente,
                                           codigoFormaPgto=VarcodigoFormaPgto,
                                           chaveBaixaCaixa=VarchaveBaixaCaixa,
                                           baixaFinalizadora=VarbaixaFinalizadora, historico=VarHistorico
                                             where
                                           idPagar=VarIdChave;


            end loop;
        close basicFonte;
    end;
    end case;
end $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `conector_find_paramentroFaturamento`
--

DROP PROCEDURE IF EXISTS `conector_find_paramentroFaturamento`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='' */ $$
CREATE DEFINER=`master`@`localhost` PROCEDURE `conector_find_paramentroFaturamento`( in tipo int, in find varchar(45))
begin
case tipo
when 1 then
select
        idparamentro,
        descricao
from paramentro_faturamento
where status != 1;
when 2 then
select
  tab.descricao,
  tab.status,
  tab.origem,
  tab.destino,
  tab.flagParamentro,
  tab.forceVendedor,
  tab.forceCliente,
  tab.forceMetodo,
  tab.forcetranspote,
  tab.forceAtualizacao,
  tab.forcePagamento,
  tab.forceAdressEntrega,
  tab.estoqueDestino,
  tab.estoqueOrigem,
  tab.estoqueNegativo,
  tab.fixaOrigem,
  tab.fixaDestino,
  tab.origemFixa,
  tab.destinoFixo,
  tab.restrigeCliente,
  tab.custoLiquido,
  tab.emissaoFixa,
  tab.estoqueLoja,
  tab.atualizaComNf,
  tab.origemDestinoIguais,
  tab.exclusaoPedidos,
  tab.liberaDesconto,
  tab.digitaDescontoValor,
  tab.digitaDescontoPercentual,
  tab.flagExpiracao,
  tab.diasEspiracao,
  tab.flagPermiteAtualizar,
  tab.flagAlteraLoja,
  tab.flagDesconto,
  tab.margemVendedor,
  tab.margemGerente,
  tab.margemDiretor,
  tab.margemSupervisor,
  tab.estoqueDestinoKit,
  tab.estoqueOrigemKit,
  tab.flagEstoqueFutura,
  tab.flagDetalhesItem,
  tab.idHistorico,
  tab.restrigeFinanceiro,
  tab.restrigeAltpgto,
  tab.limiteCredito,
  tab.carenciaAprazo,
  tab.flagTroco,
  tab.geraReceber,
  tab.geraCrediario,
  tab.geraPagarDestino,
  tab.geraPargarOrigem,
  tab.geraCheque,
  tab.flagAlteraPreco,
  tab.flagAlteraComissao,
  tab.flagAlteraDesconto,
  tab.flagAlteraIpi,
  tab.flagAlteraVendedor,
  tab.flagQttyZerada,
  tab.flagItemZerada,
  tab.flagEntrada,
  tab.flagExplodeKit,
  tab.flagMaxItemPedido,
  tab.numeroMaxItem ,
  tab.flagRepetItem,
  tab.flagAltExcIncItem,
  tab.flagBloquearItem,
  tab.flagEanDefault,
  tab.bloqueiaQuantidade ,
  tab.flagRestrigeCliente,
  tab.flagClienteAvista,
  tab.flagClienteDocCorretos,
  tab.flagClienteEmail,
  tab.flagTypePrice,
  tab.flagAtualizaMedio,
  tab.flagRatearDesconto,
  tab.flagVerificaPriceCusto,
  tab.flagComissaoProduto,
  tab.flagComissaoIgnora,
  tab.flagComissaoFaturamento,
  tab.flagComissaoBaixa,
  tab.`idTable_Codigo`,
   tab.`modNotaFiscal`,
   tab.`idSituacaoFiscal`,
   ifnull(tab1.descricao,"") modelo,
   ifnull(tab2.descricao,"") situacaoFiscal,
   tab.cfop1,
   tab.cfop2,
   tab.cfop3,
   tab.cfop4,
   tab.flagCalculaIcms,
   tab.flagCalculaPisCofins,
   tab.flagCalculaIr,
   tab.flagCalculaBaseSt,
   tab.flagCalculoServicoProduto,
   tab.flagCalculoServico,
   tab.flagCalculaIpi,
   tab.flagNFRestituicao,
   tab.flagForceNfOrigem,
   tab.flagTypeFrete,
   tab.flagRetemPisCofins,
   ifnull(if(tab.idFuncionario="0","",tab.idFuncionario),""),
   tab.flagPgtoDevolucao,
   tab.idFinalizadora,
   coalesce(tab.idFinalizadoraPadrao,0),
   coalesce(tab.idMetodoPadrao,0), round(coalesce(margemTransf,0),2),
   ifnull(IdOperacaoEntrada,""),
   ifnull(tab.flagFormaFinalizacao,""),
   ifnull(tab.FlagNota,"S")
from
    paramentro_faturamento tab
    left join table_codigo tab1 on(tab.`idTable_Codigo` = tab1.`idTable_Codigo`)
    left join situacaoFiscal tab2 on(tab.`idsituacaoFiscal` = tab2.`idsituacaoFiscal`)
where
    idparamentro = find and tab.status != 1;
when 3 then
select
        idparamentro,
        descricao
from paramentro_faturamento
where status != 1 and descricao like concat(find,"%");
    end case;
    end $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `conector_find_paramentro_crediario`
--

DROP PROCEDURE IF EXISTS `conector_find_paramentro_crediario`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='' */ $$
CREATE DEFINER=`master`@`localhost` PROCEDURE `conector_find_paramentro_crediario`(in find varchar(45))
begin

select trocoCartao,flagRecebimento, idAdministradora, flagGrandTotal, valueTrocoCard, `tipoAmbienteNfe`, `descricaoHomoloNfe`, autorizacaoMd5 from system into @a,@b, @c, @d, @e,@f,@g,@h;

SELECT
  tab1.Razao,
  tab.`prazoQuitacaoAfter`,
  tab.`prazoQuitacaoBefore`,
  round(tab.`indiceSingleday`,2),
  round(tab.`indiceAtrasoMora`,2),
  tab.`carenciaSingleDay`,
  tab.`carenciaAtrasoMora`,
  tab.`idadeSpc`,
  round(tab.`altValuePrestacao`,2),
  round(tab.`altValueEntrada`,2),
  tab.`logicaCredito`,
  round(tab.`limiteDiscountPrestacao`,2),
  tab.`liberacaocaoCredito`,
    ROUND(tab.`limiteRenda`,2),
    tab.`categoriaLimite`,
    tab.`variacaoLimite`, ifnull(@a,"n"), ifnull(@b,"n"), ifnull(@c,"0"), ifnull(@d,"n"), ifnull(@e,"0"),
    tab1.aliquotaPis,
    tab1.aliquotaCofins,
ifnull(@f,""),
ifnull(@g,""),ifnull(@h,"")
                FROM
                     PARAMENTRO_CREDIARIO tab
                     inner join loja tab1 on(tab.loja = tab1.idLoja)
                                WHERE
                                          tab.`loja`=find;
end $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `conector_find_parcelasCheque`
--

DROP PROCEDURE IF EXISTS `conector_find_parcelasCheque`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='' */ $$
CREATE DEFINER=`master`@`localhost` PROCEDURE `conector_find_parcelasCheque`(in tipo int, in find varchar(45), in reserva double)
begin
case tipo
    when 1 then
select tab.idFinalizadora,
       tab.numeroParcelas, 
       sum(tab.referencia+tab.encargos),
       tab.entrada,
       tab.idLoja,
       tab1.Razao
                            from conector.pedidofinanceiro tab
                                 inner join loja tab1 on(tab.idLoja = tab1.idLoja)
                                                        where idPedido=reserva;
    end case;
end $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `conector_find_pedido`
--

DROP PROCEDURE IF EXISTS `conector_find_pedido`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='' */ $$
CREATE DEFINER=`master`@`localhost` PROCEDURE `conector_find_pedido`(in find varchar(45),
                                      in tipo int,
                                      in loja double,
                                      in cliente double,
                                      in situacao int(11),
                                      in operacao int(11),
                                      in dataInicial date,
                                      in dataFinal date
                                     )
begin
if(situacao = 7)then

case tipo
    when 1 then
select
       idPedido as Codigo,
       tab7.descricao,
       store.idLoja as Loja,
       store.Razao as Origem,
       case tab.idTipoPessoa
           when 1 then
            tab1.idCliente
           when 2 then
            tab2.idCliente
           when 3 then
            tab3.idCliente end as Destino,
       case tab.idTipoPessoa
           when 1 then
            tab1.nome
           when 2 then
            tab2.razao
           when 3 then
            tab3.nome end as Destino,
          tab5.QttyItens,
          date_format(tab5.emissao,'%d/%m/%Y'),
          truncate(tab5.valorTotal,2),
          truncate(tab5.valorLiquido,2) as liquido,
          truncate(tab5.discount,2), tab5.sinal
        from cliente tab
      left join fisica tab1 on(tab.idCliente = tab1.idCliente)
      left join juridica tab2 on (tab.idCliente = tab2.idCliente)
      left join rural tab3 on(tab.idCliente = tab3.idCliente)
      inner join loja tab4 on(tab.idLoja = tab4.idLoja)
      inner join pedido tab5 on(tab.idCliente = tab5.idCliente)
      inner join paramentro_faturamento tab6 on(tab5.idparamentro = tab6.idParamentro)
      inner join StatusPedido tab7 on(tab5.status = tab7.idStatusPedido)
      inner join (select idLoja, razao from loja ) as store on(tab5.idLoja=store.idLoja)
  where
      (cliente=0 OR tab5.idCliente = cliente) and (tab5.status=9) and (operacao=0 OR tab5.idparamentro=operacao) and
      tab5.emissao between dataInicial and dataFinal order by 1;
    when 2 then
select idPedido as Codigo,
       tab7.descricao,
       store.idLoja as Loja,
       store.Razao as Origem,
       case tab.idTipoPessoa
           when 1 then
            tab1.idCliente
           when 2 then
            tab2.idCliente
           when 3 then
            tab3.idCliente end as Destino,
       case tab.idTipoPessoa
           when 1 then
            tab1.nome
           when 2 then
            tab2.razao
           when 3 then
            tab3.nome end as Destino,
          tab5.QttyItens,
          date_format(tab5.emissao,'%d/%m/%Y'),
          truncate(tab5.valorTotal,2),
          truncate(tab5.valorLiquido,2) as liquido,
          truncate(tab5.discount,2), tab5.sinal
        from cliente tab
      left join fisica tab1 on(tab.idCliente = tab1.idCliente)
      left join juridica tab2 on (tab.idCliente = tab2.idCliente)
      left join rural tab3 on(tab.idCliente = tab3.idCliente)
      inner join loja tab4 on(tab.idLoja = tab4.idLoja)
      inner join pedido tab5 on(tab.idCliente = tab5.idCliente)
      inner join paramentro_faturamento tab6 on(tab5.idparamentro = tab6.idParamentro)
      inner join StatusPedido tab7 on(tab5.status = tab7.idStatusPedido)
      inner join (select idLoja, razao from loja ) as store on(tab5.idLoja=store.idLoja)
  where
      (find=0 OR tab5.idPedido = find) and
      (cliente=0 OR tab5.idCliente = cliente) and
      (loja = 0 OR tab4.idLoja = loja) and
      (operacao = 0 OR tab6.idParamentro = operacao) and (tab5.status=9) and  (operacao=0 OR tab5.idparamentro=operacao) and
      tab5.emissao between dataInicial and dataFinal  order by 1;
end case;
else

case tipo
    when 1 then
select
       idPedido as Codigo,
       tab7.descricao,
       store.idLoja as Loja,
       store.Razao as Origem,
       case tab.idTipoPessoa
           when 1 then
            tab1.idCliente
           when 2 then
            tab2.idCliente
           when 3 then
            tab3.idCliente end as Destino,
       case tab.idTipoPessoa
           when 1 then
            tab1.nome
           when 2 then
            tab2.razao
           when 3 then
            tab3.nome end as Destino,
          tab5.QttyItens,
          date_format(tab5.emissao,'%d/%m/%Y'),
          truncate(tab5.valorTotal,2),
          truncate(tab5.valorLiquido,2) as liquido,
          truncate(tab5.discount,2), tab5.sinal
        from cliente tab
      left join fisica tab1 on(tab.idCliente = tab1.idCliente)
      left join juridica tab2 on (tab.idCliente = tab2.idCliente)
      left join rural tab3 on(tab.idCliente = tab3.idCliente)
      inner join loja tab4 on(tab.idLoja = tab4.idLoja)
      inner join pedido tab5 on(tab.idCliente = tab5.idCliente)
      inner join paramentro_faturamento tab6 on(tab5.idparamentro = tab6.idParamentro)
      inner join StatusPedido tab7 on(tab5.status = tab7.idStatusPedido)
      inner join (select idLoja, razao from loja ) as store on(tab5.idLoja=store.idLoja)
  where
      (cliente=0 OR tab5.idCliente = cliente) and (situacao=-1 OR tab5.final=situacao) and (operacao=0 OR tab5.idparamentro=operacao) and
      tab5.emissao between dataInicial and dataFinal order by 1;
    when 2 then
select idPedido as Codigo,
       tab7.descricao,
       store.idLoja as Loja,
       store.Razao as Origem,
       case tab.idTipoPessoa
           when 1 then
            tab1.idCliente
           when 2 then
            tab2.idCliente
           when 3 then
            tab3.idCliente end as Destino,
       case tab.idTipoPessoa
           when 1 then
            tab1.nome
           when 2 then
            tab2.razao
           when 3 then
            tab3.nome end as Destino,
          tab5.QttyItens,
          date_format(tab5.emissao,'%d/%m/%Y'),
          truncate(tab5.valorTotal,2),
          truncate(tab5.valorLiquido,2) as liquido,
          truncate(tab5.discount,2), tab5.sinal
        from cliente tab
      left join fisica tab1 on(tab.idCliente = tab1.idCliente)
      left join juridica tab2 on (tab.idCliente = tab2.idCliente)
      left join rural tab3 on(tab.idCliente = tab3.idCliente)
      inner join loja tab4 on(tab.idLoja = tab4.idLoja)
      inner join pedido tab5 on(tab.idCliente = tab5.idCliente)
      inner join paramentro_faturamento tab6 on(tab5.idparamentro = tab6.idParamentro)
      inner join StatusPedido tab7 on(tab5.status = tab7.idStatusPedido)
      inner join (select idLoja, razao from loja ) as store on(tab5.idLoja=store.idLoja)
  where
      (find=0 OR tab5.idPedido = find) and
      (cliente=0 OR tab5.idCliente = cliente) and
      (loja = 0 or tab4.idLoja = loja) and
      (operacao = 0 or tab6.idParamentro = operacao) and (situacao=-1 or tab5.final=situacao) and  (operacao=0 or tab5.idparamentro=operacao) and
      tab5.emissao between dataInicial and dataFinal  order by 1;
    when 3 then
  select
       idPedido as Codigo,
       tab5.idParamentro,
       tab5.idMetodo,
       tab5.status,
       date_format(tab5.emissao,'%d/%m/%Y'),
       tab5.expiracao,
       tab5.pdv,
       tab5.usuario,
       tab5.idLoja as Loja,

      store.razao,
       case tab.idTipoPessoa
           when 1 then
            tab1.idCliente
           when 2 then
            tab2.idCliente
           when 3 then
            tab3.idCliente end as Destino,
       case tab.idTipoPessoa
           when 1 then
            tab1.nome
           when 2 then
            tab2.razao
           when 3 then
            tab3.nome end as Destino,
          tab5.QttyItens,
          truncate(tab5.discount,2),
          truncate(tab5.valorLiquido,2) as liquido,
          truncate(tab5.valorTotal,2),
          tab5.idFuncionario,
          tab5.geraMontagem,
          tab5.geraEntrega,
          tab5.sinal,
          tab5.flagCaixa,
          tab5.final,
          tab5.impresso,
          tab6.descricao,
          tab5.flagFormaFinalizacao,
          if(tab5.flagFormaFinalizacao="D", tab5.sequenciaDav, tab5.sequenciaPreVenda)
        from cliente tab
      left join fisica tab1 on(tab.idCliente = tab1.idCliente)
      left join juridica tab2 on (tab.idCliente = tab2.idCliente)
      left join rural tab3 on(tab.idCliente = tab3.idCliente)
      inner join loja tab4 on(tab.idLoja = tab4.idLoja)
      inner join pedido tab5 on(tab.idCliente = tab5.idCliente)
      inner join paramentro_faturamento tab6 on(tab5.idparamentro = tab6.idParamentro)
      inner join (select idLoja, razao from loja ) as store on(tab5.idLoja=store.idLoja)
 where
       tab5.idPedido=find  order by 1;

       when 4 then
select
    tab1.descricao,
        case tab2.idtipoPessoa   when 1 then tab3.nome
                                 when 2 then tab4.razao
                                 when 3 then tab5.nome end Nome_Razao,
                                 loja.razao,
                                 tab.idPedido,
                                 tab2.idCliente,
                                 loja.idLoja,
                                 tab2.uf,
                                 metodo.idFinalizadora,
                                 tab.idFuncionario, ifnull(tab.condicao,"")
            from pedido tab
                inner join conector.paramentro_faturamento tab1 on(tab.idParamentro = tab1.idParamentro)
                inner join cliente tab2 on(tab.idCliente = tab2.idCliente)
                inner join loja on(tab.idloja = loja.idloja)
                inner join metodo on(metodo.idMetodo = tab.idMetodo)
                left join fisica tab3 on(tab.idcliente = tab3.idcliente)
                left join juridica tab4 on(tab.idcliente = tab4.idcliente)
                left join rural tab5 on(tab.idcliente = tab5.idcliente)
                                                    where tab.idPedido=find;

      when 5 then
      select idParcela,
             truncate(valor,2),
             prazo,
             vencimento
                   from pedidoParcelaBoleto
                               where idPedido=find;
end case;
end if;
end $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `conector_find_pedidoCompraVencimento`
--

DROP PROCEDURE IF EXISTS `conector_find_pedidoCompraVencimento`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='' */ $$
CREATE DEFINER=`master`@`localhost` PROCEDURE `conector_find_pedidoCompraVencimento`(in tipo integer, in find varchar(45))
begin
case tipo
  when 1 then
select
    tab.parcela,
    tab1.descricao,
    date_format(tab.data, '%d/%m/%Y'),
    round(tab.porcentagem,2),
    round(tab.valorParcela,2)
    from
      pedidoCompraVencimento tab
        inner join finalizadora tab1 on(tab.idFinalizadora = tab1.idFinalizadora)
 where  tab.IdPedidoCompra = find;
  when 2 then
  select
    tab.idCondicaoPgto as Codigo,
    tab1.descricao,
    tab.idFinalizadora
  from
    pedidoCompraVencimento tab
    inner join condicaoPgto tab1 on(tab.idCondicaoPgto = tab1.idCondicaoPgto)
   where tab.IdPedidoCompra = 4 group by 1,2;
end case;

end $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `conector_find_pedidoEnderecoEntrega`
--

DROP PROCEDURE IF EXISTS `conector_find_pedidoEnderecoEntrega`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='' */ $$
CREATE DEFINER=`master`@`localhost` PROCEDURE `conector_find_pedidoEnderecoEntrega`(in find int, in loja int)
BEGIN
select  logradouro,
        bairro,
        cep,
        cidade,
        codigoMunicipio,
        numero,
        uf,
        complemento,
        referencia,
        dataEntrega,
        horaEntrega,
        typeEntrega,
        idTransportadora
from 
        pedidoEntrega
where
        idPedido=find and idLoja=loja;
END $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `conector_find_pedidoFinanceiro`
--

DROP PROCEDURE IF EXISTS `conector_find_pedidoFinanceiro`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='' */ $$
CREATE DEFINER=`master`@`localhost` PROCEDURE `conector_find_pedidoFinanceiro`(in find double)
begin
      SELECT round((referencia+encargos),2), round(entrada,2), numeroParcelas FROM pedidofinanceiro where IdPedido=find;
end $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `conector_find_pisCofins`
--

DROP PROCEDURE IF EXISTS `conector_find_pisCofins`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='' */ $$
CREATE DEFINER=`master`@`localhost` PROCEDURE `conector_find_pisCofins`(
                                            in tipo integer,
                                            in find varchar(45)
                                          )
BEGIN
case tipo
when 1 then
select
        tab.idpisCofins,
        tab.descricao,
        tab.cofinst,
        tab.pist,
        tab.creditoPis,
        tab.creditoCofins,
        tab.servico
from
        piscofins
        left join pisCofinsAnexo tab1 on(tab.idPisCofins = tab1.idPisCofins)
        where tab.idpisCofins = find;
when 2 then
select
        idpisCofins,
        descricao,
        cofinst,
        pist,
        creditoPis,
        creditoCofins,
        servico
from
        piscofins
        where descricao like concat(find,'%');
        when 6 then
    select
        tab.idPisCofins, tab.Descricao,ifnull(tab1.subDescricao,"") from pisCofins tab
        left join pisCofinsAnexo tab1 on(tab.idPisCofins = tab1.idPisCofins)
        where tab.idpisCofins = find;
        when 7 then
    select
        tab.idPisCofins, tab.Descricao, ifnull(tab1.subDescricao,"") from pisCofins tab
        left join pisCofinsAnexo tab1 on(tab.idPisCofins = tab1.idPisCofins)
        where tab.descricao like concat(find,'%');
        when 8 then
    select
        tab.idPisCofins, tab.Descricao, ifnull(tab1.subDescricao,"") from pisCofins tab
        left join pisCofinsAnexo tab1 on(tab.idPisCofins = tab1.idPisCofins);
     when 9 then

if((select count(tab.idPisCofins)
                        from pisCofins tab
                                left join pisCofinsAnexo tab1 on(tab.idPisCofins = tab1.idPisCofins)
                                        where tab1.idpisCofinsAnexo =find) > 0) then

select vigencia, tab.idPisCofins
          from pisCofins tab
            left join pisCofinsAnexo tab1 on(tab.idPisCofins = tab1.idPisCofins)
            where tab1.idpisCofinsAnexo = find into @a, @b;

            else
                set @b = null;
                set @a = null;
end if;

if(@b is null)then

select max(vigencia), max(tab1.idPisCofinsAnexo)
          from pisCofins tab
            left join pisCofinsAnexo tab1 on(tab.idPisCofins = tab1.idPisCofins)
            where tab1.idpisCofins=find into @a, @b;
  set @c = find;
  set find = @b;
  set @b = @c;

end if;
    select
        tab.`idpisCofins`,
        tab.`descricao`,
        tab.`cofinSt`,
        tab.`piSt`,
        tab.`creditoPis`,
        tab.`creditoCofins`,
        tab.`servico`,
        ifnull(tab1.`idpisCofinsAnexo`,""),
        ifnull(tab1.`aliquotaCreditoPis`,"0.000"),
        ifnull(tab1.`aliquotaCreditoCofins`,"0.000"),
        ifnull(tab1.`aliquotaDebitoPis`,"0.000"),
        ifnull(tab1.`aliquotaDebitoCofins`,"0.000"),
        ifnull(tab1.`vigencia`,""),
        ifnull(tab1.`incideIpi`,""),
        ifnull(tab1.`incideSt`,""),
        ifnull(tab1.`typeAtividade`,0),
        ifnull(tab1.`idTable_Codigo`,""),
        ifnull(tab1.`table_codigo`,""),
        ifnull(tab1.`cstPisEntrada`,""),
        ifnull(tab1.`cstCofinsEntrada`,""),
        ifnull(tab1.`cstPisSaida`,""),
        ifnull(tab1.`cstCofinsSaida`,""),
        ifnull(tab1.`geraDebitoIcms`,""),
        ifnull(tab1.`geraCreditoIcms`,""),
        ifnull(tab1.subDescricao,"")
            from pisCofins tab
            left join pisCofinsAnexo tab1 on(tab.idPisCofins = tab1.idPisCofins)
            where tab1.idpisCofins = @b and tab1.vigencia=@a and
                  tab1.idpisCofinsAnexo = find ;
    when 11 then

    select
  ifnull(tab1.`vigencia`,""),
  ifnull(tab1.`subDescricao`,""),
  tab.`piSt`,
  tab.`cofinSt`,
  tab.`creditoPis`,
  tab.`creditoCofins`,
  tab.`servico`,
  ifnull(tab1.`geraDebitoIcms`,""),
  ifnull(tab1.`geraCreditoIcms`,""),
  ifnull(tab1.`idpisCofinsAnexo`,""),
  tab.`descricao`
            from pisCofins tab
            left join pisCofinsAnexo tab1 on(tab.idPisCofins = tab1.idPisCofins)
            where tab.idpisCofins = find;


        else
select
        tab.idpisCofins,
        tab.descricao,
        tab.cofinst,
        tab.pist,
        tab.creditoPis,
        tab.creditoCofins,
        tab.servico
from
        piscofins tab
        left join pisCofinsAnexo tab1 on(tab.idPisCofins = tab1.idPisCofins);
        end case;
END $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `conector_find_produto`
--

DROP PROCEDURE IF EXISTS `conector_find_produto`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='' */ $$
CREATE DEFINER=`root`@`%` PROCEDURE `conector_find_produto`(
                                        in tipo integer,
                                        in find varchar(45),
                                        in findIdLoja integer,
                                        in findIdSetor integer,
                                        in findIdGrupo integer,
                                        in findIdCategoria integer,
                                        in findIdFornecedor integer,
                                        in findNumeroNota varchar(10),
                                        in findDataInicial date,
                                        in findDataFinal date
                                      )
begin
case tipo
  when 1 then
select tab.idProduto as "Codigo",
       tab.nome AS "Descricao",
       tab1.unidade AS "Unidade",
       tab5.quantidade AS "Estoque",
       tab2.barra AS "Codigo Barra",
       tab4.priceVenda "Preco Venda"
         from produto tab
             inner join unidadeMedida tab1 on(tab.idunidade = tab1.idunidadeMedida)
             inner join produtoEmbalagem tab2 on(tab.idproduto = tab2.idproduto)
             inner join produtoStore tab3 on(tab.idproduto = tab3.idproduto)
             inner join produtoPrice tab4 on(tab.idproduto = tab4.idproduto)
             inner join produtoEstoques tab5 on(tab.idproduto = tab5.idproduto)
             inner join setor on(tab.idSetor = setor.idSetor)
 where tab2.defaultVenda = "s" and
       tab4.idloja = tab5.idloja and
       tab4.idloja = tab3.idloja and
       tab4.idloja = findIdLoja and
      (tab.nome like concat('%',find,'%')) and
      (findIdSetor = 0 or tab.idSetor = findIdSetor) and
      (findIdGrupo = 0 or tab.idGrupo = findIdGrupo) and
      (findIdCategoria = 0 or tab.idCategoria = findIdCategoria) and
      (findIdFornecedor = 0 or tab.idFornecedor = findIdFornecedor) and if(findNumeroNota=1,1=1,tab4.priceVenda>0);
  when 2 then
select tab.idProduto as "Codigo",
       tab.nome AS "Descricao",
       tab1.unidade AS "Unidade",
       tab5.quantidade AS "Estoque",
       tab2.barra AS "Codigo Barra",
       tab4.priceVenda "Preco Venda"
         from produto tab
             inner join unidadeMedida tab1 on(tab.idunidade = tab1.idunidadeMedida)
             inner join produtoEmbalagem tab2 on(tab.idproduto = tab2.idproduto)
             inner join produtoStore tab3 on(tab.idproduto = tab3.idproduto)
             inner join produtoPrice tab4 on(tab.idproduto = tab4.idproduto)
             inner join produtoEstoques tab5 on(tab.idproduto = tab5.idproduto)
             inner join setor on(tab.idSetor = setor.idSetor)
 where
       tab4.idloja = tab5.idloja and
       tab4.idloja = tab3.idloja and
       tab4.idloja = findIdLoja and

      (find = 0 or tab2.barra = find) and
      (findIdSetor = 0 or tab.idSetor = findIdSetor) and
      (findIdGrupo = 0 or tab.idGrupo = findIdGrupo) and
      (findIdCategoria = 0 or tab.idCategoria = findIdCategoria) and
      (findIdFornecedor = 0 or tab.idFornecedor = findIdFornecedor);
  when 3 then
select
       tab.idProduto,
       tab.nome,
       tab.nomePdv,
       tab.nomeFull,
       tab.observacao,
       tab.status,
       tab.dataInclusao,
       tab.dataAlteracao,
       newSetor.descricao as setor,
       newGrupo.descricao as grupo,
       newCategoria.descricao as categoria,
       juridica.razao,
       tab.idusuario,
       tab.qttyObrigatoria,
       tab.qttyMaxima,
       tab.descontoIndividual,
       tab.restrito,
       tab.idunidade,
       tab1.unidade,
      truncate(tab5.quantidade,3),
      truncate(tab4.priceVenda,2),
       juridica.idCliente,
       newSetor.Setor,
       newGrupo.Grupo,
       newCategoria.Categoria,
     	truncate(tab4.priceVenda,2),
     	truncate(tab4.pricePendente,2),
     	truncate(tab4.creditoIcms,2),
     	truncate(tab4.creditoRedIcms,2),
     	truncate(tab4.creditoPis,2),
     	truncate(tab4.creditoCofins,2),
       truncate(tab4.creditoOutros,2),
	     truncate(tab4.primeiroDesconto,2),
     	truncate(tab4.segundoDesconto,2),
       truncate(tab4.terceiroDesconto,2),
     	truncate(tab4.debitoIcms,2),
       truncate(tab4.debitoRedIcms,2),
     	truncate(tab4.lucroLiquido,2),
     	truncate(tab4.lucroBruto,2),
     	truncate(tab4.custoBruto,2),
       truncate(tab4.custoliquido,2),
       truncate(tab4.custoMedio,2),
     	truncate(tab4.IpiPorcentagem,2),
     	truncate(tab4.moedaIpi,2),
     	truncate(tab4.moedaFrete,2),
       truncate(tab4.fretePorcentagem,2),
     	truncate(tab4.comissao,2),
     	truncate(tab4.priceSugestao,2),
     	truncate(tab4.substituicaoPorcetagem,2),
       truncate(tab4.acrescimoSubstituicao,2),
       truncate(tab4.moedaSubstituicao,2),
       truncate(tab4.bonificacaoDesconto,2),
  truncate(tab4.moedaBonificacao,2),
	truncate(tab4.margem,2),
	truncate(tab4.descontoMaximo,2),
	truncate(tab4.despesasTributadas,2),
	truncate(tab4.despesaNaoTributadas,2),
	truncate(tab4.contribuicao,2),
	truncate(tab4.vendo,2),
	truncate(tab4.financeiro,2),
	truncate(tab4.despesaFixa,2),
	truncate(tab4.statusPrice,2),
  truncate(tab4.priceFull,2),
  ifnull(tab6.tributacao,"") as Tributo,
  ifnull(tab6.idpiscofins,"") as IdPisCofins,
  ifnull(tab6.cst,"000") as CST,
  ifnull(tab6.cstSaida,"") AS saidaCST,
  ifnull(tab6.cstEntrada,"") as EntradaCST,
  ifnull(tab6.pauta,"") as PautaFiscal,
  truncate(ifnull(tab6.ipiValor,"0"),2) as IPIVALUE,
  ifnull(tab6.spedNcm,"") AS NCM,
  ifnull(spedNcm.descricao,"") as DescricaoNCM,
  ifnull(cst.idCst,"") as CST,
  ifnull(piscofins.idpisCofins,"") as IdPISCofins,
  ifnull(piscofins.Descricao,"") as DescricaoPISCofins,
  ifnull(aliquota.idAliquota,"") as IdTributacao,
  ifnull(concat(aliquota.idAliquota , " - " , aliquota.aliquota),"") as DescricaoTributacao,
  ifnull(typeItem.idTypeItem,"") as ItemTipo,
  ifnull(typeItem.descricao,"") as DescricaoTypeItem,
  ifnull(spedGeneroItem.idGenero,"") as idGenero,
  ifnull(spedGeneroItem.descricao,"") as DescricaoGenero,
  ifnull((concat(spedGeneroItem.codigo, ' | ', spedGeneroItem.descricao)),"") as DescricaoCompostaGenero,
  ifnull(concat(aliquota.idAliquota,' - ',aliquota.aliquota),"") as DescricaoCompostaAliquota,
  ifnull(concat(typeItem.idtypeItem, ' | ', typeItem.descricao),"") as DescricaoCompostaTypeItem,
  truncate(ifnull(aliquota.aliquota,"0"),2) as AliquotaFiscal,
  truncate(ifnull(aliquota.reducao,""),2) as reducaofiscal,
  ifnull(piscofins.creditoPis,"") as creditoPis,
  ifnull(piscofins.creditoCofins,"") as creditoCofins,
  ifnull(aliquota.nome,"") as DescricaoCompletaAliquota,
  ifnull(aliquota.tipo,"") as typeAliquota,
  truncate(ifnull(spedNcm.mvaMain,"0"),2) as mva,
  truncate(ifnull(spedNcm.aliquotaInterestadual,"0"),2) as Interestadual,
  truncate(ifnull(spedNcm.aliquotaInterna,"0"),2) as Interna,
  truncate(ifnull(spedNcm.mvaAjustada,"0"),2) as AjusteMva,
  cst.calcBc,
  cst.calcRed,
  cst.typeCst,
  cst.modalidade,
  truncate(tab6.ipi,2),
  truncate(tab6.reducaoCalcEspecial,2),
  tab.incideIpi,
  ifnull(tab.inputCfop,""),
  ifnull(tab.outputCfop,""),
  truncate(ifnull(newSetor.margem,"0.00"),2) as MargemSetor,
  tab.tipo as Balanca,
  tab2.barra,
  tab.permitiMultiplicacao,
  ifnull(tab7.descricao,"Desconhecido") as NomeUsuarioInsert,
  truncate(tab4.margembruta,2),
  truncate(tab4.margemliquida,2),
  truncate(tab4.precopromocao,2), ifnull(tab4.trunca,"T"), ifnull(tab6.ippt,"T"), ifnull(tab.origemMercadoria,"0")

         from produto tab
             inner join unidadeMedida tab1 on(tab.idunidade = tab1.idunidadeMedida)
             inner join produtoEmbalagem tab2 on(tab.idproduto = tab2.idproduto)
             inner join produtoStore tab3 on(tab.idproduto = tab3.idproduto)
             inner join produtoPrice tab4 on(tab.idproduto = tab4.idproduto)
             inner join produtoEstoques tab5 on(tab.idproduto = tab5.idproduto)
             inner join produtoImpostos tab6 on(tab.idProduto = tab6.idProduto)
             left join (select idUsuario, descricao from usuario order by 1) as tab7 on(tab.idUsuario = tab7.idUsuario)
             inner join (select ifnull(produto.idSetor,0) as setor, ifnull(setor.descricao,0) as descricao, margem from produto inner join produtoEmbalagem tab2 on(produto.idProduto = tab2.idProduto) left join setor on(produto.IdSetor = setor.idSetor) where tab2.barra=find) as newSetor
               on(tab.idsetor = newSetor.setor)
             inner join (select ifnull(produto.idGrupo,0)  as grupo, ifnull(grupo.descricao,0) as descricao from produto inner join produtoEmbalagem tab2 on(produto.idProduto = tab2.idProduto) left join grupo on(produto.idGrupo = grupo.idGrupo) where tab2.barra=find) as newGrupo
               on(tab.idgrupo = newGrupo.grupo)
             inner join (select ifnull(produto.idCategoria,0) as categoria, ifnull(categoria.descricao,0) as descricao from produto inner join produtoEmbalagem tab2 on(produto.idProduto = tab2.idProduto) left join categoria on(produto.IdCategoria = categoria.idCategoria) where tab2.barra=find) as newCategoria
               on(tab.idcategoria = newCategoria.categoria)
             inner join juridica on(tab.idFornecedor = juridica.idcliente)
             left join spedNcm on(tab6.spedNcm =spedNcm.idSpedNcm)
             left join spedGeneroItem on(tab6.idGenero =spedGeneroItem.idGenero)
             left join cst on(tab6.cst = cst.idCst)
             left join pisCofins on(tab6.idpisCofins = pisCofins.idpisCofins)
             left join aliquota on (tab6.tributacao = aliquota.idAliquota)
             left join typeItem on(tab6.idTypeItem = typeItem.idTypeItem)

 where

       tab4.idloja = tab5.idloja and
       tab4.idloja = tab3.idloja and
       tab4.idloja = findIdLoja and
       tab6.idloja = findIdLoja and
       tab2.barra = find and
       newSetor.Setor > 0;

       when 4 then
        set  @a = (reserva_itens(find,findIdLoja));
       select
       tab2.barra,
       tab.nome,
       tab1.unidade,
       tab2.barra,
       if(((now() <= tab6.dateFinal && tab6.precoPromocional > 0 && tab6.precoPromocional = tab4.precoPromocao)||(ifnull(tab6.validade,0)=1)),truncate(tab4.precoPromocao,2), truncate(tab4.priceVenda,2)),

       truncate(ifnull(@a,0),2) as reservas,
       ifnull(tab5.quantidade,0) as estoque,

       truncate((tab5.quantidade - (ifnull(@a,0))),3) Disponivel,
       truncate(tab.tipo,2) as Balanca,
       truncate(tab4.custoLiquido,2),
       truncate(tab4.margemBruta,2),
       truncate(tab4.margemLiquida,2),
       if(((now() <= tab6.dateFinal && tab6.precoPromocional > 0 && tab6.precoPromocional = tab4.precoPromocao)||(ifnull(tab6.validade,0)=1)),"Y", "N"),
       ifnull(tab6.validade,0),
       truncate(tab4.priceVenda,2),
       ifnull(tab6.idfinalizadora,0),
       ifnull(tab6.todosProdutos,0),
       truncate(tab4.priceFull,2),
       truncate(tab4.custoBruto,2),
       truncate(tab4.custoLiquido,2),
       truncate(tab4.custoMedio,2),
       truncate(tab4.custoTransferencia,2), tab.status, tab7.idpisCofins,   ifnull(tab7.cstSaida,"") AS saidaCST,
  ifnull(tab7.cstEntrada,"") as EntradaCST

                from produto tab
             inner join unidadeMedida tab1 on(tab.idunidade = tab1.idunidadeMedida)
             inner join produtoEmbalagem tab2 on(tab.idproduto = tab2.idproduto)
             inner join produtoStore tab3 on(tab.idproduto = tab3.idproduto)
             inner join produtoPrice tab4 on(tab.idproduto = tab4.idproduto)
             inner join produtoEstoques tab5 on(tab.idproduto = tab5.idproduto)
             inner join juridica on(tab.idFornecedor = juridica.idcliente)
             inner join produtoImpostos tab7 on(tab.idproduto = tab7.idproduto)
             left join promocao tab6 on(tab3.idProduto=tab6.idProduto and tab3.idLoja = tab6.idLoja)
             left join pedidoitens item on(tab.idProduto = item.idProduto)
 where


       tab4.idloja = tab5.idloja and
       tab4.idloja = tab3.idloja and
       tab4.idloja = tab7.idloja and
       tab4.idloja = findIdLoja and
       (tab2.barra=find or tab.idProduto=find)
 group by 1,2,3,4,5;

 when 5 then
    select distinct
    tab1.idproduto,
    tab1.nome,
    truncate(tab4.custoAnterior,2),
    truncate(tab4.custoBruto,2),
    truncate(tab4.margem,2),
    truncate(tab4.precoVendaAnterior,2),
    truncate(tab4.priceVenda,2),
    truncate(tab4.lucroBruto,2),
    truncate(tab4.lucroLiquido,2),
    tab3.abreviatura,
    tab3.idloja,
    tab1.idusuarioalt,
    case tab11.idtipoPessoa
        when 1 then tab6.nome
        when 2 then tab8.razao
        when 3 then tab7.nome end nomefornecedor
from
    produto tab1
    inner join produtostore tab2 on (tab1.idproduto = tab2.idproduto)
    inner join loja tab3 on (tab2.idloja = tab3.idloja)
    left join produtoprice tab4 on (tab1.idproduto = tab4.idproduto and tab3.idloja = tab4.idloja)
    inner join cliente tab5 on (tab1.idfornecedor = tab5.idcliente and tab3.idloja = tab5.idloja)
    left join fisica tab6 on (tab1.idfornecedor = tab6.idcliente)
    left join rural tab7 on (tab1.idfornecedor = tab7.idcliente)
    left join juridica tab8 on (tab1.idfornecedor = tab8.idcliente)
    left join entradaitem tab9 on (tab1.idproduto = tab9.idproduto)
    inner join entrada tab10 on (tab9.identrada = tab10.identrada and tab10.idloja)
    inner join tipopessoa tab11 on (tab5.idtipoPessoa = tab11.idtipoPessoa)
where
    tab4.pendente = 's'
    and (tab1.nome like concat(find,'%'))
    and (findIdLoja = 0 or tab2.idloja = findIdLoja)
    and (findIdFornecedor = 0 or tab5.idcliente =  findIdFornecedor)
    and (findNumeroNota = '0' or tab10.nr_nota = findNumeroNota)
    and tab9.dateInsert between findDataInicial and findDataFinal;

  WHEN 6 THEN

select tab2.barra,
       concat(mid(rpad(tab.nome,45,' '),1,44), tab1.unidade),
       concat('R$','  ', round(tab4.priceVenda,2))
         from produto tab
             inner join unidadeMedida tab1 on(tab.idunidade = tab1.idunidadeMedida)
             inner join produtoEmbalagem tab2 on(tab.idproduto = tab2.idproduto)
             inner join produtoStore tab3 on(tab.idproduto = tab3.idproduto)
             inner join produtoPrice tab4 on(tab.idproduto = tab4.idproduto)
             inner join produtoEstoques tab5 on(tab.idproduto = tab5.idproduto)
             inner join setor on(tab.idSetor = setor.idSetor)
 where tab2.defaultVenda = "s" and
       tab4.idloja = tab5.idloja and
       tab4.idloja = tab3.idloja
     and
       tab4.idloja = findIdLoja and
      (tab.nome like concat(find,'%')) and
      (findIdSetor = 0 or tab.idSetor = findIdSetor) and
      (findIdGrupo = 0 or tab.idGrupo = findIdGrupo) and
      (findIdCategoria = 0 or tab.idCategoria = findIdCategoria) and
      (findIdFornecedor = 0 or tab.idFornecedor = findIdFornecedor);
end case;
end $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `conector_find_profissao`
--

DROP PROCEDURE IF EXISTS `conector_find_profissao`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='' */ $$
CREATE DEFINER=`master`@`localhost` PROCEDURE `conector_find_profissao`(
                                                in tipo integer,
                                                in find varchar(45)
                                           )
begin
case tipo
    when 1 then
select 
        idprofissao,
        descricao,
        status
from 
        profissao
where
        idprofissao = find;
        when 2 then
        select 
        idprofissao,
        descricao,
        status
from 
        profissao
where
        descricao like concat("%",find,"%");
        else
        select 
        idprofissao,
        descricao,
        status
from 
        profissao;
        end case;
end $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `conector_find_promocao`
--

DROP PROCEDURE IF EXISTS `conector_find_promocao`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='' */ $$
CREATE DEFINER=`root`@`%` PROCEDURE `conector_find_promocao`(
                                            in tipo smallint,
                                            in find_loja double,
                                            in di date,
                                            in df date,
                                            in find_produto double,
                                            in find_tipo_promocao int,
                                            in escolha smallint,
                                            in chave double
                                       )
begin

    DECLARE done INT DEFAULT FALSE;
    declare auxChave double;
    declare auxLoja int(11);
    declare auxProduto double;
    
case tipo
        when 1 then
select 
    tab.idProduto as Cod,
    tab.nome as Descricao,
    date_format(tab6.dateInicial,'%d/%m/%Y') as Data_Inicio,
    tab6.validade as Indeterminado,
    date_format(tab6.dateFinal,'%d/%m/%Y'),
    truncate(tab6.precoPromocional,2),
    truncate(tab4.priceVenda,2),
    truncate(tab4.custoLiquido,2),
    tab6.idLoja,
    tab0.razao,
    tab5.quantidade,
    tab7.idTipoPromocao,
    tab7.descricao,
    tab6.qttyDisponivel,
    tab6.leve,
    truncate(tab6.pague,2),
    tab6.validade,
    truncate(tab6.descontoCalc,2),
    truncate(tab6.descontoAplicadoSetor,2),
    tab6.quantidadeMaxLevePague,
    tab6.todosProdutos,
    tab6.todasLojas,
    tab6.todasFinalizadora,
    tab6.idSetor,
    tab6.idGrupo,
    tab6.idCategoria,
    tab6.idFornecedor,
    tab6.idFinalizadora,
    ifnull(tab6.usuarioInc,""),
    ifnull(tab8.login,""),
    ifnull(tab6.usuarioAlt,""),
    ifnull(tab9.login,""),
    ifnull(tab6.horaInc,"00:00"),
    ifnull(tab6.horaAlt,"00:00"),
    ifnull(tab6.dataAlt,"00-00-0000"),
    ifnull(tab6.dataInc,"00-00-0000"),
    ifnull(tab01.descricao,"")
         from produto tab
             inner join unidadeMedida tab1 on(tab.idunidade = tab1.idunidadeMedida)
             inner join produtoEmbalagem tab2 on(tab.idproduto = tab2.idproduto)
             inner join produtoStore tab3 on(tab.idproduto = tab3.idproduto)
             inner join produtoPrice tab4 on(tab.idproduto = tab4.idproduto)
             inner join produtoEstoques tab5 on(tab.idproduto = tab5.idproduto)
             inner join setor on(tab.idSetor = setor.idSetor)
             inner join promocao tab6 on(tab.idProduto = tab6.idProduto)
             inner join tipopromocao tab7 on(tab6.tipopromocao = tab7.idTipoPromocao)
             left join usuario tab8 on(tab6.usuarioInc = tab8.idUsuario)
             left join usuario tab9 on(tab6.usuarioAlt = tab9.idUsuario)
             left join loja tab0 on(tab6.idLoja = tab0.idLoja)
             left join finalizadora tab01 on(tab6.idFinalizadora = tab01.idFinalizadora)
 where tab2.defaultVenda = "s" and
       tab4.idloja = tab5.idloja and
       tab4.idloja = tab3.idloja and
       
      (tab4.idloja = find_loja) and tab6.idProduto=find_produto and tab6.idPromocao=chave;
            when 2 then
            
            select 
                tab.idProduto as Cod,
                tab.nome as Descricao,
                date_format(tab6.dateInicial,'%d/%m/%Y') as Data_Inicio,
                tab6.validade as Indeterminado,
                date_format(tab6.dateFinal,'%d/%m/%Y'),
                truncate(tab6.precoPromocional,2),
                truncate(tab4.priceVenda,2),
                truncate(tab4.custoLiquido,2),
                tab5.quantidade,
                tab6.idLoja,
                tab6.idPromocao
            from produto tab
                    inner join unidadeMedida tab1 on(tab.idunidade = tab1.idunidadeMedida)
                    inner join produtoEmbalagem tab2 on(tab.idproduto = tab2.idproduto)
                    inner join produtoStore tab3 on(tab.idproduto = tab3.idproduto)
                    inner join produtoPrice tab4 on(tab.idproduto = tab4.idproduto)
                    inner join produtoEstoques tab5 on(tab.idproduto = tab5.idproduto)
                    inner join setor on(tab.idSetor = setor.idSetor)
                    inner join promocao tab6 on(tab.idProduto = tab6.idProduto)
            where tab2.defaultVenda = "s" and
                    tab4.idloja = tab5.idloja and
                    tab4.idloja = tab3.idloja and
                    (find_tipo_promocao=0 or tab6.tipopromocao=find_tipo_promocao) and
                    tab4.idLoja = tab6.idLoja and
                    (find_loja=0 or tab4.idloja = find_loja) and
                    (find_loja=0 or tab6.idloja = find_loja) and
                    (find_produto=0 or tab6.idProduto = find_produto) and
                        if(escolha=1,tab6.dateInicial >= di and tab6.dateInicial <= df,0=0) and
                        if(escolha=2,tab6.dateFinal >= di and tab6.dateFinal <= df,0=0) and
                        if(escolha=3,tab6.dateFinal = df,0=0) and
                        if(escolha=4,tab6.dateFinal = df,0=0) and
                        if(escolha=0,tab6.validade = 1,0=0) order by 1,10 ;
      
      when 3 then
    begin      
    DECLARE basicFonte CURSOR for select 
                tab6.idPromocao,
                tab6.idLoja,
                tab6.idProduto
                
            from produto tab
                    inner join unidadeMedida tab1 on(tab.idunidade = tab1.idunidadeMedida)
                    inner join produtoEmbalagem tab2 on(tab.idproduto = tab2.idproduto)
                    inner join produtoStore tab3 on(tab.idproduto = tab3.idproduto)
                    inner join produtoPrice tab4 on(tab.idproduto = tab4.idproduto)
                    inner join produtoEstoques tab5 on(tab.idproduto = tab5.idproduto)
                    inner join setor on(tab.idSetor = setor.idSetor)
                    inner join promocao tab6 on(tab.idProduto = tab6.idProduto)
            where tab2.defaultVenda = "s" and
                    tab4.idloja = tab5.idloja and
                    tab4.idloja = tab3.idloja and
                    (find_tipo_promocao=0 or tab6.tipopromocao=find_tipo_promocao) and
                    
                    (find_loja=0 or tab4.idloja = find_loja) and
                    (find_loja=0 or tab6.idloja = find_loja) and
                    (find_produto=0 or tab6.idProduto = find_produto) and
                        if(escolha=1,tab6.dateInicial >= di and tab6.dateInicial <= df,0=0) and
                        if(escolha=2,tab6.dateFinal >= di and tab6.dateFinal <= df,0=0) and
                        if(escolha=3,tab6.dateFinal = df,0=0) and
                        if(escolha=4,tab6.dateFinal = df,0=0) and
                        if(escolha=0,tab6.validade = 1,0=0);            
                        DECLARE CONTINUE HANDLER FOR NOT FOUND SET done = TRUE;
                        open basicFonte;
                            read_loop: LOOP
                          fetch basicFonte into auxChave, auxLoja, auxProduto;
                          
                    IF done THEN
                        LEAVE read_loop;
                    END IF;
                    
                    call conector_del_promocaoItem(auxChave, auxLoja, auxProduto);
                      end loop;
        close basicFonte;
        end;
    end case;
      
      end $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `conector_find_recebivelBoletos`
--

DROP PROCEDURE IF EXISTS `conector_find_recebivelBoletos`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='' */ $$
CREATE DEFINER=`master`@`localhost` PROCEDURE `conector_find_recebivelBoletos`(
                                                                                in tipo integer,
                                                                                in pessoa double,
                                                                                in store double,
                                                                                in conta integer,
                                                                                in di varchar(15),
                                                                                in df varchar(15),
                                                                                in escolha int,
                                                                                in pagamento char(1),
                                                                                in VarTypeBaixa char(2),
                                                                                in VarCaixa int(11),
                                                                                in VarFinalizadora smallint(5),
                                                                                in VarConta int(11),
                                                                                in VarBanco int(11)
                                                )
begin

  declare VarTaxa decimal(15,3) default 0;
  declare VaridConta double default 0;
  declare VarValor decimal(15,3) default 0;
  DECLARE done INT DEFAULT FALSE;
  select
        receberTaxa
            from
                system
                      into
                          VarTaxa;

                          if(VarTaxa is null)then set VarTaxa=0; end if;

case tipo
    when 1 then

select
                 tab.idContasReceber,
                 tab.`cliente`,
                 case tab0.idtipoPessoa when 1 then tab1.nome
                                        when 2 then tab2.razao
                                        when 3 then tab3.nome end,
                 tab.`fatura` ,
                 tab.`idloja`,
                 tab4.razao,
                 tab.`flagPagamento`,
                 ifnull(tab.`pagamento`,"00000000"),
                 tab.`vencimento`,
                 tab.`emissao`,
                 ifnull(tab.`reserva`,""),
                 tab.`usuario`,
                 ifnull(tab.`finalizadora`,""),
                 ifnull(tab6.descricao,""),
                 round(tab.`valorPago`,2),
                 tab.`observacao`,
                 ifnull(tab.`tipoMovimentacao`,""),
                 ifnull(tab.`conta`,""),
                 ifnull(tab7.nome,""),
                 ifnull(tab.`banco`,""),
                 ifnull(tab.`flagAlteracao`,""),
                 ifnull(tab.`carteira`,""),
                 ifnull(tab5.nome,""),
                 ifnull(tab.`nossoNumero`,""),
                 ifnull(tab.`historicoBaixa`,""),
                 ifnull(tab.`historico`,""),
                 tab.`tarifa`,
                 ifnull(tab.`tipoBaixa`,""),
                                    case tab.tipoBaixa when null then ""
                                                       when "00" then "00 | BANCO"
                                                       when "01" then "01 | CAIXA" else "" end,

                 ifnull(tab.`caixa`,""),
                 ifnull(tab8.descricao,""),
                 round(tab.`abatimentos`,2),
                 round(tab.`descontos`,2),
                 round(tab.`acrescimos`,2),
                 ifnull(tab.`vencimentoCobranca`,""),
                 ifnull(tab.`usuarioBaixa`,""),
                 tab.`confirmadas`,
                 ifnull(tab.`terminal`,""),
                 tab.`documentoFiscal`,
                 tab.`batimento`,
                 tab.`origem`,
                 tab.`parcela`,
                 round(tab.`qttyParcela`,3),
                 round(tab.`valor`,2),
                 round(tab.taxa,2)
                         from contasReceber tab
                                                left join cliente tab0 on(tab.Cliente = tab0.idCliente)
                                                left join fisica tab1 on(tab.Cliente = tab1.idCliente)
                                                left join juridica tab2 on(tab.Cliente = tab2.idCliente)
                                                left join rural tab3 on(tab.Cliente = tab3.idCliente)
                                                inner join loja tab4 on(tab.idloja = tab4.idLoja)
                                                left join carteira tab5 on(tab.carteira = tab5.idCarteira)
                                                left join finalizadora tab6 on(tab.finalizadora = tab6.idfinalizadora)
                                                left join conta tab7 on(tab.conta = tab7.idConta)
                                                left join caixa tab8 on(tab.caixa = tab8.idCaixa)
                                                                      where
                                                                            tab.idContasReceber=conta;
  when 2 then

select
                 tab.`idloja`,
                 case tab0.idtipoPessoa when 1 then tab1.nome
                                        when 2 then tab2.razao
                                        when 3 then tab3.nome end,
                 tab.`fatura`,
                 date_format(tab.`emissao`, '%d/%m/%Y'),
                 date_format(tab.`vencimento`, '%d/%m/%Y'),
                 tab.`batimento`,
                 round(tab.`valor`,2),
                 round(if((to_days(now()) - to_days(tab.vencimento)) < 0, (tab.valor*VarTaxa*(-1*(to_days(now()) - to_days(tab.vencimento))))/100, 0),2) as Juros,
                 round(if((to_days(now()) - to_days(tab.vencimento)) < 0, ((tab.valor*VarTaxa*(-1*(to_days(now()) - to_days(tab.vencimento))))/100) + tab.valor, tab.`valor`),2) as Total,
                 date_format(tab.`pagamento`, '%d/%m/%Y'),
                 round(tab.`valorPago`,2),
                 tab.`historico`,
                 tab.idContasReceber
                         from contasReceber tab
                                                left join cliente tab0 on(tab.Cliente = tab0.idCliente)
                                                left join fisica tab1 on(tab.Cliente = tab1.idCliente)
left join juridica tab2 on(tab.Cliente = tab2.idCliente)
                                                left join rural tab3 on(tab.Cliente = tab3.idCliente)
                                                                        where
                                                                                (conta=0 or tab.idContasReceber=conta) and
                                                                                (0=store or tab.idLoja = store) and
                                                                                (0=pessoa or tab.Cliente = pessoa) and
                                                                                               if(escolha=1, tab.emissao between di and df, 0=0) and
                                                                                               if(escolha=2, tab.vencimento between di and df, 0=0) and
                                                                                               if(escolha=3, tab.pagamento between date_format(di, '%Y%m%d') and date_format(df, '%Y%m%d'), 0=0) and
                                                                                                (pagamento="f" or tab.flagPagamento = pagamento);

  when 3 then

select
                 round(sum(if(flagPagamento='n',tab.`valor`,0)),2),
                 sum(round(if(((to_days(now()) - to_days(tab.vencimento)) < 0) && flagPagamento='n', (tab.valor*VarTaxa*(-1*(to_days(now()) - to_days(tab.vencimento))))/100, 0),2)) as Juros,
                 sum(round(if(((to_days(now()) - to_days(tab.vencimento)) < 0) && flagPagamento='n', ((tab.valor*VarTaxa*(-1*(to_days(now()) - to_days(tab.vencimento))))/100) + tab.valor, if(tab.flagPagamento='n',tab.`valor`,0)),2)) as Total,
                 round(SUM(tab.`valorPago`),2)
                         from contasReceber tab
                                                left join cliente tab0 on(tab.Cliente = tab0.idCliente)
                                                left join fisica tab1 on(tab.Cliente = tab1.idCliente)
                                                left join juridica tab2 on(tab.Cliente = tab2.idCliente)
                                                left join rural tab3 on(tab.Cliente = tab3.idCliente)
                                                                        where
                                                                                (conta=0 or tab.idContasReceber=conta) and
                                                                                (0=store or tab.idLoja = store) and
                                                                                (0=pessoa or tab.Cliente = pessoa) and
                                                                                               if(escolha=1, tab.emissao between di and df, 0=0) and
                                                                                               if(escolha=2, tab.vencimento between di and df, 0=0) and
                                                                                               if(escolha=3, tab.pagamento between date_format(di, '%Y%m%d') and date_format(df, '%Y%m%d'), 0=0) and
                                                                                                (pagamento="f" or tab.flagPagamento = pagamento);

  when 4 then
begin
    DECLARE basicFonte CURSOR for
    select
                 tab.idContasReceber, round(tab.`valorPago`,2)
                         from contasReceber tab
                                                left join cliente tab0 on(tab.Cliente = tab0.idCliente)
                                                left join fisica tab1 on(tab.Cliente = tab1.idCliente)
                                                left join juridica tab2 on(tab.Cliente = tab2.idCliente)
                                                left join rural tab3 on(tab.Cliente = tab3.idCliente)
                                                                        where
                                                                                (conta=0 or tab.idContasReceber=conta) and
                                                                                (0=store or tab.idLoja = store) and
                                                                                (0=pessoa or tab.Cliente = pessoa) and
                                                                                               if(escolha=1, tab.emissao between di and df, 0=0) and
                                                                                               if(escolha=2, tab.vencimento between di and df, 0=0) and
                                                                                               if(escolha=3, tab.pagamento between date_format(di, '%Y%m%d') and date_format(df, '%Y%m%d'), 0=0) and
                                                                                                (pagamento="f" or tab.flagPagamento = pagamento);
                          DECLARE CONTINUE HANDLER FOR NOT FOUND SET done = TRUE;
    open basicFonte;

    read_loop: LOOP
                          fetch basicFonte into
                                              VaridConta,VarValor;


                    IF done THEN
                        LEAVE read_loop;
                    END IF;

                    update contasReceber set valorPago=VarValor, caixa = VarCaixa , tipoBaixa = VarTypeBaixa, flagPagamento = 's', pagamento = date_format(now(), '%Y%m%d'), finalizadora=VarFinalizadora, conta=VarConta where idContasReceber = VaridConta;

            end loop;
        close basicFonte;
    end;
        when 5 then

select
      count(*)
                         from contasReceber tab
                                                left join cliente tab0 on(tab.Cliente = tab0.idCliente)
                                                left join fisica tab1 on(tab.Cliente = tab1.idCliente)
                                                left join juridica tab2 on(tab.Cliente = tab2.idCliente)
                                                left join rural tab3 on(tab.Cliente = tab3.idCliente)
                                                                        where
                                                                                (conta=0 or tab.idContasReceber=conta) and
                                                                                (0=store or tab.idLoja = store) and
                                                                                (0=pessoa or tab.Cliente = pessoa) and
                                                                                               if(escolha=1, tab.emissao between di and df, 0=0) and
                                                                                               if(escolha=2, tab.vencimento between di and df, 0=0) and
                                                                                               if(escolha=3, tab.pagamento between date_format(di, '%Y%m%d') and date_format(df, '%Y%m%d'), 0=0) and
                                                                                                (pagamento="f" or tab.flagPagamento = pagamento);


         end case;
end $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `conector_find_recebivelCard`
--

DROP PROCEDURE IF EXISTS `conector_find_recebivelCard`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='' */ $$
CREATE DEFINER=`root`@`%` PROCEDURE `conector_find_recebivelCard`(
                                                                                                in tipo int,
                                                                                                in terminal int,
                                                                                                in doc double,
                                                                                                in adm int,
                                                                                                in store int,
                                                                                                in di date,
                                                                                                in df date, in escolha int,
                                                                                                IN find varchar(45),
                                                                                                in filtroRecebimento smallint,
                                                                                                in users int)
begin

  DECLARE done INT DEFAULT FALSE;
  declare `Varidcartao` double;
  declare `VaridAdministradora` int(11);
  declare `Varidloja` int(11);
  declare `Varinclusao` date;
  declare `Varalteracao` date;
  declare `Varcupom` double;
  declare `Varpedido` double;
  declare `Varterminal` int(11);
  declare `Varemissao` date;
  declare `Varvencimento` date;
  declare `Varpagamento` varchar(8);
  declare `Varstatus` char(1);
  declare `Varobservacao` varchar(50);
  declare `Varparcela` int(11);
  declare `VarqttyParcela` int(11);
  declare `VartypeCartao` int(11);
  declare `Varbandeira` double;
  declare `Varvalor` decimal(15,3);
  declare `Varprazo` int(11);
  declare `VarnetworkCard` int(11);
  declare `Varconferencia` varchar(1);
  declare `Varorigem` char(1);
  declare `Varbatimento` char(1);
  declare `Varenvio` char(8);
  declare `VaridconectCard` int(11);
  declare `VarvalorLiquido` decimal(15,3);
  declare `VartaxaValor` decimal(15,3);


case tipo
  when 1 then
select
                     tab.`idloja`,
                     date_format(tab.`emissao`,'%d/%m/%Y'),
                     date_format(tab.`vencimento`,'%d/%m/%Y'),
                     tab1.razao,
                     ifnull(Concat(tab.parcela,"/",tab.qttyParcela),"") as Parcelamento,
                     round(tab.`valor`,2),
                     round((tab.valor - ((tab.valor * tab1.taxa)/100)),2) as liquido,
                     tab.status,
                     tab.batimento,
                     date_format(tab.pagamento, '%d/%m/%Y'),
                     date_format(tab.Envio,'%d/%m/%Y'),
                     round(tab1.taxa,2),
                     tab.`terminal`,
                     tab.`cupom`,
                     tab.idCartao
                                 from  cartao tab
                                           inner join administradora tab1 on(tab.idAdministradora = tab1.idAdministradora)
                                                                                       where
                                                                                              (0=terminal or tab.`terminal`=terminal)and
                                                                                              (0=doc or tab.`cupom` = doc) and
                                                                                              (0= adm or tab.`idAdministradora` = adm) and
                                                                                               (store=0 or tab.idLoja=store) and
                                                                                               if(escolha=4, tab.emissao between di and df, 0=0) and
                                                                                               if(escolha=3, tab.pagamento between di and df, 0=0) and
                                                                                               if(escolha=1, tab.vencimento between di and df, 0=0) and
                                                                                               if(escolha=2, tab.envio between di and df, 0=0) and
                                                                                               if(filtroRecebimento=0, tab.valorliquido = 0 ,0=0) and
                                                                                               if(filtroRecebimento=1, tab.valorliquido > 0 ,0=0) and
                                                                                               if(filtroRecebimento=2, (tab.envio != '00000000' && tab.envio is not null) ,0=0);
  when 2 then
select
                     tab.idCartao,
                     tab.`idloja`,
                     tab.`emissao`,
                     ifnull(tab.`vencimento`,'00/00/0000'),
                     tab1.razao,
                     round(tab.`valor`,2),
                     round(tab1.taxa,2),
                     tab.`terminal`,
                     tab.`cupom`,
                     tab.batimento,
                     tab.idCartao,
                     tab2.Razao,
                     tab1.idAdministradora,
                     tab.qttyParcela,
                     tab.typeCartao,
                     tab.parcela,
                     ifnull(tab.bandeira,""),
                     tab.networkCard,
                     tab.cupom,
                     tab.terminal,
                     tab.batimento,
                     ifnull(tab.observacao,"")
                                 from  cartao tab
                                           inner join administradora tab1 on(tab.idAdministradora = tab1.idAdministradora)
                                           inner join loja tab2 on(tab.idLoja = tab2.idLoja)
                                                                                       where
                                                                                               tab.idLoja=store and tab.idCartao=find;

  when 3 then

          select
                     round(sum(if(tab.status=0 &&(tab.pagamento is null || tab.pagamento = '00000000' || tab.pagamento = '0' || tab.pagamento = ""),tab.`valor`,0)),2) Aberto,
                    
                     round(sum(if(tab.status=1 && (tab.pagamento is not null && tab.pagamento != '00000000' && tab.pagamento != '0' && tab.pagamento != ""),(tab.valor - ((tab.valor * tab1.taxa)/100)),0)),2) as liquido,
                     round(sum(((tab.valor * tab1.taxa)/100)),2) as repasse
                                 from  cartao tab
                                           inner join administradora tab1 on(tab.idAdministradora = tab1.idAdministradora)
                                                                                       where
                                                                                              (0=terminal or tab.`terminal`=terminal)and
                                                                                              (0=doc or tab.`cupom` = doc ) and
                                                                                              (0= adm or tab.`idAdministradora` = adm) and
                                                                                               (store=0 or tab.idLoja=store) and
                                                                                               if(escolha=4, tab.emissao between di and df, 0=0) and
                                                                                               if(escolha=3, tab.pagamento between di and df, 0=0) and
                                                                                               if(escolha=1, tab.vencimento between di and df, 0=0) and
                                                                                               if(escolha=2, tab.envio between di and df, 0=0) and
                                                                                               if(filtroRecebimento=0, tab.valorliquido = 0 ,0=0) and
                                                                                               if(filtroRecebimento=1, tab.valorliquido > 0 ,0=0) and
                                                                                               if(filtroRecebimento=2, (tab.envio != '00000000' && tab.envio is not null) ,0=0);


  when 4 then
    begin

    DECLARE basicFonte CURSOR for

    select
             tab.idcartao,
             tab.idAdministradora,
             tab.idloja,
             tab.inclusao,
             tab.alteracao,
             tab.cupom,
             tab.pedido,
             tab.terminal,
             tab.emissao,
             ifnull(tab.vencimento,"00/00/0000"),
             tab.pagamento,
             tab.status,
             tab.observacao,
             tab.parcela,
             tab.qttyParcela,
             tab.typeCartao,
             ifnull(tab.bandeira,""),
             round(tab.valor,2),
             tab.prazo,
             tab.networkCard,
             tab.conferencia,
             tab.origem,
             tab.batimento,
             tab.envio,
             tab.idconectCard,
             tab.valorLiquido,
             round(tab.taxaValor,2)
                          from  cartao tab
                                           inner join administradora tab1 on(tab.idAdministradora = tab1.idAdministradora)
                                                                                       where
                                                                                              (0=terminal or tab.`terminal`=terminal)and
                                                                                              (0=doc or tab.`cupom` = doc) and
                                                                                              (0= adm or tab.`idAdministradora` = adm) and
                                                                                               (store=0 or tab.idLoja=store) and
                                                                                               if(escolha=4, tab.emissao between di and df, 0=0) and
                                                                                               if(escolha=3, tab.pagamento between di and df, 0=0) and
                                                                                               if(escolha=1, tab.vencimento between di and df, 0=0) and
                                                                                               if(escolha=2, tab.envio between di and df, 0=0) and
                                                                                               if(filtroRecebimento=0, tab.valorliquido = 0 ,0=0) and
                                                                                               if(filtroRecebimento=1, tab.valorliquido > 0 ,0=0) and
                                                                                               if(filtroRecebimento=2, (tab.envio != '00000000' && tab.envio is not null) ,0=0);
                          DECLARE CONTINUE HANDLER FOR NOT FOUND SET done = TRUE;
    open basicFonte;

    read_loop: LOOP
                          fetch basicFonte into
                                              `Varidcartao`,
                                              `VaridAdministradora`,
                                              `Varidloja`,
                                              `Varinclusao` ,
                                              `Varalteracao` ,
                                              `Varcupom`,
                                              `Varpedido`,
                                              `Varterminal`,
                                              `Varemissao` ,
                                              `Varvencimento` ,
                                              `Varpagamento`,
                                              `Varstatus`,
                                              `Varobservacao`,
                                              `Varparcela`,
                                              `VarqttyParcela`,
                                              `VartypeCartao`,
                                              `Varbandeira`,
                                              `Varvalor`,
                                              `Varprazo`,
                                              `VarnetworkCard`,
                                              `Varconferencia`,
                                              `Varorigem`,
                                              `Varbatimento`,
                                              `Varenvio`,
                                              `VaridconectCard`,
                                              `VarvalorLiquido`,
                                              `VartaxaValor`;


                    IF done THEN
                        LEAVE read_loop;
                    END IF;

  select taxa from administradora where idAdministradora=VaridAdministradora into @taxa;
  if(@taxa is null)then set @taxa=0; end if;
  if(`Varobservacao`="")then set Varobservacao=`Baixa Cartão lote:`; end if;
  update cartao set
                     `alteracao`=now(),
                     `observacao`=`Varobservacao`,
                     `valorLiquido`=`Varvalor`,
                     `status`=1,
                      taxaValor = round(((Varvalor * @taxa)/100),2),
                      pagamento=date_format(now(),'%Y%m%d')
                                where `idcartao`=`Varidcartao` and `parcela`=`Varparcela` and `idloja`=`Varidloja`;


            end loop;
        close basicFonte;
    end;

  when 5 then
  select
        count(*)
                           from  cartao tab
                                           inner join administradora tab1 on(tab.idAdministradora = tab1.idAdministradora)
                                                                                       where
                                                                                              (0=terminal or tab.`terminal`=terminal)and
                                                                                              (0=doc or tab.`cupom` = doc) and
                                                                                              (0= adm or tab.`idAdministradora` = adm) and
                                                                                               (store=0 or tab.idLoja=store) and
                                                                                               if(escolha=4, tab.emissao between di and df, 0=0) and
                                                                                               if(escolha=3, tab.pagamento between di and df, 0=0) and
                                                                                               if(escolha=1, tab.vencimento between di and df, 0=0) and
                                                                                               if(escolha=2, tab.envio between di and df, 0=0) and
                                                                                               if(filtroRecebimento=0, tab.valorliquido = 0 ,0=0) and
                                                                                               if(filtroRecebimento=1, tab.valorliquido > 0 ,0=0) and
                                                                                               if(filtroRecebimento=2, (tab.envio != '00000000' && tab.envio is not null) ,0=0);


  when 6 then 
    
    begin

    DECLARE basicFonte CURSOR for

    select
             tab.idcartao,
             tab.idAdministradora,
             tab.idloja,
             tab.inclusao,
             tab.alteracao,
             tab.cupom,
             tab.pedido,
             tab.terminal,
             tab.emissao,
             tab.vencimento,
             tab.pagamento,
             tab.status,
             tab.observacao,
             tab.parcela,
             tab.qttyParcela,
             tab.typeCartao,
             tab.bandeira,
             tab.valor,
             tab.prazo,
             tab.networkCard,
             tab.conferencia,
             tab.origem,
             tab.batimento,
             tab.envio,
             tab.idconectCard,
             tab.valorLiquido,
             tab.taxaValor
                          from  cartao tab
                                           inner join administradora tab1 on(tab.idAdministradora = tab1.idAdministradora)
                                                                                       where
                                                                                              (0=terminal or tab.`terminal`=terminal)and
                                                                                              (0=doc or tab.`cupom` = doc ) and
                                                                                              (0= adm or tab.`idAdministradora` = adm) and
                                                                                               (store=0 or tab.idLoja=store) and
                                                                                               if(escolha=4, tab.emissao between di and df, 0=0) and
                                                                                               if(escolha=3, tab.pagamento between di and df, 0=0) and
                                                                                               if(escolha=1, tab.vencimento between di and df, 0=0) and
                                                                                               if(escolha=2, tab.envio between di and df, 0=0) and
                                                                                               if(filtroRecebimento=0, tab.valorliquido = 0 ,0=0) and
                                                                                               if(filtroRecebimento=1, tab.valorliquido > 0 ,0=0) and
                                                                                               if(filtroRecebimento=2, (tab.envio != '00000000' && tab.envio is not null) ,0=0);
                          DECLARE CONTINUE HANDLER FOR NOT FOUND SET done = TRUE;
    open basicFonte;

    read_loop: LOOP
                          fetch basicFonte into
                                              `Varidcartao`,
                                              `VaridAdministradora`,
                                              `Varidloja`,
                                              `Varinclusao` ,
                                              `Varalteracao` ,
                                              `Varcupom`,
                                              `Varpedido`,
                                              `Varterminal`,
                                              `Varemissao` ,
                                              `Varvencimento` ,
                                              `Varpagamento`,
                                              `Varstatus`,
                                              `Varobservacao`,
                                              `Varparcela`,
                                              `VarqttyParcela`,
                                              `VartypeCartao`,
                                              `Varbandeira`,
                                              `Varvalor`,
                                              `Varprazo`,
                                              `VarnetworkCard`,
                                              `Varconferencia`,
                                              `Varorigem`,
                                              `Varbatimento`,
                                              `Varenvio`,
                                              `VaridconectCard`,
                                              `VarvalorLiquido`,
                                              `VartaxaValor`;


                    IF done THEN
                        LEAVE read_loop;
                    END IF;

  select taxa from administradora where idAdministradora=VaridAdministradora into @taxa;
  if(@taxa is null)then set @taxa=0; end if;
  if(`Varobservacao`="")then set Varobservacao=`CARTAO ENVIADO COM SUCESSO...`; end if;
  if(`Varenvio` = "00000000" || `Varenvio` is null ||`Varenvio` = '')then
  update cartao set
                     `alteracao`=now(),
                     `observacao`=`Varobservacao`,
                      envio=find
                                where `idcartao`=`Varidcartao` and `parcela`=`Varparcela` and `idloja`=`Varidloja`;

  end if;
            end loop;
        close basicFonte;
    end;
end case;
end $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `conector_find_recebivelCheque`
--

DROP PROCEDURE IF EXISTS `conector_find_recebivelCheque`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='' */ $$
CREATE DEFINER=`master`@`localhost` PROCEDURE `conector_find_recebivelCheque`(
                                                    in tipo int,
                                                    in pessoa double,
                                                    in bank int,
                                                    in store double,
                                                    in find_cheque varchar(45),
                                                    in di date,
                                                    in df date,
                                                    in escolha int,
                                                    in doc varchar(45),
                                                    in pdv int,
                                                    in recebivel char(1),
                                                    in typeCheque char(1),
                                                    in conta varchar(45)

                                              )
begin
case tipo
    when 1 then
select
        tab.idLoja,
        case tab2.idtipoPessoa
                        when 1 then
                            tab4.nome
                        when 2 then
                            tab5.razao
                        when 3 then
                            tab6.nome end Nome,
        tab.numberCheque,
        date_format(tab.emissao,"%d/%m/%Y"),
        date_format(tab.Vencimento,"%d/%m/%Y"),
        round(tab.valueCheque,2),
        tab3.nome,
        tab.conferencia,
        round(tab.valorPago,2),
        if(tab.pagamento="","00000000",ifnull(date_format(tab.pagamento,"%d/%m/%Y"),"00000000")),
        tab.terminal,
        tab.cupom,
        tab.idCheque
            from
                cheque tab
                        inner join loja tab1 on(tab.idLoja = tab1.idLoja)
                        inner join cliente tab2 on(tab.idCliente = tab2.idCliente)
                        inner join banco tab3 on(tab.banco = tab3.idBanco)
                        left join fisica tab4 on(tab2.idCliente = tab4.idCliente)
                        left join juridica tab5 on(tab2.idCliente = tab5.idCliente)
                        left join rural tab6 on(tab2.idCliente = tab6.idCliente)
                                                    where
                                                    (pessoa=0 or tab2.idCliente = pessoa) and
                                                    (bank=0 or tab3.idBanco=bank) and
                                                    (store=0 or tab1.idLoja=store) and
                                                    (find_cheque='0' or tab.`numberCheque`=find_cheque) and
                                                                                               if(escolha=1, tab.emissao between di and df, 0=0) and
                                                                                               if(escolha=3, tab.pagamento between date_format(di,"%Y%m%d") and date_format(df,"%Y%m%d"), 0=0) and
                                                                                               if(escolha=2, tab.vencimento between di and df, 0=0) and
                                                    (doc="0" or tab.cupom=doc) and
                                                    (pdv="0" or tab.terminal=pdv) and
                                                    (conta="0" or tab.`contaCorrente`=conta) and
                                                    (recebivel="o" or flagPagamento=recebivel) and
                                                                                               if(typeCheque="v", tab.emissao=tab.vencimento, "0"="0") and
                                                                                               if(typeCheque="p", tab.vencimento > tab.emissao, "0"="0");
    when 2 then
    select
          tab.`idcheque`,
          case tab2.idTipoPessoa when 1 then
                                    tab3.nome
                                 when 2 then
                                    tab4.razao
                                 when 3 then
                                    tab5.nome end,
          tab.`banco`,
          tab1.nome,
          tab.`idloja`,
          tab6.Razao,
          tab.`idcliente`,
          tab.`typeRecebimento`,
          tab.`contaCorrente`,
          tab.`serie`,
          tab.`agencia`,
          tab.`typeCheque`,
          tab.`prazo`,
          date_format(tab.emissao,"%d/%m/%Y"),
          date_format(tab.Vencimento,"%d/%m/%Y"),
          ifnull(tab.`cityBanco`,""),
          tab.`numberCheque`,
          round(tab.`valueCheque`,2),
          tab.`historico`,
          concat(tab.typeLancamento, " | ", tab7.descricao),
          if(ifnull(tab.`pagamento`,'00000000')='','00000000',date_format(ifnull(tab.`pagamento`,'00000000'),"%d/%m/%Y")), 
          ifnull(tab.`observacao`,""),
          tab.`idUsuarioLiberacao`,
          tab.`motivoLiberacao`,
          ifnull(tab.`cmc7`,""),
          tab.`idusuario`,
          tab.`alteracao`,
          tab.`reserva`,
          tab.`origem`,
          tab.`cupom`,
          tab.`terminal`,
          ifnull(tab.`typeBaixa`,"00"),
          tab.`conferencia`,
          ifnull(tab.`caixa`,""),
          ifnull(tab.`contaBaixa`,""),
          tab.`flagPagamento`,
          tab.`valorPago`,
          ifnull(tab.`motivo`,""),
          tab.typeLancamento,
          tab.idFuncionario,
          ifnull(tab8.nome,""),
          ifnull(tab8.idFuncao,""),
          ifnull(tab14.nome,""),
          ifnull(tab0.descricao,""),
          ifnull(tab.finalizadoraCaixa,""),
          ifnull(tab11.descricao,""),
          ifnull(tab.motivo,""),
          ifnull(tab12.descricao, "")
                from
                 `conector`.`cheque`  tab
                            inner join banco tab1 on(tab.banco = tab1.idBanco)
                            inner join cliente tab2 on(tab.idCliente = tab2.idCliente)
                            left join fisica tab3 on(tab2.idCliente = tab3.idCliente)
                            left join juridica tab4 on(tab2.idCliente = tab4.idCliente)
                            left join rural tab5 on(tab2.idCliente = tab5.idCliente)
                            inner join loja tab6 on(tab.idLoja = tab6.idLoja)
                            left join typeLancamento tab7 on(tab.typeLancamento = tab7.idTypeLancamento)
                            left join funcionario tab8 on(tab8.idFuncionario = tab.idFuncionario)
                            left join contaCorrente tab9 on(tab9.idContaCorrente = tab.contaBaixa)
                            left join caixa tab0 on(tab0.idCaixa = tab.caixa)
                            left join finalizadora tab11 on(tab11.idFinalizadora = tab.finalizadoraCaixa)
                            left join motivo tab12 on(tab12.idMotivo = tab.motivo)
                            left join conta tab14 on(tab.contaBaixa = tab14.idConta)
                                                    where
                                                    (tab.idCheque=find_cheque);

  when 3 then
select
        round(sum(if((tab.flagPagamento='s' || tab.flagPagamento='a') && tab.pagamento is not null && tab.pagamento <> '',tab.valorPago,0)),2),
        round(sum(if((tab.flagPagamento='n' && tab.valorPago = 0),tab.valueCheque,0)),2)
            from
                cheque tab
                        inner join loja tab1 on(tab.idLoja = tab1.idLoja)
                        inner join cliente tab2 on(tab.idCliente = tab2.idCliente)
                        inner join banco tab3 on(tab.banco = tab3.idBanco)
                        left join fisica tab4 on(tab2.idCliente = tab4.idCliente)
                        left join juridica tab5 on(tab2.idCliente = tab5.idCliente)
                        left join rural tab6 on(tab2.idCliente = tab6.idCliente)
                                                    where
                                                    (pessoa=0 or tab2.idCliente = pessoa) and
                                                    (bank=0 or tab3.idBanco=bank) and
                                                    (store=0 or tab1.idLoja=store) and
                                                    (find_cheque='0' or tab.`numberCheque`=find_cheque) and
                                                                                               if(escolha=1, tab.emissao between di and df, 0=0) and
                                                                                               if(escolha=3, tab.pagamento between di and df, 0=0) and
                                                                                               if(escolha=2, tab.vencimento between di and df, 0=0) and
                                                    (doc="0" or tab.cupom=doc) and
                                                    (pdv="0" or tab.terminal=pdv) and
                                                    (conta="0" or tab.`contaCorrente`=conta) and
                                                    (recebivel="o" or flagPagamento=recebivel) and
                                                                                               if(typeCheque="v", tab.emissao=tab.vencimento, 0=0) and
                                                                                               if(typeCheque="p", tab.vencimento > tab.emissao, 0=0);

    end case;
end $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `conector_find_recebivelConvenio`
--

DROP PROCEDURE IF EXISTS `conector_find_recebivelConvenio`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='' */ $$
CREATE DEFINER=`master`@`localhost` PROCEDURE `conector_find_recebivelConvenio`(
                                                                                in tipo integer,
                                                                                in pessoa double,
                                                                                in store double,
                                                                                in find_empresa integer,
                                                                                in fatura integer,
                                                                                in di varchar(15),
                                                                                in df varchar(15),
                                                                                in escolha int,
                                                                                in pagamento char(1)
                                                )
begin

case tipo
    when 1 then
select
      tab.idLoja,
      case tab3.idtipoPessoa
                        when 1 then
                            tab4.nome
                        when 2 then
                            tab5.razao
                        when 3 then
                            tab6.nome end Nome,
      date_format(tab.emissao, '%d/%m/%Y'),
      date_format(tab.vencimento, '%d/%m/%Y'),
      tab.Observacao,
      tab.conferencia,
      round(tab.valor,2),
      round(tab.Juros,2),
      round((tab.valor + tab.juros),2) as total,
      tab2.razao as Empresa,
      date_format(tab.pagamento, '%d/%m/%Y'),
      round(tab.valorPago,2),
      tab.terminal,
      tab.cupom,
      tab.Pedido,
      tab.idMovimento,
      tab.`idcliente`
        from convenioMovimento tab
                    inner join loja tab1 on(tab.idLoja = tab1.idLoja)
                    inner join convenio tab2 on(tab.empresa = tab2.idConvenio)
                    inner join cliente tab3 on(tab.idCliente = tab3.idCliente)
                    left join fisica tab4 on(tab3.idCliente = tab4.idCliente)
                    left join juridica tab5 on(tab3.idCliente = tab5.idCliente)
                    left join rural tab6 on(tab3.idCliente = tab6.idCliente)
                                                                        where
                                                                                (fatura=0 or tab.idMovimento=fatura) and
                                                                                (0=store or tab.idLoja = store) and
                                                                                (find_empresa=0 or tab.empresa = find_empresa) and
                                                                                (0=pessoa or tab.idCliente = pessoa) and
                                                                                               if(escolha=1, tab.emissao between di and df, 0=0) and
                                                                                               if(escolha=2, tab.vencimento between di and df, 0=0) and
                                                                                               if(escolha=3, tab.pagamento between date_format(di, '%Y%m%d') and date_format(df, '%Y%m%d'), 0=0) and
                                                                                (pagamento="f" or tab.flagPagamento = pagamento);
        when 2 then
        select
        tab.`idMovimento`,
        case tab3.idtipoPessoa
                        when 1 then
                            tab4.nome
                        when 2 then
                            tab5.razao
                        when 3 then
                            tab6.nome end Nome,
          tab.`idcliente`,
          tab.`idloja`,
          tab.`empresa`,
          tab2.razao as Empresa,
          tab.`emissao`,
          tab.`vencimento`,
          round(tab.`valor`,2),
          tab.`parcela`,
          tab.`prazo`,
          tab.`cupom`,
          tab.`idfuncionario`,
          tab.`terminal`,
          round(tab.`desconto`,2),
          round(tab.`juros`,2),
          round((tab.valor + tab.juros),2) as total,
          tab.`observacao`,
          tab.`pagamento`,
          tab.`qttyParcelas`,
          tab.`flagAlteracao`,
          tab.`pedido`,
          tab.`conferencia`,
          round(tab.`valorPago`,2),
          tab1.Razao,
          tab.idFuncionario,
          tab7.apelido
            from
                `conveniomovimento` tab
                    inner join loja tab1 on(tab.idLoja = tab1.idLoja)
                    inner join convenio tab2 on(tab.empresa = tab2.idConvenio)
                    inner join cliente tab3 on(tab.idCliente = tab3.idCliente)
                    left join fisica tab4 on(tab3.idCliente = tab4.idCliente)
                    left join juridica tab5 on(tab3.idCliente = tab5.idCliente)
                    left join rural tab6 on(tab3.idCliente = tab6.idCliente)
                    left join funcionario tab7 on(tab7.idFuncionario = tab.idFuncionario)
                                                                        where
                                                                            tab.idMovimento=fatura;

      when 3 then

select
      round(sum(if(flagPagamento='s',0,tab.valor)),2),
      round(sum(tab.Juros),2),
      round(sum(tab.valorPago),2)
          from convenioMovimento tab
                    inner join loja tab1 on(tab.idLoja = tab1.idLoja)
                    inner join convenio tab2 on(tab.empresa = tab2.idConvenio)
                    inner join cliente tab3 on(tab.idCliente = tab3.idCliente)
                    left join fisica tab4 on(tab3.idCliente = tab4.idCliente)
                    left join juridica tab5 on(tab3.idCliente = tab5.idCliente)
                    left join rural tab6 on(tab3.idCliente = tab6.idCliente)
                                                                        where
                                                                                (fatura=0 or tab.idMovimento=fatura) and
                                                                                (0=store or tab.idLoja = store) and
                                                                                (find_empresa=0 or tab.empresa = find_empresa) and
                                                                                (0=pessoa or tab.idCliente = pessoa) and
                                                                                               if(escolha=1, tab.emissao between di and df, 0=0) and
                                                                                               if(escolha=2, tab.vencimento between di and df, 0=0) and
                                                                                               if(escolha=3, tab.pagamento between date_format(di, '%Y%m%d') and date_format(df, '%Y%m%d'), 0=0) and
                                                                                (pagamento="f" or tab.flagPagamento = pagamento);

    end case;
end $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `conector_find_reserva`
--

DROP PROCEDURE IF EXISTS `conector_find_reserva`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='' */ $$
CREATE DEFINER=`master`@`localhost` PROCEDURE `conector_find_reserva`(
                                          in tipo integer,
                                          in find varchar(45),
                                          in findIdLoja integer
                                        )
begin


case tipo
            WHEN 0 THEN
            select truncate(sum(tab4.precoPromocao),2)
               from
                          produto tab
               inner join unidadeMedida tab1 on(tab.idunidade = tab1.idunidadeMedida)
               inner join produtoEmbalagem tab2 on(tab.idproduto = tab2.idproduto)
               inner join produtoStore tab3 on(tab.idproduto = tab3.idproduto)
               inner join produtoPrice tab4 on(tab.idproduto = tab4.idproduto)
               inner join produtoEstoques tab5 on(tab.idproduto = tab5.idproduto)
               left join  pedidoitens item on(tab.idProduto = item.idProduto)
             left join  (select tab.idProduto, truncate(sum(tab.quantidade),3) as total, tab1.final  from pedidoItens tab
                                                inner join pedido tab1 on(tab.idPedido = tab1.idPedido and tab.idLoja  = tab1.idloja)
                                                        where  tab.idLoja=findIdLoja and tab1.final in(0,1,3,7) and tab1.expiracao>=DATE_format(now(),'%Y-%m-%d'))
                         reserva on(tab.idProduto = reserva.idProduto)

   where
       tab2.defaultVenda = "s" and
       tab4.idloja = tab5.idloja and
       tab4.idloja = tab3.idloja and
       tab4.idloja = findIdLoja and
       item.idPedido = find;
            when 1 then
                select
                    item.idProduto,
                    if(item.situacao = "5",concat(tab.nome, "[ CANCELADO ]"),
                    if(tab4.precoPromocao = 0, tab.nome,concat(tab.nome, " [ Promocao ]"))),
                    tab1.unidade,
                    item.quantidade,
                    truncate(item.price,2) as valor,
                    truncate((item.priceLiquido),2) as Total,
                    item.idFuncionario,
                    truncate(tab5.quantidade,3) as estoque,
                    truncate(reserva.total,2) as reservas,
                    truncate((tab5.quantidade - reserva.total),2) Disponivel,
                    item.sequencial,
                    tab3.idloja,
                    tab1.idunidadeMedida,
                    tab2.idProdutoEmbalagem,
                    tab2.barra,
                    truncate(item.valorDiscount,2) as Desconto,
                    ifnull(truncate(((item.valorDiscount/(item.price*item.quantidade))*100),2),0) as Porcetagem,
                    ifnull(truncate(item.price*item.quantidade,2),0) as Bruto,
                    case item.situacao when 1 then "INCLUIDO" WHEN 2 THEN "TRAVADO" WHEN 3 THEN "RESERVA" WHEN 4 THEN "FUTURA"
                    WHEN 5 THEN "VENDIDO" WHEN 6 THEN "CANCELADA" WHEN 7 THEN "EXPIRADA" WHEN 8 THEN "RECEITA" END, item.situacao

             from
                        produto tab
             inner join unidadeMedida tab1 on(tab.idunidade = tab1.idunidadeMedida)
             inner join produtoEmbalagem tab2 on(tab.idproduto = tab2.idproduto)
             inner join produtoStore tab3 on(tab.idproduto = tab3.idproduto)
             inner join produtoPrice tab4 on(tab.idproduto = tab4.idproduto)
             inner join produtoEstoques tab5 on(tab.idproduto = tab5.idproduto)
             left join  pedidoitens item on(tab.idProduto = item.idProduto)
             left join  (select tab.idProduto, truncate(sum(tab.quantidade),3) as total, tab1.final  from pedidoItens tab
                                                inner join pedido tab1 on(tab.idPedido = tab1.idPedido and tab.idLoja  = tab1.idloja)
                                                        where  tab.idLoja=findIdLoja and tab1.final in(0,1,3,7) and tab1.expiracao>=DATE_format(now(),'%Y-%m-%d'))
                         reserva on(tab.idProduto = reserva.idProduto)
   where
       tab2.defaultVenda = "s" and
       tab4.idloja = tab5.idloja and
       tab4.idloja = tab3.idloja and
       tab4.idloja = findIdLoja and
       item.idPedido = find
       group by 1,2,6,11
       order by 11;

            when 2 then
                select
                    item.idProduto,
                    tab.nome,
                    tab1.unidade,
                    truncate(sum(item.quantidade),3),
                    truncate(item.price,2) as valor,
                    truncate(sum(item.quantidade*item.price),2) as Total,
                    item.idFuncionario,
                    truncate(tab5.quantidade,2) as estoque,
                    @reservas as reservas,
                    truncate((tab5.quantidade - @reservas),3) Disponivel,
                    item.sequencial,
                    tab3.idloja
             from
                        produto tab
             inner join unidadeMedida tab1 on(tab.idunidade = tab1.idunidadeMedida)
             inner join produtoEmbalagem tab2 on(tab.idproduto = tab2.idproduto)
             inner join produtoStore tab3 on(tab.idproduto = tab3.idproduto)
             inner join produtoPrice tab4 on(tab.idproduto = tab4.idproduto)
             inner join produtoEstoques tab5 on(tab.idproduto = tab5.idproduto)
             left join  pedidoitens item on(tab.idProduto = item.idProduto)

 where
       tab2.defaultVenda = "s" and
       tab4.idloja = tab5.idloja and
       tab4.idloja = tab3.idloja and
       tab4.idloja = findIdLoja and
       item.idPedido = find
      group by 1,2
      order by item.sequencial;

        when 3 then

            select
        "Altera",
        nr_parcela,
        prazo,
        date_format(vencimento, '%d/%m/%Y'),
        truncate(valorFinanceiro,2)
                    from parcela
                            where idCrediario=find order by nr_parcela;
        when 4 then
                                select
                            idPedido,
                            idLoja,
                            usuario,
                            pdv,
                            final,
                            status,
                            sinal
                            from pedido
                                where idPedido=find;
      when 5 then
                select
                    item.idProduto,
                    tab.nome,
                    tab1.unidade,
                    if(reserva.final=4,1,0),
                    truncate(tab5.quantidade,3) as estoque,
                    item.quantidade,
                    truncate(item.price,2) as valor,
                    ifnull(truncate(item.priceLiquido*item.quantidade,2),0) as TotalLiquido,
                    ifnull(truncate(tab4.priceVenda*item.quantidade,2),0) as TotalVenda, item.idPedido
             from
                        produto tab
             inner join unidadeMedida tab1 on(tab.idunidade = tab1.idunidadeMedida)
             inner join produtoEmbalagem tab2 on(tab.idproduto = tab2.idproduto)
             inner join produtoStore tab3 on(tab.idproduto = tab3.idproduto)
             inner join produtoPrice tab4 on(tab.idproduto = tab4.idproduto)
             inner join produtoEstoques tab5 on(tab.idproduto = tab5.idproduto)
             left join  pedidoitens item on(tab.idProduto = item.idProduto)
             left join  (select tab.idProduto, truncate(sum(tab.quantidade),3) as total, tab1.final  from pedidoItens tab
                                                inner join pedido tab1 on(tab.idPedido = tab1.idPedido and tab.idLoja  = tab1.idloja)
                                                        where  tab.idLoja=findIdLoja and tab1.final in(0,1,3,7) and tab1.expiracao>=DATE_format(now(),'%Y-%m-%d'))
                         reserva on(tab.idProduto = reserva.idProduto)

   where

       tab2.defaultVenda = "s" and
       tab4.idloja = tab5.idloja and
       tab4.idloja = tab3.idloja and
       tab4.idloja = findIdLoja and
       tab5.idloja = findIdLoja and
       tab3.idloja = findIdLoja and
       item.idPedido = find
       group by 1,2,3,4
       order by 10;

    when 6 then

                select
                    item.idProduto,
                    if(tab4.precoPromocao = 0, tab.nome,concat(tab.nome, " [ Promocao ]")),
                    tab1.unidade,
                    if(reserva.final=4, 1, 0),
                    truncate(tab5.quantidade,3) as estoque,
                    truncate(reserva.total,2) as reservas,
                    truncate((tab5.quantidade - reserva.total),2) Disponivel,
                    item.quantidade,
                    truncate(item.price,2) as valor,
                    ifnull(truncate(item.priceLiquido*item.quantidade,2),0) as Total_liquido,
                    ifnull(truncate(item.price*item.quantidade,2),0) as Total_Venda,
                    item.sequencial,
                    tab1.idunidadeMedida,
                    tab2.idProdutoEmbalagem,
                    tab2.barra

             from
                        produto tab
             inner join unidadeMedida tab1 on(tab.idunidade = tab1.idunidadeMedida)
             inner join produtoEmbalagem tab2 on(tab.idproduto = tab2.idproduto)
             inner join produtoStore tab3 on(tab.idproduto = tab3.idproduto)
             inner join produtoPrice tab4 on(tab.idproduto = tab4.idproduto)
             inner join produtoEstoques tab5 on(tab.idproduto = tab5.idproduto)
             left join  pedidoitens item on(tab.idProduto = item.idProduto)
             left join  (select tab.idProduto, truncate(sum(tab.quantidade),3) as total, tab1.final  from pedidoItens tab
                                                inner join pedido tab1 on(tab.idPedido = tab1.idPedido and tab.idLoja  = tab1.idloja)
                                                        where  tab.idLoja=findIdLoja and tab1.final in(0,1,3,7) and tab1.expiracao>=DATE_format(now(),'%Y-%m-%d'))
                         reserva on(tab.idProduto = reserva.idProduto)

   where
       tab2.defaultVenda = "s" and
       tab4.idloja = tab5.idloja and
       tab4.idloja = tab3.idloja and
       tab4.idloja = findIdLoja and
       item.idPedido = find
       group by 1,2,3,4
       order by 12;


            when 7 then
                select
                    item.sequencial,
                    item.idProduto,
                    tab.nome,
                    tab1.unidade,
                    item.quantidade,
                    truncate(item.price,2) as valor,
                    truncate((item.priceLiquido),2) as Total
             from
                        produto tab
             inner join unidadeMedida tab1 on(tab.idunidade = tab1.idunidadeMedida)
             inner join produtoEmbalagem tab2 on(tab.idproduto = tab2.idproduto)
             inner join produtoStore tab3 on(tab.idproduto = tab3.idproduto)
             inner join produtoPrice tab4 on(tab.idproduto = tab4.idproduto)
             inner join produtoEstoques tab5 on(tab.idproduto = tab5.idproduto)
             left join  pedidoitens item on(tab.idProduto = item.idProduto)
             left join  (select tab.idProduto, truncate(sum(tab.quantidade),3) as total, tab1.final  from pedidoItens tab
                                                inner join pedido tab1 on(tab.idPedido = tab1.idPedido and tab.idLoja  = tab1.idloja)
                                                        where  tab.idLoja=findIdLoja and tab1.final in(0,1,3,7) and tab1.expiracao>=DATE_format(now(),'%Y-%m-%d'))
                         reserva on(tab.idProduto = reserva.idProduto)
   where
       tab2.defaultVenda = "s" and
       tab4.idloja = tab5.idloja and
       tab4.idloja = tab3.idloja and
       tab4.idloja = findIdLoja and
       item.idPedido = find
       group by 1,2
       order by 1;


end case;
end $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `conector_find_setor`
--

DROP PROCEDURE IF EXISTS `conector_find_setor`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='' */ $$
CREATE DEFINER=`master`@`localhost` PROCEDURE `conector_find_setor`(
                                                    in tipo int(5),
                                                    in find varchar(45)
                                                  )
BEGIN
     case tipo
            when 1 then
                select idsetor as codigo,descricao,margem,status,comissao,premiacao from setor where (descricao like concat(find,"%"));
            when 2 then
                select idsetor as codigo,descricao,margem,status,comissao,premiacao from setor where (find=0 or idsetor=find);
            else
            select idsetor as codigo,descricao,margem,status,comissao,premiacao from setor;
     end case;
END $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `conector_find_sexy`
--

DROP PROCEDURE IF EXISTS `conector_find_sexy`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='STRICT_TRANS_TABLES,STRICT_ALL_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,TRADITIONAL,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION' */ $$
CREATE DEFINER=`master`@`localhost` PROCEDURE `conector_find_sexy`(in tipo int(5), in find varchar(45))
BEGIN
       case tipo
            when 1 then
              SELECT
                    idsexo,descricao
              FROM
                   sexo
              where
                    1=1;
            when 2 then
              SELECT
                    idsexo,descricao
              FROM
                  sexo
              where
                    descricao=find;
     end case;
END $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `conector_find_simulacaoFinanciamento`
--

DROP PROCEDURE IF EXISTS `conector_find_simulacaoFinanciamento`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='' */ $$
CREATE DEFINER=`master`@`localhost` PROCEDURE `conector_find_simulacaoFinanciamento`(
                                                       in find_pedido integer,
                                                       in find_loja integer,
                                                       in tipo integer
                                                     )
begin
case tipo

    when 1 then         SELECT
       tab4.idParcela,
       date_format(tab4.vencimento,'%d/%m/%Y') AS Vencimento,
       tab1.Descricao,
       truncate(tab4.valor,2)
    FROM pedidofinanceiro tab
         inner join finalizadora tab1 on(tab.idFinalizadora = tab1.idFinalizadora)
         inner join pedidoCrediario tab3 on(tab.idPedido = tab3.idPedido and tab.idLoja = tab3.idLoja)
         inner join pedidoParcelaCrediario tab4 on(tab.idPedido = tab4.idPedido and tab.idLoja = tab4.idLoja)
    where tab.idPedido=find_pedido and tab.idLoja=find_loja and tab.idFinalizadora=3

                            union
    SELECT
       tab4.sequencial,
       date_format(tab4.deposito,'%d/%m/%Y') AS deposito,
       tab1.Descricao,
       truncate(tab4.valor,2)
    FROM pedidofinanceiro tab
         inner join finalizadora tab1 on(tab.idFinalizadora = tab1.idFinalizadora)
         inner join pedidoCheque tab3 on(tab.idPedido = tab3.idPedido and tab.idLoja = tab3.idLoja)
         inner join pedidoParcelaCheque tab4 on(tab.idPedido = tab4.idPedido and tab.idLoja = tab4.idLoja)
    where tab.idPedido=find_pedido and tab.idLoja=find_loja and tab.idFinalizadora=1;

    when 2 then         SELECT
       tab4.idParcela,
       date_format(tab4.vencimento,'%d/%m/%Y') AS Vencimento,
       tab1.Descricao,
       truncate(tab4.valor,2)
    FROM pedidofinanceiro tab
         inner join finalizadora tab1 on(tab.idFinalizadora = tab1.idFinalizadora)
         inner join pedidoCrediario tab3 on(tab.idPedido = tab3.idPedido and tab.idLoja = tab3.idLoja)
         inner join pedidoParcelaCrediario tab4 on(tab.idPedido = tab4.idPedido and tab.idLoja = tab4.idLoja)
    where tab.idPedido=find_pedido and tab.idLoja=find_loja and tab.idFinalizadora=3

                            union
    SELECT
       tab4.sequencial,
       date_format(tab4.deposito,'%d/%m/%Y') AS deposito,
       tab1.Descricao,
       truncate(tab4.valor,2)
    FROM pedidofinanceiro tab
         inner join finalizadora tab1 on(tab.idFinalizadora = tab1.idFinalizadora)
         inner join pedidoCheque tab3 on(tab.idPedido = tab3.idPedido and tab.idLoja = tab3.idLoja)
         inner join pedidoParcelaCheque tab4 on(tab.idPedido = tab4.idPedido and tab.idLoja = tab4.idLoja)
    where tab.idPedido=find_pedido and tab.idLoja=find_loja and tab.idFinalizadora=2;

    when 3 then
    SELECT
       tab4.idParcela,
       date_format(tab4.vencimento,'%d/%m/%Y') AS Vencimento,
       tab1.Descricao,
       truncate(tab4.valor,2)
    FROM pedidofinanceiro tab
         inner join finalizadora tab1 on(tab.idFinalizadora = tab1.idFinalizadora)
         inner join pedidoCrediario tab3 on(tab.idPedido = tab3.idPedido and tab.idLoja = tab3.idLoja)
         inner join pedidoParcelaCrediario tab4 on(tab.idPedido = tab4.idPedido and tab.idLoja = tab4.idLoja)
    where tab.idPedido=find_pedido and tab.idLoja=find_loja;

     when 4 then
        SELECT
       tab4.idParcela,
       date_format(tab4.vencimento,'%d/%m/%Y') AS Vencimento,
       tab1.Descricao,
       truncate(tab4.valor,2)
    FROM pedidofinanceiro tab
         inner join finalizadora tab1 on(tab.idFinalizadora = tab1.idFinalizadora)
         inner join pedidoCrediario tab3 on(tab.idPedido = tab3.idPedido and tab.idLoja = tab3.idLoja)
         inner join pedidoParcelaCrediario tab4 on(tab.idPedido = tab4.idPedido and tab.idLoja = tab4.idLoja)
    where tab.idPedido=find_pedido and tab.idLoja=find_loja and tab.idFinalizadora=3

                            union
SELECT
       tab4.idParcela,
       date_format(tab4.vencimento,'%d/%m/%Y') AS Vencimento,
       tab1.Descricao,
       truncate(tab4.valor,2)
    FROM pedidofinanceiro tab
         inner join finalizadora tab1 on(tab.idFinalizadora = tab1.idFinalizadora)
         inner join pedidoConvenio tab3 on(tab.idPedido = tab3.idPedido and tab.idLoja = tab3.idLoja)
         inner join pedidoParcelaConvenio tab4 on(tab.idPedido = tab4.idPedido and tab.idLoja = tab4.idLoja)
    where tab.idPedido=find_pedido and tab.idLoja=find_loja and tab.idFinalizadora=4;

    when 5 then
        SELECT
       tab4.idParcela,
       date_format(tab4.vencimento,'%d/%m/%Y') AS Vencimento,
       tab1.Descricao,
       truncate(tab4.valor,2)
    FROM pedidofinanceiro tab
         inner join finalizadora tab1 on(tab.idFinalizadora = tab1.idFinalizadora)
         inner join pedidoCrediario tab3 on(tab.idPedido = tab3.idPedido and tab.idLoja = tab3.idLoja)
         inner join pedidoParcelaCrediario tab4 on(tab.idPedido = tab4.idPedido and tab.idLoja = tab4.idLoja)
    where tab.idPedido=find_pedido and tab.idLoja=find_loja and tab.idFinalizadora=3

                            union
SELECT
       tab4.idParcela,
       date_format(tab4.vencimento,'%d/%m/%Y') AS Vencimento,
       tab5.Descricao,
       truncate(tab4.valor,2)
    FROM pedidofinanceiro tab
         inner join finalizadora tab1 on(tab.idFinalizadora = tab1.idFinalizadora)
         inner join pedidoCartao tab3 on(tab.idPedido = tab3.idPedido and tab.idLoja = tab3.idLoja)
         inner join pedidoParcelaCartao tab4 on(tab.idPedido = tab4.idPedido and tab.idLoja = tab4.idLoja)
         inner join typeCartao tab5 on(tab5.idTypeCartao = tab4.TypeCartao)
    where tab.idPedido=find_pedido and tab.idLoja=find_loja and tab.idFinalizadora=5;

    when 6 then
        SELECT
       tab4.idParcela,
       date_format(tab4.vencimento,'%d/%m/%Y') AS Vencimento,
       tab1.Descricao,
       truncate(tab4.valor,2)
    FROM pedidofinanceiro tab
         inner join finalizadora tab1 on(tab.idFinalizadora = tab1.idFinalizadora)
         inner join pedidoCrediario tab3 on(tab.idPedido = tab3.idPedido and tab.idLoja = tab3.idLoja)
         inner join pedidoParcelaCrediario tab4 on(tab.idPedido = tab4.idPedido and tab.idLoja = tab4.idLoja)
    where tab.idPedido=find_pedido and tab.idLoja=find_loja and tab.idFinalizadora=3

                            union
SELECT
       tab4.idParcela,
       date_format(tab4.vencimento,'%d/%m/%Y') AS Vencimento,
       tab5.Descricao,
       truncate(tab4.valor,2)
    FROM pedidofinanceiro tab
         inner join finalizadora tab1 on(tab.idFinalizadora = tab1.idFinalizadora)
         inner join pedidoCartao tab3 on(tab.idPedido = tab3.idPedido and tab.idLoja = tab3.idLoja)
         inner join pedidoParcelaCartao tab4 on(tab.idPedido = tab4.idPedido and tab.idLoja = tab4.idLoja)
         inner join typeCartao tab5 on(tab5.idTypeCartao = tab4.TypeCartao)
    where tab.idPedido=find_pedido and tab.idLoja=find_loja and tab.idFinalizadora=6;

    when 7 then

SELECT
       tab4.idParcela,
       date_format(tab4.vencimento,'%d/%m/%Y') AS Vencimento,
       tab1.Descricao,
       truncate(tab4.valor,2)
    FROM pedidofinanceiro tab
         inner join finalizadora tab1 on(tab.idFinalizadora = tab1.idFinalizadora)
         inner join pedidoBoleto tab3 on(tab.idPedido = tab3.idPedido and tab.idLoja = tab3.cedente)
         inner join pedidoParcelaBoleto tab4 on(tab.idPedido = tab4.idPedido and tab.idLoja = tab4.cedente)
    where tab.idPedido=find_pedido and tab.idLoja=find_loja and tab.idFinalizadora=7;

  else

      select 0, date_format(now(),'%d/%m/%Y') AS Vencimento, "Desconhecido",0;
end case;
end $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `conector_find_situacaoFiscal`
--

DROP PROCEDURE IF EXISTS `conector_find_situacaoFiscal`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='' */ $$
CREATE DEFINER=`master`@`localhost` PROCEDURE `conector_find_situacaoFiscal`(in tipo int, in find varchar(45))
begin
case tipo
when 1 then
select 
    idSituacaoFiscal as Codigo,
                      descricao 
                                from 
                                    situacaoFiscal;
when 2 then
select 
    idSituacaoFiscal as Codigo,
                      descricao 
                                from 
                                    situacaoFiscal
                                            where 
                                                    idSituacaoFiscal=find;
when 3 then
select 
    idSituacaoFiscal as Codigo,
                      descricao 
                                from 
                                    situacaoFiscal
                                            where 
                                                    descricao="Documento regular";
                                                    end case;
                                                    end $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `conector_find_spedGeneroItem`
--

DROP PROCEDURE IF EXISTS `conector_find_spedGeneroItem`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='' */ $$
CREATE DEFINER=`master`@`localhost` PROCEDURE `conector_find_spedGeneroItem`(in tipo integer, in find varchar(30))
begin
case tipo
    when 1 then
          select idGenero, codigo, descricao, concat(codigo,' | ',descricao)
                            from spedGeneroItem;
    when 2 then
          select idGenero, codigo, descricao, concat(codigo,' | ',descricao)
                            from spedGeneroItem
                                             where codigo=find;
    when 3 then
          select idGenero, codigo, descricao, concat(codigo,' | ',descricao)
                            from spedGeneroItem
                                             where descricao=find;
    when 4 then
          select idGenero, codigo, descricao, concat(codigo,' | ',descricao)
                            from spedGeneroItem
                                             where descricao like concat('%',find,'%');
end case;
end $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `conector_find_spedNcm`
--

DROP PROCEDURE IF EXISTS `conector_find_spedNcm`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='' */ $$
CREATE DEFINER=`master`@`localhost` PROCEDURE `conector_find_spedNcm`(in tipo int, in find varchar(100))
begin
case tipo
    when 1 then

        select idspedNcm as "Codigo",descricao as "Descricao",mvaMain as "MVA",aliquotaInterestadual AS "Aliquota Interestadual",aliquotaInterna as "Aliquota Interna",mvaAjustada as "MVA Ajustada"
                                                                                            from spedNcm ;

    when 2 then

        select idspedNcm as "Codigo",descricao as "Descricao",mvaMain as "MVA",aliquotaInterestadual AS "Aliquota Interestadual",aliquotaInterna as "Aliquota Interna",mvaAjustada as "MVA Ajustada"
                                                                                            from spedNcm where idspedNcm=find;

    when 3 then

        select idspedNcm as "Codigo",descricao as "Descricao",mvaMain as "MVA",aliquotaInterestadual AS "Aliquota Interestadual",aliquotaInterna as "Aliquota Interna",mvaAjustada as "MVA Ajustada"
                                                                                           from spedNcm where descricao like concat('%',find,'%');

end case;
end $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `conector_find_statusPdv`
--

DROP PROCEDURE IF EXISTS `conector_find_statusPdv`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='' */ $$
CREATE DEFINER=`master`@`localhost` PROCEDURE `conector_find_statusPdv`(find varchar(45), tipo smallint)
begin
case tipo
        when 1 then
SELECT
`statuspdv`.`idstatusPdv`,
`statuspdv`.`descricao`
FROM `conector`.`statuspdv`;
        when 2 then
SELECT
`statuspdv`.`idstatusPdv`,
`statuspdv`.`descricao`
FROM `conector`.`statuspdv` where idStatusPdv=find;
        when 3 then
SELECT
`statuspdv`.`idstatusPdv`,
`statuspdv`.`descricao`
FROM `conector`.`statuspdv` where descricao=find;
        end case;
end $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `conector_find_tableFiscal`
--

DROP PROCEDURE IF EXISTS `conector_find_tableFiscal`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='' */ $$
CREATE DEFINER=`master`@`localhost` PROCEDURE `conector_find_tableFiscal`(in tipo integer, in find varchar(100), in typedoc int)
begin
case tipo
  when 1 then SELECT
   tab.`codigo`,
   tab.`descricao`,
   tab.`status`,
   tab.`idFiscal` ,
   tab.idTable_codigo,
   tab1.descricao as DescricaoFiscal,
   tab.`modelo`,
   tab2.Modelo as DescricaoModelo,
   tab.`origemTipo`,
   tab.`movimentacao`,
   tab.`nfecstpis`,
   tab.`nfecstcofins`,
   tab.`impostoAjuste`,
   tab.`observacao`,
   tab.codigoAjuste

   FROM
       table_codigo tab
         inner join table_type_codigo tab1 on(tab.idFiscal = tab1.idTable_Type_codigo)
         left join modeloFiscal tab2 on(tab.`modelo` = tab2.codigo)
       where
         tab.descricao like concat('%', find ,'%');
  when 2 then SELECT
   tab.`codigo`,
   tab.`idFiscal` ,
   tab1.descricao as DescricaoFiscal,
   tab.`descricao`,
   tab.`modelo`,
   tab2.Modelo as DescricaoModelo,
   tab.`origemTipo`,
   tab.`movimentacao`,
   tab.`nfecstpis`,
   tab.`nfecstcofins`,
   tab.`impostoAjuste`,
   tab.`observacao`,
   tab.`status`,
   tab.idTable_codigo,
   tab.codigoAjuste
   FROM
       table_codigo tab
         inner join table_type_codigo tab1 on(tab.idFiscal = tab1.idTable_Type_codigo)
         left join modeloFiscal tab2 on(tab.`modelo` = tab2.codigo)
       where
         tab.descricao = find and tab.idFiscal=typedoc;
  when 3 then SELECT
   tab.`codigo`,
   tab.`descricao`,
   concat(ifnull(tab2.codigo,""), " | ", ifnull(tab2.modelo,""))  as DescricaoModelo,
   tab1.descricao as DescricaoFiscal,
   tab.`observacao`,
   tab.codigoAjuste,
   tab.`nfecstpis`,
   tab.`nfecstcofins`,
   tab.`idFiscal` ,
   tab.`modelo`,
   tab.`origemTipo`,
   tab.`movimentacao`,
   tab.`impostoAjuste`,
   tab.`status`,
   tab.idTable_codigo,
   tab2.modelo
   FROM
       table_codigo tab
         inner join table_type_codigo tab1 on(tab.idFiscal = tab1.idTable_Type_codigo)
         left join modeloFiscal tab2 on(tab.`modelo` = tab2.codigo)
       where
         tab.idFiscal=find order by 1;
  when 4 then SELECT
   tab.`codigo`,
   tab.`idFiscal` ,
   tab1.descricao as DescricaoFiscal,
   tab.`descricao`,
   tab.`modelo`,
   tab2.Modelo as DescricaoModelo,
   tab.`origemTipo`,
   tab.`movimentacao`,
   tab.`nfecstpis`,
   tab.`nfecstcofins`,
   tab.`impostoAjuste`,
   tab.`observacao`,
   tab.`status`,
   tab.idTable_codigo,
   tab.codigoAjuste
   FROM
       table_codigo tab
         inner join table_type_codigo tab1 on(tab.idFiscal = tab1.idTable_Type_codigo)
         left join modeloFiscal tab2 on(tab.`modelo` = tab2.codigo);
  when 5 then SELECT
   tab.`codigo`,
   tab.`idFiscal` ,
   tab1.descricao as DescricaoFiscal,
   tab.`descricao`,
   tab.`modelo`,
   concat(ifnull(tab2.codigo,""), " | ", ifnull(tab2.modelo,""))  as DescricaoModelo,
   tab.`origemTipo`,
   tab.`movimentacao`,
   tab.`nfecstpis`,
   tab.`nfecstcofins`,
   tab.`impostoAjuste`,
   tab.`observacao`,
   tab.`status`,
   tab.idTable_codigo,
   tab.codigoAjuste
   FROM
       table_codigo tab
         inner join table_type_codigo tab1 on(tab.idFiscal = tab1.idTable_Type_codigo)
         left join modeloFiscal tab2 on(tab.`modelo` = tab2.codigo)
       where
           tab.idTable_codigo = find;
           when 6 then            SELECT
   tab.`codigo`,
   tab.`idFiscal` ,
   tab1.descricao as DescricaoFiscal,
   tab.`descricao`,
   tab.`modelo`,
   concat(ifnull(tab2.codigo,""), " | ", ifnull(tab2.modelo,""))  as DescricaoModelo,
   tab.`origemTipo`,
   tab.`movimentacao`,
   tab.`nfecstpis`,
   tab.`nfecstcofins`,
   tab.`impostoAjuste`,
   tab.`observacao`,
   tab.`status`,
   tab.idTable_codigo,
   tab.codigoAjuste
   FROM
       table_codigo tab
         inner join table_type_codigo tab1 on(tab.idFiscal = tab1.idTable_Type_codigo)
         left join modeloFiscal tab2 on(tab.`modelo` = tab2.codigo)
       where tab.codigo=find and tab.idFiscal=typedoc;
  when 7 then select codigo,modelo from modeloFiscal where codigo=find;
end case;
end $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `conector_find_terminal`
--

DROP PROCEDURE IF EXISTS `conector_find_terminal`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='' */ $$
CREATE DEFINER=`master`@`localhost` PROCEDURE `conector_find_terminal`(
                                            in tipo integer,
                                            in find varchar(30),
                                            in find_loja integer,
                                            in find_type integer
                                       )
begin
case tipo
    when 1 then
select
    tab.idterminal,
    tab.descricao,
    tab1.descricao as tipo,
    tab2.razao,
    tab.flagDesconto,
    tab.idloja,
    tab1.idtypeTerminal,
    tab.status,
    tab.operacao,
    tab.multiTarefa,
    ifnull(tab3.Descricao,""),
    ifnull(tab.operacao,0)
from
    terminal tab
    left join paramentro_faturamento tab3 on(tab.operacao = tab3.idParamentro)
    inner join typeTerminal tab1 on(tab.idtypeTerminal = tab1.idtypeterminal)
    inner join loja tab2 on(tab.idloja = tab2.idloja)
    where tab2.idloja=find_loja and idTerminal = find and (find_type=0 or tab1.idtypeTerminal=find_type);
        when 2 then
select
    tab.idterminal,
    tab.descricao,
    tab1.descricao as tipo,
    tab2.razao,
    tab.flagDesconto,
    tab.idloja,
    tab1.idtypeTerminal,
    tab.status
from
    terminal tab
    inner join typeTerminal tab1 on(tab.idtypeTerminal = tab1.idtypeterminal)
    inner join loja tab2 on(tab.idloja = tab2.idloja)
    where tab2.idloja=find_loja and tab.descricao like concat(find,"%") order by 1;
        when 3 then
select
    tab.idterminal,
    tab.descricao,
    tab1.descricao as tipo,
    tab2.razao,
    tab.flagDesconto,
    tab.idloja,
    tab1.idtypeTerminal,
    tab.status
from
    terminal tab
    inner join typeTerminal tab1 on(tab.idtypeTerminal = tab1.idtypeterminal)
    inner join loja tab2 on(tab.idloja = tab2.idloja)
    where tab2.idloja=find_loja  order by 1;

    when 4 then

select
    tab.idterminal,
    tab.descricao,
    tab1.descricao as tipo,
    tab2.razao,
    tab.flagDesconto,
    tab.idloja,
    tab1.idtypeTerminal,
    tab.status,tab3.ipCaixa
from
    terminal tab
    inner join typeTerminal tab1 on(tab.idtypeTerminal = tab1.idtypeterminal)
    inner join loja tab2 on(tab.idloja = tab2.idloja)
    left join terminalecfconfig tab3 on(tab.idterminal = tab3.terminal)
    where tab2.idloja=find_loja and tab1.idtypeTerminal = find_type  order by 1;

    when 5 then

select
    tab.idterminal,
    tab.descricao,
    tab.status,
    tab1.descricao as tipo,
    tab.flagDesconto,
    tab.idloja,
    tab2.razao,
    tab1.idtypeTerminal,
    tab.operacao,
    tab.multiTarefa

from
    terminal tab
    inner join typeTerminal tab1 on(tab.idtypeTerminal = tab1.idtypeterminal)
    inner join loja tab2 on(tab.idloja = tab2.idloja)
    where (find_loja=0 or tab2.idloja=find_loja) and tab.descricao like concat(find,"%") and (find_type=0 or tab1.idtypeTerminal = find_type)  order by 1;

    when 6 then

    select
    tab.idterminal,
    tab.descricao,
    tab.status,
    tab1.descricao as tipo,
    tab.flagDesconto,
    tab.idloja,
    tab2.razao,
    tab1.idtypeTerminal,
    tab.operacao,
    tab.multiTarefa

from
    terminal tab
    inner join typeTerminal tab1 on(tab.idtypeTerminal = tab1.idtypeterminal)
    inner join loja tab2 on(tab.idloja = tab2.idloja)
    where (find_loja=0 or tab2.idloja=find_loja) and tab.idTerminal=find and (find_type=0 or tab1.idtypeTerminal = find_type)  order by 1;

    when 7 then

    select
    tab.idterminal,
    tab.descricao,
    tab.status,
    tab1.descricao as tipo,
    tab.flagDesconto,
    tab.idloja,
    tab2.razao,
    tab1.idtypeTerminal,
    tab.operacao,
    tab.multiTarefa

from
    terminal tab
    inner join typeTerminal tab1 on(tab.idtypeTerminal = tab1.idtypeterminal)
    inner join loja tab2 on(tab.idloja = tab2.idloja)
    where (find_loja=0 or tab2.idloja = find_loja) and (find_type=0 or tab1.idtypeTerminal = find_type)  order by 1;
    
    when 8 then
    
    select operacao from terminal where idTerminal=find into @op;
    select idParamentro,destinoFixo,idMetodoPadrao,idFinalizadoraPadrao,flagNota,idFuncionario from conector.paramentro_faturamento where idParamentro=@op;
    
    end case;
    end $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `conector_find_terminalConfig`
--

DROP PROCEDURE IF EXISTS `conector_find_terminalConfig`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='' */ $$
CREATE DEFINER=`master`@`localhost` PROCEDURE `conector_find_terminalConfig`(find varchar(45))
begin
SELECT
    `terminalecfconfig`.`terminal`,
    `terminalecfconfig`.`caixa`,
    `terminalecfconfig`.`ipCaixa`,
    `terminalecfconfig`.`abeturaTroco`,
    `terminalecfconfig`.`imprimiCheque`,
    `terminalecfconfig`.`timeBlock`,
    `terminalecfconfig`.`blockTime`,
    `terminalecfconfig`.`trocaMercadoria`,
    `terminalecfconfig`.`carneRecebe`,
    `terminalecfconfig`.`codigoEmpresaTef`,
    `terminalecfconfig`.`trocoMax`,
    `terminalecfconfig`.`serie`,
    `terminalecfconfig`.`utilizaTeclado`,
    `terminalecfconfig`.`utilizaTef`,
    `terminalecfconfig`.`utilizaBalanca`,
    `terminalecfconfig`.`utilizaEcf`,
    `terminalecfconfig`.`portTef`,
    `terminalecfconfig`.`portBalanca`,
    `terminalecfconfig`.`portEcf`,
    `terminalecfconfig`.`funcaoProgramada`,
    `terminalecfconfig`.`msgTef`,
    `terminalecfconfig`.`idModeloEcf`,
    `terminalecfconfig`.`statusPdv`,
    `terminalecfconfig`.`autentica`,
    `terminalecfconfig`.`emiteVinculo`,
    `terminalecfconfig`.`vinculoCrediario`,
    `terminalecfconfig`.`vinculoConvenio`,
    `terminalecfconfig`.`vinculoCartaoCredito`,
    `terminalecfconfig`.`vinculoCartaoDebito`,
    `terminalecfconfig`.`typeTef`
FROM `conector`.`terminalecfconfig` where `terminalecfconfig`.`terminal`=find;

end $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `conector_find_tipoContasPagar`
--

DROP PROCEDURE IF EXISTS `conector_find_tipoContasPagar`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='' */ $$
CREATE DEFINER=`root`@`localhost` PROCEDURE `conector_find_tipoContasPagar`(tipo int, find varchar(40))
begin
case tipo
when 1 then
select idTipoContasPagar,
       descricao,
       participaSped from tipoContasPagar;
when 2 then
select idTipoContasPagar,
       descricao,
       participaSped from tipoContasPagar
                     where idTipoContasPagar=find;
when 3 then
select idTipoContasPagar,
       descricao,
       participaSped from tipoContasPagar
                     where descricao like concat('%',find,'%');
end case;
end $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `conector_find_tipoPromocao`
--

DROP PROCEDURE IF EXISTS `conector_find_tipoPromocao`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='' */ $$
CREATE DEFINER=`root`@`%` PROCEDURE `conector_find_tipoPromocao`(in tipo smallint, in find varchar(45))
begin
case tipo

    when 1 then
        select idTipoPromocao, descricao from tipoPromocao;
    when 2 then
        select idTipoPromocao, descricao from tipoPromocao where idTipoPromocao=find;
    when 3 then
         select idTipoPromocao, descricao from tipoPromocao where descricao like Concat(find,'%');
end case;
end $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `conector_find_totaisCompra`
--

DROP PROCEDURE IF EXISTS `conector_find_totaisCompra`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='' */ $$
CREATE DEFINER=`master`@`localhost` PROCEDURE `conector_find_totaisCompra`(
                                       in tipo integer,
                                       in find varchar(45)
                                     )
begin

  case tipo
  when 1 then
      select
        tab.itens,
        truncate(tab.desconto,2),
        truncate(tab.financeiro,2),
        truncate(tab.frete,2),
        tab.peso,
        truncate(tab.bonificacao,2),
        truncate(tab.valorTotalProdutos,2),
        truncate(tab.valorTotalLiquido,2),
        truncate(tab.valorTotal,2),
        tab.volume
  from
      pedidoCompra tab
  where
      tab.IdpedidoCompra = find;
  end case;
end $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `conector_find_totaisEntrada`
--

DROP PROCEDURE IF EXISTS `conector_find_totaisEntrada`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='' */ $$
CREATE DEFINER=`master`@`localhost` PROCEDURE `conector_find_totaisEntrada`(in tipo integer, in find varchar(45))
begin
case tipo
  when 1 then
select
      truncate(ifnull(sum(tab1.quantidade),0),3) Volume,
      truncate(ifnull(count(tab1.idProduto),0),3) NrItens,
      ifnull(truncate(sum(tab1.quantidade*tab.quantidade*tab1.custoLiquido),2),0) liquido,
      truncate(ifnull(sum(tab1.custoNotaTotal),0),2) Nota,
      truncate(ifnull(sum(tab1.custoTotal),0),2) Bruto
from
      entradaItem tab1
        inner join produtoEmbalagem tab on(tab1.idProduto = tab.barra)
        inner join entrada tab2 on(tab1.idEntrada = tab2.idEntrada)
        where tab1.identrada=find and tab1.flagRecebe=1 and if(tab2.idCompra = 0 || tab2.idCompra is not null, (tab.defaultVenda='s' || tab1.idProduto=tab.barra), tab.defaultCompra='s');
end case;
end $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `conector_find_totaisImpSaida`
--

DROP PROCEDURE IF EXISTS `conector_find_totaisImpSaida`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='' */ $$
CREATE DEFINER=`master`@`localhost` PROCEDURE `conector_find_totaisImpSaida`( in tipo smallint, in find varchar(45))
begin
case tipo 
    when 1 then
select
`nfImposto`,
`cfop`,
`cstIcms`,
truncate(`baseCalculo`,2),
truncate(`aliquota`,2),
truncate(`imposto`,2),
truncate(`reducao`,2),
truncate(`valorIpi`,2),
truncate(`baseCalculoIcmsSt`,2),
truncate(`icmsSt`,2),
truncate(`baseIcmsIsentos`,2),
`typeAliquota`
            from
                `conector`.`nfimposto`
                                     where
                                          idNf=find;
when 2 then
    select tab.nf,
    tab.`loja`,
    tab.`idcliente`,
    tab.`idparamentro`,
    tab.`idtransportadora`,
    tab.`cfop`,
    tab.`idFuncionario`,
    tab.`idusuario`,
    tab.`idpedido`,
    tab.`nr_nota`,
    tab.`serie` ,
    tab.`emissao`,
    tab.`uf`,
    tab.`itens`,
    truncate(tab.`frete`,2),
    tab.`typeFrete`,
    tab.`impresso`,
    tab.`nr_impressao`,
    tab.`typenf`,
    ifnull(tab.`nr_nota_entrada`,""),
    ifnull(tab.`serie_entrada`,""),
    ifnull(tab.`statusNf`,""),
    tab.`restituicao`,
    tab1.descricao,
    tab2.razao,
    case tab3.idTipoPessoa when 1 then tab5.nome when 2 then tab6.razao when 3 then tab4.nome end,
    tab.geraDanfe,
    tab.statusNf,
    ifnull(tab.condPgto,"0"),
    ifnull(tab7.pdv,"0"),
    ifnull(tab.condPgto,"0"),
    ifnull(tab7.pdv,"0"),
    ifnull(tab.chave_nfe,""),
    ifnull(tab.protocolo,""),
    ifnull(tab.dataHoraRecbNfe,""),
    ifnull(tab.motivo,"")
                from nf tab
                            inner join paramentro_faturamento tab1 on(tab.idParamentro = tab1.idParamentro)
                            inner join loja tab2 on(tab.loja = tab2.idLoja)
                            inner join cliente tab3 on(tab.idCliente = tab3.idCliente)
                            left join rural tab4 on(tab3.idCliente = tab4.idCliente)
                            left join fisica tab5 on(tab3.idCliente = tab5.idCliente)
                            left join juridica tab6 on(tab3.idCliente = tab6.idCliente)
                            left join pedido tab7 on(tab.idPedido = tab7.idPedido)
                        where tab.nf=find;
    end case;
    end $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `conector_find_totalPedido`
--

DROP PROCEDURE IF EXISTS `conector_find_totalPedido`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='' */ $$
CREATE DEFINER=`master`@`localhost` PROCEDURE `conector_find_totalPedido`(
                                          in find varchar(45),
                                          in findIdLoja integer
                                        )
begin
    declare qtty numeric(15,3);
    declare volume numeric(15,3);
    declare liquido numeric(15,2);
    declare bruto numeric(15,2);
    declare discount1 numeric(15,2);
    declare nota numeric(15,2);

    SELECT
        truncate(qttyItens,2),
        truncate(valorLiquido,2),
        truncate(valorTotal,2),
        truncate(discount,2) FROM pedido where pedido.idloja = findIdLoja and pedido.idPedido = find
                 into
           qtty,liquido,bruto,discount1;
    select count(idProduto) from pedidoItens where idPedido=find into volume;

    select qtty,liquido,bruto,discount1,volume;
end $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `conector_find_transportadora`
--

DROP PROCEDURE IF EXISTS `conector_find_transportadora`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='' */ $$
CREATE DEFINER=`master`@`localhost` PROCEDURE `conector_find_transportadora`(
                                                in tipo integer,
                                                in find varchar(45)
                                             )
begin
case tipo
when 1 then
select
     idTransportadora,
	   `razao`,
	   `cnpj`,
	   `ie`,
	   `cep`,
     `municipio`,
	   `abreviatura`,
	   `idspedMunicipio`,
	   `status`,
     `bairro`,
     `logradouro`,
     `complemento`,
     `numero`,
     `idestado`,
     `uf`
from
    transportadora
 where idTransportadora = find;
when 2 then
select
     idTransportadora,
	   `razao`,
	   `cnpj`,
	   `ie`,
	   `cep`,
     `municipio`,
	   `abreviatura`,
	   `idspedMunicipio`,
	   `status`,
     `bairro`,
     `logradouro`,
     `complemento`,
     `numero`,
     `idestado`,
     `uf`
from
    transportadora
 where razao like concat(find,'%');
when 3 then
select
     idTransportadora,
	   `razao`,
	   `cnpj`,
	   `ie`,
	   `cep`,
     `municipio`,
	   `abreviatura`,
	   `idspedMunicipio`,
	   `status`,
     `bairro`,
     `logradouro`,
     `complemento`,
     `numero`,
     `idestado`,
     `uf`
from
    transportadora;
    when 4 then
    select
     idTransportadora,
	   `razao`,
	   `cnpj`,
	   `ie`,
	   `cep`,
     `municipio`,
	   `abreviatura`,
	   `idspedMunicipio`,
	   `status`,
     `bairro`,
     `logradouro`,
     `complemento`,
     `numero`,
     `idestado`,
     `uf`
from
    transportadora
 where `cnpj` = find;
end case;
    end $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `conector_find_tributacao`
--

DROP PROCEDURE IF EXISTS `conector_find_tributacao`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='' */ $$
CREATE DEFINER=`master`@`localhost` PROCEDURE `conector_find_tributacao`(
                                                in tipo integer,
                                                in find varchar(30)
                                           )
BEGIN
case tipo
when 1 then
select 
        idtributacao,
        idaliquota,
        descricao 
from 
        tributacao
        where idAliquota = find;
        when 2 then
select 
        idtributacao,
        idaliquota,
        descricao 
from 
        tributacao
        where descricao like concat(find,'%');
        else
select
        idtributacao,
        idaliquota,
        descricao 
from 
        tributacao;
        end case;
END $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `conector_find_troca`
--

DROP PROCEDURE IF EXISTS `conector_find_troca`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='' */ $$
CREATE DEFINER=`root`@`localhost` PROCEDURE `conector_find_troca`(tipo smallint, documento varchar(45), serie varchar(6), store double, di varchar(8), pdv int)
begin
case tipo
    when 1 then
        select count(*), 
                ifnull(nf.nf,"0"),ifnull(idCliente,0) 
                    from nf where nr_nota = documento and serie = serie and Loja=store and emissao=di;
    when 2 then
        select count(*), ifnull(numeroCupom,0) ,ifnull(Cliente,0)
                    from cupom_cabecalho where numerocupom=documento and loja=store and terminal=pdv and dataVenda=di;
    end case;
end $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `conector_find_typeFisco`
--

DROP PROCEDURE IF EXISTS `conector_find_typeFisco`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='' */ $$
CREATE DEFINER=`master`@`localhost` PROCEDURE `conector_find_typeFisco`(in tipo integer, in find varchar(100))
begin
case tipo
  when 1 then
SELECT
      idTable_Type_codigo,
      descricao
FROM
      table_type_codigo;
  when 2 then
SELECT
      idTable_Type_codigo,
      descricao
FROM
      table_type_codigo
where
      idTable_Type_codigo = find;
  when 3 then
SELECT
      idTable_Type_codigo,
      descricao
FROM
      table_type_codigo
where descricao = find;
  when 4 then
SELECT
      idTable_Type_codigo,
      descricao
      FROM
      table_type_codigo where idTable_Type_codigo in(15,16,17,18,19,20,21);
end case;
end $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `conector_find_typeFone`
--

DROP PROCEDURE IF EXISTS `conector_find_typeFone`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='STRICT_TRANS_TABLES,STRICT_ALL_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,TRADITIONAL,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION' */ $$
CREATE DEFINER=`master`@`localhost` PROCEDURE `conector_find_typeFone`(in tipo integer, in find varchar(30))
begin
case tipo
            when 1 then
                    select idfoneType,descricao from foneType;
            when 2 then
                    select idfoneType,descricao from foneType where descricao=find;
end case;
end $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `conector_find_typeItem`
--

DROP PROCEDURE IF EXISTS `conector_find_typeItem`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='' */ $$
CREATE DEFINER=`master`@`localhost` PROCEDURE `conector_find_typeItem`(in tipo integer, in find varchar(30))
begin
case tipo
    when 1 then
          select idtypeItem, descricao,
                 concat(idtypeItem, ' | ', descricao) as Juncao
                                  from typeItem;
    when 2 then
          select idtypeItem, descricao,
                 concat(idtypeItem, ' | ', descricao) as Juncao
                                  from typeItem
                                          where idTypeItem=find;
    when 3 then
          select idtypeItem, descricao
                                  from typeItem
                                          where descricao=find;
    when 4 then
          select idtypeItem, descricao,
                 concat(idtypeItem, ' | ', descricao) as Juncao
                                  from typeItem
                                          where descricao like concat('%',find,'%');
end case;
end $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `conector_find_typeLancamento`
--

DROP PROCEDURE IF EXISTS `conector_find_typeLancamento`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='' */ $$
CREATE DEFINER=`master`@`localhost` PROCEDURE `conector_find_typeLancamento`(in tipo int, in find varchar(45))
begin
case tipo
    when 1 then
    select 
          concat(idTypeLancamento, " | ", descricao)
                                from
                                    typeLancamento;
    when 2 then
    select 
          idTypeLancamento, descricao
                                from
                                    typeLancamento;
    when 3 then
    select 
          idTypeLancamento, descricao
                                from
                                    typeLancamento
                                        where
                                                idTypeLancamento=find;
    when 4 then
    select 
          idTypeLancamento, descricao
                                from
                                    typeLancamento
                                        where
                                            descricao=find;
    when 5 then
    select 
          concat(idTypeLancamento, " | ", descricao)
                                from
                                    typeLancamento
                                            where
                                                idTypeLancamento=find;
end case;
end $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `conector_find_typeMovimentacao`
--

DROP PROCEDURE IF EXISTS `conector_find_typeMovimentacao`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='' */ $$
CREATE DEFINER=`master`@`localhost` PROCEDURE `conector_find_typeMovimentacao`( in tipo integer, in find varchar(45))
begin
case tipo
    when 10 then
select 
        idtypeMovimentacao, 
        descricao 
from 
        conector.typeMovimentacao;
        when 1 then
        select 
        idtypeMovimentacao, 
        descricao 
from 
        conector.typeMovimentacao
        where idTypeMovimentacao = find;
        when 2 then
        select 
        idtypeMovimentacao, 
        descricao 
from 
        conector.typeMovimentacao
        where descricao like concat(find,'%');
        end case;
        
end $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `conector_find_typeTerminal`
--

DROP PROCEDURE IF EXISTS `conector_find_typeTerminal`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='' */ $$
CREATE DEFINER=`master`@`localhost` PROCEDURE `conector_find_typeTerminal`( 
                                            in tipo integer, in find varchar(30)
                                            )
begin
case tipo
when 1 then
select 
    idTypeTerminal, descricao 
from 
    typeTerminal
where
    idTypeTerminal=find; 


    when 2 then
    select
    idTypeTerminal, descricao
from
    typeTerminal
where
    descricao like concat(find,"%");

    when 3 then
    select
    idTypeTerminal, descricao
from
    typeTerminal;
    end case;
end $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `conector_find_un`
--

DROP PROCEDURE IF EXISTS `conector_find_un`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='STRICT_TRANS_TABLES,STRICT_ALL_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,TRADITIONAL,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION' */ $$
CREATE DEFINER=`master`@`localhost` PROCEDURE `conector_find_un`(
                                               in tipo integer,
                                               in find varchar(45)
                                     )
BEGIN
     case tipo
            when 1 then

select
      idunidadeMedida,
      descricao,
      unidade
from
      unidadeMedida
where UNIDADE like concat(find,"%");
            else

select
      idunidadeMedida,
      descricao,
      unidade
from
      unidadeMedida;

     end case;
END $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `conector_find_users`
--

DROP PROCEDURE IF EXISTS `conector_find_users`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='' */ $$
CREATE DEFINER=`master`@`localhost` PROCEDURE `conector_find_users`(
                                                    in tipo int(5),
                                                    in find varchar(45)
                                                  )
BEGIN
     case tipo
            when 1 then
select
  idusuario,
  `descricao` ,
  `login`,
  `status`,
  `supervisor`,
  `cadastro`
  from
   usuario
  where
  idUsuario=find;
  when 2 then
   select
   idusuario,
    `descricao` ,
  `login`,
  `status`,
  `supervisor`,
  `cadastro`
  from
   usuario
  where
  descricao like concat("%",find,"%");
  when 3 then
  select
  idusuario,
    `descricao` ,
  `login`,
  `status`,
  `supervisor`,
  `cadastro`
  from
  usuario;
  when 4 then
  select
        tab.idusuario,
        tab.`descricao` ,
        tab.`login`,
        tab.`passwd`,
        tab.`terminalVenda`,
        tab.`terminalConsulta`,
        tab.`terminalECF`,
        tab.`terminalAnaliseCredito`,
        tab.`terminalMataBurro`,
        tab.`status`,
        tab.`supervisor`,
        tab.`cadastro`,
        tab.onlyLogon,
        tab.defaultLoja,
        ifnull(tab1.razao,"") as razao
  from
        usuario tab
        left join loja tab1 on(tab.defaultLoja = tab1.idLoja)
  where
        tab.idUsuario=find;
  end case;
  end $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `conector_find_veiculo`
--

DROP PROCEDURE IF EXISTS `conector_find_veiculo`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='' */ $$
CREATE DEFINER=`master`@`localhost` PROCEDURE `conector_find_veiculo`( in tipo integer, in find varchar(45))
begin
    case tipo
        when 1 then
        select idTipoVeiculo, descricao from tipoVeiculo;
        when 2 then
        select idTipoVeiculo, descricao 
                                        from 
                                              tipoVeiculo
                                                         where idTipoVeiculo = find;
        when 3 then
        select idTipoVeiculo, descricao 
                                        from 
                                              tipoVeiculo
                                                         where descricao like concat("%",find,"%");
        when 4 then
        select idVeiculo as chave,
       tab.descricao,
       tab.placa,
       tab.uf,
       tab1.descricao as tipo,
       tab1.idTipoVeiculo chaveTipo
        from veiculo tab
            inner join tipoVeiculo tab1 on(tab.idTipoVeiculo = tab1.idTipoVeiculo);
        when 5 then
        select idVeiculo as chave,
       tab.descricao,
       tab.placa,
       tab.uf,
       tab1.descricao as tipo,
       tab1.idTipoVeiculo chaveTipo
        from veiculo tab
            inner join tipoVeiculo tab1 on(tab.idTipoVeiculo = tab1.idTipoVeiculo)
            where 
                        tab.idVeiculo = find;
        when 6 then
        select idVeiculo as chave,
       tab.descricao,
       tab.placa,
       tab.uf,
       tab1.descricao as tipo,
       tab1.idTipoVeiculo chaveTipo
        from veiculo tab
            inner join tipoVeiculo tab1 on(tab.idTipoVeiculo = tab1.idTipoVeiculo)
            where 
                        tab.descricao like concat("%",find,"%");
                        when 7 then
        select idVeiculo as chave,
       tab.descricao,
       tab.placa,
       tab.uf,
       tab1.descricao as tipo,
       tab1.idTipoVeiculo chaveTipo,
       tab.rntc
        from veiculo tab
            inner join tipoVeiculo tab1 on(tab.idTipoVeiculo = tab1.idTipoVeiculo)
            where 
                        tab.idVeiculo = find;
        end case;
end $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `conector_find_verificaBoleto`
--

DROP PROCEDURE IF EXISTS `conector_find_verificaBoleto`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='' */ $$
CREATE DEFINER=`root`@`%` PROCEDURE `conector_find_verificaBoleto`(in find_cliente int(11), find_loja int(11))
begin
declare VarPago numeric(15,3);
declare VarPagas numeric(15,3);

select
      ifnull(sum(tab.valor),0)
        from boleto tab
                          where
                                              (find_loja=0 or tab.cedente = find_loja) and
                                              (tab.sacador = find_cliente) and valorPago > 0 into
                                                                                         varPagas;
select
      ifnull(sum(tab.valor),0)
        from boleto tab
                          where
                                              (find_loja=0 or tab.cedente = find_loja) and
                                              (tab.sacador = find_cliente) and valorPago = 0  into
                                                                                   varPago;
select ifnull(VarPago,0), ifnull(VarPagas,0);
end $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `conector_find_verificaCheque`
--

DROP PROCEDURE IF EXISTS `conector_find_verificaCheque`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='' */ $$
CREATE DEFINER=`root`@`%` PROCEDURE `conector_find_verificaCheque`(in find_cliente int(11), find_loja int(11))
begin
declare VarPagas numeric(15,3);
declare VarPago numeric(15,3);
declare VarLimite numeric(15,3);
declare VarStatus smallint;

select preferencial,limiteCheque from clienteRisco where idcliente = find_cliente into VarStatus, VarLimite;
    select
        sum(tab.valueCheque)
            from
                cheque tab
                                                                        where
                                                                                (find_loja=0 or tab.idLoja = find_loja) and
                                                                                (tab.idCliente = find_cliente) and flagPagamento='s' into
                                                                                                                                       varPagas;
    select
        sum(tab.valueCheque)
            from
                cheque tab
                                                                        where
                                                                                (find_loja=0 or tab.idLoja = find_loja) and
                                                                                (tab.idCliente = find_cliente) and flagPagamento='n' into
                                                                                                                                  varPago;
select ifnull(VarPago,0), ifnull(VarPagas,0), ifnull(VarLimite,0), ifnull(VarStatus,0);
end $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `conector_find_verificaConvenio`
--

DROP PROCEDURE IF EXISTS `conector_find_verificaConvenio`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='' */ $$
CREATE DEFINER=`root`@`%` PROCEDURE `conector_find_verificaConvenio`(in find_cliente int(11), find_loja int(11))
begin
declare VarPagas numeric(15,3);
declare VarPago numeric(15,3);
declare VarLimite numeric(15,3);
declare VarStatus smallint;

select cooperado,limiteConvenio from clienteRisco where idcliente = find_cliente into VarStatus, VarLimite;
select
      sum(tab.valor)
        from convenioMovimento tab
                                                                        where
                                                                                (find_loja=0 or tab.idLoja = find_loja) and
                                                                                (tab.idCliente = find_cliente) and flagPagamento='s' into
                                                                                                                                       varPagas;
select
      sum(tab.valor)
        from convenioMovimento tab
                                                                        where
                                                                                (find_loja=0 or tab.idLoja = find_loja) and
                                                                                (tab.idCliente = find_cliente) and flagPagamento='n' into
                                                                                                                                  varPago;
select ifnull(VarPago,0), ifnull(VarPagas,0), ifnull(VarLimite,0), ifnull(VarStatus,0);
end $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `conector_frete_complemento`
--

DROP PROCEDURE IF EXISTS `conector_frete_complemento`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='' */ $$
CREATE DEFINER=`master`@`localhost` PROCEDURE `conector_frete_complemento`(in chave double)
begin
        declare VarOperacao int(11);
        declare VarTotalFrete decimal(15,3);
        declare VarEstado char(2) default 'MG';
        declare VarAliquota decimal(15,3);
        declare VarInCfopSugestao varchar(6);
        declare VarOnCfopSugestao varchar(6);
        declare VarCFOP varchar(6);
        declare VartypeNota char(1);
        declare VarSerie char(3);
        declare VarNota Varchar(3);
        declare VarReducao decimal(15,3) default 0;
        declare VarProduto double;

    select
          idOperacao, valorTotalNota, typeNota, nr_nota, serie
                                            from entrada where identrada=chave
                                                         into VarOperacao, VarTotalFrete, VartypeNota, VarNota, VarSerie;
    IF(VartypeNota = "f")THEN
        select produtoServico from operacaoEntrada where idOperacao=VarOperacao into VarProduto;

        select tab.uf from transportadora tab
                                inner join entrada tab1 on(tab.idTransportadora = tab1.idTransportadora)
                                                                                        where
                                                                                            tab1.idEntrada=chave
                                                                                                            into VarEstado;

select
      tab1.aliquota, tab1.reducao
                    from produtoImpostos tab
                    inner join aliquota tab1 on(tab.tributacao = tab1.idaliquota)
                                                        where idProduto=VarProduto
                                                                            into
                                                                                VarAliquota, VarReducao;
select flagInCfopSugestao,
        flagOnCfopSugestao
                    from operacaoentrada
                            WHERE
                                idOperacao= VarOperacao
                                        into
                                            VarInCfopSugestao,
                                            VarOnCfopSugestao;

                                            if(VarEstado = "MG")then
                                                SET VarCFOP=VarInCfopSugestao;
                                                ELSE
                                                    SET VarEstado=VarOnCfopSugestao;
                                                    end if;

          select idProdutoEmbalagem,  idUnidadeMedida from produtoEmbalagem where barra=VarProduto and defaultVenda='s' into @a,@b;

                               INSERT INTO `conector`.`entradaitem`
                                                              (
                                                                    `identrada`,
                                                                    `idProduto`,
                                                                     custoLiquido,
                                                                     custoBruto,
                                                                    `custoNota`,
                                                                    `custoNotaTotal`,
                                                                    `custoTotal`,
                                                                    `chaveEmbalagem`,
                                                                    `barra`,
                                                                    `idunidadeMedida`,
                                                                    `icmsEntrada`,
                                                                    `reducaoEntrada`,
                                                                    `quantidade`,
                                                                    `quantidadeRecebida`,
                                                                    `quantidadePendente`,
                                                                    `creditoIcms`,
                                                                    `valorFrete`,
                                                                    `numeroNota`,
                                                                    `serie`,
                                                                    `dateInsert`,
                                                                    `cstIpi`,
                                                                    `cstPis`,
                                                                    `cstCofins`,
                                                                    `cstIcms`,
                                                                    `cfop`,
                                                                    `basePis`,
                                                                    `baseCofins`,
                                                                    `valorPis`,
                                                                    `valorCofins`,
                                                                    `baseIcms`,
                                                                    `flagRecebe`,
                                                                    `typeAliquota`
                                                                  )
                                                                                VALUES
                                                                  (
                                                                    chave,
                                                                    VarProduto,
                                                                    VarTotalFrete,
                                                                    VarTotalFrete,
                                                                    VarTotalFrete,
                                                                    VarTotalFrete,
                                                                    VarTotalFrete,
                                                                    @a,
                                                                    VarProduto,
                                                                    @b,
                                                                    VarAliquota,
                                                                    VarReducao,
                                                                    1,
                                                                    0,
                                                                    0,
                                                                    round(((VarTotalFrete*VarAliquota)/100),3),
                                                                    VarTotalFrete,
                                                                    VarNota,
                                                                    VarSerie,
                                                                    curdate(),
                                                                    "003",
                                                                    "007",
                                                                    "007",
                                                                    "000",
                                                                    VarCFOP,
                                                                    VarTotalFrete,
                                                                    VarTotalFrete,
                                                                    0,
                                                                    0,
                                                                    VarTotalFrete,
                                                                    '1',
                                                                    't'
                                                                  );

    END IF;

end $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `conector_gera_baixaConvenioLote`
--

DROP PROCEDURE IF EXISTS `conector_gera_baixaConvenioLote`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='' */ $$
CREATE DEFINER=`master`@`localhost` PROCEDURE `conector_gera_baixaConvenioLote`(
                                                    in tipo smallint,
                                                    in varEmpresa double,
                                                    in dataBaixa date,
                                                    in tipoData char(1),
                                                    in pessoa int)
BEGIN
    DECLARE done INT DEFAULT FALSE;     declare VarTotal decimal(15,3)  default 0;
    declare VarIdCliente double;
    declare VarIdLoja double;
    declare VarParcela int default 0;
    declare VarIdMovimento double;
    declare tipoBaixa char(1) default 'v';

case tipo 

        when 1 then



select 
        tab.idCliente,
        case idTipoPessoa when 1 then tab2.Nome
                          when 2 then tab3.Razao
                          when 3 then tab4.Nome end,
        tab.emissao,
        tab.idLoja as Loja_Compra,
        tab.Vencimento,
        concat(tab.parcela, '/', tab.qttyParcelas) Parcelamento,
        tab.valor,
        tab.juros,
        (tab.valor + tab.juros)        
            from convenioMovimento tab
                    inner join cliente tab1 on(tab.idCliente = tab1.idCliente)
                    left join fisica tab2 on(tab1.idCliente = tab2.idCliente)
                    left join juridica tab3 on(tab1.idCliente = tab3.idCliente)
                    left join rural tab4 on(tab1.idCliente = tab4.idCliente)
                            where
                                 flagPagamento = "n" and
                                 valorPago = 0 and
                                 tab.empresa = varEmpresa and
                                (0=pessoa or tab.IdCliente = pessoa) and
                                if(tipoBaixa=tipoData, tab.vencimento <= dataBaixa, tab.emissao <= dataBaixa) order by 2,3,4,6;
        when 2 then

    
     select 
        sum((tab.valor + tab.juros) - tab.desconto) total
            from convenioMovimento tab
                            where
                                 flagPagamento = "n" and
                                 valorPago = 0 and
                                 tab.empresa = varEmpresa and
                                (0=pessoa or tab.IdCliente = pessoa) and
                                    if(tipoBaixa=tipoData, tab.vencimento <= dataBaixa, tab.emissao <= dataBaixa) INTO @Total;
                                  if(@Total is null)then set @Total=0; end if;                                
        when 3 then
    
    
    
     select 
        sum((tab.valor + tab.juros) - tab.desconto) total
            from convenioMovimento tab
                            where
                                 flagPagamento = "n" and
                                 valorPago = 0 and
                                 tab.empresa = varEmpresa and
                                (0=pessoa or tab.IdCliente = pessoa) and
                                    if(tipoBaixa=tipoData, tab.vencimento <= dataBaixa, tab.emissao <= dataBaixa) INTO @Total;
                                    if(@Total is null)then set @Total=0; end if;                                
    begin
        DECLARE basicFonte CURSOR for select
                                    tab.idMovimento,
                                    tab.idCliente,
                                    tab.idLoja as Loja_Compra,
                                    tab.parcela,
                                    (tab.valor + tab.juros)        
                                        from convenioMovimento tab
                            where
                                 flagPagamento = "n" and
                                 valorPago = 0 and
                                 tab.empresa = varEmpresa and
                                (0=pessoa or tab.IdCliente = pessoa) and
                                    if(tipoBaixa=tipoData, tab.vencimento <= dataBaixa, tab.emissao <= dataBaixa);
                                                              
                                                              DECLARE CONTINUE HANDLER FOR NOT FOUND SET done = TRUE;
    open basicFonte;
    
    read_loop: LOOP
                          fetch basicFonte into
                                            VarIdMovimento,
                                            VarIdCliente,
                                            VarIdLoja,
                                            VarParcela,
                                            VarTotal;
                                            
                    IF done THEN
                        LEAVE read_loop;
                    END IF;
                                            
                    update convenioMovimento 
                                        set valorPago = VarTotal, 
                                            flagAlteracao=now(), 
                                            flagPagamento = 's', 
                                            pagamento = date_format(now(), '%Y%m%d') 
                                                                    where idMovimento = VarIdMovimento;
                    end loop;
        close basicFonte;                                    
    end;

        
    end case;
    select @Total;
END $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `conector_gera_comissao`
--

DROP PROCEDURE IF EXISTS `conector_gera_comissao`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='' */ $$
CREATE DEFINER=`master`@`localhost` PROCEDURE `conector_gera_comissao`(
                                            in findLoja int, 
                                            in reserva double, 
                                            in nota double, 
                                            in cupom double
                                        )
begin
        declare VarItemLoja double;
        declare VarItemProduto double;
        declare VarItemVendedor int;
        declare VarItemSetor int;
        declare VarItemQtty numeric(15,3);
        declare VarItemCustoLiquido decimal(15,3);
        declare VarItemPriceVenda decimal(15,3);
        declare VarItemPriceOriginal decimal(15,3);
        declare VarItemMargemLiquida decimal(15,3);
        declare VarItemDiscount decimal(15,3);
        declare VarItemIndice decimal(15,3);
        declare VarItemEmissao decimal(15,3);
        declare VarItemIdFinalizadora decimal(15,3);
        declare VarItemMedoto decimal(15,3);
        declare VarTypeMargem char(1);
        declare VarTypeComissao smallint;
        declare VarDiasDev int;
        declare VarCountItens int;
        declare VarReserva double;
        declare VarDocFiscal double;
        declare fullReserva int;
        declare fullNota int;
        
        DECLARE done INT DEFAULT FALSE;         
        select typeCalculo, tipoComissao, diasDevComissao 
                                                from loja where idLoja=findLoja
                                                                into VarTypeMargem, VarTypeComissao, VarDiasDev;
                                                                
        if(VarTypeComissao = 2)then
            select count(*) from pedidoItens where idPedido=reserva into VarCountItens;
            set VarReserva = reserva;
                else 
                    select count(*) from nfItem where idNf=nota into VarCountItens;
                    
                    select idPedido,serie from nf where nf.nr_nota=nota into VarReserva,@serie;
                    
                    
        end if;
        
        if(nota is not null)then
            set VarDocFiscal = nota;
        else if(cupom is not null)then
            set VarDocFiscal=cupom;
             end if;
        end if;
        
        SELECT count(*) FROM COMISSAO where documentoNaoFiscalReservado=reserva into fullReserva;
        select count(*) from comissao where documentoFiscal=nota and serie=@serie into fullNota;
        
if(fullReserva = 0 and fullNota = 0)then
   if(VarCountItens > 0 && VarReserva is not null)then
    begin
    declare fonteOne cursor for select 
                                    tab1.idLoja,
                                    tab.idProduto,
                                    tab.idFuncionario,
                                    tab2.idSetor,
                                    tab.quantidade,
                                    tab.price,
                                    tab3.custoLiquido,
                                    tab3.priceVenda,
                                    tab.valorDiscount,
                                    setor.comissao as "indice",
                                    emissao,
                                    tab4.idFinalizadora,
                                    tab1.idMetodo
                                      from pedidoItens tab
                                           inner join pedido tab1 on(tab.idPedido = tab1.idPedido  and tab.idLoja = tab1.idLoja)
                                           inner join produto tab2 on(tab.idProduto = tab2.idProduto)
                                           inner join produtoPrice tab3 on(tab.idProduto = tab3.idProduto and tab.idLoja = tab3.idLoja)
                                           inner join metodo tab4 on(tab1.idMetodo = tab4.idMetodo)
                                           inner join setor on(tab2.idSetor = setor.idSetor)
                                                                                      where tab.idPedido=VarReserva;
                                                                                                                DECLARE CONTINUE HANDLER FOR NOT FOUND SET done = TRUE;

        OPEN fonteOne;
        read_loop: LOOP
                        fetch fonteOne into
                                        VarItemLoja,
                                        VarItemProduto,
                                        VarItemVendedor,
                                        VarItemSetor,
                                        VarItemQtty,
                                        VarItemPriceVenda,
                                        VarItemCustoLiquido,
                                        VarItemPriceOriginal,
                                        VarItemDiscount,
                                        VarItemIndice,
                                        VarItemEmissao,
                                        VarItemIdFinalizadora,
                                        VarItemMedoto;                        
                    IF done THEN
                        LEAVE read_loop;
                    END IF;
                                                                   case VarTypeMargem
                                                                        when 'b' then
                                                                    
                                                                            call conector_calc_margem_lbc(VarItemProduto,VarItemLoja,VarItemCustoLiquido,VarItemPriceVenda,@custo,@reposicao,@venda,@minimo,@sugestao,@margem,@lbruto,@lliquido,@mBruto,VarItemMargemLiquida);
                                                                        when 'r' then
                                                                            call conector_calc_margem_lbv(VarItemProduto,VarItemLoja,VarItemCustoLiquido,VarItemPriceVenda,@custo,@reposicao,@venda,@minimo,@sugestao,@margem,@lbruto,@lliquido,@mBruto,VarItemMargemLiquida);
                                                                        when 'c' then
                                                                            call conector_calc_margem_llc(VarItemProduto,VarItemLoja,VarItemCustoLiquido,VarItemPriceVenda,@custo,@reposicao,@venda,@minimo,@sugestao,@margem,@lbruto,@lliquido,@mBruto,VarItemMargemLiquida);
                                                                        when 'l' then
                                                                            call conector_calc_margem_llv(VarItemProduto,VarItemLoja,VarItemCustoLiquido,VarItemPriceVenda,@custo,@reposicao,@venda,@minimo,@sugestao,@margem,@lbruto,@lliquido,@mBruto,VarItemMargemLiquida);
                                                                    end case;
                    INSERT INTO `conector`.`comissao`
                            (
                                `idloja`,
                                `idProduto`,
                                `idfuncionario`,
                                `setor`,
                                `quantidade`,
                                `priceVenda`,
                                `priceCusto`,
                                `priceOriginal`,
                                `margem`,
                                `desconto`,
                                `typeComissao`,
                                `indice`,
                                `data`,
                                `finalizadora`,
                                `metodo`,
                                `documentoFiscal`,
                                `serie`,
                                `documentoNaoFiscalReservado`,
                                `hora`
                            )
                                VALUES
                            (
                                VarItemLoja,
                                VarItemProduto,
                                VarItemVendedor,
                                VarItemSetor,
                                VarItemQtty,
                                VarItemPriceVenda,
                                VarItemCustoLiquido,
                                VarItemPriceOriginal,
                                VarItemMargemLiquida,
                                VarItemDiscount,
                                VarTypeComissao,
                                VarItemIndice,
                                now(),
                                VarItemIdFinalizadora,
                                VarItemMedoto,
                                VarDocFiscal,
                                @serie,
                                VarReserva,
                                now()
                            );
            end loop;
        close fonteOne;
      end;
    end if;
end if;
end $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `conector_gera_contrato`
--

DROP PROCEDURE IF EXISTS `conector_gera_contrato`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='' */ $$
CREATE DEFINER=`master`@`localhost` PROCEDURE `conector_gera_contrato`(
   tipo smallint,
   find double,
  `inc_idcliente` INT ,
  `inc_idfuncionario` int,
  `inc_status` smallint,
  `inc_emissao` date,
  `inc_observacao` varchar(100),
  `inc_tac` DECIMAL(15,3),
  `inc_cet` DECIMAL(15,3),
   inc_doc double,
   inc_terminal integer)
begin
        declare v0 int default 0;
                declare v1 int default 0;
        select final
                    from pedido
                             where idPedido=find
                                            into v0;
                select count(*) from
                            pedidoFinanceiro where idPedido=find
                                                        into v1;

  case tipo
            when 1 then
            if(v0 = 1 || v1 >= 1)then
            insert into crediario(  `idloja`,
                                    `idmetodo`,
                                    `idcliente`,
                                    `idfuncionario`,
                                    `emissao`,
                                    `valueEntry` ,
                                    `total`,
                                    `encargos`,
                                    `status`,
                                    `observacao`,
                                    `entrada`,
                                    `tac`,
                                    `cet`,
                                    `taxa`,
                                     pedido, parcelamento, cupom, terminal
                                 )select
                                            tab.idLoja,
                                            tab.idMetodo,
                                            `inc_idcliente`,
                                            `inc_idfuncionario`,
                                            now(),
                                            tab.entrada,
                                            tab.referencia,
                                            tab.encargos,
                                            `inc_status`,
                                            `inc_observacao`,
                                            0,
                                            `inc_tac`,
                                            `inc_cet`,
                                            tab1.itaxa,
                                            find, numeroParcelas,
                                            inc_doc,
                                            inc_terminal
                                                            from pedidoCrediario tab
                                                            inner join metodo tab1 on(tab.idMetodo = tab1.idMetodo)
                                                                                                    where idPedido=find;
        end if;

        end case;
        select last_insert_id();
  end $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `conector_gera_etiqueta`
--

DROP PROCEDURE IF EXISTS `conector_gera_etiqueta`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='' */ $$
CREATE DEFINER=`master`@`localhost` PROCEDURE `conector_gera_etiqueta`(v int(13),
                                                                         prd varchar(45),
                                                                         store double,
                                                                         pessoa double,
                                                                         find_setor int,
                                                                         find_grupo int,
                                                                         find_categoria int,
                                                                         findNumeroNota varchar(45),
                                                                         findDataInicial date, tipo int)
begin

  declare valida smallint default 0;

case tipo
  when 0 then
CREATE TEMPORARY TABLE temp1 ENGINE=MEMORY
    as (select tab.idProduto,
         tab.nome,
         tab.nomePDV,
         tab2.unidade,
         round(tab1.priceFull,2) as preco
        from produto tab
             INNER join produtoPrice tab1 on(tab.idProduto = tab1.idProduto)
             inner join unidadeMedida tab2 on(tab.idUnidade = tab2.idUnidadeMedida)
             where
              (0=prd or tab.idProduto=prd) and  (0=store or tab1.idLoja=store)); set valida=1;
  when 1 then

CREATE TEMPORARY TABLE temp1 ENGINE=MEMORY
    as (select tab.idProduto,
         tab.nome,
         tab.nomePDV,
         tab2.unidade,
         round(tab1.priceFull,2) as preco
        from produto tab
             INNER join produtoPrice tab1 on(tab.idProduto = tab1.idProduto)
             inner join unidadeMedida tab2 on(tab.idUnidade = tab2.idUnidadeMedida)
             where (0=pessoa or tab.idFornecedor=pessoa) and
              (0=prd or tab.idProduto=prd) and  (0=store or tab1.idLoja=store)); set valida=1;

  when 2 then

CREATE TEMPORARY TABLE temp1 ENGINE=MEMORY
    as (select tab.idProduto,
         tab.nome,
         tab.nomePDV,
         tab2.unidade,
         round(tab1.priceFull,2) as preco
        from produto tab
             INNER join produtoPrice tab1 on(tab.idProduto = tab1.idProduto)
             inner join unidadeMedida tab2 on(tab.idUnidade = tab2.idUnidadeMedida)
             where (0=find_setor or tab.idSetor = find_setor) and (0=find_grupo or tab.idGrupo = find_grupo) and
                   (0=find_categoria or tab.idCategoria=find_categoria) and
              (0=prd or tab.idProduto=prd) and  (0=store or tab1.idLoja=store)); set valida=1;
  when 3 then
select tab1.idProduto,
         tab1.nome,
         tab1.nomePDV,
         un2.unidade,
         round(tab4.priceFull,2) as preco
from
    produto tab1
    inner join unidadeMedida un2 on(tab1.idUnidade = un2.idUnidadeMedida)
    inner join produtostore tab2 on (tab1.idproduto = tab2.idproduto)
    inner join loja tab3 on (tab2.idloja = tab3.idloja)
    left join produtoprice tab4 on (tab1.idproduto = tab4.idproduto and tab3.idloja = tab4.idloja)
    inner join cliente tab5 on (tab1.idfornecedor = tab5.idcliente and tab3.idloja = tab5.idloja)
    left join fisica tab6 on (tab1.idfornecedor = tab6.idcliente)
    left join rural tab7 on (tab1.idfornecedor = tab7.idcliente)
    left join juridica tab8 on (tab1.idfornecedor = tab8.idcliente)
    left join entradaitem tab9 on (tab1.idproduto = tab9.idproduto)
    inner join entrada tab10 on (tab9.identrada = tab10.identrada and tab10.idloja)
    inner join tipopessoa tab11 on (tab5.idtipoPessoa = tab11.idtipoPessoa)
where
    (store = 0 or tab2.idloja = store)
    and (findNumeroNota = '0' or tab10.nr_nota = findNumeroNota)
    and tab9.dateInsert = findDataInicial;
 set valida=1;
end case;

if(valida = 1)then

  WHILE v > 1 DO
      insert into temp1 select lpad(
      tab.idProduto,11,0),
         tab.nome,
         tab.nomePDV,
         tab2.unidade,
         round(tab1.priceFull,2) as preco
        from produto tab
             INNER join produtoPrice tab1 on(tab.idProduto = tab1.idProduto)
             inner join UnidadeMedida tab2 on(tab.idUnidade = tab2.idUnidadeMedida)
             where (0=pessoa or tab.idFornecedor=pessoa) and
              (0=prd or tab.idProduto=prd) and  (0=store or tab1.idLoja=store);
    SET v = v - 1;

  END WHILE;

  select tab.idProduto,
         tab.nome,
         tab.nomePDV,
         tab.unidade,
         tab.preco as preco from temp1 tab order by 1;
end if;

  drop table temp1;

end $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `conector_gera_faturamento`
--

DROP PROCEDURE IF EXISTS `conector_gera_faturamento`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='' */ $$
CREATE DEFINER=`master`@`localhost` PROCEDURE `conector_gera_faturamento`(in find double, in tipo integer)
begin

case tipo
      when 3 then
select tab.idPedido,
       tab2.idFinalizadora,
       tab2.numeroParcelas,
       tab2.observacao,
       round(tab2.referencia,2),
       tab2.entrada,
       round(((price*quantidade)-valorDiscount),2) liquido,
       round(tab.ValorLiquido,2) as financiado,
       truncate((tab2.referencia + tab2.encargos),2) as negociado,
       tab2.idMetodo,
       tab3.idCliente,
       case tab3.idTipoPessoa when 1 then date_format(tab5.nascimento, '%d/%m/%Y') when 3 then date_format(tab6.nascimento, '%d/%m/%Y') when 2 then date_format(tab7.dataAbertura, '%d/%m/%Y') end as Data,
       case tab3.idTipoPessoa when 1 then tab5.nome when 3 then tab6.nome when 2 then tab7.razao end as "NOME_RAZAO",
       case tab3.idTipoPessoa when 1 then tab5.cpf when 3 then tab6.cpf when 2 then tab7.cnpj end as "CPF_CNPJ",
       tab3.idLoja,
       date_format(tab3.dataEmissao, '%d/%m/%Y'),
       tab3.uf,
       tab4.bairro,
       tab4.logradouro,
       tab4.numero,
       tab4.cep,
       tab3.idTipoPessoa,
       tab.status,
       tab.final,
       tab.sinal,
       tab.idLoja
             from pedido tab
                    inner join pedidoCrediario tab1 on(tab.idPedido = tab1.idPedido)
                    inner join pedidoFinanceiro tab2 on(tab.idPedido = tab2.idPedido)
                    inner join cliente tab3 on(tab.idCliente = tab3.idCliente)
                    inner join endereco tab4 on(tab3.idCliente = tab4.idCliente)
                    left join fisica tab5 on(tab3.idCliente = tab5.idCliente)
                    left join rural tab6 on(tab3.idCliente = tab6.idCliente)
                    left join juridica tab7 on(tab3.idCliente = tab7.idCliente)
                    inner join pedidoItens itens on(tab.idPedido = itens.idPedido)
                                                                      where tab.idPedido= find and
                                                                             tab2.idFinalizadora=tipo
                                                                                     group by 1,2,3,4,5,6,8,9,10,11,12,13,14,15,17;

    when 2 then

select tab.idPedido,
       tab2.idFinalizadora,
       tab2.numeroParcelas,
       tab2.observacao,
       round(tab2.referencia,2),
       tab2.entrada,
       round(((price*quantidade)-valorDiscount),2) liquido,
       round(tab.ValorLiquido,2) as financiado,
       round((tab2.referencia + tab2.encargos),2) as negociado,
       tab2.idMetodo,
       tab3.idCliente,
       case tab3.idTipoPessoa when 1 then date_format(tab5.nascimento, '%d/%m/%Y') when 3 then date_format(tab6.nascimento, '%d/%m/%Y') when 2 then date_format(tab7.dataAbertura, '%d/%m/%Y') end as Data,
       case tab3.idTipoPessoa when 1 then tab5.nome when 3 then tab6.nome when 2 then tab7.razao end as "NOME_RAZAO",
       case tab3.idTipoPessoa when 1 then tab5.cpf when 3 then tab6.cpf when 2 then tab7.cnpj end as "CPF_CNPJ",
       tab3.idLoja,
       date_format(tab3.dataEmissao, '%d/%m/%Y'),
       tab3.uf,
       tab4.bairro,
       tab4.logradouro,
       tab4.numero,
       tab4.cep,
       tab3.idTipoPessoa,
       tab.status,
       tab.final,
       tab.sinal,
       tab.idLoja
             from pedido tab
                    inner join pedidoCheque tab1 on(tab.idPedido = tab1.idPedido)
                    inner join pedidoFinanceiro tab2 on(tab.idPedido = tab2.idPedido)
                    inner join cliente tab3 on(tab.idCliente = tab3.idCliente)
                    inner join endereco tab4 on(tab3.idCliente = tab4.idCliente)
                    left join fisica tab5 on(tab3.idCliente = tab5.idCliente)
                    left join rural tab6 on(tab3.idCliente = tab6.idCliente)
                    left join juridica tab7 on(tab3.idCliente = tab7.idCliente)
                    inner join pedidoItens itens on(tab.idPedido = itens.idPedido)
                                                                      where tab.idPedido= find and
                                                                             tab2.idFinalizadora=tipo
                                                                                     group by 1,2,3,4,5,6,8,9,10,11,12,13,14,15,17;
    when 5 then
select tab.idPedido,
       tab2.idFinalizadora,
       tab2.numeroParcelas,
       tab2.observacao,
       round(tab2.referencia,2),
       tab2.entrada,
       round(((price*quantidade)-valorDiscount),2) liquido,
       round(tab.ValorLiquido,2) as financiado,
       round((tab2.referencia + tab2.encargos),2) as negociado,
       tab2.idMetodo,
       tab3.idCliente,
       case tab3.idTipoPessoa when 1 then date_format(tab5.nascimento, '%d/%m/%Y') when 3 then date_format(tab6.nascimento, '%d/%m/%Y') when 2 then date_format(tab7.dataAbertura, '%d/%m/%Y') end as Data,
       case tab3.idTipoPessoa when 1 then tab5.nome when 3 then tab6.nome when 2 then tab7.razao end as "NOME_RAZAO",
       case tab3.idTipoPessoa when 1 then tab5.cpf when 3 then tab6.cpf when 2 then tab7.cnpj end as "CPF_CNPJ",
       tab3.idLoja,
       date_format(tab3.dataEmissao, '%d/%m/%Y'),
       tab3.uf,
       tab4.bairro,
       tab4.logradouro,
       tab4.numero,
       tab4.cep,
       tab3.idTipoPessoa,
       tab.status,
       tab.final,
       tab.sinal,
       tab.idLoja
             from pedido tab
                    inner join pedidoCartao tab1 on(tab.idPedido = tab1.idPedido)
                    inner join pedidoFinanceiro tab2 on(tab.idPedido = tab2.idPedido)
                    inner join cliente tab3 on(tab.idCliente = tab3.idCliente)
                    inner join endereco tab4 on(tab3.idCliente = tab4.idCliente)
                    left join fisica tab5 on(tab3.idCliente = tab5.idCliente)
                    left join rural tab6 on(tab3.idCliente = tab6.idCliente)
                    left join juridica tab7 on(tab3.idCliente = tab7.idCliente)
                    inner join pedidoItens itens on(tab.idPedido = itens.idPedido)
                                                                      where tab.idPedido= find and
                                                                             tab2.idFinalizadora=tipo
                                                                                     group by 1,2,3,4,5,6,8,9,10,11,12,13,14,15,17;
    when 6 then
select tab.idPedido,
       tab2.idFinalizadora,
       tab2.numeroParcelas,
       tab2.observacao,
       round(tab2.referencia,2),
       tab2.entrada,
       round(((price*quantidade)-valorDiscount),2) liquido,
       round(tab.ValorLiquido,2) as financiado,
       round((tab2.referencia + tab2.encargos),2) as negociado,
       tab2.idMetodo,
       tab3.idCliente,
       case tab3.idTipoPessoa when 1 then date_format(tab5.nascimento, '%d/%m/%Y') when 3 then date_format(tab6.nascimento, '%d/%m/%Y') when 2 then date_format(tab7.dataAbertura, '%d/%m/%Y') end as Data,
       case tab3.idTipoPessoa when 1 then tab5.nome when 3 then tab6.nome when 2 then tab7.razao end as "NOME_RAZAO",
       case tab3.idTipoPessoa when 1 then tab5.cpf when 3 then tab6.cpf when 2 then tab7.cnpj end as "CPF_CNPJ",
       tab3.idLoja,
       date_format(tab3.dataEmissao, '%d/%m/%Y'),
       tab3.uf,
       tab4.bairro,
       tab4.logradouro,
       tab4.numero,
       tab4.cep,
       tab3.idTipoPessoa,
       tab.status,
       tab.final,
       tab.sinal,
       tab.idLoja
             from pedido tab
                    inner join pedidoCartao tab1 on(tab.idPedido = tab1.idPedido)
                    inner join pedidoFinanceiro tab2 on(tab.idPedido = tab2.idPedido)
                    inner join cliente tab3 on(tab.idCliente = tab3.idCliente)
                    inner join endereco tab4 on(tab3.idCliente = tab4.idCliente)
                    left join fisica tab5 on(tab3.idCliente = tab5.idCliente)
                    left join rural tab6 on(tab3.idCliente = tab6.idCliente)
                    left join juridica tab7 on(tab3.idCliente = tab7.idCliente)
                    inner join pedidoItens itens on(tab.idPedido = itens.idPedido)
                                                                      where tab.idPedido= find and
                                                                             tab2.idFinalizadora=tipo
                                                                                     group by 1,2,3,4,5,6,8,9,10,11,12,13,14,15,17;
        when 4 then
select tab.idPedido,
       tab2.idFinalizadora,
       tab2.numeroParcelas,
       tab2.observacao,
       round(tab2.referencia,2),
       tab2.entrada,
       round(((price*quantidade)-valorDiscount),2) liquido,
       round(tab.ValorLiquido,2) as financiado,
       round((tab2.referencia + tab2.encargos),2) as negociado,
       tab2.idMetodo,
       tab3.idCliente,
       case tab3.idTipoPessoa when 1 then date_format(tab5.nascimento, '%d/%m/%Y') when 3 then date_format(tab6.nascimento, '%d/%m/%Y') when 2 then date_format(tab7.dataAbertura, '%d/%m/%Y') end as Data,
       case tab3.idTipoPessoa when 1 then tab5.nome when 3 then tab6.nome when 2 then tab7.razao end as "NOME_RAZAO",
       case tab3.idTipoPessoa when 1 then tab5.cpf when 3 then tab6.cpf when 2 then tab7.cnpj end as "CPF_CNPJ",
       tab3.idLoja,
       date_format(tab3.dataEmissao, '%d/%m/%Y'),
       tab3.uf,
       tab4.bairro,
       tab4.logradouro,
       tab4.numero,
       tab4.cep,
       tab3.idTipoPessoa,
       tab.status,
       tab.final,
       tab.sinal,
       tab.idLoja
             from pedido tab
                    inner join pedidoConvenio tab1 on(tab.idPedido = tab1.idPedido)
                    inner join pedidoFinanceiro tab2 on(tab.idPedido = tab2.idPedido)
                    inner join cliente tab3 on(tab.idCliente = tab3.idCliente)
                    inner join endereco tab4 on(tab3.idCliente = tab4.idCliente)
                    left join fisica tab5 on(tab3.idCliente = tab5.idCliente)
                    left join rural tab6 on(tab3.idCliente = tab6.idCliente)
                    left join juridica tab7 on(tab3.idCliente = tab7.idCliente)
                    inner join pedidoItens itens on(tab.idPedido = itens.idPedido)

                                                                      where tab.idPedido= find and
                                                                             tab2.idFinalizadora=tipo
                                                                                     group by 1,2,3,4,5,6,8,9,10,11,12,13,14,15,17;

      when 7 then

select tab.idPedido,
       tab2.idFinalizadora,
       tab2.numeroParcelas,
       tab2.observacao,
       round(tab2.referencia,2),
       tab2.entrada,
       round(((price*quantidade)-valorDiscount),2) liquido,
       round(tab.ValorLiquido,2) as financiado,
       round((round((round((tab2.referencia + tab2.encargos),2)/tab2.numeroParcelas),2)*tab2.numeroParcelas),2) as negociado,
       tab2.idMetodo,
       tab3.idCliente,
       case tab3.idTipoPessoa when 1 then date_format(tab5.nascimento, '%d/%m/%Y') when 3 then date_format(tab6.nascimento, '%d/%m/%Y') when 2 then date_format(tab7.dataAbertura, '%d/%m/%Y') end as Data,
       case tab3.idTipoPessoa when 1 then tab5.nome when 3 then tab6.nome when 2 then tab7.razao end as "NOME_RAZAO",
       case tab3.idTipoPessoa when 1 then tab5.cpf when 3 then tab6.cpf when 2 then tab7.cnpj end as "CPF_CNPJ",
       tab3.idLoja,
       date_format(tab3.dataEmissao, '%d/%m/%Y'),
       tab3.uf,
       tab4.bairro,
       tab4.logradouro,
       tab4.numero,
       tab4.cep,
       tab3.idTipoPessoa,
       tab.status,
       tab.final,
       tab.sinal,
       tab.idLoja
             from pedido tab
                    inner join pedidoBoleto tab1 on(tab.idPedido = tab1.idPedido)
                    inner join pedidoFinanceiro tab2 on(tab.idPedido = tab2.idPedido)
                    inner join cliente tab3 on(tab.idCliente = tab3.idCliente)
                    inner join endereco tab4 on(tab3.idCliente = tab4.idCliente)
                    left join fisica tab5 on(tab3.idCliente = tab5.idCliente)
                    left join rural tab6 on(tab3.idCliente = tab6.idCliente)
                    left join juridica tab7 on(tab3.idCliente = tab7.idCliente)
                    inner join pedidoItens itens on(tab.idPedido = itens.idPedido)

                                                                      where tab.idPedido= find and
                                                                             tab2.idFinalizadora=tipo
                                                                                     group by 1,2,3,4,5,6,8,9,10,11,12,13,14,15,17;
      when 1 then
select tab.idPedido,
       tab2.idFinalizadora,
       tab2.numeroParcelas,
       tab2.observacao,
       round(tab2.referencia,2),
       tab2.entrada,
       round(((price*quantidade)-valorDiscount),2) liquido,
       round(tab.ValorLiquido,2) as financiado,
       truncate((tab2.referencia + tab2.encargos),2) as negociado,
       tab2.idMetodo,
       tab3.idCliente,
       case tab3.idTipoPessoa when 1 then date_format(tab5.nascimento, '%d/%m/%Y') when 3 then date_format(tab6.nascimento, '%d/%m/%Y') when 2 then date_format(tab7.dataAbertura, '%d/%m/%Y') end as Data,
       case tab3.idTipoPessoa when 1 then tab5.nome when 3 then tab6.nome when 2 then tab7.razao end as "NOME_RAZAO",
       case tab3.idTipoPessoa when 1 then tab5.cpf when 3 then tab6.cpf when 2 then tab7.cnpj end as "CPF_CNPJ",
       tab3.idLoja,
       date_format(tab3.dataEmissao, '%d/%m/%Y'),
       tab3.uf,
       tab4.bairro,
       tab4.logradouro,
       tab4.numero,
       tab4.cep,
       tab3.idTipoPessoa,
       tab.status,
       tab.final,
       tab.sinal,
       tab.idLoja
             from pedido tab
                    inner join money tab1 on(tab.idPedido = tab1.idPedido)
                    inner join pedidoFinanceiro tab2 on(tab.idPedido = tab2.idPedido)
                    inner join cliente tab3 on(tab.idCliente = tab3.idCliente)
                    inner join endereco tab4 on(tab3.idCliente = tab4.idCliente)
                    left join fisica tab5 on(tab3.idCliente = tab5.idCliente)
                    left join rural tab6 on(tab3.idCliente = tab6.idCliente)
                    left join juridica tab7 on(tab3.idCliente = tab7.idCliente)
                    inner join pedidoItens itens on(tab.idPedido = itens.idPedido)
                                                                      where tab.idPedido= find and
                                                                             tab2.idFinalizadora=tipo
                                                                                     group by 1,2,3,4,5,6,8,9,10,11,12,13,14,15,17;
         end case;
end $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `conector_gera_nfItem`
--

DROP PROCEDURE IF EXISTS `conector_gera_nfItem`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='' */ $$
CREATE DEFINER=`master`@`localhost` PROCEDURE `conector_gera_nfItem`(
                                        in pedido double,
                                        in typeNota smallint
                                     )
begin
    DECLARE done INT DEFAULT FALSE;     declare VaridProduto  INT(11);
    declare i int default 0;
    declare VarNota double default null;
    declare VarvalorLiquido  DECIMAL(15,3) default 0;
    declare VarpriceOriginal  DECIMAL(15,3) default 0;
    declare VarpriceVenda  DECIMAL(15,3) default 0;
    declare VarpriceCusto  DECIMAL(15,3) default 0;
    declare Varestoque  DECIMAL(15,3) default 0;
    declare Vardata  DATE;
    declare Varpeso  DECIMAL(15,3) default 0;
    declare Varaliquota  DECIMAL(15,3) default 0;
    declare Varicms  DECIMAL(15,3) default 0;
    declare VarbaseCalculo  DECIMAL(15,3) default 0;
    declare Varreducao  DECIMAL(15,3) default 0;
    declare Varquantidade  DECIMAL(15,3) default 0;
    declare VaridunidadeMedida  INT;
    declare Varcfop  VARCHAR(10);
    declare VarcstIcms  CHAR(3);
    declare VarcstPis  char(3);
    declare VarvalorPis  DECIMAL(15,3) default 0;
    declare VarbasePis  DECIMAL(15,3) default 0;
    declare VarcstCofins  char(3);
    declare VarvalorCofins  DECIMAL(15,3) default 0;
    declare VarbaseCofins  DECIMAL(15,3) default 0;
    declare VarcstIpi  char(3);
    declare Varipi  DECIMAL(15,3) default 0;
    declare VaripiValor  DECIMAL(15,3) default 0;
    declare VarvalorIpi  DECIMAL(15,3) default 0;
    declare VarbaseIpi  DECIMAL(15,3) default 0;
    declare Vardesconto  DECIMAL(15,3) default 0;
    declare VardescontoValor  DECIMAL(15,3) default 0;
    declare Varacrescimo  DECIMAL(15,3) default 0;
    declare VaracrescimoValor  DECIMAL(15,3) default 0;
    declare VaraliquotaIcmsSt  DECIMAL(15,3) default 0;
    declare VarbaseCalculoIcmsSubstituicao  DECIMAL(15,3) default 0;
    declare VarvalorIcmsSubstituicao  DECIMAL(15,3) default 0;
    declare VarreducaoIcmsSt  DECIMAL(15,3) default 0;
    declare Varmargem  DECIMAL(15,3) default 0;
    declare VarvalorTotalProduto  DECIMAL(15,3) default 0;
    declare VarvalorTotalNota  DECIMAL(15,3) default 0;
    declare VarvalorTotalLiquido  DECIMAL(15,3) default 0;
    declare Varfornecedor  INT(11);
    declare VarCondicao  INT(11);
    declare Varidsetor  INT;
    declare VaridGenero  INT;
    declare VarValorSeguro decimal(15,3) default 0;
    declare Vartributacao  CHAR(2);
    declare Varfrete  DECIMAL(15,3) default 0;
    declare VarvalorFrete  DECIMAL(15,3) default 0;
    declare VartypeAliquota  CHAR(1);
    declare VarchaveEntrada  DOUBLE default 0;
    declare estado char(2);
    declare VarSt integer default 0;
    declare liberaItem smallint;



   select ifnull(cliente.uf,'MG') from pedido
                inner join cliente on(pedido.idCliente = cliente.idCLiente)
                                                        where pedido.idPedido=pedido
                                                                            into estado;

    select count(tab2.tipo)
        from pedidoItens tab
                 inner join produtoImpostos tab1 on (tab.idProduto = tab1.idProduto)
                 inner join aliquota tab2 on (tab1.cst = tab2.cst and tab1.tributacao = tab2.idAliquota)
                        where tab.idPedido=pedido
                                and tab2.tipo='s'
                                                into
                                                    VarSt;
                                                    if(VarSt IS NULL)then set VarSt=0; end if;

if((select count(*)
              from nf
                   inner join pedido on(nf.idPedido = pedido.idPedido)
                                                      where nf.idPedido=pedido) = 0)then

select
       tab.idLoja,
       tab.idCliente,
       tab.idparamentro,
       0 as "Transporte",
       if(tab1.flagParamentro='v' || tab1.flagParamentro='s' || tab1.flagParamentro='t' || tab1.flagParamentro='c' || tab1.flagParamentro='q' || tab1.flagParamentro='p' ||  tab1.flagParamentro='n',
            case when (tab2.uf = 'MG')Then if(VarSt = 0, tab1.cfop1, tab1.cfop3)  else tab1.cfop3 end,
            case when (tab2.uf = 'MG')Then if(VarSt = 0, tab1.cfop2, tab1.cfop4)  else tab1.cfop4 end) as CFOP,
       tab.idFuncionario,
       tab.usuario,
       tab.idPedido,
       tab2.uf,
       tab1.idTable_Codigo,
       tab1.modNotaFiscal,
       if(tab1.IdSituacaoFiscal = "" || tab1.IdSituacaoFiscal is null, '00', tab1.IdSituacaoFiscal) as Situacao,
       if(tab1.flagParamentro='v' || tab1.flagParamentro='s' || tab1.flagParamentro='t' || tab1.flagParamentro='c' || tab1.flagParamentro='q' || tab1.flagParamentro='p' ||  tab1.flagParamentro='n', 1, 2),
       ifnull(tab4.idFinalizadora,"0"),ifnull(tab.condicao,0)
        from pedido tab
             inner join paramentro_faturamento tab1 on (tab.idparamentro = tab1.idparamentro)
             inner join cliente tab2 on(tab.idCliente = tab2.idCliente)
             inner join loja tab3 on(tab.idLoja = tab3.idLoja)
             inner join metodo tab4 on(tab.idMetodo = tab4.idMetodo)
                                                          where
                                                                tab.idPedido=pedido
                                                                        into
                                                                        @loja,
                                                                        @Cliente,
                                                                        @Operacao,
                                                                        @Transporte,
                                                                        @CFOP,
                                                                        @Funcionario,
                                                                        @Usuario,
                                                                        @Reserva,
                                                                        @UFOrigem,
                                                                        @Table_Codigo,
                                                                        @NotaFiscal,
                                                                        @SituacaoFiscal,
                                                                        @typeNf,
                                                                        @Pgto, @condicao;
  INSERT INTO `conector`.`nf`
                  (
                  `loja`,
                  `idcliente`,
                  `idparamentro`,
                  `idtransportadora`,
                  `cfop`,
                  `idFuncionario`,
                  `idusuario`,
                  `idpedido`,
                  `nr_nota`,
                  `serie`,
                  `emissao`,
                  `saida`,
                  `alteracao`,
                  `hora`,
                  `uf`,
                  `idTable_Codigo`,
                  `modNotaFiscal`,
                  `idSituacaoFiscal`,
                  `emitiNfe`,
                  `typenf`,
                  condPgto
                )
                   VALUES
                (
                   @loja,
                   @Cliente,
                   @Operacao,
                   @Transporte,
                   @CFOP,
                   @Funcionario,
                   @Usuario,
                   @Reserva,
                   '000000',
                   "",
                   now(),
                   now(),
                   now(),
                   now(),
                   @UFOrigem,
                   @Table_Codigo,
                   @NotaFiscal,
                   @SituacaoFiscal,
                   "0",
                   @typeNf,
                   if(@Pgto > 0, @Pgto,if(@condicao is not null && @condicao > 0, @condicao,0)));

    set VarNota = (select last_insert_id());
    set liberaItem = (select last_insert_id());

  else

    set VarNota = (select nf.nf
                            from nf
                                 inner join pedido on(nf.idPedido = pedido.idPedido)
                                                           where nf.idPedido=pedido);
    set liberaItem = null;

  end if;

if(liberaItem is not null)then
set @seq=1;
    begin
             DECLARE basicFonte CURSOR for select
                                                tab1.`idProduto`,
                                                coalesce(round((tab1.`priceLiquido` / tab1.quantidade),3),0) as 'Valor Liquido',
                                                tab5.priceFull,
                                                tab1.price,
                                                tab5.priceFull,
                                                tab6.`quantidade`,
                                                now(),
                                                0,
                                                tab7.aliquota,
                                                round((((tab1.`price` * (1- (tab7.reducao/100))) * tab7.aliquota)/100),3) as ICMS,
                                                round((tab1.`price` * (1- (tab7.reducao/100))),3) AS 'Base Calculo',
                                                tab7.reducao,
                                                tab1.`quantidade`,
                                                tab1.`idunidadeMedida`,

                                                            CASE tab7.tipo
                                                                           when 's' then
                                                                        IF(typeNota=1 && estado='MG', '5403',if(typeNota=2 && estado='MG','1403',if(typeNota=2 && estado != 'MG','2304','6403')))
                                                                           else
                                                                        IF(typeNota=1 && estado='MG', tab2.cfop3,if(typeNota=2 && estado='MG',tab2.cfop1,if(typeNota=2 && estado != 'MG',tab2.cfop2,tab2.cfop4)))
                                                                           END,
                                                tab4.cst,
                                                tab9.cstPisSaida,
                                                if(tab9.aliquotaDebitoPis > 0, tab5.priceFull * ((tab9.aliquotaDebitoPis/100)),0.000) as "Valor Pis",
                                                if(tab8.creditoPis = 's',tab5.priceFull, 0.000),
                                                tab9.cstCofinsSaida,
                                                if(tab9.aliquotaDebitoCofins > 0, tab5.priceFull * ((tab9.aliquotaDebitoCofins/100)),0.000) as "Valor Cofins",
                                                if(tab8.creditoCofins = 's',tab5.priceFull, 0.000),
                                                "053",
                                                tab4.ipi,
                                                if(tab4.ipi > 0,tab1.price * ( (tab4.ipi/100)),0.000),
                                                if(tab4.ipi > 0,tab5.priceFull * ( (tab4.ipi/100)),0.000),
                                                if(tab4.ipi > 0,tab5.priceFull,0.000),
                                                round(((tab1.valorDiscount/(tab1.price*tab1.quantidade))*100),3) as Discount,
                                                tab1.valorDiscount,
                                                if((tab1.priceLiquido-tab1.priceFull) <= 0,0.000, round((((tab1.priceLiquido-tab1.priceFull)/tab1.priceFull)*100),3)) as 'Acrescimo %',
                                                if((tab1.priceLiquido-tab1.priceFull) <= 0,0.000, (tab1.priceLiquido-tab1.priceFull)) as 'Acrescimo Valor',
                                                if(tab10.typeCst = 's',if(tab10.calcBc=1,sped.aliquotaInterna,0.000),0.000) as StAliquota,
                                                round(if(tab10.typeCst = 's',if(tab10.calcBc=1, (((tab1.`priceFull`)*( 1 - (tab7.reducao/100)))*(1 + (sped.mvaAjustada/100))),0.000),0.000),3) as 'Base Calculo',
                                                round(if(tab10.typeCst = 's',if(tab10.calcBc=1,(((((tab1.`priceFull`)*( 1 - (tab7.reducao/100)))*(1 + (sped.mvaAjustada/100))) * sped.aliquotaInterna)/100)
                                                      - round((((tab1.`priceLiquido` * (1- (tab7.reducao/100))) * tab7.aliquota)/100),3),0.000),0.000),3) as IcmsSt,
                                                round(if(tab10.typeCst = 's',if(tab10.calcRed=1,tab7.reducao,0.000),0.000),3) as ReducaoSt,
                                                0.000,
                                                (tab1.price*tab1.`quantidade`),
                                                ((tab1.price*tab1.`quantidade`)+tab1.valorDiscount),
                                                (tab1.`priceLiquido`*tab1.`quantidade`),
                                                tab3.idFornecedor,
                                                tab3.idSetor,
                                                tab4.tributacao,
                                                0.000,
                                                0.000,
                                                ifnull(tab7.tipo,"0"),
                                                null,
                                                tab4.idGenero
                                                            from pedido tab
                                                                            inner join pedidoItens tab1 on(tab.idPedido = tab1.idPedido)
                                                                            inner join paramentro_faturamento tab2 on(tab.idParamentro = tab2.idParamentro)
                                                                            inner join produto tab3 on(tab3.idProduto = tab1.idProduto)
                                                                            inner join produtoImpostos tab4 on(tab1.idProduto = tab4.idProduto  and tab.idLoja = tab4.idLoja)
                                                                            inner join produtoPrice tab5 on(tab1.IdProduto = tab5.IdProduto  and tab.idLoja = tab5.idLoja)
                                                                            inner join produtoEstoques tab6 on(tab1.IdProduto = tab6.idProduto and tab.idLoja = tab6.idLoja)
                                                                            inner join aliquota tab7 on(tab4.tributacao = tab7.idAliquota)
                                                                            inner join pisCofins tab8 on(tab4.idPisCofins = tab8.idPisCofins)
                                                                            left join pisCofinsAnexo tab9 on(tab4.idPisCofins = tab9.idPisCofins and
                                                                                                              tab9.vigencia = (select max(vigencia)
                                                                                                                                    from pisCofinsAnexo
                                                                                                                                        where idPisCofins=tab8.idPisCofins))
                                                                            inner join cst tab10 on(tab4.cst = tab10.idCst)
                                                                            inner join spedNcm sped on(tab4.spedNcm = sped.idSpedNcm)

                                                                            where tab.idPedido=pedido;

                          DECLARE CONTINUE HANDLER FOR NOT FOUND SET done = TRUE;

    open basicFonte;
    read_loop: LOOP
                          fetch basicFonte into
                                                VaridProduto,
                                                VarvalorLiquido,
                                                VarpriceOriginal,
                                                VarpriceVenda,
                                                VarpriceCusto,
                                                Varestoque,
                                                Vardata,
                                                Varpeso,
                                                Varaliquota,
                                                Varicms,
                                                VarbaseCalculo,
                                                Varreducao,
                                                Varquantidade,
                                                VaridunidadeMedida,
                                                Varcfop,
                                                VarcstIcms,
                                                VarcstPis,
                                                VarvalorPis,
                                                VarbasePis,
                                                VarcstCofins,
                                                VarvalorCofins,
                                                VarbaseCofins,
                                                VarcstIpi,
                                                Varipi,
                                                VaripiValor,
                                                VarvalorIpi,
                                                VarbaseIpi,
                                                Vardesconto,
                                                VardescontoValor,
                                                Varacrescimo,
                                                VaracrescimoValor,
                                                VaraliquotaIcmsSt,
                                                VarbaseCalculoIcmsSubstituicao,
                                                VarvalorIcmsSubstituicao,
                                                VarreducaoIcmsSt,
                                                Varmargem,
                                                VarvalorTotalProduto,
                                                VarvalorTotalNota,
                                                VarvalorTotalLiquido,
                                                Varfornecedor,
                                                Varidsetor,
                                                Vartributacao,
                                                Varfrete,
                                                VarvalorFrete,
                                                VartypeAliquota,
                                                VarchaveEntrada,
                                                VaridGenero;

                    IF done THEN
                        LEAVE read_loop;
                    END IF;


                                            INSERT INTO `conector`.`nfitem`
                                            (
                                                `idnf`,
                                                `idProduto`,
                                                `valorLiquido`,
                                                `priceOriginal`,
                                                `priceVenda`,
                                                `priceCusto`,
                                                `estoque`,
                                                `data`,
                                                `peso`,
                                                `aliquota`,
                                                `icms`,
                                                `baseCalculo`,
                                                `reducao`,
                                                `quantidade`,
                                                `idunidadeMedida`,
                                                `cfop`,
                                                `cstIcms`,
                                                `cstPis`,
                                                `valorPis`,
                                                `basePis`,
                                                `cstCofins`,
                                                `valorCofins`,
                                                `baseCofins`,
                                                `cstIpi`,
                                                `ipi`,
                                                `ipiValor`,
                                                `valorIpi`,
                                                `baseIpi`,
                                                `desconto`,
                                                `descontoValor`,
                                                `acrescimo`,
                                                `acrescimoValor`,
                                                `aliquotaIcmsSt`,
                                                `baseCalculoIcmsSubstituicao`,
                                                `valorIcmsSubstituicao`,
                                                `reducaoIcmsSt`,
                                                `margem`,
                                                `valorTotalProduto`,
                                                `valorTotalNota`,
                                                `valorTotalLiquido`,
                                                `fornecedor`,
                                                `idsetor`,
                                                `tributacao`,
                                                `frete`,
                                                `valorFrete`,
                                                `typeAliquota`,
                                                `chaveEntrada`,
                                                 idGenero,
                                                 seguro, sequencia
                                            )
                                            VALUES
                                            (
                                                VarNota,
                                                VaridProduto,
                                                VarvalorLiquido,
                                                VarpriceOriginal,
                                                VarpriceVenda,
                                                VarpriceCusto,
                                                Varestoque,
                                                Vardata,
                                                Varpeso,
                                                Varaliquota,
                                                if(VarcstIcms='060','0',Varicms),
                                                if(VarcstIcms='060','0',VarbaseCalculo),
                                                if(VarcstIcms='060','0',Varreducao),
                                                Varquantidade,
                                                VaridunidadeMedida,
                                                Varcfop,
                                                VarcstIcms,
                                                ifnull(VarcstPis,'049'),
                                                VarvalorPis,
                                                VarbasePis,
                                                ifnull(VarcstCofins,'049'),
                                                VarvalorCofins,
                                                VarbaseCofins,
                                                ifnull(VarcstIpi,'050'),
                                                Varipi,
                                                VaripiValor,
                                                VarvalorIpi,
                                                VarbaseIpi,
                                                ifnull(Vardesconto,'0'),
                                                ifnull(VardescontoValor,'0'),
                                                ifnull(Varacrescimo,'0'),
                                                ifnull(VaracrescimoValor,'0'),
                                                if(VarcstIcms='060',0,VaraliquotaIcmsSt),
                                                if(VarcstIcms='060',0,VarbaseCalculoIcmsSubstituicao),
                                                if(VarcstIcms='060',0,VarvalorIcmsSubstituicao),
                                                VarreducaoIcmsSt,
                                                Varmargem,
                                                VarvalorTotalProduto,
                                                VarvalorTotalNota,
                                                VarvalorTotalLiquido,
                                                Varfornecedor,
                                                Varidsetor,
                                                Vartributacao,
                                                Varfrete,
                                                VarvalorFrete,
                                                VartypeAliquota,
                                                VarchaveEntrada,
                                                VaridGenero,
                                                0, @seq
                                            );
                                            


            end loop;
        close basicFonte;
    end;
end if;
  select VarNota;
end $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `conector_gera_nfItemOld`
--

DROP PROCEDURE IF EXISTS `conector_gera_nfItemOld`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='' */ $$
CREATE DEFINER=`master`@`localhost` PROCEDURE `conector_gera_nfItemOld`(
                                        in nota double,
                                        in pedido double,
                                        in typeNota smallint
                                     )
begin
    DECLARE done INT DEFAULT FALSE; 
    declare VaridProduto  INT(11);
    declare i int default 0;
    declare VarvalorLiquido  DECIMAL(15,3) default 0;
    declare VarpriceOriginal  DECIMAL(15,3) default 0;
    declare VarpriceVenda  DECIMAL(15,3) default 0;
    declare VarpriceCusto  DECIMAL(15,3) default 0;
    declare Varestoque  DECIMAL(15,3) default 0;
    declare Vardata  DATE;
    declare Varpeso  DECIMAL(15,3) default 0;
    declare Varaliquota  DECIMAL(15,3) default 0;
    declare Varicms  DECIMAL(15,3) default 0;
    declare VarbaseCalculo  DECIMAL(15,3) default 0;
    declare Varreducao  DECIMAL(15,3) default 0;
    declare Varquantidade  DECIMAL(15,3) default 0;
    declare VaridunidadeMedida  INT;
    declare Varcfop  VARCHAR(10);
    declare VarcstIcms  CHAR(3);
    declare VarcstPis  char(3);
    declare VarvalorPis  DECIMAL(15,3) default 0;
    declare VarbasePis  DECIMAL(15,3) default 0;
    declare VarcstCofins  char(3);
    declare VarvalorCofins  DECIMAL(15,3) default 0;
    declare VarbaseCofins  DECIMAL(15,3) default 0;
    declare VarcstIpi  char(3);
    declare Varipi  DECIMAL(15,3) default 0;
    declare VaripiValor  DECIMAL(15,3) default 0;
    declare VarvalorIpi  DECIMAL(15,3) default 0;
    declare VarbaseIpi  DECIMAL(15,3) default 0;
    declare Vardesconto  DECIMAL(15,3) default 0;
    declare VardescontoValor  DECIMAL(15,3) default 0;
    declare Varacrescimo  DECIMAL(15,3) default 0;
    declare VaracrescimoValor  DECIMAL(15,3) default 0;
    declare VaraliquotaIcmsSt  DECIMAL(15,3) default 0;
    declare VarbaseCalculoIcmsSubstituicao  DECIMAL(15,3) default 0;
    declare VarvalorIcmsSubstituicao  DECIMAL(15,3) default 0;
    declare VarreducaoIcmsSt  DECIMAL(15,3) default 0;
    declare Varmargem  DECIMAL(15,3) default 0;
    declare VarvalorTotalProduto  DECIMAL(15,3) default 0;
    declare VarvalorTotalNota  DECIMAL(15,3) default 0;
    declare VarvalorTotalLiquido  DECIMAL(15,3) default 0;
    declare Varfornecedor  INT(11);
    declare Varidsetor  INT;
    declare Vartributacao  CHAR(2);
    declare Varfrete  DECIMAL(15,3) default 0;
    declare VarvalorFrete  DECIMAL(15,3) default 0;
    declare VartypeAliquota  CHAR(1);
    declare VarchaveEntrada  DOUBLE default 0;
    declare estado char(2);



    select ifnull(cliente.uf,'MG') from pedido
                inner join cliente on(pedido.idCliente = cliente.idCLiente)
                                                        where pedido.idPedido=pedido
                                                                            into estado;
    begin
             DECLARE basicFonte CURSOR for select
                                                tab1.`idProduto`,
                                                round((tab1.`priceLiquido` / tab1.quantidade),3) as 'Valor Liquido',
                                                tab1.`price`,
                                                round((tab1.`priceLiquido` / tab1.quantidade),3) as 'Preco Venda',
                                                tab5.priceFull,
                                                tab6.`quantidade`,
                                                now(),
                                                0,
                                                tab7.aliquota,
                                                round((((tab1.`priceLiquido` * (1- (tab7.reducao/100))) * tab7.aliquota)/100),3) as ICMS,
                                                round((tab1.`priceLiquido` * (1- (tab7.reducao/100))),3) AS 'Base Calculo',
                                                tab7.reducao,
                                                tab1.`quantidade`,
                                                tab1.`idunidadeMedida`,
                                                if(typeNota=1,
                                                            case when (estado = 'MG')Then tab2.cfop1  else tab2.cfop3 end,
                                                            case when (estado = 'MG')Then tab2.cfop2  else tab2.cfop4 end),
                                                tab4.cst,
                                                tab9.cstPisSaida,
                                                if(tab9.aliquotaDebitoPis > 0, tab5.priceFull * (1- (tab9.aliquotaDebitoPis/100)),0.000) as "Valor Pis",
                                                tab5.priceFull,
                                                tab9.cstCofinsSaida,
                                                if(tab9.aliquotaDebitoCofins > 0, tab5.priceFull * (1- (tab9.aliquotaDebitoCofins/100)),0.000) as "Valor Cofins",
                                                tab5.priceFull,
                                                "053",
                                                tab4.ipi,
                                                tab1.price * (1- (tab4.ipi/100)),
                                                tab5.priceFull * (1- (tab4.ipi/100)),
                                                tab5.priceFull,
                                                round(((tab1.valorDiscount/tab1.price)*100),3) as Discount,
                                                tab1.valorDiscount,
                                                if(((tab1.priceLiquido * tab1.quantidade)-tab1.priceFull) <= 0,0.000, round(((((tab1.priceLiquido * tab1.quantidade)-tab1.priceFull)/tab1.priceFull)*100),3)) as 'Acrescimo %',
                                                if(((tab1.priceLiquido * tab1.quantidade)-tab1.priceFull) <= 0,0.000, ((tab1.priceLiquido * tab1.quantidade)-tab1.priceFull)) as 'Acrescimo Valor',
                                                if(tab10.typeCst = 's',if(tab10.calcBc=1,sped.aliquotaInterna,0.000),0.000) as StAliquota,
                                                round(if(tab10.typeCst = 's',if(tab10.calcBc=1, (((tab5.priceFull)*( 1 - (tab7.reducao/100)))*(1 + (sped.mvaAjustada/100))),0.000),0.000),3) as 'Base Calculo',
                                                round(if(tab10.typeCst = 's',if(tab10.calcBc=1,(((((tab5.priceFull)*( 1 - (tab7.reducao/100)))*(1 + (sped.mvaAjustada/100))) * sped.aliquotaInterna)/100),0.000),0.000),3) as IcmsSt,
                                                round(if(tab10.typeCst = 's',if(tab10.calcRed=1,tab7.reducao,0.000),0.000),3) as ReducaoSt,
                                                0.000,
                                                tab1.priceFull,
                                                tab1.`priceLiquido`,
                                                tab1.`priceLiquido`,
                                                tab3.idFornecedor,
                                                tab3.idSetor,
                                                tab4.tributacao,
                                                0.000,
                                                0.000,
                                                tab7.tipo,
                                                ""
                                                            from pedido tab
                                                                            inner join pedidoItens tab1 on(tab.idPedido = tab1.idPedido)
                                                                            inner join paramentro_faturamento tab2 on(tab.idParamentro = tab2.idParamentro)
                                                                            inner join produto tab3 on(tab3.idProduto = tab1.idProduto)
                                                                            inner join produtoImpostos tab4 on(tab1.idProduto = tab4.idProduto)
                                                                            inner join produtoPrice tab5 on(tab1.IdProduto = tab5.IdProduto)
                                                                            inner join produtoEstoques tab6 on(tab1.IdProduto = tab6.idProduto)
                                                                            inner join aliquota tab7 on(tab4.tributacao = tab7.idAliquota)
                                                                            inner join pisCofins tab8 on(tab4.idPisCofins = tab8.idPisCofins)
                                                                            inner join pisCofinsAnexo tab9 on(tab4.idPisCofins = tab9.idPisCofins and
                                                                                                              tab9.vigencia = (select max(vigencia)
                                                                                                                                    from pisCofinsAnexo
                                                                                                                                        where idPisCofins=tab8.idPisCofins))
                                                                            inner join cst tab10 on(tab4.cst = tab10.idCst)
                                                                            inner join spedNcm sped on(tab4.spedNcm = sped.idSpedNcm)

                                                                            where tab.idPedido=pedido;
                          DECLARE CONTINUE HANDLER FOR NOT FOUND SET done = TRUE;
    open basicFonte;

    read_loop: LOOP
                          fetch basicFonte into
                                                VaridProduto,
                                                VarvalorLiquido,
                                                VarpriceOriginal,
                                                VarpriceVenda,
                                                VarpriceCusto,
                                                Varestoque,
                                                Vardata,
                                                Varpeso,
                                                Varaliquota,
                                                Varicms,
                                                VarbaseCalculo,
                                                Varreducao,
                                                Varquantidade,
                                                VaridunidadeMedida,
                                                Varcfop,
                                                VarcstIcms,
                                                VarcstPis,
                                                VarvalorPis,
                                                VarbasePis,
                                                VarcstCofins,
                                                VarvalorCofins,
                                                VarbaseCofins,
                                                VarcstIpi,
                                                Varipi,
                                                VaripiValor,
                                                VarvalorIpi,
                                                VarbaseIpi,
                                                Vardesconto,
                                                VardescontoValor,
                                                Varacrescimo,
                                                VaracrescimoValor,
                                                VaraliquotaIcmsSt,
                                                VarbaseCalculoIcmsSubstituicao,
                                                VarvalorIcmsSubstituicao,
                                                VarreducaoIcmsSt,
                                                Varmargem,
                                                VarvalorTotalProduto,
                                                VarvalorTotalNota,
                                                VarvalorTotalLiquido,
                                                Varfornecedor,
                                                Varidsetor,
                                                Vartributacao,
                                                Varfrete,
                                                VarvalorFrete,
                                                VartypeAliquota,
                                                VarchaveEntrada;


                    IF done THEN
                        LEAVE read_loop;
                    END IF;

                                            INSERT INTO `conector`.`nfitem`
                                            (
                                                `idnf`,
                                                `idProduto`,
                                                `valorLiquido`,
                                                `priceOriginal`,
                                                `priceVenda`,
                                                `priceCusto`,
                                                `estoque`,
                                                `data`,
                                                `peso`,
                                                `aliquota`,
                                                `icms`,
                                                `baseCalculo`,
                                                `reducao`,
                                                `quantidade`,
                                                `idunidadeMedida`,
                                                `cfop`,
                                                `cstIcms`,
                                                `cstPis`,
                                                `valorPis`,
                                                `basePis`,
                                                `cstCofins`,
                                                `valorCofins`,
                                                `baseCofins`,
                                                `cstIpi`,
                                                `ipi`,
                                                `ipiValor`,
                                                `valorIpi`,
                                                `baseIpi`,
                                                `desconto`,
                                                `descontoValor`,
                                                `acrescimo`,
                                                `acrescimoValor`,
                                                `aliquotaIcmsSt`,
                                                `baseCalculoIcmsSubstituicao`,
                                                `valorIcmsSubstituicao`,
                                                `reducaoIcmsSt`,
                                                `margem`,
                                                `valorTotalProduto`,
                                                `valorTotalNota`,
                                                `valorTotalLiquido`,
                                                `fornecedor`,
                                                `idsetor`,
                                                `tributacao`,
                                                `frete`,
                                                `valorFrete`,
                                                `typeAliquota`,
                                                `chaveEntrada`
                                            )
                                            VALUES
                                            (
                                                nota,
                                                VaridProduto,
                                                VarvalorLiquido,
                                                VarpriceOriginal,
                                                VarpriceVenda,
                                                VarpriceCusto,
                                                Varestoque,
                                                Vardata,
                                                Varpeso,
                                                Varaliquota,
                                                Varicms,
                                                VarbaseCalculo,
                                                Varreducao,
                                                Varquantidade,
                                                VaridunidadeMedida,
                                                Varcfop,
                                                VarcstIcms,
                                                VarcstPis,
                                                VarvalorPis,
                                                VarbasePis,
                                                VarcstCofins,
                                                VarvalorCofins,
                                                VarbaseCofins,
                                                VarcstIpi,
                                                Varipi,
                                                VaripiValor,
                                                VarvalorIpi,
                                                VarbaseIpi,
                                                Vardesconto,
                                                VardescontoValor,
                                                Varacrescimo,
                                                VaracrescimoValor,
                                                VaraliquotaIcmsSt,
                                                VarbaseCalculoIcmsSubstituicao,
                                                VarvalorIcmsSubstituicao,
                                                VarreducaoIcmsSt,
                                                Varmargem,
                                                VarvalorTotalProduto,
                                                VarvalorTotalNota,
                                                VarvalorTotalLiquido,
                                                Varfornecedor,
                                                Varidsetor,
                                                Vartributacao,
                                                Varfrete,
                                                VarvalorFrete,
                                                VartypeAliquota,
                                                VarchaveEntrada
                                            );

            end loop;
        close basicFonte;
    end;
end $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `conector_gera_parcela`
--

DROP PROCEDURE IF EXISTS `conector_gera_parcela`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='' */ $$
CREATE DEFINER=`master`@`localhost` PROCEDURE `conector_gera_parcela`(
  `inc_idcrediario` DOUBLE,
  `inc_idloja` INT,
  `inc_funcionario` INT,
   inc_parcelamento int,
  `inc_status` CHAR(1),
   inc_valorTotal decimal)
begin
        declare v0 int default 1;
        declare v1 int default 30;
        declare valorParcela decimal(15,3) default 0;
        declare valorTotal decimal(15,3) default 0;
        declare valorLiquido decimal(15,3) default 0;
        declare valorEncargos decimal(15,3) default 0;
        declare ok int default 0;
        declare pago decimal default 0;
        
        set pago = (select sum(valorPago) from parcela where idCrediario=`inc_idcrediario`);
        set valorParcela = inc_valorTotal/inc_parcelamento;

if(pago > 0.000)then
    set ok = 1;
        else    
            delete from parcela where idCrediario=`inc_idcrediario`;
end if;

if(ok = 0)then
start Transaction;
    while (v0 <= inc_parcelamento) do
          insert into parcela(
                             `idcrediario`,
                             `idloja`,
                             `nr_parcela`,
                             `idterminal`,
                             `funcionario`,
                             `vencimento`,
                             `status`,
                             `observacao`,
                             `valorFinanceiro`,
                             `valorPago`,
                             `prazo`,
                             `acrescimo`,
                             `desconto`)values(
                                           `inc_idcrediario`,
                                            `inc_idloja`,
                                             v0,
                                            "1",                                             `inc_funcionario`,
                                            ADDDATE(now(), v1),
                                            `inc_status`,
                                            "",
                                            valorParcela,
                                            0.000,
                                            abs(DATEDIFF(NOW(), ADDDATE(now(), v1))),
                                            0.000,
                                            0.000);
                SET v0 = v0 + 1;                
		            SET v1 = v1 + 30;
                    
            end while;
                    set valorTotal = inc_valorTotal;
                    set valorLiquido = (select sum(total) from crediario where idCrediario=`inc_idcrediario`);
                    if(valorTotal > valorLiquido)then
                        set valorEncargos = valorTotal - valorLiquido;
                            else set valorEncargos = 0.000;
                    end if;
                    
                        update crediario set encargos=valorEncargos where idCrediario=`inc_idcrediario`;
                    
        commit;                                                         
   end if;
  end $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `conector_gera_parcelaCartao`
--

DROP PROCEDURE IF EXISTS `conector_gera_parcelaCartao`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='' */ $$
CREATE DEFINER=`master`@`localhost` PROCEDURE `conector_gera_parcelaCartao`(
    `find` varchar(45),
     pontoPartida numeric(15,2),
    `inc_idAdministradora` INT,
    `inc_idloja` INT,
    `inc_terminal` INT(11),
     inc_networkCard int,
     inc_idConectCard int,
     inc_funcionario int)
begin
        declare v0 int default 0;
        declare valida int default 1;
        declare valueFull numeric(15,2) default 0;
        declare valueRestante numeric(15,2) default 0;
        declare valueGerado numeric(15,2) default 0;
                select final
                    from pedido
                             where idPedido=find
                                            into v0;
    select
         round(sum(referencia+encargos),2) from pedidoFinanceiro
                                                    where idPedido=find
                                                                  into valueFull;
                                                                  if(valueFull is null)then set valueFull=0; end if;
    select round(sum(ifnull(valor,0)),2)
                from cartao
                            where pedido=find
                                        into valueGerado;
                                             if(valueGerado is null)then set valueGerado=0; end if;

                                             set valueRestante = valueFull - valueGerado;
                                             if(valueRestante is null)then set valueRestante=0; end if;

  if(pontoPartida <=  valueRestante)then

    if((v0 = 0 or v0 = 2 or v0 = 3 or v0 =1))then
    start Transaction;
    insert into cartao(
                     `idAdministradora`,
                     `idloja`,
                     `inclusao`,
                     `alteracao`,
                     `cupom` ,
                     `pedido`,
                     `terminal` ,
                     `emissao`,
                     `vencimento`,
                     `pagamento`,
                     `status`,
                     `observacao`,
                     `parcela`,
                     `qttyParcela`,
                     `typeCartao`,
                     `bandeira`,
                     `valor`, prazo, networkCard, origem, batimento,idConectCard, idFuncionario)select
                                    `inc_idAdministradora`,
                                    `inc_idloja`,
                                    now(),
                                    null,
                                    0,
                                    tab.idPedido,
                                    `inc_terminal` ,
                                    now(),
                                    tab1.vencimento,
                                    tab1.baixa,
                                    tab1.statusParcela,
                                    concat("Reserva: N.o ",tab.idPedido),
                                    tab1.idParcela,
                                    tab.numeroParcelas,
                                    tab1.typeCartao,
                                    null,
                                    (pontoPartida/tab.numeroParcelas),
                                    abs(DATEDIFF(NOW(), tab1.vencimento)),
                                    inc_networkCard, 'f', "n",inc_idConectCard, inc_funcionario

                                                                    from conector.pedidocartao tab
                                                                                inner join conector.pedidoparcelacartao tab1 on(tab.idPedido = tab1.idPedido and
                                                                                                                                tab.idLoja = tab.idLoja)
                                                                                                                                        where tab.idPedido=find;
    commit;
        set valida = 0;
        select valida;
    else
        select valida;
    end if;
    else
        select valida;
  end if;
  end $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `conector_gera_parcelaContrato`
--

DROP PROCEDURE IF EXISTS `conector_gera_parcelaContrato`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='' */ $$
CREATE DEFINER=`master`@`localhost` PROCEDURE `conector_gera_parcelaContrato`(
  `find` DOUBLE,
  `inc_idcrediario` DOUBLE,
  `inc_idterminal` INT,
  `inc_funcionario` INT,
  `inc_status` CHAR(1))
begin
        declare v0 int default 0;
        declare v1 int default 0;
        declare v2 int default 0;
        declare valida int default 0;
        declare dataEntrada date default now();
        declare valueEntrada numeric(15,3);
        declare Varfinalizadora int;

        select idFinalizadora
                          from pedidoFinanceiro
                                      where idPedido=find and idFinalizadora != 3 into @finalizadora;
                                      if(@finalizadora is null)then set Varfinalizadora=-1; end if;
        select parcelamento
                    from crediario
                          where idCrediario=`inc_idcrediario` into @parcela;

        select final
                    from pedido
                             where idPedido=find
                                            into v0;
        select count(*) from
                            pedidoFinanceiro where idPedido=find
                                                        into v1;
        select idParamentro
                    from pedido
                             where idPedido=find
                                             into v2;
        SELECT flagNota
                    FROM paramentro_faturamento
                             where idParamentro=v2
                                             into @nota;

        select entrada from
                            pedidoFinanceiro where idPedido=find  and idFinalizadora=3
                                                        into valueEntrada;
                                                        if(valueEntrada is null)then set valueEntrada=0; end if;
if((v0 = 1 || (v0 = 0 && @nota = 'N')) || v1 > 1)then
start Transaction;
      if(Varfinalizadora = 3)then
          insert into parcela(
                             `idcrediario`,
                             `idloja`,
                             `nr_parcela`,
                             `idterminal`,
                             `funcionario`,
                             `vencimento`,
                             `status`,
                             `observacao`,
                             `valorFinanceiro`,
                             `valorPago`,
                             `prazo`,
                             `acrescimo`,
                             `desconto`)(select
                                           `inc_idcrediario`,
                                            idLoja,
                                            idParcela as Nr_Parcelas,
                                            `inc_idterminal`,
                                            `inc_funcionario`,
                                            vencimento,
                                            `inc_status`,
                                            "", 
                                            valor,
                                            0.000,
                                            abs(DATEDIFF(NOW(), vencimento)),
                                            0.000,
                                            0.000
                                                 from
                                                         pedidoParcelaCrediario where idPedido=find and idParcela != 0);
      else
          insert into parcela(
                             `idcrediario`,
                             `idloja`,
                             `nr_parcela`,
                             `idterminal`,
                             `funcionario`,
                             `vencimento`,
                             `status`,
                             `observacao`,
                             `valorFinanceiro`,
                             `valorPago`,
                             `prazo`,
                             `acrescimo`,
                             `desconto`)(select
                                           `inc_idcrediario`,
                                            idLoja,
                                            idParcela as Nr_Parcelas,
                                            `inc_idterminal`,
                                            `inc_funcionario`,
                                            vencimento,
                                            `inc_status`,
                                            "", 
                                            valor,
                                            0.000,
                                            abs(DATEDIFF(NOW(), vencimento)),
                                            0.000,
                                            0.000
                                                 from
                                                         pedidoParcelaCrediario where idPedido=find);
      end if;
        commit;
    end if;

select
        count(*) as totalParcelas
                                from
                                    pedidoParcelaCrediario where idPedido=find
                                                                    into valida;

    if(valida > 0)then
                        select
                                idloja
                                    from parcela
                                            where idCrediario=`inc_idcrediario`
                                                                group by 1 into @Store;

        
        if(Varfinalizadora != 3 && VarFinalizadora != -1)then
        if((valueEntrada > 0 && valueEntrada is not null) && (@parcela > 0))then
        SELECT idLoja FROM crediario where idCrediario=`inc_idcrediario` into @Store;
        select entrada
                    from pedido
                            where idPedido = find
                                                    into dataEntrada;
                                                    if(dataEntrada is null)then set dataEntrada=now(); end if;


                  insert into parcela(
                             `idcrediario`,
                             `idloja`,
                             `nr_parcela`,
                             `idterminal`,
                             `funcionario`,
                             `vencimento`,
                             `status`,
                             `observacao`,
                             `valorFinanceiro`,
                             `valorPago`,
                             `prazo`,
                             `acrescimo`,
                             `desconto`)values
                                          (
                                           `inc_idcrediario`,
                                            @Store,
                                            0,
                                            `inc_idterminal`,
                                            `inc_funcionario`,
                                            dataEntrada,
                                            `inc_status`,
                                            "ENTRADA",
                                            valueEntrada,
                                            0.000,
                                            abs(DATEDIFF(NOW(), dataEntrada)),
                                            0.000,
                                            0.000);

        end if;
      end if;
        


    end if;
  end $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `conector_gera_parcelaConvenio`
--

DROP PROCEDURE IF EXISTS `conector_gera_parcelaConvenio`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='' */ $$
CREATE DEFINER=`master`@`localhost` PROCEDURE `conector_gera_parcelaConvenio`(
   find varchar(45),
   find_empresa int,
  `inc_idfuncionario` Int,
  `inc_terminal` INT,
   pontoPartida numeric(15,2),
   obs varchar(200))
begin

        declare v0 int default 0;
        declare valida int default 1;
        declare valueFull numeric(15,2) default 0;
        declare valueRestante numeric(15,2) default 0;
        declare valueGerado numeric(15,2) default 0;

select count(*)
            from convenioMovimento
                                where pedido=find
                                                into @nr_registros;
                                                if(@nr_registros is null)then set @nr_registros = 0; end if;
select numeroParcelas
                    from pedidoFinanceiro
                                where idPedido=find  and idFinalizadora=4
                                                                into @nr_parc;
                                                                if(@nr_parc is null)then set @nr_parc = 0; end if;
if(@nr_parc = @nr_registros)then
    delete from convenioMovimento where pedido=find;
end if;

   select final
                    from pedido
                             where idPedido=find
                                            into v0;
    select
         round(sum(referencia+encargos),2) from pedidoFinanceiro
                                                    where idPedido=find and idFinalizadora=4
                                                                  into valueFull;
                                                                  if(valueFull is null)then set valueFull=0; end if;
    select round(sum(ifnull(valor,0)),2)
                from convenioMovimento
                            where pedido=find
                                        into valueGerado;
                                             if(valueGerado is null)then set valueGerado=0; end if;

                                             set valueRestante = valueFull - valueGerado;
                                             if(valueRestante is null)then set valueRestante=0; end if;

start Transaction;

  insert into convenioMovimento(
                                  `idcliente`,
                                  `idloja`,
                                  `empresa`,
                                  `emissao`,
                                  `vencimento`,
                                  `valor`,
                                  `parcela`,
                                  `prazo`,
                                  `cupom`,
                                  `idfuncionario`,
                                  `terminal`,
                                  `desconto`,
                                  `juros`,
                                  `observacao`,
                                  pagamento,
                                  qttyParcelas,
                                  flagAlteracao, pedido
                                )select tab.idCliente,
                                            tab.idLoja,
                                            find_empresa,
                                            now(),
                                            tab1.vencimento,
                                            tab1.valor,
                                            tab1.idparcela,
                                            abs(DATEDIFF(NOW(), tab1.vencimento)) as prazo,
                                            0,
                                            `inc_idfuncionario`,
                                            `inc_terminal`,
                                            0.000,
                                            0.000,
                                            obs,
                                            "00000000",
                                            tab.numeroParcelas,
                                            null, find
                                             from pedidoConvenio tab
                                                     inner join pedidoParcelaConvenio tab1 on(tab.idPedido = tab1.idPedido and
                                                                                              tab.idLoja = tab1.idLoja)
                                                                                                 where tab.idPedido=find;
    commit;

     select
            round(sum(valor),3)
                                from convenioMovimento
                                                    where pedido=find;
  end $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `conector_gera_promocaoSetor`
--

DROP PROCEDURE IF EXISTS `conector_gera_promocaoSetor`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='' */ $$
CREATE DEFINER=`root`@`%` PROCEDURE `conector_gera_promocaoSetor`(in final varchar(8), in typePromocao int, in userInc int(11), in store smallint,
    in descontoSetor decimal(15,3), in findIdSetor int, in findIdGrupo int, in findIdCategoria int, in findIdFornecedor double)
begin
    DECLARE done INT DEFAULT FALSE;
    declare VarProduto double;
    declare VarStore int(11);
    declare VarSetor int;
    declare VarGrupo int;
    declare VarCategoria int;
    declare VarFornecedor int;
    declare VarPreco decimal(15,3);
    declare VarNewPreco decimal(15,3);
    declare VarCusto decimal(15,3);
    begin
             DECLARE basicFonte CURSOR for select 
                                                    tab.idProduto,
                                                    tab3.idLoja,
                                                    tab.idFornecedor,
                                                    tab.idSetor,
                                                    tab.idCategoria,
                                                    tab.idGrupo,
                                                    tab4.priceVenda,
                                                    tab4.custoLiquido
                                                      from produto tab
                                                          inner join unidadeMedida tab1 on(tab.idunidade = tab1.idunidadeMedida)
                                                          inner join produtoEmbalagem tab2 on(tab.idproduto = tab2.idproduto)
                                                          inner join produtoStore tab3 on(tab.idproduto = tab3.idproduto)
                                                          inner join produtoPrice tab4 on(tab.idproduto = tab4.idproduto)
                                                          inner join produtoEstoques tab5 on(tab.idproduto = tab5.idproduto)
                                                          inner join setor on(tab.idSetor = setor.idSetor)
                                              where
                                                    tab2.defaultVenda = "s" and
                                                    tab4.idloja = tab5.idloja and
                                                    tab4.idloja = tab3.idloja and
                                                   (store=0 or tab4.idloja = store) and 
                                                   (findIdsetor = 0 or tab.idsetor = findIdsetor) and
                                                   (findIdGrupo = 0 or tab.idGrupo = findIdGrupo) and
                                                   (findIdcategoria = 0 or tab.idcategoria = findIdcategoria) and
                                                   (findIdFornecedor = 0 or tab.idFornecedor = findIdFornecedor);
                          DECLARE CONTINUE HANDLER FOR NOT FOUND SET done = TRUE;
        open basicFonte;
        read_loop: LOOP
                          fetch basicFonte into VarProduto, VarStore, VarFornecedor, VarSetor, VarCategoria, VarGrupo, VarPreco, VarCusto;
                          
                    IF done THEN
                        LEAVE read_loop;
                    END IF;
                    
                    IF(VarPreco > 0)THEN
                    set VarNewPreco = (VarPreco - truncate(((VarPreco * descontoSetor)/100),2));
                    
                    call conector_inc_promocao(VarProduto,
                                               VarStore,
                                               now(),
                                               final,
                                               typePromocao,
                                               0,
                                               userInc,
                                               0,
                                               0,
                                               VarPreco,
                                               VarNewPreco,
                                               0,
                                               VarFornecedor,
                                               VarSetor,
                                               VarGrupo,
                                               VarCategoria,
                                               1,
                                               0,
                                               0,
                                               0,
                                               descontoSetor,
                                               descontoSetor,
                                               VarCusto,0);
                                               END IF;
                      end loop;
        close basicFonte;
    end;
end $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `conector_gera_tesouraria`
--

DROP PROCEDURE IF EXISTS `conector_gera_tesouraria`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='' */ $$
CREATE DEFINER=`root`@`%` PROCEDURE `conector_gera_tesouraria`( in dateMov date, in store double, in Partipo int, in pessoa int(11), in pdv int(11), in caixa int(11), in cxCorrente double, in typeValue smallint)
begin
  DECLARE done INT DEFAULT FALSE;
  declare VarLoja double default 0;
  declare VarData date default 0;
  declare VarFuncionario int(11) default 0;
  declare VarTerminal int(11) default 0;
  declare VarFinalizadora int(11) default 0;
  declare VarVenda int(11) default 0;
  declare VarDescricao varchar(45);
  declare VarApurado decimal(15,3);
  declare VarInformado decimal(15,3);
  declare VarQuebra decimal(15,3);
  declare VarCount int(11) default 0;
  DECLARE VarTipo varchar(3);
  declare varSinal smallint default 0;
  declare VarTotal decimal(15,3) default 0;

case Partipo
  when 0 then


        select
                round(sum(valorApurado),2) as 'Valor Apurado',
                round(sum(valorInformado),2) as 'Valor Informado',round(sum(quebra),2) as Quebra,

                fechamento
                        from tesouraria where
                                emissao=dateMov and idLoja=store;


when 1 then

    delete from tesouraria where idLoja=store and emissao=dateMov;

    select  count(*),
            ifnull(sum(valorTotal),0)
            from produtoMovimento tab
                where tab.data=dateMov  and tab.idLoja=store and tab.finalizadora=1 into @count,@dinheiro;
    select  count(*),
            ifnull(sum(valorTotal),0)
            from produtoMovimento tab
                where tab.data=dateMov  and tab.idLoja=store and tab.finalizadora=2 into @count,@cheque;
    select  count(*),
            ifnull(sum(valorTotal),0)
            from produtoMovimento tab
                where tab.data=dateMov  and tab.idLoja=store and tab.finalizadora=3 into @count,@crediario;
    select  count(*),
            ifnull(sum(valorTotal),0)
            from produtoMovimento tab
                where tab.data=dateMov  and tab.idLoja=store and tab.finalizadora=4 into @count,@convenio;
    select  count(*),
            ifnull(sum(valorTotal),0)
            from produtoMovimento tab
                where tab.data=dateMov  and tab.idLoja=store and tab.finalizadora=5 into @count,@ccredito;
    select  count(*),
            ifnull(sum(valorTotal),0)
            from produtoMovimento tab
                where tab.data=dateMov  and tab.idLoja=store and tab.finalizadora=6 into @count,@cdebito;
    select  count(*),
            ifnull(sum(valorTotal),0)
            from produtoMovimento tab
                where tab.data=dateMov  and tab.idLoja=store and tab.finalizadora=7 into @count,@boleto;
    select  count(*),
            ifnull(sum(valorTotal),0)
            from produtoMovimento tab
                where tab.data=dateMov  and tab.idLoja=store and tab.finalizadora=8 into @count,@duplicata;
    select  count(*),
            ifnull(sum(valorTotal),0)
            from produtoMovimento tab
                where tab.data=dateMov  and tab.idLoja=store and tab.finalizadora=9 into @count,@recebimento;
    select  count(*),
            ifnull(sum(valorTotal),0)
            from produtoMovimento tab
                where tab.data=dateMov  and tab.idLoja=store and tab.finalizadora=10 into @count,@vale;
    select  count(*),
            ifnull(sum(valorTotal),0)
            from produtoMovimento tab
                where tab.data=dateMov  and tab.idLoja=store and tab.finalizadora=11 into @count,@pos;

begin
             DECLARE basicFonte CURSOR for 
                                            select idLoja, emissao,terminal, idFuncionario, 1,"DINHEIRO", coalesce(sum(valorTotal),0) as Apurado,0 as Informado, 0 - coalesce(sum(valorTotal),0), count(*) as Qtty, 'V', @dinheiro from money where emissao=dateMov and idLoja=store and faturado=1 union
                                            select idLoja, emissao,terminal, idFuncionario, 2,"CHEQUE", coalesce(sum(valueCheque),0) as Apurado,0 as Informado, 0 - coalesce(sum(valueCheque),0), count(*) as Qtty, 'V', @cheque from cheque where emissao=dateMov and idLoja=store union
                                            select idLoja, emissao,terminal, idFuncionario, 3,"CREDIARIO - REFERENCIA", coalesce(sum(coalesce(total,0)),0) as Apurado, 0 as Informado, 0 - coalesce(sum(coalesce(total,0)),0), count(*) as Qtty, "VR", @crediario  from  crediario  where emissao=dateMov  and idLoja=store  union
                                            select idLoja, emissao,terminal, idFuncionario, 3,"CREDIARIO - ENCARGOS", coalesce(sum(coalesce(encargos,0)),0) as Apurado, 0 as Informado, 0 - coalesce(sum(coalesce(encargos,0)),0), count(*) as Qtty, "VN", if(@crediario>0,coalesce(sum(coalesce(encargos,0)),0),0)  from  crediario  where emissao=dateMov  and idLoja=store  union
                                            select idLoja, emissao,terminal, idFuncionario, 3,"CREDIARIO - ENTRADAS", coalesce(sum(coalesce(valueEntry,0)),0) as Apurado, 0 as Informado, 0 - coalesce(sum(coalesce(valueEntry,0)),0), count(idCrediario) as Qtty, "VE", if(@crediario,coalesce(sum(coalesce(valueEntry,0)),0),0)  from  crediario  where emissao=dateMov  and idLoja=store union
                                            select idLoja, emissao,terminal, idFuncionario, 4,"CONVENIO",coalesce(sum(valor),0) as Apurado, 0 as informado, 0 - coalesce(sum(valor),0), count(*) as Qtty, "V", @convenio  from conveniomovimento where emissao=dateMov  and idLoja=store  union
                                            select idLoja, emissao,terminal, idFuncionario, 5,"CARTAO CREDITO", coalesce(sum(valor),0) as Apurado, 0 as Informado, 0 - coalesce(sum(valor),0), count(*) as Qtty , "V", @ccredito  from cartao where emissao=dateMov and typeCartao=2 and idAdministradora <> 1  and idLoja=store  union
                                            select idLoja, emissao,terminal, idFuncionario, 6,"CARTAO DEBITO", coalesce(sum(valor),0) as Apurado, 0 as Informado, 0 - coalesce(sum(valor),0), count(*) as Qtty, "V", @cdebito   from cartao where emissao=dateMov and typeCartao=1 and idAdministradora <> 1  and idLoja=store  union
                                            select cedente, ifnull(emissao,'0000-00-00'),idTerminal, idFuncionario, 7, "BOLETO",coalesce(sum(valor),0) as Apurado, 0 Informado, 0 - coalesce(sum(valor),0), count(*) as Qtty, "V", @boleto  from boleto where emissao=dateMov  and cedente=store
                                            union
                                                 select
                                                   tab.idLoja, DATE_FORMAT(ifnull(tab.pagamento,'00000000'),'%Y%m%d'), tab.idTerminal, tab.Funcionario,
                                                   tab1.finalizadora ,
                                                   CASE tab1.finalizadora when 1 then "RECEBIMENTO - PRESTACAO - DINHEIRO"
                                                                          when 2 then "RECEBIMENTO - PRESTACAO - CHEQUE"
                                                                          when 5 then "RECEBIMENTO - PRESTACAO - CARTAO CREDITO"
                                                                          when 6 then "RECEBIMENTO - PRESTACAO - CARTAO DEBITO"
                                                                          when 7 then "RECEBIMENTO - PRESTACAO - CARTAO POS"
                                                                          when 11 then "RECEBIMENTO - PRESTACAO - CARTAO VALE" end ,
                                                   coalesce(sum(round(tab1.valor,2)),0) as Apurado,0.00 as Informado, 0 - coalesce(sum(round(tab1.valor,2)),0), count(*) as Qtty,
                                                   CASE tab1.finalizadora when 1 then "R1"
                                                                          when 2 then "R2"
                                                                          when 5 then "R5"
                                                                          when 6 then "R6"
                                                                          when 7 then "R7"
                                                                          when 11 then "R11" end, 0
                                                           from
                                                               parcela tab
                                                              inner join historicocrediario tab1 on(tab.idParcela = tab1.parcela_idParcela and
                                                                                                    tab.idCrediario = tab1.parcela_idCrediario and
                                                                                                    tab.nr_parcela = tab1.parcela_nr_parcela)
                                                              inner join usuario tab3 on(tab1.usuario = tab3.idUsuario)
                                                              inner join typeHistorico tab4 on(tab1.typeHistorico = tab4.typeHistorico)
                                                                        where
                                                                           pagamento=dateMov  and idLoja=store  and  tab.valorPago > 0 and tab.status in("1","2") and tab4.typeHistorico not in(12)  group by 1,2,3,4,5,6 UNION
                                            select idLoja, emissao,terminal, idFuncionario, 11,"POS", coalesce(sum(valor),0) as Apurado, 0 as Informado, 0 - coalesce(sum(valor),0), count(*) as Qtty, "V", @pos   from cartao where emissao=dateMov and typeCartao in(1,2) and idAdministradora = 1  and idLoja=store;
              DECLARE CONTINUE HANDLER FOR NOT FOUND SET done = TRUE;

    open basicFonte;

            read_loop: LOOP
                          fetch basicFonte into
                                              VarLoja,
                                              VarData,
                                              VarTerminal,
                                              VarFuncionario,
                                              VarFinalizadora,
                                              VarDescricao,
                                              VarApurado,
                                              VarInformado,
                                              VarQuebra,
                                              VarCount, VarTipo, VarTotal;
                    IF done THEN
                        LEAVE read_loop;
                    END IF;

            IF(VarLoja > 0)THEN
            if((select count(*) from tesouraria where idFinalizadora=VarFinalizadora and idTerminal=VarTerminal and operador=VarFuncionario and idLoja=VarLoja and emissao=VarData and tipo=VarTipo) = 0)then
            INSERT INTO `conector`.`tesouraria`
                                    (
                                    `idfinalizadora`,
                                    `idterminal`,
                                    `valorInformado`,
                                    `valorApurado`,
                                    `quebra`,
                                    `operador`,
                                    `idloja`,
                                    `fechamento`,
                                    `emissao`, tipo, documentoFiscal)
                                    VALUES
                                    (
                                              VarFinalizadora,
                                              VarTerminal,
                                              VarInformado,
                                              VarApurado,
                                              VarQuebra,
                                              VarFuncionario,
                                              VarLoja,
                                              0,
                                              DATE_FORMAT(VarData,'%Y%m%d'), VarTipo, VarTotal
                                    );

                                    else

                                    update `conector`.`tesouraria`
                                                            set `valorApurado`= (`valorApurado`+ VarApurado),
                                                                `valorInformado`=0 , `quebra`=(`quebra` + VarQuebra),
                                                                 fechamento=0
                                                                    where idFinalizadora=VarFinalizadora and
                                                                          idTerminal=VarTerminal and
                                                                          operador=VarFuncionario and
                                                                          idLoja=VarLoja and
                                                                          emissao=VarData;
            end if;
            END IF;
            end loop;
        close basicFonte;

end;
    WHEN 2 THEN

        select
                idLoja as Loja,
                date_format(emissao,'%d/%m/%Y') as Movimento,
                operador,
                idterminal as Terminal,
                round(sum(valorApurado),2) as 'Valor Apurado',
                round(sum(valorInformado),2) as 'Valor Informado',round(sum(quebra),2),round(sum(documentoFiscal),2),

                fechamento
                        from tesouraria where
                                emissao=dateMov  and idLoja=store group by 1,2,3,4;


           when 3 then

     
                                            select idLoja, DATE_FORMAT(ifnull(emissao,'00000000'),'%d/%m/%Y'),terminal, idFuncionario, 1,"DINHEIRO", coalesce(sum(valorTotal),0) as Apurado,round(if((select count(*) from tesouraria where emissao=dateMov  and idLoja=store and idterminal=pdv and operador=pessoa and idFinalizadora=1 AND tipo='V')=0,0,(select round(valorInformado,2) from tesouraria where emissao=dateMov  and idLoja=store and idterminal=pdv and operador=pessoa and idFinalizadora=1 and Tipo='V')),2) as Informado, if((select count(*) from tesouraria where emissao=dateMov  and idLoja=store and idterminal=pdv and operador=pessoa and idFinalizadora=1 AND tipo='V')=0,0,(select valorInformado from tesouraria where emissao=dateMov  and idLoja=store and idterminal=pdv and operador=pessoa and idFinalizadora=1 and Tipo='V')) - coalesce(sum(valorTotal),0), count(*) as Qtty, (select idTesouraria from tesouraria where emissao=dateMov  and idLoja=store and idterminal=pdv and operador=pessoa and idFinalizadora=1  and tipo='V') from money where faturado=1 and emissao=dateMov and idLoja=store  and terminal=pdv and idFuncionario=pessoa union
                                            select idLoja, DATE_FORMAT(ifnull(emissao,'00000000'),'%d/%m/%Y'),terminal, idFuncionario, 2,"CHEQUE", coalesce(sum(valueCheque),0) as Apurado,round(if((select count(*) from tesouraria where emissao=dateMov  and idLoja=store and idterminal=pdv and operador=pessoa and idFinalizadora=2 AND tipo='V')=0,0,(select round(valorInformado,2) from tesouraria where emissao=dateMov  and idLoja=store and idterminal=pdv and operador=pessoa and idFinalizadora=2 and Tipo='V')),2) as Informado, if((select count(*) from tesouraria where emissao=dateMov  and idLoja=store and idterminal=pdv and operador=pessoa and idFinalizadora=2 AND tipo='V')=0,0,(select valorInformado from tesouraria where emissao=dateMov  and idLoja=store and idterminal=pdv and operador=pessoa and idFinalizadora=2 and Tipo='V')) - coalesce(sum(valueCheque),0), count(*) as Qtty, (select idTesouraria from tesouraria where emissao=dateMov  and idLoja=store and idterminal=pdv and operador=pessoa and idFinalizadora=2  and tipo='V') from cheque where emissao=dateMov and idLoja=store  and terminal=pdv and idFuncionario=pessoa     union
                                            select idLoja, DATE_FORMAT(ifnull(emissao,'00000000'),'%d/%m/%Y'),terminal, idFuncionario, 3,"CREDIARIO - REFERENCIA", coalesce(sum(coalesce(round(total,2),0)),0) as Apurado, round(if((select count(*) from tesouraria where emissao=dateMov  and idLoja=store and idterminal=pdv and operador=pessoa and idFinalizadora=3 AND tipo='VR')=0,0,(select round(valorInformado,2) from tesouraria where emissao=dateMov  and idLoja=store and idterminal=pdv and operador=pessoa and idFinalizadora=3 and Tipo='VR')),2), if((select count(*) from tesouraria where emissao=dateMov  and idLoja=store and idterminal=pdv and operador=pessoa and idFinalizadora=3 AND tipo='VR')=0,0,(select round(valorInformado,2) from tesouraria where emissao=dateMov  and idLoja=store and idterminal=pdv and operador=pessoa and idFinalizadora=3 and Tipo='VR')) - coalesce(sum(coalesce(round(total,2),0)),0), count(*) as Qtty, (select idTesouraria from tesouraria where emissao=dateMov  and idLoja=store and idterminal=pdv and operador=pessoa and idFinalizadora=3  and tipo='VR')  from  crediario  where emissao=dateMov  and idLoja=store and terminal=pdv and idFuncionario=pessoa union
                                            select idLoja, DATE_FORMAT(ifnull(emissao,'00000000'),'%d/%m/%Y'),terminal, idFuncionario, 3,"CREDIARIO - ENCARGOS", coalesce(sum(coalesce(encargos,0)),0) as Apurado, round(if((select count(*) from tesouraria where emissao=dateMov  and idLoja=store and idterminal=pdv and operador=pessoa and idFinalizadora=3 AND tipo='VN')=0,0,(select round(valorInformado,2) from tesouraria where emissao=dateMov  and idLoja=store and idterminal=pdv and operador=pessoa and idFinalizadora=3 and Tipo='VN')),2), if((select count(*) from tesouraria where emissao=dateMov  and idLoja=store and idterminal=pdv and operador=pessoa and idFinalizadora=3 AND tipo='VN')=0,0,(select round(valorInformado,2) from tesouraria where emissao=dateMov  and idLoja=store and idterminal=pdv and operador=pessoa and idFinalizadora=3 and Tipo='VN')) - coalesce(sum(coalesce(encargos,0)),0), count(*) as Qtty, (select idTesouraria from tesouraria where emissao=dateMov  and idLoja=store and idterminal=pdv and operador=pessoa and idFinalizadora=3  and tipo='VN')  from  crediario  where emissao=dateMov  and idLoja=store and terminal=pdv and idFuncionario=pessoa union
                                            select idLoja, DATE_FORMAT(ifnull(emissao,'00000000'),'%d/%m/%Y'),terminal, idFuncionario, 3,"CREDIARIO - ENTRADAS", coalesce(sum(coalesce(valueEntry,0)),0) as Apurado, round(if((select count(*) from tesouraria where emissao=dateMov  and idLoja=store and idterminal=pdv and operador=pessoa and idFinalizadora=3 AND tipo='VE')=0,0,(select round(valorInformado,2) from tesouraria where emissao=dateMov  and idLoja=store and idterminal=pdv and operador=pessoa and idFinalizadora=3 and Tipo='VE')),2), if((select count(*) from tesouraria where emissao=dateMov  and idLoja=store and idterminal=pdv and operador=pessoa and idFinalizadora=3 AND tipo='VE')=0,0,(select round(valorInformado,2) from tesouraria where emissao=dateMov  and idLoja=store and idterminal=pdv and operador=pessoa and idFinalizadora=3 and Tipo='VE')) - coalesce(sum(coalesce(valueEntry,0)),0), count(idCrediario) as Qtty, (select idTesouraria from tesouraria where emissao=dateMov  and idLoja=store and idterminal=pdv and operador=pessoa and idFinalizadora=3  and tipo='VE')   from  crediario  where emissao=dateMov  and idLoja=store and terminal=pdv and idFuncionario=pessoa union
                                            select idLoja, DATE_FORMAT(ifnull(emissao,'00000000'),'%d/%m/%Y'),terminal, idFuncionario, 4,"CONVENIO",coalesce(sum(valor),0) as Apurado, round(if((select count(*) from tesouraria where emissao=dateMov  and idLoja=store and idterminal=pdv and operador=pessoa and idFinalizadora=4 AND tipo ='V')=0,0,(select round(valorInformado,2) from tesouraria where emissao=dateMov  and idLoja=store and idterminal=pdv and operador=pessoa and idFinalizadora=4  and Tipo='V')),2) as informado,   if((select count(*) from tesouraria where emissao=dateMov  and idLoja=store and idterminal=pdv and operador=pessoa and idFinalizadora=4 AND tipo ='V')=0,0,(select round(valorInformado,2) from tesouraria where emissao=dateMov  and idLoja=store and idterminal=pdv and operador=pessoa and idFinalizadora=4  and Tipo='V')) - coalesce(sum(valor),0), count(*) as Qtty, (select idTesouraria from tesouraria where emissao=dateMov  and idLoja=store and idterminal=pdv and operador=pessoa and idFinalizadora=4  and tipo='V')  from conveniomovimento where emissao=dateMov  and idLoja=store and terminal=pdv and idFuncionario=pessoa union
                                            select idLoja, DATE_FORMAT(ifnull(emissao,'00000000'),'%d/%m/%Y'),terminal, idFuncionario, 5,"CARTAO CREDITO", coalesce(sum(valor),0) as Apurado, round(if((select count(*) from tesouraria where emissao=dateMov  and idLoja=store and idterminal=pdv and operador=pessoa and idFinalizadora=5  AND tipo ='V')=0,0,(select round(valorInformado,2) from tesouraria where emissao=dateMov  and idLoja=store and idterminal=pdv and operador=pessoa and idFinalizadora=5  and Tipo='V')),2) as Informado, if((select count(*) from tesouraria where emissao=dateMov  and idLoja=store and idterminal=pdv and operador=pessoa and idFinalizadora=5  AND tipo ='V')=0,0,(select round(valorInformado,2) from tesouraria where emissao=dateMov  and idLoja=store and idterminal=pdv and operador=pessoa and idFinalizadora=5  and Tipo='V')) - coalesce(sum(valor),0), count(*) as Qtty, (select idTesouraria from tesouraria where emissao=dateMov  and idLoja=store and idterminal=pdv and operador=pessoa and idFinalizadora=5  and tipo='V') from cartao where emissao=dateMov and typeCartao=2 and idAdministradora <> 1  and idLoja=store and terminal=pdv and idFuncionario=pessoa union
                                            select idLoja, DATE_FORMAT(ifnull(emissao,'00000000'),'%d/%m/%Y'),terminal, idFuncionario, 6,"CARTAO DEBITO", coalesce(sum(valor),0) as Apurado, round(if((select count(*) from tesouraria where emissao=dateMov  and idLoja=store and idterminal=pdv and operador=pessoa and idFinalizadora=6  AND tipo ='V')=0,0,(select round(valorInformado,2) from tesouraria where emissao=dateMov  and idLoja=store and idterminal=pdv and operador=pessoa and idFinalizadora=6  and Tipo='V')),2) as Informado, if((select count(*) from tesouraria where emissao=dateMov  and idLoja=store and idterminal=pdv and operador=pessoa and idFinalizadora=6  AND tipo ='V')=0,0,(select round(valorInformado,2) from tesouraria where emissao=dateMov  and idLoja=store and idterminal=pdv and operador=pessoa and idFinalizadora=6  and Tipo='V')) - coalesce(sum(valor),0), count(*) as Qtty, (select idTesouraria from tesouraria where emissao=dateMov  and idLoja=store and idterminal=pdv and operador=pessoa and idFinalizadora=6  and tipo='V')  from cartao where emissao=dateMov and typeCartao=1 and idAdministradora <> 1  and idLoja=store and terminal=pdv and idFuncionario=pessoa union
                                            select cedente, DATE_FORMAT(ifnull(emissao,'00000000'),'%d/%m/%Y'),idTerminal, idFuncionario, 7, "BOLETO",coalesce(sum(valor),0) as Apurado, round(if((select count(*) from tesouraria where emissao=dateMov  and idLoja=store and idterminal=pdv and operador=pessoa and idFinalizadora=7  AND tipo ='V')=0,0,(select round(valorInformado,2) from tesouraria where emissao=dateMov  and idLoja=store and idterminal=pdv and operador=pessoa and idFinalizadora=7  and Tipo='V')),2) as Informado, if((select count(*) from tesouraria where emissao=dateMov  and idLoja=store and idterminal=pdv and operador=pessoa and idFinalizadora=7  AND tipo ='V')=0,0,(select round(valorInformado,2) from tesouraria where emissao=dateMov  and idLoja=store and idterminal=pdv and operador=pessoa and idFinalizadora=7  and Tipo='V')) - coalesce(sum(valor),0), count(*) as Qtty, (select idTesouraria from tesouraria where emissao=dateMov  and idLoja=store and idterminal=pdv and operador=pessoa and idFinalizadora=7  and tipo='V')  from boleto where emissao=dateMov  and cedente=store and idTerminal = pdv and idFuncionario = pessoa
                                            union
                                                 select
                                                   tab.idLoja, DATE_FORMAT(ifnull(tab.pagamento,'00000000'),'%d/%m/%Y'), tab.idTerminal, tab.Funcionario,
                                                   tab1.finalizadora ,
                                                   CASE tab1.finalizadora when 1 then "RECEBIMENTO - PRESTACAO - DINHEIRO"
                                                                          when 2 then "RECEBIMENTO - PRESTACAO - CHEQUE"
                                                                          when 5 then "RECEBIMENTO - PRESTACAO - CARTAO CREDITO"
                                                                          when 6 then "RECEBIMENTO - PRESTACAO - CARTAO DEBITO"
                                                                          when 10 then "RECEBIMENTO - PRESTACAO - CARTAO VALE"
                                                                          when 11 then "RECEBIMENTO - PRESTACAO - CARTAO POS" end as descri,
                                                   coalesce(sum(round(tab1.valor,2)),0) as Apurado,
                                                   CASE tab1.finalizadora when 1 then if((select count(*) from tesouraria where emissao=dateMov  and idLoja=store and idterminal=pdv and operador=pessoa and idFinalizadora=1 and tipo='R1')=0,0,(select valorInformado from tesouraria where emissao=dateMov  and idLoja=store and idterminal=pdv and operador=pessoa and idFinalizadora=1 AND tipo = 'R1'))
                                                                          when 2 then if((select count(*) from tesouraria where emissao=dateMov  and idLoja=store and idterminal=pdv and operador=pessoa and idFinalizadora=2 AND tipo='R2')=0,0,(select valorInformado from tesouraria where emissao=dateMov  and idLoja=store and idterminal=pdv and operador=pessoa and idFinalizadora=2 and Tipo='R2'))
                                                                          when 5 then if((select count(*) from tesouraria where emissao=dateMov  and idLoja=store and idterminal=pdv and operador=pessoa and idFinalizadora=5  AND tipo ='R5')=0,0,(select valorInformado from tesouraria where emissao=dateMov  and idLoja=store and idterminal=pdv and operador=pessoa and idFinalizadora=5  and Tipo='R5'))
                                                                          when 6 then if((select count(*) from tesouraria where emissao=dateMov  and idLoja=store and idterminal=pdv and operador=pessoa and idFinalizadora=6  AND tipo ='R6')=0,0,(select valorInformado from tesouraria where emissao=dateMov  and idLoja=store and idterminal=pdv and operador=pessoa and idFinalizadora=6  and Tipo='R6'))
                                                                          when 10 then if((select count(*) from tesouraria where emissao=dateMov  and idLoja=store and idterminal=pdv and operador=pessoa and idFinalizadora=10 AND tipo='R10')=0,0,(select valorInformado from tesouraria where emissao=dateMov  and idLoja=store and idterminal=pdv and operador=pessoa and idFinalizadora=10  and Tipo='R10'))
                                                                          when 11 then if((select count(*) from tesouraria where emissao=dateMov  and idLoja=store and idterminal=pdv and operador=pessoa and idFinalizadora=11 AND tipo='R11')=0,0,(select valorInformado from tesouraria where emissao=dateMov  and idLoja=store and idterminal=pdv and operador=pessoa and idFinalizadora=11  and Tipo='R11')) end AS informado,
                                                   CASE tab1.finalizadora when 1 then if((select count(*) from tesouraria where emissao=dateMov  and idLoja=store and idterminal=pdv and operador=pessoa and idFinalizadora=1 and tipo='R1')=0,0,(select valorInformado from tesouraria where emissao=dateMov  and idLoja=store and idterminal=pdv and operador=pessoa and idFinalizadora=1 AND tipo = 'R1')) - coalesce(sum(round(tab1.valor,2)),0)
                                                                          when 2 then if((select count(*) from tesouraria where emissao=dateMov  and idLoja=store and idterminal=pdv and operador=pessoa and idFinalizadora=2 AND tipo='R2')=0,0,(select valorInformado from tesouraria where emissao=dateMov  and idLoja=store and idterminal=pdv and operador=pessoa and idFinalizadora=2 and Tipo='R2')) - coalesce(sum(round(tab1.valor,2)),0)
                                                                          when 5 then if((select count(*) from tesouraria where emissao=dateMov  and idLoja=store and idterminal=pdv and operador=pessoa and idFinalizadora=5  AND tipo ='R5')=0,0,(select valorInformado from tesouraria where emissao=dateMov  and idLoja=store and idterminal=pdv and operador=pessoa and idFinalizadora=5  and Tipo='R5')) - coalesce(sum(round(tab1.valor,2)),0)
                                                                          when 6 then if((select count(*) from tesouraria where emissao=dateMov  and idLoja=store and idterminal=pdv and operador=pessoa and idFinalizadora=6  AND tipo ='R6')=0,0,(select valorInformado from tesouraria where emissao=dateMov  and idLoja=store and idterminal=pdv and operador=pessoa and idFinalizadora=6  and Tipo='R6')) - coalesce(sum(round(tab1.valor,2)),0)
                                                                          when 10 then if((select count(*) from tesouraria where emissao=dateMov  and idLoja=store and idterminal=pdv and operador=pessoa and idFinalizadora=10 AND tipo='R10')=0,0,(select valorInformado from tesouraria where emissao=dateMov  and idLoja=store and idterminal=pdv and operador=pessoa and idFinalizadora=10  and Tipo='R10')) - coalesce(sum(round(tab1.valor,2)),0)
                                                                          when 11 then if((select count(*) from tesouraria where emissao=dateMov  and idLoja=store and idterminal=pdv and operador=pessoa and idFinalizadora=11 AND tipo='R11')=0,0,(select valorInformado from tesouraria where emissao=dateMov  and idLoja=store and idterminal=pdv and operador=pessoa and idFinalizadora=11  and Tipo='R11')) - coalesce(sum(round(tab1.valor,2)),0) end AS QUEBRA,
                                                   count(*) as Qtty,
                                                   CASE tab1.finalizadora when 1 then (select idTesouraria from tesouraria where emissao=dateMov  and idLoja=store and idterminal=pdv and operador=pessoa and idFinalizadora=1  and tipo='R1')
                                                                          when 2 then (select idTesouraria from tesouraria where emissao=dateMov  and idLoja=store and idterminal=pdv and operador=pessoa and idFinalizadora=2  and tipo='R2')
                                                                          when 5 then (select idTesouraria from tesouraria where emissao=dateMov  and idLoja=store and idterminal=pdv and operador=pessoa and idFinalizadora=5  and tipo='R5')
                                                                          when 6 then (select idTesouraria from tesouraria where emissao=dateMov  and idLoja=store and idterminal=pdv and operador=pessoa and idFinalizadora=6 and tipo='R6')
                                                                          when 10 then (select idTesouraria from tesouraria where emissao=dateMov  and idLoja=store and idterminal=pdv and operador=pessoa and idFinalizadora=10 and tipo='R10')
                                                                          when 11 then (select idTesouraria from tesouraria where emissao=dateMov  and idLoja=store and idterminal=pdv and operador=pessoa and idFinalizadora=11 and tipo='R11')  end
                                                           from
                                                               parcela tab
                                                              inner join historicocrediario tab1 on(tab.idParcela = tab1.parcela_idParcela and
                                                                                                    tab.idCrediario = tab1.parcela_idCrediario and
                                                                                                    tab.nr_parcela = tab1.parcela_nr_parcela)
                                                              inner join usuario tab3 on(tab1.usuario = tab3.idUsuario)
                                                              inner join typeHistorico tab4 on(tab1.typeHistorico = tab4.typeHistorico)
                                                                        where
                                                                           pagamento=dateMov  and idLoja=store  and  tab.valorPago > 0 and tab.status in("1","2") and tab4.typeHistorico not in(12) and tab.idterminal=pdv and tab.Funcionario=pessoa group by 1,2,3,4,5,6 UNION
                                            select idLoja, DATE_FORMAT(ifnull(emissao,'00000000'),'%d/%m/%Y'),terminal, idFuncionario, 11,"POS", coalesce(sum(valor),0) as Apurado, if((select count(*) from tesouraria where emissao=dateMov  and idLoja=store and idterminal=pdv and operador=pessoa and idFinalizadora=11 AND tipo='V')=0,0,(select valorInformado from tesouraria where emissao=dateMov  and idLoja=store and idterminal=pdv and operador=pessoa and idFinalizadora=11  and Tipo='V')) as Informado, if((select count(*) from tesouraria where emissao=dateMov  and idLoja=store and idterminal=pdv and operador=pessoa and idFinalizadora=11 AND tipo='V')=0,0,(select valorInformado from tesouraria where emissao=dateMov  and idLoja=store and idterminal=pdv and operador=pessoa and idFinalizadora=11  and Tipo='V')) - coalesce(sum(valor),0), count(*) as Qtty,(select idTesouraria from tesouraria where emissao=dateMov  and idLoja=store and idterminal=pdv and operador=pessoa and idFinalizadora=11  and tipo='V')   from cartao where emissao=dateMov and typeCartao in(1,2) and idAdministradora = 1  and idLoja=store and terminal=pdv and idFuncionario=pessoa;

WHEN 4 THEN
begin
             DECLARE basicFonte CURSOR for select tab.idLoja, DATE_FORMAT(tab.data, '%d/%m/%Y'),tab.vendedor, tab.idterminal,tab.finalizadora,tab1.descricao, round(sum(tab.valorTotal),2) Apurado,round(if((select count(*) from tesouraria where emissao=dateMov  and idLoja=store and (pdv=0 or idterminal=pdv) and (pessoa =0 or operador=pessoa) and idFinalizadora=1 AND tipo='V')=0,0,(select sum(valorInformado) from tesouraria where emissao=dateMov  and idLoja=store and (idterminal=pdv or pdv=0) and (operador=pessoa or pessoa =0) and idFinalizadora=1)),2) as Informado, if((select count(*) from tesouraria where emissao=dateMov  and idLoja=store and (idterminal=pdv or pdv=0) and (operador=pessoa or pessoa =0) and idFinalizadora=1 AND tipo='V')=0,0,(select sum(valorInformado) from tesouraria where emissao=dateMov  and idLoja=store and (idterminal=pdv or pdv=0) and (operador=pessoa or pessoa =0) and idFinalizadora=1)) - round(sum(tab.valorTotal),2) as quebra, count(*), (select idTesouraria from tesouraria where emissao=dateMov  and idLoja=store and (idterminal=pdv or pdv=0) and (operador=pessoa or pessoa =0) and idFinalizadora=1 AND tipo='V')
                                                from conector.produtomovimento tab, conector.finalizadora tab1
                                                         where tab.finalizadora=tab1.idFinalizadora and
                                                               tab.data=dateMov and tab.finalizadora in(1) and tab.idLoja=store and (pessoa=0 or tab.vendedor=pessoa)and (pdv=0 or tab.idTerminal=pdv)
                                                                        group by 1,2,3,4,5,6
                                                     union
                                            select idLoja, DATE_FORMAT(ifnull(emissao,'00000000'),'%d/%m/%Y'),terminal, idFuncionario, 2,"CHEQUE", coalesce(sum(valueCheque),0) as Apurado,round(if((select count(*) from tesouraria where emissao=dateMov  and idLoja=store and (pdv=0 or idterminal=pdv) and (pessoa=0 or operador=pessoa) and idFinalizadora=2 AND tipo='V')=0,0,(select valorInformado from tesouraria where emissao=dateMov  and idLoja=store and (pdv=0 or idterminal=pdv) and (pessoa=0 or operador=pessoa) and idFinalizadora=2 and Tipo='V')),2) as Informado, if((select count(*) from tesouraria where emissao=dateMov  and idLoja=store and (pdv=0 or idterminal=pdv) and (pessoa=0 or operador=pessoa) and idFinalizadora=2 AND tipo='V')=0,0,(select valorInformado from tesouraria where emissao=dateMov  and idLoja=store and (pdv=0 or idterminal=pdv) and (pessoa=0 or operador=pessoa) and idFinalizadora=2 and Tipo='V')) - coalesce(sum(valueCheque),0), count(*) as Qtty, (select idTesouraria from tesouraria where emissao=dateMov  and idLoja=store and (pdv=0 or idterminal=pdv) and (pessoa=0 or operador=pessoa) and idFinalizadora=2  and tipo='V') from cheque where emissao=dateMov and idLoja=store  and (pdv=0 or terminal=pdv) and (pessoa=0 or idFuncionario=pessoa)     union
                                            select idLoja, DATE_FORMAT(ifnull(emissao,'00000000'),'%d/%m/%Y'),terminal, idFuncionario, 3,"CREDIARIO - REFERENCIA", coalesce(sum(coalesce(total,0)),0) as Apurado, round(if((select count(*) from tesouraria where emissao=dateMov  and idLoja=store and (pdv=0 or idterminal=pdv) and (pessoa=0 or operador=pessoa) and idFinalizadora=3 AND tipo='VR')=0,0,(select valorInformado from tesouraria where emissao=dateMov  and idLoja=store and (pdv=0 or idterminal=pdv) and (pessoa=0 or operador=pessoa) and idFinalizadora=3 and Tipo='VR')),2), if((select count(*) from tesouraria where emissao=dateMov  and idLoja=store and (pdv=0 or idterminal=pdv) and (pessoa=0 or operador=pessoa) and idFinalizadora=3 AND tipo='VR')=0,0,(select valorInformado from tesouraria where emissao=dateMov  and idLoja=store and (pdv=0 or idterminal=pdv) and (pessoa=0 or operador=pessoa) and idFinalizadora=3 and Tipo='VR')) - coalesce(sum(coalesce(total,0)),0), count(*) as Qtty, (select idTesouraria from tesouraria where emissao=dateMov  and idLoja=store and (pdv=0 or idterminal=pdv) and (pessoa=0 or operador=pessoa) and idFinalizadora=3  and tipo='VR')  from  crediario  where emissao=dateMov  and idLoja=store and (pdv=0 or terminal=pdv) and (pessoa=0 or idFuncionario=pessoa) union
                                            select idLoja, DATE_FORMAT(ifnull(emissao,'00000000'),'%d/%m/%Y'),terminal, idFuncionario, 3,"CREDIARIO - ENCARGOS", coalesce(sum(coalesce(encargos,0)),0) as Apurado, round(if((select count(*) from tesouraria where emissao=dateMov  and idLoja=store and (pdv=0 or idterminal=pdv) and (pessoa=0 or operador=pessoa) and idFinalizadora=3 AND tipo='VN')=0,0,(select valorInformado from tesouraria where emissao=dateMov  and idLoja=store and (pdv=0 or idterminal=pdv) and (pessoa=0 or operador=pessoa) and idFinalizadora=3 and Tipo='VN')),2), if((select count(*) from tesouraria where emissao=dateMov  and idLoja=store and (pdv=0 or idterminal=pdv) and (pessoa=0 or operador=pessoa) and idFinalizadora=3 AND tipo='VN')=0,0,(select valorInformado from tesouraria where emissao=dateMov  and idLoja=store and (pdv=0 or idterminal=pdv) and (pessoa=0 or operador=pessoa) and idFinalizadora=3 and Tipo='VN')) - coalesce(sum(coalesce(encargos,0)),0), count(*) as Qtty, (select idTesouraria from tesouraria where emissao=dateMov  and idLoja=store and (pdv=0 or idterminal=pdv) and (pessoa=0 or operador=pessoa) and idFinalizadora=3  and tipo='VN')  from  crediario  where emissao=dateMov  and idLoja=store and (pdv=0 or terminal=pdv) and (pessoa=0 or idFuncionario=pessoa) union
                                            select idLoja, DATE_FORMAT(ifnull(emissao,'00000000'),'%d/%m/%Y'),terminal, idFuncionario, 3,"CREDIARIO - ENTRADAS", coalesce(sum(coalesce(valueEntry,0)),0) as Apurado, round(if((select count(*) from tesouraria where emissao=dateMov  and idLoja=store and (pdv=0 or idterminal=pdv) and (pessoa=0 or operador=pessoa) and idFinalizadora=3 AND tipo='VE')=0,0,(select valorInformado from tesouraria where emissao=dateMov  and idLoja=store and (pdv=0 or idterminal=pdv) and (pessoa=0 or operador=pessoa) and idFinalizadora=3 and Tipo='VE')),2), if((select count(*) from tesouraria where emissao=dateMov  and idLoja=store and (pdv=0 or idterminal=pdv) and (pessoa=0 or operador=pessoa) and idFinalizadora=3 AND tipo='VE')=0,0,(select valorInformado from tesouraria where emissao=dateMov  and idLoja=store and (pdv=0 or idterminal=pdv) and (pessoa=0 or operador=pessoa) and idFinalizadora=3 and Tipo='VE')) - coalesce(sum(coalesce(valueEntry,0)),0), count(idCrediario) as Qtty, (select idTesouraria from tesouraria where emissao=dateMov  and idLoja=store and (pdv=0 or idterminal=pdv) and (pessoa=0 or operador=pessoa) and idFinalizadora=3  and tipo='VE')   from  crediario  where emissao=dateMov  and idLoja=store and (pdv=0 or terminal=pdv) and (pessoa=0 or idFuncionario=pessoa) union
                                            select idLoja, DATE_FORMAT(ifnull(emissao,'00000000'),'%d/%m/%Y'),terminal, idFuncionario, 4,"CONVENIO",coalesce(sum(valor),0) as Apurado, round(if((select count(*) from tesouraria where emissao=dateMov  and idLoja=store and (pdv=0 or idterminal=pdv) and (pessoa=0 or operador=pessoa) and idFinalizadora=4 AND tipo ='V')=0,0,(select valorInformado from tesouraria where emissao=dateMov  and idLoja=store and (pdv=0 or idterminal=pdv) and (pessoa=0 or operador=pessoa) and idFinalizadora=4  and Tipo='V')),2) as informado,   if((select count(*) from tesouraria where emissao=dateMov  and idLoja=store and (pdv=0 or idterminal=pdv) and (pessoa=0 or operador=pessoa) and idFinalizadora=4 AND tipo ='V')=0,0,(select valorInformado from tesouraria where emissao=dateMov  and idLoja=store and (pdv=0 or idterminal=pdv) and (pessoa=0 or operador=pessoa) and idFinalizadora=4  and Tipo='V')) - coalesce(sum(valor),0), count(*) as Qtty, (select idTesouraria from tesouraria where emissao=dateMov  and idLoja=store and (pdv=0 or idterminal=pdv) and (pessoa=0 or operador=pessoa) and idFinalizadora=4  and tipo='V')  from conveniomovimento where emissao=dateMov  and idLoja=store and (pdv=0 or terminal=pdv) and (pessoa=0 or idFuncionario=pessoa) union
                                            select idLoja, DATE_FORMAT(ifnull(emissao,'00000000'),'%d/%m/%Y'),terminal, idFuncionario, 5,"CARTAO CREDITO", coalesce(sum(valor),0) as Apurado, round(if((select count(*) from tesouraria where emissao=dateMov  and idLoja=store and (pdv=0 or idterminal=pdv) and (pessoa=0 or operador=pessoa) and idFinalizadora=5  AND tipo ='V')=0,0,(select valorInformado from tesouraria where emissao=dateMov  and idLoja=store and (pdv=0 or idterminal=pdv) and (pessoa=0 or operador=pessoa) and idFinalizadora=5  and Tipo='V')),2) as Informado, if((select count(*) from tesouraria where emissao=dateMov  and idLoja=store and (pdv=0 or idterminal=pdv) and (pessoa=0 or operador=pessoa) and idFinalizadora=5  AND tipo ='V')=0,0,(select valorInformado from tesouraria where emissao=dateMov  and idLoja=store and (pdv=0 or idterminal=pdv) and (pessoa=0 or operador=pessoa) and idFinalizadora=5  and Tipo='V')) - coalesce(sum(valor),0), count(*) as Qtty, (select idTesouraria from tesouraria where emissao=dateMov  and idLoja=store and (pdv=0 or idterminal=pdv) and (pessoa=0 or operador=pessoa) and idFinalizadora=5  and tipo='V') from cartao where emissao=dateMov and typeCartao=2 and idAdministradora <> 1  and idLoja=store and (pdv=0 or terminal=pdv) and (pessoa=0 or idFuncionario=pessoa) union
                                            select idLoja, DATE_FORMAT(ifnull(emissao,'00000000'),'%d/%m/%Y'),terminal, idFuncionario, 6,"CARTAO DEBITO", coalesce(sum(valor),0) as Apurado, round(if((select count(*) from tesouraria where emissao=dateMov  and idLoja=store and (pdv=0 or idterminal=pdv) and (pessoa=0 or operador=pessoa) and idFinalizadora=6  AND tipo ='V')=0,0,(select valorInformado from tesouraria where emissao=dateMov  and idLoja=store and (pdv=0 or idterminal=pdv) and (pessoa=0 or operador=pessoa) and idFinalizadora=6  and Tipo='V')),2) as Informado, if((select count(*) from tesouraria where emissao=dateMov  and idLoja=store and (pdv=0 or idterminal=pdv) and (pessoa=0 or operador=pessoa) and idFinalizadora=6  AND tipo ='V')=0,0,(select valorInformado from tesouraria where emissao=dateMov  and idLoja=store and (pdv=0 or idterminal=pdv) and (pessoa=0 or operador=pessoa) and idFinalizadora=6  and Tipo='V')) - coalesce(sum(valor),0), count(*) as Qtty, (select idTesouraria from tesouraria where emissao=dateMov  and idLoja=store and (pdv=0 or idterminal=pdv) and (pessoa=0 or operador=pessoa) and idFinalizadora=6  and tipo='V')  from cartao where emissao=dateMov and typeCartao=1 and idAdministradora <> 1  and idLoja=store and (pdv=0 or terminal=pdv) and (pessoa=0 or idFuncionario=pessoa) union
                                            select cedente, DATE_FORMAT(ifnull(emissao,'00000000'),'%d/%m/%Y'),idTerminal, idFuncionario, 7, "BOLETO",coalesce(sum(valor),0) as Apurado, round(if((select count(*) from tesouraria where emissao=dateMov  and idLoja=store and (pdv=0 or idterminal=pdv) and (pessoa=0 or operador=pessoa) and idFinalizadora=7  AND tipo ='V')=0,0,(select valorInformado from tesouraria where emissao=dateMov  and idLoja=store and (pdv=0 or idterminal=pdv) and (pessoa=0 or operador=pessoa) and idFinalizadora=7  and Tipo='V')),2) as Informado, if((select count(*) from tesouraria where emissao=dateMov  and idLoja=store and (pdv=0 or idterminal=pdv) and (pessoa=0 or operador=pessoa) and idFinalizadora=7  AND tipo ='V')=0,0,(select valorInformado from tesouraria where emissao=dateMov  and idLoja=store and (pdv=0 or idterminal=pdv) and (pessoa=0 or operador=pessoa) and idFinalizadora=7  and Tipo='V')) - coalesce(sum(valor),0), count(*) as Qtty, (select idTesouraria from tesouraria where emissao=dateMov  and idLoja=store and (pdv=0 or idterminal=pdv) and (pessoa=0 or operador=pessoa) and idFinalizadora=7  and tipo='V')  from boleto where emissao=dateMov  and cedente=store and idTerminal = pdv and idFuncionario = pessoa
                                            union
                                                 select
                                                   tab.idLoja, DATE_FORMAT(ifnull(tab.pagamento,'00000000'),'%d/%m/%Y'), tab.idTerminal, tab.Funcionario,
                                                   tab1.finalizadora ,
                                                   CASE tab1.finalizadora when 1 then "RECEBIMENTO - PRESTACAO - DINHEIRO"
                                                                          when 2 then "RECEBIMENTO - PRESTACAO - CHEQUE"
                                                                          when 5 then "RECEBIMENTO - PRESTACAO - CARTAO CREDITO"
                                                                          when 6 then "RECEBIMENTO - PRESTACAO - CARTAO DEBITO"
                                                                          when 10 then "RECEBIMENTO - PRESTACAO - CARTAO VALE"
                                                                          when 11 then "RECEBIMENTO - PRESTACAO - CARTAO POS" end as descri,
                                                   coalesce(sum(round(tab1.valor,2)),0) as Apurado,
                                                   CASE tab1.finalizadora when 1 then if((select count(*) from tesouraria where emissao=dateMov  and idLoja=store and (pdv=0 or idterminal=pdv) and (pessoa=0 or operador=pessoa) and idFinalizadora=1 and tipo='R1')=0,0,(select valorInformado from tesouraria where emissao=dateMov  and idLoja=store and (pdv=0 or idterminal=pdv) and (pessoa=0 or operador=pessoa) and idFinalizadora=1 AND tipo = 'R1'))
                                                                          when 2 then if((select count(*) from tesouraria where emissao=dateMov  and idLoja=store and (pdv=0 or idterminal=pdv) and (pessoa=0 or operador=pessoa) and idFinalizadora=2 AND tipo='R2')=0,0,(select valorInformado from tesouraria where emissao=dateMov  and idLoja=store and (pdv=0 or idterminal=pdv) and (pessoa=0 or operador=pessoa) and idFinalizadora=2 and Tipo='R2'))
                                                                          when 5 then if((select count(*) from tesouraria where emissao=dateMov  and idLoja=store and (pdv=0 or idterminal=pdv) and (pessoa=0 or operador=pessoa) and idFinalizadora=5  AND tipo ='R5')=0,0,(select valorInformado from tesouraria where emissao=dateMov  and idLoja=store and (pdv=0 or idterminal=pdv) and (pessoa=0 or operador=pessoa) and idFinalizadora=5  and Tipo='R5'))
                                                                          when 6 then if((select count(*) from tesouraria where emissao=dateMov  and idLoja=store and (pdv=0 or idterminal=pdv) and (pessoa=0 or operador=pessoa) and idFinalizadora=6  AND tipo ='R6')=0,0,(select valorInformado from tesouraria where emissao=dateMov  and idLoja=store and (pdv=0 or idterminal=pdv) and (pessoa=0 or operador=pessoa) and idFinalizadora=6  and Tipo='R6'))
                                                                          when 10 then if((select count(*) from tesouraria where emissao=dateMov  and idLoja=store and (pdv=0 or idterminal=pdv) and (pessoa=0 or operador=pessoa) and idFinalizadora=10 AND tipo='R10')=0,0,(select valorInformado from tesouraria where emissao=dateMov  and idLoja=store and (pdv=0 or idterminal=pdv) and (pessoa=0 or operador=pessoa) and idFinalizadora=10  and Tipo='R10'))
                                                                          when 11 then if((select count(*) from tesouraria where emissao=dateMov  and idLoja=store and (pdv=0 or idterminal=pdv) and (pessoa=0 or operador=pessoa) and idFinalizadora=11 AND tipo='R11')=0,0,(select valorInformado from tesouraria where emissao=dateMov  and idLoja=store and (pdv=0 or idterminal=pdv) and (pessoa=0 or operador=pessoa) and idFinalizadora=11  and Tipo='R11')) end AS informado,
                                                   CASE tab1.finalizadora when 1 then if((select count(*) from tesouraria where emissao=dateMov  and idLoja=store and (pdv=0 or idterminal=pdv) and (pessoa=0 or operador=pessoa) and idFinalizadora=1 and tipo='R1')=0,0,(select valorInformado from tesouraria where emissao=dateMov  and idLoja=store and (pdv=0 or idterminal=pdv) and (pessoa=0 or operador=pessoa) and idFinalizadora=1 AND tipo = 'R1')) - coalesce(sum(round(tab1.valor,2)),0)
                                                                          when 2 then if((select count(*) from tesouraria where emissao=dateMov  and idLoja=store and (pdv=0 or idterminal=pdv) and (pessoa=0 or operador=pessoa) and idFinalizadora=2 AND tipo='R2')=0,0,(select valorInformado from tesouraria where emissao=dateMov  and idLoja=store and (pdv=0 or idterminal=pdv) and (pessoa=0 or operador=pessoa) and idFinalizadora=2 and Tipo='R2')) - coalesce(sum(round(tab1.valor,2)),0)
                                                                          when 5 then if((select count(*) from tesouraria where emissao=dateMov  and idLoja=store and (pdv=0 or idterminal=pdv) and (pessoa=0 or operador=pessoa) and idFinalizadora=5  AND tipo ='R5')=0,0,(select valorInformado from tesouraria where emissao=dateMov  and idLoja=store and (pdv=0 or idterminal=pdv) and (pessoa=0 or operador=pessoa) and idFinalizadora=5  and Tipo='R5')) - coalesce(sum(round(tab1.valor,2)),0)
                                                                          when 6 then if((select count(*) from tesouraria where emissao=dateMov  and idLoja=store and (pdv=0 or idterminal=pdv) and (pessoa=0 or operador=pessoa) and idFinalizadora=6  AND tipo ='R6')=0,0,(select valorInformado from tesouraria where emissao=dateMov  and idLoja=store and (pdv=0 or idterminal=pdv) and (pessoa=0 or operador=pessoa) and idFinalizadora=6  and Tipo='R6')) - coalesce(sum(round(tab1.valor,2)),0)
                                                                          when 10 then if((select count(*) from tesouraria where emissao=dateMov  and idLoja=store and (pdv=0 or idterminal=pdv) and (pessoa=0 or operador=pessoa) and idFinalizadora=10 AND tipo='R10')=0,0,(select valorInformado from tesouraria where emissao=dateMov  and idLoja=store and (pdv=0 or idterminal=pdv) and (pessoa=0 or operador=pessoa) and idFinalizadora=10  and Tipo='R10')) - coalesce(sum(round(tab1.valor,2)),0)
                                                                          when 11 then if((select count(*) from tesouraria where emissao=dateMov  and idLoja=store and (pdv=0 or idterminal=pdv) and (pessoa=0 or operador=pessoa) and idFinalizadora=11 AND tipo='R11')=0,0,(select valorInformado from tesouraria where emissao=dateMov  and idLoja=store and (pdv=0 or idterminal=pdv) and (pessoa=0 or operador=pessoa) and idFinalizadora=11  and Tipo='R11')) - coalesce(sum(round(tab1.valor,2)),0) end AS QUEBRA,
                                                   count(*) as Qtty,
                                                   CASE tab1.finalizadora when 1 then (select idTesouraria from tesouraria where emissao=dateMov  and idLoja=store and (pdv=0 or idterminal=pdv) and (pessoa=0 or operador=pessoa) and idFinalizadora=1  and tipo='R1')
                                                                          when 2 then (select idTesouraria from tesouraria where emissao=dateMov  and idLoja=store and (pdv=0 or idterminal=pdv) and (pessoa=0 or operador=pessoa) and idFinalizadora=2  and tipo='R2')
                                                                          when 5 then (select idTesouraria from tesouraria where emissao=dateMov  and idLoja=store and (pdv=0 or idterminal=pdv) and (pessoa=0 or operador=pessoa) and idFinalizadora=5  and tipo='R5')
                                                                          when 6 then (select idTesouraria from tesouraria where emissao=dateMov  and idLoja=store and (pdv=0 or idterminal=pdv) and (pessoa=0 or operador=pessoa) and idFinalizadora=6 and tipo='R6')
                                                                          when 10 then (select idTesouraria from tesouraria where emissao=dateMov  and idLoja=store and (pdv=0 or idterminal=pdv) and (pessoa=0 or operador=pessoa) and idFinalizadora=10 and tipo='R10')
                                                                          when 11 then (select idTesouraria from tesouraria where emissao=dateMov  and idLoja=store and (pdv=0 or idterminal=pdv) and (pessoa=0 or operador=pessoa) and idFinalizadora=11 and tipo='R11')  end
                                                           from
                                                               parcela tab
                                                              inner join historicocrediario tab1 on(tab.idParcela = tab1.parcela_idParcela and
                                                                                                    tab.idCrediario = tab1.parcela_idCrediario and
                                                                                                    tab.nr_parcela = tab1.parcela_nr_parcela)
                                                              inner join usuario tab3 on(tab1.usuario = tab3.idUsuario)
                                                              inner join typeHistorico tab4 on(tab1.typeHistorico = tab4.typeHistorico)
                                                                        where
                                                                           pagamento=dateMov  and idLoja=store  and  tab.valorPago > 0 and tab.status in("1","2") and tab4.typeHistorico not in(12) and (tab.idTerminal=0 or idterminal=pdv) and tab.Funcionario=pessoa group by 1,2,3,4,5,6 UNION
                                            select idLoja, DATE_FORMAT(ifnull(emissao,'00000000'),'%d/%m/%Y'),terminal, idFuncionario, 11,"POS", coalesce(sum(valor),0) as Apurado, if((select count(*) from tesouraria where emissao=dateMov  and idLoja=store and (pdv=0 or idterminal=pdv) and (pessoa=0 or operador=pessoa) and idFinalizadora=11 AND tipo='V')=0,0,(select valorInformado from tesouraria where emissao=dateMov  and idLoja=store and (pdv=0 or idterminal=pdv) and (pessoa=0 or operador=pessoa) and idFinalizadora=11  and Tipo='V')) as Informado, if((select count(*) from tesouraria where emissao=dateMov  and idLoja=store and (pdv=0 or idterminal=pdv) and (pessoa=0 or operador=pessoa) and idFinalizadora=11 AND tipo='V')=0,0,(select valorInformado from tesouraria where emissao=dateMov  and idLoja=store and (pdv=0 or idterminal=pdv) and (pessoa=0 or operador=pessoa) and idFinalizadora=11  and Tipo='V')) - coalesce(sum(valor),0), count(*) as Qtty,(select idTesouraria from tesouraria where emissao=dateMov  and idLoja=store and (pdv=0 or idterminal=pdv) and (pessoa=0 or operador=pessoa) and idFinalizadora=11  and tipo='V')   from cartao where emissao=dateMov and typeCartao in(1,2) and idAdministradora = 1  and idLoja=store and (pdv=0 or terminal=pdv) and (pessoa=0 or idFuncionario=pessoa);
              DECLARE CONTINUE HANDLER FOR NOT FOUND SET done = TRUE;
              open basicFonte;

              read_loop: LOOP
                          fetch basicFonte into
                                              VarLoja,
                                              VarData,
                                              VarTerminal,
                                              VarFuncionario,
                                              VarFinalizadora,
                                              VarDescricao,
                                              VarApurado,
                                              VarInformado,
                                              VarQuebra,
                                              VarCount, VarTipo;
                    IF done THEN
                        LEAVE read_loop;
                    END IF;
            insert bof(texto)values(concat("teste01 ",cxCorrente,"-",VarApurado,"-",now(),"-","C","-",caixa,"-",0,"-",VarFinalizadora));
            IF(VarLoja > 0)THEN

               if(typeValue = 0)then
                 if(VarApurado > 0)then
                  CALL conector_inc_caixafinalizadora(cxCorrente,VarApurado,now(),"C",caixa,0,VarFinalizadora);
                    set VarSinal =1;
                 end if;
                    else
                       if(VarInformado > 0)then
                         CALL conector_inc_caixafinalizadora(cxCorrente,VarInformado,now(),"C",caixa,0,VarFinalizadora);
                           set VarSinal=2;
                         end if;
               end if;

            END IF;


            end loop;
         if(VarSinal > 0)then
            update tesouraria set  fechamento=1 where emissao=dateMov;
         end if;
        close basicFonte;

    end;
    when 5 then
                                            select idLoja, emissao,terminal, idFuncionario, 1,"DINHEIRO", coalesce(sum(valorTotal),0) as Apurado,0 as Informado, 0 - coalesce(sum(valorTotal),0), count(*) as Qtty, 'V', @dinheiro from money where emissao=dateMov and idLoja=store and faturado=1 union
                                            select idLoja, emissao,terminal, idFuncionario, 2,"CHEQUE", coalesce(sum(valueCheque),0) as Apurado,0 as Informado, 0 - coalesce(sum(valueCheque),0), count(*) as Qtty, 'V', @cheque from cheque where emissao=dateMov and idLoja=store union
                                            select idLoja, emissao,terminal, idFuncionario, 3,"CREDIARIO - REFERENCIA", coalesce(sum(coalesce(total,0)),0) as Apurado, 0 as Informado, 0 - coalesce(sum(coalesce(total,0)),0), count(*) as Qtty, "VR", @crediario  from  crediario  where emissao=dateMov  and idLoja=store  union
                                            select idLoja, emissao,terminal, idFuncionario, 3,"CREDIARIO - ENCARGOS", coalesce(sum(coalesce(encargos,0)),0) as Apurado, 0 as Informado, 0 - coalesce(sum(coalesce(encargos,0)),0), count(*) as Qtty, "VN", if(@crediario>0,coalesce(sum(coalesce(encargos,0)),0),0)  from  crediario  where emissao=dateMov  and idLoja=store  union
                                            select idLoja, emissao,terminal, idFuncionario, 3,"CREDIARIO - ENTRADAS", coalesce(sum(coalesce(valueEntry,0)),0) as Apurado, 0 as Informado, 0 - coalesce(sum(coalesce(valueEntry,0)),0), count(idCrediario) as Qtty, "VE", if(@crediario,coalesce(sum(coalesce(valueEntry,0)),0),0)  from  crediario  where emissao=dateMov  and idLoja=store union
                                            select idLoja, emissao,terminal, idFuncionario, 4,"CONVENIO",coalesce(sum(valor),0) as Apurado, 0 as informado, 0 - coalesce(sum(valor),0), count(*) as Qtty, "V", @convenio  from conveniomovimento where emissao=dateMov  and idLoja=store  union
                                            select idLoja, emissao,terminal, idFuncionario, 5,"CARTAO CREDITO", coalesce(sum(valor),0) as Apurado, 0 as Informado, 0 - coalesce(sum(valor),0), count(*) as Qtty , "V", @ccredito  from cartao where emissao=dateMov and typeCartao=2 and idAdministradora <> 1  and idLoja=store  union
                                            select idLoja, emissao,terminal, idFuncionario, 6,"CARTAO DEBITO", coalesce(sum(valor),0) as Apurado, 0 as Informado, 0 - coalesce(sum(valor),0), count(*) as Qtty, "V", @cdebito   from cartao where emissao=dateMov and typeCartao=1 and idAdministradora <> 1  and idLoja=store  union
                                            select cedente, ifnull(emissao,'0000-00-00'),idTerminal, idFuncionario, 7, "BOLETO",coalesce(sum(valor),0) as Apurado, 0 Informado, 0 - coalesce(sum(valor),0), count(*) as Qtty, "V", @boleto  from boleto where emissao=dateMov  and cedente=store
                                            union
                                                 select
                                                   tab.idLoja, DATE_FORMAT(ifnull(tab.pagamento,'00000000'),'%Y%m%d'), tab.idTerminal, tab.Funcionario,
                                                   tab1.finalizadora ,
                                                   CASE tab1.finalizadora when 1 then "RECEBIMENTO - PRESTACAO - DINHEIRO"
                                                                          when 2 then "RECEBIMENTO - PRESTACAO - CHEQUE"
                                                                          when 5 then "RECEBIMENTO - PRESTACAO - CARTAO CREDITO"
                                                                          when 6 then "RECEBIMENTO - PRESTACAO - CARTAO DEBITO"
                                                                          when 7 then "RECEBIMENTO - PRESTACAO - CARTAO POS"
                                                                          when 11 then "RECEBIMENTO - PRESTACAO - CARTAO VALE" end ,
                                                   coalesce(sum(round(tab1.valor,2)),0) as Apurado,0.00 as Informado, 0 - coalesce(sum(round(tab1.valor,2)),0), count(*) as Qtty,
                                                   CASE tab1.finalizadora when 1 then "R1"
                                                                          when 2 then "R2"
                                                                          when 5 then "R5"
                                                                          when 6 then "R6"
                                                                          when 7 then "R7"
                                                                          when 11 then "R11" end, 0
                                                           from
                                                               parcela tab
                                                              inner join historicocrediario tab1 on(tab.idParcela = tab1.parcela_idParcela and
                                                                                                    tab.idCrediario = tab1.parcela_idCrediario and
                                                                                                    tab.nr_parcela = tab1.parcela_nr_parcela)
                                                              inner join usuario tab3 on(tab1.usuario = tab3.idUsuario)
                                                              inner join typeHistorico tab4 on(tab1.typeHistorico = tab4.typeHistorico)
                                                                        where
                                                                           pagamento=dateMov  and idLoja=store  and  tab.valorPago > 0 and tab.status in("1","2") and tab4.typeHistorico not in(12)  group by 1,2,3,4,5,6 UNION
                                            select idLoja, emissao,terminal, idFuncionario, 11,"POS", coalesce(sum(valor),0) as Apurado, 0 as Informado, 0 - coalesce(sum(valor),0), count(*) as Qtty, "V", @pos   from cartao where emissao=dateMov and typeCartao in(1,2) and idAdministradora = 1  and idLoja=store;
   end case;


end $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `conector_gera_titulo`
--

DROP PROCEDURE IF EXISTS `conector_gera_titulo`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='' */ $$
CREATE DEFINER=`master`@`localhost` PROCEDURE `conector_gera_titulo`(in find double)
begin
    select max(ifnull(nossoNumero,0))+1 from loja where idLoja=find into @sequencia;
        if(@sequencia is not null)then
            update loja set nossoNumero=@sequencia where idLoja=find;
            select lpad(ifnull(@sequencia,0),11,0);
                else
                    select 0;
        end if;
end $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `conector_historico_client`
--

DROP PROCEDURE IF EXISTS `conector_historico_client`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='' */ $$
CREATE DEFINER=`master`@`localhost` PROCEDURE `conector_historico_client`(in tipo smallint,
                                              find_loja double,
                                              find_cliente double,
                                              escolha smallint,
                                              di date,
                                              df date)
begin

        declare VarCrediarioAcumulado numeric(15,3);
        declare VarCrediarioRecebido numeric(15,3);
        declare VarCrediarioAberto numeric(15,3);
        declare VarChequeAcumulado numeric(15,3);
        declare VarChequeRecebido numeric(15,3);
        declare VarChequeAberto numeric(15,3);
        declare VarConvenioAcumulado numeric(15,3);
        declare VarConvenioRecebido numeric(15,3);
        declare VarConvenioAberto numeric(15,3);
        declare VarCartaoAcumulado numeric(15,3);
        declare VarCartaoRecebido numeric(15,3);
        declare VarCartaoAberto numeric(15,3);


case tipo
  when 1 then
    select
        "CHEQUE",
        tab.idLoja,
        date_format(tab.emissao,"%d/%m/%Y"),
        date_format(tab.Vencimento,"%d/%m/%Y"),
        Concat('No. Cheque',tab.numberCheque, ' Serie. ' ,tab.serie,' ',tab3.nome,' Agencia. ',tab.agencia,' Conta ', tab.contaCorrente) as Historico,
        "1/1",
        tab.valueCheque,
        date_format(if(tab.pagamento = "","00000000",tab.pagamento),'%d/%m/%Y'),
        "" As Atraso,
        case tab.flagPagamento when 'n' then 'A depositar'
                               when 's' then 'Recebido'
                               when 'a' then 'Encaminhar ao Financeiro'
                               when 'u' then 'Sob Custodia' end as Situacao,
        tab.terminal,
        tab.cupom,
        tab.conferencia
            from
                cheque tab
                        inner join loja tab1 on(tab.idLoja = tab1.idLoja)
                        inner join cliente tab2 on(tab.idCliente = tab2.idCliente)
                        inner join banco tab3 on(tab.banco = tab3.idBanco)
                        left join fisica tab4 on(tab2.idCliente = tab4.idCliente)
                        left join juridica tab5 on(tab2.idCliente = tab5.idCliente)
                        left join rural tab6 on(tab2.idCliente = tab6.idCliente)
                                                    where
                                                    (tab2.idCliente = find_cliente) and
                                                    (find_loja=0 or tab1.idLoja=find_loja) and
                                                                           if(escolha=1, tab.emissao between di and df, 0=0) and
                                                                           if(escolha=2, tab.vencimento between di and df, 0=0) and
                                                                           if(escolha=3, tab.pagamento between di and df, 0=0)
     union

    select
           "CREDIARIO",
           tab.idLoja,
           date_format(tab1.emissao, '%d/%m/%Y'),
           date_format(tab.vencimento, '%d/%m/%Y'),
           Concat('Doc Fiscal. ',tab1.cupom,' Terminal. ',tab1.terminal,' Reserva. ',tab1.pedido, ' Tipo Insercao. ',
              if((tab1.cupom=0 and tab1.terminal=0),if(tab1.pedido=0,'MANUAL', 'RESERVA PDV'),'EMISSAO FISCAL')),
           concat(tab1.parcelamento,"/",tab.nr_parcela),
           tab.valorFinanceiro,
           date_format(tab.pagamento, '%d/%m/%Y'),
           ifnull((round(avg(datediff(tab.vencimento,if(((tab.pagamento = '00000000') or (tab.pagamento is null)),now(),date_format(tab.pagamento, '%Y-%m-%d')))))),0) As Atraso,
           CASE tab.status when 0 then "ABERTO"
                           when 1 then "LIQUIDADO"
                           when 2 then "PARCIAL"
                           when 3 then "PERCA"
                           when 4 then "COBRADOR"
                           when 5 then "CANCELADO" end as test,
                    tab1.cupom,
                    tab1.terminal,
                    tab1.batimento
       from parcela tab
            inner join crediario tab1 on(tab.idCrediario = tab1.idCrediario and tab.idLoja = tab1.idLoja)
       where tab.status != 5 and
             tab1.idCliente=find_cliente and
             (find_loja = 0 or tab1.idLoja = find_loja)  and
                                                         if(escolha=1, tab1.emissao between di and df, 0=0) group by 1,2,3,4
       union
select
                     "CARTAO CREDITO",
                     tab.`idloja`,
                     date_format(tab.`emissao`,'%d/%m/%Y'),
                     date_format(tab.`vencimento`,'%d/%m/%Y'),
                     Concat('Doc Fiscal. ',tab.cupom,' Terminal. ',tab.terminal,' Reserva. ',tab.pedido, ' Tipo Insercao. ',
                            if((tab.cupom=0 and tab.terminal=0),if(tab.pedido=0,'MANUAL', 'RESERVA PDV'),'EMISSAO FISCAL'), ' ADM. ', tab1.razao),
                     Concat(tab.parcela,"/",tab.qttyParcela),
                     tab.`valor`,
                     date_format(tab.`PAGAMENTO`,'%d/%m/%Y'),
                     "" As Atraso,
                     case tab.pagamento when '00000000' then 'ABERTO'
                                        else 'RECEBIDO' end as Situacao,
                     tab.`terminal`,
                     tab.`cupom`,
                     tab.batimento
                                 from  cartao tab
                                           inner join administradora tab1 on(tab.idAdministradora = tab1.idAdministradora)
                                           left join (select ped.idPedido,
                                                              ped.idLoja,
                                                              ped.idCliente,
                                                              ped.idFinalizadora,
                                                              ifnull(nota.nr_nota,0)
                                                                                from
                                                                                  (select tab.idPedido,
                                                                                          tab.idLoja,
                                                                                          tab.idCliente,
                                                                                          metodo.idFinalizadora
                                                                                                       from pedido tab
                                                                                                          inner join metodo on(tab.idMetodo = metodo.idMetodo)
                                                                                                                    where  metodo.idFinalizadora in(5,6)) as ped
                                                                                                                          left join(select tab.idPedido,
                                                                                                                                           tab.idLoja,
                                                                                                                                           tab.idCliente,
                                                                                                                                           nf.nr_nota
                                                                                                                                                from pedido tab
                                                                                                                                                  inner join nf on(tab.idPedido =  nf.idPedido)
                                                                                                                                                   inner join metodo on(tab.idMetodo = metodo.idMetodo)
                                                                                                                                              where  metodo.idFinalizadora in(5,6)) as nota on(ped.idCliente = nota.idCliente and ped.idLoja = nota.idLoja and ped.idPedido = nota.idPedido)) as pedNota on
                                                                                              (tab.idLoja = pedNota.idLoja and tab.pedido = pedNota.idPedido)

                                                                                       where
                                                                                               (find_loja=0 or tab.idLoja = find_loja) and
                                                                                               tab1.idAdministradora != 1 and
                                                                                               (ifnull(pedNota.idCliente,0) = find_cliente or find_cliente = 0) and
                                                                                               (pedNota.idCliente is not null) and
                                                                                               if(escolha=1, tab.emissao between di and df, 0=0) and
                                                                                               if(escolha=2, tab.vencimento between di and df, 0=0) and
                                                                                               if(escolha=3, tab.pagamento between di and df, 0=0)
union

select
      "CONVENIO",
      tab.idLoja,
      date_format(tab.emissao, '%d/%m/%Y'),
      date_format(tab.vencimento, '%d/%m/%Y'),
      if(tab.Pedido is not null, concat("Faturado pela reserva ",tab.Pedido,"."),
            if(tab.cupom > 0, concat('Cupom Fiscal N.o ', tab.cupom), concat('Insercao Manual - Codigo Func. N.o ', tab.idFuncionario))),
      concat(tab.parcela,'/',tab.qttyParcelas),
      tab.valor,
      date_format(tab.pagamento, '%d/%m/%Y'),
      "" As Atraso,
      case tab.flagPagamento when 's' then 'Recebido' else 'ABERTO' end,
      tab.terminal,
      tab.cupom,
      tab.conferencia AS batimento
        from convenioMovimento tab
                    inner join loja tab1 on(tab.idLoja = tab1.idLoja)
                    inner join convenio tab2 on(tab.empresa = tab2.idConvenio)
                    inner join cliente tab3 on(tab.idCliente = tab3.idCliente)
                    left join fisica tab4 on(tab3.idCliente = tab4.idCliente)
                    left join juridica tab5 on(tab3.idCliente = tab5.idCliente)
                    left join rural tab6 on(tab3.idCliente = tab6.idCliente)
                                                                        where
                                                                                (find_loja=0 or tab.idLoja = find_loja) and
                                                                                (tab.idCliente = find_cliente) and
                                                                                               if(escolha=1, tab.emissao between di and df, 0=0) and
                                                                                               if(escolha=2, tab.vencimento between di and df, 0=0) and
                                                                                               if(escolha=3, tab.pagamento between date_format(di, '%Y%m%d') and date_format(df, '%Y%m%d'), 0=0);
  when 2 then

select
      tab.idProduto,
      tab1.nome,
      tab.quantidade,
      round(tab.priceVenda,2),
      round(tab.valorTotalNota,2),
      concat(tab3.razao," - Codigo ",tab2.loja),
      date_format(tab2.emissao,'%d/%m/%Y'),
      concat('NF.: ',tab2.nr_nota,'/',tab2.serie)
        from nfItem tab
               inner join produto tab1 on(tab.idProduto = tab1.idProduto)
               inner join nf tab2 on(tab.idNf = tab2.Nf)
               inner join loja tab3 on(tab2.loja = tab3.idloja)
                                                 WHERE
                                                      tab2.statusNf=1 and
                                                      tab2.idCliente=find_cliente and
                                                      (tab2.loja=find_loja or find_loja = 0);
  when 3 then     select
        "CHEQUE",
        tab.idLoja,
        date_format(tab.emissao,"%d/%m/%Y"),
        date_format(tab.Vencimento,"%d/%m/%Y"),
        Concat('No. Cheque',tab.numberCheque, ' Serie. ' ,tab.serie,' ',tab3.nome,' Agencia. ',tab.agencia,' Conta ', tab.contaCorrente) as Historico,
        "1/1",
        tab.valueCheque,
        tab.pagamento,
        "" As Atraso,
        case tab.flagPagamento when 'n' then 'A depositar'
                               when 's' then 'Recebido'
                               when 'a' then 'Encaminhar ao Financeiro'
                               when 'u' then 'Sob Custodia' end as Situacao,
        tab.terminal,
        tab.cupom,
        tab.conferencia
            from
                cheque tab
                        inner join loja tab1 on(tab.idLoja = tab1.idLoja)
                        inner join cliente tab2 on(tab.idCliente = tab2.idCliente)
                        inner join banco tab3 on(tab.banco = tab3.idBanco)
                        left join fisica tab4 on(tab2.idCliente = tab4.idCliente)
                        left join juridica tab5 on(tab2.idCliente = tab5.idCliente)
                        left join rural tab6 on(tab2.idCliente = tab6.idCliente)
                                                    where
                                                    (tab2.idCliente = find_cliente) and
                                                    (find_loja=0 or tab1.idLoja=find_loja) and
                                                                           if(escolha=1, tab.emissao between di and df, 0=0) and
                                                                           if(escolha=2, tab.vencimento between di and df, 0=0) and
                                                                           if(escolha=3, tab.pagamento between di and df, 0=0);
  WHEN 4 THEN 
    select
           "CREDIARIO",
           tab.idLoja,
           date_format(tab1.emissao, '%d/%m/%Y'),
           date_format(tab.vencimento, '%d/%m/%Y'),
           Concat('Doc Fiscal. ',tab1.cupom,' Terminal. ',tab1.terminal,' Reserva. ',tab1.pedido, ' Tipo Insercao. ',
              if((tab1.cupom=0 and tab1.terminal=0),if(tab1.pedido=0,'MANUAL', 'RESERVA PDV'),'EMISSAO FISCAL')),
           concat(tab1.parcelamento,"/",tab.nr_parcela),
           tab.valorFinanceiro,
           date_format(tab.pagamento, '%d/%m/%Y'),
           ifnull((round(avg(datediff(tab.vencimento,if(((tab.pagamento = '00000000') or (tab.pagamento is null)),now(),date_format(tab.pagamento, '%Y-%m-%d')))))),0) As Atraso,
           CASE tab.status when 0 then "ABERTO"
                           when 1 then "LIQUIDADO"
                           when 2 then "PARCIAL"
                           when 3 then "PERCA"
                           when 4 then "COBRADOR"
                           when 5 then "CANCELADO" end as test,
                    tab1.cupom,
                    tab1.terminal,
                    tab1.batimento
       from parcela tab
            inner join crediario tab1 on(tab.idCrediario = tab1.idCrediario and tab.idLoja = tab1.idLoja)
       where tab.status != 5 and
             tab1.idCliente=find_cliente and
             (find_loja = 0 or tab1.idLoja = find_loja)  and
                                                         if(escolha=1, tab1.emissao between di and df, 0=0)  group by 1,2,3,4;
      WHEN 5 THEN select
                     "CARTAO CREDITO",
                     tab.`idloja`,
                     date_format(tab.`emissao`,'%d/%m/%Y'),
                     date_format(tab.`vencimento`,'%d/%m/%Y'),
                     Concat('Doc Fiscal. ',tab.cupom,' Terminal. ',tab.terminal,' Reserva. ',tab.pedido, ' Tipo Insercao. ',
                            if((tab.cupom=0 and tab.terminal=0),if(tab.pedido=0,'MANUAL', 'RESERVA PDV'),'EMISSAO FISCAL'), ' ADM. ', tab1.razao),
                     Concat(tab.parcela,"/",tab.qttyParcela),
                     tab.`valor`,
                     date_format(tab.`PAGAMENTO`,'%d/%m/%Y'),
                     "" As Atraso,
                     case tab.pagamento when '00000000' then 'ABERTO'
                                        else 'RECEBIDO' end as Situacao,
                     tab.`terminal`,
                     tab.`cupom`,
                     tab.batimento
                                 from  cartao tab
                                           inner join administradora tab1 on(tab.idAdministradora = tab1.idAdministradora)
                                           left join (select ped.idPedido,
                                                              ped.idLoja,
                                                              ped.idCliente,
                                                              ped.idFinalizadora,
                                                              ifnull(nota.nr_nota,0)
                                                                                from
                                                                                  (select tab.idPedido,
                                                                                          tab.idLoja,
                                                                                          tab.idCliente,
                                                                                          metodo.idFinalizadora
                                                                                                       from pedido tab
                                                                                                          inner join metodo on(tab.idMetodo = metodo.idMetodo)
                                                                                                                    where  metodo.idFinalizadora in(5,6)) as ped
                                                                                                                          left join(select tab.idPedido,
                                                                                                                                           tab.idLoja,
                                                                                                                                           tab.idCliente,
                                                                                                                                           nf.nr_nota
                                                                                                                                                from pedido tab
                                                                                                                                                  inner join nf on(tab.idPedido =  nf.idPedido)
                                                                                                                                                   inner join metodo on(tab.idMetodo = metodo.idMetodo)
                                                                                                                                              where  metodo.idFinalizadora in(5,6)) as nota on(ped.idCliente = nota.idCliente and ped.idLoja = nota.idLoja and ped.idPedido = nota.idPedido)) as pedNota on
                                                                                              (tab.idLoja = pedNota.idLoja and tab.pedido = pedNota.idPedido)

                                                                                       where
                                                                                               (tab.idLoja = find_loja or find_loja = 0) and
                                                                                               tab1.idAdministradora != 1 and
                                                                                               (ifnull(pedNota.idCliente,0) = find_cliente or find_cliente = 0) and
                                                                                               (pedNota.idCliente is not null) and
                                                                                               if(escolha=1, tab.emissao between di and df, 0=0) and
                                                                                               if(escolha=2, tab.vencimento between di and df, 0=0) and
                                                                                               if(escolha=3, tab.pagamento between di and df, 0=0);
      WHEN 6 THEN 
select
      "CONVENIO",
      tab.idLoja,
      date_format(tab.emissao, '%d/%m/%Y'),
      date_format(tab.vencimento, '%d/%m/%Y'),
      if(tab.Pedido is not null, concat("Faturado pela reserva ",tab.Pedido,"."),
            if(tab.cupom > 0, concat('Cupom Fiscal N.o ', tab.cupom), concat('Insercao Manual - Codigo Func. N.o ', tab.idFuncionario))),
      concat(tab.parcela,'/',tab.qttyParcelas),
      tab.valor,
      date_format(tab.pagamento, '%d/%m/%Y'),
      "" As Atraso,
      case tab.flagPagamento when 's' then 'Recebido' else 'ABERTO' end,
      tab.terminal,
      tab.cupom,
      tab.conferencia AS batimento
        from convenioMovimento tab
                    inner join loja tab1 on(tab.idLoja = tab1.idLoja)
                    inner join convenio tab2 on(tab.empresa = tab2.idConvenio)
                    inner join cliente tab3 on(tab.idCliente = tab3.idCliente)
                    left join fisica tab4 on(tab3.idCliente = tab4.idCliente)
                    left join juridica tab5 on(tab3.idCliente = tab5.idCliente)
                    left join rural tab6 on(tab3.idCliente = tab6.idCliente)
                                                                        where
                                                                                (find_loja=0 or tab.idLoja = find_loja) and
                                                                                (tab.idCliente = find_cliente) and
                                                                                               if(escolha=1, tab.emissao between di and df, 0=0) and
                                                                                               if(escolha=2, tab.vencimento between di and df, 0=0) and
                                                                                               if(escolha=3, tab.pagamento between date_format(di, '%Y%m%d') and date_format(df, '%Y%m%d'), 0=0);
    when 7 then

select
      ifnull(sum(tab.quantidade),0)
        from nfItem tab
               inner join produto tab1 on(tab.idProduto = tab1.idProduto)
               inner join nf tab2 on(tab.idNf = tab2.Nf)
               inner join loja tab3 on(tab2.loja = tab3.idloja)
                                                 WHERE
                                                      tab2.statusNf=1 and
                                                      tab2.idCliente=find_cliente and
                                                      (tab2.loja=find_loja or find_loja = 0);
    when 8 then

select sum(tab.valor - tab.taxaValor),
       sum(if(((tab.pagamento is not null)and(tab.pagamento != "00000000")and(tab.pagamento != "")),(tab.valor-taxaValor),0)),
       (sum(tab.valor-tab.taxaValor) -
       sum(if(((tab.pagamento is not null)and(tab.pagamento != "00000000")and(tab.pagamento != "")),(tab.valor-tab.taxaValor),0))) receber
                                             from  cartao tab
                                           inner join administradora tab1 on(tab.idAdministradora = tab1.idAdministradora)
                                           left join (select ped.idPedido,
                                                              ped.idLoja,
                                                              ped.idCliente,
                                                              ped.idFinalizadora,
                                                              ifnull(nota.nr_nota,0)
                                                                                from
                                                                                  (select tab.idPedido,
                                                                                          tab.idLoja,
                                                                                          tab.idCliente,
                                                                                          metodo.idFinalizadora
                                                                                                       from pedido tab
                                                                                                          inner join metodo on(tab.idMetodo = metodo.idMetodo)
                                                                                                                    where  metodo.idFinalizadora in(5,6)) as ped
                                                                                                                          left join(select tab.idPedido,
                                                                                                                                           tab.idLoja,
                                                                                                                                           tab.idCliente,
                                                                                                                                           nf.nr_nota
                                                                                                                                                from pedido tab
                                                                                                                                                  inner join nf on(tab.idPedido =  nf.idPedido)
                                                                                                                                                   inner join metodo on(tab.idMetodo = metodo.idMetodo)
                                                                                                                                              where  metodo.idFinalizadora in(5,6)) as nota on(ped.idCliente = nota.idCliente and ped.idLoja = nota.idLoja and ped.idPedido = nota.idPedido)) as pedNota on
                                                                                              (tab.idLoja = pedNota.idLoja and tab.pedido = pedNota.idPedido)

                                                                                       where
                                                                                               (find_loja=0 or tab.idLoja = find_loja) and
                                                                                               tab1.idAdministradora != 1 and
                                                                                               (ifnull(pedNota.idCliente,0) = find_cliente or find_cliente = 0) and
                                                                                               (pedNota.idCliente is not null) and
                                                                                               if(escolha=1, tab.emissao between di and df, 0=0) and
                                                                                               if(escolha=2, tab.vencimento between di and df, 0=0) and
                                                                                               if(escolha=3, tab.pagamento between di and df, 0=0)
                                                                                                                                            into 
                                                                                                                                                VarCartaoAcumulado,
                                                                                                                                                VarCartaoRecebido,
                                                                                                                                                VarCartaoAberto;
                                                                                                                                                if(VarCartaoAcumulado is null)then set VarCartaoAcumulado=0; end if;
                                                                                                                                                if(VarCartaoRecebido is null)then set VarCartaoRecebido=0; end if;
                                                                                                                                                if(VarCartaoAberto is null)then set VarCartaoAberto=0; end if;

    when 9 then

select sum(tab.valor) Aberto,
       sum(tab.valorPago) Recebido,
       (sum(tab.valor)-
       sum(tab.valorPago))
        from convenioMovimento tab
                    inner join loja tab1 on(tab.idLoja = tab1.idLoja)
                    inner join convenio tab2 on(tab.empresa = tab2.idConvenio)
                    inner join cliente tab3 on(tab.idCliente = tab3.idCliente)
                    left join fisica tab4 on(tab3.idCliente = tab4.idCliente)
                    left join juridica tab5 on(tab3.idCliente = tab5.idCliente)
                    left join rural tab6 on(tab3.idCliente = tab6.idCliente)
                                                                        where
                                                                                (find_loja=0 or tab.idLoja = find_loja) and
                                                                                (tab.idCliente = find_cliente) and
                                                                                               if(escolha=1, tab.emissao between di and df, 0=0) and
                                                                                               if(escolha=2, tab.vencimento between di and df, 0=0) and
                                                                                               if(escolha=3, tab.pagamento between date_format(di, '%Y%m%d') and date_format(df, '%Y%m%d'), 0=0)
                                                                                                                                                            into
                                                                                                                                                                VarConvenioAcumulado,
                                                                                                                                                                VarConvenioRecebido,
                                                                                                                                                                VarConvenioAberto;
                                                                                                                                                                if(VarConvenioAcumulado is null)then set VarConvenioAcumulado=0; end if;
                                                                                                                                                                if(VarConvenioRecebido  is null)then set VarConvenioRecebido=0; end if;
                                                                                                                                                                if(VarConvenioAberto is null)then set VarConvenioAberto=0; end if;

    when 10 then
select sum(tab.valueCheque) Acumulado,
       sum(tab.valorPago) Recebido,
       (sum(tab.valueCheque)-
            sum(tab.valorPago))
            from
                cheque tab
                        inner join loja tab1 on(tab.idLoja = tab1.idLoja)
                        inner join cliente tab2 on(tab.idCliente = tab2.idCliente)
                        inner join banco tab3 on(tab.banco = tab3.idBanco)
                        left join fisica tab4 on(tab2.idCliente = tab4.idCliente)
                        left join juridica tab5 on(tab2.idCliente = tab5.idCliente)
                        left join rural tab6 on(tab2.idCliente = tab6.idCliente)
                                                    where
                                                    (tab2.idCliente = find_cliente) and
                                                    (find_loja=0 or tab1.idLoja=find_loja) and
                                                                           if(escolha=1, tab.emissao between di and df, 0=0) and
                                                                           if(escolha=2, tab.vencimento between di and df, 0=0) and
                                                                           if(escolha=3, tab.pagamento between di and df, 0=0)
                                                                                                                into
                                                                                                                        VarChequeAcumulado,
                                                                                                                        VarChequeRecebido,
                                                                                                                        VarChequeAberto;
    when 11 then
    select ifnull(sum(tab.valorFinanceiro + tab.acrescimo),0) Acumulado,
       ifnull(sum(tab.valorPago - tab.desconto),0) Recebido,
        ifnull((sum(tab.valorFinanceiro + tab.acrescimo)-
        sum(tab.valorPago - tab.desconto)),0) Aberto
    from parcela tab
            inner join crediario tab1 on(tab.idCrediario = tab1.idCrediario and tab.idLoja = tab1.idLoja)
       where tab.status != 5 and
             tab1.idCliente=find_cliente and
             (find_loja = 0 or tab1.idLoja = find_loja)  and
                                                         if(escolha=1, tab1.emissao between di and df, 0=0)
                                                                            into
                                                                                    VarCrediarioAcumulado,
                                                                                    VarCrediarioRecebido,
                                                                                    VarCrediarioAberto;

                                                                                    if(VarCrediarioAcumulado is null)then set VarCrediarioAcumulado=0; end if;
                                                                                    if(VarCrediarioRecebido is null)then set VarCrediarioRecebido=0; end if;
                                                                                    if(VarCrediarioAberto is null)then set VarCrediarioAberto=0; end if;


    when 12 then

select sum(tab.valor - tab.taxaValor),
       sum(if(((tab.pagamento is not null)and(tab.pagamento != "00000000")and(tab.pagamento != "")),(tab.valor-taxaValor),0)),
       (sum(tab.valor-tab.taxaValor) -
       sum(if(((tab.pagamento is not null)and(tab.pagamento != "00000000")and(tab.pagamento != "")),(tab.valor-tab.taxaValor),0))) receber
                                             from  cartao tab
                                           inner join administradora tab1 on(tab.idAdministradora = tab1.idAdministradora)
                                           left join (select ped.idPedido,
                                                              ped.idLoja,
                                                              ped.idCliente,
                                                              ped.idFinalizadora,
                                                              ifnull(nota.nr_nota,0)
                                                                                from
                                                                                  (select tab.idPedido,
                                                                                          tab.idLoja,
                                                                                          tab.idCliente,
                                                                                          metodo.idFinalizadora
                                                                                                       from pedido tab
                                                                                                          inner join metodo on(tab.idMetodo = metodo.idMetodo)
                                                                                                                    where  metodo.idFinalizadora in(5,6)) as ped
                                                                                                                          left join(select tab.idPedido,
                                                                                                                                           tab.idLoja,
                                                                                                                                           tab.idCliente,
                                                                                                                                           nf.nr_nota
                                                                                                                                                from pedido tab
                                                                                                                                                  inner join nf on(tab.idPedido =  nf.idPedido)
                                                                                                                                                   inner join metodo on(tab.idMetodo = metodo.idMetodo)
                                                                                                                                              where  metodo.idFinalizadora in(5,6)) as nota on(ped.idCliente = nota.idCliente and ped.idLoja = nota.idLoja and ped.idPedido = nota.idPedido)) as pedNota on
                                                                                              (tab.idLoja = pedNota.idLoja and tab.pedido = pedNota.idPedido)

                                                                                       where
                                                                                               (find_loja=0 or tab.idLoja = find_loja)  and
                                                                                               tab1.idAdministradora != 1 and
                                                                                               (ifnull(pedNota.idCliente,0) = find_cliente or find_cliente = 0) and
                                                                                               (pedNota.idCliente is not null) and
                                                                                               if(escolha=1, tab.emissao between di and df, 0=0) and
                                                                                               if(escolha=2, tab.vencimento between di and df, 0=0) and
                                                                                               if(escolha=3, tab.pagamento between di and df, 0=0)
                                                                                                                                            into
                                                                                                                                                VarCartaoAcumulado,
                                                                                                                                                VarCartaoRecebido,
                                                                                                                                                VarCartaoAberto;
                                                                                                                                                if(VarCartaoAcumulado is null)then set VarCartaoAcumulado=0; end if;
                                                                                                                                                if(VarCartaoRecebido is null)then set VarCartaoRecebido=0; end if;
                                                                                                                                                if(VarCartaoAberto is null)then set VarCartaoAberto=0; end if;


select sum(tab.valor) Aberto,
       sum(tab.valorPago) Recebido,
       (sum(tab.valor)-
       sum(tab.valorPago))
        from convenioMovimento tab
                    inner join loja tab1 on(tab.idLoja = tab1.idLoja)
                    inner join convenio tab2 on(tab.empresa = tab2.idConvenio)
                    inner join cliente tab3 on(tab.idCliente = tab3.idCliente)
                    left join fisica tab4 on(tab3.idCliente = tab4.idCliente)
                    left join juridica tab5 on(tab3.idCliente = tab5.idCliente)
                    left join rural tab6 on(tab3.idCliente = tab6.idCliente)
                                                                        where
                                                                                (find_loja=0 or tab.idLoja = find_loja) and
                                                                                (tab.idCliente = find_cliente) and
                                                                                               if(escolha=1, tab.emissao between di and df, 0=0) and
                                                                                               if(escolha=2, tab.vencimento between di and df, 0=0) and
                                                                                               if(escolha=3, tab.pagamento between date_format(di, '%Y%m%d') and date_format(df, '%Y%m%d'), 0=0)
                                                                                                                                                            into
                                                                                                                                                                VarConvenioAcumulado,
                                                                                                                                                                VarConvenioRecebido,
                                                                                                                                                                VarConvenioAberto;
                                                                                                                                                                if(VarConvenioAcumulado is null)then set VarConvenioAcumulado=0; end if;
                                                                                                                                                                if(VarConvenioRecebido  is null)then set VarConvenioRecebido=0; end if;
                                                                                                                                                                if(VarConvenioAberto is null)then set VarConvenioAberto=0; end if;
select sum(tab.valueCheque) Acumulado,
       sum(tab.valorPago) Recebido,
       (sum(tab.valueCheque)-
            sum(tab.valorPago))
            from
                cheque tab
                        inner join loja tab1 on(tab.idLoja = tab1.idLoja)
                        inner join cliente tab2 on(tab.idCliente = tab2.idCliente)
                        inner join banco tab3 on(tab.banco = tab3.idBanco)
                        left join fisica tab4 on(tab2.idCliente = tab4.idCliente)
                        left join juridica tab5 on(tab2.idCliente = tab5.idCliente)
                        left join rural tab6 on(tab2.idCliente = tab6.idCliente)
                                                    where
                                                    (tab2.idCliente = find_cliente) and
                                                    (find_loja=0 or tab1.idLoja=find_loja) and
                                                                           if(escolha=1, tab.emissao between di and df, 0=0) and
                                                                           if(escolha=2, tab.vencimento between di and df, 0=0) and
                                                                           if(escolha=3, tab.pagamento between di and df, 0=0)
                                                                                                                into
                                                                                                                        VarChequeAcumulado,
                                                                                                                        VarChequeRecebido,
                                                                                                                        VarChequeAberto;
                                                                                                                        if(VarChequeAcumulado is null)then set VarChequeAcumulado=0; end if;
                                                                                                                        if(VarChequeRecebido is null)then set VarChequeRecebido=0; end if;
                                                                                                                        if(VarChequeAberto is null)then set VarChequeAberto=0; end if;
select ifnull(sum(tab.valorFinanceiro + tab.acrescimo),0) Acumulado,
       ifnull(sum(tab.valorPago - tab.desconto),0) Recebido,
        ifnull((sum(tab.valorFinanceiro + tab.acrescimo)-
        sum(tab.valorPago - tab.desconto)),0) Aberto
    from parcela tab
            inner join crediario tab1 on(tab.idCrediario = tab1.idCrediario and tab.idLoja = tab1.idLoja)
       where tab.status != 5 and
             tab1.idCliente=find_cliente and
             (find_loja = 0 or tab1.idLoja = find_loja)  and
                                                         if(escolha=1, tab1.emissao between di and df, 0=0)
                                                                                    into
                                                                                    VarCrediarioAcumulado,
                                                                                    VarCrediarioRecebido,
                                                                                    VarCrediarioAberto;

                                                                                    if(VarCrediarioAcumulado is null)then set VarCrediarioAcumulado=0; end if;
                                                                                    if(VarCrediarioRecebido is null)then set VarCrediarioRecebido=0; end if;
                                                                                    if(VarCrediarioAberto is null)then set VarCrediarioAberto=0; end if;



select
        round((VarCartaoAcumulado + VarCrediarioAcumulado + VarChequeAcumulado + VarConvenioAcumulado),2) as Total_Acumulado,
        round((VarCartaoRecebido + VarCrediarioRecebido + VarChequeRecebido + VarConvenioRecebido),2) as Total_Recebido,
        round((VarCartaoAberto + VarCrediarioAberto + VarChequeAberto + VarConvenioAberto),2) as Total_Aberto;

  when 0 then

select
      ifnull(abs(round(avg(datediff(tab.vencimento,if(((tab.pagamento = '00000000') or (tab.pagamento is null)),now(),date_format(tab.pagamento, '%Y-%m-%d')))))),0)
                                                from parcela tab
                                                        inner join crediario tab1 on(tab.idCrediario = tab1.idCrediario)
                                                                                                    where tab1.idCliente=find_cliente and
                                                                                                          datediff(tab.vencimento,if(((tab.pagamento = '00000000') or (tab.pagamento is null)),now(),date_format(tab.pagamento, '%Y-%m-%d'))) < 0;
  when 13 then

      select limiteRenda, variacaoLimite from paramentro_crediario where Loja=find_loja into @a, @b;

      SELECT round(salarioComprovado,2), @a, @b, round(((salarioComprovado*@a)/100),2) as limite FROM clienteprofissional where idCliente =find_cliente and default1 =1;

  when 14 then

    select round(limiteCheque,2), round(limiteConvenio,2) from clienteRisco where idCliente=find_cliente;

  when 15 then

select sum(tab.valor - tab.taxaValor),
       sum(if(((tab.pagamento is not null)and(tab.pagamento != "00000000")and(tab.pagamento != "")),(tab.valor-taxaValor),0)),
       (sum(tab.valor-tab.taxaValor) -
       sum(if(((tab.pagamento is not null)and(tab.pagamento != "00000000")and(tab.pagamento != "")),(tab.valor-tab.taxaValor),0))) receber
                                             from  cartao tab
                                           inner join administradora tab1 on(tab.idAdministradora = tab1.idAdministradora)
                                           left join (select ped.idPedido,
                                                              ped.idLoja,
                                                              ped.idCliente,
                                                              ped.idFinalizadora,
                                                              ifnull(nota.nr_nota,0)
                                                                                from
                                                                                  (select tab.idPedido,
                                                                                          tab.idLoja,
                                                                                          tab.idCliente,
                                                                                          metodo.idFinalizadora
                                                                                                       from pedido tab
                                                                                                          inner join metodo on(tab.idMetodo = metodo.idMetodo)
                                                                                                                    where  metodo.idFinalizadora in(5,6)) as ped
                                                                                                                          left join(select tab.idPedido,
                                                                                                                                           tab.idLoja,
                                                                                                                                           tab.idCliente,
                                                                                                                                           nf.nr_nota
                                                                                                                                                from pedido tab
                                                                                                                                                  inner join nf on(tab.idPedido =  nf.idPedido)
                                                                                                                                                   inner join metodo on(tab.idMetodo = metodo.idMetodo)
                                                                                                                                              where  metodo.idFinalizadora in(5,6)) as nota on(ped.idCliente = nota.idCliente and ped.idLoja = nota.idLoja and ped.idPedido = nota.idPedido)) as pedNota on
                                                                                              (tab.idLoja = pedNota.idLoja and tab.pedido = pedNota.idPedido)

                                                                                       where
                                                                                               (find_loja=0 or tab.idLoja = find_loja)  and
                                                                                               tab1.idAdministradora != 1 and
                                                                                               (ifnull(pedNota.idCliente,0) = find_cliente or find_cliente = 0) and
                                                                                               (pedNota.idCliente is not null) and
                                                                                               tab.vencimento between ADDDATE(LAST_DAY(SUBDATE(CURDATE(), INTERVAL 1 MONTH)), 1) and last_day(sysdate())
                                                                                                                                            into
                                                                                                                                                VarCartaoAcumulado,
                                                                                                                                                VarCartaoRecebido,
                                                                                                                                                VarCartaoAberto;
                                                                                                                                                if(VarCartaoAcumulado is null)then set VarCartaoAcumulado=0; end if;
                                                                                                                                                if(VarCartaoRecebido is null)then set VarCartaoRecebido=0; end if;
                                                                                                                                                if(VarCartaoAberto is null)then set VarCartaoAberto=0; end if;


select sum(tab.valor) Aberto,
       sum(tab.valorPago) Recebido,
       (sum(tab.valor)-
       sum(tab.valorPago))
        from convenioMovimento tab
                    inner join loja tab1 on(tab.idLoja = tab1.idLoja)
                    inner join convenio tab2 on(tab.empresa = tab2.idConvenio)
                    inner join cliente tab3 on(tab.idCliente = tab3.idCliente)
                    left join fisica tab4 on(tab3.idCliente = tab4.idCliente)
                    left join juridica tab5 on(tab3.idCliente = tab5.idCliente)
                    left join rural tab6 on(tab3.idCliente = tab6.idCliente)
                                                                        where
                                                                                (find_loja=0 or tab.idLoja = find_loja) and
                                                                                (tab.idCliente = find_cliente) and
                                                                                               tab.vencimento between ADDDATE(LAST_DAY(SUBDATE(CURDATE(), INTERVAL 1 MONTH)), 1) and last_day(sysdate())
                                                                                                                                                            into
                                                                                                                                                                VarConvenioAcumulado,
                                                                                                                                                                VarConvenioRecebido,
                                                                                                                                                                VarConvenioAberto;
                                                                                                                                                                if(VarConvenioAcumulado is null)then set VarConvenioAcumulado=0; end if;
                                                                                                                                                                if(VarConvenioRecebido  is null)then set VarConvenioRecebido=0; end if;
                                                                                                                                                                if(VarConvenioAberto is null)then set VarConvenioAberto=0; end if;
select sum(tab.valueCheque) Acumulado,
       sum(tab.valorPago) Recebido,
       (sum(tab.valueCheque)-
            sum(tab.valorPago))
            from
                cheque tab
                        inner join loja tab1 on(tab.idLoja = tab1.idLoja)
                        inner join cliente tab2 on(tab.idCliente = tab2.idCliente)
                        inner join banco tab3 on(tab.banco = tab3.idBanco)
                        left join fisica tab4 on(tab2.idCliente = tab4.idCliente)
                        left join juridica tab5 on(tab2.idCliente = tab5.idCliente)
                        left join rural tab6 on(tab2.idCliente = tab6.idCliente)
                                                    where
                                                    (tab2.idCliente = find_cliente) and
                                                    (find_loja=0 or tab1.idLoja=find_loja) and
                                                                                               tab.vencimento between ADDDATE(LAST_DAY(SUBDATE(CURDATE(), INTERVAL 1 MONTH)), 1) and last_day(sysdate())
                                                                                                                into
                                                                                                                        VarChequeAcumulado,
                                                                                                                        VarChequeRecebido,
                                                                                                                        VarChequeAberto;
                                                                                                                        if(VarChequeAcumulado is null)then set VarChequeAcumulado=0; end if;
                                                                                                                        if(VarChequeRecebido is null)then set VarChequeRecebido=0; end if;
                                                                                                                        if(VarChequeAberto is null)then set VarChequeAberto=0; end if;
select ifnull(sum(tab.valorFinanceiro + tab.acrescimo),0) Acumulado,
       ifnull(sum(tab.valorPago - tab.desconto),0) Recebido,
        ifnull((sum(tab.valorFinanceiro + tab.acrescimo)-
        sum(tab.valorPago - tab.desconto)),0) Aberto
    from parcela tab
            inner join crediario tab1 on(tab.idCrediario = tab1.idCrediario and tab.idLoja = tab1.idLoja)
       where tab.status != 5 and
             tab1.idCliente=find_cliente and
             (find_loja = 0 or tab1.idLoja = find_loja)  and
              tab.vencimento between ADDDATE(LAST_DAY(SUBDATE(CURDATE(), INTERVAL 1 MONTH)), 1) and last_day(sysdate())
                                                                                    into
                                                                                    VarCrediarioAcumulado,
                                                                                    VarCrediarioRecebido,
                                                                                    VarCrediarioAberto;

                                                                                    if(VarCrediarioAcumulado is null)then set VarCrediarioAcumulado=0; end if;
                                                                                    if(VarCrediarioRecebido is null)then set VarCrediarioRecebido=0; end if;
                                                                                    if(VarCrediarioAberto is null)then set VarCrediarioAberto=0; end if;



select
        round((VarCartaoAcumulado + VarCrediarioAcumulado + VarChequeAcumulado + VarConvenioAcumulado),2) as Total_Acumulado,
        round((VarCartaoRecebido + VarCrediarioRecebido + VarChequeRecebido + VarConvenioRecebido),2) as Total_Recebido,
        round((VarCartaoAberto + VarCrediarioAberto + VarChequeAberto + VarConvenioAberto),2) as Total_Aberto;

end case;
end $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `conector_inc_administradora`
--

DROP PROCEDURE IF EXISTS `conector_inc_administradora`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='' */ $$
CREATE DEFINER=`master`@`localhost` PROCEDURE `conector_inc_administradora`(
  `inc_razao` VARCHAR(40),
  `inc_descricao` VARCHAR(20),
  `inc_taxa` DECIMAL(5,3),
  `inc_prazo` INT(11),
  `inc_idtypeCartao` INT,
  `inc_cnpj` VARCHAR(14),
  `inc_ie` VARCHAR(30),
  `inc_inclusao` DATE,
  `inc_cep` VARCHAR(8),
  `inc_rua` VARCHAR(45),
  `inc_numero` INT,
  `inc_bairro` VARCHAR(45),
  `inc_municipio` VARCHAR(45),
  `inc_idestado` INT,
  `inc_uf` CHAR(2),
  `inc_inativo` smallint(6) ,
  `inc_historicoCredito` SMALLINT,
  `inc_historicoDebito` SMALLINT,
  `inc_networkCard` INT,
  `inc_networkFix` CHAR(1),
  `inc_idconectCard` INT)
begin


SET foreign_key_checks=0;
 SELECT count(*),idCliente FROM juridica where cnpj=inc_cnpj into @a, @b;
if(@a = 0)then
    SELECT (ifnull(auto_increment,1)) FROM information_schema.`TABLES` where table_schema='conector' and table_name='cliente' into @chaveCliente;
        else
            set @chaveCliente = @b;
            end if;


    insert into administradora(  idAdministradora, `razao`,
  `descricao`,
  `taxa`,
  `prazo`,
  `idtypeCartao`,
  `cnpj`,
  `ie`,
  `inclusao`,
  `cep`,
  `rua`,
  `numero`,
  `bairro`,
  `municipio`,
  `idestado`,
  `uf`,
  `inativo`,
  `historicoCredito`,
  `historicoDebito`,
  `networkCard`,
  `networkFix`,
  `idconectCard`)values(  @chaveCliente, `inc_razao`,
  `inc_descricao`,
  `inc_taxa`,
  `inc_prazo`,
  `inc_idtypeCartao`,
  `inc_cnpj`,
  `inc_ie`,
  `inc_inclusao`,
  `inc_cep`,
  `inc_rua`,
  `inc_numero`,
  `inc_bairro`,
  `inc_municipio`,
  `inc_idestado`,
  `inc_uf`,
  `inc_inativo`,
  `inc_historicoCredito`,
  `inc_historicoDebito`,
  `inc_networkCard`,
  `inc_networkFix`,
  `inc_idconectCard`);
SET foreign_key_checks=1;

  	select @chaveCliente as codigo;
  end $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `conector_inc_aliquota`
--

DROP PROCEDURE IF EXISTS `conector_inc_aliquota`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='STRICT_TRANS_TABLES,STRICT_ALL_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,TRADITIONAL,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION' */ $$
CREATE DEFINER=`master`@`localhost` PROCEDURE `conector_inc_aliquota`(
                                        in inc_idaliquota char(2),
                                        in inc_nome varchar(30),
                                        in inc_aliquota decimal(10,4),
                                        in inc_reducao decimal(10,4),
                                        in inc_tipo char(1),
                                        in inc_cst char(3),
                                        in inc_mesagem varchar(45),
                                        in inc_status boolean
                                      )
begin
      insert into aliquota
                    (idaliquota,nome,aliquota,reducao,tipo,cst,mesagem,status)
      values
                    (inc_idaliquota,inc_nome,inc_aliquota,inc_reducao,inc_tipo,inc_cst,inc_mesagem,inc_status);
      select last_insert_id() as codigo from aliquota where idaliquota=last_insert_id();
end $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `conector_inc_avalista`
--

DROP PROCEDURE IF EXISTS `conector_inc_avalista`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='' */ $$
CREATE DEFINER=`root`@`%` PROCEDURE `conector_inc_avalista`(in inc_cliente int(11), in inc_avalista int(11))
begin
    if((select count(*) from avalista where avalista=inc_avalista and cliente=inc_cliente) = 0) then
      IF(inc_cliente <> inc_avalista)THEN
        replace into avalista(cliente,avalista)values(inc_cliente, inc_avalista);
      END IF;
    end if;
end $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `conector_inc_banco`
--

DROP PROCEDURE IF EXISTS `conector_inc_banco`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='' */ $$
CREATE DEFINER=`master`@`localhost` PROCEDURE `conector_inc_banco`(
  in `inc_idbanco` INT,
  in `inc_Nome` VARCHAR(30),
  in `inc_digito` CHAR(1))
begin
    insert into banco(idBanco,nome,digito)values(inc_idbanco,inc_nome,inc_digito);
  end $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `conector_inc_boletos`
--

DROP PROCEDURE IF EXISTS `conector_inc_boletos`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='' */ $$
CREATE DEFINER=`master`@`localhost` PROCEDURE `conector_inc_boletos`(
                in inc_cedente INT(11),
                in inc_sacador INT(11),
                in inc_codBarra VARCHAR(44),
                in inc_banco VARCHAR(3),
                in inc_moeda VARCHAR(1),
                in inc_agencia VARCHAR(4),
                in inc_nossoNumero VARCHAR(11),
                in inc_convenio VARCHAR(8),
                in inc_valor VARCHAR(10),
                in inc_vencimentoValue VARCHAR(4),
                in inc_dv1 VARCHAR(1),
                in inc_dv2 VARCHAR(1),
                in inc_dv3 VARCHAR(1),
                in inc_dvFull VARCHAR(1),
                in inc_carteira VARCHAR(2),
                in inc_emissao DATE,
                in inc_vencimento DATE,
                in inc_pagamento VARCHAR(8),
                in inc_batimento CHAR(1),
                in inc_valorPago decimal(15,3),
                in inc_codDiasProtesto DECIMAL(15,3),
                in inc_multa DECIMAL(15,3),
                in inc_multaDiaria DECIMAL(15,3),
                in inc_desconto DECIMAL(15,3),
                in inc_acrescimo DECIMAL(15,3),
                in inc_messagem BLOB,
                in inc_especial VARCHAR(2),
                in inc_nr_documento VARCHAR(10),
                in inc_dataDocumento DATE,
                in inc_tipoBaixa VARCHAR(2),
                in inc_bancoBaixa INT(11),
                in inc_caixaBaixa INT(11),
                in inc_finalizadoraRecebimento INT(11),
                in inc_origem VARCHAR(15),
                in inc_flagAlteracao DATE,
                in inc_reserva DOUBLE,
                in inc_parcela INT(11),
                in inc_historico varchar(100),
                in inc_conta integer,
                in inc_funcionario integer,
                in inc_terminal integer,
                in inc_user integer
)
begin
INSERT into `conector`.`boleto`
(
    `cedente`,
    `sacador`,
    `codBarra`,
    `banco`,
    `moeda`,
    `agencia`,
    `nossoNumero`,
    `convenio`,
    `valor`,
    `vencimentoValue`,
    `dv1`,
    `dv2`,
    `dv3`,
    `dvFull`,
    `carteira`,
    `emissao`,
    `vencimento`,
    `pagamento`,
    `batimento`,
    `valorPago`,
    `multa`,
    `multaDiaria`,
    `desconto`,
    `acrescimo`,
    `messagem`,
    `especial`,
    `nr_documento`,
    `dataDocumento`,
    `tipoBaixa`,
    `bancoBaixa`,
    `caixaBaixa`,
    `finalizadoraRecebimento`,
    `origem`,
    `flagAlteracao`,
    `reserva`,
    `parcela`,
    historico,
    conta, idFuncionario, idTerminal, usuarioInc
    )
        VALUES
    (
    `inc_cedente`,
    `inc_sacador`,
    `inc_codBarra`,
    `inc_banco`,
    `inc_moeda`,
    `inc_agencia`,
    `inc_nossoNumero`,
    `inc_convenio`,
    `inc_valor`,
    `inc_vencimentoValue`,
    `inc_dv1`,
    `inc_dv2`,
    `inc_dv3`,
    `inc_dvFull`,
    `inc_carteira`,
    `inc_emissao`,
    `inc_vencimento`,
    `inc_pagamento`,
    `inc_batimento`,
    `inc_valorPago`,
    `inc_multa`,
    `inc_multaDiaria`,
    `inc_desconto`,
    `inc_acrescimo`,
    `inc_messagem`,
    `inc_especial`,
    `inc_nr_documento`,
    `inc_dataDocumento`,
    `inc_tipoBaixa`,
    `inc_bancoBaixa`,
    `inc_caixaBaixa`,
    `inc_finalizadoraRecebimento`,
    `inc_origem`,
    `inc_flagAlteracao`,
    `inc_reserva`,
    `inc_parcela`,
     inc_historico,
     inc_conta, inc_funcionario, inc_terminal, inc_user
);
  select last_insert_id();
end $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `conector_inc_caixa`
--

DROP PROCEDURE IF EXISTS `conector_inc_caixa`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='' */ $$
CREATE DEFINER=`master`@`localhost` PROCEDURE `conector_inc_caixa`(

  `inc_descricao` varchar(30),
  `inc_inativo` smallint(6),
  `inc_saldoInicial` decimal(15,3),
  `inc_idloja` int(11),
  `inc_zeraCaixa` char(1),
  `inc_caixaAberto` char(1),
  `inc_permiteNegativo` char(1))
begin
  INSERT INTO `conector`.`caixa`
(
    `descricao`,
    `inativo`,
    `saldoInicial`,
    `idloja`,
    `zeraCaixa`,
    `caixaAberto`,
    `permiteNegativo`)
VALUES
(
    inc_descricao,
    inc_inativo,
    inc_saldoInicial,
    inc_idloja,
    inc_zeraCaixa,
    inc_caixaAberto,
    inc_permiteNegativo
);
select last_insert_id();
  end $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `conector_inc_caixaCorrente`
--

DROP PROCEDURE IF EXISTS `conector_inc_caixaCorrente`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='' */ $$
CREATE DEFINER=`master`@`localhost` PROCEDURE `conector_inc_caixaCorrente`(
  `inc_usuario` INT,
  `inc_data` DATE,
  `inc_caixa` DOUBLE,
  `inc_loja` INT,
  `inc_tipo` VARCHAR(3),
  `inc_historico` VARCHAR(50),
  `inc_valor` DECIMAL(15,3),
  `inc_reserva` DOUBLE,
  `inc_valorTransportadora` DECIMAL(15,3),
  `inc_tipoTessouraria` VARCHAR(1),
  `inc_chaveBanco` INT(11),
  `inc_chaveCaixa` INT(11),
  `inc_observacao` BLOB,
  `inc_origem` VARCHAR(10))
begin
  INSERT INTO `conector`.`caixacorrente`
(
`usuario`,
`data`,
`caixa`,
`loja`,
`tipo`,
`historico`,
`valor`,
`reserva`,
`valorTransportadora`,
`tipoTessouraria`,
`chaveBanco`,
`chaveCaixa`,
`observacao`,
`origem`)
VALUES
(
`inc_usuario`,
`inc_data`,
`inc_caixa`,
`inc_loja`,
`inc_tipo`,
`inc_historico`,
`inc_valor`,
`inc_reserva`,
`inc_valorTransportadora`,
`inc_tipoTessouraria`,
`inc_chaveBanco`,
`inc_chaveCaixa`,
`inc_observacao`,
`inc_origem` );
    select last_insert_id();
  end $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `conector_inc_caixafinalizadora`
--

DROP PROCEDURE IF EXISTS `conector_inc_caixafinalizadora`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='' */ $$
CREATE DEFINER=`master`@`localhost` PROCEDURE `conector_inc_caixafinalizadora`(
  `inc_caixaCorrente` double,
  `inc_valor` decimal(15,3),
  `inc_data` date,
  `inc_typeTransaction` varchar(1),
  `inc_caixa` double,
  `inc_valorTransportadora` decimal(15,3),
  `inc_codigo` int(11))
begin

    INSERT INTO `conector`.`caixafinalizadora`
    (
    `caixaCorrente`,
    `valor`,
    `data`,
    `typeTransaction`,
    `caixa`,
    `valorTransportadora`,
    `codigo`)
VALUES
(
    `inc_caixaCorrente`,
    `inc_valor`,
    `inc_data`,
    `inc_typeTransaction`,
    `inc_caixa`,
    `inc_valorTransportadora`,
    `inc_codigo`
);
select last_insert_id();
end $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `conector_inc_card_bandeira`
--

DROP PROCEDURE IF EXISTS `conector_inc_card_bandeira`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='' */ $$
CREATE DEFINER=`master`@`localhost` PROCEDURE `conector_inc_card_bandeira`(
  `inc_bandeira` double,
  `inc_nome` varchar(45),
  `inc_alteracao` date,
  `inc_idtypeCartao` int(11),
  `inc_codigo` int(11) )
begin
if((select count(bandeira) from card_bandeira where bandeira=`inc_bandeira`) = 0)then
  insert into card_bandeira(bandeira,nome,alteracao,idTypeCartao,codigo) values
                           (inc_bandeira,inc_nome,inc_alteracao,inc_idTypeCartao,inc_codigo);
                                                                    select 0;
                                                                           else
                                                                            select 1;
end if;
end $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `conector_inc_cartao`
--

DROP PROCEDURE IF EXISTS `conector_inc_cartao`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='' */ $$
CREATE DEFINER=`master`@`localhost` PROCEDURE `conector_inc_cartao`(
  `inc_idAdministradora` INT,
  `inc_idloja` INT,
  `inc_inclusao` DATE,
  `inc_alteracao` DATE,
  `inc_cupom` DOUBLE,
  `inc_pedido` DOUBLE,
  `inc_terminal` INT(11),
  `inc_emissao` DATE,
  `inc_vencimento` VARCHAR(45),
  `inc_pagamento` CHAR(8),
  `inc_status` CHAR(1),
  `inc_observacao` VARCHAR(50),
  `inc_parcela` INT,
  `inc_qttyParcela` INT,
  `inc_typeCartao` INT,
  `inc_bandeira` DOUBLE,
  `inc_valor` DECIMAL(15,3),
   inc_networkCard int,
   inc_origem char(1),
   inc_batimento char(1))
begin
  insert into cartao (
                     `idAdministradora`,
                     `idloja`,
                     `inclusao`,
                     `alteracao`,
                     `cupom` ,
                     `pedido`,
                     `terminal` ,
                     `emissao`,
                     `vencimento`,
                     `pagamento`,
                     `status`,
                     `observacao`,
                     `parcela`,
                     `qttyParcela`,
                     `typeCartao`,
                     `bandeira`,
                     `valor`, networkCard, origem, batimento)values(
                     `inc_idAdministradora`,
                     `inc_idloja`,
                     `inc_inclusao`,
                     `inc_alteracao`,
                     `inc_cupom` ,
                     `inc_pedido`,
                     `inc_terminal` ,
                     `inc_emissao`,
                     `inc_vencimento`,
                     `inc_pagamento`,
                     `inc_status`,
                     `inc_observacao`,
                     `inc_parcela`,
                     `inc_qttyParcela`,
                     `inc_typeCartao`,
                     `inc_bandeira`,
                     `inc_valor`, inc_networkCard, inc_origem, inc_batimento);
                     select last_insert_id();
  end $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `conector_inc_categoria`
--

DROP PROCEDURE IF EXISTS `conector_inc_categoria`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='STRICT_TRANS_TABLES,STRICT_ALL_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,TRADITIONAL,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION' */ $$
CREATE DEFINER=`master`@`localhost` PROCEDURE `conector_inc_categoria`(
                                                    in inc_setor integer,
                                                    in inc_grupo integer,
                                                    in inc_descricao varchar(45),
                                                    in inc_status boolean,
                                                    in inc_nItens integer,
                                                    in inc_comissao decimal,
                                                    in inc_desconto decimal
                                                 )
BEGIN
start Transaction;
    insert into 
             categoria(idsetor,idgrupo,descricao,status,nItens,comissao,desconto)
    values
             (inc_setor, inc_grupo, inc_descricao, inc_status,inc_nItens,inc_comissao,inc_desconto);
    select
            last_insert_id() as codigo
    from
            categoria
    where
            idcategoria=last_insert_id();
commit;
END $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `conector_inc_cep`
--

DROP PROCEDURE IF EXISTS `conector_inc_cep`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='' */ $$
CREATE DEFINER=`master`@`localhost` PROCEDURE `conector_inc_cep`(
                                  in inc_cep varchar(8),
                                  in inc_idcepcity integer,
                                  in inc_idestado integer,
                                  in inc_bairro varchar(30),
                                  in inc_logradouro varchar(30),
                                  in inc_complemento varchar(60),
                                  in inc_uf char(2)

                                 )
begin
if(select count(cep) as codigo from cepBairro where cep=inc_cep) = 0 then
insert into cepbairro(cep,idcepcity,idestado,bairro,logradouro,complemento,uf)
             values
                     (inc_cep, inc_idcepcity, inc_idestado, inc_bairro, inc_logradouro, inc_complemento, inc_uf);
select last_insert_id() as idcep from cepbairro where idcepbairro=last_insert_id();
                     else (select 1 as idcep);
end if;
end $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `conector_inc_cfop`
--

DROP PROCEDURE IF EXISTS `conector_inc_cfop`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='' */ $$
CREATE DEFINER=`master`@`localhost` PROCEDURE `conector_inc_cfop`(
  in `inc_cfop` varchar(6),
  in `inc_nome` varchar(30),
  in `inc_tipo` char(1),
  in `inc_modelo` char(2),
  in `inc_msg01` varchar(100),
  in `inc_msg02` varchar(100),
  in inc_status boolean
)
begin

  insert into cfop(  `cfop`,
  `nome`,
  `tipo`,
  `modelo`,
  `msg01`,
  `msg02`,status)values(  `inc_cfop`,
  `inc_nome`,
  `inc_tipo`,
  `inc_modelo`,
  `inc_msg01`,
  `inc_msg02`, inc_status);
end $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `conector_inc_cheque`
--

DROP PROCEDURE IF EXISTS `conector_inc_cheque`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='' */ $$
CREATE DEFINER=`master`@`localhost` PROCEDURE `conector_inc_cheque`(
  `inc_banco` INT,
  `inc_idloja` INT,
  `inc_idcliente` INT,
  `inc_typeRecebimento` CHAR(1),
  `inc_contaCorrente` VARCHAR(12),
  `inc_serie` VARCHAR(3),
  `inc_agencia` VARCHAR(12),
  `inc_typeCheque` CHAR(1),
  `inc_prazo` INT(11),
  `inc_emissao` DATE,
  `inc_vencimento` DATE,
  `inc_cityBanco` VARCHAR(50),
  `inc_numberCheque` VARCHAR(12),
  `inc_valueCheque` DECIMAL(15,3),
  `inc_historico` VARCHAR(100),
  `inc_typeLancamento` CHAR(2),
  `inc_pagamento` VARCHAR(8),
  `inc_observacao` VARCHAR(100),
  `inc_idUsuarioLiberacao` INT,
  `inc_motivoLiberacao` VARCHAR(12),
  `inc_cmc7` VARCHAR(50),
  `inc_idusuario` INT,
  `inc_reserva` DOUBLE,
  `inc_origem` char(1),
   inc_doc double,
   inc_terminal integer,
   inc_funcionario integer)
begin
if(           (select
                   count(*)

                                from cheque tab where  tab.`contaCorrente` = `inc_contaCorrente` and tab.`serie` = `inc_serie` and  tab.`agencia` = `inc_agencia` and tab.`banco` = `inc_banco` and tab.`numberCheque` = `inc_numberCheque`) = 0) then
  insert into cheque(
                    `banco`,
                    `idloja`,
                    `idcliente`,
                    `typeRecebimento`,
                    `contaCorrente`,
                    `serie`,
                    `agencia`,
                    `typeCheque`,
                    `prazo`,
                    `emissao`,
                    `vencimento`,
                    `cityBanco`,
                    `numberCheque`,
                    `valueCheque`,
                    `historico`,
                    `typeLancamento`,
                    `pagamento` ,
                    `observacao`,
                    `idUsuarioLiberacao`,
                    `motivoLiberacao`,
                    `cmc7`,
                    `idusuario`,
                    `reserva`,`origem`, cupom, terminal, idFuncionario
                    )values(
                    `inc_banco`,
                    `inc_idloja`,
                    `inc_idcliente`,
                    `inc_typeRecebimento`,
                    `inc_contaCorrente`,
                    `inc_serie`,
                    `inc_agencia`,
                    `inc_typeCheque`,
                    `inc_prazo`,
                    `inc_emissao`,
                    `inc_vencimento`,
                    `inc_cityBanco`,
                    `inc_numberCheque`,
                    `inc_valueCheque`,
                    `inc_historico`,
                    `inc_typeLancamento`,
                    `inc_pagamento` ,
                    `inc_observacao`,
                    `inc_idUsuarioLiberacao`,
                    `inc_motivoLiberacao`,
                    `inc_cmc7`,
                    `inc_idusuario`,
                    `inc_reserva`,`inc_origem`, inc_doc, inc_terminal, inc_funcionario
                    );
  select last_insert_id();
else
  select 0;
end if;


  end $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `conector_inc_cliente`
--

DROP PROCEDURE IF EXISTS `conector_inc_cliente`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='' */ $$
CREATE DEFINER=`master`@`localhost` PROCEDURE `conector_inc_cliente`(
                            				in inc_idloja integer,
                            				in inc_idtipoPessoa integer,
                            				in inc_idusuario integer,
                            				in inc_idatividade integer,
                            				in inc_observacao varchar(45),
                            				in inc_dataEmissao date,
                            				in inc_dataAlteracao date,
                            				in inc_idestado integer,
                            				in inc_uf char(2),
                                    in inc_codMun integer,
                                    in inc_status boolean,
                                    in send_cep integer,
                                    in send_idcepbairro integer,
                                    in send_idenderecoType integer,
                                    in send_bairro varchar(45),
                                    in send_complemento varchar(60),
                                    in send_municipio varchar(45),
                                    in send_estado char(2),
                                    in send_numero integer,
                                    in send_logradouro varchar(45)

			)
BEGIN

start Transaction;

  insert into
		cliente
			(
				idloja,
				idtipoPessoa,
				idusuario,
				idatividade,
				observacao,
				dataEmissao,
				dataAlteracao,
				idestado,
				uf,
        status,
        idspedMunicipio

			)	values
			(
				inc_idloja,
				inc_idtipoPessoa,
				inc_idusuario,
				inc_idatividade,
				inc_observacao,
				inc_dataEmissao,
				inc_dataAlteracao,
				inc_idestado,
				inc_uf,
        inc_status,
        inc_codMun
			);
commit;
start Transaction;
  if((select count(*) from conector.endereco where endereco.idcliente=last_insert_id() and idEnderecoType = send_idenderecoType)>0)then

      select idEndereco, idcliente
                      from conector.endereco
                                          where
                                               endereco.idcliente=last_insert_id() and
                                               idEnderecoType = send_idenderecoType
                                                                                      into @id, @cliente; 

              call conector_alt_endereco(
                                          @id,
                                          @cliente,
                                          send_cep,
                                          send_idcepbairro,
                                          send_idenderecoType,
                                          send_bairro,
                                          send_logradouro,
                                          send_complemento,
                                          send_municipio,
                                          send_estado,
                                          send_numero,1,1
                                       );

  else

              call conector_inc_endereco(
                                          last_insert_id(),
                                          send_cep,
                                          send_idcepbairro,
                                          send_idenderecoType,
                                          send_bairro,
                                          send_logradouro,
                                          send_complemento,
                                          send_municipio,
                                          send_estado,
                                          send_numero
                                        );
  end if;
commit;

    END $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `conector_inc_clienteProfissional`
--

DROP PROCEDURE IF EXISTS `conector_inc_clienteProfissional`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='' */ $$
CREATE DEFINER=`master`@`localhost` PROCEDURE `conector_inc_clienteProfissional`(
	  in inc_idcliente int,
	  in inc_idendereco int,
	  in inc_empresa varchar(40),
	  in inc_salarioDeclarado numeric(15,3),
	  in inc_salarioComprovado numeric(15,3),
	  in inc_idprofissao int,
	  in inc_idEscolaridade int,
	  in inc_default smallint
  )
begin
insert into clienteProfissional
  (
	  idcliente,
	  idendereco,
	  empresa,
	  salarioDeclarado,
	  salarioComprovado,
	  idprofissao,
	  idEscolaridade
  )values
  (
	  inc_idcliente,
	  inc_idendereco,
	  inc_empresa,
	  inc_salarioDeclarado,
	  inc_salarioComprovado,
	  inc_idprofissao,
	  inc_idEscolaridade
  );

if inc_default = 1 then
    call conector_alt_statusClienteRisco(inc_idcliente,last_insert_id());
end if;
if((select count(default1) as codigo from clienteProfissional where idcliente=inc_idcliente and default1 = 1) <= 0) then
set @a=(select max(idClienteProfissional) from clienteProfissional where idcliente=inc_idcliente);
   update clienteProfissional set default1=1 where idcliente=inc_idcliente and idClienteProfissional=@a;
end if;
        select last_insert_id() as Codigo;
end $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `conector_inc_clienteReferencia`
--

DROP PROCEDURE IF EXISTS `conector_inc_clienteReferencia`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='' */ $$
CREATE DEFINER=`master`@`localhost` PROCEDURE `conector_inc_clienteReferencia`(
  in inc_idcliente int,
  in inc_idtypeReferencia int,
  in inc_empresaContato varchar(40),
  in inc_contato varchar(40),
  in inc_ddd CHAR(4),
  in inc_fone CHAR(8),
  in inc_ramal INT(11),
  in inc_data DATE,
  in inc_observacao VARCHAR(100)
)
begin
insert into clienteReferencia
(
  idcliente,
  idtypeReferencia,
  empresaContato,
  contato,
  ddd,
  fone,
  ramal,
  data,
  observacao
)values
(
  inc_idcliente,
  inc_idtypeReferencia,
  inc_empresaContato,
  inc_contato,
  inc_ddd,
  inc_fone,
  inc_ramal,
  inc_data,
  inc_observacao
);
select last_insert_id();
end $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `conector_inc_clienteRisco`
--

DROP PROCEDURE IF EXISTS `conector_inc_clienteRisco`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='' */ $$
CREATE DEFINER=`master`@`localhost` PROCEDURE `conector_inc_clienteRisco`(
  `inc_idcliente` INT,
  `inc_cooperado` smallint(6),
  `inc_preferencial` smallint(6),
  `inc_limiteCheque` DECIMAL(15,3),
  `inc_onlyHourCheque` smallint(6),
  `inc_convenio` INT,
  `inc_pagador` INT,
  `inc_limiteEstouro` DECIMAL(15,3),
  `inc_limiteConvenio` DECIMAL(15,3),
  `inc_noteCobrancaConvenio` smallint(6),
  `inc_typePrazo` VARCHAR(1),
  `inc_diaEncerramento` INT(11),
  `inc_diaFechamento` INT(11),
  `inc_prazoDias` INT(11),
  `inc_motivo` VARCHAR(4))
begin
insert into clienteRisco(
                            `idcliente`,
                            `cooperado`,
                            `preferencial`,
                            `limiteCheque`,
                            `onlyHourCheque`,
                            `convenio`,
                            `pagador`,
                            `limiteEstouro`,
                            `limiteConvenio`,
                            `noteCobrancaConvenio`,
                            `typePrazo`,
                            `diaEncerramento`,
                            `diaFechamento`,
                            `prazoDias`,
                            `motivo`)values(
                            `inc_idcliente`,
                            `inc_cooperado`,
                            `inc_preferencial`,
                            `inc_limiteCheque`,
                            `inc_onlyHourCheque`,
                            `inc_convenio`,
                            `inc_pagador`,
                            `inc_limiteEstouro`,
                            `inc_limiteConvenio`,
                            `inc_noteCobrancaConvenio`,
                            `inc_typePrazo`,
                            `inc_diaEncerramento`,
                            `inc_diaFechamento`,
                            `inc_prazoDias`,
                            `inc_motivo`);
              select last_insert_id();
end $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `conector_inc_condicaoPgto`
--

DROP PROCEDURE IF EXISTS `conector_inc_condicaoPgto`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='' */ $$
CREATE DEFINER=`master`@`localhost` PROCEDURE `conector_inc_condicaoPgto`(
  in `inc_idfinalizadora` INT(11),
  in `inc_descricao` VARCHAR(30) ,
  in `inc_diasVencimento` INT(11),
  in `inc_numeroParcelas` INT(11),
  in `inc_status` smallint(6),
  in `inc_vezesIguais` smallint(6),
  in inc_totalPorcentagem numeric(15,3))
begin
            insert into condicaopgto(
                                        `idfinalizadora`,
                                        `descricao`,
                                        `diasVencimento`,
                                        `numeroParcelas`,
                                        `status`,
                                        `vezesIguais`,totalPorcentagem
                                     )values (
                                        `inc_idfinalizadora`,
                                        `inc_descricao`,
                                        `inc_diasVencimento`,
                                        `inc_numeroParcelas`,
                                        `inc_status`,
                                        `inc_vezesIguais`,inc_totalPorcentagem
                                     );
                                     select last_insert_id() as codigo;
  end $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `conector_inc_configuracao`
--

DROP PROCEDURE IF EXISTS `conector_inc_configuracao`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='' */ $$
CREATE DEFINER=`master`@`localhost` PROCEDURE `conector_inc_configuracao`(

                  `inc_idusuario` INT  ,
                  `inc_administradoraCartao` CHAR(1) ,
                  `inc_banco` CHAR(1) ,
                  `inc_caixa` CHAR(1) ,
                  `inc_cargo` CHAR(1) ,
                  `inc_cep` CHAR(1) ,
                  `inc_convenios` CHAR(1) ,
                  `inc_codicaoPgto` CHAR(1) ,
                  `inc_contaCorrente` CHAR(1) ,
                  `inc_cliente` CHAR(1) ,
                  `inc_escolaridade` CHAR(1) ,
                  `inc_feriados` CHAR(1) ,
                  `inc_finalizadoras` CHAR(1) ,
                  `inc_fornecedor` CHAR(1) ,
                  `inc_funcionario` CHAR(1) ,
                  `inc_loja` CHAR(1) ,
                  `inc_metodos` CHAR(1) ,
                  `inc_profissao` CHAR(1) ,
                  `inc_representante` CHAR(1) ,
                  `inc_telefone` CHAR(1) ,
                  `inc_terminal` CHAR(1) ,
                  `inc_transportadora` CHAR(1) ,
                  `inc_usuario` CHAR(1) ,
                  `inc_veiculo` CHAR(1) ,
                  `inc_produto` CHAR(1) ,
                  `inc_setor` CHAR(1) ,
                  `inc_grupo` CHAR(1) ,
                  `inc_categoria` CHAR(1) ,
                  `inc_compra` CHAR(1) ,
                  `inc_maximo` CHAR(1) ,
                  `inc_entrada` CHAR(1) ,
                  `inc_precificacao` CHAR(1) ,
                  `inc_transferencia` CHAR(1) ,
                  `inc_movimentacaoEstoque` CHAR(1) ,
                  `inc_saldoEstoque` CHAR(1) ,
                  `inc_zeraEstoque` CHAR(1) ,
                  `inc_operacaoEntrada` CHAR(1) ,
                  `inc_tipoProduto` CHAR(1) ,
                  `inc_trocaProduto` CHAR(1) ,
                  `inc_contasReceber` CHAR(1) ,
                  `inc_cartaoCredito` CHAR(1) ,
                  `inc_cheque` CHAR(1) ,
                  `inc_crediario` CHAR(1) ,
                  `inc_devolucao` CHAR(1) ,
                  `inc_caixaCadastro` CHAR(1) ,
                  `inc_sitegra` CHAR(1) ,
                  `inc_notaFiscal` CHAR(1) ,
                  `inc_sped` CHAR(1) ,
                  `inc_apuracaoImposto` CHAR(1) ,
                  `inc_mapaResumo` CHAR(1) ,
                  `inc_cfop` CHAR(1) ,
                  `inc_aliquotaFiscal` CHAR(1) ,
                  `inc_operacaoFaturamento` CHAR(1) ,
                  `inc_controleReservas` CHAR(1) ,
                  `inc_analiseCredito` CHAR(1) ,
                  `inc_pdvSingle` CHAR(1) ,
                  `inc_contasPagar` CHAR(1) ,
                  `inc_trocaSenha` CHAR(1) ,
                  `inc_liberacao` CHAR(1) ,
                  `inc_cargas` CHAR(1) ,
                  `inc_interfacePdv` CHAR(1) ,
                  `inc_dre` CHAR(1) ,
                  `inc_fluxoCaixa` CHAR(1) ,
                  `inc_flashReserva` CHAR(1) ,
                  `inc_flashVenda` CHAR(1) ,
                  `inc_relatorios` CHAR(1) ,
                  `inc_chequeDevolvido` CHAR(1),
                  `inc_convenio` CHAR(1) ,
                  `inc_log` CHAR(1) ,
                  `inc_inclusao` DATE  ,
                  `inc_alteracao` DATE  ,
                  `inc_menuCadastro` SMALLINT,
                  `inc_menuProduto` SMALLINT,
                  `inc_menuFinanceiro` SMALLINT,
                  `inc_menuFiscal` SMALLINT,
                  `inc_menuFaturamento` SMALLINT,
                  `inc_menuPagar` SMALLINT,
                  `inc_menuUtilitario` SMALLINT,
                  `inc_menuContabil` SMALLINT,
                  `inc_menuVenda` SMALLINT,
                  `inc_menuRelatorio` SMALLINT,
                  `inc_inventario` CHAR(1),
                  `inc_estoqueRede` CHAR(1),
                  `inc_saldoCrediario` CHAR(1),
                  inc_CrediarioContrato CHAR(1),
                  inc_CrediarioResumoContabil CHAR(1),
                  inc_CrediarioInadimplencia CHAR(1),
                  inc_CrediarioConfiguracao CHAR(1),
                  inc_menuBoletos smallint,
                  inc_tableFiscal char(1),
                  inc_precoIndividual char(1))
begin
		  insert into configuracao(
                  `idusuario`,
                  `administradoraCartao` ,
                  `banco` ,
                  `caixa` ,
                  `cargo` ,
                  `cep` ,
                  `convenios` ,
                  `codicaoPgto` ,
                  `contaCorrente` ,
                  `cliente` ,
                  `escolaridade` ,
                  `feriados` ,
                  `finalizadoras` ,
                  `fornecedor` ,
                  `funcionario` ,
                  `loja` ,
                  `metodos` ,
                  `profissao` ,
                  `representante` ,
                  `telefone` ,
                  `terminal` ,
                  `transportadora` ,
                  `usuario` ,
                  `veiculo` ,
                  `produto` ,
                  `setor` ,
                  `grupo` ,
                  `categoria` ,
                  `compra` ,
                  `maximo` ,
                  `entrada` ,
                  `precificacao` ,
                  `transferencia` ,
                  `movimentacaoEstoque` ,
                  `saldoEstoque` ,
                  `zeraEstoque` ,
                  `operacaoEntrada` ,
                  `tipoProduto` ,
                  `trocaProduto` ,
                  `contasReceber` ,
                  `cartaoCredito` ,
                  `cheque` ,
                  `crediario` ,
                  `devolucao` ,
                  `caixaCadastro` ,
                  `sitegra` ,
                  `notaFiscal` ,
                  `sped` ,
                  `apuracaoImposto` ,
                  `mapaResumo` ,
                  `cfop` ,
                  `aliquotaFiscal` ,
                  `operacaoFaturamento` ,
                  `controleReservas` ,
                  `analiseCredito` ,
                  `pdvSingle` ,
                  `contasPagar` ,
                  `trocaSenha` ,
                  `liberacao` ,
                  `cargas` ,
                  `interfacePdv` ,
                  `dre` ,
                  `fluxoCaixa` ,
                  `flashReserva` ,
                  `flashVenda` ,
                  `relatorios` ,
                  `chequeDevolvido`,
                  `convenio` ,
                  `log` ,
                  `inclusao`,
                  `alteracao`,
                  `menuCadastro` ,
                  `menuProduto` ,
                  `menuFinanceiro` ,
                  `menuFiscal` ,
                  `menuFaturamento` ,
                  `menuPagar` ,
                  `menuUtilitario` ,
                  `menuContabil` ,
                  `menuVenda` ,
                  `menuRelatorio`,
                  `inventario`,
                  `estoqueRede`,
                  `saldoCrediario`,
                   crediarioContrato,
                   crediarioResumoContabil,
                   crediarioInadimplencia,
                   crediarioConfiguracao,
                   menuBoletos,
                   tableFiscal,precoIndividual)values(
		  `inc_idusuario`,
                  `inc_administradoraCartao` ,
                  `inc_banco` ,
                  `inc_caixa` ,
                  `inc_cargo` ,
                  `inc_cep` ,
                  `inc_convenios` ,
                  `inc_codicaoPgto` ,
                  `inc_contaCorrente` ,
                  `inc_cliente` ,
                  `inc_escolaridade` ,
                  `inc_feriados` ,
                  `inc_finalizadoras` ,
                  `inc_fornecedor` ,
                  `inc_funcionario` ,
                  `inc_loja` ,
                  `inc_metodos` ,
                  `inc_profissao` ,
                  `inc_representante` ,
                  `inc_telefone` ,
                  `inc_terminal` ,
                  `inc_transportadora` ,
                  `inc_usuario` ,
                  `inc_veiculo` ,
                  `inc_produto` ,
                  `inc_setor` ,
                  `inc_grupo` ,
                  `inc_categoria` ,
                  `inc_compra` ,
                  `inc_maximo` ,
                  `inc_entrada` ,
                  `inc_precificacao` ,
                  `inc_transferencia` ,
                  `inc_movimentacaoEstoque` ,
                  `inc_saldoEstoque` ,
                  `inc_zeraEstoque` ,
                  `inc_operacaoEntrada` ,
                  `inc_tipoProduto` ,
                  `inc_trocaProduto` ,
                  `inc_contasReceber` ,
                  `inc_cartaoCredito` ,
                  `inc_cheque` ,
                  `inc_crediario` ,
                  `inc_devolucao` ,
                  `inc_caixaCadastro` ,
                  `inc_sitegra` ,
                  `inc_notaFiscal` ,
                  `inc_sped` ,
                  `inc_apuracaoImposto` ,
                  `inc_mapaResumo` ,
                  `inc_cfop` ,
                  `inc_aliquotaFiscal` ,
                  `inc_operacaoFaturamento` ,
                  `inc_controleReservas` ,
                  `inc_analiseCredito` ,
                  `inc_pdvSingle` ,
                  `inc_contasPagar` ,
                  `inc_trocaSenha` ,
                  `inc_liberacao` ,
                  `inc_cargas` ,
                  `inc_interfacePdv` ,
                  `inc_dre` ,
                  `inc_fluxoCaixa` ,
                  `inc_flashReserva` ,
                  `inc_flashVenda` ,
                  `inc_relatorios` ,
                  `inc_chequeDevolvido`,
                  `inc_convenio` ,
                  `inc_log` ,
                  `inc_inclusao`,
                  `inc_alteracao`,
                  `inc_menuCadastro` ,
                  `inc_menuProduto` ,
                  `inc_menuFinanceiro` ,
                  `inc_menuFiscal` ,
                  `inc_menuFaturamento` ,
                  `inc_menuPagar` ,
                  `inc_menuUtilitario` ,
                  `inc_menuContabil` ,
                  `inc_menuVenda` ,
                  `inc_menuRelatorio`,
                  `inc_inventario`,
                  `inc_estoqueRede`,
                  `inc_saldoCrediario`,
                    inc_CrediarioContrato,
                    inc_CrediarioResumoContabil,
                    inc_CrediarioInadimplencia,
                    inc_CrediarioConfiguracao,
                    inc_menuBoletos,
                    inc_tableFiscal,inc_precoIndividual);

			select last_insert_id();
end $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `conector_inc_configuraNotaFiscal`
--

DROP PROCEDURE IF EXISTS `conector_inc_configuraNotaFiscal`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='' */ $$
CREATE DEFINER=`master`@`localhost` PROCEDURE `conector_inc_configuraNotaFiscal`(
                            in newRazaoSocialCabecalhoX smallint,
                            in newRazaoSocialCabecalhoY smallint,
                            in newEnderecoCabecalhoX smallint,
                            in newEnderecoCabecalhoY smallint,
                            in newBairroCabecalhoX smallint,
                            in newBairroCabecalhoY smallint,
                            in newCidadeCabecalhoX smallint,
                            in newCidadeCabecalhoY smallint,
                            in newCepCabecalhoX smallint,
                            in newCepCabecalhoY smallint,
                            in newEstadoCabecalhoX smallint,
                            in newEstadoCabecalhoY smallint,
                            in newTelefoneCabecalhoX smallint,
                            in newTelefoneCabecalhoY smallint,
                            in newCnpjCabecalhoX smallint,
                            in newCnpjCabecalhoY smallint,
                            in newInscricaoEstadualCabecalhoX smallint,
                            in newInscricaoEstadualCabecalhoY smallint,
                            in newLojaCabecalhoX smallint,
                            in newLojaCabecalhoY smallint,
                            in newIeStTributarioCabecalhoX smallint,
                            in newIeStTributarioCabecalhoY smallint,
                            in newInscricaoMunicipalCabecalhoX smallint,
                            in newInscricaoMunicipalCabecalhoY smallint,

                            in newRazaoSocialDestRemX smallint,
                            in newRazaoSocialDestRemY smallint,
                            in newCnpjCpfDestRemX smallint,
                            in newCnpjCpfDestRemY smallint,
                            in newInscricaoEstadualDestRemX smallint,
                            in newInscricaoEstadualDestRemY smallint,
                            in newEnderecoDestRemX smallint,
                            in newEnderecoDestRemY smallint,
                            in newBairroDestRemX smallint,
                            in newBairroDestRemY smallint,
                            in newCepDestRemX smallint,
                            in newCepDestRemY smallint,
                            in newCidadeDestRemX smallint,
                            in newCidadeDestRemY smallint,
                            in newTelefoneDestRemX smallint,
                            in newTelefoneDestRemY smallint,
                            in newEstadoDestRemX smallint,
                            in newEstadoDestRemY smallint,
                            in newEnderecoCobrancaDestRemX smallint,
                            in newEnderecoCobrancaDestRemY smallint,
                            in newPracaPagamentoDestRemX smallint,
                            in newPracaPagamentoDestRemY smallint,
                            in newCepCobrancaDestRemX smallint,
                            in newCepCobrancaDestRemY smallint,
                            in newCodigoClienteDestRemX smallint,
                            in newCodigoClienteDestRemY smallint,
                            in newFantasiaEntregaDestRemX smallint,
                            in newFantasiaEntregaDestRemY smallint,
                            in newEnderecoEntregaDestRemX smallint,
                            in newEnderecoEntregaDestRemY smallint,
                            in newBairroEntregaDestRemX smallint,
                            in newBairroEntregaDestRemY smallint,
                            in newComplementoEntregaDestRemX smallint,
                            in newComplementoEntregaDestRemY smallint,
                            in newCepEntregaDestRemX smallint,
                            in newCepEntregaDestRemY smallint,
                            in newCidadeEntregaDestRemX smallint,
                            in newCidadeEntregaDestRemY smallint,

                            in newEntradaEmissaoX smallint,
                            in newEntradaEmissaoY smallint,
                            in newSaidaEmissaoX smallint,
                            in newSaidaEmissaoY smallint,
                            in newNumeroNotaEmissaoX smallint,
                            in newNumeroNotaEmissaoY smallint,
                            in newCodigoCfopEmissaoX smallint,
                            in newCodigoCfopEmissaoY smallint,
                            in newDescricaoCfopEmissaoX smallint,
                            in newDescricaoCfopEmissaoY smallint,
                            in newDataEmissaoEmissaoX smallint,
                            in newDataEmissaoEmissaoY smallint,
                            in newDataSaidaEmissaoX smallint,
                            in newDataSaidaEmissaoY smallint,
                            in newHoraSaidaEmissaoX smallint,
                            in newHoraSaidaEmissaoY smallint,
                            in newPaginaEmissaoX smallint,
                            in newPaginaEmissaoY smallint,

                            in newFatura1FaturamentoX smallint,
                            in newFatura1FaturamentoY smallint,
                            in newFatura2FaturamentoX smallint,
                            in newFatura2FaturamentoY smallint,
                            in newFatura3FaturamentoX smallint,
                            in newFatura3FaturamentoY smallint,
                            in newFatura4FaturamentoX smallint,
                            in newFatura4FaturamentoY smallint,
                            in newFatura5FaturamentoX smallint,
                            in newFatura5FaturamentoY smallint,
                            in newFatura6FaturamentoX smallint,
                            in newFatura6FaturamentoY smallint,
                            in newFatura7FaturamentoX smallint,
                            in newFatura7FaturamentoY smallint,
                            in newFatura8FaturamentoX smallint,
                            in newFatura8FaturamentoY smallint,
                            in newFatura9FaturamentoX smallint,
                            in newFatura9FaturamentoY smallint,
                            in newFatura10FaturamentoX smallint,
                            in newFatura10FaturamentoY smallint,
                            in newFatura11FaturamentoX smallint,
                            in newFatura11FaturamentoY smallint,
                            in newFatura12FaturamentoX smallint,
                            in newFatura12FaturamentoY smallint,
                            in newExtenso1FaturamentoX smallint,
                            in newExtenso1FaturamentoY smallint,
                            in newData1FaturamentoX smallint,
                            in newData1FaturamentoY smallint,
                            in newData2FaturamentoX smallint,
                            in newData2FaturamentoY smallint,
                            in newData3FaturamentoX smallint,
                            in newData3FaturamentoY smallint,
                            in newData4FaturamentoX smallint,
                            in newData4FaturamentoY smallint,
                            in newData5FaturamentoX smallint,
                            in newData5FaturamentoY smallint,
                            in newData6FaturamentoX smallint,
                            in newData6FaturamentoY smallint,
                            in newData7FaturamentoX smallint,
                            in newData7FaturamentoY smallint,
                            in newData8FaturamentoX smallint,
                            in newData8FaturamentoY smallint,
                            in newData9FaturamentoX smallint,
                            in newData9FaturamentoY smallint,
                            in newData10FaturamentoX smallint,
                            in newData10FaturamentoY smallint,
                            in newData11FaturamentoX smallint,
                            in newData11FaturamentoY smallint,
                            in newData12FaturamentoX smallint,
                            in newData12FaturamentoY smallint,
                            in newExtenso2FaturamentoX smallint,
                            in newExtenso2FaturamentoY smallint,
                            in newValor1FaturamentoX smallint,
                            in newValor1FaturamentoY smallint,
                            in newValor2FaturamentoX smallint,
                            in newValor2FaturamentoY smallint,
                            in newValor3FaturamentoX smallint,
                            in newValor3FaturamentoY smallint,
                            in newValor4FaturamentoX smallint,
                            in newValor4FaturamentoY smallint,
                            in newValor5FaturamentoX smallint,
                            in newValor5FaturamentoY smallint,
                            in newValor6FaturamentoX smallint,
                            in newValor6FaturamentoY smallint,
                            in newValor7FaturamentoX smallint,
                            in newValor7FaturamentoY smallint,
                            in newValor8FaturamentoX smallint,
                            in newValor8FaturamentoY smallint,
                            in newValor9FaturamentoX smallint,
                            in newValor9FaturamentoY smallint,
                            in newValor10FaturamentoX smallint,
                            in newValor10FaturamentoY smallint,
                            in newValor11FaturamentoX smallint,
                            in newValor11FaturamentoY smallint,
                            in newValor12FaturamentoX smallint,
                            in newValor12FaturamentoY smallint,
                            in newEmissaoFaturaFaturamentoX smallint,
                            in newEmissaoFaturaFaturamentoY smallint,

                            in newCodigoProdutoItensX smallint,
                            in newCodigoProdutoItensY smallint,
                            in newDescricaoProdutoItensX smallint,
                            in newDescricaoProdutoItensY smallint,
                            in newTamanhoProdutoItensX smallint,
                            in newTamanhoProdutoItensY smallint,
                            in newStItensX smallint,
                            in newStItensY smallint,
                            in newClassificacaoFiscalItensX smallint,
                            in newClassificacaoFiscalItensY smallint,
                            in newEmbalagemItensX smallint,
                            in newEmbalagemItensY smallint,
                            in newUnidadesItensX smallint,
                            in newUnidadesItensY smallint,
                            in newQuantidadeItensX smallint,
                            in newQuantidadeItensY smallint,
                            in newValorUnitarioItensX smallint,
                            in newValorUnitarioItensY smallint,
                            in newValorTotalItensX smallint,
                            in newValorTotalItensY smallint,
                            in newAliquotaIcmsItensX smallint,
                            in newAliquotaIcmsItensY smallint,
                            in newAliquotaIpiItensX smallint,
                            in newAliquotaIpiItensY smallint,
                            in newValorIpiItensX smallint,
                            in newValorIpiItensY smallint,
                            in newEspecificacaoTecnicaItensX smallint,
                            in newEspecificacaoTecnicaItensY smallint,
                            in newDescontoItensX smallint,
                            in newDescontoItensY smallint,
                            in newValorLiquidoItensX smallint,
                            in newValorLiquidoItensY smallint,
                            in newReferenciaFornecedorItensX smallint,
                            in newReferenciaFornecedorItensY smallint,
                            in newCfopItensX smallint,
                            in newCfopItensY smallint,
                            in newPesoItensX smallint,
                            in newPesoItensY smallint,
                            in newMipItensX smallint,
                            in newMipItensY smallint,
                            in newNumeroItensItens smallint,
                            in newServicosItensX smallint,
                            in newServicosItensY smallint,
                            in newValorServicosItensX smallint,
                            in newValorServicosItensY smallint,
                            in auxUtilizaPulaLinhaAdicional smallint,
                            in newComplementoItensX smallint,
                            in newComplementoItensY smallint,
                            in newTituloAdicional1ItensX smallint,
                            in newTituloAdicional1ItensY smallint,
                            in newValorTituloAdicional1ItensX smallint,
                            in newValorTituloAdicional1ItensY smallint,
                            in newTituloAdicional2ItensX smallint,
                            in newTituloAdicional2ItensY smallint,
                            in newValorTituloAdicional2ItensX smallint,
                            in newValorTituloAdicional2ItensY smallint,
                            in newEstadoProdutoItensX smallint,
                            in newEstadoProdutoItensY smallint,
                            in newGarantia1ItensX smallint,
                            in newGarantia1ItensY smallint,
                            in newGarantia2ItensX smallint,
                            in newGarantia2ItensY smallint,

                            in newBaseIcmsCalculosDiversosX smallint,
                            in newBaseIcmsCalculosDiversosY smallint,
                            in newValorIcmsCalculosDiversosX smallint,
                            in newValorIcmsCalculosDiversosY smallint,
                            in newBaseIcmsStCalculosDiversosX smallint,
                            in newBaseIcmsStCalculosDiversosY smallint,
                            in newValorIcmsStCalculosDiversosX smallint,
                            in newValorIcmsStCalculosDiversosY smallint,
                            in newValorProdutosFinanceiroCalculosDiversosX smallint,
                            in newValorProdutosFinanceiroCalculosDiversosY smallint,
                            in newValorFreteCalculosDiversosX smallint,
                            in newValorFreteCalculosDiversosY smallint,
                            in newValorSeguroCalculosDiversosX smallint,
                            in newValorSeguroCalculosDiversosY smallint,
                            in newValorDespesasCalculosDiversosX smallint,
                            in newValorDespesasCalculosDiversosY smallint,
                            in newValorIpiCalculosDiversosX smallint,
                            in newValorIpiCalculosDiversosY smallint,
                            in newValorProdutosCabecalhoCalculosDiversosX smallint,
                            in newValorProdutosCabecalhoCalculosDiversosY smallint,
                            in newValorTotalNotaCalculosDiversosX smallint,
                            in newValorTotalNotaCalculosDiversosY smallint,
                            in newAcrescimosDiversosX smallint,
                            in newAcrescimosDiversosY smallint,
                            in newDescontoDiversosX smallint,
                            in newDescontoDiversosY smallint,
                            in new1linhaServicosDiversosX smallint,
                            in new1linhaServicosDiversosY smallint,
                            in new2linhaServicosDiversosX smallint,
                            in new2linhaServicosDiversosY smallint,
                            in newAliquotaIssDiversosX smallint,
                            in newAliquotaIssDiversosY smallint,
                            in newInscricaoMunicipalDiversosX smallint,
                            in newInscricaoMunicipalDiversosY smallint,
                            in newValorIssDiversosX smallint,
                            in newValorIssDiversosY smallint,
                            in newTotalServicosDiversosX smallint,
                            in newTotalServicosDiversosY smallint,
                            in newFunruralDiversosX smallint,
                            in newFunruralDiversosY smallint,
                            in newImpostoRendaDiversosX smallint,
                            in newImpostoRendaDiversosY smallint,

                            in newNomeRazaoTransportadorX smallint,
                            in newNomeRazaoTransportadorY smallint,
                            in newTipoFreteTransportadorX smallint,
                            in newTipoFreteTransportadorY smallint,
                            in newPlacaVeiculoTransportadorX smallint,
                            in newPlacaVeiculoTransportadorY smallint,
                            in newEstadoPlacaTransportadorX smallint,
                            in newEstadoPlacaTransportadorY smallint,
                            in newCnpjCpfTransportadorX smallint,
                            in newCnpjCpfTransportadorY smallint,
                            in newEnderecoTransportadorX smallint,
                            in newEnderecoTransportadorY smallint,
                            in newCidadeTransportadorX smallint,
                            in newCidadeTransportadorY smallint,
                            in newEstadoTransportadorX smallint,
                            in newEstadoTransportadorY smallint,
                            in newInscricaoEstadualTransportadorX smallint,
                            in newInscricaoEstadualTransportadorY smallint,
                            in newEncarregadoTransferenciaTransportadorX smallint,
                            in newEncarregadoTransferenciaTransportadorY smallint,
                            in auxImprimeEncarregadosTransferencia smallint,

                            in newQuantidadeVolumesComplementosX smallint,
                            in newQuantidadeVolumesComplementosY smallint,
                            in newEspecieComplementosX smallint,
                            in newEspecieComplementosY smallint,
                            in newMarcaComplementosX smallint,
                            in newMarcaComplementosY smallint,
                            in newNumeroComplementosX smallint,
                            in newNumeroComplementosY smallint,
                            in newPesoBrutoComplementosX smallint,
                            in newPesoBrutoComplementosY smallint,
                            in newPesoLiquidoComplementosX smallint,
                            in newPesoLiquidoComplementosY smallint,
                            in newNumeroPedidoComplementosX smallint,
                            in newNumeroPedidoComplementosY smallint,
                            in newSeuPedidoComplementosX smallint,
                            in newSeuPedidoComplementosY smallint,
                            in newVendedorComplementosX smallint,
                            in newVendedorComplementosY smallint,
                            in newNomeVendedorComplementosX smallint,
                            in newNomeVendedorComplementosY smallint,
                            in newProdutorComplementosX smallint,
                            in newProdutorComplementosY smallint,
                            in newQuantidadeItensComplementosX smallint,
                            in newQuantidadeItensComplementosY smallint,
                            in newNumeroCargaComplementosX smallint,
                            in newNumeroCargaComplementosY smallint,
                            in new1LinhaMensagemComplementosX smallint,
                            in new1LinhaMensagemComplementosY smallint,
                            in new2LinhaMensagemComplementosX smallint,
                            in new2LinhaMensagemComplementosY smallint,
                            in new3LinhaMensagemComplementosX smallint,
                            in new3LinhaMensagemComplementosY smallint,
                            in new4LinhaMensagemComplementosX smallint,
                            in new4LinhaMensagemComplementosY smallint,
                            in new5LinhaMensagemComplementosX smallint,
                            in new5LinhaMensagemComplementosY smallint,
                            in new1LinhaImpostosComplementosX smallint,
                            in new1LinhaImpostosComplementosY smallint,
                            in new2LinhaImpostosComplementosX smallint,
                            in new2LinhaImpostosComplementosY smallint,
                            in new3LinhaImpostosComplementosX smallint,
                            in new3LinhaImpostosComplementosY smallint,
                            in newNumeroNotaCanhotoComplementosX smallint,
                            in newNumeroNotaCanhotoComplementosY smallint,
                            in newVencimentoCanhotoComplementosX smallint,
                            in newVencimentoCanhotoComplementosY smallint,
                            in newOrdemServicoComplementosX smallint,
                            in newOrdemServicoComplementosY smallint,
                            in newNomeOperacaoComplementosX smallint,
                            in newNomeOperacaoComplementosY smallint,
                            in newReterIssComplementosX smallint,
                            in newReterIssComplementosY smallint,
                            in newNumeroRotaComplementosX smallint,
                            in newNumeroRotaComplementosY smallint,
                            in newNotaOrigemComplementosX smallint,
                            in newNotaOrigemComplementosY smallint,
                            in new1LinhaClassificacaoFiscalComplementosX smallint,
                            in new1LinhaClassificacaoFiscalComplementosY smallint,
                            in new2LinhaClassificacaoFiscalComplementosX smallint,
                            in new2LinhaClassificacaoFiscalComplementosY smallint,
                            in new3LinhaClassificacaoFiscalComplementosX smallint,
                            in new3LinhaClassificacaoFiscalComplementosY smallint,
                            in new4LinhaClassificacaoFiscalComplementosX smallint,
                            in new4LinhaClassificacaoFiscalComplementosY smallint,
                            in new5LinhaClassificacaoFiscalComplementosX smallint,
                            in new5LinhaClassificacaoFiscalComplementosY smallint,
                            in new6LinhaClassificacaoFiscalComplementosX smallint,
                            in new6LinhaClassificacaoFiscalComplementosY smallint,
                            in newInformacaoComplementarComplementosX smallint,
                            in newInformacaoComplementarComplementosY smallint,
                            in newQuantidadeInformacaoComplementarComplementos smallint,

                            in newCstImpostosX smallint,
                            in newCstImpostosY smallint,
                            in newAliquotaImpostosX smallint,
                            in newAliquotaImpostosY smallint,
                            in newBaseIcmsImpostosX smallint,
                            in newBaseIcmsImpostosY smallint,
                            in newValorIcmsImpostosX smallint,
                            in newValorIcmsImpostosY smallint,
                            in newCfopImpostosX smallint,
                            in newCfopImpostosY smallint,
                            in newNumeroLinhasImpostos smallint,
                            in newNomeArquivoNotaFiscal varchar(15),
                            in status smallint

)
BEGIN
 INSERT INTO configuracaonotafiscal (
  `idloja`,
  `razaoSocialCabecalhoX`,
  `razaoSocialCabecalhoY`,
  `enderecoCabecalhoX`,
  `enderecoCabecalhoY`,
  `bairroCabecalhoX`,
  `bairroCabecalhoY`,
  `cidadeCabecalhoX`,
  `cidadeCabecalhoY`,
  `cepCabecalhoX`,
  `cepCabecalhoY`,
  `estadoCabecalhoX`,
  `estadoCabecalhoY`,
  `telefoneCabecalhoX`,
  `telefoneCabecalhoY`,
  `cnpjCabecalhoX`,
  `cnpjCabecalhoY`,
  `inscricaoEstadualCabecalhoX`,
  `inscricaoEstadualCabecalhoY`,
  `lojaCabecalhoX`,
  `lojaCabecalhoY`,
  `ieStTributarioCabecalhoX`,
  `ieStTributarioCabecalhoY`,
  `inscricaoMunicipalCabecalhoX`,
  `inscricaoMunicipalCabecalhoY`,
  `razaoSocialDestRemX`,
  `razaoSocialDestRemY`,
  `cnpjCpfDestRemX`,
  `cnpjCpfDestRemY`,
  `inscricaoEstadualDestRemX`,
  `inscricaoEstadualDestRemY`,
  `enderecoDestRemX`,
  `enderecoDestRemY`,
  `bairroDestRemX`,
  `bairroDestRemY`,
  `cepDestRemX`,
  `cepDestRemY`,
  `cidadeDestRemX`,
  `cidadeDestRemY`,
  `telefoneDestRemX`,
  `telefoneDestRemY`,
  `estadoDestRemX`,
  `estadoDestRemY`,
  `enderecoCobrancaDestRemX`,
  `enderecoCobrancaDestRemY`,
  `pracaPagamentoDestRemX`,
  `pracaPagamentoDestRemY`,
  `cepCobrancaDestRemX`,
  `cepCobrancaDestRemY`,
  `codigoClienteDestRemX`,
  `codigoClienteDestRemY`,
  `fantasiaEntregaDestRemX`,
  `fantasiaEntregaDestRemY`,
  `enderecoEntregaDestRemX`,
  `enderecoEntregaDestRemY`,
  `bairroEntregaDestRemX`,
  `bairroEntregaDestRemY`,
  `complementoEntregaDestRemX`,
  `complementoEntregaDestRemY`,
  `cepEntregaDestRemX`,
  `cepEntregaDestRemY`,
  `cidadeEntregaDestRemX`,
  `cidadeEntregaDestRemY`,
  `entradaEmissaoX`,
  `entradaEmissaoY`,
  `saidaEmissaoX`,
  `saidaEmissaoY`,
  `numeroNotaEmissaoX`,
  `numeroNotaEmissaoY`,
  `codigoCfopEmissaoX`,
  `codigoCfopEmissaoY`,
  `descricaoCfopEmissaoX`,
  `descricaoCfopEmissaoY`,
  `dataEmissaoEmissaoX`,
  `dataEmissaoEmissaoY`,
  `dataSaidaEmissaoX`,
  `dataSaidaEmissaoY`,
  `horaSaidaEmissaoX`,
  `horaSaidaEmissaoY`,
  `paginaEmissaoX`,
  `paginaEmissaoY`,
  `fatura1FaturamentoX`,
  `fatura1FaturamentoY`,
  `fatura2FaturamentoX`,
  `fatura2FaturamentoY`,
  `fatura3FaturamentoX`,
  `fatura3FaturamentoY`,
  `fatura4FaturamentoX`,
  `fatura4FaturamentoY`,
  `fatura5FaturamentoX`,
  `fatura5FaturamentoY`,
  `fatura6FaturamentoX`,
  `fatura6FaturamentoY`,
  `fatura7FaturamentoX`,
  `fatura7FaturamentoY`,
  `fatura8FaturamentoX`,
  `fatura8FaturamentoY`,
  `fatura9FaturamentoX`,
  `fatura9FaturamentoY`,
  `fatura10FaturamentoX`,
  `fatura10FaturamentoY`,
  `fatura11FaturamentoX`,
  `fatura11FaturamentoY`,
  `fatura12FaturamentoX`,
  `fatura12FaturamentoY`,
  `extenso1FaturamentoX`,
  `extenso1FaturamentoY`,
  `data1FaturamentoX`,
  `data1FaturamentoY`,
  `data2FaturamentoX`,
  `data2FaturamentoY`,
  `data3FaturamentoX`,
  `data3FaturamentoY`,
  `data4FaturamentoX`,
  `data4FaturamentoY`,
  `data5FaturamentoX`,
  `data5FaturamentoY`,
  `data6FaturamentoX`,
  `data6FaturamentoY`,
  `data7FaturamentoX`,
  `data7FaturamentoY`,
  `data8FaturamentoX`,
  `data8FaturamentoY`,
  `data9FaturamentoX`,
  `data9FaturamentoY`,
  `data10FaturamentoX`,
  `data10FaturamentoY`,
  `data11FaturamentoX`,
  `data11FaturamentoY`,
  `data12FaturamentoX`,
  `data12FaturamentoY`,
  `extenso2FaturamentoX`,
  `extenso2FaturamentoY`,
  `valor1FaturamentoX`,
  `valor1FaturamentoY`,
  `valor2FaturamentoX`,
  `valor2FaturamentoY`,
  `valor3FaturamentoX`,
  `valor3FaturamentoY`,
  `valor4FaturamentoX`,
  `valor4FaturamentoY`,
  `valor5FaturamentoX`,
  `valor5FaturamentoY`,
  `valor6FaturamentoX`,
  `valor6FaturamentoY`,
  `valor7FaturamentoX`,
  `valor7FaturamentoY`,
  `valor8FaturamentoX`,
  `valor8FaturamentoY`,
  `valor9FaturamentoX`,
  `valor9FaturamentoY`,
  `valor10FaturamentoX`,
  `valor10FaturamentoY`,
  `valo11FaturamentoX`,
  `valo11FaturamentoY`,
  `valo12FaturamentoX`,
  `valo12FaturamentoY`,
  `emissaoFaturaFaturamentoX`,
  `emissaoFaturaFaturamentoY`,
  `codigoProdutoItensX`,
  `codigoProdutoItensY`,
  `descricaoProdutoItensX`,
  `descricaoProdutoItensY`,
  `tamanhoProdutoItensX`,
  `tamanhoProdutoItensY`,
  `stItensX`,
  `stItensY`,
  `classificacaoFiscalItensX`,
  `classificacaoFiscalItensY`,
  `embalagemItensX`,
  `embalagemItensY`,
  `unidadesItensX`,
  `unidadesItensY`,
  `quantidadeItensX`,
  `quantidadeItensY`,
  `valorUnitarioItensX`,
  `valorUnitarioItensY`,
  `valorTotalItensX`,
  `valorTotalItensY`,
  `aliquotaIcmsItensX`,
  `aliquotaIcmsItensY`,
  `aliquotaIpiItensX`,
  `aliquotaIpiItensY`,
  `valorIpiItensX`,
  `valorIpiItensY`,
  `especificacaoTecnicaItensX`,
  `especificacaoTecnicaItensY`,
  `descontoItensX`,
  `descontoItensY`,
  `valorLiquidoItensX`,
  `valorLiquidoItensY`,
  `referenciaFornecedorItensX`,
  `referenciaFornecedorItensY`,
  `cfopItensX`,
  `cfopItensY`,
  `pesoItensX`,
  `pesoItensY`,
  `mipItensX`,
  `mipItensY`,
  `numeroItensItens`,
  `servicosItensX`,
  `servicosItensY`,
  `valorServicosItensX`,
  `valorServicosItensY`,
  `utilizaPulaLinhaAdicional`,
  `complementoItensX`,
  `complementoItensY`,
  `tituloAdicional1ItensX`,
  `tituloAdicional1ItensY`,
  `valorTituloAdicional1ItensX`,
  `valorTituloAdicional1ItensY`,
  `tituloAdicional2ItensX`,
  `tituloAdicional2ItensY`,
  `valorTituloAdicional2ItensX`,
  `valorTituloAdicional2ItensY`,
  `estadoProdutoItensX`,
  `estadoProdutoItensY`,
  `garantia1ItensX`,
  `garantia1ItensY`,
  `garantia2ItensX`,
  `garantia2ItensY`,
  `baseIcmsCalculosDiversosX`,
  `baseIcmsCalculosDiversosY`,
  `valorIcmsCalculosDiversosX`,
  `valorIcmsCalculosDiversosY`,
  `baseIcmsStCalculosDiversosX`,
  `baseIcmsStCalculosDiversosY`,
  `valorIcmsStCalculosDiversosX`,
  `valorIcmsStCalculosDiversosY`,
  `valorProdutosFinanceiroCalculosDiversosX`,
  `valorProdutosFinanceiroCalculosDiversosY`,
  `valorFreteCalculosDiversosX`,
  `valorFreteCalculosDiversosY`,
  `valorSeguroCalculosDiversosX`,
  `valorSeguroCalculosDiversosY`,
  `valorDespesasCalculosDiversosX`,
  `valorDespesasCalculosDiversosY`,
  `valorIpiCalculosDiversosX`,
  `valorIpiCalculosDiversosY`,
  `valorProdutosCabecalhoCalculosDiversosX`,
  `valorProdutosCabecalhoCalculosDiversosY`,
  `valorTotalNotaCalculosDiversosX`,
  `valorTotalNotaCalculosDiversosY`,
  `acrescimosDiversosX`,
  `acrescimosDiversosY`,
  `descontoDiversosX`,
  `descontoDiversosY`,
  `1linhaServicosDiversosX`,
  `1linhaServicosDiversosY`,
  `2linhaServicosDiversosX`,
  `2linhaServicosDiversosY`,
  `aliquotaIssDiversosX`,
  `aliquotaIssDiversosY`,
  `inscricaoMunicipalDiversosX`,
  `inscricaoMunicipalDiversosY`,
  `valorIssDiversosX`,
  `valorIssDiversosY`,
  `totalServicosDiversosX`,
  `totalServicosDiversosy`,
  `funruralDiversosX`,
  `funruralDiversosY`,
  `impostoRendaDiversosX`,
  `impostoRendaDiversosY`,
  `nomeRazaoTransportadorX`,
  `nomeRazaoTransportadorY`,
  `tipoFreteTransportadorX`,
  `tipoFreteTransportadorY`,
  `placaVeiculoTransportadorX`,
  `placaVeiculoTransportadorY`,
  `estadoPlacaTransportadorX`,
  `estadoPlacaTransportadorY`,
  `cnpjCpfTransportadorX`,
  `cnpjCpfTransportadorY`,
  `enderecoTransportadorX`,
  `enderecoTransportadorY`,
  `cidadeTransportadorX`,
  `cidadeTransportadorY`,
  `estadoTransportadorX`,
  `estadoTransportadorY`,
  `inscricaoEstadualTransportadorX`,
  `inscricaoEstadualTransportadorY`,
  `encarregadoTransferenciaTransportadorX`,
  `encarregadoTransferenciaTransportadorY`,
  `imprimeEncarregadosTransferencia`,
  `quantidadeVolumesComplementosX`,
  `quantidadeVolumesComplementosY`,
  `especieComplementosX`,
  `especieComplementosY`,
  `marcaComplementosX`,
  `marcaComplementosY`,
  `numeroComplementosX`,
  `numeroComplementosY`,
  `pesoBrutoComplementosX`,
  `pesoBrutoComplementosY`,
  `pesoLiquidoComplementosX`,
  `pesoLiquidoComplementosY`,
  `numeroPedidoComplementosX`,
  `numeroPedidoComplementosY`,
  `seuPedidoComplementosX`,
  `seuPedidoComplementosY`,
  `vendedorComplementosX`,
  `vendedorComplementosY`,
  `nomeVendedorComplementosX`,
  `nomeVendedorComplementosY`,
  `produtorComplementosX`,
  `produtorComplementosY`,
  `quantidadeItensComplementosX`,
  `quantidadeItensComplementosY`,
  `numeroCargaComplementosX`,
  `numeroCargaComplementosY`,
  `1LinhaMensagemComplementosX`,
  `1LinhaMensagemComplementosY`,
  `2LinhaMensagemComplementosX`,
  `2LinhaMensagemComplementosY`,
  `3LinhaMensagemComplementosX`,
  `3LinhaMensagemComplementosY`,
  `4LinhaMensagemComplementosX`,
  `4LinhaMensagemComplementosY`,
  `5LinhaMensagemComplementosX`,
  `5LinhaMensagemComplementosY`,
  `1LinhaImpostosComplementosX`,
  `1LinhaImpostosComplementosY`,
  `2LinhaImpostosComplementosX`,
  `2LinhaImpostosComplementosY`,
  `3LinhaImpostosComplementosX`,
  `3LinhaImpostosComplementosY`,
  `numeroNotaCanhotoComplementosX`,
  `numeroNotaCanhotoComplementosY`,
  `vencimentoCanhotoComplementosX`,
  `vencimentoCanhotoComplementosY`,
  `ordemServicoComplementosX`,
  `ordemServicoComplementosY`,
  `nomeOperacaoComplementosX`,
  `nomeOperacaoComplementosY`,
  `reterIssComplementosX`,
  `reterIssComplementosY`,
  `numeroRotaComplementosX`,
  `numeroRotaComplementosY`,
  `notaOrigemComplementosX`,
  `notaOrigemComplementosY`,
  `1LinhaClassificacaoFiscalComplementosX`,
  `1LinhaClassificacaoFiscalComplementosY`,
  `2LinhaClassificacaoFiscalComplementosX`,
  `2LinhaClassificacaoFiscalComplementosY`,
  `3LinhaClassificacaoFiscalComplementosX`,
  `3LinhaClassificacaoFiscalComplementosY`,
  `4LinhaClassificacaoFiscalComplementosX`,
  `4LinhaClassificacaoFiscalComplementosY`,
  `5LinhaClassificacaoFiscalComplementosX`,
  `5LinhaClassificacaoFiscalComplementosY`,
  `6LinhaClassificacaoFiscalComplementosX`,
  `6LinhaClassificacaoFiscalComplementosY`,
  `informacaoComplementarComplementosX`,
  `informacaoComplementarComplementosY`,
  `quantidadeInformacaoComplementarComplementos`,
  `cstImpostosX`,
  `cstImpostosY`,
  `aliquotaImpostosX`,
  `aliquotaImpostosY`,
  `baseIcmsImpostosX`,
  `baseIcmsImpostosY`,
  `valorIcmsImpostosX`,
  `valorIcmsImpostosY`,
  `cfopImpostosX`,
  `cfopImpostosY`,
  `numeroLinhasImpostos`,
  `nomeArquivoNotaFiscal`,
  `status` 
  ) 
  VALUES (
    newRazaoSocialCabecalhoX,
    newRazaoSocialCabecalhoY,
    newEnderecoCabecalhoX,
    newEnderecoCabecalhoY,
    newBairroCabecalhoX,
    newBairroCabecalhoY,
    newCidadeCabecalhoX,
    newCidadeCabecalhoY,
    newCepCabecalhoX,
    newCepCabecalhoY,
    newEstadoCabecalhoX,
    newEstadoCabecalhoY,
    newTelefoneCabecalhoX,
    newTelefoneCabecalhoY,
    newCnpjCabecalhoX,
    newCnpjCabecalhoY,
    newInscricaoEstadualCabecalhoX,
    newInscricaoEstadualCabecalhoY,
    newLojaCabecalhoX,
    newLojaCabecalhoY,
    newIeStTributarioCabecalhoX,
    newIeStTributarioCabecalhoY,
    newInscricaoMunicipalCabecalhoX,
    newInscricaoMunicipalCabecalhoY,
    newRazaoSocialDestRemX,
    newRazaoSocialDestRemY,
    newCnpjCpfDestRemX,
    newCnpjCpfDestRemY,
    newInscricaoEstadualDestRemX,
    newInscricaoEstadualDestRemY,
    newEnderecoDestRemX,
    newEnderecoDestRemY,
    newBairroDestRemX,
    newBairroDestRemY,
    newCepDestRemX,
    newCepDestRemY,
    newCidadeDestRemX,
    newCidadeDestRemY,
    newTelefoneDestRemX,
    newTelefoneDestRemY,
    newEstadoDestRemX,
    newEstadoDestRemY,
    newEnderecoCobrancaDestRemX,
    newEnderecoCobrancaDestRemY,
    newPracaPagamentoDestRemX,
    newPracaPagamentoDestRemY,
    newCepCobrancaDestRemX,
    newCepCobrancaDestRemY,
    newCodigoClienteDestRemX,
    newCodigoClienteDestRemY,
    newFantasiaEntregaDestRemX,
    newFantasiaEntregaDestRemY,
    newEnderecoEntregaDestRemX,
    newEnderecoEntregaDestRemY,
    newBairroEntregaDestRemX,
    newBairroEntregaDestRemY,
    newComplementoEntregaDestRemX,
    newComplementoEntregaDestRemY,
    newCepEntregaDestRemX,
    newCepEntregaDestRemY,
    newCidadeEntregaDestRemX,
    newCidadeEntregaDestRemY,
    newEntradaEmissaoX,
    newEntradaEmissaoY,
    newSaidaEmissaoX,
    newSaidaEmissaoY,
    newNumeroNotaEmissaoX,
    newNumeroNotaEmissaoY,
    newCodigoCfopEmissaoX,
    newCodigoCfopEmissaoY,
    newDescricaoCfopEmissaoX,
    newDescricaoCfopEmissaoY,
    newDataEmissaoEmissaoX,
    newDataEmissaoEmissaoY,
    newDataSaidaEmissaoX,
    newDataSaidaEmissaoY,
    newHoraSaidaEmissaoX,
    newHoraSaidaEmissaoY,
    newPaginaEmissaoX,
    newPaginaEmissaoY,
    newFatura1FaturamentoX,
    newFatura1FaturamentoY,
    newFatura2FaturamentoX,
    newFatura2FaturamentoY,
    newFatura3FaturamentoX,
    newFatura3FaturamentoY,
    newFatura4FaturamentoX,
    newFatura4FaturamentoY,
    newFatura5FaturamentoX,
    newFatura5FaturamentoY,
    newFatura6FaturamentoX,
    newFatura6FaturamentoY,
    newFatura7FaturamentoX,
    newFatura7FaturamentoY,
    newFatura8FaturamentoX,
    newFatura8FaturamentoY,
    newFatura9FaturamentoX,
    newFatura9FaturamentoY,
    newFatura10FaturamentoX,
    newFatura10FaturamentoY,
    newFatura11FaturamentoX,
    newFatura11FaturamentoY,
    newFatura12FaturamentoX,
    newFatura12FaturamentoY,
    newExtenso1FaturamentoX,
    newExtenso1FaturamentoY,
    newData1FaturamentoX,
    newData1FaturamentoY,
    newData2FaturamentoX,
    newData2FaturamentoY,
    newData3FaturamentoX,
    newData3FaturamentoY,
    newData4FaturamentoX,
    newData4FaturamentoY,
    newData5FaturamentoX,
    newData5FaturamentoY,
    newData6FaturamentoX,
    newData6FaturamentoY,
    newData7FaturamentoX,
    newData7FaturamentoY,
    newData8FaturamentoX,
    newData8FaturamentoY,
    newData9FaturamentoX,
    newData9FaturamentoY,
    newData10FaturamentoX,
    newData10FaturamentoY,
    newData11FaturamentoX,
    newData11FaturamentoY,
    newData12FaturamentoX,
    newData12FaturamentoY,
    newExtenso2FaturamentoX,
    newExtenso2FaturamentoY,
    newValor1FaturamentoX,
    newValor1FaturamentoY,
    newValor2FaturamentoX,
    newValor2FaturamentoY,
    newValor3FaturamentoX,
    newValor3FaturamentoY,
    newValor4FaturamentoX,
    newValor4FaturamentoY,
    newValor5FaturamentoX,
    newValor5FaturamentoY,
    newValor6FaturamentoX,
    newValor6FaturamentoY,
    newValor7FaturamentoX,
    newValor7FaturamentoY,
    newValor8FaturamentoX,
    newValor8FaturamentoY,
    newValor9FaturamentoX,
    newValor9FaturamentoY,
    newValor10FaturamentoX,
    newValor10FaturamentoY,
    newValor11FaturamentoX,
    newValor11FaturamentoY,
    newValor12FaturamentoX,
    newValor12FaturamentoY,
    newEmissaoFaturaFaturamentoX,
    newEmissaoFaturaFaturamentoY,
    newCodigoProdutoItensX,
    newCodigoProdutoItensY,
    newDescricaoProdutoItensX,
    newDescricaoProdutoItensY,
    newTamanhoProdutoItensX,
    newTamanhoProdutoItensY,
    newStItensX,
    newStItensY,
    newClassificacaoFiscalItensX,
    newClassificacaoFiscalItensY,
    newEmbalagemItensX,
    newEmbalagemItensY,
    newUnidadesItensX,
    newUnidadesItensY,
    newQuantidadeItensX,
    newQuantidadeItensY,
    newValorUnitarioItensX,
    newValorUnitarioItensY,
    newValorTotalItensX,
    newValorTotalItensY,
    newAliquotaIcmsItensX,
    newAliquotaIcmsItensY,
    newAliquotaIpiItensX,
    newAliquotaIpiItensY,
    newValorIpiItensX,
    newValorIpiItensY,
    newEspecificacaoTecnicaItensX,
    newEspecificacaoTecnicaItensY,
    newDescontoItensX,
    newDescontoItensY,
    newValorLiquidoItensX,
    newValorLiquidoItensY,
    newReferenciaFornecedorItensX,
    newReferenciaFornecedorItensY,
    newCfopItensX,
    newCfopItensY,
    newPesoItensX,
    newPesoItensY,
    newMipItensX,
    newMipItensY,
    newNumeroItensItens,
    newServicosItensX,
    newServicosItensY,
    newValorServicosItensX,
    newValorServicosItensY,
    auxUtilizaPulaLinhaAdicional,
    newComplementoItensX,
    newComplementoItensY,
    newTituloAdicional1ItensX,
    newTituloAdicional1ItensY,
    newValorTituloAdicional1ItensX,
    newValorTituloAdicional1ItensY,
    newTituloAdicional2ItensX,
    newTituloAdicional2ItensY,
    newValorTituloAdicional2ItensX,
    newValorTituloAdicional2ItensY,
    newEstadoProdutoItensX,
    newEstadoProdutoItensY,
    newGarantia1ItensX,
    newGarantia1ItensY,
    newGarantia2ItensX,
    newGarantia2ItensY,
    newBaseIcmsCalculosDiversosX,
    newBaseIcmsCalculosDiversosY,
    newValorIcmsCalculosDiversosX,
    newValorIcmsCalculosDiversosY,
    newBaseIcmsStCalculosDiversosX,
    newBaseIcmsStCalculosDiversosY,
    newValorIcmsStCalculosDiversosX,
    newValorIcmsStCalculosDiversosY,
    newValorProdutosFinanceiroCalculosDiversosX,
    newValorProdutosFinanceiroCalculosDiversosY,
    newValorFreteCalculosDiversosX,
    newValorFreteCalculosDiversosY,
    newValorSeguroCalculosDiversosX,
    newValorSeguroCalculosDiversosY,
    newValorDespesasCalculosDiversosX,
    newValorDespesasCalculosDiversosY,
    newValorIpiCalculosDiversosX,
    newValorIpiCalculosDiversosY,
    newValorProdutosCabecalhoCalculosDiversosX,
    newValorProdutosCabecalhoCalculosDiversosY,
    newValorTotalNotaCalculosDiversosX,
    newValorTotalNotaCalculosDiversosY,
    newAcrescimosDiversosX,
    newAcrescimosDiversosY,
    newDescontoDiversosX,
    newDescontoDiversosY,
    new1linhaServicosDiversosX,
    new1linhaServicosDiversosY,
    new2linhaServicosDiversosX,
    new2linhaServicosDiversosY,
    newAliquotaIssDiversosX,
    newAliquotaIssDiversosY,
    newInscricaoMunicipalDiversosX,
    newInscricaoMunicipalDiversosY,
    newValorIssDiversosX,
    newValorIssDiversosY,
    newTotalServicosDiversosX,
    newTotalServicosDiversosY,
    newFunruralDiversosX,
    newFunruralDiversosY,
    newImpostoRendaDiversosX,
    newImpostoRendaDiversosY,
    newNomeRazaoTransportadorX,
    newNomeRazaoTransportadorY,
    newTipoFreteTransportadorX,
    newTipoFreteTransportadorY,
    newPlacaVeiculoTransportadorX,
    newPlacaVeiculoTransportadorY,
    newEstadoPlacaTransportadorX,
    newEstadoPlacaTransportadorY,
    newCnpjCpfTransportadorX,
    newCnpjCpfTransportadorY,
    newEnderecoTransportadorX,
    newEnderecoTransportadorY,
    newCidadeTransportadorX,
    newCidadeTransportadorY,
    newEstadoTransportadorX,
    newEstadoTransportadorY,
    newInscricaoEstadualTransportadorX,
    newInscricaoEstadualTransportadorY,
    newEncarregadoTransferenciaTransportadorX,
    newEncarregadoTransferenciaTransportadorY,
    auxImprimeEncarregadosTransferencia,
    newQuantidadeVolumesComplementosX,
    newQuantidadeVolumesComplementosY,
    newEspecieComplementosX,
    newEspecieComplementosY,
    newMarcaComplementosX,
    newMarcaComplementosY,
    newNumeroComplementosX,
    newNumeroComplementosY,
    newPesoBrutoComplementosX,
    newPesoBrutoComplementosY,
    newPesoLiquidoComplementosX,
    newPesoLiquidoComplementosY,
    newNumeroPedidoComplementosX,
    newNumeroPedidoComplementosY,
    newSeuPedidoComplementosX,
    newSeuPedidoComplementosY,
    newVendedorComplementosX,
    newVendedorComplementosY,
    newNomeVendedorComplementosX,
    newNomeVendedorComplementosY,
    newProdutorComplementosX,
    newProdutorComplementosY,
    newQuantidadeItensComplementosX,
    newQuantidadeItensComplementosY,
    newNumeroCargaComplementosX,
    newNumeroCargaComplementosY,
    new1LinhaMensagemComplementosX,
    new1LinhaMensagemComplementosY,
    new2LinhaMensagemComplementosX,
    new2LinhaMensagemComplementosY,
    new3LinhaMensagemComplementosX,
    new3LinhaMensagemComplementosY,
    new4LinhaMensagemComplementosX,
    new4LinhaMensagemComplementosY,
    new5LinhaMensagemComplementosX,
    new5LinhaMensagemComplementosY,
    new1LinhaImpostosComplementosX,
    new1LinhaImpostosComplementosY,
    new2LinhaImpostosComplementosX,
    new2LinhaImpostosComplementosY,
    new3LinhaImpostosComplementosX,
    new3LinhaImpostosComplementosY,
    newNumeroNotaCanhotoComplementosX,
    newNumeroNotaCanhotoComplementosY,
    newVencimentoCanhotoComplementosX,
    newVencimentoCanhotoComplementosY,
    newOrdemServicoComplementosX,
    newOrdemServicoComplementosY,
    newNomeOperacaoComplementosX,
    newNomeOperacaoComplementosY,
    newReterIssComplementosX,
    newReterIssComplementosY,
    newNumeroRotaComplementosX,
    newNumeroRotaComplementosY,
    newNotaOrigemComplementosX,
    newNotaOrigemComplementosY,
    new1LinhaClassificacaoFiscalComplementosX,
    new1LinhaClassificacaoFiscalComplementosY,
    new2LinhaClassificacaoFiscalComplementosX,
    new2LinhaClassificacaoFiscalComplementosY,
    new3LinhaClassificacaoFiscalComplementosX,
    new3LinhaClassificacaoFiscalComplementosY,
    new4LinhaClassificacaoFiscalComplementosX,
    new4LinhaClassificacaoFiscalComplementosY,
    new5LinhaClassificacaoFiscalComplementosX,
    new5LinhaClassificacaoFiscalComplementosY,
    new6LinhaClassificacaoFiscalComplementosX,
    new6LinhaClassificacaoFiscalComplementosY,
    newInformacaoComplementarComplementosX,
    newInformacaoComplementarComplementosY,
    newQuantidadeInformacaoComplementarComplementos,
    newCstImpostosX,
    newCstImpostosY,
    newAliquotaImpostosX,
    newAliquotaImpostosY,
    newBaseIcmsImpostosX,
    newBaseIcmsImpostosY,
    newValorIcmsImpostosX,
    newValorIcmsImpostosY,
    newCfopImpostosX,
    newCfopImpostosY,
    newNumeroLinhasImpostos,
    newNomeArquivoNotaFiscal,
    status
  );
END $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `conector_inc_conta`
--

DROP PROCEDURE IF EXISTS `conector_inc_conta`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='' */ $$
CREATE DEFINER=`master`@`localhost` PROCEDURE `conector_inc_conta`(
        `inc_nome` VARCHAR(30),
        `inc_idloja` INT,
        `inc_banco` INT,
        `inc_limite` DECIMAL(15,3),
        `inc_tipoConta` VARCHAR(15),
        `inc_titular` VARCHAR(50),
        `inc_tarifaContrato` DECIMAL(15,3),
        `inc_tarifaCustodia` DECIMAL(15,3),
        `inc_tarifaDescontoCheque` DECIMAL(15,3),
        `inc_taxaIOF` DECIMAL(15,3),
        `inc_cedente` VARCHAR(20),
        `inc_tarifaCobranca` DECIMAL(15,3),
        `inc_diasCredito` INT,
        `inc_permitiConciliarManual` CHAR(1),
        `inc_especieDoc` VARCHAR(40),
        `inc_convenio` INT(11),
        `inc_inativo` smallint(6),
        `inc_tipoCobranca` CHAR(1),
        `inc_codigoTipoConta` INT,
        `inc_codDiasProtesto` INT ,
        `inc_qttyDiasProtesto` INT,
        `inc_numeroCheque` VARCHAR(6),
        `inc_dataFechamento` DATE,
        `inc_conta` VARCHAR(10),
        `inc_carteira` INT,
        `inc_cidade` VARCHAR(30),
        `inc_balanco` VARCHAR(1),
        `inc_compensacao` VARCHAR(3),
        `inc_multa` decimal(15,3), `inc_agencia` VARCHAR(7),
         inc_titleCarteiraBank varchar(15),
         inc_messagemCobranca blob)
begin
  insert into conta(        
        `nome`,
        `idloja`,
        `banco`,
        `limite`,
        `tipoConta`,
        `titular`,
        `tarifaContrato`,
        `tarifaCustodia`,
        `tarifaDescontoCheque`,
        `taxaIOF`,
        `cedente`,
        `tarifaCobranca`,
        `diasCredito`,
        `permitiConciliarManual`,
        `especieDoc`,
        `convenio`,
        `inativo`,
        `tipoCobranca`,
        `codigoTipoConta`,
        `codDiasProtesto`,
        `qttyDiasProtesto`,
        `numeroCheque`,
        `dataFechamento`,
        `conta`,
        `carteira`,
        `cidade`,
        `balanco`,
        `compensacao`,
        `multa`,
        `agencia`,
         titleCarteiraBank,
         messagemCobranca) values(        `inc_nome`,
        `inc_idloja`,
        `inc_banco`,
        `inc_limite`,
        `inc_tipoConta`,
        `inc_titular`,
        `inc_tarifaContrato`,
        `inc_tarifaCustodia`,
        `inc_tarifaDescontoCheque`,
        `inc_taxaIOF`,
        `inc_cedente`,
        `inc_tarifaCobranca`,
        `inc_diasCredito`,
        `inc_permitiConciliarManual`,
        `inc_especieDoc`,
        `inc_convenio`,
        `inc_inativo`,
        `inc_tipoCobranca`,
        `inc_codigoTipoConta`,
        `inc_codDiasProtesto`,
        `inc_qttyDiasProtesto`,
        `inc_numeroCheque`,
        `inc_dataFechamento`,
        `inc_conta`,
        `inc_carteira`,
        `inc_cidade`,
        `inc_balanco`,
        `inc_compensacao`,
        `inc_multa`,
        `inc_agencia`,
         inc_titleCarteiraBank,
         inc_messagemCobranca);
        
            select last_insert_id();
  end $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `conector_inc_contaCorrente`
--

DROP PROCEDURE IF EXISTS `conector_inc_contaCorrente`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='' */ $$
CREATE DEFINER=`root`@`localhost` PROCEDURE `conector_inc_contaCorrente`(
   escolha smallint,
  `dateCaixa` DATE,
   cx int(11),
  `inc_idloja` INT(11),
  `inc_codigo` DOUBLE,
  `inc_historico` VARCHAR(100),
  `inc_emissao` DATE,
  `inc_dataConfirma` DATE,
  `inc_entrada` DATE,
  `inc_tipo` VARCHAR(1),
  `inc_usuarioInc` INT(11),
  `inc_vencimento` DATE,
  `inc_chavePagar` DOUBLE,
  `inc_confirma` VARCHAR(1),
  `inc_codigoHistorico` SMALLINT,
  `inc_valor` DECIMAL(15,3),
  `inc_lancamento` VARCHAR(10),
  `inc_tipoOrigem` VARCHAR(1))
begin
DECLARE done INT DEFAULT FALSE; declare VarIdFinalizadora int default 0;
declare VarFinalizadora  INT default 0;
declare VarValue  decimal(15,3) default 0;

case escolha
    when 1 then
      INSERT INTO `conector`.`contacorrente`
                                    (
                                      `idloja`,
                                      `codigo`,
                                      `historico`,
                                      `emissao`,
                                      `dataConfirma`,
                                      `entrada`,
                                      `tipo`,
                                      `usuarioInc`,
                                      `vencimento`,
                                      `chavePagar`,
                                      `confirma`,
                                      `codigoHistorico`,
                                      `valor`,
                                      `lancamento`,
                                      `tipoOrigem`)
                                    VALUES
                                    (
                                      `inc_idloja`,
                                      `inc_codigo`,
                                      `inc_historico`,
                                      `inc_emissao`,
                                      `inc_dataConfirma`,
                                      `inc_entrada`,
                                      `inc_tipo`,
                                      `inc_usuarioInc`,
                                      `inc_vencimento`,
                                      `inc_chavePagar`,
                                      `inc_confirma`,
                                      `inc_codigoHistorico`,
                                      `inc_valor`,
                                    `inc_lancamento`,
                                    `inc_tipoOrigem`
                                );

    SELECT LAST_INSERT_ID();
    when 2 then
start Transaction;
begin

                    DECLARE basicFonte CURSOR for select
                                                        tab.idFinalizadora,
                                                        tab.descricao,
                                                        ifnull((select sum(valor) 
                                                                        from caixaFinalizadora
                                                                                        where
                                                                                    Codigo=tab1.codigo and 
                                                                                    caixa= cx and
                                                                                    data=dateCaixa),0.000)
                                                        from finalizadora tab
                                                                left join caixaFinalizadora tab1 on(tab.idFinalizadora = tab1.Codigo) 
                                                                                         where
                                                                                            (ifnull((select sum(valor) 
                                                                                                from caixaFinalizadora
                                                                                                    where
                                                                                                        Codigo=tab1.codigo and 
                                                                                                        caixa=cx and
                                                                                                        data=dateCaixa),0.000)) > 0
                                                                                                                            group by 1,2;
                          DECLARE CONTINUE HANDLER FOR NOT FOUND SET done = TRUE;
    open basicFonte;

    read_loop: LOOP
                          fetch basicFonte into
                                        VarIdFinalizadora,
                                        VarFinalizadora,
                                        VarValue;

                    IF done THEN
                        LEAVE read_loop;
                    END IF;

                                            INSERT INTO  `conector`.`contacorrente`
                                                        (
                                                          `idloja`,
                                                          `codigo`,
                                                          `historico`,
                                                          `emissao`,
                                                          `dataConfirma`,
                                                          `entrada`,
                                                          `tipo`,
                                                          `usuarioInc`,
                                                          `vencimento`,
                                                          `chavePagar`,
                                                          `confirma`,
                                                          `codigoHistorico`,
                                                          `valor`,
                                                          `lancamento`,
                                                          `tipoOrigem`)
                                                        VALUES
                                                        (
                                                          `inc_idloja`,
                                                          `inc_codigo`,
                                                           concat(`inc_historico`," - ",VarFinalizadora),
                                                          `inc_emissao`,
                                                          `inc_dataConfirma`,
                                                          `inc_entrada`,
                                                          `inc_tipo`,
                                                          `inc_usuarioInc`,
                                                          `inc_vencimento`,
                                                          `inc_chavePagar`,
                                                          `inc_confirma`,
                                                          8,
                                                           VarValue,
                                                          `inc_lancamento`,
                                                          `inc_tipoOrigem`
                                                        );
                                                        call conector_inc_caixaCorrente(`inc_usuarioInc`,
                                                                                         dateCaixa,
                                                                                         cx,
                                                                                         `inc_idloja`,
                                                                                         "D",
                                                                                         "TRANSFERENCIA BANCO",
                                                                                         VarValue,
                                                                                         "0",
                                                                                         "0.000",
                                                                                         null,
                                                                                         null,
                                                                                         cx,
                                                                                         VarFinalizadora,
                                                                                         "CAIXA");
                                                        call conector_inc_caixafinalizadora(last_insert_id(),
                                                                                            VarValue,
                                                                                            dateCaixa,
                                                                                            "D",
                                                                                            cx,
                                                                                            "0.000",
                                                                                            VarIdFinalizadora);
                                                        update contaCorrente 
                                                                        set saldo = (saldo + valor)
                                                                                            where codigo=`inc_codigo` and 
                                                                                                  vencimento > `inc_vencimento`;
            end loop;
        close basicFonte;
commit;
end;

end case;  
  end $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `conector_inc_contasReceber`
--

DROP PROCEDURE IF EXISTS `conector_inc_contasReceber`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='' */ $$
CREATE DEFINER=`master`@`localhost` PROCEDURE `conector_inc_contasReceber`(
                in `inc_cliente` INT,
                in `inc_fatura` VARCHAR(20),
                in `inc_idloja` INT,
                in `inc_flagPagamento` VARCHAR(1),
                in `inc_pagamento` DATE,
                in `inc_vencimento` DATE,
                in `inc_emissao` VARCHAR(45),
                in `inc_reserva` DOUBLE,
                in `inc_usuario` INT,
                in `inc_finalizadora` INT(11),
                in `inc_valorPago` DECIMAL(15,3),
                in `inc_observacao` VARCHAR(50),
                in `inc_tipoMovimentacao` VARCHAR(1),
                in `inc_conta` DOUBLE,
                in `inc_banco` INT,
                in `inc_flagAlteracao` DATE,
                in `inc_carteira` INt,
                in `inc_nossoNumero` VARCHAR(20),
                in `inc_historicoBaixa` VARCHAR(50),
                in `inc_historico` VARCHAR(50),
                in `inc_tarifa` DECIMAL(15,3),
                in `inc_tipoBaixa` VARCHAR(1),
                in `inc_caixa` DOUBLE,
                in `inc_abatimentos` DECIMAL(15,3),
                in `inc_descontos` DECIMAL(15,3),
                in `inc_acrescimos` DECIMAL(15,3),
                in `inc_vencimentoCobranca` DATe,
                in `inc_usuarioBaixa` INT(11),
                in `inc_confirmadas` VARCHAR(1),
                in `inc_terminal` INT(11),
                in `inc_documentoFiscal` DOUBLe,
                in `inc_batimento` CHAR(1),
                in `inc_origem` VARCHAR(15),
                in `inc_parcela` INT,
                in `inc_qttyParcela` INT,
                in `inc_valor` DECIMAL(15,3),
                in inc_taxa decimal(15,3))
begin
  insert into contasReceber(                
                 `cliente`,
                 `fatura` ,
                 `idloja`,
                 `flagPagamento`,
                 `pagamento`,
                 `vencimento`,
                 `emissao`,
                 `reserva`,
                 `usuario`,
                 `finalizadora`,
                 `valorPago`,
                 `observacao`,
                 `tipoMovimentacao`,
                 `conta`,
                 `banco`,
                 `flagAlteracao`,
                 `carteira`,
                 `nossoNumero`,
                 `historicoBaixa`,
                 `historico`,
                 `tarifa`,
                 `tipoBaixa`,
                 `caixa`,
                 `abatimentos`,
                 `descontos`,
                 `acrescimos`,
                 `vencimentoCobranca`,
                 `usuarioBaixa`,
                 `confirmadas`,
                 `terminal`,
                 `documentoFiscal`,
                 `batimento`,
                 `origem`,
                 `parcela`,
                 `qttyParcela`,
                 `valor`, taxa)values
                 (
                 `inc_cliente`,
                 `inc_fatura` ,
                 `inc_idloja`,
                 `inc_flagPagamento`,
                 `inc_pagamento`,
                 `inc_vencimento`,
                 `inc_emissao`,
                 `inc_reserva`,
                 `inc_usuario`,
                 `inc_finalizadora`,
                 `inc_valorPago`,
                 `inc_observacao`,
                 `inc_tipoMovimentacao`,
                 `inc_conta`,
                 `inc_banco`,
                 `inc_flagAlteracao`,
                 `inc_carteira`,
                 `inc_nossoNumero`,
                 `inc_historicoBaixa`,
                 `inc_historico`,
                 `inc_tarifa`,
                 `inc_tipoBaixa`,
                 `inc_caixa`,
                 `inc_abatimentos`,
                 `inc_descontos`,
                 `inc_acrescimos`,
                 `inc_vencimentoCobranca`,
                 `inc_usuarioBaixa`,
                 `inc_confirmadas`,
                 `inc_terminal`,
                 `inc_documentoFiscal`,
                 `inc_batimento`,
                 `inc_origem`,
                 `inc_parcela`,
                 `inc_qttyParcela`,
                 `inc_valor`, inc_taxa);
                 select last_insert_id();
  end $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `conector_inc_contrato`
--

DROP PROCEDURE IF EXISTS `conector_inc_contrato`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='' */ $$
CREATE DEFINER=`master`@`localhost` PROCEDURE `conector_inc_contrato`(
  `inc_idloja` INT,
  `inc_idmetodo` INT,
  `inc_idcliente` INT,
  `inc_idfuncionario` int,
  `inc_emissao` date,
  `inc_valueEntry` DECIMAL(15,3),
  `inc_total` DECIMAL(15,3),
  `inc_encargos` DECIMAL(15,3),
  `inc_status` CHAR(1),
  `inc_observacao` CHAR(100),
  `inc_entrada` smallint(6),
  `inc_tac` DECIMAL(15,3),
  `inc_cet` DECIMAL(15,3) ,
  `inc_taxa` DECIMAL(15,3),
   inc_pedido double,
  `inc_batimento` char(1),
   inc_doc double,
   inc_terminal integer)
begin
            insert into crediario(
                                    `idloja`,
                                    `idmetodo`,
                                    `idcliente`,
                                    `idfuncionario`,
                                    `emissao`,
                                    `valueEntry` ,
                                    `total`,
                                    `encargos`,
                                    `status`,
                                    `observacao`,
                                    `entrada`,
                                    `tac`,
                                    `cet`,
                                    `taxa`,
                                     pedido,
                                     `batimento`,
                                     cupom,
                                     terminal

                                 )values(
                                    `inc_idloja`,
                                    `inc_idmetodo`,
                                    `inc_idcliente`,
                                    `inc_idfuncionario`,
                                    `inc_emissao`,
                                    `inc_valueEntry` ,
                                    `inc_total`,
                                    `inc_encargos`,
                                    `inc_status`,
                                    `inc_observacao`,
                                    `inc_entrada`,
                                    `inc_tac`,
                                    `inc_cet`,
                                    `inc_taxa`,
                                     inc_pedido,
                                     `inc_batimento`,
                                     inc_doc,
                                     inc_terminal);
                                    select last_insert_id();
  end $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `conector_inc_convenio`
--

DROP PROCEDURE IF EXISTS `conector_inc_convenio`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='' */ $$
CREATE DEFINER=`master`@`localhost` PROCEDURE `conector_inc_convenio`(
  in `inc_razao` VARCHAR(45) ,
  in `inc_abreviatura` VARCHAR(30) ,
  in `inc_cnpj` VARCHAR(14) ,
  in `inc_ie` VARCHAR(30) ,
  in `inc_abertura` DATE ,
  in `inc_limite` DECIMAL(15,3)  ,
  in `inc_diaEncerramento` INT(11)  ,
  in `inc_diaRecebimento` INT(11)  ,
  in `inc_porcetagemEstouro` DECIMAL(5,3)  ,
  in `inc_typePrazo` VARCHAR(1) ,
  in `inc_bloqueado` VARCHAR(1) ,
  in `inc_taxaLivre` smallint(6),
  in `inc_dias` INT(11),
  in `inc_preFixado` smallint(6)  ,
  in `inc_idspedMunicipio` INT(10),
  in `inc_idcepbairro` INT(11)  ,
  in `inc_cep` INT(11)  ,
  in `inc_addressLogradouro` VARCHAR(30),
  in `inc_addressBairro` VARCHAR(30),
  in `inc_addressCity` VARCHAR(30),
  in `inc_addressComplemento` VARCHAR(45),
  in `inc_addressNumber` INT(11),
  in  inc_uf varchar(2),
  in `inc_status` smallint(6)
  )
begin
insert into convenio(
    `razao`,
    `abreviatura`,
    `cnpj`,
    `ie`,
    `abertura`,
    `limite`,
    `diaEncerramento`,
    `diaRecebimento`,
    `porcetagemEstouro`,
    `typePrazo`,
    `bloqueado`,
    `taxaLivre`,
    `dias`,
    `preFixado`,
    `idspedMunicipio`,
    `idcepbairro`,
    `cep`,
    `addressLogradouro`,
    `addressBairro`,
    `addressCity`,
   `addressComplemento`,
   `addressNumber`,
    uf,
   `status`)
   values (
    `inc_razao`,
    `inc_abreviatura`,
    `inc_cnpj`,
    `inc_ie`,
    `inc_abertura`,
    `inc_limite`,
    `inc_diaEncerramento`,
    `inc_diaRecebimento`,
    `inc_porcetagemEstouro`,
    `inc_typePrazo`,
    `inc_bloqueado`,
    `inc_taxaLivre`,
    `inc_dias`,
    `inc_preFixado`,
    `inc_idspedMunicipio`,
    `inc_idcepbairro`,
    `inc_cep`,
    `inc_addressLogradouro`,
    `inc_addressBairro`,
    `inc_addressCity`,
    `inc_addressComplemento`,
    `inc_addressNumber`,
     inc_uf,
    `inc_status`);
	select last_insert_id() as codigo;
end $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `conector_inc_convenioMovimento`
--

DROP PROCEDURE IF EXISTS `conector_inc_convenioMovimento`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='' */ $$
CREATE DEFINER=`master`@`localhost` PROCEDURE `conector_inc_convenioMovimento`(
  `inc_idcliente` INT,
  `inc_idloja` INT,
  `inc_empresa` INT,
  `inc_emissao` DATE,
  `inc_vencimento` DATE,
  `inc_valor` DECIMAL(15,3),
  `inc_parcela` INT,
  `inc_prazo` INT,
  `inc_cupom` DOUBLE,
  `inc_idfuncionario` Int,
  `inc_terminal` INT,
  `inc_desconto` DECIMAL(15,3),
  `inc_juros` DECIMAL(15,3),
  `inc_observacao` VARCHAR(100),
  `inc_qttyParcelas` INT,
  `inc_flagAlteracao` DATE,
   inc_pedido double)
begin

  
  insert into convenioMovimento(
                                  `idcliente`,
                                  `idloja`,
                                  `empresa`,
                                  `emissao`,
                                  `vencimento`,
                                  `valor`,
                                  `parcela`,
                                  `prazo`,
                                  `cupom`,
                                  `idfuncionario`,
                                  `terminal`,
                                  `desconto`,
                                  `juros`,
                                  `observacao`,
                                  `qttyParcelas`,
                                  `flagAlteracao`,
                                  pedido
                                )values(
                                 `inc_idcliente`,
                                  `inc_idloja`,
                                  `inc_empresa`,
                                  `inc_emissao`,
                                  `inc_vencimento`,
                                  `inc_valor`,
                                  `inc_parcela`,
                                  `inc_prazo`,
                                  `inc_cupom`,
                                  `inc_idfuncionario`,
                                  `inc_terminal`,
                                  `inc_desconto`,
                                  `inc_juros`,
                                  `inc_observacao`,
                                  `inc_qttyParcelas`,
                                  `inc_flagAlteracao`, inc_pedido
);
                                  select last_insert_id();
  end $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `conector_inc_cupom_cabecalho`
--

DROP PROCEDURE IF EXISTS `conector_inc_cupom_cabecalho`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='' */ $$
CREATE DEFINER=`root`@`%` PROCEDURE `conector_inc_cupom_cabecalho`(
            inc_numeroCupom DOUBLE,
            inc_loja INT(11),
            inc_terminal INT(11),
            inc_dataVenda DATE,
            inc_cliente INT(11),
            inc_hora TIME,
            inc_acrescimo DECIMAL(15,3),
            inc_desconto DECIMAL(15,3),
            inc_cancelados DECIMAL(15,3),
            inc_totalLiquido DECIMAL(15,3),
            inc_totalBruto DECIMAL(15,3),
            inc_operador INT(11),
            inc_situacao SMALLINT(6),
            inc_documentoCPF_CNPJ VARCHAR(16),
            inc_usuario_cancelamento INT(11),
            inc_motivo_cancelamento VARCHAR(45),
            inc_totalCancelado DECIMAL(15,3),
            inc_convenio INT(11),
            inc_conveniado DOUBLE,
            inc_numero_cartao VARCHAR(16),
            inc_forma_recebimento INT(11),
            inc_dataVencimento DATE,
            inc_encargos DECIMAL(15,3),
            inc_diasAtraso int,
            inc_contrato DOUBLE,
            inc_parcela INT(11),
            inc_totalParcela DECIMAL(15,3),
            inc_geraEntrega TINYINT(1),
            inc_lagradouro_entrega VARCHAR(45),
            inc_datetimefinalvenda DATETIME,
            inc_notaFiscal VARCHAR(10),
            inc_serie VARCHAR(3),
            inc_retorno VARCHAR(256),
            inc_totalItens decimal(15,3),
            inc_pedido double, inc_ccf double
                                                )
BEGIN
    INSERT INTO `conector`.`cupom_cabecalho`
    (
        `numeroCupom`,
        `loja`,
        `terminal`,
        `dataVenda`,
        `cliente`,
        `hora`,
        `acrescimo`,
        `desconto`,
        `cancelados`,
        `totalLiquido`,
        `totalBruto`,
        `operador`,
        `situacao`,
        `documentoCPF_CNPJ`,
        `usuario_cancelamento`,
        `motivo_cancelamento`,
        `totalCancelado`,
        `convenio`,
        `conveniado`,
        `numero_cartao`,
        `forma_recebimento`,
        `dataVencimento`,
        `encargos`,
        `diasAtraso`,
        `contrato`,
        `parcela`,
        `totalParcela`,
        `geraEntrega`,
        `lagradouro_entrega`,
        `datetimefinalvenda`,
        `notaFiscal`,
        `serie`,
        `retorno`, totalItens, pedido, ccf
    )
    VALUES
    (
            inc_numeroCupom,
            inc_loja,
            inc_terminal,
            inc_dataVenda,
            inc_cliente,
            inc_hora,
            inc_acrescimo,
            inc_desconto,
            inc_cancelados,
            inc_totalLiquido,
            inc_totalBruto,
            inc_operador,
            inc_situacao,
            inc_documentoCPF_CNPJ,
            inc_usuario_cancelamento,
            inc_motivo_cancelamento,
            inc_totalCancelado,
            inc_convenio,
            inc_conveniado,
            inc_numero_cartao,
            inc_forma_recebimento,
            inc_dataVencimento,
            inc_encargos,
            inc_diasAtraso,
            inc_contrato,
            inc_parcela,
            inc_totalParcela,
            inc_geraEntrega,
            inc_lagradouro_entrega,
            inc_datetimefinalvenda,
            inc_notaFiscal,
            inc_serie,
            inc_retorno,inc_totalItens, inc_pedido, inc_ccf
        );
END $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `conector_inc_cupom_detalhes`
--

DROP PROCEDURE IF EXISTS `conector_inc_cupom_detalhes`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='' */ $$
CREATE DEFINER=`root`@`%` PROCEDURE `conector_inc_cupom_detalhes`(
  `inc_numeroCupom` double,
  `inc_loja` int(11),
  `inc_terminal` int(11),
  `inc_dataVenda` date,
  `inc_produto` int(11),
  `inc_barra` bigint(20),
  `inc_descricaoProduto` varchar(45),
  `inc_quantidade` decimal(15,3),
  `inc_priceVenda` decimal(15,3),
  `inc_desconto` decimal(15,3),
  `inc_total` decimal(15,3),
  `inc_vendedor` int(11),
  `inc_usuarioCancelamento` int(11),
  `inc_motivoCancelamento` int(11),
  `inc_trunca` varchar(1),
  `inc_icms` decimal(15,3),
  `inc_tipoCodigo` smallint(6),
  `inc_unidade` char(3),
  `inc_valorDesconto` decimal(15,3),
  `inc_priceCusto` decimal(15,3),
  `inc_acrescimo` decimal(15,3),
  `inc_tributacao` char(2),
  `inc_reserva` double,
  `inc_metodo` int(11),
  `inc_statusProduto` tinyint(1),
  `inc_codigoProduto` int(11),
  `inc_valorAcrescimo` decimal(15,3), inc_ippt varchar(1), inc_ccf double)
begin
  declare seq integer default 0;

    select (count(*)+1) from conectorpdv.cupom_detalhes where numeroCupom=inc_numeroCupom and loja=inc_loja and terminal=inc_terminal into seq;

INSERT INTO `conector`.`cupom_detalhes`
(   `numeroCupom`,
    `loja`,
    `terminal`,
    `dataVenda`,
    `sequencia`,
    `produto`,
    `barra`,
    `descricaoProduto`,
    `quantidade`,
    `priceVenda`,
    `desconto`,
    `total`,
    `vendedor`,
    `usuarioCancelamento`,
    `motivoCancelamento`,
    `trunca`,
    `icms`,
    `tipoCodigo`,
    `unidade`,
    `valorDesconto`,
    `priceCusto`,
    `acrescimo`,
    `tributacao`,
    `reserva`,
    `metodo`,
    `statusProduto`,
    `codigoProduto`,
    `valorAcrescimo`, ippt, ccf)
VALUES
    (`inc_numeroCupom`,
    `inc_loja`,
    `inc_terminal`,
    `inc_dataVenda`,
    `seq`,
    `inc_produto`,
    `inc_barra`,
    `inc_descricaoProduto`,
    `inc_quantidade`,
    `inc_priceVenda`,
    `inc_desconto`,
    `inc_total`,
    `inc_vendedor`,
    `inc_usuarioCancelamento`,
    `inc_motivoCancelamento`,
    `inc_trunca`,
    `inc_icms`,
    `inc_tipoCodigo`,
    `inc_unidade`,
    `inc_valorDesconto`,
    `inc_priceCusto`,
    `inc_acrescimo`,
    `inc_tributacao`,
    `inc_reserva`,
    `inc_metodo`,
    `inc_statusProduto`,
    `inc_codigoProduto`,
    `inc_valorAcrescimo`, inc_ippt, inc_ccf);
  select seq;
    end $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `conector_inc_cupom_detalhes_movimento_coo`
--

DROP PROCEDURE IF EXISTS `conector_inc_cupom_detalhes_movimento_coo`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='' */ $$
CREATE DEFINER=`root`@`%` PROCEDURE `conector_inc_cupom_detalhes_movimento_coo`(
                           `inc_numero_coo` DOUBLE,
                           `inc_idloja` INT,
                           `inc_idterminal` INT,
                           `inc_dataVenda` DATETIME,
                           `inc_finalizadora` INT(11),
                           `inc_meio_pgto` VARCHAR(30),
                           `inc_cupom_vinculo` DOUBLE,
                           `inc_ccf` DOUBLE,
                           `inc_operador` INT(11),
                           `inc_valor_pago` DECIMAL(15,2),
                           `inc_numero_serie_ecf` VARCHAR(45))
begin

set @sequencia = (select ifnull(max(sequencia),0)+1 from cupom_detalhes_movimento_coo where numero_coo=inc_numero_coo and idloja=inc_idloja and idTerminal=inc_idterminal) + 1;

                          insert into cupom_detalhes_movimento_coo(
                                     `numero_coo`,
                                     `sequencia`,
                                     `idloja`,
                                     `idterminal`,
                                     `dataVenda`,
                                     `finalizadora`,
                                     `meio_pgto`,
                                     `cupom_vinculo`,
                                     `ccf`,
                                     `operador`,
                                     `valor_pago`,
                                     `numero_serie_ecf`) values(
                                     `inc_numero_coo`,
                                      @sequencia,
                                     `inc_idloja`,
                                     `inc_idterminal`,
                                     `inc_dataVenda`,
                                     `inc_finalizadora`,
                                     `inc_meio_pgto`,
                                     `inc_cupom_vinculo`,
                                     `inc_ccf`,
                                     `inc_operador`,
                                     `inc_valor_pago`,
                                     `inc_numero_serie_ecf`);

    end $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `conector_inc_cupom_movimento`
--

DROP PROCEDURE IF EXISTS `conector_inc_cupom_movimento`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='' */ $$
CREATE DEFINER=`root`@`%` PROCEDURE `conector_inc_cupom_movimento`(
  `inc_numeroCupom` double,
  `inc_loja` int(11),
  `inc_terminal` int(11),
  `inc_dataVenda` date,
  `inc_finalizadora` int(11),
  `inc_valor` decimal(15,2),
  `inc_troco` decimal(15,2),
  `inc_juros` decimal(15,2),
  `inc_autentica` smallint(6),
  `inc_convenio` varchar(16),
  `inc_conveniado` varchar(16),
  `inc_chequeDeposito` date,
  `inc_chequeNumero` varchar(10),
  `inc_chequeConta` varchar(10),
  `inc_chequeAgencia` varchar(10),
  `inc_documentoCPF_CNPJ` varchar(16),
  `inc_numeroCartao` varchar(16),
  `inc_parcelamentoCartao` int(11),
  `inc_tipoCartao` char(1),
  `inc_usuario` int(11),
  `inc_banco` int(11))
begin

  declare seq integer default 0;

    select (count(*)+1) from conector.cupom_movimento where numeroCupom=inc_numeroCupom and loja=inc_loja and terminal=inc_terminal and dataVenda=inc_dataVenda into seq;

if((select count(*) from conector.cupom_movimento where  `numeroCupom`=`inc_numeroCupom` and
                                                            `loja`=`inc_loja` and
                                                            `terminal`=`inc_terminal` and
                                                            `dataVenda`=`inc_dataVenda` and
                                                            `finalizadora`=`inc_finalizadora` and
                                                            `valor`=`inc_valor`) = 0) then
insert INTO `conector`.`cupom_movimento`
(
    `numeroCupom`,
    `loja`,
    `terminal`,
    `dataVenda`,
    `sequencia`,
    `finalizadora`,
    `valor`,
    `troco`,
    `juros`,
    `autentica`,
    `convenio`,
    `conveniado`,
    `chequeDeposito`,
    `chequeNumero`,
    `chequeConta`,
    `chequeAgencia`,
    `documentoCPF_CNPJ`,
    `numeroCartao`,
    `parcelamentoCartao`,
    `tipoCartao`,
    `usuario`,
    `banco`)
  VALUES
    (    `inc_numeroCupom`,
    `inc_loja`,
    `inc_terminal`,
    `inc_dataVenda`,
    seq,
    `inc_finalizadora`,
    `inc_valor`,
    `inc_troco`,
    `inc_juros`,
    `inc_autentica`,
    `inc_convenio`,
    `inc_conveniado`,
    `inc_chequeDeposito`,
    `inc_chequeNumero`,
    `inc_chequeConta`,
    `inc_chequeAgencia`,
    `inc_documentoCPF_CNPJ`,
    `inc_numeroCartao`,
    `inc_parcelamentoCartao`,
    `inc_tipoCartao`,
    `inc_usuario`,
    `inc_banco`);
    select seq;
    end if;
end $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `conector_inc_cupom_relatorio`
--

DROP PROCEDURE IF EXISTS `conector_inc_cupom_relatorio`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='' */ $$
CREATE DEFINER=`root`@`%` PROCEDURE `conector_inc_cupom_relatorio`(
  `inc_numeroCupom` double,
  `inc_idloja` int(11),
  `inc_operador` int(11),
  `inc_terminal` int(11),
  `inc_denominacao` char(2),
  `inc_emissao` date,
  `inc_hora` time,
  `inc_gnf` double,
  `inc_cdc` double,
  `inc_grg` double)
begin
  INSERT INTO `conector`.`cupom_relatorio`
(`numeroCupom`,
`idloja`,
`operador`,
`terminal`,
`denominacao`,
`emissao`,
`hora`,
`gnf`,
`cdc`,
`grg`)
VALUES
(
`inc_numeroCupom`,
`inc_idloja`,
`inc_operador`,
`inc_terminal`,
`inc_denominacao`,
`inc_emissao`,
`inc_hora`,
`inc_gnf`,
`inc_cdc`,
`inc_grg`
);
  end $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `conector_inc_cupom_relatorio_meio_pgto`
--

DROP PROCEDURE IF EXISTS `conector_inc_cupom_relatorio_meio_pgto`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='' */ $$
CREATE DEFINER=`root`@`%` PROCEDURE `conector_inc_cupom_relatorio_meio_pgto`(
  `inc_numeroCupom` double,
  `inc_idloja` int(11),
  `inc_operador` int(11),
  `inc_terminal` int(11),
  `inc_emissao` date,
  `inc_hora` time,
  `inc_gnf` double,
  `inc_ccf` double,
  `inc_valor` decimal(15,2),
  `inc_valorEstorno` decimal(15,2),
  `inc_indicadorEstorno` char(1),
  `inc_idfinalizadora` int(11))
begin
  INSERT INTO `conector`.`cupom_relatorio_meio_pgto`
(`numeroCupom`,
`idloja`,
`operador`,
`terminal`,
`emissao`,
`hora`,
`gnf`,
`ccf`,
`valor`,
`valorEstorno`,
`indicadorEstorno`,
`idfinalizadora`)
VALUES
(
`inc_numeroCupom`,
`inc_idloja`,
`inc_operador`,
`inc_terminal`,
`inc_emissao`,
`inc_hora`,
`inc_gnf`,
`inc_ccf`,
`inc_valor`,
`inc_valorEstorno`,
`inc_indicadorEstorno`,
`inc_idfinalizadora`
);
  end $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `conector_inc_dependente`
--

DROP PROCEDURE IF EXISTS `conector_inc_dependente`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='' */ $$
CREATE DEFINER=`root`@`%` PROCEDURE `conector_inc_dependente`(in inc_cliente int(11), in inc_depent int(11))
begin
    if((select count(*) from dependente where dependente=inc_depent and cliente=inc_cliente) = 0) then
      IF(inc_cliente <> inc_depent)THEN
        replace into dependente(cliente,dependente)values(inc_cliente, inc_depent);
      END IF;
    end if;
    select 1;
end $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `conector_inc_detalhe_reducao`
--

DROP PROCEDURE IF EXISTS `conector_inc_detalhe_reducao`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='' */ $$
CREATE DEFINER=`root`@`%` PROCEDURE `conector_inc_detalhe_reducao`(
  `inc_idLoja` INT,
  `inc_numeroCaixa` VARCHAR(20),
  `inc_crz` VARCHAR(6),
  `inc_mf_letra` VARCHAR(1),
  `inc_modelo` VARCHAR(20),
  `inc_operador` INT(11),
  `inc_valorAcumulado` DECIMAL(15,2),
  `inc_totalizador` VARCHAR(7))
begin

        insert into conector.detalhe_reducao(`idLoja`,
  `numeroCaixa`,
  `crz`,
  `mf_letra`,
  `modelo`,
  `operador`,
  `valorAcumulado`, totalizador)
                                                values(`inc_idLoja`,
  `inc_numeroCaixa`,
  `inc_crz`,
  `inc_mf_letra`,
  `inc_modelo`,
  `inc_operador`,
  `inc_valorAcumulado`, inc_totalizador);

  end $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `conector_INC_detalhe_reducao_aliquota`
--

DROP PROCEDURE IF EXISTS `conector_INC_detalhe_reducao_aliquota`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='' */ $$
CREATE DEFINER=`root`@`%` PROCEDURE `conector_INC_detalhe_reducao_aliquota`(
  `inc_idLoja` INT,
  `inc_numeroCaixa` VARCHAR(20),
  `inc_movimento` DATE,
  `inc_crz` VARCHAR(6),
  `inc_aliquota` DECIMAL(15,3),
  `inc_tipo` VARCHAR(1),
  `inc_base` DECIMAL(15,3),
  `inc_reducao` DECIMAL(15,3),
  `inc_valor` DECIMAL(15,3))
BEGIN

  insert into detalhe_reducao_aliquota
  (`idLoja`,
  `numeroCaixa`,
  `movimento`,
  `crz`,
  `aliquota`,
  `tipo`,
  `base`,
  `reducao`,
  `valor`) values
  (
  `inc_idLoja`,
  `inc_numeroCaixa`,
  `inc_movimento`,
  `inc_crz`,
  `inc_aliquota`,
  `inc_tipo`,
  `inc_base`,
  `inc_reducao`,
  `inc_valor`
  );
  end $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `conector_inc_ean`
--

DROP PROCEDURE IF EXISTS `conector_inc_ean`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='STRICT_TRANS_TABLES,STRICT_ALL_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,TRADITIONAL,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION' */ $$
CREATE DEFINER=`master`@`localhost` PROCEDURE `conector_inc_ean`(
                                                in inc_idproduto integer,
                                                in inc_barra double,
                                                in inc_idunidadeMedida integer,
                                                in inc_quantidade numeric(15,3),
                                                in inc_defaultVenda char(1),
                                                in inc_defaultCompra char(1),
                                                in inc_defaultTransferencia char(1),
                                                in inc_status boolean,
                                                in inc_typeEan char(1)
                                              )
begin
  insert into produtoEmbalagem(idproduto,barra,idunidadeMedida,quantidade,defaultVenda,defaultCompra,defaultTransferencia,status,typeEan)
                      values
                              (inc_idproduto, inc_barra, inc_idunidadeMedida, inc_quantidade, inc_defaultVenda, inc_defaultCompra, inc_defaultTransferencia, inc_status, inc_typeEan);

  call conector_alt_ean_insert(inc_defaultVenda, inc_defaultCompra, inc_defaultTransferencia, inc_idproduto, last_insert_id());

end $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `conector_inc_email`
--

DROP PROCEDURE IF EXISTS `conector_inc_email`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='' */ $$
CREATE DEFINER=`master`@`localhost` PROCEDURE `conector_inc_email`(
  `inc_idcliente` int(11),
  `inc_mail` varchar(70),
  `inc_padrao` smallint(6))
begin
start transaction;

    INSERT INTO `conector`.`email`
(
    `idcliente`,
    `mail`,
    `padrao`)
VALUES
(
    inc_idcliente,
    inc_mail,
    inc_padrao
);

commit;

select last_insert_id();
    end $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `conector_inc_endereco`
--

DROP PROCEDURE IF EXISTS `conector_inc_endereco`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='' */ $$
CREATE DEFINER=`master`@`localhost` PROCEDURE `conector_inc_endereco`(
                                            in inc_idcliente integer,
                                            in inc_cep integer,
                                            in inc_idcepbairro integer,
                                            in inc_idenderecoType integer,
                                            in inc_bairro varchar(45),
                                            in inc_logradouro varchar(45),
                                            in inc_complemento varchar(60),
                                            in inc_municipio varchar(45),
                                            in inc_estado char(2),
                                            in inc_numero integer
                                      )
begin
  set @chaveSequencia = (select ((ifnull(count(idendereco),0))+1) as chave from conector.endereco where endereco.idcliente=inc_idcliente);

  if (inc_idenderecoType = 4) then
    set @chaveSequencia = 2;
  end if;

  if (inc_idenderecoType = 3) then
    set @chaveSequencia = 3;
  end if;

  if (inc_idenderecoType = 5) then
    set @chaveSequencia = 4;
  end if;

    insert into
            endereco (idcliente,sequencia,cep,idcepbairro,idenderecoType,bairro,logradouro,complemento,municipio,estado,numero)
        values
                     (inc_idcliente,@chaveSequencia,inc_cep,inc_idcepbairro,inc_idenderecoType,inc_bairro,inc_logradouro,inc_complemento,inc_municipio,inc_estado,inc_numero);


           if(inc_idenderecoType = 4)then
                

  if ((select count(*) as TOTAL from clienteEntrega where idcliente=inc_idcliente) > 0) then
                call conector_alt_entregaStatus(inc_idcliente,last_insert_id());
  end if;
  if((select count(*) as codigo from clienteEntrega where idcliente=inc_idcliente and default1 = 1) = 0) then
     set @a=(select max(idClienteEntrega) from clienteEntrega where idcliente=inc_idcliente);
     update clienteEntrega set default1=1 where idcliente=inc_idcliente and idClienteEntrega=@a;
  end if;
        select last_insert_id() as Codigo;

                
           end if;

                         select last_insert_id() as endereco,idcliente from endereco where idendereco=last_insert_id() and idcliente=inc_idcliente and sequencia=@chaveSequencia;



end $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `conector_inc_entradaCompra`
--

DROP PROCEDURE IF EXISTS `conector_inc_entradaCompra`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='' */ $$
CREATE DEFINER=`master`@`localhost` PROCEDURE `conector_inc_entradaCompra`(
                                                in idEntrada double, in idCompra double
                                           )
begin
    insert into `conector`.`entradaCompra` (`identrada`, `idpedidoCompra`)values(identrada, idCompra);
end $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `conector_inc_entradaConhecimento`
--

DROP PROCEDURE IF EXISTS `conector_inc_entradaConhecimento`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='' */ $$
CREATE DEFINER=`master`@`localhost` PROCEDURE `conector_inc_entradaConhecimento`(
  `inc_chaveEntrada` DOUBLE,
  `inc_nr_nota_fiscal` VARCHAR(10),
  `inc_serie` VARCHAR(3),
  `inc_cpf_cnpj` VARCHAR(20),
   inc_valor decimal(15,3)
)
begin
    insert into entradaConhecimento(
                                         `chaveEntrada`,
                                         `nr_nota_fiscal`,
                                         `serie`,
                                         `cpf_cnpj`,
                                          valor
                                   )values
                                   (
                                         `inc_chaveEntrada`,
                                         `inc_nr_nota_fiscal`,
                                         `inc_serie`,
                                         `inc_cpf_cnpj`,
                                          inc_valor
                                   );
                                   select last_insert_id();
  end $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `conector_inc_entradaFinanceiro`
--

DROP PROCEDURE IF EXISTS `conector_inc_entradaFinanceiro`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='' */ $$
CREATE DEFINER=`master`@`localhost` PROCEDURE `conector_inc_entradaFinanceiro`(
in   `inc_identrada` DOUBLE,
in   `inc_idfinalizadora` INT(11),
in   `inc_documento` VARCHAR(20),
in   `inc_prazo` INT(11),
in   `inc_vencimento` DATE,
in   `inc_competencia` DATE,
in   `inc_emissaoDocumento` DATE,
in   `inc_desconto` DECIMAL(15,3),
in   `inc_financeiro` DECIMAL(15,3),
in   `inc_valor` DECIMAL(15,3) ,
in   `inc_parcela` VARCHAR(5) ,
in   `inc_idbanco` INt,
in   `inc_nossoNumero` VARCHAR(20) ,
in   `inc_cedente` VARCHAR(20), in inc_formaPgto varchar(2))
begin
    if(inc_idbanco is null)then
        select inc_idbanco="0";
    end if;
   insert into entradaFinanceiro(
   `identrada`,
   `idfinalizadora`,
   `documento`,
   `prazo`,
   `vencimento` ,
   `competencia`,
   `emissaoDocumento`,
   `desconto`,
   `financeiro`,
   `valor`,
   `parcela`,
   `idbanco`,
   `nossoNumero`,
   `cedente`, formaPgto)values(
   `inc_identrada`,
   `inc_idfinalizadora`,
   `inc_documento`,
   `inc_prazo`,
   `inc_vencimento` ,
   `inc_competencia`,
   `inc_emissaoDocumento`,
   `inc_desconto`,
   `inc_financeiro`,
   `inc_valor`,
   `inc_parcela`,
   `inc_idbanco`,
   `inc_nossoNumero`,
   `inc_cedente`, inc_formaPgto);
   select last_insert_id() into @id;
   select sum(valor) from entradaFinanceiro where identrada=inc_idEntrada into @total;
   select @id, @total;
  end $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `conector_inc_entradaImp`
--

DROP PROCEDURE IF EXISTS `conector_inc_entradaImp`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='' */ $$
CREATE DEFINER=`master`@`localhost` PROCEDURE `conector_inc_entradaImp`(
  in `inc_identrada` DOUBLE,
  in `inc_cfop` VARCHAR(6),
  in `inc_cst` CHAR(3),
  in `inc_aliquota` DECIMAL(15,3),
  in `inc_reducao` DECIMAL(15,3) ,
  in `inc_valorApurado` DECIMAL(15,3) ,
  in `inc_valorInformado` DECIMAL(15,3) ,
  in `inc_impostoApurado` DECIMAL(15,3) ,
  in `inc_impostoInformado` DECIMAL(15,3) ,
  in `inc_baseIsentoApurado` DECIMAL(15,3) ,
  in `inc_baseIsentoInformado` DECIMAL(15,3) ,
  in `inc_baseIpiApurado` DECIMAL(15,3) ,
  in `inc_valorIpiApurado` DECIMAL(15,3) ,
  in `inc_tipo` VARCHAR(1),
  in  retorno char(1))
begin
	insert into entradaImp(
      `identrada`,
      `cfop`,
      `cst`,
      `aliquota`,
      `reducao`,
      `valorApurado`,
      `valorInformado`,
      `impostoApurado`,
      `impostoInformado`,
      `baseIsentoApurado`,
      `baseIsentoInformado`,
      `baseIpiApurado`,
      `valorIpiApurado`,
      `tipo`
)values(
      `inc_identrada`,
      `inc_cfop`,
      `inc_cst`,
      `inc_aliquota`,
      `inc_reducao`,
      `inc_valorApurado`,
      `inc_valorInformado`,
      `inc_impostoApurado`,
      `inc_impostoInformado`,
      `inc_baseIsentoApurado`,
      `inc_baseIsentoInformado`,
      `inc_baseIpiApurado`,
      `inc_valorIpiApurado`,
      `inc_tipo`);
      
       if(retorno = "s") then         select last_insert_id();
       end if;
end $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `conector_inc_entradaItem`
--

DROP PROCEDURE IF EXISTS `conector_inc_entradaItem`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='' */ $$
CREATE DEFINER=`master`@`localhost` PROCEDURE `conector_inc_entradaItem`(
                   in  `inc_identrada` DOUBLE,
                   in  `inc_idProduto` INT,
                   in  `inc_custoLiquido` DECIMAL(15,3),
                   in  `inc_custoBruto` DECIMAL(15,3),
                   in  `inc_custoNota` DECIMAL(15,3),
                   in  `inc_custoNotaTotal` DECIMAL(15,3),
                   in  `inc_custoReposicao` DECIMAL(15,3),
                   in  `inc_custoTotal` DECIMAL(15,3),
                   in  `inc_discount1` DECIMAL(15,3),
                   in  `inc_discount2` DECIMAL(15,3),
                   in  `inc_discount3` DECIMAL(15,3),
                   in  `inc_discountValue` DECIMAL(15,3),
                   in  `inc_acrescimo` DECIMAL(15,3),
                   in  `inc_bonificacao` DECIMAL(15,3),
                   in  `inc_despesasNaoTributadas` DECIMAL(15,3),
                   in  `inc_despesasTributadas` DECIMAL(15,3),
                   in  `inc_chaveEmbalagem` INT,
                   in  `inc_barra` DOUBLE,
                   in  `inc_idunidadeMedida` INT(11) ,
                   in  `inc_entregue` VARCHAR(1),
                   in  `inc_financeiro` DECIMAL(15,3),
                   in  `inc_frete` DECIMAL(15,3),
                   in  `inc_icmsEntrada` DECIMAL(15,3),
                   in  `inc_reducaoEntrada` DECIMAL(15,3),
                   in  `inc_icmsFrete` DECIMAL(15,3),
                   in  `inc_icmsSaida` DECIMAL(15,3),
                   in  `inc_reducaoSaida` DECIMAL(15,3),
                   in  `inc_ipi` DECIMAL(15,3),
                   in  `inc_priceVenda` DECIMAL(15,3),
                   in  `inc_quantidade` DECIMAL(15,3),
                   in  `inc_sugestao` DECIMAL(15,3),
                   in  `inc_valorIpi` DECIMAL(15,3),
                   in  `inc_substituicao` DECIMAL(15,3),
                   in  `inc_lucro` DECIMAL(15,3),
                   in  `inc_lucroValor` DECIMAL(15,3),
                   in  `inc_lucroBruto` DECIMAL(15,3),
                   in  `inc_quantidadeRecebida` DECIMAL(15,3),
                   in  `inc_quantidadePendente` DECIMAL(15,3),
                   in  `inc_creditoIcms` DECIMAL(15,3),
                   in  `inc_creditoPis` DECIMAL(15,3),
                   in  `inc_creditoCofins` DECIMAL(15,3),
                   in  `inc_valorFinanceiro` DECIMAL(15,3),
                   in  `inc_valorFrete` DECIMAL(15,3),
                   in  `inc_sumFrete` smallint(6),
                   in  `inc_numeroNota` VARCHAR(10),
                   in  `inc_serie` VARCHAR(3),
                   in  `inc_diferencaQtty` DECIMAL(15,3),
                   in  `inc_diferencaCustoLiqNota` DECIMAL(15,3),
                   in  `inc_diferencaCustoTotalNota` DECIMAL(15,3),
                   in  `inc_dateInsert` date,
                   in  `inc_margem` DECIMAL(15,3),
                   in  `inc_sumSt` smallint(6),
                   in  `inc_cstIpi` INT,
                   in  `inc_cstPis` INT,
                   in  `inc_cstCofins` INT,
                   in  `inc_cstIcms` CHAR(3),
                   in  `inc_icmsCreditoSt` DECIMAL(15,3),
                   in  `inc_icmsTotalSt` DECIMAL(15,3),
                   in  `inc_cfop` VARCHAR(6),
                   in  `inc_cteInterna` DECIMAL(15,3),
                   in  `inc_cteInterestadual` DECIMAL(15,3),
                   in  `inc_valorIcmsSubstituicao` DECIMAL(15,3),
                   in  `inc_baseCalculoSubstituicao` DECIMAL(15,3),
                   in  `inc_basePis` DECIMAL(15,3),
                   in  `inc_baseCofins` DECIMAL(15,3),
                   in  `inc_valorPis` DECIMAL(15,3),
                   in  `inc_valorCofins` DECIMAL(15,3),
                   in  `inc_valorIpiTotal` DECIMAL(15,3),
                   in  `inc_baseIcms` DECIMAL(15,3),
                   in  `inc_bonificacaoValor` DECIMAL(15,3),
                   in  `inc_validade` CHAR(8),
                   in  `inc_flagRecebe` smallint(6),
                   IN   inc_typeAliquota CHAR(1), 
                   in   inc_Vendo numeric(15,3),
                   in   inc_chaveItemCompra double,
                   in   inc_novoPrecoVenda numeric(15,3))
begin

insert into entradaItem(
                         `identrada` ,
                         `idProduto` ,
                         `custoLiquido`,
                         `custoBruto`,
                         `custoNota`,
                         `custoNotaTotal`,
                         `custoReposicao`,
                         `custoTotal`,
                         `discount1`,
                         `discount2`,
                         `discount3`,
                         `discountValue`,
                         `acrescimo`,
                         `bonificacao`,
                         `despesasNaoTributadas`,
                         `despesasTributadas`,
                         `chaveEmbalagem` ,
                         `barra` ,
                         `idunidadeMedida`,
                         `entregue`,
                         `financeiro`,
                         `frete`,
                         `icmsEntrada`,
                         `reducaoEntrada`,
                         `icmsFrete`,
                         `icmsSaida`,
                         `reducaoSaida`,
                         `ipi`,
                         `priceVenda`,
                         `quantidade`,
                         `sugestao`,
                         `valorIpi`,
                         `substituicao`,
                         `lucro`,
                         `lucroValor`,
                         `lucroBruto`,
                         `quantidadeRecebida`,
                         `quantidadePendente`,
                         `creditoIcms`,
                         `creditoPis`,
                         `creditoCofins`,
                         `valorFinanceiro`,
                         `valorFrete`,
                         `sumFrete` ,
                         `numeroNota`,
                         `serie`,
                         `diferencaQtty`,
                         `diferencaCustoLiqNota`,
                         `diferencaCustoTotalNota`,
                         `dateInsert`,
                         `margem`,
                         `sumSt`,
                         `cstIpi` ,
                         `cstPis` ,
                         `cstCofins` ,
                         `cstIcms`,
                         `icmsCreditoSt`,
                         `icmsTotalSt`,
                         `cfop`,
                         `cteInterna`,
                         `cteInterestadual`,
                         `valorIcmsSubstituicao`,
                         `baseCalculoSubstituicao`,
                         `basePis`,
                         `baseCofins`,
                         `valorPis`,
                         `valorCofins`,
                         `valorIpiTotal`,
                         `baseIcms`,
                         `bonificacaoValor`,
                         `validade`,
                         `flagRecebe`,
                          typeAliquota, 
                          vendo,
                          chaveItemCompra,
                          novoPrecoVenda
                        )values(
                        `inc_identrada` ,
                         `inc_idProduto` ,
                         `inc_custoLiquido`,
                         `inc_custoBruto`,
                         `inc_custoNota`,
                         `inc_custoNotaTotal`,
                         `inc_custoReposicao`,
                         `inc_custoTotal`,
                         `inc_discount1`,
                         `inc_discount2`,
                         `inc_discount3`,
                         `inc_discountValue`,
                         `inc_acrescimo`,
                         `inc_bonificacao`,
                         `inc_despesasNaoTributadas`,
                         `inc_despesasTributadas`,
                         `inc_chaveEmbalagem` ,
                         `inc_barra` ,
                         `inc_idunidadeMedida`,
                         `inc_entregue`,
                         `inc_financeiro`,
                         `inc_frete`,
                         `inc_icmsEntrada`,
                         `inc_reducaoEntrada`,
                         `inc_icmsFrete`,
                         `inc_icmsSaida`,
                         `inc_reducaoSaida`,
                         `inc_ipi`,
                         `inc_priceVenda`,
                         `inc_quantidade`,
                         `inc_sugestao`,
                         `inc_valorIpi`,
                         `inc_substituicao`,
                         `inc_lucro`,
                         `inc_lucroValor`,
                         `inc_lucroBruto`,
                         `inc_quantidadeRecebida`,
                         `inc_quantidadePendente`,
                         `inc_creditoIcms`,
                         `inc_creditoPis`,
                         `inc_creditoCofins`,
                         `inc_valorFinanceiro`,
                         `inc_valorFrete`,
                         `inc_sumFrete` ,
                         `inc_numeroNota`,
                         `inc_serie`,
                         `inc_diferencaQtty`,
                         `inc_diferencaCustoLiqNota`,
                         `inc_diferencaCustoTotalNota`,
                         `inc_dateInsert`,
                         `inc_margem`,
                         `inc_sumSt`,
                         `inc_cstIpi` ,
                         `inc_cstPis` ,
                         `inc_cstCofins` ,
                         `inc_cstIcms`,
                         `inc_icmsCreditoSt`,
                         `inc_icmsTotalSt`,
                         `inc_cfop`,
                         `inc_cteInterna`,
                         `inc_cteInterestadual`,
                         `inc_valorIcmsSubstituicao`,
                         `inc_baseCalculoSubstituicao`,
                         `inc_basePis`,
                         `inc_baseCofins`,
                         `inc_valorPis`,
                         `inc_valorCofins`,
                         `inc_valorIpiTotal`,
                         `inc_baseIcms`,
                         `inc_bonificacaoValor`,
                         `inc_validade`,
                         `inc_flagRecebe`,
                          inc_typeAliquota, 
                          inc_vendo,
                          inc_chaveItemCompra,
                          inc_novoPrecoVenda);
select last_insert_id();
end $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `conector_inc_entradaPrice`
--

DROP PROCEDURE IF EXISTS `conector_inc_entradaPrice`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='' */ $$
CREATE DEFINER=`master`@`localhost` PROCEDURE `conector_inc_entradaPrice`(in VarChave double, in VarProduto double, in store double)
begin
    declare done int default false;
    declare VarLoja double;
    declare VarPrice numeric(15,3);
    
    select priceVenda 
                from produtoPrice
                                where
                                    idProduto=VarProduto and idLoja=store
                                                into VarPrice;
    
BEGIN                 declare fonteOne Cursor for select idLoja
                                                       from
                                                           loja;
                 DECLARE CONTINUE HANDLER FOR NOT FOUND SET done = TRUE;
                 open fonteOne;
                                read_loop1: LOOP
                                    fetch fonteOne into VarLoja;

                                        if done then
                                            leave read_loop1;
                                        end if; 
                                        
                                            insert into entradaPrice(chave,loja,priceVenda)
                                                                                        values
                                                                    (VarChave,VarLoja, VarPrice);
                                                                    
                                end loop;
                close fonteOne;
        END;
end $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `conector_inc_entrega`
--

DROP PROCEDURE IF EXISTS `conector_inc_entrega`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='' */ $$
CREATE DEFINER=`master`@`localhost` PROCEDURE `conector_inc_entrega`(
  in `inc_idpedido` DOUBLE,
  in `inc_idloja` INT,
  in `inc_logradouro` VARCHAR(40),
  in `inc_bairro` VARCHAR(40),
  in `inc_cep` VARCHAR(8),
  in `inc_cidade` VARCHAR(30),
  in `inc_codigoMunicipio` INT,
  in `inc_numero` INT(11),
  in `inc_uf` VARCHAR(2),
  in `inc_complemento` VARCHAR(45),
  in `inc_referencia` VARCHAR(45),
  in `inc_dataEntrega` DATE,
  in `inc_horaEntrega` TIME,
  in `inc_typeEntrega` CHAR(1),
  in `inc_idtransportadora` INT
  )
begin
	replace into pedidoEntrega(
	   `idpedido`,
	   `idloja`,
	   `logradouro`,
	   `bairro`,
	   `cep`,
	   `cidade`,
	   `codigoMunicipio`,
	   `numero`,
	   `uf`,
	   `complemento`,
	   `referencia` ,
	   `dataEntrega`,
	   `horaEntrega`,
	   `typeEntrega`,
	   `idtransportadora`)VALUES(
	   `inc_idpedido`,
	   `inc_idloja`,
	   `inc_logradouro`,
	   `inc_bairro`,
	   `inc_cep`,
	   `inc_cidade`,
	   `inc_codigoMunicipio`,
	   `inc_numero`,
	   `inc_uf`,
	   `inc_complemento`,
	   `inc_referencia` ,
	   `inc_dataEntrega`,
	   `inc_horaEntrega`,
	   `inc_typeEntrega`,
	   `inc_idtransportadora`);
					
   end $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `conector_inc_escolaridade`
--

DROP PROCEDURE IF EXISTS `conector_inc_escolaridade`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='' */ $$
CREATE DEFINER=`master`@`localhost` PROCEDURE `conector_inc_escolaridade`(
                                                in inc_descricao varchar(45)
                                          )
begin
        set @a = (select (max(ifnull(idEscolaridade,0))+1) from escolaridade);
        insert into escolaridade (idEscolaridade,descricao) values(@a,inc_descricao);
        
        select @a;
end $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `conector_inc_fechamentoCaixa`
--

DROP PROCEDURE IF EXISTS `conector_inc_fechamentoCaixa`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='' */ $$
CREATE DEFINER=`root`@`%` PROCEDURE `conector_inc_fechamentoCaixa`(
        inc_dataMovimento DATE,
        inc_loja INT,
        inc_terminal INT,
        inc_funcionario INT,
        inc_grandeTotalBegin DECIMAL(15,2),
        inc_contadorInicial INT,
        inc_contadorReducao int,
        inc_contadorCancelados int
                               )
begin

    declare inc_sequencia integer;
    set inc_sequencia = (select ifnull(max(sequencia),0)+1 from fechamentoCaixa
                                    where
                                        dataMovimento=inc_dataMovimento and
                                        loja=inc_loja and
                                        terminal=inc_terminal and
                                        funcionario=inc_funcionario);

    INSERT INTO `conector`.`fechamentocaixa`
    (
        `dataMovimento`,
        `loja`,
        `terminal`,
        `sequencia`,
        `funcionario`,
         grandeTotalBegin,
        `contadorInicial`,
         contadorReducao,
         contadorCancelados)
    VALUES
    (
            inc_dataMovimento,
            inc_loja,
            inc_terminal,
            inc_sequencia,
            inc_funcionario,
            inc_grandeTotalBegin,
            inc_contadorInicial,
            inc_contadorReducao,
            inc_contadorCancelados
        );
    end $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `conector_inc_feriado`
--

DROP PROCEDURE IF EXISTS `conector_inc_feriado`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='' */ $$
CREATE DEFINER=`master`@`localhost` PROCEDURE `conector_inc_feriado`(
                in `inc_descricao` VARCHAR(30),
                in `inc_idloja` INT,
                in `inc_feriado` DATE,
                in `inc_todasLoja` smallint(6)
                )
begin
        insert into feriado(
                                `descricao`,
                                `idloja`,
                                `feriado`,
                                `todasLoja` 
                            )values
                            (
                                `inc_descricao`,
                                `inc_idloja`,
                                `inc_feriado`,
                                `inc_todasLoja` 
                            );
                            select last_insert_id();
end $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `conector_inc_filiacao`
--

DROP PROCEDURE IF EXISTS `conector_inc_filiacao`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='' */ $$
CREATE DEFINER=`root`@`%` PROCEDURE `conector_inc_filiacao`(
  `inc_cliente` INT,
  `inc_consulta` DATE,
  `inc_nascimento` DATE,
  `inc_parentesco` VARCHAR(40),
  `inc_motivo` VARCHAR(200),
  `inc_nomeRetorno` VARCHAR(45),
  `inc_documento` VARCHAR(30),
  `inc_banco` INT(11),
  `inc_agencia` VARCHAR(20),
  `inc_conta` VARCHAR(20),
  `inc_numeroCheque` VARCHAR(20),
  `inc_serie` VARCHAR(6),
  `inc_qttyCheque` INT,
  `inc_usuario` INT,
  `inc_razaoStore` VARCHAR(45),
  `inc_instituicao` VARCHAR(30),
  `inc_servico` INT(11))
begin

        INSERT INTO `conector`.`filiacao`
        (
            `cliente`,
            `consulta`,
            `nascimento`,
            `parentesco`,
            `motivo`,
            `nomeRetorno`,
            `documento`,
            `banco`,
            `agencia`,
            `conta`,
            `numeroCheque`,
            `serie`,
            `qttyCheque`,
            `usuario`,
            `razaoStore`,
            `instituicao`,
            `servico`
        )
    VALUES
        (
            inc_cliente,
            inc_consulta,
            inc_nascimento,
            inc_parentesco,
            inc_motivo,
            inc_nomeRetorno,
            inc_documento,
            inc_banco,
            inc_agencia,
            inc_conta,
            inc_numeroCheque,
            inc_serie,
            inc_qttyCheque,
            `inc_usuario`,
            `inc_razaoStore`,
            `inc_instituicao`,
            `inc_servico`
        );

    select last_insert_id();
  end $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `conector_inc_finalizadora`
--

DROP PROCEDURE IF EXISTS `conector_inc_finalizadora`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='' */ $$
CREATE DEFINER=`master`@`localhost` PROCEDURE `conector_inc_finalizadora`(
                         in inc_DescricaoFinalizadora varchar(30),
                         in inc_TaxaFinanceiraFinalizadora numeric(9,3),
                         in inc_TrocoMaximoFinalizadora numeric(9,3),
                         in inc_typeFinalizadora char(1),
                         in inc_cobrancaObrigatoria boolean, 
                         in inc_taxaObrigatoria numeric(9,3), 
                         in inc_idFinalizadoraTroco integer, 
                         in inc_typeVenda char(2),
                         in inc_flagRestrige boolean, 
                         in inc_flagVencimento boolean,
                         in inc_flagPermitiTroco boolean,
                         in inc_flagBoleto boolean, 
                         in inc_flagPromissoria boolean, 
                         in inc_administradora integer, 
                         in inc_status boolean
                                            
                                          )
begin
insert into finalizadora (descricao,
                          tac,
                          trocoMax,
                          typeFinalizadora,
                          cobrancaObrigatoria,
                          taxaObrigatoria,
                          idFinalizadoraTroco,
                          typeVenda,
                          flagRestringe,
                          flagVencimento,
                          flagPermitiTroco,
                          flagBoleto,
                          flagPromissoria,
                          administradora,
                          status)
                    values
                         (inc_DescricaoFinalizadora,
                         inc_TaxaFinanceiraFinalizadora,
                         inc_TrocoMaximoFinalizadora,
                         inc_typeFinalizadora,
                         inc_cobrancaObrigatoria, 
                         inc_taxaObrigatoria, 
                         inc_idFinalizadoraTroco,
                         inc_typeVenda, 
                         inc_flagRestrige, 
                         inc_flagVencimento,
                         inc_flagPermitiTroco, 
                         inc_flagBoleto, 
                         inc_flagPromissoria, 
                         inc_administradora,
                         inc_status);

    select last_insert_id() as codigo from finalizadora where idfinalizadora = last_insert_id();

end $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `conector_inc_fisica`
--

DROP PROCEDURE IF EXISTS `conector_inc_fisica`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='' */ $$
CREATE DEFINER=`master`@`localhost` PROCEDURE `conector_inc_fisica`(
					in inc_idCliente integer,
					in inc_cpf varchar(12),
          in inc_idatividade integer,
					in inc_nome varchar(45),
					in inc_nascimento date,
					in inc_idsexo int,
					inc_identidade int,
					inc_idcivil int,
					inc_idTipoFornecedor int
					)
BEGIN
		insert into
				fisica
					(
          idCliente,
					cpf,
          idatividade,
					nome,
					nascimento,
					idsexo,
					identidade,
					idcivil,idTipoFornecedor
					)	values
          (
          inc_idCliente,
					inc_cpf,
          inc_idatividade,
					inc_nome,
					inc_nascimento,
					inc_idsexo,
					inc_identidade,
					inc_idcivil,inc_idTipoFornecedor
					
					);
		select last_insert_id() as codigo from fisica where idcliente=last_insert_id();
END $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `conector_inc_fone`
--

DROP PROCEDURE IF EXISTS `conector_inc_fone`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='' */ $$
CREATE DEFINER=`master`@`localhost` PROCEDURE `conector_inc_fone`(
                                    in inc_idcliente integer, 
                                    in inc_idatividade integer,
                                    in inc_ddd char(4),
                                    in inc_telefone varchar(8),
                                    in inc_ramal integer,
                                    in inc_idfonetype integer,
                                    in inc_complemento varchar(30), 
                                    in inc_priori char(1)
                                  )
begin
insert into fone(idcliente,idatividade,ddd,telefone,ramal,idfonetype,complemento, priori)
            values(inc_idcliente,inc_idatividade,inc_ddd,inc_telefone,inc_ramal,inc_idfonetype,inc_complemento, inc_priori);

if inc_priori = 'v' then
    call conector_alt_foneStatus(inc_idcliente,last_insert_id());
end if;
set @fone = (select min(idfone) from fone where idcliente=inc_idcliente);

if((select count(priori) as codigo from fone where idcliente=inc_idcliente and priori = 'v') <= 0) then
   update fone set priori='v' where idcliente=inc_idcliente and idfone in(@fone);
end if;

select last_insert_id() from fone where idFone = last_insert_id() and idcliente=inc_idcliente;
end $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `conector_inc_funcionario`
--

DROP PROCEDURE IF EXISTS `conector_inc_funcionario`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='' */ $$
CREATE DEFINER=`master`@`localhost` PROCEDURE `conector_inc_funcionario`(
                                 in inc_nome varchar(45),
                            	   in inc_apelido varchar(12),
                            	   in inc_nascimento date,
                            	   in inc_idloja integer,
                            	   in inc_idfuncao integer,
                            	   in inc_idcivil integer,
                            	   in inc_idsexo integer,
                            	   in inc_inclusao datetime,
                                 in inc_comissaoAvista numeric(5,3),
                                 in inc_comissaoAprazo numeric(5,3),
                                 in inc_cpf varchar(12),
                                 in inc_identidade varchar(21),
                                 in inc_email varchar(45),
                                 in inc_pis varchar(21),
                                 in inc_idusuario integer,
                                 in inc_admissao date,
                                 in inc_demissao date,
                                 in inc_carteira varchar(21),
                                 in inc_obs blob,
                                 in inc_idPremiacao integer,
                                 in inc_idMetaVenda integer,
                                 in inc_idprofissao integer,
                                 in inc_idEscolaridade integer,
                                 in inc_acessoFiscal smallint,
                                 in inc_acessoMenuFiscal smallint,
                                 in inc_crc varchar(15),
                                 in inc_contador_cnpj varchar(14),
                                 in send_cep integer,
                                 in send_idcepbairro integer,
                                 in send_idenderecoType integer,
                                 in send_bairro varchar(45),
                                 in send_complemento varchar(60),
                                 in send_municipio varchar(45),
                                 in send_estado char(2),
                                 in send_numero integer,
                                 in send_logradouro varchar(45)

			)
BEGIN

  declare VarID double default 0;
  declare VarIDAdress double default 0;

start Transaction;

  insert into
		funcionario
			(
				  nome,
				  apelido,
				  nascimento,
				  idloja,
				  idfuncao,
				  idcivil,
				  idsexo,
				  inclusao,
				  comissaoAvista,
				  comissaoAprazo,
				  cpf,
				  identidade,
				  email,
				  pis,
				  idusuario,
				  Admissao,
				  demissao,
				  carteira,
				  observacao,
				  idPremiacao,
				  idMetaVenda,
				  idprofissao,
				  idEscolaridade,
                  acessoFiscal,
                                 acessoMenuFiscal, crc, contador_cnpj
			)	values
			(
				   inc_nome,
                            	   inc_apelido,
                            	   inc_nascimento ,
                            	   inc_idloja ,
                            	   inc_idfuncao ,
                            	   inc_idcivil ,
                            	   inc_idsexo ,
                            	   inc_inclusao ,
                                 inc_comissaoAvista ,
                                 inc_comissaoAprazo ,
                                 inc_cpf,
                                 inc_identidade,
                                 inc_email,
                                 inc_pis,
                                 inc_idusuario ,
                                 inc_admissao ,
                                 inc_demissao ,
                                 inc_carteira,
                                 inc_obs ,
                                 inc_idPremiacao ,
                                 inc_idMetaVenda ,
                                 inc_idprofissao ,
                                 inc_idEscolaridade,
                                 inc_acessoFiscal,
                                 inc_acessoMenuFiscal, inc_crc, inc_contador_cnpj

			);

      set VarID = last_insert_id();
      call conector_inc_funcionarioEndereco(last_insert_id(),send_cep,send_idcepbairro,send_idenderecoType,send_bairro,send_logradouro,send_complemento,send_municipio,send_estado,send_numero,VarIDAdress);
      select VarID,VarIDAdress;
commit;
      END $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `conector_inc_funcionarioEndereco`
--

DROP PROCEDURE IF EXISTS `conector_inc_funcionarioEndereco`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='' */ $$
CREATE DEFINER=`master`@`localhost` PROCEDURE `conector_inc_funcionarioEndereco`(
                                            in inc_idFuncionario integer,
                                            in inc_cep integer,
                                            in inc_idcepbairro integer,
                                            in inc_idenderecoType integer,
                                            in inc_bairro varchar(45),
                                            in inc_logradouro varchar(45),
                                            in inc_complemento varchar(60),
                                            in inc_municipio varchar(45),
                                            in inc_estado char(2),
                                            in inc_numero integer, out VarIDAdress double
                                      )
begin
set @chaveSequencia = (select ((ifnull(count(idFuncionarioEndereco),0))+1) as chave from conector.funcionario_endereco where funcionario_endereco.idfuncionario=inc_idFuncionario);
    insert into
            funcionario_endereco (idFuncionario,sequencia,cep,idcepbairro,idenderecoType,bairro,logradouro,complemento,municipio,estado,numero)
        values
                     (inc_idFuncionario,@chaveSequencia,inc_cep,inc_idcepbairro,inc_idenderecoType,inc_bairro,inc_logradouro,inc_complemento,inc_municipio,inc_estado,inc_numero);

select last_insert_id() as endereco from conector.funcionario_endereco where idFuncionarioEndereco=last_insert_id() and funcionario_endereco.idfuncionario=inc_idFuncionario and sequencia=@chaveSequencia into VarIDAdress;


end $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `conector_inc_funcionario_fone`
--

DROP PROCEDURE IF EXISTS `conector_inc_funcionario_fone`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='' */ $$
CREATE DEFINER=`master`@`localhost` PROCEDURE `conector_inc_funcionario_fone`(
                                    in inc_idFuncionario integer, 
                                    in inc_ddd char(4),
                                    in inc_telefone varchar(8),
                                    in inc_ramal integer,
                                    in inc_idfonetype integer,
                                    in inc_complemento varchar(30), 
                                    in inc_priori char(1)
                                  )
begin
insert into funcionario_fone(idFuncionario,ddd,telefone,ramal,idfonetype,complemento, priori)
            values(inc_idFuncionario,inc_ddd,inc_telefone,inc_ramal,inc_idfonetype,inc_complemento, inc_priori);

if inc_priori = 'v' then
    call conector_alt_funcionario_foneStatus(inc_idFuncionario,last_insert_id());
end if;
set @fone = (select min(idFuncionariofone) from funcionario_fone where idFuncionario=inc_idFuncionario);

if((select count(priori) as codigo from funcionario_fone where idFuncionario=inc_idFuncionario and priori = 'v') <= 0) then
   update funcionario_fone set priori='v' where idFuncionario=inc_idFuncionario and idFuncionariofone in(@fone);
end if;

select last_insert_id() from funcionario_fone where idFuncionarioFone = last_insert_id() and idFuncionario=inc_idFuncionario;
end $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `conector_inc_grupo`
--

DROP PROCEDURE IF EXISTS `conector_inc_grupo`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='STRICT_TRANS_TABLES,STRICT_ALL_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,TRADITIONAL,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION' */ $$
CREATE DEFINER=`master`@`localhost` PROCEDURE `conector_inc_grupo`(
                                                    in inc_setor integer,
                                                    in inc_comprador integer,
                                                    in inc_descricao varchar(45),
                                                    in inc_status boolean
                                                 )
BEGIN
start Transaction;
    insert into
             grupo(idsetor,idcomprador,descricao,status)
    values
             ( inc_setor, inc_comprador, inc_descricao, inc_status);
    select
            last_insert_id() as codigo
    from
            grupo
    where
            idgrupo=last_insert_id();
commit;
END $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `conector_inc_historico`
--

DROP PROCEDURE IF EXISTS `conector_inc_historico`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='' */ $$
CREATE DEFINER=`master`@`localhost` PROCEDURE `conector_inc_historico`(`inc_descricao` VARCHAR(30),
  `inc_tipo` VARCHAR(1),
  `inc_lancamentoNegativo` VARCHAR(1),
  `inc_inativa` smallint(6))
begin
            INSERT INTO HISTORICO 
                        (DESCRICAO, TIPO, LANCAMENTONEGATIVO, INATIVA) 
                    VALUES 
                        (inc_DESCRICAO, inc_TIPO, inc_LANCAMENTONEGATIVO, inc_INATIVA);
                        select last_insert_id();
end $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `conector_inc_historicoCrediario`
--

DROP PROCEDURE IF EXISTS `conector_inc_historicoCrediario`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='' */ $$
CREATE DEFINER=`master`@`localhost` PROCEDURE `conector_inc_historicoCrediario`(
  `inc_parcela_idparcela` DOUBLE,
  `inc_parcela_idcrediario` DOUBLE,
  `inc_parcela_idloja` INT,
  `inc_parcela_nr_parcela` INT,
  `inc_motivo` VARCHAR(30),
  `inc_data` DATE,
  `inc_finalizadora` INT(11),
  `inc_valor` DECIMAL(15,3),
  `inc_usuario` INT,
  `inc_typeHistorico` INT,
   inc_numeroCupom double,
   inc_terminal int)
begin
  
  insert into historicoCrediario(   `parcela_idparcela`,
                                    `parcela_idcrediario`,
                                    `parcela_idloja`,
                                    `parcela_nr_parcela`,
                                    `motivo`,
                                    `data`,
                                    `finalizadora`,
                                    `valor`,
                                    `usuario`,
                                    `typeHistorico`, 
                                     numeroCupom,
                                     terminal
                                )
                                        values
                                (
                                    `inc_parcela_idparcela`,
                                    `inc_parcela_idcrediario`,
                                    `inc_parcela_idloja`,
                                    `inc_parcela_nr_parcela`,
                                    `inc_motivo`,
                                    `inc_data`,
                                    `inc_finalizadora`,
                                    `inc_valor`,
                                    `inc_usuario`,
                                    `inc_typeHistorico`,
                                     inc_numeroCupom,
                                     inc_terminal);
                                    select last_insert_id();
  end $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `conector_inc_integracaoSophusSPC`
--

DROP PROCEDURE IF EXISTS `conector_inc_integracaoSophusSPC`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='' */ $$
CREATE DEFINER=`root`@`%` PROCEDURE `conector_inc_integracaoSophusSPC`(
  `inc_idcliente` INT,
  `inc_messagem` varchar(1000),
  `inc_data` DATE,
  `inc_usuario` INT(11),
  `inc_servico` INT(11))
begin
    
    INSERT INTO `conector`.`integracaosophusspc`
    (
        `idcliente`,
        `messagem`,
        `data`,
        `usuario`,
        `servico`
    )
    VALUES
    (
        inc_idcliente,
        inc_messagem,
        inc_data,
        inc_usuario,
        inc_servico
   );    
  end $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `conector_inc_inventario`
--

DROP PROCEDURE IF EXISTS `conector_inc_inventario`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='' */ $$
CREATE DEFINER=`root`@`%` PROCEDURE `conector_inc_inventario`(in inc_idloja int,
                                          in inc_status smallint(6),
                                          in inc_data date,
                                          in inc_nome varchar(30),
                                          in inc_atualizaCustorMedio smallint(6),
                                          in inc_usuario int(11),
                                          in inc_valor decimal(15,3),
                                          in inc_custo decimal(15,3),
                                          in inc_tipo smallint(6),
                                            inc_final smallint,
                                            `inc_tipoEan` VARCHAR(1),
                                            `inc_setorFixo` SMALLINT,
                                            `inc_grupoFixo` SMALLINT,
                                            `inc_categoriaFixo` SMALLINT, inc_inventarioTipo int(11), in inc_idFornecedor double)
begin
start transaction;

 set @codigo = (select (ifnull(max(idinventario),0)) + 1 as Next from inventario);

 insert into inventario(idinventario,idloja,status,data,nome,atualizaCustorMedio,usuario,valor,custo,tipo, final,
                                            `tipoEan`,
                                            `setorFixo`,
                                            `grupoFixo`,
                                            `categoriaFixo`, idInventarioMotivo,idFornecedor)
  values (@codigo,inc_idloja,inc_status,inc_data,inc_nome,inc_atualizaCustorMedio,inc_usuario,inc_valor,inc_custo,inc_tipo, inc_final,`inc_tipoEan`,
                                            `inc_setorFixo`,
                                            `inc_grupoFixo`,
                                            `inc_categoriaFixo`, inc_inventarioTipo, inc_idFornecedor);

select @codigo;
commit;
end $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `conector_inc_inventarioItem`
--

DROP PROCEDURE IF EXISTS `conector_inc_inventarioItem`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='' */ $$
CREATE DEFINER=`root`@`localhost` PROCEDURE `conector_inc_inventarioItem`(
inc_idinventario DOUBLE,
inc_idProduto INT,
inc_quantidadeAtual DECIMAL(15,3),
inc_valor DECIMAL(15,3),
inc_custoReposicao DECIMAL(15,3),
inc_custoLiquido DECIMAL(15,3),
inc_precoVenda DECIMAL(15,3),
inc_quantidadeEncontrada DECIMAL(15,3),
inc_total DECIMAL(15,3),
inc_setor INT,
inc_grupo INT,
inc_categoria INT,
inc_fornecedor DOUBLE,
inc_quantidadeDivergente DECIMAL(15,3),
inc_valorDivergente DECIMAL(15,3),
inc_contagem1 DECIMAL(15,3),
inc_contagem2 DECIMAL(15,3),
inc_contagem3 DECIMAL(15,3),
inc_observacao VARCHAR(100))
begin
INSERT INTO `conector`.`inventarioitem`
(
`idinventario`,
`idProduto`,
`quantidadeAtual`,
`valor`,
`custoReposicao`,
`custoLiquido`,
`precoVenda`,
`quantidadeEncontrada`,
`total`,
`setor`,
`grupo`,
`categoria`,
`fornecedor`,
`quantidadeDivergente`,
`valorDivergente`,
`contagem1`,
`contagem2`,
`contagem3`,
`observacao`)
VALUES
(
inc_idinventario,
inc_idProduto,
inc_quantidadeAtual,
inc_valor,
inc_custoReposicao,
inc_custoLiquido,
inc_precoVenda,
inc_quantidadeEncontrada,
inc_total,
inc_setor,
inc_grupo,
inc_categoria,
inc_fornecedor,
inc_quantidadeDivergente,
inc_valorDivergente,
inc_contagem1,
inc_contagem2,
inc_contagem3,
inc_observacao
);

   select truncate(valor,2),truncate(custo,2) from inventario where idInventario=inc_idinventario;

end $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `conector_inc_juridica`
--

DROP PROCEDURE IF EXISTS `conector_inc_juridica`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='STRICT_TRANS_TABLES,STRICT_ALL_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,TRADITIONAL,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION' */ $$
CREATE DEFINER=`master`@`localhost` PROCEDURE `conector_inc_juridica`(
                                             in inc_idcliente integer,
                                             in inc_cnpj varchar(14),
                                             in inc_idatividade integer,
                                             in inc_razao varchar(45),
                                             in inc_fantasia varchar(45),
                                             in inc_ie varchar(30),
                                             in inc_dataAtertura date,
                                             in inc_idTipofornecedor integer
                                            )
BEGIN
                        insert into
                                    juridica
                                        (
                                             idcliente,
                                             cnpj,
                                             idatividade,
                                             razao,
                                             fantasia,
                                             ie,
                                             dataAbertura,
                                             idTipofornecedor
                                        )	values
                                        (
                                             inc_idcliente,
                                             inc_cnpj,
                                             inc_idatividade,
                                             inc_razao,
                                             inc_fantasia,
                                             inc_ie,
                                             inc_dataAtertura,
                                             inc_idTipofornecedor

                                        );
END $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `conector_inc_loja`
--

DROP PROCEDURE IF EXISTS `conector_inc_loja`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='' */ $$
CREATE DEFINER=`master`@`localhost` PROCEDURE `conector_inc_loja`(
                          	        in inc_razao varchar(45),
                                    in inc_abreviatura varchar(45),
                                    in inc_cnpj varchar(14),
                                    in inc_ie varchar(21),
                                    in inc_iemunicipal varchar(21),
                                    in inc_type char(1),
                                    in inc_idestado integer,
                                    in inc_uf char(2),
                                    in inc_codigoMunicipio integer,
                                    in inc_TypeLoja CHAR(1),
                                    in inc_AliquotaPis NUMERIC(15,3),
                                    in inc_AliquotaCofins NUMERIC(15,3),
                                    in inc_ControlaEstoque CHAR(1),
                                    in inc_TypeCalculo CHAR(1),
                                    in inc_EmpresaTroca INTEGER,
                                    in inc_AliquotaInss NUMERIC(5,3),
                                    in inc_AliquotaIss NUMERIC(5,3),
                                    in inc_Matriz smallint,
                                    in inc_Deposito smallint,
                                    in inc_SerieNota varchar(3),
                                    in inc_NumeroNota INTEGER,
                                    in inc_AtualizaCusto smallint,
                                    in inc_status smallint,
                                    in inc_ramo char(1),
                                    in inc_cnae varchar(30),
                                    in inc_lojaNf int(11),
                                    in `inc_ieSubstituicao` VARCHAR(30),
                                    in `inc_contribuicao` decimal(15,3),
                                    in `inc_ir` decimal(15,3),
                                    in `inc_irMinima` decimal(15,3),
                                    in `inc_valorRetencaoPisCofins` decimal(15,3),
                                    in `inc_flagCalcAboutSTPisCofins` smallint(6),
                                    in `inc_custoOperacional` decimal(15,3),
                                    in inc_tipoComissao int,
                                    in inc_diasDevComissao smallint,
                                    in inc_abertura date,
                                    in inc_SubSerie varchar(2),
                                    in inc_numeroNotaSerie double,
                                    in inc_serieNfce varchar(3),
                                    in inc_numeroNotaConsumidor double,
                                    in send_cep integer,
                                    in send_idcepbairro integer,
                                    in send_idenderecoType integer,
                                    in send_bairro varchar(45),
                                    in send_logradouro varchar(45),
                                    in send_complemento varchar(60),
                                    in send_municipio varchar(45),
                                    in send_estado char(2),
                                    in send_numero integer

                                  )
begin
SET foreign_key_checks=0;

SELECT (ifnull(auto_increment,1)) FROM information_schema.`TABLES` where table_schema='conector' and table_name='cliente' into @chaveCliente;

if(inc_lojaNf is null)then set inc_lojaNf=@chaveCliente; end if;
insert into loja
                (idloja,razao,abreviatura,cnpj,ie,iemunicipal,type,idestado,uf,codigoMunicipio,TypeLoja,AliquotaPis,AliquotaCofins,ControlaEstoque,TypeCalculo,EmpresaTroca, AliquotaInss, AliquotaIss, Matriz, Deposito, SerieNota, NumeroNota , AtualizaCusto, status, ramo, cnae,lojaNf,`ieSubstituicao`,`contribuicao`,`ir`,`valorRetencaoPisCofins`,`flagCalcAboutSTPisCofins`,custoOperacional, tipoComissao, diasDevComissao, abertura, SubSerie, numeroNotaSerie, serieNfce, numeroNotaConsumidor)
       values   (@chaveCliente,inc_razao,inc_abreviatura,inc_cnpj,inc_ie,inc_iemunicipal,inc_type,inc_idestado,inc_uf,inc_codigoMunicipio,inc_TypeLoja,inc_AliquotaPis,inc_AliquotaCofins,inc_ControlaEstoque,inc_TypeCalculo,inc_EmpresaTroca, inc_AliquotaInss, inc_AliquotaIss, inc_Matriz, inc_Deposito, inc_SerieNota, inc_NumeroNota , inc_AtualizaCusto, inc_status, inc_ramo, inc_cnae, inc_lojaNf, `inc_ieSubstituicao`,`inc_contribuicao`,`inc_ir`,inc_valorRetencaoPisCofins,`inc_flagCalcAboutSTPisCofins`, inc_custoOperacional,inc_tipoComissao, inc_diasDevComissao, inc_abertura, inc_SubSerie, inc_numeroNotaSerie, inc_serieNfce, inc_numeroNotaConsumidor);



   if((select count(*) from conector.endereco where endereco.idcliente=last_insert_id() and idEnderecoType = send_idenderecoType)>0)then

      select idEndereco, idcliente
                      from conector.endereco
                                          where
                                               endereco.idcliente=last_insert_id() and
                                               idEnderecoType = send_idenderecoType
                                                                                      into @id, @cliente;
    call conector_alt_endereco(
                                  @id,
                                  @cliente,
                                  send_cep,
                                  send_idcepbairro,
                                  send_idenderecoType,
                                  send_bairro,
                                  send_logradouro,
                                  send_complemento,
                                  send_municipio,
                                  send_estado,
                                  send_numero,1,1
                               );

  else

call conector_inc_endereco(
                              @chaveCliente,
                              send_cep,
                              send_idcepbairro,
                              send_idenderecoType,
                              send_bairro,
                              send_logradouro,
                              send_complemento,
                              send_municipio,
                              send_estado,
                              send_numero
                          );
  end if;
SET foreign_key_checks=1;
SELECT @id, @cliente;
end $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `conector_inc_lojaRelacionamento`
--

DROP PROCEDURE IF EXISTS `conector_inc_lojaRelacionamento`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='' */ $$
CREATE DEFINER=`root`@`%` PROCEDURE `conector_inc_lojaRelacionamento`(
  `inc_idlojaOrigem` INT(11),
  `inc_idlojaDestino` INT(11),
  `inc_controlaEstoque` SMALLINT,
  `inc_atualizaProduto` SMALLINT,
  `inc_atualizaPrice` SMALLINT,
  `inc_unificaEstoque` SMALLINT)
begin
  
  INSERT INTO `conector`.`lojarelacionamento`
(`idlojaOrigem`,
  idlojaDestino,
`controlaEstoque`,
`atualizaProduto`,
`atualizaPrice`,
`unificaEstoque`,
 dataInsert)
VALUES
(
inc_idlojaOrigem,
inc_idLojaDestino,
inc_controlaEstoque,
inc_atualizaProduto,
inc_atualizaPrice,
inc_unificaEstoque,
now()
);

    
  end $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `conector_inc_metodo`
--

DROP PROCEDURE IF EXISTS `conector_inc_metodo`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='' */ $$
CREATE DEFINER=`master`@`localhost` PROCEDURE `conector_inc_metodo`(
  `inc_idfinalizadora` INT(11),
  `inc_descricao` VARCHAR(45),
  `inc_abreviatura` VARCHAR(12),
  `inc_mult` DECIMAL(15,3),
  `inc_nroparcelas` INT(11),
  `inc_itaxa` DECIMAL(15,3),
  `inc_forcePasswd` smallint(6),
  `inc_valueMin` smallint(6),
  `inc_forceMinimoVenda` smallint(6),
  `inc_minimoVenda` DECIMAL(15,3),
  `inc_forceEntrada` smallint(6),
  `inc_carencia` INT(11),
  `inc_valueMinEntrada` DECIMAL(15,3),
  `inc_tac` DECIMAL(15,3),
  `inc_seguro` DECIMAL(15,3),
  `inc_financeiro` DECIMAL(15,3),
  `inc_itaxaEspecial` DECIMAL(15,3),
  `inc_inibeDiscount` smallint(6),
  `inc_dayPgto` SMALLINT,
  `inc_status` smallint(6),
   inc_typeMetodo smallint(6)
)
begin
insert into metodo
(
  `idfinalizadora`,
  `descricao`,
  `abreviatura`,
  `mult`,
  `nroparcelas`,
  `itaxa`,
  `forcePasswd`,
  `valueMin`,
  `forceMinimoVenda`,
  `minimoVenda`,
  `forceEntrada`,
  `carencia`,
  `valueMinEntrada`,
  `tac`,
  `seguro`,
  `financeiro`,
  `itaxaEspecial`,
  `inibeDiscount`,
  `dayPgto`,
  `status`,typeMetodo
 )
values
(
  `inc_idfinalizadora`,
  `inc_descricao`,
  `inc_abreviatura`,
  `inc_mult`,
  `inc_nroparcelas`,
  `inc_itaxa`,
  `inc_forcePasswd`,
  `inc_valueMin`,
  `inc_forceMinimoVenda`,
  `inc_minimoVenda`,
  `inc_forceEntrada`,
  `inc_carencia`,
  `inc_valueMinEntrada`,
  `inc_tac`,
  `inc_seguro`,
  `inc_financeiro`,
  `inc_itaxaEspecial`,
  `inc_inibeDiscount`,
  `inc_dayPgto`,
  `inc_status`,inc_typeMetodo
);
select last_insert_id() as codigo;
end $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `conector_inc_money`
--

DROP PROCEDURE IF EXISTS `conector_inc_money`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='' */ $$
CREATE DEFINER=`root`@`localhost` PROCEDURE `conector_inc_money`(
    inc_idpedido double,
    inc_idloja double,
    inc_idfinalizadora int(11),
    inc_idcliente double,
    inc_idmetodo int(11),
    inc_idfuncionario int(11),
    inc_emissao date,
    inc_valorTotal decimal(15,3),
    inc_terminal INT,
    inc_observacao varchar(100))
begin
INSERT INTO `conector`.`money`
(
    `idpedido`,
    `idloja`,
    `idfinalizadora`,
    `idcliente`,
    `idmetodo`,
    `idfuncionario`,
    `emissao`,
    `valorTotal`,
     terminal,
    `observacao`
)
    VALUES
(
    inc_idpedido,
    inc_idloja,
    inc_idfinalizadora,
    inc_idcliente,
    inc_idmetodo,
    inc_idfuncionario,
    inc_emissao,
    inc_valorTotal,
    inc_terminal,
    inc_observacao
);
end $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `conector_inc_movimentacao`
--

DROP PROCEDURE IF EXISTS `conector_inc_movimentacao`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='' */ $$
CREATE DEFINER=`master`@`localhost` PROCEDURE `conector_inc_movimentacao`(
                                            in inc_idProduto double,
                                            in inc_idLoja integer,
                                            in inc_historico varchar(45),
                                            in inc_typeAritimetico char(1),
                                            in inc_quantidade numeric(15,3),
                                            in inc_saldo numeric(15,3),
                                            in inc_cupom integer,
                                            in inc_pdv integer,
                                            in inc_custoLiquido numeric(15,3),
                                            in inc_custoMedio numeric(15,3),
                                            in inc_priceVenda numeric(15,3),
                                            in inc_margem numeric(15,3),
                                            in inc_idTypeMovimentacao integer,
                                            in inc_origem varchar(15)
                                          )
begin

insert into produtoExtrato(
                            idProduto,
                            idLoja,
                            historico,
                            typeAritimetico,
                            quantidade,
                            saldo,
                            cupom,
                            pdv,
                            custoLiquido,
                            custoMedio,
                            priceVenda,
                            margem,
                            idTypeMovimentacao,
                            movimento,
                            origem
                          )values
                                 (
                                    inc_idProduto,
                                    inc_idLoja,
                                    inc_historico,
                                    inc_typeAritimetico,
                                    inc_quantidade,
                                    inc_saldo,
                                    inc_cupom,
                                    inc_pdv,
                                    inc_custoLiquido,
                                    inc_custoMedio,
                                    coalesce(inc_priceVenda,0),
                                    inc_margem,
                                    inc_idTypeMovimentacao,
                                    now(),
                                    inc_origem
                                 );

end $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `conector_inc_movimentodia`
--

DROP PROCEDURE IF EXISTS `conector_inc_movimentodia`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='' */ $$
CREATE DEFINER=`root`@`%` PROCEDURE `conector_inc_movimentodia`(
  `inc_idloja` int(11),
  `inc_numeroCaixa` int(11),
  `inc_movimento` date,
  `inc_operador` double,
  `inc_numero_serie` varchar(40),
  `inc_mf_adicional` varchar(1),
  `inc_modelo_ecf` varchar(20),
  `inc_crz` varchar(6),
  `inc_coo` varchar(6),
  `inc_cro` varchar(6),
  `inc_dataEmissao` date,
  `inc_horaEmissao` time,
  `inc_venda_bruta` decimal(15,2),
  `inc_par_desconto` varchar(1))
begin

INSERT INTO `conector`.`movimentodia`
(`idloja`,
`numeroCaixa`,
`movimento`,
`operador`,
`numero_serie`,
`mf_adicional`,
`modelo_ecf`,
`crz`,
`coo`,
`cro`,
`dataEmissao`,
`horaEmissao`,
`venda_bruta`,
`par_desconto`)
VALUES
(
`inc_idloja`,
`inc_numeroCaixa`,
`inc_movimento`,
`inc_operador`,
`inc_numero_serie`,
`inc_mf_adicional`,
`inc_modelo_ecf`,
`inc_crz`,
`inc_coo`,
`inc_cro`,
`inc_dataEmissao`,
`inc_horaEmissao`,
`inc_venda_bruta`,
`inc_par_desconto`
);


  end $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `conector_inc_nf`
--

DROP PROCEDURE IF EXISTS `conector_inc_nf`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='' */ $$
CREATE DEFINER=`master`@`localhost` PROCEDURE `conector_inc_nf`(
  `inc_loja` INT,
  `inc_idcliente` INT,
  `inc_idparamentro` INT,
  `inc_idtransportadora` INT,
  `inc_cfop` VARCHAR(6),
  `inc_idFuncionario` INT,
  `inc_idusuario` INT,
  `inc_idpedido` DOUBLE,
  `inc_nr_nota` VARCHAR(9),
  `inc_serie` VARCHAR(3),
  `inc_acrescimo` DECIMAL(15,3),
  `inc_baseIcms` DECIMAL(15,3),
  `inc_baseIcmsIsento` DECIMAL(15,3),
  `inc_valorIcmsSubstituicao` DECIMAL(15,3),
  `inc_baseCalculoIcmsSubstituicao` DECIMAL(15,3),
  `inc_baseIPI` DECIMAL(15,3),
  `inc_baseCofins` DECIMAL(15,3),
  `inc_basePis` DECIMAL(15,3),
  `inc_emissao` DATE,
  `inc_saida` DATE,
  `inc_alteracao` DATE,
  `inc_hora` TIME,
  `inc_desconto` DECIMAL(15,3),
  `inc_uf` CHAR(2),
  `inc_itens` DECIMAL(15,3),
  `inc_seguro` DECIMAL(15,3),
  `inc_frete` smallint,
  `inc_typeFrete` DECIMAL(15,3),
  `inc_valorIcms` DECIMAL(15,3),
  `inc_valorIpi` DECIMAL(15,3),
  `inc_valorPis` DECIMAL(15,3),
  `inc_valorCofins` DECIMAL(15,3),
  `inc_acrecismoValor` DECIMAL(15,3),
  `inc_descontoValor` DECIMAL(15,3),
  `inc_valorTotalLiquido` DECIMAL(15,3),
  `inc_valorTotalNota` DECIMAL(15,3),
  `inc_valorTotalProdutos` DECIMAL(15,3),
  `inc_volumes` DECIMAL(15,3),
  `inc_peso` DECIMAL(15,3),
  `inc_contribuicaoSocial` DECIMAL(15,3),
  `inc_quantidadePedido` DECIMAL(15,3),
  `inc_quantidadeRecebida` DECIMAL(15,3),
  `inc_impresso` smallint(6) ,
  `inc_nr_impressao` DECIMAL(15,3),
  `inc_idTable_Codigo` INT,
  `inc_modNotaFiscal` VARCHAR(3),
  `inc_idSituacaoFiscal` CHAR(2),
  `inc_emitiNfe` smallint(6),
  `inc_typenf` VARCHAR(1),
  `inc_Msg01` VARCHAR(100),
  `inc_Msg02` VARCHAR(100),
  `inc_Msg03` VARCHAR(100), inc_valorTotaServico numeric(15,3),
  `inc_nr_nota_entrada` double, 
  `inc_serie_entrada` VARCHAR(3),
  `inc_statusNf` char(1),
  `inc_restituicao` char(1),
   inc_condPgto integer)
begin
    insert into nf(
  `loja`,
  `idcliente`,
  `idparamentro`,
  `idtransportadora`,
  `cfop`,
  `idFuncionario`,
  `idusuario`,
  `idpedido`,
  `nr_nota`,
  `serie` ,
  `acrescimo`,
  `baseIcms`,
  `baseIcmsIsento`,
  `valorIcmsSubstituicao`,
  `baseCalculoIcmsSubstituicao`,
  `baseIPI`,
  `baseCofins`,
  `basePis`,
  `emissao`,
  `saida`,
  `alteracao`,
  `hora`,
  `desconto`,
  `uf`,
  `itens`,
  `seguro`,
  `frete`,
  `typeFrete`,
  `valorIcms`,
  `valorIpi`,
  `valorPis`,
  `valorCofins`,
  `acrecismoValor`,
  `descontoValor`,
  `valorTotalLiquido`,
  `valorTotalNota`,
  `valorTotalProdutos`,
  `volumes`,
  `peso`,
  `contribuicaoSocial`,
  `quantidadePedido`,
  `quantidadeRecebida`,
  `impresso`,
  `nr_impressao`,
  `idTable_Codigo`,
  `modNotaFiscal`,
  `idSituacaoFiscal`,
  `emitiNfe`,
  `typenf`,
  `Msg01`,
  `Msg02`,
  `Msg03`, 
   valorTotaServico,
  `nr_nota_entrada`,
  `serie_entrada`,
  `statusNf`,
  `restituicao`,condPgto) values (
  `inc_loja`,
  `inc_idcliente`,
  `inc_idparamentro`,
  `inc_idtransportadora`,
  `inc_cfop`,
  `inc_idFuncionario`,
  `inc_idusuario`,
  `inc_idpedido`,
  `inc_nr_nota`,
  `inc_serie` ,
  `inc_acrescimo`,
  `inc_baseIcms`,
  `inc_baseIcmsIsento`,
  `inc_valorIcmsSubstituicao`,
  `inc_baseCalculoIcmsSubstituicao`,
  `inc_baseIPI`,
  `inc_baseCofins`,
  `inc_basePis`,
  `inc_emissao`,
  `inc_saida`,
  `inc_alteracao`,
  `inc_hora`,
  `inc_desconto`,
  `inc_uf`,
  `inc_itens`,
  `inc_seguro`,
  `inc_frete`,
  `inc_typeFrete`,
  `inc_valorIcms`,
  `inc_valorIpi`,
  `inc_valorPis`,
  `inc_valorCofins`,
  `inc_acrecismoValor`,
  `inc_descontoValor`,
  `inc_valorTotalLiquido`,
  `inc_valorTotalNota`,
  `inc_valorTotalProdutos`,
  `inc_volumes`,
  `inc_peso`,
  `inc_contribuicaoSocial`,
  `inc_quantidadePedido`,
  `inc_quantidadeRecebida`,
  `inc_impresso`,
  `inc_nr_impressao`,
  `inc_idTable_Codigo`,
  `inc_modNotaFiscal`,
  `inc_idSituacaoFiscal`,
  `inc_emitiNfe`,
  `inc_typenf`,
  `inc_Msg01`,
  `inc_Msg02`,
  `inc_Msg03`, inc_valorTotaServico,
  `inc_nr_nota_entrada`,
  `inc_serie_entrada`,
  `inc_statusNf`,
  `inc_restituicao`,
   inc_condPgto);
    
        select last_insert_id();
        
  end $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `conector_inc_nfinfortransporte`
--

DROP PROCEDURE IF EXISTS `conector_inc_nfinfortransporte`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='' */ $$
CREATE DEFINER=`master`@`localhost` PROCEDURE `conector_inc_nfinfortransporte`(
  `inc_nf` double,
  `inc_uf` varchar(2),
  `inc_qtty_volume` decimal(15,3),
  `inc_especie` char(30),
  `inc_marca` varchar(30),
  `inc_numeracao` decimal(15,3),
  `inc_pesoliquido` decimal(15,3),
  `inc_pesoBruto` decimal(15,3),
  `inc_idtransportadora` INT,
  `inc_retencaoBaseCalculo` DECIMAL(15,3),
  `inc_retencaoAliquotaFrete` DECIMAL(15,3),
  `inc_retencaoIcmsFrete` DECIMAL(15,3),
  `inc_retencaoValorFrete` DECIMAL(15,3),
  `inc_retencaoCfopFrete` VARCHAR(10),
  `inc_isentoIcms` smallint(6))
begin
    insert into nfinfortransporte  ( 
                    `nf`,
                    `uf`,
                    `qtty_volume`,
                    `especie`,
                    `marca`,
                    `numeracao`,
                    `pesoliquido`,
                    `pesoBruto`,
                    `idtransportadora`,
                    `retencaoBaseCalculo`,
                    `retencaoAliquotaFrete`,
                    `retencaoIcmsFrete`,
                    `retencaoValorFrete`,
                    `retencaoCfopFrete`,
                    `isentoIcms`
                    )values( 
                    `inc_nf`,
                    `inc_uf`,
                    `inc_qtty_volume`,
                    `inc_especie`,
                    `inc_marca`,
                    `inc_numeracao`,
                    `inc_pesoliquido`,
                    `inc_pesoBruto`,
                    `inc_idtransportadora`,
                    `inc_retencaoBaseCalculo`,
                    `inc_retencaoAliquotaFrete`,
                    `inc_retencaoIcmsFrete`,
                    `inc_retencaoValorFrete`,
                    `inc_retencaoCfopFrete`,
                    `inc_isentoIcms`
                    );
    select last_insert_id();
  end $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `conector_inc_nfInforVeiculo`
--

DROP PROCEDURE IF EXISTS `conector_inc_nfInforVeiculo`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='' */ $$
CREATE DEFINER=`master`@`localhost` PROCEDURE `conector_inc_nfInforVeiculo`(
  `inc_nf` DOUBLE,
  `inc_nfInforTransporte` DOUBLE,
  `inc_uf` VARCHAR(2),
  `inc_placa` VARCHAR(45),
  `inc_rntc` VARCHAR(45), in inc_idveiculo int)
BEGIN
    insert into nfInforVeiculo( `nf`,
                                `nfInforTransporte`,
                                `uf`,
                                `placa`,
                                `rntc`,
                                idveiculo)values( `inc_nf`,
                                                `inc_nfInforTransporte`,
                                                `inc_uf`,
                                                `inc_placa`,
                                                `inc_rntc`,inc_idveiculo); select last_insert_id();
        
END $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `conector_inc_nfItem`
--

DROP PROCEDURE IF EXISTS `conector_inc_nfItem`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='' */ $$
CREATE DEFINER=`master`@`localhost` PROCEDURE `conector_inc_nfItem`(
               `inc_idnf` double,
               `inc_idProduto` int(11),
               `inc_valorLiquido` decimal(15,3),
               `inc_priceOriginal` decimal(15,3),
               `inc_priceVenda` decimal(15,3),
               `inc_priceCusto` decimal(15,3),
               `inc_estoque` decimal(15,3),
               `inc_data` date,
               `inc_peso` decimal(15,3),
               `inc_aliquota` decimal(15,3),
               `inc_icms` decimal(15,3),
               `inc_baseCalculo` decimal(15,3),
               `inc_reducao` decimal(15,3),
               `inc_quantidade` decimal(15,3),
               `inc_idunidadeMedida` int(11),
               `inc_cfop` varchar(6),
               `inc_cstIcms` char(3),
               `inc_cstPis` char(3),
               `inc_valorPis` decimal(15,3),
               `inc_basePis` decimal(15,3),
               `inc_cstCofins` char(3),
               `inc_valorCofins` decimal(15,3),
               `inc_baseCofins` decimal(15,3),
               `inc_cstIpi` char(3),
               `inc_ipi` decimal(15,3),
               `inc_ipiValor` decimal(15,3),
               `inc_valorIpi` decimal(15,3),
               `inc_baseIpi` decimal(15,3),
               `inc_desconto` decimal(15,3),
               `inc_descontoValor` decimal(15,3),
               `inc_acrescimo` decimal(15,3),
               `inc_acrescimoValor` decimal(15,3),
               `inc_aliquotaIcmsSt` decimal(15,3),
               `inc_baseCalculoIcmsSubstituicao` decimal(15,3),
               `inc_valorIcmsSubstituicao` decimal(15,3),
               `inc_reducaoIcmsSt` decimal(15,3),
               `inc_margem` decimal(15,3),
               `inc_valorTotalProduto` decimal(15,3),
               `inc_valorTotalNota` decimal(15,3),
               `inc_valorTotalLiquido` decimal(15,3),
               `inc_fornecedor` int(11),
               `inc_idsetor` int(11),
               `inc_tributacao` char(2),
                inc_typeAliquota char(1),
                inc_chaveEntrada double,
                `inc_valorFrete` decimal(15,3), inc_genero int, inc_seguro decimal(15,3),  inc_origemMercadoria varchar(1))
begin
    
    select (count(*)+1) from nfItem where idNf=`inc_idnf` into @seq;

  insert into
            nfItem(
`idnf`,
               `idProduto`,
               `valorLiquido`,
               `priceOriginal`,
               `priceVenda`,
               `priceCusto`,
               `estoque`,
               `data`,
               `peso`,
               `aliquota`,
               `icms`,
               `baseCalculo`,
               `reducao`,
               `quantidade`,
               `idunidadeMedida`,
               `cfop`,
               `cstIcms`,
               `cstPis`,
               `valorPis`,
               `basePis`,
               `cstCofins`,
               `valorCofins`,
               `baseCofins`,
               `cstIpi`,
               `ipi`,
               `ipiValor`,
                valorIpi,
               `baseIpi`,
               `desconto`,
               `descontoValor`,
               `acrescimo`,
               `acrescimoValor`,
               `aliquotaIcmsSt`,
               `baseCalculoIcmsSubstituicao`,
               `valorIcmsSubstituicao`,
               `reducaoIcmsSt`,
               `margem`,
               `valorTotalProduto`,
               `valorTotalNota`,
               `valorTotalLiquido`,
               `fornecedor`,
               `idsetor`,
               `tributacao`,
                typeAliquota,
                chaveEntrada,
                valorFrete, idGenero, seguro, origemMercadoria, sequencia)
                    values
                (
               `inc_idnf`,
               `inc_idProduto`,
               `inc_valorLiquido`,
               `inc_priceOriginal`,
               `inc_priceVenda`,
               `inc_priceCusto`,
               `inc_estoque`,
               `inc_data`,
               `inc_peso`,
               `inc_aliquota`,
               `inc_icms`,
               `inc_baseCalculo`,
               `inc_reducao`,
               `inc_quantidade`,
               `inc_idunidadeMedida`,
               `inc_cfop`,
               `inc_cstIcms`,
               `inc_cstPis`,
               `inc_valorPis`,
               `inc_basePis`,
               `inc_cstCofins`,
               `inc_valorCofins`,
               `inc_baseCofins`,
               `inc_cstIpi`,
               `inc_ipi`,
               `inc_ipiValor`,
                inc_valorIpi,
               `inc_baseIpi`,
               `inc_desconto`,
               `inc_descontoValor`,
               `inc_acrescimo`,
               `inc_acrescimoValor`,
               `inc_aliquotaIcmsSt`,
               `inc_baseCalculoIcmsSubstituicao`,
               `inc_valorIcmsSubstituicao`,
               `inc_reducaoIcmsSt`,
               `inc_margem`,
               `inc_valorTotalProduto`,
               `inc_valorTotalNota`,
               `inc_valorTotalLiquido`,
               `inc_fornecedor`,
               `inc_idsetor`,
               `inc_tributacao`,
                inc_typeAliquota,
                inc_chaveEntrada,
                inc_valorFrete, inc_genero, inc_seguro, inc_origemMercadoria,
                coalesce(@seq,0));
    select last_insert_id();
  end $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `conector_inc_notaFiscalEntrada`
--

DROP PROCEDURE IF EXISTS `conector_inc_notaFiscalEntrada`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='' */ $$
CREATE DEFINER=`master`@`localhost` PROCEDURE `conector_inc_notaFiscalEntrada`(

  in `inc_idloja` INT,
  in `inc_idcliente` INT,
  in `inc_cfop` VARCHAR(6),
  in `inc_idOperacao` INT,
  in `inc_idSituacaoFiscal` CHAR(2),
  in `inc_idCodigoFiscal` INT,
  in `inc_modNotaFiscal` VARCHAR(3),
  in `inc_idUsuario` INT,
  in `inc_emissao` DATE,
  in `inc_entrada` DATE,
  in `inc_alteracao` DATE,
  in `inc_idUsuarioAlteracao` INT ,
  in `inc_nr_nota` VARCHAR(10),
  in `inc_serie` VARCHAR(3),
  in `inc_typeNota` VARCHAR(1),
  in `inc_idCompra` DOUBLE,
  in `inc_sumSt` smallint(6),
  in `inc_substituicao` DECIMAL(15,3),
  in `inc_creditoIcms` DECIMAL(15,3),
  in `inc_bonificacao` DECIMAL(15,3),
  in `inc_conhecimentoFrete` VARCHAR(10),
  in `inc_idtransportadora` DOUBLE,
  in `inc_sumFrete` smallint(6),
  in `inc_frete` DECIMAL(15,3),
  in `inc_valorFrete` DECIMAL(15,3),
  in `inc_icmsFrete` DECIMAL(15,3),
  in `inc_vendo` DECIMAL(15,3),
  in `inc_vendoValor` DECIMAL(15,3),
  in `inc_incideFinanProduto` smallint(6),
  in `inc_financeiro` DECIMAL(15,3),
  in `inc_financeiroValor` DECIMAL(15,3),
  in `inc_baseCalculoIcms` DECIMAL(15,3),
  in `inc_baseCalculoIpi` DECIMAL(15,3),
  in `inc_valorIcmsSubstuicao` DECIMAL(15,3),
  in `inc_baseCalculoSubstituicao` DECIMAL(15,3),
  in `inc_totalProdutoSubstituicao` DECIMAL(15,3),
  in `inc_valorPis` DECIMAL(15,3),
  in `inc_valorCofins` DECIMAL(15,3),
  in `inc_baseCofins` DECIMAL(15,3),
  in `inc_basePis` DECIMAL(15,3),
  in `inc_discountFinalNota` smallint(6),
  in `inc_valorDesconto` DECIMAL(15,3),
  in `inc_porcetagemDesconto` DECIMAL(15,3),
  in `inc_valorDespesasAcessorias` DECIMAL(15,3),
  in `inc_porcentagemDespesasAcessorias` DECIMAL(15,3),
  in `inc_typeFrete` CHAR(1),
  in `inc_totalItens` DECIMAL(15,3),
  in `inc_volume` DECIMAL(15,3),
  in `inc_valorDivergenciaFinal` DECIMAL(15,3),
  in `inc_valorTotalCompra` DECIMAL(15,3),
  in `inc_valorTotalBonificacao` DECIMAL(15,3),
  in `inc_valorTotalIpi` DECIMAL(15,3),
  in `inc_valorTotalCustoLiquido` DECIMAL(15,3),
  in `inc_valorTotalNota` DECIMAL(15,3),
  in `inc_valorTotalProduto` DECIMAL(15,3),
  in `inc_valorTotalVenda` DECIMAL(15,3),
  in `inc_informacaoComplementares` VARCHAR(100),
  in `inc_status` char(1),
  in inc_baseFrete decimal(15,3), inc_chave_nfe varchar(44)
)
begin
insert into entrada(
     `idloja`,
     `idcliente`,
     `cfop`,
     `idOperacao`,
     `idSituacaoFiscal`,
     `idCodigoFiscal`,
     `modNotaFiscal`,
     `idUsuario`,
     `emissao`,
     `entrada`,
     `alteracao`,
     `idUsuarioAlteracao`,
     `nr_nota`,
     `serie`,
     `typeNota`,
     `idCompra`,
     `sumSt`,
     `substituicao`,
     `creditoIcms`,
     `bonificacao`,
     `conhecimentoFrete`,
     `idtransportadora`,
     `sumFrete`,
     `frete`,
     `valorFrete`,
     `icmsFrete`,
     `vendo`,
     `vendoValor`,
     `incideFinanProduto`,
     `financeiro`,
     `financeiroValor`,
     `baseCalculoIcms`,
     `baseCalculoIpi`,
     `valorIcmsSubstuicao`,
     `baseCalculoSubstituicao`,
     `totalProdutoSubstituicao`,
     `valorPis`,
     `valorCofins`,
     `baseCofins`,
     `basePis`,
     `discountFinalNota`,
     `valorDesconto`,
     `porcetagemDesconto`,
     `valorDespesasAcessorias`,
     `porcentagemDespesasAcessorias`,
     `typeFrete`,
     `totalItens`,
     `volume`,
     `valorDivergenciaFinal`,
     `valorTotalCompra`,
     `valorTotalBonificacao`,
     `valorTotalIpi`,
     `valorTotalCustoLiquido`,
     `valorTotalNota`,
     `valorTotalProduto`,
     `valorTotalVenda`,
     `informacaoComplementares`,
     `status`,
      baseFrete, chave_nfe)
            values (   
   `inc_idloja`,
   `inc_idcliente`,
   `inc_cfop`,
   `inc_idOperacao`,
   `inc_idSituacaoFiscal`,
   `inc_idCodigoFiscal`,
   `inc_modNotaFiscal`,
   `inc_idUsuario`,
   `inc_emissao`,
   `inc_entrada`,
   `inc_alteracao`,
   `inc_idUsuarioAlteracao`,
   `inc_nr_nota`,
   `inc_serie`,
   `inc_typeNota`,
   `inc_idCompra`,
   `inc_sumSt`,
   `inc_substituicao`,
   `inc_creditoIcms`,
   `inc_bonificacao`,
   `inc_conhecimentoFrete`,
   `inc_idtransportadora`,
   `inc_sumFrete`,
   `inc_frete`,
   `inc_valorFrete`,
   `inc_icmsFrete`,
   `inc_vendo`,
   `inc_vendoValor`,
   `inc_incideFinanProduto`,
   `inc_financeiro`,
   `inc_financeiroValor`,
   `inc_baseCalculoIcms`,
   `inc_baseCalculoIpi`,
   `inc_valorIcmsSubstuicao`,
   `inc_baseCalculoSubstituicao`,
   `inc_totalProdutoSubstituicao`,
   `inc_valorPis`,
   `inc_valorCofins`,
   `inc_baseCofins`,
   `inc_basePis`,
   `inc_discountFinalNota`,
   `inc_valorDesconto`,
   `inc_porcetagemDesconto`,
   `inc_valorDespesasAcessorias`,
   `inc_porcentagemDespesasAcessorias`,
   `inc_typeFrete`,
   `inc_totalItens`,
   `inc_volume`,
   `inc_valorDivergenciaFinal`,
   `inc_valorTotalCompra`,
   `inc_valorTotalBonificacao`,
   `inc_valorTotalIpi`,
   `inc_valorTotalCustoLiquido`,
   `inc_valorTotalNota`,
   `inc_valorTotalProduto`,
   `inc_valorTotalVenda`,
   `inc_informacaoComplementares`,
   `inc_status`,
    inc_baseFrete, inc_chave_nfe); select last_insert_id();
end $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `conector_inc_operacaoEntrada`
--

DROP PROCEDURE IF EXISTS `conector_inc_operacaoEntrada`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='' */ $$
CREATE DEFINER=`master`@`localhost` PROCEDURE `conector_inc_operacaoEntrada`(
  in `inc_descricao` VARCHAR(45),
  in `inc_flagCompra` smallint(6) ,
  in `inc_flagUpdateProduto` smallint(6),
  in `inc_flagUpdateProdutoStore` smallint(6),
  in `inc_flagPriceVenda` smallint(6),
  in `inc_flagPriceCusto` smallint(6),
  in `inc_flagDivergenciaNxP` smallint(6),
  in `inc_flagRomaneio` smallint(6),
  in `inc_flagZeraCompra` smallint(6),
  in `inc_flagComparaData` smallint(6),
  in `inc_flagForceLojaLogon` smallint(6),
  in `inc_flagDivergenciaNxItens` smallint(6),
  in `inc_percentualDivergenciaNxItens` DECIMAL(15,3),
  in `inc_flagDivergenciaNxFinanceiro` smallint(6),
  in `inc_flagUpdatePagar` smallint(6),
  in `inc_flagFinanceiro` smallint(6),
  in `inc_flagSugestaFinanceira` smallint(6),
  in `inc_flagEmissaoIgualVencer` smallint(6),
  in `inc_flagLimiteComprador` smallint(6),
  in `inc_valorCompras` DECIMAL(15,3),
  in `inc_flagUpdateFiscal` smallint(6),
  in `inc_flagGeraPis` smallint(6),
  in `inc_flagGeraCofins` smallint(6),
  in `inc_flagGeraIcms` smallint(6),
  in `inc_flagAtivaDivergencia` smallint(6),
  in `inc_divergenciaImposto` DECIMAL(15,3),
  in `inc_divergenciaIpi` DECIMAL(15,3),
  in `inc_divergenciaSubstituicao` DECIMAL(15,3),
  in `inc_divergenciaTotalNf` DECIMAL(15,3),
  in `inc_flagTypeNota` CHAR(1),
  in `inc_flagInCfopSugestao` VARCHAR(4),
  in `inc_flagOnCfopSugestao` VARCHAR(4),
  in `inc_flagUpdateEstoque` smallint(6),
  in `inc_status` VARCHAR(45),
  in  inc_situacaoFiscal char(2),
  in  inc_modeloFiscal char(3),
  in  inc_produtoServico double
   )
begin
insert into operacaoEntrada
(
  `descricao`,
  `flagCompra`,
  `flagUpdateProduto`,
  `flagUpdateProdutoStore`,
  `flagPriceVenda`,
  `flagPriceCusto`,
  `flagDivergenciaNxP`,
  `flagRomaneio`,
  `flagZeraCompra`,
  `flagComparaData`,
  `flagForceLojaLogon`,
  `flagDivergenciaNxItens`,
  `percentualDivergenciaNxItens`,
  `flagDivergenciaNxFinanceiro`,
  `flagUpdatePagar`,
  `flagForceFinanceiro`,
  `flagSugestaFinanceira`,
  `flagEmissaoIgualVencer`,
  `flagLimiteComprador`,
  `valorCompras`,
  `flagUpdateFiscal`,
  `flagGeraPis`,
  `flagGeraCofins`,
  `flagGeraIcms`,
  `flagAtivaDivergencia`,
  `divergenciaImposto`,
  `divergenciaIpi`,
  `divergenciaSubstituicao`,
  `divergenciaTotalNf`,
  `flagTypeNota`,
  `flagInCfopSugestao`,
  `flagOnCfopSugestao`,
  `flagUpdateEstoque`,
  `status`,
   situacaoFiscal,
   modeloFiscal, produtoServico
)values(
   `inc_descricao`,
   `inc_flagCompra`,
   `inc_flagUpdateProduto`,
   `inc_flagUpdateProdutoStore`,
   `inc_flagPriceVenda`,
   `inc_flagPriceCusto`,
   `inc_flagDivergenciaNxP`,
   `inc_flagRomaneio`,
   `inc_flagZeraCompra`,
   `inc_flagComparaData`,
   `inc_flagForceLojaLogon`,
   `inc_flagDivergenciaNxItens`,
   `inc_percentualDivergenciaNxItens`,
   `inc_flagDivergenciaNxFinanceiro`,
   `inc_flagUpdatePagar`,
   `inc_flagFinanceiro`,
   `inc_flagSugestaFinanceira`,
   `inc_flagEmissaoIgualVencer`,
   `inc_flagLimiteComprador`,
   `inc_valorCompras`,
   `inc_flagUpdateFiscal`,
   `inc_flagGeraPis`,
   `inc_flagGeraCofins`,
   `inc_flagGeraIcms`,
   `inc_flagAtivaDivergencia`,
   `inc_divergenciaImposto`,
   `inc_divergenciaIpi`,
   `inc_divergenciaSubstituicao`,
   `inc_divergenciaTotalNf`,
   `inc_flagTypeNota`,
   `inc_flagInCfopSugestao`,
   `inc_flagOnCfopSugestao`,
   `inc_flagUpdateEstoque`,
   `inc_status`,
    inc_situacaoFiscal,
    inc_modeloFiscal, inc_produtoServico);

select last_insert_id();
end $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `conector_inc_pagar`
--

DROP PROCEDURE IF EXISTS `conector_inc_pagar`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='' */ $$
CREATE DEFINER=`master`@`localhost` PROCEDURE `conector_inc_pagar`(
  `inc_loja` INT,
  `inc_codigo` INT,
  `inc_emissao` DATE,
  `inc_vencimento` DATE,
  `inc_dataEntrada` DATE,
  `inc_prazo` INT,
  `inc_usuario` INT,
  `inc_usuarioInclusao` INT,
  `inc_valorNota` DECIMAL(15,3),
  `inc_nota` VARCHAR(10),
  `inc_flagPagamento` CHAR(1),
  `inc_parcela` VARCHAR(5),
  `inc_confirmada` smallint(6),
   inc_qttyPagar integer,
   inc_typePepleo char(1),
   `inc_aceite` DATE,
   `inc_multaData` DATE,
   `inc_historico` VARCHAR(50),
   `inc_duplicata` VARCHAR(10),
   `inc_bancoDocumento` INT,
   `inc_multaDias` INT,
   `inc_protestoDias` INT,
   `inc_desconto` DECIMAL(15,3),
   `inc_jurosPagos` DECIMAL(15,3),
   `inc_multaValor` DECIMAL(15,3),
   `inc_valor` DECIMAL(15,3),
   `inc_codigoCedente` VARCHAR(20),
   `inc_nossoNumero` VARCHAR(10),
   `inc_numeroDocumento` VARCHAR(10),
   `inc_codigoBarraBoleto` VARCHAR(50),
   `inc_observacao` BLOB ,
   `inc_dataProtesto` DATE,
    inc_dataBoleto date
   
   )
BEGIN
  insert into pagar(
                        `loja`,
                        `codigo`,
                        `emissao`,
                        `vencimento`,
                        `dataEntrada`,
                        `prazo`,
                        `usuario`,
                        `usuarioInclusao`,
                        `valorNota`,
                        `nota`,
                        `flagPagamento`,
                        `parcela`,
                        `confirmada`,
                         qttyPagar,
                         typePepleo,
                         `aceite`,
                        `multaData`,
                        `historico`,
                        `duplicata`,
                        `bancoDocumento`,
                        `multaDias`,
                        `protestoDias`,
                        `desconto`,
                        `jurosPagos`,
                        `multaValor`,
                        `valor`,
                        `codigoCedente`,
                        `nossoNumero`,
                        `numeroDocumento`,
                        `codigoBarraBoleto`,
                        `observacao`,
                        `dataProtesto`,
                         dataBoleto) 
                    value(
                        `inc_loja`,
                        `inc_codigo`,
                        `inc_emissao`,
                        `inc_vencimento`,
                        `inc_dataEntrada`,
                        `inc_prazo`,
                        `inc_usuario`,
                        `inc_usuarioInclusao`,
                        `inc_valorNota`,
                        `inc_nota`,
                        `inc_flagPagamento`,
                        `inc_parcela`,
                        `inc_confirmada`,
                         inc_qttyPagar, inc_typePepleo,
                        `inc_aceite`,
                        `inc_multaData`,
                        `inc_historico`,
                        `inc_duplicata`,
                        `inc_bancoDocumento`,
                        `inc_multaDias`,
                        `inc_protestoDias`,
                        `inc_desconto`,
                        `inc_jurosPagos`,
                        `inc_multaValor`,
                        `inc_valor`,
                        `inc_codigoCedente`,
                        `inc_nossoNumero`,
                        `inc_numeroDocumento`,
                        `inc_codigoBarraBoleto`,
                        `inc_observacao`,
                        `inc_dataProtesto`,
                         inc_dataBoleto);
                        select last_insert_id();
  END $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `conector_inc_paramentro_fornecedor_comercial`
--

DROP PROCEDURE IF EXISTS `conector_inc_paramentro_fornecedor_comercial`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='' */ $$
CREATE DEFINER=`master`@`localhost` PROCEDURE `conector_inc_paramentro_fornecedor_comercial`(
  `inc_idcliente` INT,
  `inc_visita` SMALLINT,
  `inc_analiseCompra` VARCHAR(1),
  `inc_minVolume` INT,
  `inc_valueBay` DECIMAL(15,3),
  `inc_comprador` INT,
  `inc_prazoEntrega` INT,
  `inc_formaPgto` INT(11),
  `inc_banco` INT,
  `inc_agencia` VARCHAR(10),
  `inc_contaCorrente` VARCHAR(15))
begin
  insert into paramentro_fornecedor_comercial(
                                                `idcliente`,
                                                `visita`,
                                                `analiseCompra`,
                                                `minVolume`,
                                                `valueBay`,
                                                `comprador`,
                                                `prazoEntrega`,
                                                `formaPgto`,
                                                `banco`,
                                                `agencia`,
                                                `contaCorrente`)values(
                                                 `inc_idcliente`,
                                                `inc_visita`,
                                                `inc_analiseCompra`,
                                                `inc_minVolume`,
                                                `inc_valueBay`,
                                                `inc_comprador`,
                                                `inc_prazoEntrega`,
                                                `inc_formaPgto`,
                                                `inc_banco`,
                                                `inc_agencia`,
                                                `inc_contaCorrente`
                                                );
                                                select last_insert_id();
  end $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `conector_inc_paramentro_fornecedor_fiscal`
--

DROP PROCEDURE IF EXISTS `conector_inc_paramentro_fornecedor_fiscal`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='' */ $$
CREATE DEFINER=`master`@`localhost` PROCEDURE `conector_inc_paramentro_fornecedor_fiscal`(
  `inc_idcliente` INT,
  `inc_forceIcms` CHAR(1),
  `inc_forcePis` CHAR(1),
  `inc_forceCofins` CHAR(1),
  `inc_descatadaSt` CHAR(1),
  `inc_typeGrade` CHAR(1))
begin
    insert into paramentro_fornecedor_fiscal(
                                            `idcliente`,
                                            `forceIcms`,
                                            `forcePis`,
                                            `forceCofins`,
                                            `descatadaSt`,
                                            `typeGrade`)values
                                            (
                                            `inc_idcliente`,
                                            `inc_forceIcms`,
                                            `inc_forcePis`,
                                            `inc_forceCofins`,
                                            `inc_descatadaSt`,
                                            `inc_typeGrade`
                                            ); 
                                            select last_insert_id();
end $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `conector_inc_paramentro_fornecedor_informacao`
--

DROP PROCEDURE IF EXISTS `conector_inc_paramentro_fornecedor_informacao`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='' */ $$
CREATE DEFINER=`root`@`localhost` PROCEDURE `conector_inc_paramentro_fornecedor_informacao`(
  `inc_idcliente` INT,
  `inc_typeTroca` CHAR(1),
  `inc_typeFrete` char(1),
  `inc_porcentagemFrete` DECIMAL(15,3),
  `inc_lastVisita` DATE,
  `inc_nextVisita` DATE,
  `inc_devPagar` smallint(6),
  `inc_bloquearEntregaFiscal` smallint(6),
  `inc_representante` INT,
  `inc_idoperacao` INT,
  `inc_forceCompra` smallint(6),
  `inc_nameSugestao` VARCHAR(15),
  `inc_passwdSugestao` VARCHAR(45),
  `inc_observacao` VARCHAR(200),
  inc_typeFornecedor varchar(1))
begin
    insert into paramentro_fornecedor_informacao(
                                                 `idcliente`,
                                                 `typeTroca`,
                                                 `typeFrete`,
                                                 `porcentagemFrete`,
                                                 `lastVisita`,
                                                 `nextVisita`,
                                                 `devPagar`,
                                                 `bloquearEntregaFiscal`,
                                                 `representante`,
                                                 `idoperacao`,
                                                 `forceCompra`,
                                                 `nameSugestao`,
                                                 `passwdSugestao`,
                                                 `observacao`,typeFornecedor
                                                )values(
                                                 `inc_idcliente`,
                                                 `inc_typeTroca`,
                                                 `inc_typeFrete`,
                                                 `inc_porcentagemFrete`,
                                                 `inc_lastVisita`,
                                                 `inc_nextVisita`,
                                                 `inc_devPagar`,
                                                 `inc_bloquearEntregaFiscal`,
                                                 `inc_representante`,
                                                 `inc_idoperacao`,
                                                 `inc_forceCompra`,
                                                 `inc_nameSugestao`,
                                                 `inc_passwdSugestao`,
                                                 `inc_observacao`, inc_typeFornecedor
                                                );
                                                select last_insert_id();
  end $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `conector_inc_parametroFaturamento`
--

DROP PROCEDURE IF EXISTS `conector_inc_parametroFaturamento`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='' */ $$
CREATE DEFINER=`root`@`localhost` PROCEDURE `conector_inc_parametroFaturamento`(
   inc_descricao VARCHAR(30),
   inc_status smallint(6),
   inc_origem CHAR(1),
   inc_destino CHAR(1) ,
   inc_flagParamentro CHAR(1),
   inc_forceVendedor smallint(6),
   inc_forceCliente smallint(6),
   inc_forceMetodo smallint(6),
   inc_forcetranspote smallint(6),
   inc_forceAtualizacao smallint(6),
   inc_forcePagamento smallint(6),
   inc_forceAdressEntrega smallint(6),
   inc_estoqueDestino CHAR(1),
   inc_estoqueOrigem CHAR(1),
   inc_estoqueNegativo CHAR(1),
   inc_fixaOrigem smallint(6),
   inc_fixaDestino smallint(6),
   inc_origemFixa INT(11),
   inc_destinoFixo INT(11),
   inc_restrigeCliente smallint(6),
   inc_custoLiquido smallint(6),
   inc_emissaoFixa smallint(6),
   inc_estoqueLoja smallint(6),
   inc_atualizaComNf smallint(6),
   inc_origemDestinoIguais smallint(6),
   inc_exclusaoPedidos smallint(6),
   inc_liberaDesconto smallint(6),
   inc_digitaDescontoValor smallint(6),
   inc_digitaDescontoPercentual smallint(6),
   inc_flagExpiracao smallint(6),
   inc_diasEspiracao SMALLINT,
   inc_flagPermiteAtualizar smallint(6),
   inc_flagAlteraLoja smallint(6),
   inc_flagDesconto CHAR(1),
   inc_margemVendedor DECIMAL(5,3),
   inc_margemGerente DECIMAL(5,3),
   inc_margemDiretor DECIMAL(5,3),
   inc_margemSupervisor DECIMAL(5,3),
   inc_estoqueDestinoKit CHAR(1),
   inc_estoqueOrigemKit CHAR(1),
   inc_flagEstoqueFutura smallint(6),
   inc_flagDetalhesItem smallint(6),
   inc_idHistorico int,
   inc_restrigeFinanceiro smallint(6),
   inc_restrigeAltpgto smallint(6),
   inc_limiteCredito smallint(6),
   inc_carenciaAprazo smallint(6),
   inc_flagTroco smallint(6),
   inc_geraReceber smallint(6),
   inc_geraCrediario smallint(6),
   inc_geraPagarDestino smallint(6),
   inc_geraPargarOrigem smallint(6),
   inc_geraCheque smallint(6),
   inc_flagAlteraPreco smallint(6),
   inc_flagAlteraComissao smallint(6),
   inc_flagAlteraDesconto smallint(6),
   inc_flagAlteraIpi smallint(6),
   inc_flagAlteraVendedor smallint(6),
   inc_flagQttyZerada smallint(6),
   inc_flagItemZerada smallint(6),
   inc_flagEntrada smallint(6),
   inc_flagExplodeKit smallint(6),
   inc_flagMaxItemPedido smallint(6),
   inc_numeroMaxItem INT(11),
   inc_flagRepetItem smallint(6),
   inc_flagAltExcIncItem smallint(6),
   inc_flagBloquearItem smallint(6),
   inc_flagEanDefault char(1),
   inc_bloqueiaQuantidade smallint(6),
   inc_flagRestrigeCliente smallint(6),
   inc_flagClienteAvista smallint(6),
   inc_flagClienteDocCorretos smallint(6),
   inc_flagClienteEmail smallint(6),
   inc_flagTypePrice CHAR(1),
   inc_flagAtualizaMedio smallint(6),
   inc_flagRatearDesconto smallint(6),
   inc_flagVerificaPriceCusto smallint(6),
   inc_flagComissaoProduto smallint(6),
   inc_flagComissaoIgnora smallint(6),
   inc_flagComissaoFaturamento smallint(6),
   inc_flagComissaoBaixa smallint(6),
   `inc_idTable_Codigo` int,
   `inc_modNotaFiscal` VARCHAR(3),
   `inc_idSituacaoFiscal` CHAR(2),
   inc_idfuncionario int,
   `inc_cfop1` varchar(6),
  `inc_cfop2` varchar(6),
  `inc_cfop3` varchar(6),
  `inc_cfop4` varchar(7),
  `inc_flagCalculaIcms` smallint(6),
  `inc_flagCalculaPisCofins` smallint(6),
  `inc_flagCalculaIr` smallint(6),
  `inc_flagCalculaBaseSt` smallint(6),
  `inc_flagCalculoServicoProduto` smallint(6),
  `inc_flagCalculoServico` smallint(6) ,
  `inc_flagCalculaIpi` smallint(6),
  `inc_flagNFRestituicao` smallint(6),
  `inc_flagForceNfOrigem` smallint(6),
  `inc_flagTypeFrete` char(3),
   inc_flagRetemPisCofins smallint(6),
   inc_flagAbateFunrural  smallint(6),
   inc_flagPgtoDevolucao smallint(6),
   inc_idFinalizadora integer,
   inc_idFinalizadoraPadrao integer,
   inc_idMetodoPadrao integer, inc_margemTransf decimal(15,3),
   inc_idOperacaoEntrada integer,
   inc_FlagNota char(1)
)
begin

Insert into conector.paramentro_faturamento (
  descricao,
  status,
  origem,
  destino,
  flagParamentro,
  forceVendedor,
  forceCliente,
  forceMetodo,
  forcetranspote,
  forceAtualizacao,
  forcePagamento,
  forceAdressEntrega,
  estoqueDestino,
  estoqueOrigem,
  estoqueNegativo,
  fixaOrigem,
  fixaDestino,
  origemFixa,
  destinoFixo,
  restrigeCliente,
  custoLiquido,
  emissaoFixa,
  estoqueLoja,
  atualizaComNf,
  origemDestinoIguais,
  exclusaoPedidos,
  liberaDesconto,
  digitaDescontoValor,
  digitaDescontoPercentual,
  flagExpiracao,
  diasEspiracao,
  flagPermiteAtualizar,
  flagAlteraLoja,
  flagDesconto,
  margemVendedor,
  margemGerente,
  margemDiretor,
  margemSupervisor,
  estoqueDestinoKit,
  estoqueOrigemKit,
  flagEstoqueFutura,
  flagDetalhesItem,
  idHistorico,
  restrigeFinanceiro,
  restrigeAltpgto,
  limiteCredito,
  carenciaAprazo,
  flagTroco,
  geraReceber,
  geraCrediario,
  geraPagarDestino,
  geraPargarOrigem,
  geraCheque,
  flagAlteraPreco,
  flagAlteraComissao,
  flagAlteraDesconto,
  flagAlteraIpi,
  flagAlteraVendedor,
  flagQttyZerada,
  flagItemZerada,
  flagEntrada,
  flagExplodeKit,
  flagMaxItemPedido,
  numeroMaxItem ,
  flagRepetItem,
  flagAltExcIncItem,
  flagBloquearItem,
  flagEanDefault,
  bloqueiaQuantidade ,
  flagRestrigeCliente,
  flagClienteAvista,
  flagClienteDocCorretos,
  flagClienteEmail,
  flagTypePrice,
  flagAtualizaMedio,
  flagRatearDesconto,
  flagVerificaPriceCusto,
  flagComissaoProduto,
  flagComissaoIgnora,
  flagComissaoFaturamento,
  flagComissaoBaixa,
  `idTable_Codigo`,
  `modNotaFiscal`,
  `idSituacaoFiscal`,
  idfuncionario,
  cfop1,
  cfop2,
  cfop3,
  cfop4,
  flagCalculaIcms,
  flagCalculaPisCofins,
  flagCalculaIr,
  flagCalculaBaseSt,
  flagCalculoServicoProduto,
  flagCalculoServico,
  flagCalculaIpi,
  flagNFRestituicao,
  flagForceNfOrigem,
  flagTypeFrete,
  flagRetemPisCofins,
  flagAbateFunrural,
  flagPgtoDevolucao,
  idFinalizadora,
  idFinalizadoraPadrao,
  idMetodoPadrao, 
  margemTransf, 
  idOperacaoEntrada,
  FlagNota
)
values
(
   inc_descricao,
   inc_status,
   inc_origem,
   inc_destino,
   inc_flagParamentro,
   inc_forceVendedor,
   inc_forceCliente,
   inc_forceMetodo,
   inc_forcetranspote,
   inc_forceAtualizacao,
   inc_forcePagamento,
   inc_forceAdressEntrega,
   inc_estoqueDestino,
   inc_estoqueOrigem,
   inc_estoqueNegativo,
   inc_fixaOrigem,
   inc_fixaDestino,
   inc_origemFixa,
   inc_destinoFixo,
   inc_restrigeCliente,
   inc_custoLiquido,
   inc_emissaoFixa,
   inc_estoqueLoja,
   inc_atualizaComNf,
   inc_origemDestinoIguais,
   inc_exclusaoPedidos,
   inc_liberaDesconto,
   inc_digitaDescontoValor,
   inc_digitaDescontoPercentual,
   inc_flagExpiracao,
   inc_diasEspiracao,
   inc_flagPermiteAtualizar,
   inc_flagAlteraLoja,
   inc_flagDesconto,
   inc_margemVendedor,
   inc_margemGerente,
   inc_margemDiretor,
   inc_margemSupervisor,
   inc_estoqueDestinoKit,
   inc_estoqueOrigemKit,
   inc_flagEstoqueFutura,
   inc_flagDetalhesItem,
   inc_idHistorico,
   inc_restrigeFinanceiro,
   inc_restrigeAltpgto,
   inc_limiteCredito,
   inc_carenciaAprazo,
   inc_flagTroco,
   inc_geraReceber,
   inc_geraCrediario,
   inc_geraPagarDestino,
   inc_geraPargarOrigem,
   inc_geraCheque,
   inc_flagAlteraPreco,
   inc_flagAlteraComissao,
   inc_flagAlteraDesconto,
   inc_flagAlteraIpi,
   inc_flagAlteraVendedor,
   inc_flagQttyZerada,
   inc_flagItemZerada,
   inc_flagEntrada,
   inc_flagExplodeKit,
   inc_flagMaxItemPedido,
   inc_numeroMaxItem ,
   inc_flagRepetItem,
   inc_flagAltExcIncItem,
   inc_flagBloquearItem,
   inc_flagEanDefault,
   inc_bloqueiaQuantidade ,
   inc_flagRestrigeCliente,
   inc_flagClienteAvista,
   inc_flagClienteDocCorretos,
   inc_flagClienteEmail ,
   inc_flagTypePrice,
   inc_flagAtualizaMedio,
   inc_flagRatearDesconto,
   inc_flagVerificaPriceCusto,
   inc_flagComissaoProduto,
   inc_flagComissaoIgnora,
   inc_flagComissaoFaturamento,
   inc_flagComissaoBaixa,
  `inc_idTable_Codigo`,
   `inc_modNotaFiscal`,
   `inc_idSituacaoFiscal`,
   inc_idfuncionario,
    inc_cfop1,
   inc_cfop2,
   inc_cfop3,
   inc_cfop4,
   inc_flagCalculaIcms,
   inc_flagCalculaPisCofins,
   inc_flagCalculaIr,
   inc_flagCalculaBaseSt,
   inc_flagCalculoServicoProduto,
   inc_flagCalculoServico,
   inc_flagCalculaIpi,
   inc_flagNFRestituicao,
   inc_flagForceNfOrigem,
   inc_flagTypeFrete,
   inc_flagRetemPisCofins,
   inc_flagAbateFunrural ,
   inc_flagPgtoDevolucao,
   inc_idFinalizadora,
   inc_idFinalizadoraPadrao,
   inc_idMetodoPadrao, 
   inc_margemTransf, 
   inc_idOperacaoEntrada,
   inc_FlagNota
);
   select last_insert_id() as codigo from paramentro_faturamento where idParamentro=last_insert_id();
end $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `conector_inc_parcela`
--

DROP PROCEDURE IF EXISTS `conector_inc_parcela`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='' */ $$
CREATE DEFINER=`master`@`localhost` PROCEDURE `conector_inc_parcela`(
  `inc_find` DOUBLE,
  `inc_idcrediario` DOUBLE,
  `inc_idterminal` INT,
  `inc_funcionario` INT,
  `inc_status` CHAR(1))
begin
        declare v0 int default 0;
        select final 
                    from pedido 
                             where idPedido=inc_find
                                            into v0;
if(v0 = 2)then
          insert into parcela(
                             `idcrediario`,
                             `idloja`,
                             `nr_parcela`,
                             `idterminal`,
                             `funcionario`,
                             `vencimento`,
                             `status`,
                             `observacao`,
                             `valorFinanceiro`,
                             `valorPago`,
                             `prazo`,
                             `acrescimo`,
                             `desconto`)select
                                           `inc_idcrediario`,
                                            idLoja,
                                            idParcela as Nr_Parcelas,
                                            `inc_idterminal`,
                                            `inc_funcionario`,
                                            vencimento,
                                            "00000000",
                                            `inc_status`,
                                            observacao,
                                            valor,
                                            0.000,
                                            abs(DATEDIFF(NOW(), vencimento)),
                                            0.000,
                                            0.000
                                                 from 
                                                         pedidoParcelaCrediario where idPedido=inc_find;
    end if;
                                       
  end $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `conector_inc_parcela2`
--

DROP PROCEDURE IF EXISTS `conector_inc_parcela2`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='' */ $$
CREATE DEFINER=`master`@`localhost` PROCEDURE `conector_inc_parcela2`(
  `inc_idcrediario` DOUBLE,
  `inc_idloja` INT,
  `inc_nr_parcela` INT,
  `inc_idterminal` INT,
  `inc_funcionario` INT,
  `inc_vencimento` DATE,
  `inc_status` CHAR(1),
  `inc_observacao` VARCHAR(30),
  `inc_valorFinanceiro` DECIMAL(15,3),
  `inc_valorPago` DECIMAL(15,3),
  `inc_prazo` INT,
  `inc_acrescimo` DECIMAL(15,3),
  `inc_desconto` DECIMAL(15,3))
begin
    insert into parcela 
                (
                `idcrediario`,
                `idloja`,
                `nr_parcela`,
                `idterminal`,
                `funcionario`,
                `vencimento`,
                `status`,
                `observacao`,
                `valorFinanceiro`,
                `valorPago`,
                `prazo`,
                `acrescimo`,
                `desconto`)values
                (
                `inc_idcrediario`,
                `inc_idloja`,
                `inc_nr_parcela`,
                `inc_idterminal`,
                `inc_funcionario`,
                `inc_vencimento`,
                `inc_status`,
                `inc_observacao`,
                `inc_valorFinanceiro`,
                `inc_valorPago`,
                `inc_prazo`,
                `inc_acrescimo`,
                `inc_desconto`);
                select last_insert_id();
  end $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `conector_inc_parcelaCartao`
--

DROP PROCEDURE IF EXISTS `conector_inc_parcelaCartao`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='' */ $$
CREATE DEFINER=`master`@`localhost` PROCEDURE `conector_inc_parcelaCartao`(
  `find` varchar(45),
  `inc_idAdministradora` INT,
  `inc_idloja` INT,
  `inc_inclusao` DATE,
  `inc_alteracao` DATE,
  `inc_cupom` DOUBLE,
  `inc_pedido` DOUBLE,
  `inc_terminal` INT(11),
  `inc_emissao` DATE,
  `inc_vencimento` VARCHAR(45),
  `inc_pagamento` DATE,
  `inc_status` CHAR(1),
  `inc_observacao` VARCHAR(50),
  `inc_parcela` INT,
  `inc_qttyParcela` INT,
  `inc_typeCartao` INT,
  `inc_bandeira` DOUBLE,
  `inc_valor` DECIMAL(15,3))
begin
        declare v0 int default 0;
        declare valida int default 0;
                select final 
                    from pedido 
                             where idPedido=find
                                            into v0;
  if(v0 = 2)then
  start Transaction;
  insert into cartao (
                     `idAdministradora`,
                     `idloja`,
                     `inclusao`,
                     `alteracao`,
                     `cupom` ,
                     `pedido`,
                     `terminal` ,
                     `emissao`,
                     `vencimento`,
                     `pagamento`,
                     `status`,
                     `observacao`,
                     `parcela`,
                     `qttyParcela`,
                     `typeCartao`,
                     `bandeira`,
                     `inc_valor`)select 
                                    `inc_idAdministradora`,
                                    tab.idLoja,
                                    now(),
                                    null,
                                    0,
                                    `inc_pedido`,
                                    `inc_terminal` ,
                                    `inc_emissao`,
                                    tab1.vencimento,
                                    tab1.baixa,
                                    tab1.statusParcela,      
                                    concat("Reserva: N.o ",tab.idPedido),
                                    tab1.idParcela,
                                    tab.numeroParcelas,
                                    tab1.typeCartao,
                                    null,
                                    tab.valor,
                                    abs(DATEDIFF(NOW(), vencimento))
                                    
                                                                    from conector.pedidocartao tab
                                                                                inner join conector.pedidoparcelacartao tab1 on(tab.idPedido = tab1.idPedido and
                                                                                                                                tab.idLoja = tab.idLoja)
                                                                                                                                        where idPedido=find;
    commit;         
  end if;
  end $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `conector_inc_pedidoCompra`
--

DROP PROCEDURE IF EXISTS `conector_inc_pedidoCompra`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='' */ $$
CREATE DEFINER=`master`@`localhost` PROCEDURE `conector_inc_pedidoCompra`(
	  in `inc_idloja` INT,
	  in `inc_idclienteFornecedor` INT,
	  in `inc_data` DATE,
	  in `inc_idfuncionario` INT,
	  in `inc_idusuario` INT,
	  in `inc_proximaVisita` DATE,
	  in `inc_itens` DECIMAL(15,3),
	  in `inc_frete` DECIMAL(15,3),
	  in `inc_bonificacao` DECIMAL(15,3),
	  in `inc_financeiro` DECIMAL(15,3),
	  in `inc_totalSubstituicao` DECIMAL(15,3),
	  in `inc_vendor` DECIMAL(15,3),
	  in `inc_peso` DECIMAL(15,3),
	  in `inc_valorIcmsSubstituicao` DECIMAL(15,3),
	  in `inc_acrescimos` DECIMAL(15,3),
	  in `inc_desconto` DECIMAL(15,3),
    in `inc_valorTotalProdutos` DECIMAL(15,3),
    in `inc_valorTotalLiquido` DECIMAL(15,3),
	  in `inc_valorTotal` DECIMAL(15,3),
	  in `inc_valorPedente` DECIMAL(15,3),
	  in `inc_valorRecebido` DECIMAL(15,3),
	  in `inc_rede` smallint(6),
	  in `inc_emitido` smallint(6),
	  in `inc_entregue` smallint(6),
    in  inc_recebido  smallint(6),
	  in `inc_somaFrete` smallint(6),
	  in `inc_somaSubstituicao` smallint(6),
	  in `inc_flagRecebimento` VARCHAR(8),
	  in `inc_flagAlteracao` VARCHAR(8),
	  in `inc_typeFrete` CHAR(1),
	  in `inc_idrepresentante` INT,
	  in `inc_idtransportadora` INT,
	  in `inc_seuPedido` VARCHAR(12) ,
	  in `inc_observacao` VARCHAR(100) ,
	  in `inc_volume`  DECIMAL(15,3),
	  in `inc_dataEntrega` DATE ,
	  in `inc_confeccaoPrice` VARCHAR(1) ,
	  in `inc_status` CHAR(1),
    in inc_acceptBoni boolean,
    in `inc_porcentagemFrete` DECIMAL(15,3),
    in `inc_porcentagemVendo` DECIMAL(15,3),
    in `inc_porcentagemFinanceiro` DECIMAL(15,3),
    in `inc_porcentagemDesconto` DECIMAL(15,3),
    in `inc_porcentagemBonificacao` DECIMAL(15,3),
    in inc_somaDiscount boolean,
    in inc_somaBoni boolean,
	  in `inc_saldo` CHAR(1)
	)
begin
insert into pedidoCompra(
                idloja,
                    idclienteFornecedor,
                    data,
                    idfuncionario,
                    idusuario,
                    proximaVisita,
                    itens,
                    frete,
                    bonificacao,
                    financeiro,
                    totalSubstituicao,
                    vendo,
                    peso,
                    valorIcmsSubstituicao,
                    acrescimos,
                    desconto,
                   `valorTotalProdutos`,
                   `valorTotalLiquido`,
                    valorTotal,
                    valorPedente,
                    valorRecebido,
                    rede,
                    emitido,
                    entregue,
                    recebido,
                    somaFrete,
                    somaSubstituicao,
                    flagRecebimento,
                    flagAlteracao,
                    typeFrete,
                    idrepresentante,
                    idtransportadora,
                    seuPedido,
                    observacao,
                    volume,
                    dataEntrega,
                    confeccaoPrice,
                    status,
                    acceptBoni,
                    `porcentagemFrete`,
                    `porcentagemVendo`,
                    `porcentagemFinanceiro`,
                    `porcentagemDesconto`,
                    `porcentagemBonificacao`,
                    somaDiscount,
                    somaBoni, saldo
            )	values	(
                inc_idloja,
                inc_idclienteFornecedor,
                inc_data,
                inc_idfuncionario,
                inc_idusuario,
                inc_proximaVisita,
                inc_itens,
                inc_frete,
                inc_bonificacao,
                inc_financeiro,
                inc_totalSubstituicao,
                inc_vendor,
                inc_peso,
                inc_valorIcmsSubstituicao,
                inc_acrescimos,
                inc_desconto,
                `inc_valorTotalProdutos`,
                `inc_valorTotalLiquido`,
                inc_valorTotal,
                inc_valorPedente,
                inc_valorRecebido,
                inc_rede,
                inc_emitido,
                inc_entregue,
                inc_recebido,
                inc_somaFrete,
                inc_somaSubstituicao,
                inc_flagRecebimento,
                inc_flagAlteracao,
                inc_typeFrete,
                inc_idrepresentante,
                inc_idtransportadora,
                inc_seuPedido,
                inc_observacao,
                inc_volume,
                inc_dataEntrega,
                inc_confeccaoPrice,
                inc_status,
                inc_acceptBoni,
                `inc_porcentagemFrete`,
                `inc_porcentagemVendo`,
                `inc_porcentagemFinanceiro`,
                `inc_porcentagemDesconto`,
                `inc_porcentagemBonificacao`,
                inc_somaDiscount,
                inc_somaBoni, inc_saldo
		        );
                select last_insert_id() as codigo;
END $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `conector_inc_pedidoCompraItens`
--

DROP PROCEDURE IF EXISTS `conector_inc_pedidoCompraItens`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='' */ $$
CREATE DEFINER=`root`@`localhost` PROCEDURE `conector_inc_pedidoCompraItens`(
  in `inc_idpedidoCompra` DOUBLE,
  in `inc_idProduto` INT,
  in `inc_emissaoPedido` DATE,
  in `inc_custoLiquido` DECIMAL(15,3),
  in `inc_custoBruto` DECIMAL(15,3),
  in `inc_custoNota` DECIMAL(15,3) ,
  in `inc_custoNotaTotal` DECIMAL(15,3) ,
  in `inc_custoReposicao` DECIMAL(15,3),
  in `inc_custoTotal` DECIMAL(15,3),
  in `inc_discount1` DECIMAL(15,3),
  in `inc_discount2` DECIMAL(15,3),
  in `inc_discount3` DECIMAL(15,3),
  in `inc_discountValue` DECIMAL(15,3),
  in `inc_acrescimo` DECIMAL(15,3),
  in `inc_bonificacao` DECIMAL(15,3),
  in `inc_despesasNaoTributadas` DECIMAL(15,3),
  in `inc_despesasTributadas` DECIMAL(15,3),
  in `inc_chaveEmbalagem` INT,
  in `inc_barra` DOUBLE,
  in `inc_idunidadeMedida` INT(11) ,
  in `inc_entregue` VARCHAR(1),
  in `inc_financeiro` DECIMAL(15,3),
  in `inc_frete` DECIMAL(15,3),
  in `inc_icmsEntrada` DECIMAL(15,3),
  in `inc_reducaoEntrada` DECIMAL(15,3),
  in `inc_icmsFrete` DECIMAL(15,3),
  in `inc_icmsSaida` DECIMAL(15,3),
  in `inc_reducaoSaida` DECIMAL(15,3),
  in `inc_ipi` DECIMAL(15,3),
  in `inc_priceVenda` DECIMAL(15,3),
  in `inc_quantidade` DECIMAL(15,3),
  in `inc_sugestao` DECIMAL(15,3),
  in `inc_valorIpi` DECIMAL(15,3),
  in `inc_substituicao` DECIMAL(15,3),
  in `inc_sugestaoCompra` DECIMAL(15,3),
  in `inc_lucro` DECIMAL(15,3),
  in `inc_lucroValor` DECIMAL(15,3),
  in `inc_lucroBruto` DECIMAL(15,3),
  in `inc_quantidadeRecebida` DECIMAL(15,3),
  in `inc_quantidadePendente` DECIMAL(15,3),
  in `inc_creditoIcms` DECIMAL(15,3),
  in `inc_creditoPis` DECIMAL(15,3),
  in `inc_creditoCofins` DECIMAL(15,3),
  in `inc_baseCalculoSubstituicao` DECIMAL(15,3),
  in `inc_icmsSt` DECIMAL(15,3),
  in `inc_acrescimoSubstituicao` DECIMAL(15,3),
  in `inc_valorFinanceiro` DECIMAL(15,3),
  in `inc_valorFrete` DECIMAL(15,3),
  in `inc_sumFrete` boolean,
  in `inc_margem` DECIMAL(15,3),
  in  inc_sumSt smallint
 )
begin
set @chaveSequencia = (select ((ifnull(max(sequencial),0))+1) as chave from conector.pedidoCompraItens where idpedidoCompra=inc_idpedidoCompra);
insert into pedidoCompraItens
    (
     `idpedidoCompra`,
     `sequencial`,
     `idProduto`,
     `emissaoPedido`,
     `custoLiquido`,
     `custoBruto`,
     `custoNota` ,
     `custoNotaTotal` ,
     `custoReposicao`,
     `custoTotal`,
     `discount1`,
     `discount2`,
     `discount3`,
     `discountValue`,
     `acrescimo`,
     `bonificacao`,
     `despesasNaoTributadas`,
     `despesasTributadas`,
     `chaveEmbalagem`,
     `barra`,
     `idunidadeMedida`,
     `entregue`,
     `financeiro`,
     `frete`,
     `icmsEntrada`,
     `reducaoEntrada`,
     `icmsFrete`,
     `icmsSaida`,
     `reducaoSaida`,
     `ipi`,
     `priceVenda`,
     `quantidade`,
     `sugestao`,
     `valorIpi`,
     `substituicao`,
     `sugestaoCompra`,
     `lucro`,
     `lucroValor`,
     `lucroBruto`,
     `quantidadeRecebida`,
     `quantidadePendente`,
     `creditoIcms`,
     `creditoPis`,
     `creditoCofins`,
     `baseCalculoSubstituicao`,
     `icmsSt`,
     `acrescimoSubstituicao`,
     `valorFinanceiro`,
     `valorFrete`,
     `sumFrete`, margem, sumSt)
     values (`inc_idpedidoCompra`,
     @chaveSequencia,
     `inc_idProduto`,
     `inc_emissaoPedido`,
     `inc_custoLiquido`,
     `inc_custoBruto`,
     `inc_custoNota` ,
     `inc_custoNotaTotal` ,
     `inc_custoReposicao`,
     `inc_custoTotal`,
     `inc_discount1`,
     `inc_discount2`,
     `inc_discount3`,
     `inc_discountValue`,
     `inc_acrescimo`,
     `inc_bonificacao`,
     `inc_despesasNaoTributadas`,
     `inc_despesasTributadas`,
     `inc_chaveEmbalagem`,
     `inc_barra`,
     `inc_idunidadeMedida`,
     `inc_entregue`,
     `inc_financeiro`,
     `inc_frete`,
     `inc_icmsEntrada`,
     `inc_reducaoEntrada`,
     `inc_icmsFrete`,
     `inc_icmsSaida`,
     `inc_reducaoSaida`,
     `inc_ipi`,
     `inc_priceVenda`,
     `inc_quantidade`,
     `inc_sugestao`,
     `inc_valorIpi`,
     `inc_substituicao`,
     `inc_sugestaoCompra`,
     `inc_lucro`,
     `inc_lucroValor`,
     `inc_lucroBruto`,
     `inc_quantidadeRecebida`,
     `inc_quantidadePendente`,
     `inc_creditoIcms`,
     `inc_creditoPis`,
     `inc_creditoCofins`,
     `inc_baseCalculoSubstituicao`,
     `inc_icmsSt`,
     `inc_acrescimoSubstituicao`,
     `inc_valorFinanceiro`,
     `inc_valorFrete`,
     `inc_sumFrete`, inc_margem, inc_sumSt);
end $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `conector_inc_pedidoCompraVencimento`
--

DROP PROCEDURE IF EXISTS `conector_inc_pedidoCompraVencimento`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='' */ $$
CREATE DEFINER=`master`@`localhost` PROCEDURE `conector_inc_pedidoCompraVencimento`(
  in `inc_idpedidoCompra` DOUBLE,
  in `inc_idcondicaoPgto` INT,
  in `inc_idfinalizadora` INT(11)
)
begin
    declare idParcela integer;
    declare days integer;
    declare porcento numeric(15,3);
    declare valor numeric(15,3);
    declare totalPedido numeric(15,3);
    declare v0 integer;
    
    set v0 = 1;
    
    delete from pedidoCompraVencimento where idpedidoCompra = `inc_idpedidoCompra`; 

    if (select count(*) from pedidoCompra where idPedidoCompra = `inc_idpedidoCompra`) > 0 then
      select
            ifnull(valorTotal,0) from pedidoCompra
                                              where idPedidoCompra = `inc_idpedidoCompra`
                                                                                  into totalPedido;
    else
      set totalPedido = 0;
    end if;


    select
        numeroParcelas
                    from
                        condicaoPgto where idCondicaoPgto=`inc_idcondicaoPgto`
                                                                        into idParcela;

 	  WHILE v0 <= idParcela DO

    SELECT
          dias, porcentagem, round(((totalPedido*porcentagem)/100),2)
        FROM
          condicaopgtoparcela,condicaopgto
    where
          condicaopgto.idcondicaoPgto=condicaopgtoParcela.idcondicaoPgto and
          condicaopgto.idfinalizadora=condicaopgtoParcela.idfinalizadora and
          condicaopgto.idCondicaoPgto=`inc_idcondicaoPgto` and condicaopgtoParcela.idCondicaoPgtoParcela=v0
    into
          days, porcento, valor;

    insert into pedidoCompraVencimento(
                                        `idpedidoCompra`,
                                        `parcela`,
                                        `idcondicaoPgto`,
                                        `idfinalizadora`,
                                        `data`,
                                        `porcentagem`,
                                        `valorParcela`
                                      )values(
                                        `inc_idpedidoCompra`,
                                         v0,
                                        `inc_idcondicaoPgto`,
                                        `inc_idfinalizadora`,
                                         ADDDATE(now(), days),
                                         porcento,
                                         valor
                                      );
                                      
                SET v0 = v0 + 1;

		  END WHILE;

end $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `conector_inc_pedidoFinanceiro`
--

DROP PROCEDURE IF EXISTS `conector_inc_pedidoFinanceiro`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='' */ $$
CREATE DEFINER=`master`@`localhost` PROCEDURE `conector_inc_pedidoFinanceiro`(
    in `inc_idpedido` DOUBLE,
    in `inc_idloja` INT(11),
    in `inc_idfinalizadora` INT(11),
    in `inc_idmetodo` INT(11),
    in `inc_idterminal` INT(11),
    in `inc_idfuncionario` INT(11),
    in `inc_emissao` DATE,
    in `inc_referencia` DECIMAL(15,3),
    in `inc_encargos` DECIMAL(15,3),
    in `inc_entrada` DECIMAL(15,3),
    in `inc_numeroParcelas` INT(11),
    in `inc_observacao` VARCHAR(100)
)
begin

if((select count(*) from pedidoFinanceiro where idPedido=`inc_idpedido`
                                                and  idLoja=`inc_idloja`) = 1) then
    delete from pedidoFinanceiro where idPedido=`inc_idpedido`
                                                and  idLoja=`inc_idloja`;
end if;

insert into pedidoFinanceiro
( `idpedido`,
  `idloja`,
  `idfinalizadora`,
  `idmetodo`,
  `idterminal`,
  `idfuncionario`,
  `emissao`,
  `referencia`,
  `encargos`,
  `entrada`,
  `numeroParcelas`,
  `observacao`
)values
(  `inc_idpedido`,
  `inc_idloja`,
  `inc_idfinalizadora`,
  `inc_idmetodo`,
  `inc_idterminal`,
  `inc_idfuncionario`,
  `inc_emissao`,
  `inc_referencia`,
  `inc_encargos`,
  `inc_entrada`,
  `inc_numeroParcelas`,
  `inc_observacao`
 );
select last_insert_id() as codigo;

end $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `conector_inc_pedidoItens`
--

DROP PROCEDURE IF EXISTS `conector_inc_pedidoItens`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='' */ $$
CREATE DEFINER=`master`@`localhost` PROCEDURE `conector_inc_pedidoItens`(
  in inc_idpedido DOUBLE,
  in inc_idloja INT,
  in inc_idProduto varchar(45),
  in inc_idfuncionario INT,
  in inc_situacao INT(11),
  in inc_quantidade DECIMAL(15,3),
  in inc_priceLiquido DECIMAL(15,3),
  in inc_price DECIMAL(15,3),
  in inc_valorDiscount DECIMAL(15,3),
  in inc_priceFull DECIMAL(15,3),
  in inc_idEan INT,
  in inc_codigoBarra DOUBLE,
  in inc_idunidadeMedida INT(11),
  in inc_promocao varchar(1)
  )
begin
set @chaveSequencia = (select ((ifnull(max(sequencial),0))+1) as chave from conector.pedidoItens where idpedido=inc_idpedido and idLoja=inc_idLoja);
set @prod=(select idProduto from produtoEmbalagem where barra=`inc_idProduto`);
insert into pedidoItens
(  `idpedido`,
  `idloja`,
  `idProduto`,
  `sequencial`,
  `idfuncionario`,
  `situacao`,
  `quantidade`,
  `priceLiquido`,
  `price`,
  `valorDiscount`,
  `priceFull`,
  `idEan`,
  `codigoBarra`,
  `idunidadeMedida`,promocional
 )values(
  `inc_idpedido`,
  `inc_idloja`,
   @prod,
   @chaveSequencia,
  `inc_idfuncionario`,
  `inc_situacao`,
  `inc_quantidade`,
  `inc_priceLiquido`,
  `inc_price`,
  `inc_valorDiscount`,
  `inc_priceFull`,
  `inc_idEan`,
  `inc_codigoBarra`,
  `inc_idunidadeMedida`, inc_promocao);
select @chaveSequencia from pedidoItens where idPedido=inc_idpedido and idLoja=inc_idLoja;
end $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `conector_inc_pisCofins`
--

DROP PROCEDURE IF EXISTS `conector_inc_pisCofins`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='' */ $$
CREATE DEFINER=`master`@`localhost` PROCEDURE `conector_inc_pisCofins`(
  
  in `inc_descricao` VARCHAR(30),
  in `inc_cofinSt` CHAR(1),
  in `inc_piSt` CHAR(1),
  in `inc_creditoPis` CHAR(1),
  in `inc_creditoCofins` CHAR(1),
  in `inc_servico` CHAR(1))
begin
    insert into
            piscofins(
                        `descricao`,
                        `cofinSt`,
                        `piSt`,
                        `creditoPis`,
                        `creditoCofins`,
                        `servico`
                     )values
                     (
                        `inc_descricao`,
                        `inc_cofinSt`,
                        `inc_piSt`,
                        `inc_creditoPis`,
                        `inc_creditoCofins`,
                        `inc_servico`
                     );
                     select last_insert_id();
  
  end $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `conector_inc_pisCofinsAnexo`
--

DROP PROCEDURE IF EXISTS `conector_inc_pisCofinsAnexo`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='' */ $$
CREATE DEFINER=`master`@`localhost` PROCEDURE `conector_inc_pisCofinsAnexo`(
  `inc_idpisCofins` INT,
  `inc_aliquotaCreditoPis` DECIMAL(15,3),
  `inc_aliquotaCreditoCofins` DECIMAL(15,3),
  `inc_aliquotaDebitoPis` DECIMAL(15,3),
  `inc_aliquotaDebitoCofins` DECIMAL(15,3),
  `inc_vigencia` DATE,
  `inc_incideIpi` smallint(6),
  `inc_incideSt` smallint(6),
  `inc_typeAtividade` VARCHAR(45),
  `inc_idTable_Codigo` INT,
  `inc_table_codigo` VARCHAR(3),
  `inc_cstPisEntrada` VARCHAR(3),
  `inc_cstCofinsEntrada` VARCHAR(3),
  `inc_cstPisSaida` VARCHAR(3),
  `inc_cstCofinsSaida` VARCHAR(3),
  `inc_geraDebitoIcms` smallint(6),
  `inc_geraCreditoIcms` smallint(6),
   inc_subDescricao varchar(100)
  )
begin
	insert into
		pisCofinsAnexo(
				`idpisCofins`,
				`aliquotaCreditoPis`,
				`aliquotaCreditoCofins`,
				`aliquotaDebitoPis`,
				`aliquotaDebitoCofins`,
				`vigencia`,
				`incideIpi`,
				`incideSt`,
				`typeAtividade`,
				`idTable_Codigo`,
				`table_codigo`,
				`cstPisEntrada`,
				`cstCofinsEntrada`,
				`cstPisSaida`,
				`cstCofinsSaida`,
        `geraDebitoIcms`,
        `geraCreditoIcms`,
         subDescricao
				
			      )values
				     (
				`inc_idpisCofins`,
				`inc_aliquotaCreditoPis`,
				`inc_aliquotaCreditoCofins`,
				`inc_aliquotaDebitoPis`,
				`inc_aliquotaDebitoCofins`,
				`inc_vigencia`,
				`inc_incideIpi`,
				`inc_incideSt`,
				`inc_typeAtividade`,
				`inc_idTable_Codigo`,
				`inc_table_codigo`,
				`inc_cstPisEntrada`,
				`inc_cstCofinsEntrada`,
				`inc_cstPisSaida`,
				`inc_cstCofinsSaida`,
        `inc_geraDebitoIcms`,
        `inc_geraCreditoIcms`,
         inc_subDescricao

				     );
	select last_insert_id();
end $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `conector_inc_produto`
--

DROP PROCEDURE IF EXISTS `conector_inc_produto`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='' */ $$
CREATE DEFINER=`master`@`localhost` PROCEDURE `conector_inc_produto`(
                                        in aux integer,
                                        in inc_nome varchar(45),
                                        in inc_dataInclusao date,
                                        in inc_dataAlteracao date, in inc_tipo smallint
                                     )
begin
  if (aux = 2) then
          set @codigo = (select (ifnull(max(idproduto),0)) + 1 as Next from produto where idProduto between 0 and 9999);
  else

          set @codigo = (select (ifnull(max(idproduto),9999)) + 1 as Next from produto where idProduto > 9999);
end if;

insert into produto
          (idProduto,nome,dataInclusao,dataAlteracao)
values
          (@codigo,inc_nome, inc_dataInclusao,inc_dataAlteracao);
select @codigo;
end $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `conector_inc_profissao`
--

DROP PROCEDURE IF EXISTS `conector_inc_profissao`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='' */ $$
CREATE DEFINER=`master`@`localhost` PROCEDURE `conector_inc_profissao`(
                                                in inc_descricao varchar(45)
                                          )
begin
        set @a = (select (max(ifnull(idProfissao,0))+1) from Profissao);
        insert into profissao (idProfissao,descricao) values(@a,inc_descricao);
        select @a;
end $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `conector_inc_promocao`
--

DROP PROCEDURE IF EXISTS `conector_inc_promocao`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='' */ $$
CREATE DEFINER=`root`@`%` PROCEDURE `conector_inc_promocao`(
  `inc_idProduto` double,
  `inc_idloja` double,
  `inc_dateInicial` date,
  `inc_dateFinal` date,
  `inc_tipoPromocao` int,
  `inc_qttyDisponivel` decimal(15,3),
  `inc_usuarioInc` int,
  `inc_leve`  decimal(15,3),
  `inc_pague` decimal(15,3),
  `inc_precoVenda` decimal(15,3),
  `inc_precoPromocional` decimal(15,3),
  `inc_idFinalizadora`  int(11),
  `inc_idFornecedor` int(11),
  `inc_idSetor` int,
  `inc_idGrupo` int,
  `inc_idCategoria` int,
  `inc_todasFinalizadora` smallint,
  `inc_todasLojas` smallint,
  `inc_todosProdutos` smallint,
  `inc_quantidadeMaxLevePague` decimal(15,3),
  `inc_descontoCalc` decimal(15,3),
  `inc_descontoAplicadoSetor`  decimal(15,3),
  `inc_custoLiquido` decimal(15,3), 
   in inc_validade smallint)
begin
  insert into promocao
  (
    `idProduto`,
    `idloja`,
    `dateInicial`,
    `dateFinal`,
    `tipoPromocao`,
    `qttyDisponivel`,
    `usuarioInc`,
    `horaInc`,
    `leve`,
    `pague`,
    `precoVenda`,
    `precoPromocional`,
    `idFinalizadora`,
    `idFornecedor`,
    `idSetor`,
    `idGrupo`,
    `idCategoria`,
    `todasFinalizadora`,
    `todasLojas`,
    `todosProdutos`,
    `quantidadeMaxLevePague`,
    `descontoCalc`,
    `descontoAplicadoSetor`,
    `custoLiquido`, validade,dataInc) values
  (
    `inc_idProduto`,
    `inc_idloja`,
    `inc_dateInicial`,
    `inc_dateFinal`,
    `inc_tipoPromocao`,
    `inc_qttyDisponivel`,
    `inc_usuarioInc`,
    now(),
    `inc_leve`,
    `inc_pague`,
    `inc_precoVenda`,
    `inc_precoPromocional`,
    `inc_idFinalizadora`,
    `inc_idFornecedor`,
    `inc_idSetor`,
    `inc_idGrupo`,
    `inc_idCategoria`,
    `inc_todasFinalizadora`,
    `inc_todasLojas`,
    `inc_todosProdutos`,
    `inc_quantidadeMaxLevePague`,
    `inc_descontoCalc`,
    `inc_descontoAplicadoSetor`,
    `inc_custoLiquido`, inc_validade,now()
    );
    select last_insert_id();
  end $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `conector_inc_reserva`
--

DROP PROCEDURE IF EXISTS `conector_inc_reserva`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='' */ $$
CREATE DEFINER=`master`@`localhost` PROCEDURE `conector_inc_reserva`(
  in inc_idloja INT,
  in inc_idfuncionario INT,
  in inc_idcliente INT,
  in inc_pdv INT,
  in inc_idparamentro INT,
  in inc_idmetodo INT,
  in inc_status CHAR(1)  ,
  in inc_usuario INT,
  in inc_emissao DATE,
  in inc_expiracao DATE,
  in `inc_geraEntrega` smallint(6),
  in `inc_geraMontagem` smallint(6),
  in `inc_sinal` varchar(8),
  in  inc_entrada date, in inc_flagFormaFinalizacao varchar(1)
)
begin
    declare sequencial int(10) default 0;
        declare seq int(10) default 0;
insert into  conector.pedido
(
  idloja,
  idfuncionario,
  idcliente,
  pdv,
  idparamentro,
  idmetodo,
  status,
  usuario,
  emissao,
  expiracao,
  `geraEntrega`,
  `geraMontagem`,
  `sinal`,
   entrada, flagFormaFinalizacao
)values
(
  inc_idloja,
  inc_idfuncionario,
  inc_idcliente,
  inc_pdv,
  inc_idparamentro,
  inc_idmetodo,
  inc_status,
  inc_usuario,
  now(),
  inc_expiracao,
  `inc_geraEntrega`,
  `inc_geraMontagem`,
  `inc_sinal`,
   inc_entrada, inc_flagFormaFinalizacao
);

if(inc_flagFormaFinalizacao = 'D')then
    select sequenciaDav from pedido where idpedido=last_insert_id()  into sequencial;
        else
            select sequenciaPreVenda from pedido where idpedido=last_insert_id() into sequencial;
end if;
select last_insert_id() as codigo, coalesce(sequencial,0);
end $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `conector_inc_rural`
--

DROP PROCEDURE IF EXISTS `conector_inc_rural`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='' */ $$
CREATE DEFINER=`master`@`localhost` PROCEDURE `conector_inc_rural`(
					in inc_idCliente integer,
          in inc_cpf varchar(12),
          in inc_idatividade integer,
          in inc_nome varchar(45),
          in inc_ie varchar(30),
          in inc_identidade varchar(30),
					in inc_nascimento date,
					in inc_idsexo int,
					in inc_idcivil int, in inc_idTipoFornecedor int
					)
BEGIN
		insert into
				rural
					(
                        idCliente,
                        cpf,
                        idatividade,
                        nome,
                        identidade,
                        ie,
                        nascimento,
                        idsexo,
                        idcivil,idTipoFornecedor
					)	values
          (
                        inc_idCliente,
                        inc_cpf,
                        inc_idatividade,
                        inc_nome,
                        inc_identidade,
                        inc_ie,
                        inc_nascimento,
                        inc_idsexo,
                        inc_idcivil,inc_idTipoFornecedor
					);
                    		select last_insert_id() as codigo from rural where idcliente=last_insert_id();

END $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `conector_inc_setor`
--

DROP PROCEDURE IF EXISTS `conector_inc_setor`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='' */ $$
CREATE DEFINER=`master`@`localhost` PROCEDURE `conector_inc_setor`(
                                    in inc_descricao varchar(45),
                                    in inc_margem   numeric(15,3),
                                    in inc_status boolean,
                                    in inc_comissao numeric(15,3),
                                    in inc_premiacao numeric(15,3)
                                    )
begin
start Transaction;
    insert into setor(descricao,margem,status, comissao, premiacao)values(inc_descricao, inc_margem, inc_status, inc_comissao, inc_premiacao);
    select last_insert_id() as codigo from setor where idsetor=last_insert_id();
commit;
end $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `conector_inc_spedncm`
--

DROP PROCEDURE IF EXISTS `conector_inc_spedncm`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='' */ $$
CREATE DEFINER=`master`@`localhost` PROCEDURE `conector_inc_spedncm`(
                                        in ncm varchar(30), 
                                        in inc_descricao varchar(100),
                                        in `inc_mvaMain` DECIMAL(15,3),
                                        in `inc_aliquotaInterestadual` DECIMAL(15,3),
                                        in `inc_aliquotaInterna` DECIMAL(15,3),
                                        in `inc_mvaAjustada` DECIMAL(15,3))
begin
  insert into spedncm(idSpedNcm,descricao,mvaMain, aliquotaInterestadual, aliquotaInterna, mvaAjustada)
        values
                     (ncm, inc_descricao,inc_mvaMain, inc_aliquotaInterestadual, inc_aliquotaInterna, inc_mvaAjustada);
end $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `conector_inc_tableFiscal`
--

DROP PROCEDURE IF EXISTS `conector_inc_tableFiscal`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='' */ $$
CREATE DEFINER=`master`@`localhost` PROCEDURE `conector_inc_tableFiscal`(
  in `inc_codigo` VARCHAR(3),
  in `inc_idFiscal` INT,
  in `inc_descricao` VARCHAR(45),
  in `inc_modelo` VARCHAR(3),
  in `inc_origemTipo` SMALLINT,
  in `inc_movimentacao` SMALLINT,
  in `inc_nfecstpis` VARCHAR(3),
  in `inc_nfecstcofins` VARCHAR(3),
  in `inc_impostoAjuste` smallint,
  in `inc_observacao` VARCHAR(100),
  in `inc_status` smallint(6), in `inc_codigoAjuste` VARCHAR(15))
begin
    insert into table_codigo(
    `codigo`,
   `idFiscal` ,
   `descricao`,
   `modelo`,
   `origemTipo`,
   `movimentacao`,
   `nfecstpis`,
   `nfecstcofins`,
   `impostoAjuste`,
   `observacao`,
   `status`, `codigoAjuste`
    )values(
    `inc_codigo`,
   `inc_idFiscal` ,
   `inc_descricao`,
   `inc_modelo`,
   `inc_origemTipo`,
   `inc_movimentacao`,
   `inc_nfecstpis`,
   `inc_nfecstcofins`,
   `inc_impostoAjuste`,
   `inc_observacao`,
   `inc_status`, `inc_codigoAjuste`);
   select last_insert_id();
  end $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `conector_inc_terminal`
--

DROP PROCEDURE IF EXISTS `conector_inc_terminal`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='' */ $$
CREATE DEFINER=`master`@`localhost` PROCEDURE `conector_inc_terminal`(
  in inc_idloja INTEGER,
  in inc_idtypeTerminal INTEGER,
  in inc_descricao VARCHAR(12),
  in inc_flagDesconto smallint(6),
  in inc_status smallint(6),
  in inc_operacao smallint(6),
  in inc_multiTarefa smallint(6)
                                      )
begin
insert into `Terminal` 
    (idloja,idtypeTerminal,descricao,flagDesconto,status, operacao, multiTarefa)
values 
    (inc_idloja,inc_idtypeTerminal,inc_descricao,inc_flagDesconto,inc_status, inc_operacao, inc_multiTarefa);
    select last_insert_id();
    end $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `conector_inc_tesouraria`
--

DROP PROCEDURE IF EXISTS `conector_inc_tesouraria`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='' */ $$
CREATE DEFINER=`root`@`%` PROCEDURE `conector_inc_tesouraria`(
                                              inc_Finalizadora integer,
                                              inc_Terminal integer,
                                              inc_Informado decimal(15,3),
                                              inc_Apurado decimal(15,3),
                                              inc_Quebra decimal(15,3),
                                              inc_Funcionario integer,
                                              inc_Loja integer,
                                              inc_Tipo varchar(3),
                                              inc_date date
)
begin

  declare valor decimal(15,3) default 0;

if((select count(*) from tesouraria where idfinalizadora=inc_Finalizadora and idTerminal=inc_terminal and operador=inc_funcionario and emissao=inc_date and tipo=inc_Tipo and idLoja=inc_loja) > 0)then

  select valorApurado from tesouraria where idfinalizadora=inc_Finalizadora and idTerminal=inc_terminal and operador=inc_funcionario and emissao=inc_date and tipo=inc_Tipo and idLoja=inc_loja into valor;

  if(valor != inc_Apurado)then
    set inc_apurado = valor;
  end if;

  delete from tesouraria where idfinalizadora=inc_Finalizadora and idTerminal=inc_terminal and operador=inc_funcionario and emissao=inc_date and tipo=inc_Tipo and idLoja=inc_loja;

end if;
            INSERT INTO `conector`.`tesouraria`
                                    (
                                    `idfinalizadora`,
                                    `idterminal`,
                                    `valorInformado`,
                                    `valorApurado`,
                                    `quebra`,
                                    `operador`,
                                    `idloja`,
                                    `fechamento`,
                                    `emissao`, tipo)
                                    VALUES
                                    (
                                              inc_Finalizadora,
                                              inc_Terminal,
                                              inc_Informado,
                                              inc_Apurado,
                                              inc_Quebra,
                                              inc_Funcionario,
                                              inc_Loja,
                                              0,
                                              DATE_FORMAT(inc_date,'%Y%m%d'), inc_Tipo
                                    );

end $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `conector_inc_tipopromocao`
--

DROP PROCEDURE IF EXISTS `conector_inc_tipopromocao`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='' */ $$
CREATE DEFINER=`master`@`localhost` PROCEDURE `conector_inc_tipopromocao`(
                                           in inc_descricao varchar(45)
                                          )
begin
     insert into tipopromocao(descricao) values (inc_descricao);
     select last_insert_id();

end $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `conector_inc_transportadora`
--

DROP PROCEDURE IF EXISTS `conector_inc_transportadora`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='' */ $$
CREATE DEFINER=`master`@`localhost` PROCEDURE `conector_inc_transportadora`(
  in `inc_razao` VARCHAR(40),
  in `inc_cnpj` VARCHAR(14),
  in `inc_ie` VARCHAR(30),
  in `inc_abreviatura` VARCHAR(12),
  in `inc_cep` int(11),
  in `inc_idspedMunicipio` INT(10),
  in `inc_status` smallint(6),
  in `inc_bairro` VARCHAR(45),
  in `inc_logradouro` VARCHAR(45),
  in `inc_complemento` VARCHAR(60),
  in `inc_municipio` VARCHAR(45),
  in `inc_numero` INT(11),
  in `inc_idestado` INT,
  in `inc_uf` CHAR(2), in inc_loja double

)
begin


SET foreign_key_checks=0;
 SELECT count(*),idCliente FROM juridica where cnpj=inc_cnpj into @a, @b;
if(@a = 0)then
    SELECT (ifnull(auto_increment,1)) FROM information_schema.`TABLES` where table_schema='conector' and table_name='cliente' into @chaveCliente;
        else
            set @chaveCliente = @b;
            end if;

insert into transportadora
  (
      idTransportadora,
	   `razao`,
	   `cnpj`,
	   `ie`,
	   `abreviatura`,
	   `cep`,
	   `idspedMunicipio`,
	   `status`,
     `bairro`,
     `logradouro`,
     `complemento`,
     `municipio`,
     `numero`,
     `idestado`,
     `uf`, idLoja

	)
   values(
      @chaveCliente,
	   `inc_razao`,
	   `inc_cnpj`,
	   `inc_ie`,
	   `inc_abreviatura`,
	   `inc_cep`,
	   `inc_idspedMunicipio`,
	   `inc_status`,
     `inc_bairro`,
     `inc_logradouro`,
     `inc_complemento`,
     `inc_municipio`,
     `inc_numero`,
     `inc_idestado`,
     `inc_uf`, inc_loja
	);
    SET foreign_key_checks=1;
	select @chaveCliente as codigo;
end $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `conector_inc_usuario`
--

DROP PROCEDURE IF EXISTS `conector_inc_usuario`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='' */ $$
CREATE DEFINER=`master`@`localhost` PROCEDURE `conector_inc_usuario`(
  inc_descricao VARCHAR(45),
  inc_login CHAR(15),
  inc_passwd VARBINARY(128),
  inc_terminalVenda smallint(6),
  inc_terminalConsulta smallint(6),
  inc_terminalECF smallint(6),
  inc_terminalAnaliseCredito smallint(6),
  inc_terminalMataBurro smallint(6),
  inc_status smallint(6),
  inc_supervisor smallint(6),
  inc_cadastro DATE,
  inc_key varchar(200),
  inc_onlyLogon char(1),
  inc_defaultLoja int(11)
                                     )
begin
insert into conector.usuario
(
  `descricao` ,
  `login`,
  `passwd`,
  `terminalVenda`,
  `terminalConsulta`,
  `terminalECF`,
  `terminalAnaliseCredito`,
  `terminalMataBurro`,
  `status`,
  `supervisor`,
  `cadastro`,
   onlyLogon,
   defaultLoja
)
values
(
  inc_descricao,
  inc_login,
  AES_ENCRYPT(inc_passwd,inc_key),
  inc_terminalVenda,
  inc_terminalConsulta,
  inc_terminalECF,
  inc_terminalAnaliseCredito,
  inc_terminalMataBurro,
  inc_status,
  inc_supervisor,
  inc_cadastro,
  inc_onlyLogon,
  inc_defaultLoja);
select last_insert_id() as codigo;
end $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `conector_inc_veiculo`
--

DROP PROCEDURE IF EXISTS `conector_inc_veiculo`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='' */ $$
CREATE DEFINER=`master`@`localhost` PROCEDURE `conector_inc_veiculo`(
  `inc_idtipoVeiculo` INT,
  `inc_descricao` VARCHAR(45),
  `inc_placa` VARCHAR(12),
  `inc_uf` VARCHAR(2),
  `inc_rntc` VARCHAR(45) )
begin
    insert into veiculo(
    idtipoVeiculo,
    descricao,
  `placa`,
  `uf`,
  `rntc`)values(inc_idtipoVeiculo, inc_descricao,
  `inc_placa`,
  `inc_uf`,
  `inc_rntc`);
  select last_insert_id();
  end $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `conector_inv_estoque`
--

DROP PROCEDURE IF EXISTS `conector_inv_estoque`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='' */ $$
CREATE DEFINER=`root`@`localhost` PROCEDURE `conector_inv_estoque`(
                                        in store int(11),
                                        in inv int(11),
                                        in formaAtual smallint,
                                        in idUser int
                                     )
begin

declare VarInvChave double default 0;
declare VarProduto double default 0;
declare VarQttyAtual decimal(15,3) default 0;
declare VarQttyEnc decimal(15,3) default 0;
declare VarQttyDivergSystem decimal(15,3) default 0;
declare VarQttyAcerto decimal(15,3) default 0;
declare VarCusto decimal(15,3) default 0;
declare VarVenda decimal(15,3) default 0;
DECLARE done INT DEFAULT FALSE;

begin

DECLARE basicFonte CURSOR for select tab.idInventarioItem,
        tab.idProduto,
        tab.quantidadeAtual,
        tab.quantidadeEncontrada,
        tab.quantidadeDivergente,
        if(tab.quantidadeAtual < 0,tab.quantidadeEncontrada,-1*tab.quantidadeDivergente) as acerto,tab.custoLiquido,
        tab.precoVenda
                                                        from inventarioItem tab
                                                             inner join inventario tab1 on(tab.idInventario = tab1.idInventario)
                                                                        where tab.idInventario=inv and
                                                                              tab1.idLoja=store and tab1.status=0;
    DECLARE CONTINUE HANDLER FOR NOT FOUND SET done = TRUE;

    open basicFonte;
    
    read_loop: LOOP
    
                          fetch basicFonte into VarInvChave,
                                VarProduto,
                                VarQttyAtual,
                                VarQttyEnc,
                                VarQttyDivergSystem,
                                VarQttyAcerto,
                                VarCusto,
                                VarVenda;
                    IF done THEN
                        LEAVE read_loop;
                    END IF;

                if(VarQttyAtual < 0 )then 
                if(VarQttyEnc > 0)then
                update produtoEstoques set 
                        quantidade=VarQttyEnc,dataAlteracao=now() 
                                                 where idProduto=VarProduto and idLoja=store;
                            call `conector_inc_movimentacao`(VarProduto,
                                         store,
                                         "INVENTÁRIO - CONTAGEM",
                                         "+",
                                         VarQttyEnc,
                                         0,
                                         0,
                                         0,
                                         VarCusto,
                                         0,
                                         VarVenda,
                                         0,
                                         4,
                                         "ENTRADA-INVENTARIO");
                                         end if;
                                         
           else if(VarQttyAtual > 0 )then
                if(formaAtual = 0)then 
                if(VarQttyAcerto < 0)then
                                                                        call `conector_inc_movimentacao`(VarProduto,
                                                                                                         store,
                                                                                                         "INVENTÁRIO - DIVERGENCIA ESTOQUE",
                                                                                                         "-",
                                                                                                         ABS(VarQttyAcerto),
                                                                                                         0,
                                                                                                         0,
                                                                                                         0,
                                                                                                         VarCusto,
                                                                                                         0,
                                                                                                         VarVenda,
                                                                                                         0,
                                                                                                         4,
                                                                                                         "SAIDA-INVENTARIO"); 
                update produtoEstoques set 
                        quantidade=quantidade+VarQttyAcerto,dataAlteracao=now() 
                                                 where idProduto=VarProduto and idLoja=store;                                                 
                    else if(VarQttyAcerto > 0)then
                        update produtoEstoques set 
                        quantidade=quantidade+VarQttyAcerto,dataAlteracao=now() 
                                                 where idProduto=VarProduto and idLoja=store;
                            call `conector_inc_movimentacao`(VarProduto,
                                         store,
                                         "INVENTÁRIO - DIVERGENCIA",
                                         "+",
                                         VarQttyAcerto,
                                         0,
                                         0,
                                         0,
                                         VarCusto,
                                         0,
                                         VarVenda,
                                         0,
                                         4,
                                         "ENTRADA-INVENTARIO");
                    
                end if;
            end if;
            else 
                        update produtoEstoques set 
                            quantidade=VarQttyEnc,dataAlteracao=now() 
                                                 where idProduto=VarProduto and idLoja=store;
                            
                            call `conector_inc_movimentacao`(VarProduto,
                                         store,
                                         "INVENTÁRIO - CONTAGEM",
                                         "+",
                                         VarQttyEnc,
                                         0,
                                         0,
                                         0,
                                         VarCusto,
                                         0,
                                         VarVenda,
                                         0,
                                         4,
                                         "Entrada-INVENTARIO");
            end if;            
            end if;
            end if;
            end loop;
        close basicFonte;
    end;
    update inventario set status=1,usuarioAtualiza=idUser where idInventario=inv;
end $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `conector_load_cupom`
--

DROP PROCEDURE IF EXISTS `conector_load_cupom`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='' */ $$
CREATE DEFINER=`root`@`%` PROCEDURE `conector_load_cupom`(
                                      in tipo smallint,
                                      in dv date,
                                      in cx int(11),
                                      in coo double,
                                      in store int(11)
                                    )
begin
case tipo
    when 1 then
SELECT date_format(tab.dataVenda,'%d/%m/%Y'),
       tab.numeroCupom,
       tab.terminal,
       truncate(tab.totalBruto,2),
       truncate(tab.desconto,2),
       truncate(tab.acrescimo,2),
       tab1.idLoja,
       tab1.razao,
       tab.operador,
       tab.hora,
       coalesce(tab.Cliente,0),
       case tab2.idTipoPessoa when 1 then tab3.nome when 2 then tab4.nome when 3 then tab5.razao else "CONSUMIDO" end,
       tab.situacao
          from cupom_cabecalho tab
               inner join loja tab1 on(tab.Loja = tab1.idLoja)
               left join cliente tab2 on(tab.cliente = tab2.idCliente)
               left join fisica tab3 on(tab.cliente = tab3.idCliente)
               left join rural tab4 on(tab.cliente = tab4.idCliente)
               left join juridica tab5 on(tab.cliente = tab5.idCliente)
          where tab.dataVenda = dv and
                (cx=0 or tab.terminal=cx) and
                (coo=0 or tab.numeroCupom=coo) and (store = 0 or tab.loja=store);
when 2 then

SELECT  tab.sequencia,
        tab.produto,
        tab1.nome,
        tab.unidade,
        tab.quantidade,
        truncate(tab.priceVenda,2),
        tab.situacao,
        truncate(tab.total,2)
          from cupom_detalhes tab
               inner join produto tab1 on(tab.produto = tab1.idProduto)
               inner join unidadeMedida tab2 on(tab1.idUnidade = tab2.idUnidadeMedida)
          where tab.dataVenda = dv and
                (cx=0 or tab.terminal=cx) and
                (coo=0 or tab.numeroCupom=coo) and (store = 0 or tab.loja=store) order by 1 asc;
when 3 then

select
      tab.sequencia,
      ifnull(tab.documentoCPF_CNPJ,""),
      tab.finalizadora,
      tab1.descricao,
      truncate(tab.valor,2),
      truncate(tab.troco,2)
      from cupom_movimento tab
              inner join finalizadora tab1 on(tab.finalizadora = tab1.idFinalizadora)
          where tab.dataVenda = dv and
                (cx=0 or tab.terminal=cx) and
                (coo=0 or tab.numeroCupom=coo) and (store = 0 or tab.loja=store)
                       order by 1;
when 4 then
select
      coalesce(tab.convenio,0),
      coalesce(tab.conveniado,0),
       case tab2.idTipoPessoa when 1 then tab3.nome when 2 then tab4.nome when 3 then tab5.razao else "" end,
       truncate((sum(valor)-sum(troco)+sum(juros)),2)
      from cupom_movimento tab
               left join cliente tab2 on(tab.conveniado = tab2.idCliente)
               left join fisica tab3 on(tab.conveniado = tab3.idCliente)
               left join rural tab4 on(tab.conveniado = tab4.idCliente)
               left join juridica tab5 on(tab.conveniado = tab5.idCliente)
          where tab.dataVenda = dv and
                (cx=0 or tab.terminal=cx) and
                (coo=0 or tab.numeroCupom=coo) and (store = 0 or tab.loja=store) group by 1,2;
end case;
end $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `conector_open_caixa`
--

DROP PROCEDURE IF EXISTS `conector_open_caixa`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='' */ $$
CREATE DEFINER=`master`@`localhost` PROCEDURE `conector_open_caixa`(  `inc_caixa` double,
                                            `inc_data` date,
                                            `inc_userAbertura` int(11),
                                            `inc_userFechamento` int(11),
                                            `inc_aberto` char(1),
                                            `inc_fundoTroco` decimal(15,3),
                                            `inc_observacao` varchar(100))
begin

    declare VarzeraCaixa char(1);
    declare VarcaixaAberto char(1);
    declare VarpermiteNegativo char(1);
    declare VarsaldoOld decimal(15,3);
    declare VarTotal decimal(15,3);

    SELECT zeraCaixa,caixaAberto,permiteNegativo
                                        from caixa
                                              where idCaixa=inc_caixa
                                                                  into VarzeraCaixa, VarcaixaAberto, VarpermiteNegativo;

        select  (sum(if(tab.tipo="A",valor,if(tab.tipo="C",valor,if(tab.tipo="V",valor,if(tab.tipo="J",valor,if(tab.tipo='N',valor,if(tab.tipo='B',valor,0))))))) -
                                            sum(if(tab.tipo="D",valor,if(tab.tipo="G",valor,if(tab.tipo="P",valor,0)))))
                                                      from
                                                        caixaCorrente  tab
                                                                        where
                                                                          tab.caixa = inc_caixa into VarTotal;

        if(VarTotal is null)then set VarTotal=0; end if;
        if(VarzeraCaixa = "s")then set VarTotal = 0; end if;


    INSERT INTO `conector`.`caixaregistro`
                (
                    `caixa`,
                    `data`,
                    `userAbertura`,
                    `userFechamento`,
                    `aberto`,
                    `fundoTroco`,
                    `observacao`,
                    `saldoOld`)
                                    VALUES
                (
                    inc_caixa,
                    inc_data,
                    inc_userAbertura,
                    inc_userFechamento,
                    inc_aberto,
                    inc_fundoTroco,
                    inc_observacao,
                    VarTotal
                );

        select ifnull(VarTotal,0);

    end $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `conector_prepare_convenio`
--

DROP PROCEDURE IF EXISTS `conector_prepare_convenio`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='' */ $$
CREATE DEFINER=`master`@`localhost` PROCEDURE `conector_prepare_convenio`( in string1 varchar(300))
begin
set @a = 'select ';
set @c = concat('date_format(`emissao`, ', "'","%d/%m/%Y", "'", '),');
set @d = concat('date_format(`vencimento`, ', "'","%d/%m/%Y", "'", '),');
set @e = 'valor,';
set @f = 'juros,';
set @g = '(valor + juros) as total,';
set @h = 'idLoja';
set @i = ' from ';
set @j = 'convenioMovimento';
set @l = ' where ';
set @m = concat('  idMovimento in(', string1,')');
set @string = concat(@a,@c,@d,@e,@f,@g,@h,@i,@j,@l,@m);
PREPARE output from @string;
    EXECUTE output;
end $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `conector_prepare_pessoa`
--

DROP PROCEDURE IF EXISTS `conector_prepare_pessoa`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='' */ $$
CREATE DEFINER=`master`@`localhost` PROCEDURE `conector_prepare_pessoa`( in string1 varchar(200))
begin
    set @a =  'select';
    set @b =  '	tab.idcliente as chave,';
    set @c =  '	ifnull(tab1.nome,"") as nome_fisica,';
    set @d =  '	ifnull(tab2.razao,""),';
    set @e =  ' ifnull(tab3.nome,"") as nome_rural,';
    set @f =  '	ifnull(tab2.cnpj,""),';
    set @g =  '	ifnull(tab1.cpf,""),';
    set @h =  '	ifnull(tab1.identidade,""),';
    set @i =  '	ifnull(tab2.ie,""),';
    set @j =  '  loja.razao as empresa,';
    set @l =  '	ifnull(tab4.descricao,"") as sexo_fisica,';
    set @m =  '	ifnull(tab5.descricao,"")  as civil_fisica,';
    set @n =  '  ifnull(tab1.nascimento,""),';
    set @o =  '  tab2.dataAbertura,';
    set @p =  '	tab2.fantasia,';
    set @q =  '  tab.uf,';
    set @r =  '  ifnull(tab3.cpf_1,""),';
    set @s =  '  ifnull(tab3.identidade,""),';
    set @t =  '  ifnull(tab3.nascimento,""),';
    set @u =  '  ifnull(tab3.sexo1,""),';
    set @v =  '  ifnull(tab3.civil1,""),';
    set @x =  '	ifnull(tab2.idTipoFornecedor,8),';
    set @z =  '	tab.idloja as chave_loja,';
    set @w =  '	tab.idtipoPessoa,';
    set @y =  '	tab.idusuario,';
    set @k =  '	tab.idatividade,';
    set @a1 =  '	tab.observacao,';
    set @b1 =  '	tab.dataEmissao,';
    set @c1 =  '	tab.dataAlteracao,';
    set @d1 =  '	ifnull(tab.idestado,"") as chave_estado,';
    set @e1 =  '	ifnull(tab1.idsexo,"") as chave_sexo_fisica,';
    set @f1 =  '	ifnull(tab1.idcivil,"") as chave_sexo_civil,';
    set @g1 =  '	ifnull(tab3.ie,""),';
    set @h1 =  '  ifnull(tab3.idsexo,""),';
    set @i1 =  '  ifnull(tab3.idcivil,""),';
    set @j1 =  '  ifnull(tab.status,""),';
    set @l1 =  '  tab.idspedMunicipio, ifnull(tab6.ddd,"0000"), ifnull(tab6.telefone,"00000000") ';
    set @m1 =  '  from ';
    set @n1 =  '	cliente tab';
    set @o1 =  '  inner join loja on(tab.idloja = loja.idloja) ';
    set @p1 =  '	left join fisica tab1 on(tab.idcliente = tab1.idcliente) ';
    set @q1 =  '	left join juridica tab2 on(tab.idcliente = tab2.idcliente) ';
    set @r1 =  '	left join (select rural.idcliente,rural.cpf as cpf_1,rural.nome,rural.nascimento,rural.ie,rural.idsexo,rural.identidade,rural.idcivil,sexo.descricao as sexo1,civil.descricao as civil1 from rural ';
    set @s1 =  '    inner join sexo on(rural.idsexo = sexo.idsexo) ';
    set @t1 =  '    inner join civil on(rural.idcivil = civil.idcivil)) as tab3 ';
    set @u1 =  ' 		on(tab.idcliente = tab3.idcliente) ';
    set @v1 =  '	left join sexo tab4 on(tab1.idsexo = tab4.idsexo) ';
    set @x1 =  '	left join civil tab5 on(tab1.idcivil = tab5.idcivil) ';
    set @z1 =  '  left join fone tab6 on(tab.idCliente = tab6.idcliente and tab6.priori = (select priori from fone,cliente where fone.idcliente=cliente.idCliente and fone.priori="v" and fone.idCliente=tab.idCliente))  ';
    set @w1 =  '  where  ( ' ;
    set @y1 =  '     tab2.cnpj <> "" or ' ;
    set @k1 =  '     tab1.cpf  <> "" or ' ;
    set @a2 =  '     tab3.cpf_1 <> "" ' ;
    set @b2 =  '    ) and 1=1  ' ;
    set @c2 =  concat('  and tab.idatividade in (1,2,7) and  ', string1);
    set @string = concat(@a,@b,@c,@d,@e,@f,@g,@h,@i,@j,@l,@m,@n,@o,@p,@q,@r,@s,@t,@u,@v,@x,@z,@w,@y,@k,@a1,@b1,@c1,@d1,@e1,@f1,@g1,@h1,@i1,@j1,@l1,@m1,@n1,@o1,@p1,@q1,@r1,@s1,@t1,@u1,@v1,@x1,@z1,@w1,@y1,@k1,@a2,@b2,@c2);
    PREPARE output from @string;
    EXECUTE output;
end $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `conector_regra_price`
--

DROP PROCEDURE IF EXISTS `conector_regra_price`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='' */ $$
CREATE DEFINER=`master`@`localhost` PROCEDURE `conector_regra_price`(
                                        in typeCalculo char(1),
                                        in typeMargem char(1),
                                        in find_produto integer,
                                        in find_loja integer,
                                        in price numeric(15,3),
                                        in priceMargem numeric(15,3)
                                     )
begin

declare VarLoja int(11);

        select idloja 
                    from system into Varloja;

case typeCalculo
    when 'b' then

    if(typeMargem = 0) then
        call conector_calc_custoLiquido_lbc(find_produto,find_loja,price,@custo,@reposicao,@venda,@minimo,@sugestao,@margem,@lbruto,@lliquido,@mBruto,@mLiquida);
    else
        call conector_calc_margem_lbc(find_produto,find_loja,price,priceMargem,@custo,@reposicao,@venda,@minimo,@sugestao,@margem,@lbruto,@lliquido,@mBruto,@mLiquida);
    end if;
    when 'r' then
    if(typeMargem = 0) then
    call conector_calc_custoLiquido_lbv(find_produto,find_loja,price,@custo,@reposicao,@venda,@minimo,@sugestao,@margem,@lbruto,@lliquido,@mBruto,@mLiquida);
    else
        call conector_calc_margem_lbv(find_produto,find_loja,price,priceMargem,@custo,@reposicao,@venda,@minimo,@sugestao,@margem,@lbruto,@lliquido,@mBruto,@mLiquida);
    end if;
    when 'c' then
    if(typeMargem = 0) then
            CALL conector_calc_custoLiquido_llc(find_produto,find_loja,price,@custo,@reposicao,@venda,@minimo,@sugestao,@margem,@lbruto,@lliquido,@mBruto,@mLiquida);
    else
        call conector_calc_margem_llc(find_produto,find_loja,price,priceMargem,@custo,@reposicao,@venda,@minimo,@sugestao,@margem,@lbruto,@lliquido,@mBruto,@mLiquida);
    end if;
    when 'l' then
    if(typeMargem = 0) then
                CALL conector_calc_custoLiquido_llv(find_produto,find_loja,price,@custo,@reposicao,@venda,@minimo,@sugestao,@margem,@lbruto,@lliquido,@mBruto,@mLiquida);
    else
                call conector_calc_margem_llv(find_produto,find_loja,price,priceMargem,@custo,@reposicao,@venda,@minimo,@sugestao,@margem,@lbruto,@lliquido,@mBruto,@mLiquida);
    end if;
end case;
    select
            ifnull(Round(@custo,3),0) as "Price Custo",
            ifnull(Round(@reposicao,3),0) as "Custo de reposição",
            ifnull(Round(@venda,3),0) as "Price de Venda",
            ifnull(Round(@minimo,3),0) as "Price Minimo",
            ifnull(Round(@sugestao,3),0) as "Sugestão de Price",
            ifnull(Round(@margem,3),0) as "Margem Aplicada",
            ifnull(Round(@lbruto,3),0) as "Lucro Bruto",
            ifnull(Round(@lliquido,3),0) as "Lucro Liquido",
            ifnull(Round(@mBruto,3),0) as "Margem Bruta",
            ifnull(Round(@mLiquida,3),0) as "Margem Liquida";

end $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `conector_report_boletos`
--

DROP PROCEDURE IF EXISTS `conector_report_boletos`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='' */ $$
CREATE DEFINER=`master`@`localhost` PROCEDURE `conector_report_boletos`(in find double)
begin

  Select sacador from boleto where idBoleto=find into @a;

SELECT
             loja.razao as Nome_Cedente,
             cast(case tab1.idTipoPessoa when 1 then tab2.CPF
                                         when 2 then tab3.CNPJ
                                         when 3 then tab4.CPF end as char) as CNPJ_CPF,
             cast(case tab1.idTipoPessoa when 1 then tab2.nome
                                         when 2 then tab3.razao
                                         when 3 then tab4.nome end as char) as Nome_Sacador,
             cast(cedente as char) as Cedente,
             cast(sacador as char) as Sacador,
             cast(codBarra as char) as CodBarra,
             banco,
             cast(concat(lpad(banco.idBanco,3,0),'-',ifnull(banco.digito,""))as char) as Banco_Digito,
             banco.nome as Nome_Banco,
             moeda,
             agencia,
             tab.nossoNumero,
             convenio,
             cast(valor as char) as Valor,
             carteira,
             cast(date_format(emissao, '%d/%m/%Y') as char) as Emissao,
             cast(date_format(vencimento, '%d/%m/%Y')as char) as Vencimento,
             cast(date_format(pagamento, '%d/%m/%Y') as char) as Pgto,
             multa,
             multaDiaria,
             desconto,
             acrescimo,
             cast(ifnull(messagem, "")as char) as Msg,
             especial,
             nr_documento,
             dataDocumento,
             parcela,
             historico,
             cast((concat(MID(CONCAT(lpad(banco, 3,0),moeda,lpad(agencia,4,0),lpad(carteira,2,0),lpad(tab.nossoNumero,11,0),lpad(convenio,8,0),lpad(vencimentoValue,4,0),lpad((valor*100),10,0)),1,5), ".",
                   MID(CONCAT(lpad(banco, 3,0),moeda,lpad(agencia,4,0),lpad(carteira,2,0),lpad(tab.nossoNumero,11,0),lpad(convenio,8,0),lpad(vencimentoValue,4,0),lpad((valor*100),10,0)),6,4), dv1," ",
                   MID(CONCAT(lpad(banco, 3,0),moeda,lpad(agencia,4,0),lpad(carteira,2,0),lpad(tab.nossoNumero,11,0),lpad(convenio,8,0),lpad(vencimentoValue,4,0),lpad((valor*100),10,0)),10,5),'.',
                   MID(CONCAT(lpad(banco, 3,0),moeda,lpad(agencia,4,0),lpad(carteira,2,0),lpad(tab.nossoNumero,11,0),lpad(convenio,8,0),lpad(vencimentoValue,4,0),lpad((valor*100),10,0)),15,5), dv2," ",
                   MID(CONCAT(lpad(banco, 3,0),moeda,lpad(agencia,4,0),lpad(carteira,2,0),lpad(tab.nossoNumero,11,0),lpad(convenio,8,0),lpad(vencimentoValue,4,0),lpad((valor*100),10,0)),20,5),'.',
                   MID(CONCAT(lpad(banco, 3,0),moeda,lpad(agencia,4,0),lpad(carteira,2,0),lpad(tab.nossoNumero,11,0),lpad(convenio,8,0),lpad(vencimentoValue,4,0),lpad((valor*100),10,0)),25,5),dv3," ",dvFull," ",
                 Right(CONCAT(lpad(banco, 3,0),moeda,lpad(agencia,4,0),lpad(carteira,2,0),lpad(tab.nossoNumero,11,0),lpad(convenio,8,0),lpad(vencimentoValue,4,0),lpad((valor*100),10,0)),14))) as char) as Linha_Digitavel,
             cast(concat(adress.Logradouro," N.o ",adress.numero," B. ",adress.bairro) as char) as Adress01,
             cast(concat(mid(adress.cep,1,5),'-',right(adress.cep,3),"    ",adress.municipio,"    ",adress.estado) as char) as Adress02
        FROM conector.boleto tab
                inner join loja on(tab.cedente = loja.idLoja)
                inner join cliente tab1 on(tab.sacador = tab1.idCliente)
                left join fisica tab2 on(tab.sacador = tab2.idCliente)
                left join juridica tab3 on(tab.sacador = tab3.idCliente)
                left join rural tab4 on(tab.sacador = tab4.idCliente)
                inner join banco on(banco.idBanco = tab.banco)
                left join endereco adress on(tab.sacador = adress.idCliente and adress.idEnderecoType=(select min(idEnderecoType) from endereco where idCliente=@a))
        where idBoleto=find;
end $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `conector_report_cliente`
--

DROP PROCEDURE IF EXISTS `conector_report_cliente`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='' */ $$
CREATE DEFINER=`master`@`localhost` PROCEDURE `conector_report_cliente`()
begin
select tab.idCliente,
          case tab.idTipoPessoa when 1 then tab1.nome
                                when 2 then tab2.razao
                                when 3 then tab3.nome end as Nome,
          cast(case tab.idTipoPessoa when 1 then tab1.nascimento
                                when 2 then tab2.dataAbertura
                                when 3 then tab3.nascimento end as char) as Nascimento
            from cliente tab
                left join fisica tab1 on(tab.idCliente = tab1.idCliente)
                left join juridica tab2 on(tab.idCliente = tab2.idCliente)
                left join rural tab3 on(tab.idCliente = tab3.idCliente) where
                                                           (tab1.nome is not null or tab2.razao is not null or tab3.nome is not null)
                                                                        ORDER BY 1;


end $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `conector_report_compra`
--

DROP PROCEDURE IF EXISTS `conector_report_compra`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='' */ $$
CREATE DEFINER=`master`@`localhost` PROCEDURE `conector_report_compra`(
                                            in find varchar(45),
                                            in di date,
                                            in df date,
                                            in typeCompra int,
                                            in loja int,
                                            in cliente int
                                       )
begin
select
       tab3.idLoja,
       tab3.razao as LojaRazao,
       tab.volume,
       tab.itens,
       tab.idPedidoCompra,
       cast(date_format(tab.data,'%d/%m/%Y') as char) as Emissao,
       tab1.idCliente,
       tab2.razao as Fornecedor,
       tab.valorTotalLiquido,
       tab.valorTotal,
       cast(if(tab.emitido = 1, 'Emitido', 'NAO') as char) as Emitido,
       cast(if(tab.entregue = 1, 'Entregue', 'NAO') as Char) as Entregue,
       cast(if(tab.recebido = 1, 'Recebido', 'NAO') as char) as Recebido,
       tab.valorPedente,
       tab.valorRecebido,
       tab.acrescimos,
       tab.desconto,
       tab4.idFuncionario,
       tab4.nome as comprador,
       cast(ifnull(tab5.nome,"Representante Teste") as char) as representante,
       cast(ifnull(date_format(tab.dataEntrega,'%d/%m/%Y'),'00-00-0000') as char) as Entrega
from
   `conector`.`pedidoCompra` tab
    inner join cliente tab1 on(tab.idClienteFornecedor = tab1.idCliente)
    inner join juridica tab2 on(tab.idClienteFornecedor = tab2.idCliente)
    inner join loja tab3 on(tab.idLoja = tab3.idLoja)
    inner join funcionario tab4 on(tab.idfuncionario = tab4.idfuncionario)
    left join representante tab5 on(tab.idRepresentante = tab.idRepresentante)
   where
    (typeCompra=0 or tab.status = typeCompra) and
    (find = 0 or `idpedidoCompra` = find)  and
    tab4.idFuncao=2 and
    tab.data between di and df and
    (loja=0 or tab3.idLoja = loja) and
    (cliente = 0 or tab1.idCliente = cliente) and
     tab.data between di and df;
end $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `conector_report_contrato`
--

DROP PROCEDURE IF EXISTS `conector_report_contrato`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='' */ $$
CREATE DEFINER=`master`@`localhost` PROCEDURE `conector_report_contrato`(in find double)
begin
   select
           concat(lpad(tab8.nr_parcela, 4,0),".",lpad(tab.idloja,8,0),".",lpad(tab.idCliente,13,0),".",lpad(tab.idCrediario,13,0)) as conjunto,
           tab8.nr_parcela as parcelamento,
           date_format(tab8.vencimento, '%d/%m/%Y') as venc,
           if(tab8.observacao="","PAGAMENTO SEMPRE NOS LOCAIS ESPECIALIZADOS",tab8.observacao) as obs,
       CASE tab8.status when 0 then "ABERTO"
                   when 1 then "LIQUIDADO"
                   when 2 then "PARCIAL"
                   when 3 then "PERCA"
                   when 4 then "COBRADOR"
                   when 5 then "CANCELADO" end as situacao,
       round(tab8.valorFinanceiro,2) as financeiro,
       date_format(tab8.pagamento, '%d/%m/%Y') as pgto,
        tab8.idParcela as parcela,
                                    lpad(tab.idCrediario,13,0) AS "idCrediario",
                                    tab.`idloja`,
                                    tab1.Razao,
                                    tab.`idmetodo`,
                                    tab2.descricao,
                                    tab.`idcliente`,
                                    tab.`idfuncionario`,
                                    tab3.nome,
                                    date_format(tab.`emissao`, '%d/%m/%Y') as "emissao",
                                    round(tab.`valueEntry`,2) as valor_entrada,
                                    round(tab.`total`,2) as "ful",
                                    round(tab.`encargos`,2) as "encargos",
                                    tab.`status`,
                                    tab.`observacao`,
                                    tab.`entrada`,
                                    round(tab.`tac`,2) as "tac",
                                    round(tab.`cet`,2) as "cet",
                                    round(tab.`taxa`,2) as "taxa",
                                    tab.pedido,
                                    tab.batimento,
                                    round((tab.`total` + tab.`encargos`),2) as TotalContrato,
                                    tab.parcelamento as parcel,
    case tab4.idtipoPessoa when 1 then tab5.nome
                          when 2 then tab6.razao
                          when 3 then tab7.nome end Nome_Razao,
    case tab4.idtipoPessoa when 1 then date_format(tab5.nascimento, '%d/%m/%Y')
                         when 2 then date_format(tab6.dataAbertura, '%d/%m/%Y')
                         when 3 then date_format(tab7.nascimento, '%d/%m/%Y') end Nascimento_Abertura,
    case tab4.idtipoPessoa when 1 then tab5.cpf
                          when 2 then tab6.cnpj
                          when 3 then tab7.cpf end CPF_CNPJ,
    case tab4.idtipoPessoa when 1 then tab5.identidade
                          when 2 then tab6.ie
                          when 3 then tab7.identidade end Ie_Identidade,
                          tab9.municipio, concat(tab9.logradouro,", ",tab9.bairro,", Nro. ",tab9.numero," CEP:",tab9.cep) as logradouro,
                          tab1.cnpj as doc,
                          cast(round(tab8.valorFinanceiro,2) as char(1000)) as financeiro1
                                                from crediario tab
                                                        inner join loja tab1 on(tab.idLoja = tab1.idLoja)
                                                        inner join metodo tab2 on(tab.idMetodo = tab2.idMetodo)
                                                        inner join funcionario tab3 on(tab.idFuncionario = tab3.idFuncionario)
                                                        inner join cliente tab4 on(tab.idCliente = tab4.idCliente)
                                                        left join fisica tab5 on(tab.idCliente = tab5.idCliente)
                                                        left join juridica tab6 on(tab.idCliente = tab6.idCliente)
                                                        left join rural tab7 on(tab.idCliente = tab7.idCliente)
                                                        inner join parcela tab8 on(tab.idCrediario = tab8.idCrediario)
                                                        left join (select tab.* from endereco tab
              inner join cliente tab1 on(tab.idCliente = tab1.idCliente) where sequencia=1) tab9 on(tab4.idCliente = tab9.idCliente)

                                                                                                            where
                                                                                                                    tab.idCrediario = find;
end $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `conector_report_detalhesCategoria`
--

DROP PROCEDURE IF EXISTS `conector_report_detalhesCategoria`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='' */ $$
CREATE DEFINER=`master`@`localhost` PROCEDURE `conector_report_detalhesCategoria`()
begin
select
       tab.idCategoria,
       tab.descricao as Categoria,
       tab1.descricao as Grupo,
       tab2.descricao as Setor

              from categoria tab
                  inner join grupo tab1 on(tab.idGrupo = tab1.idGrupo)
                  inner join setor tab2 on(tab.idSetor = tab1.idSetor) where  tab1.idSetor=tab2.idSetor and tab.status=0;
end $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `conector_report_detalhesEntrada`
--

DROP PROCEDURE IF EXISTS `conector_report_detalhesEntrada`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='' */ $$
CREATE DEFINER=`master`@`localhost` PROCEDURE `conector_report_detalhesEntrada`(in store int, in find varchar(45))
begin
select
       cast(tab.IdProduto as char) as IdProduto,
       tab.Nome,
       cast(tab1.unidade as char) as unidade,
       item.quantidade,
       item.CustoBruto,
       item.CustoNota,
       cast(ifnull(item.flagRecebe,"") as char) as FlagRecebe,
       item.priceVenda,
       item.lucro,
       cast(ifnull(item.cfop,"") as char) as CFOP,
       cast(ifnull(item.csticms,"") as char) as cstIcms,
       cast(ifnull(tab2.barra,"0") as char) as cod_Barra,
       cast(ifnull(ent.nr_nota,"") as char) as Nota,
       cast(date_format(ent.entrada, '%d/%m/%Y') as char) as Entrada,
       cast(date_format(ent.emissao, '%d/%m/%Y') as char) as Emissao,
       ent.idCliente,
       ent.idLoja,
       cast(loja.razao as char) as razao
             from
                 produto tab
             inner join unidadeMedida tab1 on(tab.idunidade = tab1.idunidadeMedida)
             inner join produtoEmbalagem tab2 on(tab.idproduto = tab2.idproduto)
             inner join produtoStore tab3 on(tab.idproduto = tab3.idproduto)
             inner join produtoPrice tab4 on(tab.idproduto = tab4.idproduto)
             inner join produtoImpostos tab5 on(tab.idproduto = tab5.idproduto)
             inner join entradaItem item on(tab.idProduto = item.idProduto)
             inner join entrada ent on(item.idEntrada = ent.idEntrada)
             inner join cst on(tab5.cst = cst.idCst)
             inner join cfop on(item.cfop = cfop.cfop)
             inner join loja on(tab3.idLoja = loja.idLoja)
where
             tab2.defaultVenda = "s" and
             tab3.Idloja = store and
             tab4.Idloja = store and
             tab5.Idloja = store and
             item.idEntrada = find;
end $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `conector_report_detalhesGrupo`
--

DROP PROCEDURE IF EXISTS `conector_report_detalhesGrupo`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='' */ $$
CREATE DEFINER=`master`@`localhost` PROCEDURE `conector_report_detalhesGrupo`()
begin
select tab1.idSetor as Codigo,
       tab1.descricao as Setor,
       tab.idGrupo,
       tab.descricao as Grupo
              from grupo tab
                  inner join setor tab1 on(tab.idSetor = tab1.idSetor)
                     where tab.status=0;
end $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `conector_report_detalhesSetor`
--

DROP PROCEDURE IF EXISTS `conector_report_detalhesSetor`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='' */ $$
CREATE DEFINER=`master`@`localhost` PROCEDURE `conector_report_detalhesSetor`()
begin
select idSetor as Codigo,
       descricao,
       round(margem,2) as Sugestao
              from setor
                     where status=0;
end $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `conector_report_entrada`
--

DROP PROCEDURE IF EXISTS `conector_report_entrada`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='' */ $$
CREATE DEFINER=`master`@`localhost` PROCEDURE `conector_report_entrada`(
                                            findStatus varchar(1),
                                            findCliente double,
                                            findLoja double,
                                            findNota varchar(10),
                                            findCfop varchar(6),
                                            di date,
                                            df date
                                            )
begin
 select         cast(tab1.Razao as char) as razao,
        cast(tab2.Descricao as char) as descricao,
        cast(tab.cfop as char) as cfop,
        cast(tab.nr_Nota as char) as nr_nota,
        cast(date_format(tab.entrada, '%d/%m/%Y') as char) as Entrada,
        cast(date_format(tab.emissao, '%d/%m/%Y') as char) as Emissao,
        cast(ifnull(case tab.typeNota when "f" then tab5.razao
                          else tab4.Razao end, "Desconhecido") as char) as nome_razao,
        tab.valorTotalNota as valorTotalNota,
        tab.valorTotalCustoLiquido as 'valorTotalCustoLiquido',
        tab.valorTotalProduto as 'valorTotalProduto',
        cast(tab.idCliente as char) as codigo,
        cast(tab.idLoja as char) as store
         from
           entrada tab
            inner join loja tab1 on(tab.idLoja = tab1.idLoja)
            inner join operacaoEntrada tab2 on(tab.idOperacao = tab2.idoperacao)
            inner join cliente tab3 on(tab.idCliente = tab3.idCliente)
            inner join juridica tab4 on(tab3.idCliente = tab4.idCliente)
            left join transportadora tab5 on(tab.idTransportadora = tab5.idTransportadora);
end $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `conector_report_extrato`
--

DROP PROCEDURE IF EXISTS `conector_report_extrato`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='' */ $$
CREATE DEFINER=`master`@`localhost` PROCEDURE `conector_report_extrato`(
                                        in escolha int,
                                        in di date,
                                        in df date,
                                        in conciliacao char(1),
                                        in conta int,
                                        in chave double,
                                        in VarValor decimal(15,3),
                                        in VarLancamento varchar(10))
begin
select
        cast(tab.idLoja as char) as Store,
        cast(tab2.idConta as char) as conta,
        tab2.nome,
        cast(date_format(tab.emissao,'%d/%m/%Y') as char) Emissao,
        cast(date_format(tab.vencimento,'%d/%m/%Y') as char) as Vencimento,
        tab.historico,
        tab.tipo,
        cast(coalesce(tab.lancamento,"") as char) as Lancamento,
        tab.valor,
        tab1.Saldo,
        if(tab.confirma = 's','X',"") as Confirmada,
        coalesce(tab.tipoOrigem,"") as TipoOrigem
          from
                contaCorrente tab
                inner join contaSaldo tab1 on(tab.idContaCorrente = tab1.codigo)
                inner join conta tab2 on(tab.codigo = tab2.idConta)
                            where
                              if(escolha=1, tab.emissao between di and df, 0=0) and
                              if(escolha=2, tab.vencimento between di and df, 0=0) and
                              if(escolha=3, tab.dataConfirma between di and df, 0=0) and
                              (conciliacao="t" or tab.confirma = conciliacao) and
                              (conta = 0 or tab.codigo = conta);
end $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `conector_report_folhaconferencia`
--

DROP PROCEDURE IF EXISTS `conector_report_folhaconferencia`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='' */ $$
CREATE DEFINER=`root`@`%` PROCEDURE `conector_report_folhaconferencia`(in findloja int,
                                                  in findsetor int,
                                                  in findgrupo int,
                                                  in findcategoria int,
                                                  in findfornecedor int)
begin

select tab1.idproduto,tab1.nome,tab2.quantidade,tab3.priceVenda, "_________________" as 'Qtde Contada'
       from produto tab1
            inner join produtoestoques tab2 on tab1.idproduto = tab2.idproduto
            inner join produtoprice tab3 on tab1.idproduto = tab3.idproduto
       where tab2.idloja = findloja
         and tab3.idloja = findloja
         and (findsetor = 0 or tab1.idsetor = findsetor)
         and (findgrupo = 0 or tab1.idgrupo = findgrupo)
         and (findcategoria = 0 or tab1.idcategoria = findcategoria)
         and (findfornecedor = 0 or tab1.idfornecedor = findfornecedor);

commit;
end $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `conector_report_historico`
--

DROP PROCEDURE IF EXISTS `conector_report_historico`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='' */ $$
CREATE DEFINER=`master`@`localhost` PROCEDURE `conector_report_historico`(
                                              find_loja double,
                                              find_cliente double,
                                              escolha smallint,
                                              di date,
                                              df date)
begin

select
	tab.idcliente as chave,
    case tab.idtipoPessoa when 1 then tab1.nome
                          when 2 then tab2.razao
                          when 3 then tab3.nome end Nome_Razao,
    tab.uf,
    case tab.idtipoPessoa when 1 then date_format(tab1.nascimento, '%d/%m/%Y')
                         when 2 then date_format(tab2.dataAbertura, '%d/%m/%Y')
                         when 3 then date_format(tab3.nascimento, '%d/%m/%Y') end Nascimento_Abertura,
    if(tab.status=0,"Ativo","Inativo"),
    case tab.idtipoPessoa when 1 then tab1.cpf
                          when 2 then tab2.cnpj
                          when 3 then tab3.cpf_1 end CPF_CNPJ,
    case tab.idtipoPessoa when 1 then tab1.identidade
                          when 2 then tab2.ie
                          when 3 then tab3.identidade end Ie_Identidade,
  date_format(tab.dataEmissao, '%d/%m/%Y') as Inclusao,
  tab.idloja as chave_loja


from
	cliente tab
  inner join tipoPessoa tp on(tab.idTipoPessoa = tp.idTipoPessoa)
  inner join loja on(tab.idloja = loja.idloja)
	left join fisica tab1 on(tab.idcliente = tab1.idcliente)
	left join juridica tab2 on(tab.idcliente = tab2.idcliente)
	left join (select rural.idcliente,rural.cpf as cpf_1,rural.nome,rural.nascimento,rural.ie,rural.idsexo,rural.identidade,rural.idcivil,sexo.descricao as sexo1,civil.descricao as civil1 from rural
                inner join sexo on(rural.idsexo = sexo.idsexo)
                inner join civil on(rural.idcivil = civil.idcivil)) as tab3
        		on(tab.idcliente = tab3.idcliente)
	left join sexo tab4 on(tab1.idsexo = tab4.idsexo)
	left join civil tab5 on(tab1.idcivil = tab5.idcivil)
where
    (
     tab2.cnpj is not null or
     tab1.cpf  is not null or
     tab3.cpf_1 is not null
    )  AND tab.idCliente=find_cliente into
       @chave,@Razao,@Uf, @Nasc, @situacao, @CGC, @Ie, @Inclusao, @Loja;

    select
        @chave as chave,@Razao as razao,@Uf as uf, @Nasc as nasc, @situacao as situacao, @CGC as cgc, @Ie as ie, @Inclusao as inc, @Loja as store,
        "CHEQUE" as Title,
        tab.idLoja as Loja,
        cast(date_format(tab.emissao,"%d/%m/%Y") as char) AS Emissao,
        cast(date_format(tab.Vencimento,"%d/%m/%Y") as char) as Vencimento,
        Concat('No. Cheque',cast(tab.numberCheque as char), ' Serie. ' ,cast(tab.serie as char),' ',tab3.nome,' Agencia. ',cast(tab.agencia as char),' Conta ', cast(tab.contaCorrente as char)) Historico,
        "1/1"  Parcela,
        round(tab.valueCheque,2) as 'valueCheque',
        cast(date_format(if(tab.pagamento = "","00000000",tab.pagamento),'%d/%m/%Y') as char) as Pagamento,
        cast("0" as char) As Atraso,
        cast(case tab.flagPagamento when 'n' then 'A depositar'
                               when 's' then 'Recebido'
                               when 'a' then 'Encaminhar ao Financeiro'
                               when 'u' then 'Sob Custodia' end as char) as Situacao,
        tab.terminal,
        tab.cupom,
        tab.conferencia
            from
                cheque tab
                        inner join loja tab1 on(tab.idLoja = tab1.idLoja)
                        inner join cliente tab2 on(tab.idCliente = tab2.idCliente)
                        inner join banco tab3 on(tab.banco = tab3.idBanco)
                        left join fisica tab4 on(tab2.idCliente = tab4.idCliente)
                        left join juridica tab5 on(tab2.idCliente = tab5.idCliente)
                        left join rural tab6 on(tab2.idCliente = tab6.idCliente)
                                                    where
                                                    (tab2.idCliente = find_cliente) and
                                                    (find_loja=0 or tab1.idLoja=find_loja) and
                                                                           if(escolha=1, tab.emissao between di and df, 0=0) and
                                                                           if(escolha=2, tab.vencimento between di and df, 0=0) and
                                                                           if(escolha=3, tab.pagamento between di and df, 0=0)
     union

    select
           @chave as chave,@Razao as razao,@Uf as uf, @Nasc as nasc, @situacao as situacao, @CGC as cgc, @Ie as ie, @Inclusao as inc, @Loja as store,
           "CREDIARIO",
           tab.idLoja,
           date_format(tab1.emissao, '%d/%m/%Y'),
           date_format(tab.vencimento, '%d/%m/%Y'),
           cast(Concat('Doc Fiscal. ',tab1.cupom,' Terminal. ',tab1.terminal,' Reserva. ',tab1.pedido, ' Tipo Insercao. ',
              if((tab1.cupom=0 and tab1.terminal=0),if(tab1.pedido=0,'MANUAL', 'RESERVA PDV'),'EMISSAO FISCAL')) as char),
           cast(concat(tab1.parcelamento,"/",tab.nr_parcela) as char) as Parcela,
           round(tab.valorFinanceiro,2),
           date_format(tab.pagamento, '%d/%m/%Y'),
           ifnull((round(avg(datediff(tab.vencimento,if(((tab.pagamento = '00000000') or (tab.pagamento is null)),now(),date_format(tab.pagamento, '%Y-%m-%d')))))),0) As Atraso,
           CASE tab.status when 0 then "ABERTO"
                           when 1 then "LIQUIDADO"
                           when 2 then "PARCIAL"
                           when 3 then "PERCA"
                           when 4 then "COBRADOR"
                           when 5 then "CANCELADO" end as test,
                    tab1.cupom,
                    tab1.terminal,
                    tab1.batimento
       from parcela tab
            inner join crediario tab1 on(tab.idCrediario = tab1.idCrediario and tab.idLoja = tab1.idLoja)
       where tab.status != 5 and
             tab1.idCliente=find_cliente and
             (find_loja = 0 or tab1.idLoja = find_loja)  and
                                                         if(escolha=1, tab1.emissao between di and df, 0=0) group by 1,2,3,4
       union
select
                   @chave as chave,@Razao as razao,@Uf as uf, @Nasc as nasc, @situacao as situacao, @CGC as cgc, @Ie as ie, @Inclusao as inc, @Loja as store,
                   "CARTAO CREDITO" as title,
                      tab.`idloja` loja,
                    cast(date_format(ifnull(tab.`emissao`,'00000000'),'%d/%m/%Y') as char) as Emissao,
                    cast(date_format(ifnull(tab.`vencimento`,'00000000'),'%d/%m/%Y') as char) as Vencimento,
                    cast(Concat('Doc Fiscal. ',cast(ifnull(tab.cupom,0) as char),' Terminal. ',cast(ifnull(tab.terminal,0) as char),' Reserva. ',cast(ifnull(tab.pedido,0) as char), ' Tipo Insercao. ',
                            if((tab.cupom=0 and tab.terminal=0),if(tab.pedido=0,'MANUAL', 'RESERVA PDV'),'EMISSAO FISCAL'), ' ADM. ', ifnull(tab1.razao,0)) as char) as Historico,
                 cast(Concat(tab.parcela,"/",tab.qttyParcela) as char) as Parcela,
                   tab.`valor` as valueCheque,
                  cast(date_format(tab.`PAGAMENTO`,'%d/%m/%Y') as char) as Pagamento,
                     "0" As Atraso,
                 cast(case tab.pagamento when '00000000' then 'ABERTO'
                                        else 'RECEBIDO' end as char) as Situacao,
                     tab.`terminal`,
                     tab.`cupom`,
                     tab.batimento
                                 from  cartao tab
                                           inner join administradora tab1 on(tab.idAdministradora = tab1.idAdministradora)
                                           left join (select ped.idPedido,
                                                              ped.idLoja,
                                                              ped.idCliente,
                                                              ped.idFinalizadora,
                                                              ifnull(nota.nr_nota,0)
                                                                                from
                                                                                  (select tab.idPedido,
                                                                                          tab.idLoja,
                                                                                          tab.idCliente,
                                                                                          metodo.idFinalizadora
                                                                                                       from pedido tab
                                                                                                          inner join metodo on(tab.idMetodo = metodo.idMetodo)
                                                                                                                    where  metodo.idFinalizadora in(5,6)) as ped
                                                                                                                          left join(select tab.idPedido,
                                                                                                                                           tab.idLoja,
                                                                                                                                           tab.idCliente,
                                                                                                                                           nf.nr_nota
                                                                                                                                                from pedido tab
                                                                                                                                                  inner join nf on(tab.idPedido =  nf.idPedido)
                                                                                                                                                   inner join metodo on(tab.idMetodo = metodo.idMetodo)
                                                                                                                                              where  metodo.idFinalizadora in(5,6)) as nota on(ped.idCliente = nota.idCliente and ped.idLoja = nota.idLoja and ped.idPedido = nota.idPedido)) as pedNota on
                                                                                              (tab.idLoja = pedNota.idLoja and tab.pedido = pedNota.idPedido)

                                                                                       where
                                                                                               (find_loja=0 or tab.idLoja = find_loja) and
                                                                                               tab1.idAdministradora != 1 and
                                                                                               (ifnull(pedNota.idCliente,0) = find_cliente or find_cliente = 0) and
                                                                                               (pedNota.idCliente is not null) and
                                                                                               if(escolha=1, tab.emissao between di and df, 0=0) and
                                                                                               if(escolha=2, tab.vencimento between di and df, 0=0) and
                                                                                               if(escolha=3, tab.pagamento between di and df, 0=0)
union

select
      @chave as chave,@Razao as razao,@Uf as uf, @Nasc as nasc, @situacao as situacao, @CGC as cgc, @Ie as ie, @Inclusao as inc, @Loja as store,
      "CONVENIO" as Title,
      tab.idLoja as Store,
      date_format(tab.emissao, '%d/%m/%Y') as Emissao,
      date_format(tab.vencimento, '%d/%m/%Y') as Vencimento,
      cast(if(tab.Pedido is not null, concat("Faturado pela reserva ",tab.Pedido,"."),
            if(tab.cupom > 0, concat('Cupom Fiscal N.o ', tab.cupom), concat('Insercao Manual - Codigo Func. N.o ', tab.idFuncionario))) as char) as Historico,
      cast(concat(tab.parcela,'/',tab.qttyParcelas) as char) As Parcelamento,
      round(tab.valor,2) as Valor,
      date_format(tab.pagamento, '%d/%m/%Y') as Pagamento,
      "" As Atraso,
      case tab.flagPagamento when 's' then 'Recebido' else 'ABERTO' end as Flag,
      tab.terminal as Terminal,
      tab.cupom as Doc,
      tab.conferencia AS batimento
        from convenioMovimento tab
                    inner join loja tab1 on(tab.idLoja = tab1.idLoja)
                    inner join convenio tab2 on(tab.empresa = tab2.idConvenio)
                    inner join cliente tab3 on(tab.idCliente = tab3.idCliente)
                    left join fisica tab4 on(tab3.idCliente = tab4.idCliente)
                    left join juridica tab5 on(tab3.idCliente = tab5.idCliente)
                    left join rural tab6 on(tab3.idCliente = tab6.idCliente)
                                                                        where
                                                                                (find_loja=0 or tab.idLoja = find_loja) and
                                                                                (tab.idCliente = find_cliente) and
                                                                                               if(escolha=1, tab.emissao between di and df, 0=0) and
                                                                                               if(escolha=2, tab.vencimento between di and df, 0=0) and
                                                                                               if(escolha=3, tab.pagamento between date_format(di, '%Y%m%d') and date_format(df, '%Y%m%d'), 0=0);
end $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `conector_report_inventario`
--

DROP PROCEDURE IF EXISTS `conector_report_inventario`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='' */ $$
CREATE DEFINER=`root`@`localhost` PROCEDURE `conector_report_inventario`(
                                in tipo int,
                                in findloja int,
                                in findsetor int,
                                in findgrupo int,
                                in findcategoria int,
                                in findfornecedor int,
                                in conducao smallint,
                                in find_inventario double,
                                   find_produto varchar(45))
begin
select tab.idproduto as 'Codigo',
       tab.nome as 'Descricao',
       tab2.quantidade as 'Qtty Sistema',
       item.quantidadeEncontrada as 'Qtty Contada',
       
       if(item.quantidadeAtual<0 && item.quantidadeEncontrada>0,
         (item.quantidadeAtual-(-1*item.quantidadeEncontrada)),(item.quantidadeAtual-item.quantidadeEncontrada)) as 'Divergencia',
       tab3.priceVenda as 'Preco',
       truncate((tab2.quantidade*tab3.priceVenda),2) as 'Total',
       truncate(((item.quantidadeEncontrada*item.precoVenda)+(tab2.quantidade*tab3.priceVenda)),2) as 'Valor Divergente',
       item.contador as "No Contagem",
       item.contagem1 'Contagem-1',item.contagem2 'Contagem-2',item.contagem3 'Contagem-3',item.contagem4 'Contagem-4',item.contagem5 'Contagem-5',item.contagem6 'Contagem-6', item.idInventarioItem
        from produto tab
       inner join produtostore tab1 on (tab1.idproduto = tab.idproduto)
       inner join produtoestoques tab2 on (tab2.idproduto = tab.idproduto) and (tab2.idloja = tab1.idloja)
       inner join produtoprice tab3 on (tab3.idproduto = tab.idproduto) and (tab3.idloja = tab1.idloja)
       inner join inventarioItem item on(tab.idProduto = item.idProduto)
       inner join inventario inv on(item.idInventario = inv.idInventario and inv.idLoja = tab3.idLoja)
where  inv.idInventario = find_inventario
       and item.idInventario = find_inventario
       and tab1.idloja = findloja
       and tab2.idloja = findloja
       and (findsetor = 0 or tab.idsetor = findsetor )
       and (findgrupo = 0 or tab.idgrupo = findgrupo)
       and (findcategoria = 0 or tab.idcategoria = findcategoria)
       and (findfornecedor = 0 or tab.idFornecedor = findfornecedor);
end $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `conector_report_inv_divergencia`
--

DROP PROCEDURE IF EXISTS `conector_report_inv_divergencia`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='' */ $$
CREATE DEFINER=`root`@`localhost` PROCEDURE `conector_report_inv_divergencia`(
                                in tipo smallint,
                                in findloja int,
                                in findsetor int,
                                in findgrupo int,
                                in findcategoria int,
                                in findfornecedor int,
                                in conducao smallint,
                                in find_inventario double,
                                   find_produto varchar(45))
begin
select tab.idproduto as 'Codigo',
       tab.nome as 'Descricao',
       tab2.quantidade as 'Qtty Sistema',
       item.quantidadeEncontrada as 'Qtty Contada',
       
       if(item.quantidadeAtual<0 && item.quantidadeEncontrada>0,
         (item.quantidadeAtual-(-1*item.quantidadeEncontrada)),(item.quantidadeAtual-item.quantidadeEncontrada)) as 'Divergencia',
       tab3.priceVenda as 'Preco',
       truncate((tab2.quantidade*tab3.priceVenda),2) as 'Total',
       truncate(((item.quantidadeEncontrada*item.precoVenda)+(tab2.quantidade*tab3.priceVenda)),2) as 'Valor Divergente',
       item.contador as "No Contagem",
       item.contagem1 'Contagem-1',item.contagem2 'Contagem-2',item.contagem3 'Contagem-3',item.contagem4 'Contagem-4',item.contagem5 'Contagem-5',item.contagem6 'Contagem-6', item.idInventarioItem
        from produto tab
       inner join produtostore tab1 on (tab1.idproduto = tab.idproduto)
       inner join produtoestoques tab2 on (tab2.idproduto = tab.idproduto) and (tab2.idloja = tab1.idloja)
       inner join produtoprice tab3 on (tab3.idproduto = tab.idproduto) and (tab3.idloja = tab1.idloja)
       inner join inventarioItem item on(tab.idProduto = item.idProduto)
       inner join inventario inv on(item.idInventario = inv.idInventario and inv.idLoja = tab3.idLoja)
where  inv.idInventario = find_inventario
       and item.idInventario = find_inventario
       and tab1.idloja = findloja
       and tab2.idloja = findloja
       and (findsetor = 0 or tab.idsetor = findsetor )
       and (findgrupo = 0 or tab.idgrupo = findgrupo)
       and (findcategoria = 0 or tab.idcategoria = findcategoria)
       and (findfornecedor = 0 or tab.idFornecedor = findfornecedor);
end $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `conector_report_itemEntrada`
--

DROP PROCEDURE IF EXISTS `conector_report_itemEntrada`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='' */ $$
CREATE DEFINER=`master`@`localhost` PROCEDURE `conector_report_itemEntrada`( store double, find varchar(45), di date, df date)
begin
select
       ent.Nr_nota as Nota,
       cast(tab.IdProduto as char) as idProduto,
       tab.Nome,
       cast(tab1.unidade as char) as unidade,
       item.quantidade,
       item.CustoNota,
       item.priceVenda,
       cast(date_format(ent.entrada, '%d/%m/%Y') as char) As entrada
             from
                 produto tab
             inner join unidadeMedida tab1 on(tab.idunidade = tab1.idunidadeMedida)
             inner join produtoEmbalagem tab2 on(tab.idproduto = tab2.idproduto)
             inner join produtoStore tab3 on(tab.idproduto = tab3.idproduto)
             inner join produtoPrice tab4 on(tab.idproduto = tab4.idproduto)
             inner join entradaItem item on(tab.idProduto = item.idProduto)
             inner join entrada ent on(item.idEntrada = ent.idEntrada)
where
             tab2.defaultVenda = "s" and
             tab3.Idloja = store and
             tab4.Idloja = store and
             ent.idLoja = store and
             (item.idEntrada = find or find=0)and
             item.FlagRecebe=1 and
             ent.entrada between di and df;
end $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `conector_report_listProduto`
--

DROP PROCEDURE IF EXISTS `conector_report_listProduto`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='' */ $$
CREATE DEFINER=`master`@`localhost` PROCEDURE `conector_report_listProduto`(in find double,
in findIdSetor int, in findIdGrupo int, findIdCategoria int, in findIdFornecedor double)
begin
select cast(tab.idProduto as char) as IdProduto,
       tab.nome,
       cast(tab1.unidade as char) as Unidade,
       cast(tab5.quantidade as char) as Quantidade,
       cast(tab2.barra as char) as Barra,
       cast(tab4.priceVenda as char) as PrecoVenda
         from produto tab
             inner join unidadeMedida tab1 on(tab.idunidade = tab1.idunidadeMedida)
             inner join produtoEmbalagem tab2 on(tab.idproduto = tab2.idproduto)
             inner join produtoStore tab3 on(tab.idproduto = tab3.idproduto)
             inner join produtoPrice tab4 on(tab.idproduto = tab4.idproduto)
             inner join produtoEstoques tab5 on(tab.idproduto = tab5.idproduto)
             inner join setor on(tab.idSetor = setor.idSetor)
 where tab2.defaultVenda = "s" and
       tab4.idloja = tab5.idloja and
       tab4.idloja = tab3.idloja and
       tab4.idloja = find and
      (findIdSetor = 0 or tab.idSetor = findIdSetor) and
      (findIdGrupo = 0 or tab.idGrupo = findIdGrupo) and
      (findIdCategoria = 0 or tab.idCategoria = findIdCategoria) and
       (findIdFornecedor = 0 or tab.idFornecedor = findIdFornecedor);

end $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `conector_report_pagar`
--

DROP PROCEDURE IF EXISTS `conector_report_pagar`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='' */ $$
CREATE DEFINER=`master`@`localhost` PROCEDURE `conector_report_pagar`(
                                         in find varchar(1),
                                         in di date,
                                         in df date,
                                         in store double,
                                         in pessoa double,
                                         in escolha smallint,
                                         in paga smallint)
begin


    select
      cast(tab.loja as char) as Loja,
      cast(date_format(tab.emissao, '%d/%m/%Y') as char) as Emissao,
      cast(date_format(tab.vencimento,'%d/%m/%Y') as char) as Vencimento,
      cast(tab.nota as char) as Nota,
      cast(ifnull(tab.duplicata,"") as char) as Dup,
      cast(tab.codigo as char) as codigo,
      cast(IFNULL(if(tab1.idTipoPessoa = 1 && tab.typePepleo="c", tab2.nome,
                    if(tab1.idTipoPessoa = 2 && tab.typePepleo="f", tab3.razao,
                    if(tab1.idTipoPessoa = 3 && tab.typePepleo="c", tab4.nome,
                    tab5.razao))),"DESCONHECIDO") as char) as Descricao,
                    tab.valor as valor,
                    cast(concat(tab.parcela) as char) as Parcela,
                    cast(ifnull(tab.historico,'') as char) as historico,
                    cast(date_format(ifnull(tab.pagamento,'00000000'),'%d/%m/%Y') as char) as dataPgto,
                    tab.valorPago as valorPago,
                    cast(tab.valorNota as char) as valorNota
        from pagar tab
                left join cliente tab1 on(tab.codigo = tab1.idCliente)
                left join fisica tab2 on(tab.codigo = tab2.idCliente)
                left join juridica tab3 on(tab.codigo = tab3.idCliente)
                left join rural tab4 on(tab.codigo = tab4.idCliente)
                left join transportadora tab5 on(tab.codigo = tab5.IdTransportadora)
                inner join loja tab6 on(tab.Loja = tab6.idLoja)
                        where
                            (store=0 or tab.loja = store) and
                            (pessoa=0 or tab.codigo = pessoa) and
                            if(escolha=1, tab.emissao between di and df, 0=0) and
                            if(escolha=2, tab.vencimento between di and df, 0=0) and
                            if(escolha=3, tab.pagamento between di and df, 0=0) and
                            if(escolha=4, tab.dataEntrada between di and df, 0=0) and
                            (paga=3 or tab.flagPagamento=paga)and
                            (find="o" or tab.typePepleo = find);
end $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `conector_report_pessoa`
--

DROP PROCEDURE IF EXISTS `conector_report_pessoa`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='' */ $$
CREATE DEFINER=`master`@`localhost` PROCEDURE `conector_report_pessoa`(
                                            in tipo int,
                                            in find_cliente varchar(45),
                                            in tipo_cliente char(5),
                                            in find_atividade int,
                                            in di date,
                                            in df date,
                                            in niver date,
                                            in escolha smallint
                                        )
BEGIN
    select
    tab.idCliente,
    case tab.idtipoPessoa when 1 then ifnull(tab1.nome,"")
                          when 2 then ifnull(tab2.razao,"")
                          when 3 then ifnull(tab3.nome,"") end Nome_Razao,
    case tab.idtipoPessoa when 1 then ifnull(tab1.cpf,"")
                          when 2 then ifnull(tab2.cnpj,"")
                          when 3 then ifnull(tab3.cpf_1,"") end CPF_CNPJ,
    case tab.idtipoPessoa when 1 then ifnull(tab1.identidade,"")
                          when 2 then ifnull(tab2.ie,"")
                          when 3 then ifnull(tab3.identidade,tab.dataEmissao) end Ie_Identidade,
    case tab.idtipoPessoa when 1 then ifnull(tab1.nascimento,tab.dataEmissao)
                          when 2 then ifnull(tab2.dataAbertura,tab.dataEmissao)
                          when 3 then ifnull(tab3.nascimento,"") end Nascimento_Abertura,
    case tab.idtipoPessoa when 1 then ifnull(tab1.idsexo,"0")
                         when 2 then "Inexistente"
                         when 3 then ifnull(tab3.idSexo,"0") end Chave_Sexo,
    case tab.idtipoPessoa when 1 then ifnull(tab4.descricao,"")
                         when 2 then "Inexistente"
                         when 3 then ifnull(tab4.descricao,"") end Sexo,
    case tab.idtipoPessoa when 1 then ifnull(tab1.idcivil,"0")
                         when 2 then "Inexistente"
                         when 3 then ifnull(tab3.idCivil,"0") end Chave_Estado_Civil,
    case tab.idtipoPessoa when 1 then ifnull(tab5.descricao,"")
                         when 2 then "Inexistente"
                         when 3 then ifnull(tab5.descricao,"") end Estado_Civil,
  tab.idloja as chave_loja,
  tab.status,
  loja.razao as empresa,
	ifnull(tab2.fantasia,"") as "fantasia",
  tab.uf,
	ifnull(tab2.idTipoFornecedor,0) as "tipoFornecedor",
	tab.idtipoPessoa,
	tab.idusuario,
	tab.idatividade,
	tab.observacao,
	tab.dataEmissao,
	tab.dataAlteracao,
	tab.idestado as chave_estado,
	ifnull(tab3.ie,0) as "tab3_ie",
  ifnull(tab7.`visita`, "") as "visita",
  ifnull(tab7.`analiseCompra`, "") as "analiseCompra",
  ifnull(tab7.`minVolume`, "") as "minVolume",
  ifnull(tab7.`valueBay`, "") as "valueBay",
  ifnull(tab7.`comprador`, "") as "comprador",
  ifnull(tab7.`prazoEntrega`, "") as "prazoEntrega",
  ifnull(tab7.`formaPgto`, "") as "formaPgto",
  ifnull(tab7.`banco`, "") as "banco",
  ifnull(tab7.`agencia`, "") as "agencia",
  ifnull(tab7.`contaCorrente`, "") as "contaCorrente",
  ifnull(tab6.`typeTroca`, "") as "typeTroca",
  ifnull(tab6.`typeFrete`, "") as "typeFrete",
  ifnull(tab6.`porcentagemFrete`, "") as "porcentagemFrete",
  ifnull(tab6.`lastVisita`, "") as "lastVisita",
  ifnull(tab6.`nextVisita`, "") as "nextVisita",
  ifnull(tab6.`devPagar`, "") as "devPagar",
  ifnull(tab6.`bloquearEntregaFiscal`, "") as "bloqueaEntregaFiscal",
  ifnull(tab6.`representante`, "") as "representante",
  ifnull(tab6.`idoperacao`, "") as "operacao",
  ifnull(tab6.`forceCompra`, "") as "forceCompra",
  ifnull(tab6.`nameSugestao`, "") as "nameSugestacao",
  ifnull(tab6.`passwdSugestao`, "") as "passwdSugestao",
  ifnull(tab6.`observacao`, "") as "observacao_for",
  ifnull(tab8.`forceIcms`, "") as "forceIcms",
  ifnull(tab8.`forcePis`, "") as "forcePis",
  ifnull(tab8.`forceCofins`, "") as "forceCofins",
  ifnull(tab8.`descatadaSt`, "") as "descataSt",
  ifnull(tab8.`typeGrade`, "") as "typeGrade",
  ifnull(tab6.idInformacao,"") as "idInformacao",
  ifnull(tab7.idComercial,"") as "idComercial",
  ifnull(tab8.idFiscal,"") as "idFiscal",
  tab.idspedMunicipio,
  ifnull(tab9.descricao,"") as "descricao",
  ifnull(tab6.typeFornecedor,1) as "typeFornecedor",
  pais.idPais,
  pais.nome,
  pais.codReceita,
  ifnull(email.idemail,"") as "idemail",
  ifnull(email.mail,"") as "mail"
from
	cliente tab
  inner join loja on(tab.idloja = loja.idloja)
  inner join pais on(tab.idpais = pais.idPais)
	left join fisica tab1 on(tab.idcliente = tab1.idcliente)
	left join juridica tab2 on(tab.idcliente = tab2.idcliente)
	left join (select rural.idcliente,rural.cpf as cpf_1,rural.nome,rural.nascimento,rural.ie,rural.idsexo,rural.identidade,rural.idcivil,sexo.descricao as sexo1,civil.descricao as civil1 from rural
                inner join sexo on(rural.idsexo = sexo.idsexo)
                inner join civil on(rural.idcivil = civil.idcivil)) as tab3
        		on(tab.idcliente = tab3.idcliente)
	left join sexo tab4 on(tab1.idsexo = tab4.idsexo)
	left join civil tab5 on(tab1.idcivil = tab5.idcivil)
  left join paramentro_fornecedor_informacao tab6 on(tab.idCliente = tab6.idCliente)
  left join paramentro_fornecedor_comercial tab7 on(tab.idCliente = tab7.idCliente)
  left join paramentro_fornecedor_fiscal tab8 on(tab.idCliente = tab8.idCliente)
  left join paramentro_faturamento tab9 on(tab6.idoperacao = tab9.idParamentro)
  left join email on(tab.idCliente = email.idCliente)
where
    (
     tab2.cnpj is not null or
     tab1.cpf  is not null or
     tab3.cpf_1 is not null
    ) and tab.idcliente=find_cliente;
END $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `conector_report_pessoa1`
--

DROP PROCEDURE IF EXISTS `conector_report_pessoa1`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='' */ $$
CREATE DEFINER=`master`@`localhost` PROCEDURE `conector_report_pessoa1`(
                                            in tipo int,
                                            in find_cliente varchar(45),
                                            in tipo_cliente char(5),
                                            in find_atividade int,
                                            in di date,
                                            in df date,
                                            in niver date,
                                            in escolha smallint, in coop smallint, in pref smallint
                                        )
BEGIN

case tipo
    when 1 then
select
	tab.idcliente as chave,
    case tab.idtipoPessoa when 1 then tab1.nome
                          when 2 then tab2.razao
                          when 3 then tab3.nome end Nome_Razao,
    tab.uf,
    case tab.idtipoPessoa when 1 then date_format(tab1.nascimento, '%d/%m/%Y')
                         when 2 then date_format(tab2.dataAbertura, '%d/%m/%Y')
                         when 3 then date_format(tab3.nascimento, '%d/%m/%Y') end Nascimento_Abertura,
    tab.status,
    case tab.idtipoPessoa when 1 then tab1.cpf
                          when 2 then tab2.cnpj
                          when 3 then tab3.cpf_1 end CPF_CNPJ,
    case tab.idtipoPessoa when 1 then tab1.identidade
                          when 2 then tab2.ie
                          when 3 then tab3.identidade end Ie_Identidade,
  date_format(tab.dataEmissao, '%d/%m/%Y') as Inclusao,
  tab.idloja as chave_loja,
	tab.idtipoPessoa,
  tp.descricao,
  tab.idatividade,
        "" as bairro,
        "" as complemento,
        "" as municipio,
        "" as estado,
        "" as numero,
        "" as cep,
        "" as idendereco,
        "" as sequencia,
        "" as idcepBairro,
        "" as idenderecoType,
        "" as logradouro,
        "" as idCepBairro,
        "" as codigoUf, "" as coope, "" as "limiteConvenio", "" as prefe, "" as limiteCheque

from
	cliente tab
  inner join tipoPessoa tp on(tab.idTipoPessoa = tp.idTipoPessoa)
  inner join loja on(tab.idloja = loja.idloja)
	left join fisica tab1 on(tab.idcliente = tab1.idcliente)
	left join juridica tab2 on(tab.idcliente = tab2.idcliente)
	left join (select rural.idcliente,rural.cpf as cpf_1,rural.nome,rural.nascimento,rural.ie,rural.idsexo,rural.identidade,rural.idcivil,sexo.descricao as sexo1,civil.descricao as civil1 from rural
                inner join sexo on(rural.idsexo = sexo.idsexo)
                inner join civil on(rural.idcivil = civil.idcivil)) as tab3
        		on(tab.idcliente = tab3.idcliente)
	left join sexo tab4 on(tab1.idsexo = tab4.idsexo)
	left join civil tab5 on(tab1.idcivil = tab5.idcivil)
where
    (
     tab2.cnpj is not null or
     tab1.cpf  is not null or
     tab3.cpf_1 is not null
    ) and (find_cliente='0' or tab.idcliente=find_cliente)  AND if(tipo_cliente = 'x', 1=1, tab.idtipoPessoa=tipo_cliente) and tab.idatividade in(find_atividade,7) order by 1;
    when 2 then
select
	tab.idcliente as chave,
    case tab.idtipoPessoa when 1 then tab1.nome
                          when 2 then tab2.razao
                          when 3 then tab3.nome end Nome_Razao,
    tab.uf,
    case tab.idtipoPessoa when 1 then date_format(tab1.nascimento, '%d/%m/%Y')
                         when 2 then date_format(tab2.dataAbertura, '%d/%m/%Y')
                         when 3 then date_format(tab3.nascimento, '%d/%m/%Y') end Nascimento_Abertura,
    tab.status,
    case tab.idtipoPessoa when 1 then tab1.cpf
                          when 2 then tab2.cnpj
                          when 3 then tab3.cpf_1 end CPF_CNPJ,
    case tab.idtipoPessoa when 1 then tab1.identidade
                          when 2 then tab2.ie
                          when 3 then tab3.identidade end Ie_Identidade,
        date_format(tab.dataEmissao, '%d/%m/%Y') as Inclusao,
        tab.idloja as chave_loja,
      	tab.idtipoPessoa,
        tp.descricao,
        tab.idatividade,
        ifnull(tab6.bairro,"") as bairro,
        ifnull(tab6.complemento,"") as complemento,
        ifnull(tab6.municipio,"") as municipio,
        ifnull(tab6.estado,"") as estado,
        ifnull(tab6.numero,"") as numero,
        ifnull(tab6.cep,"") as cep,
        ifnull(tab6.idendereco,"") as idendereco,
        ifnull(tab6.sequencia,"") as sequencia,
        ifnull(tab6.idenderecoType,"") as idenderecoType,
        ifnull(tab6.logradouro,"") as logradouro,
        ifnull(tab6.idCepBairro,"") as idCepBairro,
        if(coop=1,"COOPERADO","NAO COOPERADO") as "coope",
        tab7.limiteConvenio,
        if(pref=1,"PREFERENCIAL","NÃO PREFERENCIAL") as "prefe", tab7.limiteCheque

from
	cliente tab
  inner join tipoPessoa tp on(tab.idTipoPessoa = tp.idTipoPessoa)
  inner join loja on(tab.idloja = loja.idloja)
	left join fisica tab1 on(tab.idcliente = tab1.idcliente)
	left join juridica tab2 on(tab.idcliente = tab2.idcliente)
	left join (select rural.idcliente,rural.cpf as cpf_1,rural.nome,rural.nascimento,rural.ie,rural.idsexo,rural.identidade,rural.idcivil,sexo.descricao as sexo1,civil.descricao as civil1 from rural
                inner join sexo on(rural.idsexo = sexo.idsexo)
                inner join civil on(rural.idcivil = civil.idcivil)) as tab3
        		on(tab.idcliente = tab3.idcliente)
	left join sexo tab4 on(tab1.idsexo = tab4.idsexo)
	left join civil tab5 on(tab1.idcivil = tab5.idcivil)
  left join (select endereco.idcliente,
        endereco.bairro,
        endereco.complemento,
        endereco.municipio,
        endereco.estado,
        endereco.numero,
        endereco.cep,
        endereco.idendereco,
        endereco.sequencia,
        endereco.idcepBairro,
        endereco.idenderecoType,
        endereco.logradouro
from endereco
  inner join cliente on(endereco.idcliente = cliente.idcliente)
  inner join estado tab on(endereco.estado = tab.uf)
    where  endereco.sequencia in(1,2) limit 1) tab6 on(tab.idCliente = tab6.idCliente)
    left join clienteRisco tab7 on(tab.idCliente = tab7.idCliente)
where
    (
     tab2.cnpj is not null or
     tab1.cpf  is not null or
     tab3.cpf_1 is not null
    ) and (find_cliente='0' or tab.idcliente=find_cliente)  AND if(tipo_cliente = 'x', 1=1, tab.idtipoPessoa=tipo_cliente) and tab.idatividade in(find_atividade,7)  and
      (pref = 0 or tab7.preferencial = 1) and (coop=0 or tab7.cooperado = coop) order by 1;
end case;
END $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `conector_report_produto`
--

DROP PROCEDURE IF EXISTS `conector_report_produto`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='' */ $$
CREATE DEFINER=`root`@`localhost` PROCEDURE `conector_report_produto`(
                                                                         tipo int,
                                                                         prd varchar(45),
                                                                         store double,
                                                                         pessoa double,
                                                                         find_setor int,
                                                                         find_grupo int,
                                                                         find_categoria int,
                                                                         findDataInicial date,
                                                                         findDataFinal date,
                                                                         tipologia int,
                                                                         somente_negativo smallint(6),
                                                                         somente_zerados smallint(6)
                                        )
begin

CASE tipo
  when 1 then

    select
       tab.idProduto,
       tab.nome,
       tab1.unidade,
       tab5.quantidade,
       tab2.barra,
       truncate(tab4.priceVenda,2) as "priceVenda",
       truncate(tab4.custoLiquido,2) as "custoLiquido",
       date_format(tab.dataInclusao, '%d/%m/%Y') as "dataInclusao",
       date_format(tab.dataAlteracao, '%d/%m/%Y') as "dataAlteracao"
         from produto tab
             inner join unidadeMedida tab1 on(tab.idunidade = tab1.idunidadeMedida)
             inner join produtoEmbalagem tab2 on(tab.idproduto = tab2.idproduto)
             inner join produtoStore tab3 on(tab.idproduto = tab3.idproduto)
             inner join produtoPrice tab4 on(tab.idproduto = tab4.idproduto)
             inner join produtoEstoques tab5 on(tab.idproduto = tab5.idproduto)
             inner join setor on(tab.idSetor = setor.idSetor)
 where tab2.defaultVenda = "s" and
       tab4.idloja = tab5.idloja and
       tab4.idloja = tab3.idloja and
      (store = 0 or tab4.idloja = store) and
      (prd = 0 or tab.idProduto = prd) and
      (find_setor = 0 or tab.idSetor = find_setor) and
      (find_grupo = 0 or tab.idGrupo = find_grupo) and
      (find_categoria = 0 or tab.idCategoria = find_categoria) and
      (pessoa = 0 or tab.idFornecedor = pessoa) order by 1 asc;

    when 2 then
  select
       tab.idProduto,
       tab.nome,
       tab1.unidade,
       avg(tab5.quantidade) as "quantidade",
       tab2.barra,
       truncate(tab4.priceVenda,2) as "priceVenda",
       truncate(tab4.custoLiquido,2) as "custoLiquido",
       date_format(tab.dataInclusao, '%d/%m/%Y') as "dataInclusao",
       date_format(tab.dataAlteracao, '%d/%m/%Y') as "dataAlteracao"
         from produto tab
             inner join unidadeMedida tab1 on(tab.idunidade = tab1.idunidadeMedida)
             inner join produtoEmbalagem tab2 on(tab.idproduto = tab2.idproduto)
             inner join produtoStore tab3 on(tab.idproduto = tab3.idproduto)
             inner join produtoPrice tab4 on(tab.idproduto = tab4.idproduto)
             inner join produtoExtrato tab5 on(tab.idproduto = tab5.idproduto)
             inner join typeMovimentacao tab6 on(tab5.idTypeMovimentacao=tab6.idTypeMovimentacao)
             inner join setor on(tab.idSetor = setor.idSetor)
 where tab2.defaultVenda = "s" and
       tab4.idloja = tab5.idloja and
       tab4.idloja = tab3.idloja and
      (store = 0 or tab4.idloja = store) and
      (prd = 0 or tab.idProduto = prd) and
      (find_setor = 0 or tab.idSetor = find_setor) and
      (find_grupo = 0 or tab.idGrupo = find_grupo) and
      (find_categoria = 0 or tab.idCategoria = find_categoria) and
      (pessoa = 0 or tab.idFornecedor = pessoa) and (tab6.idTypeMovimentacao = 3) order by 1 asc;

    when 3 then
  select
       ifnull(tab.idProduto,0) as "idProduto",
       ifnull(tab.nome,"Sem Informação/Movimentação") as "nome",
       ifnull(tab1.unidade,"UN") as "unidade",
       ifnull(avg(tab5.quantidade),0) as "quantidade",
       ifnull(tab7.quantidade,0) as "barra",
       truncate(tab4.priceVenda,2) as "priceVenda",
       truncate(tab4.custoLiquido,2) as "custoLiquido",
       date_format(tab.dataInclusao, '%d/%m/%Y') as "dataInclusao",
       date_format(tab.dataAlteracao, '%d/%m/%Y') as "dataAlteracao"
         from produto tab
             inner join unidadeMedida tab1 on(tab.idunidade = tab1.idunidadeMedida)
             inner join produtoEmbalagem tab2 on(tab.idproduto = tab2.idproduto)
             inner join produtoStore tab3 on(tab.idproduto = tab3.idproduto)
             inner join produtoPrice tab4 on(tab.idproduto = tab4.idproduto)
             inner join produtoExtrato tab5 on(tab.idproduto = tab5.idproduto)
             inner join produtoEstoques tab7 on(tab.idproduto = tab7.idproduto)
             inner join typeMovimentacao tab6 on(tab5.idTypeMovimentacao=tab6.idTypeMovimentacao and tab6.idTypeMovimentacao = 3)
             inner join setor on(tab.idSetor = setor.idSetor)
 where tab2.defaultVenda = "s" and
       tab4.idloja = tab5.idloja and
       tab4.idloja = tab3.idloja and
      (store = 0 or tab4.idloja = store) and
      (prd = 0 or tab.idProduto = prd) and
      (find_setor = 0 or tab.idSetor = find_setor) and
      (find_grupo = 0 or tab.idGrupo = find_grupo) and
      (find_categoria = 0 or tab.idCategoria = find_categoria) and
      (pessoa = 0 or tab.idFornecedor = pessoa) order by 1 asc;
end case;
end $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `conector_report_reserva`
--

DROP PROCEDURE IF EXISTS `conector_report_reserva`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='' */ $$
CREATE DEFINER=`master`@`localhost` PROCEDURE `conector_report_reserva`(in find_loja double, in find_pedido double)
begin
      declare Varentrada numeric(15,3);
      declare VarPartida numeric(15,3);
      declare VarParcela integer;
      declare VarValorParcela numeric(15,3);

select idCliente from pedido where idPedido=find_pedido into @Cliente;
SELECT entrada,
            numeroParcelas,
            referencia,round((referencia+encargos)/numeroParcelas,3)
                                                    FROM pedidofinanceiro
                                                            where idPedido=find_pedido
                                                                             into VarEntrada, VarParcela, VarPartida, VarValorParcela;
                    if(VarPartida is null)then set VarPartida=0; end if;
                    if(VarEntrada is null)then set VarEntrada=0; end if;
                    if(VarParcela is null)then set VarParcela=0; end if;
select
                    cast(reserva.idPedido as char) as cod_reserva,
                    cast(reserva.idCliente as char) as cod_cliente,
                    cast(reserva.Nome_Cliente as char) as nome_cliente,
                    cast(item.idProduto as char) as codigo,
                    cast(tab.nome as char) as nome,
                    cast(tab1.unidade as char) as un,
                    item.quantidade as qtty,
                    item.price,
                    round((item.priceLiquido),3) as Total,
                    cast(item.idFuncionario as char) as cod_func,
                    cast(reserva.nome as char) as funcionario,
                    cast(round(tab5.quantidade,3) as char) as estoque,
                    cast(round(reserva.total,3) as char) as reservas,
                    cast(round((tab5.quantidade - reserva.total),3) as char) as Disponivel,
                    cast(item.sequencial as char) as seq,
                    cast(tab3.idloja as char) as store,
                    cast(tab2.barra as char) cod_barra,
                    cast(round(item.valorDiscount,2) as char) as Desconto,
                    cast(ifnull(round((item.valorDiscount/(item.price*item.quantidade))*100),0) as char) as Porcetagem,
                    cast(ifnull(round(item.price*item.quantidade,3),0) as char) as Bruto,
                    cast(case item.situacao when 1 then "INCLUIDO" WHEN 2 THEN "TRAVADO" WHEN 3 THEN "RESERVA" WHEN 4 THEN "FUTURA"
                    WHEN 5 THEN "VENDIDO" WHEN 6 THEN "CANCELADA" WHEN 7 THEN "EXPIRADA" WHEN 8 THEN "RECEITA" END as char) as situacao,
                    cast(case reserva.final when 0 THEN "ABERTO" when 1 then "EMITIDO" WHEN 2 THEN "FATURADO" WHEN 3 THEN "FISCAL" WHEN 4 THEN "FINALIZADO"
                    WHEN 5 THEN "CANCELADO" WHEN 6 THEN "LEITURA"  END as char) as status_pedido,
                    cast(date_format(reserva.emissao, '%d/%m/%Y') as char) as dt_emissao,
                    cast(date_format(reserva.expiracao, '%d/%m/%Y') as char) as dt_exp,
                    cast(reserva.razao as char) as Razao,
                    cast(reserva.TelefoneResidencia as char) as Telefone,
                    cast(reserva.EnderecoRes as char) as  EnderecoRes,
                    cast(reserva.estadoRes as Char) as EstadoRes,
                    cast(reserva.EnderecoEnt as char) as  EnderecoEnt,
                    cast(reserva.estadoEnt as Char) as EstadoEnt,
                    cast(reserva.cepEnt as Char) as cepEnt,
                    cast(reserva.cepRes as Char) as cepRes,
                    cast(ifnull(reserva.CPF_CGC,'Nao Informado') as char) as CPF_CGC,
                    cast(reserva.idMetodo as char) as Cod_Metodo,
                    cast(reserva.idFinalizadora as char) as Cod_Finalizadora,
                    cast(reserva.Metodo_razao as Char) as Metodo_razao,
                    cast(reserva.Finalizadora_razao as Char) as Finalizadora_razao,
                    VarEntrada as Entrada, VarPartida as PontoPartida, VarParcela as Parcelamento, ifnull(VarValorParcela,"0") as ValorParcela,
                    cast(reserva.cnpj as Char) as cnpj,
                    cast(reserva.descricao as Char) as paramentro_descricao

             from
                        produto tab
             inner join unidadeMedida tab1 on(tab.idunidade = tab1.idunidadeMedida)
             inner join produtoEmbalagem tab2 on(tab.idproduto = tab2.idproduto)
             inner join produtoStore tab3 on(tab.idproduto = tab3.idproduto)
             inner join produtoPrice tab4 on(tab.idproduto = tab4.idproduto)
             inner join produtoEstoques tab5 on(tab.idproduto = tab5.idproduto)
             left join  pedidoitens item on(tab.idProduto = item.idProduto)
             left join  (select tab.idProduto,
                                round(sum(tab.quantidade),3) as total,
                                tab1.final,
                                tab2.nome,
                                tab1.emissao,
                                tab1.expiracao,
                                tab3.idCliente,
                                case tab3.idTipoPessoa when 1 then
                                                                tab4.nome
                                                       when 2 then
                                                                tab5.razao
                                                       when 3 then
                                                                tab6.nome
                                                                else "Desconhecido" end as Nome_Cliente,
                                case tab3.idTipoPessoa when 1 then
                                                                tab4.cpf
                                                       when 2 then
                                                                tab5.cnpj
                                                       when 3 then
                                                                tab6.cpf
                                                                else "Desconhecido" end as CPF_CGC,
                                                                tab1.idPedido,
                                                                store.razao,
                                                                ifnull(foneResidente.TelefoneResidencia,"(000)-0000-0000") as TelefoneResidencia,
                                                                ifnull(enderecoResidente.enderecoRes,"Nao Informado") as EnderecoRes,
                                                                ifnull(enderecoResidente.estadoRes,"0") as EstadoRes,
                                                                ifnull(enderecoEntrega.enderecoRes,"Nao Informado") as EnderecoEnt,
                                                                ifnull(enderecoEntrega.estadoRes,"0") as EstadoEnt,
                                                                ifnull(enderecoEntrega.cep,"00.000-000") as cepEnt,
                                                                ifnull(enderecoResidente.cep,"00.000-000") as cepRes,
                                                                indice.idMetodo,
                                                                indice.descricao Metodo_razao,
                                                                fin.IdFinalizadora,
                                                                fin.descricao as Finalizadora_razao,
                                                                store.cnpj,
                                                                paramentro.descricao
                                          from pedidoItens tab
                                                inner join pedido tab1 on(tab.idPedido = tab1.idPedido and tab.idLoja  = tab1.idloja)
                                                inner join metodo indice on(tab1.idMetodo = indice.idMetodo)
                                                left join finalizadora fin on(indice.idFinalizadora = fin.idFinalizadora)
                                                inner join funcionario tab2 on(tab1.idFuncionario = tab2.idFuncionario)
                                                inner join cliente tab3 on(tab1.idCliente = tab3.idCliente)
                                                inner join loja store on(tab1.idLoja =store.idLoja)
                                                inner join paramentro_faturamento paramentro on (tab1.idparamentro = paramentro.idparamentro)
                                                left join fisica tab4 on(tab1.idCliente = tab4.idCliente)
                                                left join juridica tab5 on(tab1.idCliente = tab5.idCliente)
                                                left join rural tab6 on(tab6.idCliente = tab6.idCliente)
                                                left join (select max(idFone), idcliente, concat(mid(ddd,2,4),'-',telefone) as TelefoneResidencia , idFoneType from fone where idCliente = @Cliente and idFoneType = 3 group by 2) as foneResidente on(tab1.idCliente = foneResidente.idCliente)
                                                left join (select idCliente, max(idEndereco), cep, Concat(municipio," UF: ",estado) as EstadoRes, concat(logradouro," N.o: ",numero) as EnderecoRes from endereco where idCliente=@Cliente and idEnderecoType=2 group by 1) as enderecoResidente on (tab1.idCliente = enderecoResidente.idCliente)
                                                left join (select idCliente, max(idEndereco), cep, Concat(municipio," UF: ",estado) as EstadoRes, concat(logradouro," N.o: ",numero) as EnderecoRes from endereco where idCliente=@Cliente and idEnderecoType=4 group by 1) as enderecoEntrega on (tab1.idCliente = enderecoResidente.idCliente)

                                                        where  tab.idLoja=find_loja and tab1.final in(0,1,2,3,4) and tab1.emissao <= tab1.expiracao and tab1.idPedido=find_pedido group by 1)
                         reserva on(tab.idProduto = reserva.idProduto)
   where
       tab2.defaultVenda = "s" and
       tab4.idloja = tab5.idloja and
       tab4.idloja = tab3.idloja and
       tab4.idloja = find_loja and
       item.idPedido = find_pedido
       order by item.sequencial;
end $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `conector_report_resumoEstoque`
--

DROP PROCEDURE IF EXISTS `conector_report_resumoEstoque`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='' */ $$
CREATE DEFINER=`master`@`localhost` PROCEDURE `conector_report_resumoEstoque`(in findLoja int)
begin
select     cast(setor.idSetor as char) as idSetor,
           setor.descricao,
           sum(tab1.quantidade) as total,
           round(sum(tab2.custoLiquido * tab1.quantidade),3) as CustoLiquido,
           round(sum(tab2.PriceVenda * tab1.quantidade),3) as PriceVenda,
           cast(tab1.IdLoja as char) as store
           from produto tab
              inner join setor on(tab.idSetor = setor.idSetor)
              inner join produtoEstoques tab1 on(tab.idProduto = tab1.idProduto)
              inner join produtoPrice tab2 on(tab.idProduto = tab2.idProduto and tab1.idLoja=tab2.idLoja)
              inner join produtoStore tab3 on(tab.idProduto = tab3.IdProduto  and tab1.idLoja=tab3.idLoja)
                                      where
                                          tab.status <> 1 and
                                          (findLoja=0 or tab2.idLoja=findLoja) AND
                                          (findLoja=0 or tab3.idLoja=findLoja) AND
                                          (findLoja=0 or tab1.idLoja=findLoja)
                                                                                       group by 1,2,6;
                                                                                       
end $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `conector_report_tesouraria`
--

DROP PROCEDURE IF EXISTS `conector_report_tesouraria`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='' */ $$
CREATE DEFINER=`root`@`%` PROCEDURE `conector_report_tesouraria`( in dateMov date, in store double, in pessoa int(11), in pdv int(11), in caixa int(11), in cxCorrente double, in typeValue smallint)
begin
  DECLARE done INT DEFAULT FALSE;
  declare VarLoja double default 0;
  declare VarData date default 0;
  declare VarFuncionario int(11) default 0;
  declare VarTerminal int(11) default 0;
  declare VarFinalizadora int(11) default 0;
  declare VarVenda int(11) default 0;
  declare VarDescricao varchar(45);
  declare VarApurado decimal(15,3);
  declare VarInformado decimal(15,3);
  declare VarQuebra decimal(15,3);
  declare VarCount int(11) default 0;
  DECLARE VarTipo varchar(3);
  declare varSinal smallint default 0;
  declare VarTotal decimal(15,3) default 0;
    select  count(*),
            ifnull(sum(valorTotal),0)
            from produtoMovimento tab
                where tab.data=dateMov  and tab.idLoja=store and tab.finalizadora=1 into @count,@dinheiro;
    select  count(*),
            ifnull(sum(valorTotal),0)
            from produtoMovimento tab
                where tab.data=dateMov  and tab.idLoja=store and tab.finalizadora=2 into @count,@cheque;
    select  count(*),
            ifnull(sum(valorTotal),0)
            from produtoMovimento tab
                where tab.data=dateMov  and tab.idLoja=store and tab.finalizadora=3 into @count,@crediario;
    select  count(*),
            ifnull(sum(valorTotal),0)
            from produtoMovimento tab
                where tab.data=dateMov  and tab.idLoja=store and tab.finalizadora=4 into @count,@convenio;
    select  count(*),
            ifnull(sum(valorTotal),0)
            from produtoMovimento tab
                where tab.data=dateMov  and tab.idLoja=store and tab.finalizadora=5 into @count,@ccredito;
    select  count(*),
            ifnull(sum(valorTotal),0)
            from produtoMovimento tab
                where tab.data=dateMov  and tab.idLoja=store and tab.finalizadora=6 into @count,@cdebito;
    select  count(*),
            ifnull(sum(valorTotal),0)
            from produtoMovimento tab
                where tab.data=dateMov  and tab.idLoja=store and tab.finalizadora=7 into @count,@boleto;
    select  count(*),
            ifnull(sum(valorTotal),0)
            from produtoMovimento tab
                where tab.data=dateMov  and tab.idLoja=store and tab.finalizadora=8 into @count,@duplicata;
    select  count(*),
            ifnull(sum(valorTotal),0)
            from produtoMovimento tab
                where tab.data=dateMov  and tab.idLoja=store and tab.finalizadora=9 into @count,@recebimento;
    select  count(*),
            ifnull(sum(valorTotal),0)
            from produtoMovimento tab
                where tab.data=dateMov  and tab.idLoja=store and tab.finalizadora=10 into @count,@vale;
    select  count(*),
            ifnull(sum(valorTotal),0)
            from produtoMovimento tab
                where tab.data=dateMov  and tab.idLoja=store and tab.finalizadora=11 into @count,@pos;


                                            select idLoja, emissao,terminal, idFuncionario, 1 as 'Fin',"DINHEIRO", coalesce(round(sum(valorTotal),2),0) as Apurado,0 as Informado, 0 - coalesce(sum(valorTotal),0) as test, count(*) as Qtty, 'V', @dinheiro as "recebi" from money where emissao=dateMov and idLoja=store and faturado=1  having count(*) > 0 union
                                            select idLoja, emissao,terminal, idFuncionario, 2,"CHEQUE", coalesce(round(sum(valueCheque),2),0) as Apurado,0 as Informado, 0 - coalesce(sum(valueCheque),0), count(*) as Qtty, 'V', @cheque from cheque where emissao=dateMov and idLoja=store having count(*) > 0 union
                                            select idLoja, emissao,terminal, idFuncionario, 3,"CREDIARIO - REFERENCIA", coalesce(sum(coalesce(round(total,0),0)),0) as Apurado, 0 as Informado, 0 - coalesce(sum(coalesce(total,0)),0), count(*) as Qtty, "VR", @crediario  from  crediario  where emissao=dateMov  and idLoja=store  having count(*) > 0 union
                                            select idLoja, emissao,terminal, idFuncionario, 3,"CREDIARIO - ENCARGOS", coalesce(sum(coalesce(round(encargos,2),0)),0) as Apurado, 0 as Informado, 0 - coalesce(sum(coalesce(encargos,0)),0), count(*) as Qtty, "VN", if(@crediario>0,coalesce(sum(coalesce(encargos,0)),0),0)  from  crediario  where emissao=dateMov  and idLoja=store  having count(*) > 0 union
                                            select idLoja, emissao,terminal, idFuncionario, 3,"CREDIARIO - ENTRADAS", coalesce(sum(coalesce(round(valueEntry,2),0)),0) as Apurado, 0 as Informado, 0 - coalesce(sum(coalesce(valueEntry,0)),0), count(idCrediario) as Qtty, "VE", if(@crediario,coalesce(sum(coalesce(valueEntry,0)),0),0)  from  crediario  where emissao=dateMov  and idLoja=store  having count(*) > 0 union
                                            select idLoja, emissao,terminal, idFuncionario, 4,"CONVENIO",coalesce(round(round(sum(valor),2),2),0) as Apurado, 0 as informado, 0 - coalesce(sum(valor),0), count(*) as Qtty, "V", @convenio  from conveniomovimento where emissao=dateMov  and idLoja=store   having count(*) > 0 union
                                            select idLoja, emissao,terminal, idFuncionario, 5,"CARTAO CREDITO", coalesce(round(sum(valor),2),0) as Apurado, 0 as Informado, 0 - coalesce(sum(valor),0), count(*) as Qtty , "V", @ccredito  from cartao where emissao=dateMov and typeCartao=2 and idAdministradora <> 1  and idLoja=store  having count(*) > 0 union
                                            select idLoja, emissao,terminal, idFuncionario, 6,"CARTAO DEBITO", coalesce(round(sum(valor),2),0) as Apurado, 0 as Informado, 0 - coalesce(sum(valor),0), count(*) as Qtty, "V", @cdebito   from cartao where emissao=dateMov and typeCartao=1 and idAdministradora <> 1  and idLoja=store  having count(*) > 0 union
                                            select cedente, ifnull(emissao,'0000-00-00'),idTerminal, idFuncionario, 7, "BOLETO",coalesce(round(sum(valor),2),0) as Apurado, 0 Informado, 0 - coalesce(sum(valor),0), count(*) as Qtty, "V", @boleto  from boleto where emissao=dateMov  and cedente=store  having count(*) > 0
                                            union
                                                 select
                                                   tab.idLoja, DATE_FORMAT(ifnull(tab.pagamento,'00000000'),'%Y%m%d'), tab.idTerminal, tab.Funcionario,
                                                   tab1.finalizadora ,
                                                   CASE tab1.finalizadora when 1 then "RECEBIMENTO - PRESTACAO - DINHEIRO"
                                                                          when 2 then "RECEBIMENTO - PRESTACAO - CHEQUE"
                                                                          when 5 then "RECEBIMENTO - PRESTACAO - CARTAO CREDITO"
                                                                          when 6 then "RECEBIMENTO - PRESTACAO - CARTAO DEBITO"
                                                                          when 7 then "RECEBIMENTO - PRESTACAO - CARTAO POS"
                                                                          when 11 then "RECEBIMENTO - PRESTACAO - CARTAO VALE" end ,
                                                   coalesce(sum(round(tab1.valor,2)),0) as Apurado,0.00 as Informado, 0 - coalesce(sum(round(tab1.valor,2)),0), count(*) as Qtty,
                                                   CASE tab1.finalizadora when 1 then "R1"
                                                                          when 2 then "R2"
                                                                          when 5 then "R5"
                                                                          when 6 then "R6"
                                                                          when 7 then "R7"
                                                                          when 11 then "R11" end, 0
                                                           from
                                                               parcela tab
                                                              inner join historicocrediario tab1 on(tab.idParcela = tab1.parcela_idParcela and
                                                                                                    tab.idCrediario = tab1.parcela_idCrediario and
                                                                                                    tab.nr_parcela = tab1.parcela_nr_parcela)
                                                              inner join usuario tab3 on(tab1.usuario = tab3.idUsuario)
                                                              inner join typeHistorico tab4 on(tab1.typeHistorico = tab4.typeHistorico)
                                                                        where
                                                                           pagamento=dateMov  and idLoja=store  and  tab.valorPago > 0 and tab.status in("1","2") and tab4.typeHistorico not in(12)  group by 1,2,3,4,5,6 UNION
                                            select idLoja, emissao,terminal, idFuncionario, 11,"POS", coalesce(sum(valor),0) as Apurado, 0 as Informado, 0 - coalesce(sum(valor),0), count(*) as Qtty, "V", @pos   from cartao where emissao=dateMov and typeCartao in(1,2) and idAdministradora = 1  and idLoja=store  having count(*) > 0;
end $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `conector_report_vendaItem`
--

DROP PROCEDURE IF EXISTS `conector_report_vendaItem`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='' */ $$
CREATE DEFINER=`master`@`localhost` PROCEDURE `conector_report_vendaItem`(in di date, in df date)
begin
select cast(tab2.idSetor as char) as codigo,
       tab2.descricao,
       sum(tab.valorTotal) as Venda,
       sum(tab.quantidade) as Qtty,
       sum(tab.custoLiquido*tab.quantidade) as liquido,
       (sum(tab.valorTotal) - sum(tab.icms)- sum(pis) - sum(cofins) -sum(tab.custoOperacional) - sum(tab.custoReposicao*tab.quantidade)) AS LucroLiq,
       sum(tab.icms) as ICMS,
       sum(tab.pis) as Pis,
       sum(tab.cofins) as Cofins,
       sum(tab.custoOperacional) CustoOp,
       sum(tab.ValorTotal)-sum(tab.custoLiquido*tab.quantidade) as LucroBruto,
       case when sum(tab.custoLiquido*tab.quantidade) = 0 then 0
            when sum(tab.custoLiquido*tab.quantidade) != 0 then ((sum(tab.ValorTotal)-sum(tab.Custoliquido*tab.quantidade))/sum(tab.Custoliquido*tab.quantidade))*100
        end as MarBruta,
       case when sum(tab.custoLiquido*tab.quantidade) = 0 then 0
            when sum(tab.custoLiquido*tab.quantidade) != 0 then ((sum(tab.valorTotal) - sum(tab.icms)- sum(pis) - sum(cofins) -sum(tab.custoOperacional) - sum(tab.custoReposicao*tab.quantidade))/sum(tab.Custoliquido*tab.quantidade))*100
        end as MarLiquida
        from produtoMovimento tab
                inner join produto tab1 on(tab.idProduto = tab1.idProduto)
                inner join setor tab2 on(tab1.idSetor = tab2.idSetor)
                    where
                        tab.data between di and df
                                                group by 1,2 order by 2;

                end $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `conector_rpc_loja_card`
--

DROP PROCEDURE IF EXISTS `conector_rpc_loja_card`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='' */ $$
CREATE DEFINER=`master`@`localhost` PROCEDURE `conector_rpc_loja_card`(
  `rpccodigo` INT,
  `rpcloja` INT,
  `rpccontaCorrente` INT,
  `rpcfullStore` smallint(6))
begin
    replace into loja_card(codigo,loja,contaCorrente,fullStore)values
                          (rpccodigo,rpcloja,rpccontaCorrente,rpcfullStore);
  end $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `conector_sintegra`
--

DROP PROCEDURE IF EXISTS `conector_sintegra`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='' */ $$
CREATE DEFINER=`root`@`%` PROCEDURE `conector_sintegra`(tipo varchar(7), di date, df date, store double, geraProdNf smallint, geraProdCp smallint)
begin
  DECLARE R10 int default 0;
  DECLARE R11 int default 0;
  DECLARE R50 int default 0;
  DECLARE R54 int default 0;
  DECLARE R50_U int default 0;
  DECLARE R54_U int default 0;
  DECLARE R53 int default 0;
  DECLARE R60M int default 0;
  DECLARE R60A int default 0;
  DECLARE R60D int default 0;
  DECLARE R60I int default 0;
  DECLARE R60R int default 0;
  DECLARE R75 int default 0;
  DECLARE R90 int default 0;
  DECLARE R70 int default 0;
  DECLARE R88 int default 0;
  DECLARE R61 int default 0;
  declare R61R int default 0;
  DECLARE R61_U INT DEFAULT 0;
  DECLARE R99 int default 0;
  DECLARE R60 int default 0;


case tipo
  when '10' then
    select
          tipo as "Registro_10",
          tab.cnpj,
          tab.ie,
          tab.razao,
          tab1.municipio,
          tab.uf,
          concat(ifnull(mid(fone.ddd,2,2),"000"),fone.telefone),
          date_format(di, '%Y%m%d') as Data_Inicial,
          date_format(df, '%Y%m%d') as Data_Final,
          3 as Id_Convenio,
          3 as Id_Natureza

        from loja tab
             inner join spedMunicipio tab1 on(tab1.idSpedMunicipio = tab.codigoMunicipio)
             left join fone on(fone.idCliente = tab.idLoja)
              where tab.idLoja=store and fone.priori='v';
  when '11' then
    select
       tipo as "Registro_11",
       tab1.logradouro,
       tab1.numero,
       tab1.complemento,
       tab1.bairro,
       tab1.cep,
       tab.responsavel,
       concat(fone.ddd,fone.telefone) as telefone
    from loja tab
          left join endereco tab1 on(tab1.idCliente = tab.idLoja)
          left join spedMunicipio tab2 on(tab2.idSpedMunicipio = tab.codigoMunicipio)
          left join fone on(fone.idCliente = tab.idLoja)
              where tab.idLoja=1 and fone.priori='v';
  when '50' then
select
    tipo as "Registro_50",
    case tab1.idtipoPessoa when 1 then tab3.cpf
                           when 2 then tab2.cnpj
                           when 3 then tab4.cpf end CPF_CNPJ,
    case tab1.idtipoPessoa when 1 then tab3.identidade
                          when 2 then tab2.ie
                          when 3 then tab4.identidade end Ie_Identidade,
    date_format(tab.emissao,'%Y%m%d'),
    tab1.uf,
    tab.modNotaFiscal,
    tab.serie,
    tab.nr_nota,
    tab5.cfop,
    if(tab.idLoja = tab1.idCliente, 'P', 'T'),
    round(round(tab5.valorApurado,2)*100) + round(round(tab5.baseIsentoApurado,2)*100) as TotalNota,
    round(round(tab5.valorInformado,2)*100) as BaseCalculo,
    round(round(tab5.impostoInformado,2)*100) as ValorIcms,
    round(round(tab5.baseIsentoInformado,2)*100) as IsentoNotTributada,
    0 as Outras,
    round(round(tab5.aliquota,2)*100) as Aliquota,
    if(tab.status = 5, 'C', 'N') as 'Situacao'

      from entrada tab
           inner join cliente tab1 on(tab.idCliente = tab1.idCliente)
           left join juridica tab2 on(tab.idCliente = tab2.idCliente)
           left join fisica tab3 on(tab.idCliente = tab3.idCliente)
           left join rural tab4 on(tab.idCliente = tab4.idCliente)
           inner join entradaImp tab5 on(tab.idEntrada = tab5.idEntrada)
            where tab.status = 1 and tab.entrada >= di and tab.entrada <= df and tab.modNotaFiscal in("01","55")

     union
SELECT
    tipo as "Registro_50",
    case tab1.idtipoPessoa when 1 then tab3.cpf
                           when 2 then tab2.cnpj
                           when 3 then tab4.cpf end CPF_CNPJ,
    case tab1.idtipoPessoa when 1 then tab3.identidade
                          when 2 then tab2.ie
                          when 3 then tab4.identidade end Ie_Identidade,
    date_format(tab.emissao,'%Y%m%d'),
    tab1.uf,
    tab.modNotaFiscal,
    tab.serie,
    tab.nr_nota,
    tab5.cfop,
    if(store = tab.loja, 'P', 'T'),
    if(tab5.typeAliquota='s' || tab5.typeAliquota='f',round((tab5.valor*100)), round(round(tab5.baseCalculo,2)*100) + round(round(tab5.reducao,2)*100)) as TotalNota,
    round(round(SUM(tab5.baseCalculo),2)*100) as BaseCalculo,
    round(round(SUM(tab5.icms),2)*100) as ValorIcms,
    round(round(SUM(tab5.baseIcmsIsentos),2)*100) as IsentoNotTributada,
    0 as Outras,
    round(round(tab5.aliquota,2)*100) as Aliquota,
    if(tab.statusNf = 1, 'N', 'C') as 'Situacao'
        FROM nf tab
           inner join cliente tab1 on(tab.idCliente = tab1.idCliente)
           left join juridica tab2 on(tab.idCliente = tab2.idCliente)
           left join fisica tab3 on(tab.idCliente = tab3.idCliente)
           left join rural tab4 on(tab.idCliente = tab4.idCliente)
           inner join nfImposto tab5 on(tab.nf = tab5.idNf)
    where
          tab.statusNf in (1,5) and
          tab.emissao >= di and tab.emissao <= df and
          tab.modNotaFiscal in("01","55") GROUP BY 1,2,3,4,5,6,7,8,9,16 order by 3,7,8;


    when '54' then


select
    distinct tab5.idnfitem,
    tipo as "Registro_54",
    case tab1.idtipoPessoa when 1 then tab3.cpf
                           when 2 then tab2.cnpj
                           when 3 then tab4.cpf end CPF_CNPJ,
    tab.modNotaFiscal,
    tab.serie,
    tab.nr_nota,
    tab5.cfop,
    tab5.cstIcms,
    tab5.sequencia,
    tab5.idProduto,
    round(round(tab5.quantidade,3)*1000),
    round((tab5.priceVenda*tab5.quantidade)*100),
    round(tab5.descontoValor*100),
    round(tab5.baseCalculo*100),
    round(tab5.baseCalculoIcmsSubstituicao*100),
    round(tab5.ipiValor*100),
    round(tab5.aliquota*100),
    tab.emissao
       from
           nf tab
           inner join cliente tab1 on(tab.idCliente = tab1.idCliente)
           left join juridica tab2 on(tab.idCliente = tab2.idCliente)
           left join fisica tab3 on(tab.idCliente = tab3.idCliente)
           left join rural tab4 on(tab.idCliente = tab4.idCliente)
           inner join nfItem tab5 on(tab.nf = tab5.idNf)
                                      where tab.statusNf = 1 and
                                               tab.emissao >= di and tab.emissao <= df and tab.modNotaFiscal in("01","55")
     union

select   "",
    tipo as "Registro_54",
    case tab1.idtipoPessoa when 1 then tab3.cpf
                           when 2 then tab2.cnpj
                           when 3 then tab4.cpf end CPF_CNPJ,
    tab.modNotaFiscal,
    tab.serie,
    tab.nr_nota,
    tab5.cfop,
    tab5.cstIcms,
    tab5.sequencia,
    tab5.idProduto,
    round(round(tab5.quantidade,3)*1000),
    round((tab5.priceVenda*quantidade)*100),
    round(tab5.discountValue*100),
    round(tab5.baseIcms*100),
    round(tab5.baseCalculoSubstituicao*100),
    round(tab5.valorIpi*100),
    round(tab5.creditoIcms*100),
    tab.emissao
      from
          entrada tab
           inner join cliente tab1 on(tab.idCliente = tab1.idCliente)
           left join juridica tab2 on(tab.idCliente = tab2.idCliente)
           left join fisica tab3 on(tab.idCliente = tab3.idCliente)
           left join rural tab4 on(tab.idCliente = tab4.idCliente)
           inner join entradaItem tab5 on(tab.idEntrada = tab5.idEntrada)
           inner join entradaImp tab6 on(tab.idEntrada = tab6.idEntrada)
                                         where
                                               tab.status = 1 and
                                               tab.emissao >= di and tab.emissao <= df
                                               and tab.modNotaFiscal in("01","55")
           order by 6,9,10; 

  when '53' then
select
    tipo as "Registro_53",
    case tab1.idtipoPessoa when 1 then tab3.cpf
                           when 2 then tab2.cnpj
                           when 3 then tab4.cpf end CPF_CNPJ,
    case tab1.idtipoPessoa when 1 then tab3.identidade
                          when 2 then tab2.ie
                          when 3 then tab4.identidade end Ie_Identidade,
    date_format(tab.emissao,'%Y%m%d'),
    tab1.uf,
    tab.modNotaFiscal,
    tab.serie,
    tab.nr_nota,
    tab5.cfop,
    if(tab.idLoja = tab1.idCliente, 'P', 'T'),
    round(round(tab.baseCalculoSubstituicao,2)*100) as BaseCalculoSt,
    round(round(tab.valorIcmsSubstuicao,2)*100) as ValorIcmsSt,
    round(round(tab.vendoValor+tab.valorFrete+tab.valorDespesasAcessorias,2)*100) as despesas_seguro_outros,
    if(tab.status = 5, 'C', 'N') as 'Situacao'

      from entrada tab
           inner join cliente tab1 on(tab.idCliente = tab1.idCliente)
           left join juridica tab2 on(tab.idCliente = tab2.idCliente)
           left join fisica tab3 on(tab.idCliente = tab3.idCliente)
           left join rural tab4 on(tab.idCliente = tab4.idCliente)
           inner join entradaImp tab5 on(tab.idEntrada = tab5.idEntrada)
           inner join cst tab6 on(tab5.cst=tab6.idcst)
           where
               tab6.typeCst='s' and
               (tab.baseCalculoSubstituicao > 0 or tab.valorIcmsSubstuicao > 0) and
               tab.status = 1 and tab.entrada >= di and tab.entrada <= df and
               tab.modNotaFiscal in("01","55") and
               tab.sumSt=1
union
select
    tipo as "Registro_53",
    case tab1.idtipoPessoa when 1 then tab3.cpf
                           when 2 then tab2.cnpj
                           when 3 then tab4.cpf end CPF_CNPJ,
    case tab1.idtipoPessoa when 1 then tab3.identidade
                          when 2 then tab2.ie
                          when 3 then tab4.identidade end Ie_Identidade,
    date_format(tab.emissao,'%Y%m%d'),
    tab1.uf,
    tab.modNotaFiscal,
    tab.serie,
    tab.nr_nota,
    tab5.cfop,
    if(store = tab.loja, 'P', 'T'),
    round(round(tab.baseCalculoIcmsSubstituicao,2)*100) as BaseCalculoSt,
    round(round(tab.valorIcmsSubstituicao,2)*100) as ValorIcmsSt,
    round(round((tab.seguro + tab.acrecismoValor + tab.frete),2)*100) as Despesas_assessorias,
    if(tab.statusNf = 1, 'N', 'C') as 'Situacao'
        FROM nf tab
           inner join cliente tab1 on(tab.idCliente = tab1.idCliente)
           left join juridica tab2 on(tab.idCliente = tab2.idCliente)
           left join fisica tab3 on(tab.idCliente = tab3.idCliente)
           left join rural tab4 on(tab.idCliente = tab4.idCliente)
           inner join nfImposto tab5 on(tab.nf = tab5.idNf)
           inner join cst tab6 on(tab5.cstIcms=tab6.idcst)
    where
          tab.emissao >= di and tab.emissao <= df and
          tab.statusNf in (1,5) and
          tab.geraDanfe='s' and
          tab6.typeCst='s' order by 3,7;

  when '75' then

select * from(
(  select
        distinct tab.idProduto,
        tipo as "Registro_75",
        date_format(di, '%Y%m%d') as ar1,
        date_format(df, '%Y%m%d') as ar2,
        tab.idProduto as prod,
        substring(tab.nome,1,53),
        substring(tab1.spedNcm,1,8),
        substring(tab2.unidade,1,6),
        round(round(tab1.ipi,2)*100),
        round(round(tab3.aliquota,2)*100),
        round(round(tab3.reducao,2)*100),
        0 as RedBaseCalc
                from
                    produto tab
                    left join nfItem tab5 on(tab.idProduto = tab5.idproduto and 1=geraProdNf)
                    inner join produtoImpostos tab1 on(tab.idProduto = tab1.idProduto)
                    inner join unidadeMedida tab2 on(tab.idUnidade = tab2.idunidadeMedida)
                    inner join aliquota tab3 on(tab1.tributacao=tab3.idAliquota)
                    left join nf tab6 on(tab5.idNf = tab6.nf)
                                                            where tab1.idLoja=store and tab6.modNotaFiscal in(55,'2D',65) and
                                                                  (((tab5.data >= di and tab5.data <= df))))  union
(  select
        distinct tab.idProduto,
        tipo as "Registro_75",
        date_format(di, '%Y%m%d') as as1,
        date_format(df, '%Y%m%d') as as2,
        tab.idProduto,
        substring(tab.nome,1,53),
        substring(tab1.spedNcm,1,8),
        substring(tab2.unidade,1,6),
        round(round(tab1.ipi,2)*100),
        round(round(tab3.aliquota,2)*100),
        round(round(tab3.reducao,2)*100),
        0 as RedBaseCalc
                from
                    produto tab
                    left join cupom_detalhes tab4 on(tab.idProduto = tab4.produto and 1=geraProdCp)
                    inner join produtoImpostos tab1 on(tab.idProduto = tab1.idProduto)
                    inner join unidadeMedida tab2 on(tab.idUnidade = tab2.idunidadeMedida)
                    inner join aliquota tab3 on(tab1.tributacao=tab3.idAliquota)
                                                            where tab1.idLoja=store and tab4.loja=store and
                                                                  ((tab4.dataVenda >= di and tab4.dataVenda <= df))) order by 1) as history;
  when '70' then
select
    tipo as "Registro_70",
    case tab1.idtipoPessoa when 1 then tab3.cpf
                           when 2 then tab2.cnpj
                           when 3 then tab4.cpf end CPF_CNPJ,
    case tab1.idtipoPessoa when 1 then tab3.identidade
                          when 2 then tab2.ie
                          when 3 then tab4.identidade end Ie_Identidade,
    date_format(tab.emissao,'%Y%m%d'),
    tab1.uf,
    tab.modNotaFiscal,
    tab.serie,
    '' as SubSerie,
    mid(tab.conhecimentoFrete,1,6),
    tab5.cfop,
    round(round(tab5.valorApurado,2)*100) + round(round(tab5.baseIsentoApurado,2)*100) as TotalNota,
    round(round(tab5.valorInformado,2)*100) as BaseCalculo,
    round(round(tab5.impostoInformado,2)*100) as ValorIcms,
    round(round(tab5.baseIsentoInformado,2)*100) as IsentoNotTributada,
    0 as Outras,
    if(typeFrete='c',1,if(typeFrete='f',2,0))as CIF_COF,
    if(tab.status = 5, 'C', 'N') as 'Situacao'

      from entrada tab
           inner join cliente tab1 on(tab.idCliente = tab1.idCliente)
           left join juridica tab2 on(tab.idCliente = tab2.idCliente)
           left join fisica tab3 on(tab.idCliente = tab3.idCliente)
           left join rural tab4 on(tab.idCliente = tab4.idCliente)
           inner join entradaImp tab5 on(tab.idEntrada = tab5.idEntrada)
            where tab.status = 1
            and tab.entrada >= di and tab.entrada <= df and
            tab.modNotaFiscal in("07");
    when '60M' then

SELECT date_format(tab1.movimento,'%Y%m%d'),
       tab1.numeroCaixa,
       tab1.numero_serie,
       tab1.numeroCaixa,
       tab1.modelo_ecf,
       tab.contadorInicial,
       tab.contadorFinal,
       tab1.crz,
       mid(tab1.cro,2,3),
       round(tab1.venda_bruta*100), round(tab.grandeTotalEnd*100),date_format(tab1.movimento,'%d%m%Y')
                      FROM conectorPDV.fechamentocaixa tab
                                    inner join conectorPDV.movimentoDia tab1 on(tab.loja=tab1.idloja and tab.terminal=tab1.numeroCaixa and tab.dataMovimento = tab1.movimento and tab.contadorReducao = trim(tab1.crz))
                                        where tab1.movimento between di and df and tab.loja = store and tab.contadorFinal is not null;
    when '60A' then
select date_format(tab.dataVenda,'%Y%m%d'),
			tab4.numeroSerie,
        case tab.tipoTributacao
		  when 's' then 'F'
          when 'i' then 'I'
          when 't' then lpad(round(tab3.converti*100),4,'0') end,
        round(sum(tab.quantidade*tab.priceVenda)*100)

			from conectorPDV.cupom_detalhes tab
					inner join produto tab1 on(tab.produto =tab1.idProduto)
                    inner join produtoImpostos tab2 on(tab.produto = tab2.idProduto and tab.loja = tab2.idloja)
					inner join tributacao tab3 on(tab.tributacao = tab3.idAliquota)
                    inner join licenca_ecf tab4 on(tab4.caixa = tab.terminal)
                    where dataVenda between di and df and tab.situacao in(0) and tab.loja=store group by 1,2,3 union
select date_format(tab.dataVenda,'%Y%m%d'),
			tab4.numeroSerie,
		  case tab.situacao
		  when 2 then 'CANC' end,
        round(sum(tab.quantidade*tab.priceVenda)*100)

			from conectorPDV.cupom_detalhes tab
					inner join produto tab1 on(tab.produto =tab1.idProduto)
                    inner join produtoImpostos tab2 on(tab.produto = tab2.idProduto and tab.loja = tab2.idloja)
					inner join tributacao tab3 on(tab.tributacao = tab3.idAliquota)
                    inner join licenca_ecf tab4 on(tab4.caixa = tab.terminal)
                    where dataVenda between di and df and tab.situacao in(1,2) and tab.loja=store group by 1,2,3
                    ORDER BY 1,4;
    

    when '60D' then

select
      date_format(tab.dataVenda,'%Y%m%d'),
      tab.produto,
      round(sum(tab.quantidade)*1000),
      round(sum(abs(tab.total))*100),
      if(tab.tipoTributacao = 's' || tab.tipoTributacao = 'i', 0, round(sum(abs(tab.total))*100)),
      if(tab.tipoTributacao = 's' || tab.tipoTributacao = 'i', if(tab.tipoTributacao = 's','F',UPPER(tab.tipoTributacao)), lpad(round(tab.aliquota*100),4,'0')),
      if(tab.tipoTributacao = 's' || tab.tipoTributacao = 'i', 0, abs(round(round(((tab.total*tab.aliquota)/100),2)*100))), tab2.numero_serie,
      tab.numeroCupom
           FROM conectorPDV.cupom_detalhes tab
                       inner join conectorPDV.cupom_cabecalho tab1 on(tab.numeroCupom = tab1.numeroCupom and tab.loja = tab1.loja and tab.terminal = tab1.terminal and tab.dataVenda = tab1.dataVenda)
                       inner join movimentoDia tab2 on(tab.dataVenda = tab2.movimento and tab.loja = tab2.idloja and tab.terminal = tab2.numeroCaixa)
                       where tab1.operador = tab2.operador and tab.dataVenda between di and df and tab.loja=store group by 1,2,9;
    when '60I' then

SELECT
      date_format(tab.dataVenda,'%Y%m%d'),
      TAB.NUMEROCUPOM,
      tab.sequencia,
      tab.produto,
      round(tab.quantidade*1000),
      round(abs(tab.total)*100),
      if(tab.tipoTributacao = 's' || tab.tipoTributacao = 'i', 0, round(sum(abs(tab.total))*100)) AS BASE,
      if(tab.tipoTributacao = 's' || tab.tipoTributacao = 'i', if(tab.tipoTributacao = 's','F',UPPER(tab.tipoTributacao)), lpad(round(tab.aliquota*100),4,'0')),
      if(tab.tipoTributacao = 's' || tab.tipoTributacao = 'i', 0, abs(round(round(((tab.total*tab.aliquota)/100),2)*100))), tab2.numero_serie
           FROM conectorPDV.cupom_detalhes tab
                       inner join conectorPDV.cupom_cabecalho tab1 on(tab.numeroCupom = tab1.numeroCupom and tab.loja = tab1.loja and tab.terminal = tab1.terminal and tab.dataVenda = tab1.dataVenda)
                       inner join movimentoDia tab2 on(tab.dataVenda = tab2.movimento and tab.loja and tab.loja and tab.terminal = tab2.numeroCaixa)
                       where tab1.operador = tab2.operador and tab.dataVenda between di and df and tab.loja=store group by 1,2,3,4;




    when '60R' then
    SELECT
      date_format(tab.dataVenda,'%m%Y'),
      tab.produto,
      round(sum(tab.quantidade)*1000),
      round(sum(tab.total)*100),
      round(sum(tab.total)*100) AS bASE,
      if(tab.tipoTributacao = 's' || tab.tipoTributacao = 'i', if(tab.tipoTributacao = 's','F',UPPER(tab.tipoTributacao)), lpad(round(tab.aliquota*100),4,'0'))
           FROM conectorpdv.cupom_detalhes tab
                 where tab.dataVenda between di and df and tab.loja=store group by 1,2;
    when '61' then
SELECT     tipo as "Registro_61",date_format(tab.emissao,'%d%m%Y'),
tab.modelo,
tab.serie,
"" as SubSerie,
min(tab.idNotad),
max(tab.idNotad),
sum(ROUND(tab.totalProduto,2)) as vl_doc,
sum(ROUND(tab.baseCalculo,2)) as base,
sum(ROUND(tab.icms,2)) as icm,
0 as Isentas,
0 as Outras, 1800 as aliquota
FROM conectorpdv.notad tab
where tab.emissao between di and di and tab.idLoja=store group by 1,2,3,4
union
SELECT
    tipo as "Registro_61",
    date_format(tab.emissao,'%Y%m%d'),
    tab.modNotaFiscal,
    tab.serie,
    "" as sub_serie,
    min(tab.nr_nota),
    max(tab.nr_nota),
    round(sum(round(tab.valorTotalNota,2)*100)),
    round(sum(round(tab5.baseCalculo,2)*100)) as BaseCalculo,
    round(sum(round(tab5.icms,2)*100)) as ValorIcms,
    round(sum(round(tab5.baseIcmsIsentos,2)*100)) as IsentoNotTributada,
    0 as Outras,
    round(round(tab5.aliquota,2)*100) as Aliquota
        FROM nf tab
           inner join cliente tab1 on(tab.idCliente = tab1.idCliente)
           left join juridica tab2 on(tab.idCliente = tab2.idCliente)
           left join fisica tab3 on(tab.idCliente = tab3.idCliente)
           left join rural tab4 on(tab.idCliente = tab4.idCliente)
           inner join nfImposto tab5 on(tab.nf = tab5.idNf)
    where
          tab.statusNf in (1,5) and  tab.loja=store and
          tab.emissao >= di and tab.emissao <= df and
          tab.modNotaFiscal in("65") group by 2,3,4 order by 3,7,8;
    when '61R' then
select
    tipo as "Registro_61R",
    date_format(tab.emissao,'%m%Y'),
    tab5.idProduto,
    round(sum(round(tab5.quantidade,3))*1000),
    round(SUM((tab5.priceVenda*tab5.quantidade)*100)),
    round(sum(tab5.baseCalculo*100)) as bs,
    round(sum(tab5.aliquota*100)) as alq       from
           nf tab
           inner join cliente tab1 on(tab.idCliente = tab1.idCliente)
           left join juridica tab2 on(tab.idCliente = tab2.idCliente)
           left join fisica tab3 on(tab.idCliente = tab3.idCliente)
           left join rural tab4 on(tab.idCliente = tab4.idCliente)
           inner join nfItem tab5 on(tab.nf = tab5.idNf)
                                      where tab.statusNf in (1,5) and tab.loja=store and
                                               tab.emissao >= di and tab.emissao <= df and tab.modNotaFiscal in("65") group by 1,2,3;
    when '90' then
        select
         count(*) as "Registro_10"

        from loja tab
             inner join spedMunicipio tab1 on(tab1.idSpedMunicipio = tab.codigoMunicipio)
             left join fone on(fone.idCliente = tab.idLoja)
              where tab.idLoja=store and fone.priori='v' into R10;

    select
       count(*) as "Registro_11"
    from loja tab
          left join endereco tab1 on(tab1.idCliente = tab.idLoja)
          left join spedMunicipio tab2 on(tab2.idSpedMunicipio = tab.codigoMunicipio)
          left join fone on(fone.idCliente = tab.idLoja)
              where tab.idLoja=1 and fone.priori='v'  into R11;
select
      count(*) as 'Registro_50'
      from entrada tab
           inner join cliente tab1 on(tab.idCliente = tab1.idCliente)
           left join juridica tab2 on(tab.idCliente = tab2.idCliente)
           left join fisica tab3 on(tab.idCliente = tab3.idCliente)
           left join rural tab4 on(tab.idCliente = tab4.idCliente)
           inner join entradaImp tab5 on(tab.idEntrada = tab5.idEntrada)
            where tab.status = 1 and tab.entrada >= di and tab.entrada <= df and tab.modNotaFiscal in("01","55") into R50;

select count(*) from (
SELECT
    tipo as "Registro_50",
    case tab1.idtipoPessoa when 1 then tab3.cpf
                           when 2 then tab2.cnpj
                           when 3 then tab4.cpf end CPF_CNPJ,
    case tab1.idtipoPessoa when 1 then tab3.identidade
                          when 2 then tab2.ie
                          when 3 then tab4.identidade end Ie_Identidade,
    date_format(tab.emissao,'%Y%m%d'),
    tab1.uf,
    tab.modNotaFiscal,
    tab.serie,
    tab.nr_nota,
    tab5.cfop,
    if(store = tab.loja, 'P', 'T'),
    if(tab5.typeAliquota='s' || tab5.typeAliquota='f',round((tab5.valor*100)), round(round(tab5.baseCalculo,2)*100) + round(round(tab5.reducao,2)*100)) as TotalNota,
    round(round(SUM(tab5.baseCalculo),2)*100) as BaseCalculo,
    round(round(SUM(tab5.icms),2)*100) as ValorIcms,
    round(round(SUM(tab5.baseIcmsIsentos),2)*100) as IsentoNotTributada,
    0 as Outras,
    round(round(tab5.aliquota,2)*100) as Aliquota,
    if(tab.statusNf = 1, 'N', 'C') as 'Situacao'
        FROM nf tab
           inner join cliente tab1 on(tab.idCliente = tab1.idCliente)
           left join juridica tab2 on(tab.idCliente = tab2.idCliente)
           left join fisica tab3 on(tab.idCliente = tab3.idCliente)
           left join rural tab4 on(tab.idCliente = tab4.idCliente)
           inner join nfImposto tab5 on(tab.nf = tab5.idNf)
    where
          tab.statusNf in (1,5) and
          tab.emissao >= di and tab.emissao <= df and
          tab.modNotaFiscal in("01","55") GROUP BY 1,2,3,4,5,6,7,8,9,16 order by 3,7,8) as sub  into R50_U;



select count(*) from (
select
    distinct tab5.idnfitem,
    tipo as "Registro_54",
    case tab1.idtipoPessoa when 1 then tab3.cpf
                           when 2 then tab2.cnpj
                           when 3 then tab4.cpf end CPF_CNPJ,
    tab.modNotaFiscal,
    tab.serie,
    tab.nr_nota,
    tab5.cfop,
    tab5.cstIcms,
    tab5.sequencia,
    tab5.idProduto,
    round(round(tab5.quantidade,3)*1000),
    round((tab5.priceVenda*tab5.quantidade)*100),
    round(tab5.descontoValor*100),
    round(tab5.baseCalculo*100),
    round(tab5.baseCalculoIcmsSubstituicao*100),
    round(tab5.ipiValor*100),
    round(tab5.aliquota*100),
    tab.emissao
       from
           nf tab
           inner join cliente tab1 on(tab.idCliente = tab1.idCliente)
           left join juridica tab2 on(tab.idCliente = tab2.idCliente)
           left join fisica tab3 on(tab.idCliente = tab3.idCliente)
           left join rural tab4 on(tab.idCliente = tab4.idCliente)
           inner join nfItem tab5 on(tab.nf = tab5.idNf)
                                      where tab.statusNf = 1 and
                                               tab.emissao >= di and tab.emissao <= df and tab.modNotaFiscal in("01","55")
) as sub  into R54;

select
    COUNT(*) as "REGISTRO_54_U"
      from
          entrada tab
           inner join cliente tab1 on(tab.idCliente = tab1.idCliente)
           left join juridica tab2 on(tab.idCliente = tab2.idCliente)
           left join fisica tab3 on(tab.idCliente = tab3.idCliente)
           left join rural tab4 on(tab.idCliente = tab4.idCliente)
           inner join entradaItem tab5 on(tab.idEntrada = tab5.idEntrada)
           inner join entradaImp tab6 on(tab.idEntrada = tab6.idEntrada)
                                         where
                                               tab.status = 1 and
                                               tab.emissao >= di and tab.emissao <= df
                                               and tab.modNotaFiscal in("01","55")
                                                                                    INTO R54_U;




select count(*) from(
(  select
        distinct tab.idProduto,
        "Registro_75",
        date_format(di, '%Y%m%d') as ar1,
        date_format(df, '%Y%m%d') as ar2,
        tab.idProduto as prod,
        substring(tab.nome,1,53),
        substring(tab1.spedNcm,1,8),
        substring(tab2.unidade,1,6),
        round(round(tab1.ipi,2)*100),
        round(round(tab3.aliquota,2)*100),
        round(round(tab3.reducao,2)*100),
        0 as RedBaseCalc
                from
                    produto tab
                    left join nfItem tab5 on(tab.idProduto = tab5.idproduto and 1=geraProdNf)
                    inner join produtoImpostos tab1 on(tab.idProduto = tab1.idProduto)
                    inner join unidadeMedida tab2 on(tab.idUnidade = tab2.idunidadeMedida)
                    inner join aliquota tab3 on(tab1.tributacao=tab3.idAliquota)
                    left join nf tab6 on(tab5.idNf = tab6.nf)
                                                            where tab1.idLoja=store and tab6.modNotaFiscal in(55,'2D',65) and
                                                                  (((tab5.data >= di and tab5.data <= df))))  union
(  select
        distinct tab.idProduto,
        "Registro_75",
        date_format(di, '%Y%m%d') as as1,
        date_format(df, '%Y%m%d') as as2,
        tab.idProduto,
        substring(tab.nome,1,53),
        substring(tab1.spedNcm,1,8),
        substring(tab2.unidade,1,6),
        round(round(tab1.ipi,2)*100),
        round(round(tab3.aliquota,2)*100),
        round(round(tab3.reducao,2)*100),
        0 as RedBaseCalc
                from
                    produto tab
                    left join cupom_detalhes tab4 on(tab.idProduto = tab4.produto and 1=geraProdCp)
                    inner join produtoImpostos tab1 on(tab.idProduto = tab1.idProduto)
                    inner join unidadeMedida tab2 on(tab.idUnidade = tab2.idunidadeMedida)
                    inner join aliquota tab3 on(tab1.tributacao=tab3.idAliquota)
                                                            where tab1.idLoja=store and tab4.loja=store and
                                                                  ((tab4.dataVenda >= di and tab4.dataVenda <= df))) order by 1) as R75a into R75;



    SELECT count(*) as "60M"
                      FROM conectorPDV.fechamentocaixa tab
                                    inner join conectorPDV.movimentoDia tab1 on(tab.loja=tab1.idloja and tab.terminal=tab1.numeroCaixa and tab.dataMovimento = tab1.movimento and tab.contadorReducao = trim(tab1.crz))
                                                                            where tab1.movimento between di and df and tab.loja = store and tab.contadorFinal is not null  into R60M;
if(R60M > 0)then
select count(*) from (
    SELECT
      date_format(tab.dataVenda,'%m%Y'),
      tab.produto,
      round(sum(tab.quantidade)*1000),
      round(sum(tab.total)*100),
      round(sum(tab.total)*100) AS bASE,
      if(tab.tipoTributacao = 's' || tab.tipoTributacao = 'i', if(tab.tipoTributacao = 's','F',UPPER(tab.tipoTributacao)), lpad(round(tab.aliquota*100),4,'0'))
           FROM conectorpdv.cupom_detalhes tab
                 where tab.dataVenda between di and df and tab.loja=store group by 1,2

) as subR into R60R;


select count(*) from (
SELECT
      date_format(tab.dataVenda,'%Y%m%d'),
      TAB.NUMEROCUPOM,
      tab.sequencia,
      tab.produto,
      round(tab.quantidade*1000),
      round(abs(tab.total)*100),
      if(tab.tipoTributacao = 's' || tab.tipoTributacao = 'i', 0, round(sum(abs(tab.total))*100)) AS BASE,
      if(tab.tipoTributacao = 's' || tab.tipoTributacao = 'i', if(tab.tipoTributacao = 's','F',UPPER(tab.tipoTributacao)), lpad(round(tab.aliquota*100),4,'0')),
      if(tab.tipoTributacao = 's' || tab.tipoTributacao = 'i', 0, abs(round(round(((tab.total*tab.aliquota)/100),2)*100))), tab2.numero_serie
           FROM conectorPDV.cupom_detalhes tab
                       inner join conectorPDV.cupom_cabecalho tab1 on(tab.numeroCupom = tab1.numeroCupom and tab.loja = tab1.loja and tab.terminal = tab1.terminal and tab.dataVenda = tab1.dataVenda)
                       inner join movimentoDia tab2 on(tab.dataVenda = tab2.movimento and tab.loja and tab.loja and tab.terminal = tab2.numeroCaixa)
                       where tab1.operador = tab2.operador and tab.dataVenda between di and df and tab.loja=store group by 1,2,3,4

) as subI into R60I;



select count(*) from (

select
      date_format(tab.dataVenda,'%Y%m%d'),
      tab.produto,
      round(sum(tab.quantidade)*1000),
      round(sum(abs(tab.total))*100),
      if(tab.tipoTributacao = 's' || tab.tipoTributacao = 'i', 0, round(sum(abs(tab.total))*100)),
      if(tab.tipoTributacao = 's' || tab.tipoTributacao = 'i', if(tab.tipoTributacao = 's','F',UPPER(tab.tipoTributacao)), lpad(round(tab.aliquota*100),4,'0')),
      if(tab.tipoTributacao = 's' || tab.tipoTributacao = 'i', 0, abs(round(round(((tab.total*tab.aliquota)/100),2)*100))), tab2.numero_serie,
      tab.numeroCupom
           FROM conectorPDV.cupom_detalhes tab
                       inner join conectorPDV.cupom_cabecalho tab1 on(tab.numeroCupom = tab1.numeroCupom and tab.loja = tab1.loja and tab.terminal = tab1.terminal and tab.dataVenda = tab1.dataVenda)
                       inner join movimentoDia tab2 on(tab.dataVenda = tab2.movimento and tab.loja = tab2.idloja and tab.terminal = tab2.numeroCaixa)
                       where tab1.operador = tab2.operador and tab.dataVenda between di and df and tab.loja=store group by 1,2,9

) as subD into R60D;

select count(*) from (

select date_format(tab.dataVenda,'%Y%m%d'),
			tab4.numeroSerie,
        case tab.tipoTributacao
		  when 's' then 'F'
          when 'i' then 'I'
          when 't' then lpad(round(tab3.converti*100),4,'0') end,
        round(sum(tab.quantidade*tab.priceVenda)*100)

			from conectorPDV.
      cupom_detalhes tab
					inner join produto tab1 on(tab.produto =tab1.idProduto)
                    inner join produtoImpostos tab2 on(tab.produto = tab2.idProduto and tab.loja = tab2.idloja)
					inner join tributacao tab3 on(tab.tributacao = tab3.idAliquota)
                    inner join licenca_ecf tab4 on(tab4.caixa = tab.terminal)
                    where dataVenda between di and df and tab.situacao in(0) and tab.loja=store group by 1,2,3 union
select date_format(tab.dataVenda,'%Y%m%d'),
			tab4.numeroSerie,
		  case tab.situacao
		  when 2 then 'CANC' end,
        round(sum(tab.quantidade*tab.priceVenda)*100)

			from conectorPDV.cupom_detalhes tab
					inner join produto tab1 on(tab.produto =tab1.idProduto)
                    inner join produtoImpostos tab2 on(tab.produto = tab2.idProduto and tab.loja = tab2.idloja)
					inner join tributacao tab3 on(tab.tributacao = tab3.idAliquota)
                    inner join licenca_ecf tab4 on(tab4.caixa = tab.terminal)
                    where dataVenda between di and df and tab.situacao in(1,2) and tab.loja=store group by 1,2,3
                    ORDER BY 1,4) as subA into R60A;

select count(*) from(SELECT     tipo as "Registro_61",date_format(tab.emissao,'%d%m%Y'),
tab.modelo,
tab.serie,
"" as SubSerie,
min(tab.idNotad),
max(tab.idNotad),
sum(ROUND(tab.totalProduto,2)) as vl_doc,
sum(ROUND(tab.baseCalculo,2)) as base,
sum(ROUND(tab.icms,2)) as icm,
0 as Isentas,
0 as Outras, 0 as aliquota
FROM conectorpdv.notad tab
where tab.emissao between di and di and tab.idLoja=store group by 1,2,3,4
union
SELECT
    tipo as "Registro_61",
    date_format(tab.emissao,'%Y%m%d'),
    tab.modNotaFiscal,
    tab.serie,
    "" as sub_serie,
    min(tab.nr_nota),
    max(tab.nr_nota),
    round(sum(round(tab.valorTotalNota,2)*100)),
    round(sum(round(tab5.baseCalculo,2)*100)) as BaseCalculo,
    round(sum(round(tab5.icms,2)*100)) as ValorIcms,
    round(sum(round(tab5.baseIcmsIsentos,2)*100)) as IsentoNotTributada,
    0 as Outras,
    round(round(tab5.aliquota,2)*100) as Aliquota
        FROM nf tab
           inner join cliente tab1 on(tab.idCliente = tab1.idCliente)
           left join juridica tab2 on(tab.idCliente = tab2.idCliente)
           left join fisica tab3 on(tab.idCliente = tab3.idCliente)
           left join rural tab4 on(tab.idCliente = tab4.idCliente)
           inner join nfImposto tab5 on(tab.nf = tab5.idNf)
    where
          tab.statusNf in (1,5) and  tab.loja=store and
          tab.emissao >= di and tab.emissao <= df and
          tab.modNotaFiscal in("65") group by 2,3,4 order by 3,7,8) as Sub61 into R61;

select count(*) from(select
    tipo as "Registro_61R",
    date_format(tab.emissao,'%m%Y'),
    tab5.idProduto,
    round(sum(round(tab5.quantidade,3))*1000),
    round(SUM((tab5.priceVenda*tab5.quantidade)*100)),
    round(sum(tab5.baseCalculo*100)) as bs,
    round(sum(tab5.aliquota*100)) as alq       from
           nf tab
           inner join cliente tab1 on(tab.idCliente = tab1.idCliente)
           left join juridica tab2 on(tab.idCliente = tab2.idCliente)
           left join fisica tab3 on(tab.idCliente = tab3.idCliente)
           left join rural tab4 on(tab.idCliente = tab4.idCliente)
           inner join nfItem tab5 on(tab.nf = tab5.idNf)
                                      where tab.statusNf in (1,5) and tab.loja=store and
                                               tab.emissao >= di and tab.emissao <= df and tab.modNotaFiscal in("65") group by 1,2,3) as Sub61R into R61R;

  else
      set R60A = 0;
      set R60D = 0;
      set R60I = 0;
      set R60R = 0;
      set R61 = 0;
      set R61R = 0;
end if;

    select
          tab.cnpj,
          tab.ie

        from loja tab
              where tab.idLoja=store INTO @A,@B;

  SET R90 = R90 + 1;


  IF(geraProdCp = 1)THEN
     set R60 = Coalesce(R60M,0)+Coalesce(R60A,0)+Coalesce(R60D,0)+Coalesce(R60I,0)+Coalesce(R60R,0);
      ELSE
         SET R60 = 0;
  END IF;
  set R61_U = Coalesce(R61,0)+Coalesce(R61R,0);

  set R99 =coalesce(R61_U,0) + (coalesce(R50,0)+coalesce(R50_U,0)+coalesce(R53,0)+coalesce(R54,0)+coalesce(R54_U,0)+coalesce(R60,0)+coalesce(R70,0)+coalesce(R75,0)+coalesce(R88,0)+coalesce(r90,0)+2);

  SELECT (coalesce(R50,0)+coalesce(R50_U,0)),
          coalesce(R53,0),
          (coalesce(R54,0)+coalesce(R54_U,0)),coalesce(R60,0), coalesce(R61_U,0),coalesce(R70,0),coalesce(R75,0),coalesce(R88,0),coalesce(R99,0), @A,@B;


end case;
end $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `conector_sintegra_old`
--

DROP PROCEDURE IF EXISTS `conector_sintegra_old`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION' */ $$
CREATE DEFINER=`root`@`%` PROCEDURE `conector_sintegra_old`(tipo varchar(7), di date, df date, store double)
begin
  DECLARE R10 int default 0;
  DECLARE R11 int default 0;
  DECLARE R50 int default 0;
  DECLARE R54 int default 0;
  DECLARE R50_U int default 0;
  DECLARE R54_U int default 0;
  DECLARE R53 int default 0;
  DECLARE R60M int default 0;
  DECLARE R60A int default 0;
  DECLARE R60D int default 0;
  DECLARE R60I int default 0;
  DECLARE R60R int default 0;
  DECLARE R75 int default 0;
  DECLARE R90 int default 0;
  DECLARE R70 int default 0;
  DECLARE R88 int default 0;
  DECLARE R61 int default 0;
  DECLARE R99 int default 0;
  DECLARE R60 int default 0;


case tipo
  when '10' then
    select
          tipo as "Registro_10",
          tab.cnpj,
          tab.ie,
          tab.razao,
          tab1.municipio,
          tab.uf,
          fone.telefone,
          date_format(di, '%Y%m%d') as Data_Inicial,
          date_format(df, '%Y%m%d') as Data_Final,
          3 as Id_Convenio,
          3 as Id_Natureza

        from loja tab
             inner join spedMunicipio tab1 on(tab1.idSpedMunicipio = tab.codigoMunicipio)
             left join fone on(fone.idCliente = tab.idLoja)
              where tab.idLoja=store and fone.priori='v';
  when '11' then
    select
       tipo as "Registro_11",
       tab1.logradouro,
       tab1.numero,
       tab1.complemento,
       tab1.bairro,
       tab1.cep,
       tab.responsavel,
       concat(fone.ddd,fone.telefone) as telefone
    from loja tab
          left join endereco tab1 on(tab1.idCliente = tab.idLoja)
          left join spedMunicipio tab2 on(tab2.idSpedMunicipio = tab.codigoMunicipio)
          left join fone on(fone.idCliente = tab.idLoja)
              where tab.idLoja=1 and fone.priori='v';
  when '50' then
select
    tipo as "Registro_50",
    case tab1.idtipoPessoa when 1 then tab3.cpf
                           when 2 then tab2.cnpj
                           when 3 then tab4.cpf end CPF_CNPJ,
    case tab1.idtipoPessoa when 1 then tab3.identidade
                          when 2 then tab2.ie
                          when 3 then tab4.identidade end Ie_Identidade,
    date_format(tab.emissao,'%Y%m%d'),
    tab1.uf,
    tab.modNotaFiscal,
    tab.serie,
    tab.nr_nota,
    tab5.cfop,
    if(tab.idLoja = tab1.idCliente, 'P', 'T'),
    round(round(tab5.valorApurado,2)*100) + round(round(tab5.baseIsentoApurado,2)*100) as TotalNota,
    round(round(tab5.valorInformado,2)*100) as BaseCalculo,
    round(round(tab5.impostoInformado,2)*100) as ValorIcms,
    round(round(tab5.baseIsentoInformado,2)*100) as IsentoNotTributada,
    0 as Outras,
    round(round(tab5.aliquota,2)*100) as Aliquota,
    if(tab.status = 5, 'C', 'N') as 'Situacao'

      from entrada tab
           inner join cliente tab1 on(tab.idCliente = tab1.idCliente)
           left join juridica tab2 on(tab.idCliente = tab2.idCliente)
           left join fisica tab3 on(tab.idCliente = tab3.idCliente)
           left join rural tab4 on(tab.idCliente = tab4.idCliente)
           inner join entradaImp tab5 on(tab.idEntrada = tab5.idEntrada)
            where tab.status = 1 and tab.entrada >= di and tab.entrada <= df and tab.modNotaFiscal in("01","55")

     union

SELECT
    tipo as "Registro_50",
    case tab1.idtipoPessoa when 1 then tab3.cpf
                           when 2 then tab2.cnpj
                           when 3 then tab4.cpf end CPF_CNPJ,
    case tab1.idtipoPessoa when 1 then tab3.identidade
                          when 2 then tab2.ie
                          when 3 then tab4.identidade end Ie_Identidade,
    date_format(tab.emissao,'%Y%m%d'),
    tab1.uf,
    tab.modNotaFiscal,
    tab.serie,
    tab.nr_nota,
    tab5.cfop,
    if(store = tab.loja, 'P', 'T'),
    round(round(tab5.baseCalculo,2)*100) + round(round(tab5.reducao,2)*100) as TotalNota,
    round(round(tab5.baseCalculo,2)*100) as BaseCalculo,
    round(round(tab5.icms,2)*100) as ValorIcms,
    round(round(tab5.baseIcmsIsentos,2)*100) as IsentoNotTributada,
    0 as Outras,
    round(round(tab5.aliquota,2)*100) as Aliquota,
    if(tab.statusNf = 1, 'N', 'C') as 'Situacao'
        FROM nf tab
           inner join cliente tab1 on(tab.idCliente = tab1.idCliente)
           left join juridica tab2 on(tab.idCliente = tab2.idCliente)
           left join fisica tab3 on(tab.idCliente = tab3.idCliente)
           left join rural tab4 on(tab.idCliente = tab4.idCliente)
           inner join nfImposto tab5 on(tab.nf = tab5.idNf)
    where
          tab.statusNf in (1,5) and
          tab.emissao >= di and tab.emissao <= df and
          tab.modNotaFiscal in("01","55") order by 3,7;

    when '54' then

select
    tipo as "Registro_54",
    case tab1.idtipoPessoa when 1 then tab3.cpf
                           when 2 then tab2.cnpj
                           when 3 then tab4.cpf end CPF_CNPJ,
    tab.modNotaFiscal,
    tab.serie,
    tab.nr_nota,
    tab6.cfop,
    tab6.cstIcms,
    tab5.sequencia,
    tab5.idProduto,
    round(round(tab5.quantidade,3)*1000),
    round((tab5.priceVenda*quantidade)*100),
    round(tab5.descontoValor*100),
    round(tab5.baseCalculo*100),
    round(tab5.baseCalculoIcmsSubstituicao*100),
    round(tab5.ipiValor*100),
    round(tab5.aliquota*100),
    tab.emissao
       from
           nf tab
           inner join cliente tab1 on(tab.idCliente = tab1.idCliente)
           left join juridica tab2 on(tab.idCliente = tab2.idCliente)
           left join fisica tab3 on(tab.idCliente = tab3.idCliente)
           left join rural tab4 on(tab.idCliente = tab4.idCliente)
           inner join nfItem tab5 on(tab.nf = tab5.idNf)
           inner join nfImposto tab6 on(tab.nf = tab6.idNf)
                                      where tab.statusNf = 1 and
                                               tab.emissao >= di and tab.emissao <= df and tab.modNotaFiscal in("01","55")
     union

select
    tipo as "Registro_54",
    case tab1.idtipoPessoa when 1 then tab3.cpf
                           when 2 then tab2.cnpj
                           when 3 then tab4.cpf end CPF_CNPJ,
    tab.modNotaFiscal,
    tab.serie,
    tab.nr_nota,
    tab5.cfop,
    tab5.cstIcms,
    tab5.sequencia,
    tab5.idProduto,
    round(round(tab5.quantidade,3)*1000),
    round((tab5.priceVenda*quantidade)*100),
    round(tab5.discountValue*100),
    round(tab5.baseIcms*100),
    round(tab5.baseCalculoSubstituicao*100),
    round(tab5.valorIpi*100),
    round(tab5.creditoIcms*100),
    tab.emissao
      from
          entrada tab
           inner join cliente tab1 on(tab.idCliente = tab1.idCliente)
           left join juridica tab2 on(tab.idCliente = tab2.idCliente)
           left join fisica tab3 on(tab.idCliente = tab3.idCliente)
           left join rural tab4 on(tab.idCliente = tab4.idCliente)
           inner join entradaItem tab5 on(tab.idEntrada = tab5.idEntrada)
           inner join entradaImp tab6 on(tab.idEntrada = tab6.idEntrada)
                                         where
                                               tab.status = 1 and
                                               tab.emissao >= di and tab.emissao <= df
                                               and tab.modNotaFiscal in("01","55")
 order by 3,4,6,7,16;

  when '53' then
select
    tipo as "Registro_53",
    case tab1.idtipoPessoa when 1 then tab3.cpf
                           when 2 then tab2.cnpj
                           when 3 then tab4.cpf end CPF_CNPJ,
    case tab1.idtipoPessoa when 1 then tab3.identidade
                          when 2 then tab2.ie
                          when 3 then tab4.identidade end Ie_Identidade,
    date_format(tab.emissao,'%Y%m%d'),
    tab1.uf,
    tab.modNotaFiscal,
    tab.serie,
    tab.nr_nota,
    tab5.cfop,
    if(tab.idLoja = tab1.idCliente, 'P', 'T'),
    round(round(tab.baseCalculoSubstituicao,2)*100) as BaseCalculoSt,
    round(round(tab.valorIcmsSubstuicao,2)*100) as ValorIcmsSt,
    round(round(tab.vendoValor+tab.valorFrete+tab.valorDespesasAcessorias,2)*100) as despesas_seguro_outros,
    if(tab.status = 5, 'C', 'N') as 'Situacao'

      from entrada tab
           inner join cliente tab1 on(tab.idCliente = tab1.idCliente)
           left join juridica tab2 on(tab.idCliente = tab2.idCliente)
           left join fisica tab3 on(tab.idCliente = tab3.idCliente)
           left join rural tab4 on(tab.idCliente = tab4.idCliente)
           inner join entradaImp tab5 on(tab.idEntrada = tab5.idEntrada)
           inner join cst tab6 on(tab5.cst=tab6.idcst)
           where
               tab6.typeCst='s' and
               (tab.baseCalculoSubstituicao > 0 or tab.valorIcmsSubstuicao > 0) and
               tab.status = 1 and tab.entrada >= di and tab.entrada <= df and
               tab.modNotaFiscal in("01","55") and
               tab.sumSt=1
union
select
    tipo as "Registro_53",
    case tab1.idtipoPessoa when 1 then tab3.cpf
                           when 2 then tab2.cnpj
                           when 3 then tab4.cpf end CPF_CNPJ,
    case tab1.idtipoPessoa when 1 then tab3.identidade
                          when 2 then tab2.ie
                          when 3 then tab4.identidade end Ie_Identidade,
    date_format(tab.emissao,'%Y%m%d'),
    tab1.uf,
    tab.modNotaFiscal,
    tab.serie,
    tab.nr_nota,
    tab5.cfop,
    if(store = tab.loja, 'P', 'T'),
    round(round(tab.baseCalculoIcmsSubstituicao,2)*100) as BaseCalculoSt,
    round(round(tab.valorIcmsSubstituicao,2)*100) as ValorIcmsSt,
    round(round((tab.seguro + tab.acrecismoValor + tab.frete),2)*100) as Despesas_assessorias,
    if(tab.statusNf = 1, 'N', 'C') as 'Situacao'
        FROM nf tab
           inner join cliente tab1 on(tab.idCliente = tab1.idCliente)
           left join juridica tab2 on(tab.idCliente = tab2.idCliente)
           left join fisica tab3 on(tab.idCliente = tab3.idCliente)
           left join rural tab4 on(tab.idCliente = tab4.idCliente)
           inner join nfImposto tab5 on(tab.nf = tab5.idNf)
           inner join cst tab6 on(tab5.cstIcms=tab6.idcst)
    where
          tab.emissao >= di and tab.emissao <= df and
          tab.statusNf in (1,5) and
          tab.geraDanfe='s' and
          tab6.typeCst='s' order by 3,7;

  when '75' then
  select
        distinct tab.idProduto,
        tipo as "Registro_75",
        date_format(di, '%Y%m%d'),
        date_format(df, '%Y%m%d'),
        tab.idProduto,
        substring(tab.nome,1,53),
        substring(tab1.spedNcm,1,8),
        substring(tab2.unidade,1,6),
        round(round(tab1.ipi,2)*100),
        round(round(tab3.aliquota,2)*100),
        round(round(tab3.reducao,2)*100),
        0 as RedBaseCalc
                from
                    produto tab
                     inner join produtoImpostos tab1 on(tab.idProduto = tab1.idProduto)
                     inner join unidadeMedida tab2 on(tab.idUnidade = tab2.idunidadeMedida)
                     inner join aliquota tab3 on(tab1.tributacao=tab3.idAliquota)
                     inner join cupom_detalhes tab4 on(tab.idProduto = tab4.produto)
                                                            where tab1.idLoja=1 and tab4.loja=1 and
                                                                  ((tab4.dataVenda >= di and tab4.dataVenda <= df)) order by 1;
  when '70' then
select
    tipo as "Registro_70",
    case tab1.idtipoPessoa when 1 then tab3.cpf
                           when 2 then tab2.cnpj
                           when 3 then tab4.cpf end CPF_CNPJ,
    case tab1.idtipoPessoa when 1 then tab3.identidade
                          when 2 then tab2.ie
                          when 3 then tab4.identidade end Ie_Identidade,
    date_format(tab.emissao,'%Y%m%d'),
    tab1.uf,
    tab.modNotaFiscal,
    tab.serie,
    '' as SubSerie,
    mid(tab.conhecimentoFrete,1,6),
    tab5.cfop,
    round(round(tab5.valorApurado,2)*100) + round(round(tab5.baseIsentoApurado,2)*100) as TotalNota,
    round(round(tab5.valorInformado,2)*100) as BaseCalculo,
    round(round(tab5.impostoInformado,2)*100) as ValorIcms,
    round(round(tab5.baseIsentoInformado,2)*100) as IsentoNotTributada,
    0 as Outras,
    if(typeFrete='c',1,if(typeFrete='f',2,0))as CIF_COF,
    if(tab.status = 5, 'C', 'N') as 'Situacao'

      from entrada tab
           inner join cliente tab1 on(tab.idCliente = tab1.idCliente)
           left join juridica tab2 on(tab.idCliente = tab2.idCliente)
           left join fisica tab3 on(tab.idCliente = tab3.idCliente)
           left join rural tab4 on(tab.idCliente = tab4.idCliente)
           inner join entradaImp tab5 on(tab.idEntrada = tab5.idEntrada)
            where tab.status = 1
            and tab.entrada >= di and tab.entrada <= df and
            tab.modNotaFiscal in("07");
    when '60M' then
    SELECT date_format(tab1.movimento,'%Y%m%d'),
       tab1.numeroCaixa,
       tab1.numero_serie,
       tab1.numeroCaixa,
       tab1.modelo_ecf,
       tab.contadorInicial,
       tab.contadorFinal,
       tab1.crz,
       mid(tab1.cro,2,3),
       round(tab1.venda_bruta*100), round(tab.grandeTotalEnd*100),date_format(tab1.movimento,'%d%m%Y')
                      FROM conector.fechamentocaixa tab
                                    inner join conector.movimentoDia tab1 on(tab.contadorReducao = trim(tab1.crz))
                                        where tab1.movimento between di and df and tab.loja = store and tab.contadorFinal is not null;
    when '60A' then
    select
      date_format(tab.movimento,'%Y%m%d'),
      tab.numeroCaixa,
      case tab.tipo
          when 's' then 'F'
          when 'i' then 'I'
          when 'd' then 'DESC'
          when 'c' then 'CANC'
                    else lpad(round(tab.aliquota*100),4,'0') end,
      round(round(tab.valor,2)*100)
            from detalhe_reducao_aliquota tab
            WHERE
              tab.idloja=store and tab.movimento between di and df AND round(round(tab.valor,2)*100) > 0;
    when '60D' then
select
      date_format(tab.dataVenda,'%Y%m%d'),
      tab.produto,
      round(sum(tab.quantidade)*1000),
      round(sum(abs(tab.total))*100),
      if(tab.tipoTributacao = 's' || tab.tipoTributacao = 'i', 0, round(sum(abs(tab.total))*100)),
      if(tab.tipoTributacao = 's' || tab.tipoTributacao = 'i', if(tab.tipoTributacao = 's','F',UPPER(tab.tipoTributacao)), lpad(round(tab.aliquota*100),4,'0')),
      if(tab.tipoTributacao = 's' || tab.tipoTributacao = 'i', 0, abs(round(round(((tab.total*tab.aliquota)/100),2)*100))), tab2.numero_serie
           FROM conector.cupom_detalhes tab
                       inner join conector.cupom_cabecalho tab1 on(tab.numeroCupom = tab1.numeroCupom and tab.loja = tab1.loja and tab.terminal = tab1.terminal and tab.dataVenda = tab1.dataVenda)
                       inner join movimentoDia tab2 on(tab.dataVenda = tab2.movimento and tab.loja and tab.loja and tab.terminal = tab2.numeroCaixa)
                       where tab1.operador = tab2.operador and tab.dataVenda between di and df and tab.loja=store group by 1,2;
    when '60I' then
SELECT
      date_format(tab.dataVenda,'%Y%m%d'),
      TAB.NUMEROCUPOM,
      tab.sequencia,
      tab.produto,
      round(tab.quantidade*1000),
      round(abs(tab.total)*100),
      if(tab.tipoTributacao = 's' || tab.tipoTributacao = 'i', 0, round(sum(abs(tab.total))*100)) AS BASE,
      if(tab.tipoTributacao = 's' || tab.tipoTributacao = 'i', if(tab.tipoTributacao = 's','F',UPPER(tab.tipoTributacao)), lpad(round(tab.aliquota*100),4,'0')),
      if(tab.tipoTributacao = 's' || tab.tipoTributacao = 'i', 0, abs(round(round(((tab.total*tab.aliquota)/100),2)*100))), tab2.numero_serie
           FROM conector.cupom_detalhes tab
                       inner join conector.cupom_cabecalho tab1 on(tab.numeroCupom = tab1.numeroCupom and tab.loja = tab1.loja and tab.terminal = tab1.terminal and tab.dataVenda = tab1.dataVenda)
                       inner join movimentoDia tab2 on(tab.dataVenda = tab2.movimento and tab.loja and tab.loja and tab.terminal = tab2.numeroCaixa)
                       where tab1.operador = tab2.operador and tab.dataVenda between di and df and tab.loja=store group by 1,2,3,4;

select
    COUNT(*) as 'Registro_54'
       from
           nf tab
           inner join cliente tab1 on(tab.idCliente = tab1.idCliente)
           left join juridica tab2 on(tab.idCliente = tab2.idCliente)
           left join fisica tab3 on(tab.idCliente = tab3.idCliente)
           left join rural tab4 on(tab.idCliente = tab4.idCliente)
           inner join nfItem tab5 on(tab.nf = tab5.idNf)
           inner join nfImposto tab6 on(tab.nf = tab6.idNf)
                                      where tab.statusNf = 1 and
                                               tab.emissao >= di and tab.emissao <= df and tab.modNotaFiscal in("01","55") into R54;


    when '60R' then
    SELECT
      date_format(tab.dataVenda,'%m%Y'),
      tab.produto,
      round(sum(tab.quantidade)*1000),
      round(sum(tab.total)*100),
      round(sum(tab.total)*100) AS bASE,
      if(tab.tipoTributacao = 's' || tab.tipoTributacao = 'i', if(tab.tipoTributacao = 's','F',UPPER(tab.tipoTributacao)), lpad(round(tab.aliquota*100),4,'0'))
           FROM conectorpdv.cupom_detalhes tab
                 where tab.dataVenda between di and df and tab.loja=store group by 1,2;
    when '90' then
        select
         count(*) as "Registro_10"

        from loja tab
             inner join spedMunicipio tab1 on(tab1.idSpedMunicipio = tab.codigoMunicipio)
             left join fone on(fone.idCliente = tab.idLoja)
              where tab.idLoja=store and fone.priori='v' into R10;

    select
       count(*) as "Registro_11"
    from loja tab
          left join endereco tab1 on(tab1.idCliente = tab.idLoja)
          left join spedMunicipio tab2 on(tab2.idSpedMunicipio = tab.codigoMunicipio)
          left join fone on(fone.idCliente = tab.idLoja)
              where tab.idLoja=1 and fone.priori='v'  into R11;
select
      count(*) as 'Registro_50'
      from entrada tab
           inner join cliente tab1 on(tab.idCliente = tab1.idCliente)
           left join juridica tab2 on(tab.idCliente = tab2.idCliente)
           left join fisica tab3 on(tab.idCliente = tab3.idCliente)
           left join rural tab4 on(tab.idCliente = tab4.idCliente)
           inner join entradaImp tab5 on(tab.idEntrada = tab5.idEntrada)
            where tab.status = 1 and tab.entrada >= di and tab.entrada <= df and tab.modNotaFiscal in("01","55") into R50;
SELECT
      COUNT(*) AS 'Registro_50_U'
        FROM nf tab
           inner join cliente tab1 on(tab.idCliente = tab1.idCliente)
           left join juridica tab2 on(tab.idCliente = tab2.idCliente)
           left join fisica tab3 on(tab.idCliente = tab3.idCliente)
           left join rural tab4 on(tab.idCliente = tab4.idCliente)
           inner join nfImposto tab5 on(tab.nf = tab5.idNf)
    where
          tab.statusNf in (1,5) and
          tab.emissao >= di and tab.emissao <= df and
          tab.modNotaFiscal in("01","55") into R50_U;


select
      count(*) as "Registro_54"
       from
           nf tab
           inner join cliente tab1 on(tab.idCliente = tab1.idCliente)
           left join juridica tab2 on(tab.idCliente = tab2.idCliente)
           left join fisica tab3 on(tab.idCliente = tab3.idCliente)
           left join rural tab4 on(tab.idCliente = tab4.idCliente)
           inner join nfItem tab5 on(tab.nf = tab5.idNf)
           inner join nfImposto tab6 on(tab.nf = tab6.idNf)
                                      where tab.statusNf = 1 and
                                               tab.emissao >= di and tab.emissao <= df and tab.modNotaFiscal in("01","55") into R54;

select
    COUNT(*) as "REGISTRO_54_U"
      from
          entrada tab
           inner join cliente tab1 on(tab.idCliente = tab1.idCliente)
           left join juridica tab2 on(tab.idCliente = tab2.idCliente)
           left join fisica tab3 on(tab.idCliente = tab3.idCliente)
           left join rural tab4 on(tab.idCliente = tab4.idCliente)
           inner join entradaItem tab5 on(tab.idEntrada = tab5.idEntrada)
           inner join entradaImp tab6 on(tab.idEntrada = tab6.idEntrada)
                                         where
                                               tab.status = 1 and
                                               tab.emissao >= di and tab.emissao <= df
                                               and tab.modNotaFiscal in("01","55")
                                                                                    INTO R54_U;



  select
        count(distinct tab.idProduto) as Registro_75
                from
                    produto tab
                     inner join produtoImpostos tab1 on(tab.idProduto = tab1.idProduto)
                     inner join unidadeMedida tab2 on(tab.idUnidade = tab2.idunidadeMedida)
                     inner join aliquota tab3 on(tab1.tributacao=tab3.idAliquota)
                     inner join cupom_detalhes tab4 on(tab.idProduto = tab4.produto)
                                                            where tab1.idLoja=store and tab4.loja=store and
                                                                  ((tab4.dataVenda >= di and tab4.dataVenda <= df)) order by 1  into R75;

    SELECT count(*) as "60M"
                      FROM conectorpdv.fechamentocaixa tab
                                    inner join conectorpdv.movimentoDia tab1 on(tab.contadorReducao = trim(tab1.crz))
                                        where dataMovimento between di and df and tab.loja = store and tab.contadorFinal is not null  into R60M;
    select
          COUNT(*) AS "60A"
            from detalhe_reducao_aliquota tab
            WHERE
              tab.idloja=store and tab.movimento between di and df INTO R60A;


    SELECT
        COUNT(*) as "60D"
           FROM conectorpdv.cupom_detalhes tab
               where tab.dataVenda between di and df and tab.loja=store INTO R60D;
SELECT
      COUNT(*) as "60I"
           FROM conectorpdv.cupom_detalhes tab
               where tab.dataVenda between di and df and tab.loja=store INTO R60I;

   SELECT
         COUNT(*) AS "60R"
           FROM conectorpdv.cupom_detalhes tab
                 where tab.dataVenda between di and df and tab.loja=store INTO R60R;
    select
          tab.cnpj,
          tab.ie

        from loja tab
              where tab.idLoja=store INTO @A,@B;

  SET R90 = R90 + 1;

  set R60 = Coalesce(R60M,0)+Coalesce(R60A,0)+Coalesce(R60D,0)+Coalesce(R60I,0)+Coalesce(R60R,0);

  set R99 =(coalesce(R50,0)+coalesce(R50_U,0)+coalesce(R53,0)+coalesce(R54,0)+coalesce(R54_U,0)+coalesce(R60,0)+coalesce(R70,0)+coalesce(R75,0)+coalesce(R88,0)+coalesce(r90,0));

  SELECT (coalesce(R50,0)+coalesce(R50_U,0)),coalesce(R53,0),(coalesce(R54,0)+coalesce(R54_U,0)),coalesce(R60,0),coalesce(R70,0),coalesce(R75,0),coalesce(R88,0),coalesce(R99,0), @A,@B;

end case;
end $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `conector_statusItens_reserva`
--

DROP PROCEDURE IF EXISTS `conector_statusItens_reserva`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='' */ $$
CREATE DEFINER=`master`@`localhost` PROCEDURE `conector_statusItens_reserva`( in tipo integer, in find varchar(45), in findIdLoja integer, in reserva double, in seq int)
begin
declare reservado numeric(15,3) default 0;
declare disponivel numeric(15,3) default 0;
declare estoque numeric(15,3) default 0;

case tipo

when 3 then
    
 select
       tab.idProduto,
       ifnull(reserva_itens(find,findIdLoja),0) as reservas,
       ifnull(tab5.quantidade,0) as estoque,
       round((tab5.quantidade - sum(ifnull(item.quantidade,0))),3) Disponivel
                from produto tab
             inner join unidadeMedida tab1 on(tab.idunidade = tab1.idunidadeMedida)
             inner join produtoEmbalagem tab2 on(tab.idproduto = tab2.idproduto)
             inner join produtoStore tab3 on(tab.idproduto = tab3.idproduto)
             inner join produtoPrice tab4 on(tab.idproduto = tab4.idproduto)
             inner join produtoEstoques tab5 on(tab.idproduto = tab5.idproduto)
             inner join (select ifnull(produto.idSetor,0) as setor, ifnull(setor.descricao,0) as descricao from produto left join setor on(produto.IdSetor = setor.idSetor) where idProduto=find) as newSetor
               on(tab.idsetor = newSetor.setor)
             inner join (select ifnull(produto.idGrupo,0)  as grupo, ifnull(grupo.descricao,0) as descricao from produto left join grupo on(produto.idGrupo = grupo.idGrupo) where idProduto=find) as newGrupo
               on(tab.idgrupo = newGrupo.grupo)
             inner join (select ifnull(produto.idCategoria,0) as categoria, ifnull(categoria.descricao,0) as descricao from produto left join categoria on(produto.IdCategoria = categoria.idCategoria) where idProduto=find) as newCategoria
               on(tab.idcategoria = newCategoria.categoria)
             inner join juridica on(tab.idFornecedor = juridica.idcliente)
             left join pedidoitens item on(tab.idProduto = item.idProduto)
             left join pedido on(item.idPedido = pedido.IdPedido)
 where
       tab2.defaultVenda = "s" and
       tab4.idloja = tab5.idloja and
       tab4.idloja = tab3.idloja and
       tab4.idloja = findIdLoja and
       tab.idProduto = find and
       newSetor.Setor > 0  and pedido.final in(0,1,2.3)
 group by 1
 into @produto,  reservado, estoque, disponivel;

      if(disponivel > 0 && estoque > 0)then
          update pedidoItens item set item.situacao=3 where item.idPedido=reserva  and item.idLoja=findIdLoja and item.idProduto=@produto and item.sequencial = seq;
      else
          update pedidoItens item set item.situacao=4 where item.idPedido=reserva  and item.idLoja=findIdLoja and item.idProduto=@produto and item.sequencial = seq;
      end if;

      if((select COUNT(idProduto) as confere from pedidoItens where idPedido=reserva and situacao=4) = 0)then

        update pedido set status=3 where idPedido=reserva  and idLoja=findIdLoja; 
      else

        update pedido set status=4 where idPedido=reserva  and idLoja=findIdLoja; 
      end if;

  when 4 then 

      if((select reserva_status(reserva,findIdLoja)) = 0)then

        update pedido set status=3 where idPedido=reserva  and idLoja=findIdLoja; 
      else

        update pedido set status=4 where idPedido=reserva  and idLoja=findIdLoja; 
      end if;
  when 2 then
          update pedidoItens set situacao=2 where idPedido=reserva  and idLoja=findIdLoja;
  when 5 then
          update pedidoItens set situacao=5 where idPedido=reserva  and idLoja=findIdLoja;
  when 6 then
          update pedidoItens set situacao=6 where idPedido=reserva  and idLoja=findIdLoja;
  when 7 then
          update pedido set status=7 where idPedido=reserva  and idLoja=findIdLoja;
  when 8 then
          update pedidoItens set situacao=8 where idPedido=reserva  and idLoja=findIdLoja;
          delete from pedidoItens where idPedido=reserva  and idLoja=findIdLoja;
end case;
end $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `conector_status_pedido`
--

DROP PROCEDURE IF EXISTS `conector_status_pedido`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='' */ $$
CREATE DEFINER=`master`@`localhost` PROCEDURE `conector_status_pedido`(in tipo int, in find varchar(12))
begin   
case tipo
    when 1 then
    select 
            idStatusPedido,
            `descricao`,  
            `movimentaEstoque`,  
            `movimentaFinanceiro`,  
            `servico` 
    from conector.statusPedido;
    when 2 then
    select 
            idStatusPedido,
            `descricao`,  
            `movimentaEstoque`,  
            `movimentaFinanceiro`,  
            `servico` 
    from conector.statusPedido
    where idStatusPedido = find;
    when 3 then
    select 
            idStatusPedido,
            `descricao`,  
            `movimentaEstoque`,  
            `movimentaFinanceiro`,  
            `servico` 
    from conector.statusPedido
    where descricao like concat(find,'%');
    end case;
end $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `conector_status_reserva`
--

DROP PROCEDURE IF EXISTS `conector_status_reserva`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='' */ $$
CREATE DEFINER=`master`@`localhost` PROCEDURE `conector_status_reserva`( in tipo integer, in find varchar(45), in findIdLoja integer)
begin
declare reservado numeric(15,3) default 0;
declare disponivel numeric(15,3) default 0;
declare estoque numeric(15,3) default 0;
 select
       tab.idProduto,
       ifnull(reserva_itens(find,findIdLoja),0) as reservas,
       ifnull(tab5.quantidade,0) as estoque,
       round((tab5.quantidade - sum(ifnull(item.quantidade,0))),3) Disponivel
                from produto tab
             inner join unidadeMedida tab1 on(tab.idunidade = tab1.idunidadeMedida)
             inner join produtoEmbalagem tab2 on(tab.idproduto = tab2.idproduto)
             inner join produtoStore tab3 on(tab.idproduto = tab3.idproduto)
             inner join produtoPrice tab4 on(tab.idproduto = tab4.idproduto)
             inner join produtoEstoques tab5 on(tab.idproduto = tab5.idproduto)
             inner join (select ifnull(produto.idSetor,0) as setor, ifnull(setor.descricao,0) as descricao from produto left join setor on(produto.IdSetor = setor.idSetor) where idProduto=find) as newSetor
               on(tab.idsetor = newSetor.setor)
             inner join (select ifnull(produto.idGrupo,0)  as grupo, ifnull(grupo.descricao,0) as descricao from produto left join grupo on(produto.idGrupo = grupo.idGrupo) where idProduto=find) as newGrupo
               on(tab.idgrupo = newGrupo.grupo)
             inner join (select ifnull(produto.idCategoria,0) as categoria, ifnull(categoria.descricao,0) as descricao from produto left join categoria on(produto.IdCategoria = categoria.idCategoria) where idProduto=find) as newCategoria
               on(tab.idcategoria = newCategoria.categoria)
             inner join juridica on(tab.idFornecedor = juridica.idcliente)
             left join pedidoitens item on(tab.idProduto = item.idProduto)
 where
       tab2.defaultVenda = "s" and
       tab4.idloja = tab5.idloja and
       tab4.idloja = tab3.idloja and
       tab4.idloja = findIdLoja and
       tab.idProduto = find and
       newSetor.Setor > 0
 group by 1
 into @produto,  reservado, estoque, disponivel;
select @produto,  reservado, estoque, disponivel;
end $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `conector_sum_pagar`
--

DROP PROCEDURE IF EXISTS `conector_sum_pagar`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='' */ $$
CREATE DEFINER=`root`@`%` PROCEDURE `conector_sum_pagar`(in tipo smallint, in di varchar(12), in df varchar(12))
begin

case tipo
  when 1 then
      select round(((sum(valor)-sum(descontoconcedido)+sum(acrescimo)-sum(abatimento))-sum(valorPago)),2),round(sum(valorPago),2), round(sum(valor),2) from pagar where emissao between di and df;
  when 2 then
      select round(((sum(valor)-sum(descontoconcedido)+sum(acrescimo)-sum(abatimento))-sum(valorPago)),2),round(sum(valorPago),2), round(sum(valor),2) from pagar where vencimento between di and df;
  when 3 then
      select round(((sum(valor)-sum(descontoconcedido)+sum(acrescimo)-sum(abatimento))-sum(valorPago)),2),round(sum(valorPago),2), round(sum(valor),2) from pagar where pagamento between di and df;
  when 4 then
      select round(((sum(valor)-sum(descontoconcedido)+sum(acrescimo)-sum(abatimento))-sum(valorPago)),2),round(sum(valorPago),2), round(sum(valor),2) from pagar where dataEntrada between di and df;
          else
      select round(((sum(valor)-sum(descontoconcedido)+sum(acrescimo)-sum(abatimento))-sum(valorPago)),2),round(sum(valorPago),2), round(sum(valor),2) from pagar;
  end case;
end $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `conector_tributos`
--

DROP PROCEDURE IF EXISTS `conector_tributos`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='' */ $$
CREATE DEFINER=`root`@`localhost` PROCEDURE `conector_tributos`(coo double, store int(11), cx integer, tipo smallint)
begin
case tipo
  when 1 then
SELECT round(((tab.total*tab2.ibptax_nacionalFederal)/100),2), round(((tab.total*tab2.aliquotaInterna)/100),2)
                                      from
                                          CUPOM_DETALHES tab
                                               inner join produtoImpostos tab1 on(tab.Produto = tab1.idProduto and tab.Loja = tab1.idLoja)
                                               inner join spedNcm tab2 on(tab1.spedNcm = tab2.idSpedNcm)
                                                        where numeroCupom=coo and loja=store and terminal=cx;
  when 2 then
SELECT ifnull(sum(round(((total*aliquota)/100),2)),0)
                                      from CUPOM_DETALHES where numeroCupom=coo and loja=store and terminal=cx;

  when 3 then
SELECT tab.idProduto, round(((tab.valortotalNota*tab2.ibptax_nacionalFederal)/100),2), round(((tab.valortotalNota*tab2.aliquotaInterna)/100),2)
                                      from
                                          nfItem tab
                                               inner join produtoImpostos tab1 on(tab.idProduto = tab1.idProduto)
                                               inner join spedNcm tab2 on(tab1.spedNcm = tab2.idSpedNcm)
                                                        where idNf=coo and idloja=store group by 1;
  when 4 then
SELECT ifnull(round(sum(((tab.valortotalNota*tab2.ibptax_nacionalFederal)/100)),2),0), ifnull(round(sum(((tab.valortotalNota*tab2.aliquotaInterna)/100)),2),0),
       (ifnull(round(sum(((tab.valortotalNota*tab2.ibptax_nacionalFederal)/100)),2),0) + ifnull(round(sum(((tab.valortotalNota*tab2.aliquotaInterna)/100)),2),0))
                                      from
                                          nfItem tab
                                               inner join produtoImpostos tab1 on(tab.idProduto = tab1.idProduto)
                                               inner join spedNcm tab2 on(tab1.spedNcm = tab2.idSpedNcm)
                                                        where idNf=coo and idloja=store;
  when 5 then
select
truncate(sum(truncate(item.`icms`,2)+truncate(item.valorCofins,2)+truncate(item.valorPis,2)),2)
             from
                 produto tab
             inner join unidadeMedida tab1 on(tab.idunidade = tab1.idunidadeMedida)
             inner join produtoEmbalagem tab2 on(tab.idproduto = tab2.idproduto)
             inner join produtoStore tab3 on(tab.idproduto = tab3.idproduto)
             inner join produtoPrice tab4 on(tab.idproduto = tab4.idproduto)
             inner join produtoImpostos tab5 on(tab.idproduto = tab5.idproduto)
             left join spedNcm on(tab5.spedNcm =spedNcm.idSpedNcm)
             inner join nfItem item on(tab.idProduto = item.idProduto)
             inner join cst on(item.cstIcms = cst.idCst)
             inner join cfop on(item.cfop = cfop.cfop)
             left join cstIpi tab6 on (item.`cstIpi`=tab6.codigo)
             left join cstPis tab7 on (item.`cstPis`=tab7.codigo)
             left join cstCofins tab8 on (item.`cstCofins`=tab8.codigo)
where
             tab2.defaultVenda = "s" and
             tab3.Idloja = store and
             tab4.Idloja = store and
             tab5.Idloja = store and
             item.idnf = coo;
  end case;
end $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `conector_update_dataFinanciamento`
--

DROP PROCEDURE IF EXISTS `conector_update_dataFinanciamento`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='' */ $$
CREATE DEFINER=`root`@`%` PROCEDURE `conector_update_dataFinanciamento`(
                                                       in find_pedido integer,
                                                       in find_loja integer,
                                                       in tipo integer,
                                                       in dateNew datetime,
                                                       in parcela int
                                                     )
begin
case tipo

    when 3 then
    update
          pedidofinanceiro tab, pedidoParcelaCrediario tab1
            set tab1.vencimento=dateNew
                  where
                      tab.idPedido = tab1.idPedido and
                      tab.idLoja = tab1.idLoja and
                      tab.idPedido=find_pedido and
                      tab.idLoja=find_loja and
                      tab.idFinalizadora=3 and
                      tab1.idParcela=parcela;

  when 2 then
    update
       pedidofinanceiro tab, pedidoParcelaCheque tab1
          set tab1.deposito=dateNew
            where
                  tab.idPedido = tab1.idPedido and
                  tab.idLoja = tab1.idLoja and
                  tab.idPedido=find_pedido and
                  tab.idLoja=find_loja and
                  tab.idFinalizadora=2 and
                  tab1.sequencial=parcela;

  when 4 then
update
      pedidofinanceiro tab, pedidoParcelaConvenio tab1
         set
           tab1.vencimento=dateNew
              where
                  tab.idPedido = tab1.idPedido and
                  tab.idLoja = tab1.idLoja and
                  tab.idPedido=find_pedido and
                  tab.idLoja=find_loja and
                  tab.idFinalizadora=4 and
                  tab1.idParcela=parcela;
  when 5 then
update
      pedidofinanceiro tab,
      pedidoParcelaCartao tab1
          set
             tab1.vencimento = dateNew
            where
                  tab.idPedido = tab1.idPedido and
                  tab.idLoja = tab1.idLoja and
                  tab.idPedido=find_pedido and
                  tab.idLoja=find_loja and
                  tab.idFinalizadora=5 and
                   tab1.idParcela=parcela;
  when 6 then
update
      pedidofinanceiro tab,
      pedidoParcelaCartao tab1
          set
             tab1.vencimento = dateNew
            where
                  tab.idPedido = tab1.idPedido and
                  tab.idLoja = tab1.idLoja and
                  tab.idPedido=find_pedido and
                  tab.idLoja=find_loja and
                  tab.idFinalizadora=6 and
                  tab1.idParcela=parcela;
  when 7 then
update
        pedidofinanceiro tab,
        pedidoParcelaBoleto tab1
              set
                 tab4.vencimento=dateNew
                  where
                        tab.idPedido = tab1.idPedido and
                        tab.idLoja = tab1.idLoja and
                        tab.idPedido=find_pedido and
                        tab.idLoja=find_loja and
                        tab.idFinalizadora=7 and
                        tab1.idParcela=parcela;

end case;
end $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `conector_update_entradaFinanceiro`
--

DROP PROCEDURE IF EXISTS `conector_update_entradaFinanceiro`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='' */ $$
CREATE DEFINER=`master`@`localhost` PROCEDURE `conector_update_entradaFinanceiro`(in chave double)
begin
            declare VarNfidentrada DOUBLE;
            declare VarNfidfinalizadora INT(11);
            declare VarNfdocumento VARCHAR(20);
            declare VarNfprazo INT(11);
            declare VarNfaceite DATE;
            declare VarNfvencimento DATE;
            declare VarNfcompetencia DATE;
            declare VarNfemissaoDocumento DATE;
            declare VarNfdesconto DECIMAL(15,3) default 0;
            declare VarNffinanceiro DECIMAL(15,3) default 0;
            declare VarNfvalor DECIMAL(15,3);
            declare VarNfparcela VARCHAR(5);
            declare VarNfidbanco INT(11);
            declare VarNfnossoNumero VARCHAR(20) default "0000000000";
            declare VarNfconta INT(11) default 0;
            declare VarNfcedente VARCHAR(20) default "00000000";
            declare VarNfformaPgto VARCHAR(2) default "00";
            declare VarNfIdCompra double;
            declare done int default false;
            declare VarIDCodPgto int(11);
            declare v0 int default 1;
            declare v1 int;
            declare VarDiasVencimento integer default 1;
            
            set v0 = 1;
            set VarDiasVencimento =1;
            
            select  idCompra, 
                    nr_nota, 
                    emissao
                           from entrada 
                                    where idEntrada=chave
                                                into VarNfIdCompra, 
                                                     VarNfdocumento, 
                                                     VarNfemissaoDocumento;
                                                     
            select defaultBanco 
                                from system
                                         into VarNfidbanco;
                                         
            select distinct(idCondicaoPgto)
                        from pedidoCompraVencimento
                                    where idPedidoCompra=VarNfIdCompra
                                                        into VarIDCodPgto;

            select diasVencimento, 
                   `numeroParcelas`,
                   idfinalizadora
                                            from condicaoPgto 
                                                        where idCondicaoPgto=VarIDCodPgto
                                                                    into VarDiasVencimento, VarNfparcela,VarNfidfinalizadora;
                                                                    if(VarNfparcela is null)then set VarNfparcela=0; end if;
            
            select 
                MAX(distinct(valorParcela))
                    from conector.pedidocompravencimento 
                                            where idPedidoCompra=VarNfIdCompra
                                                            into 
                                                                 VarNfvalor;

    set v1 = VarDiasVencimento;
    
    
  WHILE v0 <= VarNfparcela DO
            
    INSERT INTO `conector`.`entradafinanceiro`
        (
            `identrada`,
            `idfinalizadora`,
            `documento`,
            `prazo`,
            `aceite`,
            `vencimento`,
            `competencia`,
            `emissaoDocumento`,
            `desconto`,
            `financeiro`,
            `valor`,
            `parcela`,
            `idbanco`,
            `nossoNumero`,
            `conta`,
            `cedente`,
            `formaPgto`
        )
    VALUES
        (
            chave,
            VarNfidfinalizadora,
            VarNfdocumento ,
            v1,
            '0000-00-00' ,
            ADDDATE(VarNfemissaoDocumento, v1),
            '0000-00-00',
            VarNfemissaoDocumento,
            VarNfdesconto,
            VarNffinanceiro,
            VarNfvalor,
            concat(v0,"/",VarNfparcela),
            VarNfidbanco,
            VarNfnossoNumero,
            VarNfconta ,
            VarNfcedente ,
            VarNfformaPgto
        );
        
                SET v0 = v0 + 1;
		            SET v1 = v1 + VarDiasVencimento;
		  END WHILE;

end $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `conector_update_entradaItemCompra`
--

DROP PROCEDURE IF EXISTS `conector_update_entradaItemCompra`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='' */ $$
CREATE DEFINER=`master`@`localhost` PROCEDURE `conector_update_entradaItemCompra`(
                                                store double,
                                                chave double,
                                                chaveCompra double
                                            )
begin

                          DECLARE done int default false;
                          declare VarEstadoFor char(2);
                          declare VarEstadoSto char(2);
                          declare VarItemNFidProduto  INT(11);
                          declare VarItemNFcustoLiquido  DECIMAL(15,3) DEFAULT 0;
                          declare VarItemNFcustoBruto  DECIMAL(15,3) DEFAULT 0;
                          declare VarItemNFcustoNota  DECIMAL(15,3) DEFAULT 0;
                          declare VarItemNFcustoNotaTotal  DECIMAL(15,3) DEFAULT 0;
                          declare VarItemNFcustoReposicao  DECIMAL(15,3) DEFAULT 0;
                          declare VarItemNFcustoTotal  DECIMAL(15,3) DEFAULT 0;
                          declare VarItemNFdiscount1  DECIMAL(15,3) DEFAULT 0;
                          declare VarItemNFdiscount2  DECIMAL(15,3) DEFAULT 0;
                          declare VarItemNFdiscount3  DECIMAL(15,3) DEFAULT 0;
                          declare VarItemNFdiscountValue  DECIMAL(15,3) DEFAULT 0;
                          declare VarItemNFacrescimo  DECIMAL(15,3) DEFAULT 0;
                          declare VarItemNFbonificacao  DECIMAL(15,3) DEFAULT 0;
                          declare VarItemNFdespesasNaoTributadas  DECIMAL(15,3) DEFAULT 0;
                          declare VarItemNFdespesasTributadas  DECIMAL(15,3) DEFAULT 0;
                          declare VarItemNFchaveEmbalagem  INT;
                          declare VarItemNFbarra  DOUBLE;
                          declare VarItemNFidunidadeMedida  INT;
                          declare VarItemNFentregue  VARCHAR(1);
                          declare VarItemNFvendo  DECIMAL(15,3) DEFAULT 0;
                          declare VarItemNFfinanceiro  DECIMAL(15,3) DEFAULT 0;
                          declare VarItemNFfrete  DECIMAL(15,3) DEFAULT 0;
                          declare VarItemNFicmsEntrada  DECIMAL(15,3) DEFAULT 0;
                          declare VarItemNFreducaoEntrada  DECIMAL(15,3) DEFAULT 0;
                          declare VarItemNFicmsFrete  DECIMAL(15,3) DEFAULT 0;
                          declare VarItemNFicmsSaida  DECIMAL(15,3) DEFAULT 0;
                          declare VarItemNFreducaoSaida  DECIMAL(15,3) DEFAULT 0;
                          declare VarItemNFipi  DECIMAL(15,3) DEFAULT 0;
                          declare VarItemNFpriceVenda  DECIMAL(15,3) DEFAULT 0;
                          declare VarItemNFquantidade  DECIMAL(15,3) DEFAULT 0;
                          declare VarItemNFsugestao  DECIMAL(15,3) DEFAULT 0;
                          declare VarItemNFvalorIpi  DECIMAL(15,3) DEFAULT 0;
                          declare VarItemNFsubstituicao  DECIMAL(15,3) DEFAULT 0;
                          declare VarItemNFlucro  DECIMAL(15,3) DEFAULT 0;
                          declare VarItemNFlucroValor  DECIMAL(15,3) DEFAULT 0;
                          declare VarItemNFlucroBruto  DECIMAL(15,3) DEFAULT 0;
                          declare VarItemNFcreditoIcms  DECIMAL(15,3) DEFAULT 0;
                          declare VarItemNFcreditoPis  DECIMAL(15,3) DEFAULT 0;
                          declare VarItemNFcreditoCofins  DECIMAL(15,3) DEFAULT 0;
                          declare VarItemNFvalorFinanceiro  DECIMAL(15,3) DEFAULT 0;
                          declare VarItemNFvalorFrete  DECIMAL(15,3) DEFAULT 0;
                          declare VarItemNFsumFrete  TINYINT;
                          declare VarItemNFserie  VARCHAR(3);
                          declare VarItemNFdiferencaQtty  DECIMAL(15,3) DEFAULT 0;
                          declare VarItemNFdiferencaCustoLiqNota  DECIMAL(15,3) DEFAULT 0;
                          declare VarItemNFdiferencaCustoTotalNota  DECIMAL(15,3) DEFAULT 0;
                          declare VarItemNFdateInsert  DATE;
                          declare VarItemNFmargem  DECIMAL(15,3) DEFAULT 0;
                          declare VarItemNFsumSt  TINYINT;
                          declare VarItemNFcstIpi  INT;
                          declare VarItemNFcstPis  INT;
                          declare VarItemNFcstCofins  INT;
                          declare VarItemNFcstIcms  CHAR(3);
                          declare VarItemNFicmsCreditoSt  DECIMAL(15,3) DEFAULT 0;
                          declare VarItemNFicmsTotalSt  DECIMAL(15,3) DEFAULT 0;
                          declare VarItemNFcfopInput  VARCHAR(6);
                          declare VarItemNFcfopOutput  VARCHAR(6);
                          declare VarItemNFcteInterna  DECIMAL(15,3) DEFAULT 0;
                          declare VarItemNFcteInterestadual  DECIMAL(15,3) DEFAULT 0;
                          declare VarItemNFvalorIcmsSubstituicao  DECIMAL(15,3) DEFAULT 0;
                          declare VarItemNFbaseCalculoSubstituicao  DECIMAL(15,3) DEFAULT 0;
                          declare VarItemNFbasePis  DECIMAL(15,3) DEFAULT 0;
                          declare VarItemNFbaseCofins  DECIMAL(15,3) DEFAULT 0;
                          declare VarItemNFvalorPis  DECIMAL(15,3) DEFAULT 0;
                          declare VarItemNFvalorCofins  DECIMAL(15,3) DEFAULT 0;
                          declare VarItemNFestoque  DECIMAL(15,3) DEFAULT 0;
                          declare VarItemNFvalorIpiTotal  DECIMAL(15,3) DEFAULT 0;
                          declare VarItemNFbaseIcms  DECIMAL(15,3) DEFAULT 0;
                          declare VarItemNFcustoLiquidoAnterior  DECIMAL(15,3) DEFAULT 0;
                          declare VarItemNFlucroAnterior  DECIMAL(15,3) DEFAULT 0;
                          declare VarItemNFcustoTransferencia  DECIMAL(15,3) DEFAULT 0;
                          declare VarItemNFbonificacaoValor  DECIMAL(15,3) DEFAULT 0;
                          declare VarItemNFvalidade  CHAR(8);
                          declare VarItemNFfreteValor  DECIMAL(15,3) DEFAULT 0;
                          declare VarItemNFflagRecebe  TINYINT;
                          declare VarItemNFtypeAliquota  VARCHAR(1);
                          declare VarItemNFporcentagemTransf  DECIMAL(15,3) DEFAULT 0;
                          declare VarItemNFchaveItemCompra  DOUBLE;
                          declare VarItemNFcustoMedio  DECIMAL(15,3);
                          declare VarCSTIPI CHAR(3);
                          declare VarCSTPIS CHAR(3);
                          declare VarCSTCOFINS CHAR(3);
                          declare VarNumberNota varchar(10);
                          declare VarSerie varchar(3);
                          declare VarFornecedor double;
                          declare VarCFOP VARCHAR(6);

if((select count(*) from entradaItem where identrada=chave) > 0)then
    delete from entradaItem where identrada=chave; end if;

  if(chaveCompra > 0)then
    set VarItemNFchaveItemCompra = chaveCompra;
    select nr_nota, serie, idCliente
                  from entrada where idEntrada=chave
                                          into VarNumberNota, VarSerie, VarFornecedor;
  else
    select nr_nota, serie, idCliente,idCompra
                  from entrada where idEntrada=chave
                                          into VarNumberNota, VarSerie, VarFornecedor, VarItemNFchaveItemCompra;
  end if;


select
        uf
            from cliente
                        where idCliente=VarFornecedor
                                                    into VarEstadoFor;
select
        uf
            from loja
                        where idLoja=store
                                         into VarEstadoSto;

begin
        declare fonteOne Cursor for select
                                        tab.`idProduto`,
                                        tab.`custoLiquido`,
                                        tab.`custoBruto`,
                                        tab.`custoNota`,
                                        tab.`custoNotaTotal`,
                                        tab.`custoReposicao`,
                                        tab.`custoTotal`,
                                        tab.`discount1`,
                                        tab.`discount2`,
                                        tab.`discount3`,
                                        tab.`discountValue`,
                                        tab.`acrescimo`,
                                        tab.`bonificacao`,
                                        tab.`despesasNaoTributadas`,
                                        tab.`despesasTributadas`,
                                        tab.`chaveEmbalagem`,
                                        tab.`barra`,
                                        tab.`idunidadeMedida`,
                                        tab.`entregue`,
                                        tab.`financeiro`,
                                        tab.`frete`,
                                        tab.`icmsEntrada`,
                                        tab.`reducaoEntrada`,
                                        tab.`icmsFrete`,
                                        tab.`icmsSaida`,
                                        tab.`reducaoSaida`,
                                        tab.`ipi`,
                                        tab.`priceVenda`,
                                        tab.`quantidade`,
                                        tab.`sugestao`,
                                        tab.`valorIpi`,
                                        tab.`substituicao`,
                                        tab.`lucro`,
                                        tab.`lucroValor`,
                                        tab.`lucroBruto`,
                                        tab.`creditoIcms`,
                                        tab.`creditoPis`,
                                        tab.`creditoCofins`,
                                        tab.`baseCalculoSubstituicao`,
                                        tab.`icmsSt`,
                                        tab.`valorFinanceiro`,
                                        tab.`valorFrete`,
                                        tab.`sumFrete`,
                                        tab.`margem`,
                                        tab.`sumSt`,
                                        tab3.cst,
                                        tab5.tipo,
                                        ifnull(tab3.cstSaida,""),
                                        ifnull(tab7.`cstPisEntrada`,""),
                                        ifnull(tab7.`cstCofinsEntrada`,""),
                                        ifnull(tab1.inputCfop,""),
                                        ifnull(tab1.outputCfop,"")
                                                    from
                                                            pedidocompraitens tab
                                                            inner join produto tab1 on(tab.idProduto = tab1.idProduto)
                                                            inner join produtoPrice tab2 on(tab.idProduto = tab2.idProduto)
                                                            inner join produtoImpostos tab3 on(tab.idProduto = tab3.idProduto)
                                                            inner join pedidoCompra tab4 on(tab.idPedidoCompra=tab4.idPedidoCompra)
                                                            inner join aliquota tab5 on(tab3.tributacao=tab5.idAliquota)
                                                            inner join pisCofins tab6 on(tab3.idPisCofins = tab6.idPisCofins)
                                                            left join (SELECT
                                                                                     tab.idPisCofins,
                                                                                     max(tab.idpisCofinsAnexo),
                                                                                     tab.`cstPisEntrada`,
                                                                                     tab.`cstCofinsEntrada`
                                                                                                FROM pisCofinsAnexo tab
                                                                                                 inner join pisCofinsAnexo tab1 on(tab.idPisCofins = tab1.idPisCofins) group by 1) tab7 on(tab6.idPisCofins = tab7.idPisCofins)
                                                                        where tab4.idLoja=store and
                                                                              tab3.idLoja=store and
                                                                              tab2.idLoja=store and
                                                                              tab.idPedidoCompra = VarItemNFchaveItemCompra;
        declare continue handler for not found set done = true;
        open fonteOne;
        read_loop: LOOP
                    fetch fonteOne into
                                    VarItemNFidProduto,
                                    VarItemNFcustoLiquido,
                                    VarItemNFcustoBruto,
                                    VarItemNFcustoNota,
                                    VarItemNFcustoNotaTotal,
                                    VarItemNFcustoReposicao,
                                    VarItemNFcustoTotal,
                                    VarItemNFdiscount1,
                                    VarItemNFdiscount2,
                                    VarItemNFdiscount3,
                                    VarItemNFdiscountValue,
                                    VarItemNFacrescimo,
                                    VarItemNFbonificacao,
                                    VarItemNFdespesasNaoTributadas,
                                    VarItemNFdespesasTributadas,
                                    VarItemNFchaveEmbalagem,
                                    VarItemNFbarra,
                                    VarItemNFidunidadeMedida,
                                    VarItemNFentregue,
                                    VarItemNFfinanceiro,
                                    VarItemNFfrete,
                                    VarItemNFicmsEntrada,
                                    VarItemNFreducaoEntrada,
                                    VarItemNFicmsFrete,
                                    VarItemNFicmsSaida,
                                    VarItemNFreducaoSaida,
                                    VarItemNFipi,
                                    VarItemNFpriceVenda,
                                    VarItemNFquantidade,
                                    VarItemNFsugestao,
                                    VarItemNFvalorIpi,
                                    VarItemNFsubstituicao,
                                    VarItemNFlucro,
                                    VarItemNFlucroValor,
                                    VarItemNFlucroBruto,
                                    VarItemNFcreditoIcms,
                                    VarItemNFcreditoPis,
                                    VarItemNFcreditoCofins,
                                    VarItemNFbaseCalculoSubstituicao,
                                    VarItemNFvalorIcmsSubstituicao,
                                    VarItemNFvalorFinanceiro,
                                    VarItemNFvalorFrete,
                                    VarItemNFsumFrete,
                                    VarItemNFmargem,
                                    VarItemNFsumSt,
                                    VarItemNFcstIcms,
                                    VarItemNFtypeAliquota,
                                    VarCSTIPI,
                                    VarCSTPIS,
                                    VarCSTCOFINS,
                                    VarItemNFcfopInput,
                                    VarItemNFcfopOutput;

                                    if done then
                                        leave read_loop;
                                    end if;

                                    IF(VarEstadoSto=VarEstadoFor)THEN
                                        set VarCFOP=VarItemNFcfopInput;
                                            ELSE
                                                set VarCFOP=VarItemNFcfopOutput;
                                    END IF;
                                    
                                     select tributacao from produtoImpostos where idProduto= VarItemNFidProduto and idLoja=store into @a;
                                     select reducao from aliquota where idAliquota=@a into VarItemNFreducaoSaida;

                                    if(VarCFOP is null || VarCFOP = '')then
                                        case VarItemNFtypeAliquota
                                                when 't' then
                                                IF(VarEstadoSto=VarEstadoFor)THEN
                                                    set VarCFOP='1102';
                                                        ELSE 
                                                        set VarCFOP='2102';
                                                        END IF;
                                                when 's' then
                                                    IF(VarEstadoSto=VarEstadoFor)THEN
                                                    set VarCFOP='1403';
                                                        ELSE 
                                                        set VarCFOP='2403';
                                                        END IF;
                                                    ELSE set VarCFOP='1102'; end case;
                                    end if;
                                    if(VarCSTIPI <> "")then
                                      select idCstIpi from cstIpi where codigo=VarCSTIPI into @CHAVEIPI;
                                          else set @CHAVEIPI = "3";
                                    end if;
                                    if(VarCSTPIS <> "") then
                                      select idCstPis from cstPis where codigo=VarCSTPIS into @CHAVEPIS;
                                          else  set @CHAVEPIS = "33";
                                    end if;
                                    if(VarCSTCOFINS <> "") then
                                      select idCstCofins from cstCofins where codigo=VarCSTCOFINS into @CHAVECOFINS;
                                          else set @CHAVECOFINS = "33";
                                    end if;

                                    INSERT INTO `conector`.`entradaitem`
                                    (
                                        `identrada`,
                                        `idProduto`,
                                        `custoLiquido`,
                                        `custoBruto`,
                                        `custoNota`,
                                        `custoNotaTotal`,
                                        `custoReposicao`,
                                        `custoTotal`,
                                        `discount1`,
                                        `discount2`,
                                        `discount3`,
                                        `discountValue`,
                                        `acrescimo`,
                                        `bonificacao`,
                                        `despesasNaoTributadas`,
                                        `despesasTributadas`,
                                        `chaveEmbalagem`,
                                        `barra`,
                                        `idunidadeMedida`,
                                        `entregue`,
                                        `vendo`,
                                        `financeiro`,
                                        `frete`,
                                        `icmsEntrada`,
                                        `reducaoEntrada`,
                                        `icmsFrete`,
                                        `icmsSaida`,
                                        `reducaoSaida`,
                                        `ipi`,
                                        `priceVenda`,
                                        `quantidade`,
                                        `sugestao`,
                                        `valorIpi`,
                                        `substituicao`,
                                        `lucro`,
                                        `lucroValor`,
                                        `lucroBruto`,
                                        `quantidadeRecebida`,
                                        `quantidadePendente`,
                                        `creditoIcms`,
                                        `creditoPis`,
                                        `creditoCofins`,
                                        `valorFinanceiro`,
                                        `valorFrete`,
                                        `sumFrete`,
                                        `numeroNota`,
                                        `serie`,
                                        `dateInsert`,
                                        `margem`,
                                        `sumSt`,
                                        `cstIpi`,
                                        `cstPis`,
                                        `cstCofins`,
                                        `cstIcms`,
                                        `cfop`,
                                        `baseIcms`,
                                        `valorIcmsSubstituicao`,
                                        `baseCalculoSubstituicao`,
                                        `typeAliquota`,
                                        `chaveItemCompra`
                                    )
                                        VALUES
                                    (
                                        chave,
                                        VarItemNFidProduto,
                                        VarItemNFcustoLiquido,
                                        VarItemNFcustoBruto,
                                        VarItemNFcustoNota,
                                        VarItemNFcustoNotaTotal,
                                        VarItemNFcustoReposicao,
                                        VarItemNFcustoTotal,
                                        VarItemNFdiscount1,
                                        VarItemNFdiscount2,
                                        VarItemNFdiscount3,
                                        VarItemNFdiscountValue,
                                        VarItemNFacrescimo,
                                        VarItemNFbonificacao,
                                        VarItemNFdespesasNaoTributadas,
                                        VarItemNFdespesasTributadas,
                                        VarItemNFchaveEmbalagem,
                                        VarItemNFbarra,
                                        VarItemNFidunidadeMedida,
                                        VarItemNFentregue,
                                        0.000,                                         VarItemNFfinanceiro,
                                        VarItemNFfrete,
                                        VarItemNFicmsEntrada,
                                        VarItemNFreducaoEntrada,
                                        VarItemNFicmsFrete,
                                        VarItemNFicmsSaida,
                                        VarItemNFreducaoSaida,
                                        VarItemNFipi,
                                        VarItemNFpriceVenda,
                                        VarItemNFquantidade,
                                        VarItemNFsugestao,
                                        VarItemNFvalorIpi,
                                        VarItemNFsubstituicao,
                                        VarItemNFlucro,
                                        VarItemNFlucroValor,
                                        VarItemNFlucroBruto,
                                        VarItemNFquantidade,                                         (VarItemNFquantidade-VarItemNFquantidade),                                         VarItemNFcreditoIcms,
                                        VarItemNFcreditoPis,
                                        VarItemNFcreditoCofins,
                                        VarItemNFvalorFinanceiro,
                                        VarItemNFvalorFrete,
                                        VarItemNFsumFrete,
                                        VarNumberNota, 
                                        VarSerie,
                                        now(),
                                        VarItemNFmargem,
                                        VarItemNFsumSt,
                                        @CHAVEIPI,
                                        @CHAVEPIS,
                                        @CHAVECOFINS,
                                        VarItemNFcstIcms,
                                        VarCFOP,
                                        VarItemNFcustoTotal,                                         VarItemNFvalorIcmsSubstituicao,
                                        VarItemNFbaseCalculoSubstituicao,
                                        VarItemNFtypeAliquota,
                                        VarItemNFchaveItemCompra);


                  end loop;                 close fonteOne;



    end; end $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `conector_update_entradaItemTransf`
--

DROP PROCEDURE IF EXISTS `conector_update_entradaItemTransf`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='' */ $$
CREATE DEFINER=`master`@`localhost` PROCEDURE `conector_update_entradaItemTransf`(
                                                store double,
                                                chave double,
                                                chaveNf double
                                            )
begin

                          DECLARE done int default false;
                          declare VarEstadoFor char(2);
                          declare VarEstadoSto char(2);
                          declare VarItemNFidProduto  INT(11);
                          declare VarItemNFcustoLiquido  DECIMAL(15,3) DEFAULT 0;
                          declare VarItemNFcustoBruto  DECIMAL(15,3) DEFAULT 0;
                          declare VarItemNFcustoNota  DECIMAL(15,3) DEFAULT 0;
                          declare VarItemNFcustoNotaTotal  DECIMAL(15,3) DEFAULT 0;
                          declare VarItemNFcustoReposicao  DECIMAL(15,3) DEFAULT 0;
                          declare VarItemNFcustoTotal  DECIMAL(15,3) DEFAULT 0;
                          declare VarItemNFdiscount1  DECIMAL(15,3) DEFAULT 0;
                          declare VarItemNFdiscount2  DECIMAL(15,3) DEFAULT 0;
                          declare VarItemNFdiscount3  DECIMAL(15,3) DEFAULT 0;
                          declare VarItemNFdiscountValue  DECIMAL(15,3) DEFAULT 0;
                          declare VarItemNFacrescimo  DECIMAL(15,3) DEFAULT 0;
                          declare VarItemNFbonificacao  DECIMAL(15,3) DEFAULT 0;
                          declare VarItemNFdespesasNaoTributadas  DECIMAL(15,3) DEFAULT 0;
                          declare VarItemNFdespesasTributadas  DECIMAL(15,3) DEFAULT 0;
                          declare VarItemNFchaveEmbalagem  INT;
                          declare VarItemNFbarra  DOUBLE;
                          declare VarItemNFidunidadeMedida  INT;
                          declare VarItemNFentregue  VARCHAR(1);
                          declare VarItemNFvendo  DECIMAL(15,3) DEFAULT 0;
                          declare VarItemNFfinanceiro  DECIMAL(15,3) DEFAULT 0;
                          declare VarItemNFfrete  DECIMAL(15,3) DEFAULT 0;
                          declare VarItemNFicmsEntrada  DECIMAL(15,3) DEFAULT 0;
                          declare VarItemNFreducaoEntrada  DECIMAL(15,3) DEFAULT 0;
                          declare VarItemNFicmsFrete  DECIMAL(15,3) DEFAULT 0;
                          declare VarItemNFicmsSaida  DECIMAL(15,3) DEFAULT 0;
                          declare VarItemNFreducaoSaida  DECIMAL(15,3) DEFAULT 0;
                          declare VarItemNFipi  DECIMAL(15,3) DEFAULT 0;
                          declare VarItemNFpriceVenda  DECIMAL(15,3) DEFAULT 0;
                          declare VarItemNFquantidade  DECIMAL(15,3) DEFAULT 0;
                          declare VarItemNFsugestao  DECIMAL(15,3) DEFAULT 0;
                          declare VarItemNFvalorIpi  DECIMAL(15,3) DEFAULT 0;
                          declare VarItemNFsubstituicao  DECIMAL(15,3) DEFAULT 0;
                          declare VarItemNFlucro  DECIMAL(15,3) DEFAULT 0;
                          declare VarItemNFlucroValor  DECIMAL(15,3) DEFAULT 0;
                          declare VarItemNFlucroBruto  DECIMAL(15,3) DEFAULT 0;
                          declare VarItemNFcreditoIcms  DECIMAL(15,3) DEFAULT 0;
                          declare VarItemNFcreditoPis  DECIMAL(15,3) DEFAULT 0;
                          declare VarItemNFcreditoCofins  DECIMAL(15,3) DEFAULT 0;
                          declare VarItemNFvalorFinanceiro  DECIMAL(15,3) DEFAULT 0;
                          declare VarItemNFvalorFrete  DECIMAL(15,3) DEFAULT 0;
                          declare VarItemNFsumFrete  TINYINT;
                          declare VarItemNFserie  VARCHAR(3);
                          declare VarItemNFdiferencaQtty  DECIMAL(15,3) DEFAULT 0;
                          declare VarItemNFdiferencaCustoLiqNota  DECIMAL(15,3) DEFAULT 0;
                          declare VarItemNFdiferencaCustoTotalNota  DECIMAL(15,3) DEFAULT 0;
                          declare VarItemNFdateInsert  DATE;
                          declare VarItemNFmargem  DECIMAL(15,3) DEFAULT 0;
                          declare VarItemNFsumSt  TINYINT;
                          declare VarItemNFcstIpi  INT;
                          declare VarItemNFcstPis  INT;
                          declare VarItemNFcstCofins  INT;
                          declare VarItemNFcstIcms  CHAR(3);
                          declare VarItemNFicmsCreditoSt  DECIMAL(15,3) DEFAULT 0;
                          declare VarItemNFicmsTotalSt  DECIMAL(15,3) DEFAULT 0;
                          declare VarItemNFcfopInput  VARCHAR(6);
                          declare VarItemNFcfopOutput  VARCHAR(6);
                          declare VarItemNFcteInterna  DECIMAL(15,3) DEFAULT 0;
                          declare VarItemNFcteInterestadual  DECIMAL(15,3) DEFAULT 0;
                          declare VarItemNFvalorIcmsSubstituicao  DECIMAL(15,3) DEFAULT 0;
                          declare VarItemNFbaseCalculoSubstituicao  DECIMAL(15,3) DEFAULT 0;
                          declare VarItemNFbasePis  DECIMAL(15,3) DEFAULT 0;
                          declare VarItemNFbaseCofins  DECIMAL(15,3) DEFAULT 0;
                          declare VarItemNFvalorPis  DECIMAL(15,3) DEFAULT 0;
                          declare VarItemNFvalorCofins  DECIMAL(15,3) DEFAULT 0;
                          declare VarItemNFestoque  DECIMAL(15,3) DEFAULT 0;
                          declare VarItemNFvalorIpiTotal  DECIMAL(15,3) DEFAULT 0;
                          declare VarItemNFbaseIcms  DECIMAL(15,3) DEFAULT 0;
                          declare VarItemNFcustoLiquidoAnterior  DECIMAL(15,3) DEFAULT 0;
                          declare VarItemNFlucroAnterior  DECIMAL(15,3) DEFAULT 0;
                          declare VarItemNFcustoTransferencia  DECIMAL(15,3) DEFAULT 0;
                          declare VarItemNFbonificacaoValor  DECIMAL(15,3) DEFAULT 0;
                          declare VarItemNFvalidade  CHAR(8);
                          declare VarItemNFfreteValor  DECIMAL(15,3) DEFAULT 0;
                          declare VarItemNFflagRecebe  TINYINT;
                          declare VarItemNFtypeAliquota  VARCHAR(1);
                          declare VarItemNFporcentagemTransf  DECIMAL(15,3) DEFAULT 0;
                          declare VarItemNFchaveItemNf  DOUBLE;
                          declare VarItemNFcustoMedio  DECIMAL(15,3);
                          declare VarCSTIPI CHAR(3);
                          declare VarCSTPIS CHAR(3);
                          declare VarCSTCOFINS CHAR(3);
                          declare VarNumberNota varchar(10);
                          declare VarSerie varchar(3);
                          declare VarFornecedor double;
                          declare VarCFOP VARCHAR(6);
                          declare VarCount int default 0;
                          declare VarPedido double default 0;

if((select count(*) from entradaItem where identrada=chave) > 0)then
    delete from entradaItem where identrada=chave; end if;

  if(chaveNf > 0)then
    set VarItemNFchaveItemNf = chaveNf;
    select nr_nota, serie, idCliente
                  from entrada where idEntrada=chave
                                          into VarNumberNota, VarSerie, VarFornecedor;
  end if;


select
        uf
            from cliente
                        where idCliente=VarFornecedor
                                                    into VarEstadoFor;
select
        uf
            from loja
                        where idLoja=store
                                         into VarEstadoSto;
select idPedido from nf where nf.nf=chaveNf into VarPedido;

begin
        declare fonteOne Cursor for select
                                        
                                        

                                        tab.`idProduto`,
                                        tab.`valorLiquido`,
                                        tab.`priceVenda`,
                                        tab.`priceVenda`,
                                        ((tab.`priceVenda`*tab.quantidade)-tab.descontoValor),
                                        0, 
                                        (tab.`priceVenda`*tab.quantidade),
                                        tab.`desconto`,
                                        0, 
                                        0, 
                                        tab.`descontoValor`,
                                        tab.`acrescimo`,
                                        0, 
                                         tab2.`despesaNaoTributadas`,
                                         tab2.`despesasTributadas`,
                                        tab8.idProdutoEmbalagem,
                                        tab8.`barra`,
                                        tab8.`idunidadeMedida`, 
                                        0, 
                                         tab2.`financeiro`,
                                        tab.`frete`,
                                        TAB2.CREDITOICMS, 
                                        TAB2.CREDITOREDICMS, 
                                        0, 
                                        tab2.`debitoIcms`,
                                         tab2.`debitoRedIcms`,
                                        tab.`ipi`,
                                        tab2.`priceVenda`,
                                        tab.`quantidade`,
                                        tab2.`pricesugestao`,
                                        tab.`valorIpi`,
                                        tab.`valorIcmsSubstituicao`,
                                        tab2.`lucroLiquido`,
                                        0, 
                                        tab2.`lucroBruto`,
                                        tab.`icms`,
                                        tab.`valorPis`,
                                        tab.`valorCofins`,
                                        tab.`baseCalculoIcmsSubstituicao`,
                                        tab.`valorIcmsSubstituicao`,
                                        0, 
                                        tab.`valorFrete`,
                                        if(tab4.typeFrete=2,true,false), 
                                        tab2.`margemLIQUIDA`,
                                        if(tab.`baseCalculoIcmsSubstituicao` > 0,true,false), 
                                        tab3.cst,
                                        tab5.tipo,
                                        ifnull(tab3.cstSaida,""),
                                        ifnull(tab7.`cstPisEntrada`,""),
                                        ifnull(tab7.`cstCofinsEntrada`,""),
                                        ifnull(tab9.cfop1,""),
                                        ifnull(tab9.cfop2,"")
                                                    from
                                                            nfitem tab
                                                            inner join produto tab1 on(tab.idProduto = tab1.idProduto)
                                                            inner join produtoEmbalagem tab8 on(tab.idProduto = tab8.idProduto)
                                                            inner join produtoPrice tab2 on(tab.idProduto = tab2.idProduto)
                                                            inner join produtoImpostos tab3 on(tab.idProduto = tab3.idProduto)
                                                            inner join nf tab4 on(tab.idNf=tab4.nf)
                                                            INNER JOIN paramentro_faturamento tab9 on(tab4.idParamentro = tab9.idParamentro)
                                                            inner join aliquota tab5 on(tab3.tributacao=tab5.idAliquota)
                                                            inner join pisCofins tab6 on(tab3.idPisCofins = tab6.idPisCofins)
                                                            left join (SELECT
                                                                                     tab.idPisCofins,
                                                                                     max(tab.idpisCofinsAnexo),
                                                                                     tab.`cstPisEntrada`,
                                                                                     tab.`cstCofinsEntrada`
                                                                                                FROM pisCofinsAnexo tab
                                                                                                 inner join pisCofinsAnexo tab1 on(tab.idPisCofins = tab1.idPisCofins) group by 1) tab7 on(tab6.idPisCofins = tab7.idPisCofins)
                                                                        where tab4.Loja=store and
                                                                              tab3.idLoja=store and
                                                                              tab2.idLoja=store and
                                                                              tab.idNf = chaveNf and tab8.defaultVenda='s';
        declare continue handler for not found set done = true;
        open fonteOne;
        read_loop: LOOP
                    fetch fonteOne into
                                    VarItemNFidProduto,
                                    VarItemNFcustoLiquido,
                                    VarItemNFcustoBruto,
                                    VarItemNFcustoNota,
                                    VarItemNFcustoNotaTotal,
                                    VarItemNFcustoReposicao,
                                    VarItemNFcustoTotal,
                                    VarItemNFdiscount1,
                                    VarItemNFdiscount2,
                                    VarItemNFdiscount3,
                                    VarItemNFdiscountValue,
                                    VarItemNFacrescimo,
                                    VarItemNFbonificacao,
                                    VarItemNFdespesasNaoTributadas,
                                    VarItemNFdespesasTributadas,
                                    VarItemNFchaveEmbalagem,
                                    VarItemNFbarra,
                                    VarItemNFidunidadeMedida,
                                    VarItemNFentregue,
                                    VarItemNFfinanceiro,
                                    VarItemNFfrete,
                                    VarItemNFicmsEntrada,
                                    VarItemNFreducaoEntrada,
                                    VarItemNFicmsFrete,
                                    VarItemNFicmsSaida,
                                    VarItemNFreducaoSaida,
                                    VarItemNFipi,
                                    VarItemNFpriceVenda,
                                    VarItemNFquantidade,
                                    VarItemNFsugestao,
                                    VarItemNFvalorIpi,
                                    VarItemNFsubstituicao,
                                    VarItemNFlucro,
                                    VarItemNFlucroValor,
                                    VarItemNFlucroBruto,
                                    VarItemNFcreditoIcms,
                                    VarItemNFcreditoPis,
                                    VarItemNFcreditoCofins,
                                    VarItemNFbaseCalculoSubstituicao,
                                    VarItemNFvalorIcmsSubstituicao,
                                    VarItemNFvalorFinanceiro,
                                    VarItemNFvalorFrete,
                                    VarItemNFsumFrete,
                                    VarItemNFmargem,
                                    VarItemNFsumSt,
                                    VarItemNFcstIcms,
                                    VarItemNFtypeAliquota,
                                    VarCSTIPI,
                                    VarCSTPIS,
                                    VarCSTCOFINS,
                                    VarItemNFcfopInput,
                                    VarItemNFcfopOutput;

                                    if done then
                                        leave read_loop;
                                    end if;

                                    IF(VarEstadoSto=VarEstadoFor)THEN
                                        set VarCFOP=VarItemNFcfopInput;
                                            ELSE
                                                set VarCFOP=VarItemNFcfopOutput;
                                    END IF;
                                    if(VarCFOP is null || VarCFOP = '')then
                                        case VarItemNFtypeAliquota
                                                when 't' then
                                                IF(VarEstadoSto=VarEstadoFor)THEN
                                                    set VarCFOP='1152';
                                                        ELSE
                                                        set VarCFOP='2152';
                                                        END IF;
                                                when 's' then
                                                    IF(VarEstadoSto=VarEstadoFor)THEN
                                                    set VarCFOP='1409';
                                                        ELSE
                                                        set VarCFOP='2409';
                                                        END IF;
                                                    ELSE set VarCFOP='1152'; end case;
                                    end if;
                                    if(VarCSTIPI <> "")then
                                      select idCstIpi from cstIpi where codigo=VarCSTIPI into @CHAVEIPI;
                                          else set @CHAVEIPI = "3";
                                    end if;
                                    if(VarCSTPIS <> "") then
                                      select idCstPis from cstPis where codigo=VarCSTPIS into @CHAVEPIS;
                                          else  set @CHAVEPIS = "33";
                                    end if;
                                    if(VarCSTCOFINS <> "") then
                                      select idCstCofins from cstCofins where codigo=VarCSTCOFINS into @CHAVECOFINS;
                                          else set @CHAVECOFINS = "33";
                                    end if;

                                    INSERT INTO `conector`.`entradaitem`
                                    (
                                        `identrada`,
                                        `idProduto`,
                                        `custoLiquido`,
                                        `custoBruto`,
                                        `custoNota`,
                                        `custoNotaTotal`,
                                        `custoReposicao`,
                                        `custoTotal`,
                                        `discount1`,
                                        `discount2`,
                                        `discount3`,
                                        `discountValue`,
                                        `acrescimo`,
                                        `bonificacao`,
                                        `despesasNaoTributadas`,
                                        `despesasTributadas`,
                                        `chaveEmbalagem`,
                                        `barra`,
                                        `idunidadeMedida`,
                                        `entregue`,
                                        `vendo`,
                                        `financeiro`,
                                        `frete`,
                                        `icmsEntrada`,
                                        `reducaoEntrada`,
                                        `icmsFrete`,
                                        `icmsSaida`,
                                        `reducaoSaida`,
                                        `ipi`,
                                        `priceVenda`,
                                        `quantidade`,
                                        `sugestao`,
                                        `valorIpi`,
                                        `substituicao`,
                                        `lucro`,
                                        `lucroValor`,
                                        `lucroBruto`,
                                        `quantidadeRecebida`,
                                        `quantidadePendente`,
                                        `creditoIcms`,
                                        `creditoPis`,
                                        `creditoCofins`,
                                        `valorFinanceiro`,
                                        `valorFrete`,
                                        `sumFrete`,
                                        `numeroNota`,
                                        `serie`,
                                        `dateInsert`,
                                        `margem`,
                                        `sumSt`,
                                        `cstIpi`,
                                        `cstPis`,
                                        `cstCofins`,
                                        `cstIcms`,
                                        `cfop`,
                                        `baseIcms`,
                                        `valorIcmsSubstituicao`,
                                        `baseCalculoSubstituicao`,
                                        `typeAliquota`,
                                        `chaveItemCompra`
                                    )
                                        VALUES
                                    (
                                        chave,
                                        VarItemNFidProduto,
                                        VarItemNFcustoLiquido,
                                        VarItemNFcustoBruto,
                                        VarItemNFcustoNota,
                                        VarItemNFcustoNotaTotal,
                                        VarItemNFcustoReposicao,
                                        VarItemNFcustoTotal,
                                        VarItemNFdiscount1,
                                        VarItemNFdiscount2,
                                        VarItemNFdiscount3,
                                        VarItemNFdiscountValue,
                                        VarItemNFacrescimo,
                                        VarItemNFbonificacao,
                                        VarItemNFdespesasNaoTributadas,
                                        VarItemNFdespesasTributadas,
                                        VarItemNFchaveEmbalagem,
                                        VarItemNFbarra,
                                        VarItemNFidunidadeMedida,
                                        VarItemNFentregue,
                                        0.000,                                         VarItemNFfinanceiro,
                                        VarItemNFfrete,
                                        VarItemNFicmsEntrada,
                                        VarItemNFreducaoEntrada,
                                        VarItemNFicmsFrete,
                                        VarItemNFicmsSaida,
                                        VarItemNFreducaoSaida,
                                        VarItemNFipi,
                                        VarItemNFpriceVenda,
                                        VarItemNFquantidade,
                                        VarItemNFsugestao,
                                        VarItemNFvalorIpi,
                                        VarItemNFsubstituicao,
                                        VarItemNFlucro,
                                        VarItemNFlucroValor,
                                        VarItemNFlucroBruto,
                                        VarItemNFquantidade,                                         (VarItemNFquantidade-VarItemNFquantidade),                                         VarItemNFcreditoIcms,
                                        VarItemNFcreditoPis,
                                        VarItemNFcreditoCofins,
                                        VarItemNFvalorFinanceiro,
                                        VarItemNFvalorFrete,
                                        VarItemNFsumFrete,
                                        VarNumberNota,
                                        VarSerie,
                                        now(),
                                        VarItemNFmargem,
                                        VarItemNFsumSt,
                                        @CHAVEIPI,
                                        @CHAVEPIS,
                                        @CHAVECOFINS,
                                        VarItemNFcstIcms,
                                        VarCFOP,
                                        VarItemNFcustoTotal,                                         VarItemNFvalorIcmsSubstituicao,
                                        VarItemNFbaseCalculoSubstituicao,
                                        VarItemNFtypeAliquota,
                                        "0");
                                        set VarCount = VarCount + 1;


                  end loop;                 close fonteOne;



    end;
    insert into bof(texto)values(VarCount);
    if(VarCount > 0)then
       update pedido set final=4, status=5  where idPedido=VarPedido; end if;
    insert into bof(texto)values(VarPedido);
    end $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `conector_update_estoque`
--

DROP PROCEDURE IF EXISTS `conector_update_estoque`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='' */ $$
CREATE DEFINER=`master`@`localhost` PROCEDURE `conector_update_estoque`(in chave double)
begin
    declare done int default false;
    declare done1 int default false;
    declare VarCodProduto double;
    declare VarQtty decimal(15,3);
    declare VarQttyTransf decimal(15,3);
    declare VarPorcentagem decimal(15,3);
    declare VarProduto double;
    declare VarQuantidade int(11);
    declare VarQuantidadeEmb int(11);
    declare VarLoja int(11);
    declare VarEntrada date;
    declare VarNumberNota varchar(10);
    declare VarChaveItem double;
    declare VarChaveItemCompra double;
    declare VarFlagItem char(1);
    declare VarflagUpdateFiscal smallint;
    declare test integer default 0;
    begin
        declare fonteOne cursor for  select
                                            tab.idProduto,
                                                    sum(tab.quantidade*tab1.quantidade)
                                                        from entradaItem tab
                                                            inner join  produtoEmbalagem tab1 on(tab.chaveEmbalagem = tab1.idProdutoEmbalagem)
                                                                                                                 where tab.idEntrada=chave
                                                                                                                       group by 1;
            declare continue handler for not found set done = true;
    open fonteOne;

        set VarQttyTransf = 0;

        read_loop: LOOP

                fetch fonteOne into VarCodProduto, VarQtty;

                if done then
                    leave read_loop;
                end if;

                select sum(tab.quantidade*tab2.quantidade) from pedidoCompraItens tab
                                inner join entradaCompra tab1 on(tab.idPedidoCompra = tab1.idPedidoCompra)
                                inner join ProdutoEmbalagem tab2 on(tab.idProduto = tab2.idProduto and
                                                            tab.chaveEmbalagem = tab2.IdProdutoEmbalagem)
                                                                                    where
                                                                                        tab1.idEntrada=chave
                                                                                                into VarQttyTransf;
                                                                                                if(VarQttyTransf is null)then set VarQttyTransf=0; end if;

        if(VarQttyTransf > 0)then
            set VarPorcentagem = (VarQtty*100)/VarQttyTransf;
            update entradaItem set
                                porcentagemTransf=VarPorcentagem
                                                        where
                                                                idEntrada=chave and idProduto=VarCodProduto;
            end if;
           end loop;
        close fonteOne;
    end;

    if(VarFlagItem is null)then set VarFlagItem='N'; end if;

    select flagUpdateFiscal
                from operacaoEntrada
                        where
                            idOperacao=(select idOperacao
                                                    from entrada
                                                        where idEntrada=chave)
                                                                        into VarflagUpdateFiscal;




    begin

    declare fonteTwo Cursor for select
                                    tab.idProduto as Codigo,
                                            (tab.quantidade*tab1.quantidade),
                                            tab1.quantidade,
                                            tab2.idLoja,
                                            tab2.entrada,
                                            tab2.nr_nota,
                                            tab.idEntradaItem,
                                            tab.chaveItemCompra
                                                from
                                                    entradaItem tab
                                                    inner join produtoEmbalagem tab1 on(tab.chaveEmbalagem = tab1.idProdutoEmbalagem)
                                                    inner join entrada tab2 on(tab.idEntrada = tab2.idEntrada)
                                                    inner join cliente tab3 on(tab2.idCliente = tab3.idCliente)
                                                                                            where
                                                                                                    tab.idEntrada=chave;
    declare continue handler for not found set done1=true;

    open fonteTwo;

        read_loop1: LOOP
                    fetch fonteTwo into
                                        VarProduto,
                                        VarQuantidade,
                                        VarQuantidadeEmb,
                                        VarLoja,
                                        VarEntrada,
                                        VarNumberNota,
                                        VarChaveItem,
                                        VarChaveItemCompra;

                 IF DONE1 THEN
                    leave read_loop1;
                end if;


        call `conector_inc_movimentacao`(VarProduto,
                                         VarLoja,
                                         CONCAT("NOTA FISCAL: ",VarNumberNota),
                                         "+",

                                         VarQuantidade,
                                         0,
                                         0,
                                         0,
                                         0,
                                         0,
                                         0,
                                         0,
                                         3,
                                         "ENTRADA");
                                         update produtoPrice set flagCompraLoja=now(), chaveEntrada=chave
                                                                                        where idProduto=VarProduto and idLoja=VarLoja;
                                         update produto set flagCompra=now() WHERE idProduto=VarProduto;

            end loop; 
        close fonteTwo;
    end; 
end $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `conector_update_financeiroEntrada`
--

DROP PROCEDURE IF EXISTS `conector_update_financeiroEntrada`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='' */ $$
CREATE DEFINER=`master`@`localhost` PROCEDURE `conector_update_financeiroEntrada`(in find varchar(45))
begin
            DECLARE done INT DEFAULT FALSE; 
            declare VarQttyParcela integer default 0;
            declare Varidentrada double;
            declare Varidfinalizadora integer;
            declare Vardocumento varchar(20);
            declare Varprazo integer;
            declare Varaceite date;
            declare Varvencimento date;
            declare Varcompetencia date;
            declare VaremissaoDocumento date;
            declare Vardesconto decimal(15,3);
            declare Varfinanceiro decimal(15,3);
            declare Varvalor decimal(15,3);
            declare Varparcela varchar(5);
            declare Varidbanco integer;
            declare VarnossoNumero varchar(20);
            declare Varconta integer;
            declare Varcedente varchar(20);
            declare VarformaPgto varchar(2);
            declare Varnr_nota varchar(10);
            declare VaridLoja integer;
            declare VaridCliente integer;
            declare VaridUsuario integer;
            declare VarvalorTotalNota numeric(15,3);
            declare VaridCompra double;
            declare Varentrada date;
            
            select 
                nr_nota,
                idLoja,
                idCliente,
                idUsuario,
                valorTotalNota,
                idCompra,
                entrada
                    from entrada
                                where
                                    idEntrada=find
                                                into
            				                                   Varnr_nota,
            				                                   VaridLoja,
            				                                   VaridCliente,
            				                                   VaridUsuario,
            				                                   VarvalorTotalNota,
            				                                   VaridCompra,
                                                       VarEntrada;

                                            if(Varnr_nota is null)then set Varnr_nota=""; end if;
                                            if(VaridLoja is null)then set VaridLoja = 0; end if;
                                            if(VaridCliente is null)then set VaridCliente=0; end if;
                                            if(VaridUsuario is null)then set VaridUsuario=0; end if;
                                            if(VarvalorTotalNota is null)then set VarvalorTotalNota=0; end if;
                                            if(VaridCompra is null)then set VaridCompra = 0; end if;

    select  
        count(*) as QttyParcela
        from
            `conector`.`entradafinanceiro` 
            where idEntrada = find 
                            into VarQttyParcela;
                            if(VarQttyParcela is null)then set VarQttyParcela=0; end if;
    if(VarQttyParcela > 0)then
        begin
             DECLARE basicFonte CURSOR for select
                                                `idfinalizadora`,
                                                `documento`,
                                                `prazo`,
                                                `aceite`,
                                                `vencimento`,
                                                `competencia`,
                                                `emissaoDocumento`,
                                                `desconto`,
                                                `financeiro`,
                                                `valor`,
                                                `parcela`,
                                                `idbanco`,
                                                `nossoNumero`,
                                                `conta`,
                                                `cedente`,
                                                `formaPgto`
                                                from
                                                    `conector`.`entradafinanceiro` 
                                                    where idEntrada = find;
            
            DECLARE CONTINUE HANDLER FOR NOT FOUND SET done = TRUE;
    open basicFonte;

    read_loop: LOOP
                          fetch basicFonte into
                                        Varidfinalizadora,
                                        Vardocumento,
                                        Varprazo,
                                        Varaceite,
                                        Varvencimento,
                                        Varcompetencia,
                                        VaremissaoDocumento,
                                        Vardesconto,
                                        Varfinanceiro,
                                        Varvalor,
                                        Varparcela,
                                        Varidbanco,
                                        VarnossoNumero,
                                        Varconta,
                                        Varcedente,
                                        VarformaPgto;
                    IF done THEN
                        LEAVE read_loop;
                    END IF;
  insert into pagar(
                        `loja`,
                        `codigo`,
                        `emissao`,
                        `vencimento`,
                        `dataEntrada`,
                        `prazo`,
                        `usuario`,
                        `usuarioInclusao`,
                        `valorNota`,
                        `nota`,
                        `flagPagamento`,
                        `parcela`,
                        `confirmada`,
                         qttyPagar,
                         typePepleo,
                         `aceite`,
                        `multaData`,
                        `historico`,
                        `duplicata`,
                        `bancoDocumento`,
                        `multaDias`,
                        `protestoDias`,
                        `desconto`,
                        `jurosPagos`,
                        `multaValor`,
                        `valor`,
                        `codigoCedente`,
                        `nossoNumero`,
                        `numeroDocumento`,
                        `codigoBarraBoleto`,
                        `observacao`,
                         pedido,
                         acrescimo,
                         tipoBaixa,
                         chaveEntrada
                         ) 
                    value(
                        VaridLoja,
                        VaridCliente,
                        VaremissaoDocumento,
                        Varvencimento,
                        now(),
                        Varprazo,
                        VaridUsuario,
                        VaridUsuario,
                        VarvalorTotalNota,
                        Varnr_nota,
                        "N",
                        Varparcela,
                        false,
                         VarQttyParcela, 
                         'f',
                         null,
                         null,
                        concat("NF. DE ENTRADA N.o ", Varnr_nota),
                        Varnr_nota, 
                        Varidbanco,
                        0,
                        0,
                        Vardesconto,
                        0,
                        0,
                        Varvalor,
                        Varcedente,
                        VarnossoNumero,
                        Vardocumento,
                        null,
                        null,
                         VaridCompra,
                         Varfinanceiro,
                         VarformaPgto,
                         find);

            end loop;
        close basicFonte;
    end;
end if;
                                        
end $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `conector_update_gravaSaida`
--

DROP PROCEDURE IF EXISTS `conector_update_gravaSaida`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='' */ $$
CREATE DEFINER=`master`@`localhost` PROCEDURE `conector_update_gravaSaida`(VartypeDoc smallint, chaveNota double, chavePedido double, typeEst smallint, in cx int)
begin
        declare VarNfvalorTotalNota numeric(15,3);
        declare VarNfvalorTotalLiquido numeric(15,3);
        declare VarNfvalorTotalProdutos numeric(15,3);
        declare VarNfemissao date;
        declare VarNfloja double;
        declare VarNfidCliente double;
        declare VarNfidParamentro int(11);
        declare VarNfidUsuario int(11);
        declare VarNfidFuncionario int(11);
        declare VarNfcondPgto int(11);
        declare VarNfidPedido double;
        declare VarNfName varchar(45);
        declare i integer default 0;
        declare VarNfItemidProduto double;
        declare VarNfItemValorLiquido numeric(15,3);
        declare VarNfItemValorTotalNota numeric(15,3);
        declare VarNfItempriceVenda numeric(15,3);
        declare VarNfItemvalorTotalProduto numeric(15,3);
        declare VarNfItemquantidade numeric(15,3);
        declare VarNfItemaliquota numeric(15,3);
        declare VarNfItemreducao numeric(15,3);
        declare VarNfItemquantidadeEAN numeric(15,3);
        declare VarNfItemidSetor int(11);
        declare VarNfItemTipo char(1);
        declare VarNfItemChave double;
        declare VarNfItemSeq int;
        declare VarNfItemDesconto numeric(15,3);

        declare VarPedidoEmissao double;
        declare VarPedidoidProduto double;
        declare VarPedidoquantidade  numeric(15,4);
        declare VarPedidosituacao smallint;
        declare VarPedidovalorDiscount numeric(15,3);
        declare VarPedidoidFuncionario int(11);
        declare VarPedidoprice numeric(15,3);
        declare VarStatus integer;
        declare VarMetodo integer;
        declare VarTypeMargem char(1);

        declare VarOptionParamentro char(1);
        declare VarOptionDescricao varchar(45);
        declare VarOptionOrigem char(1);
        declare VarOptionDestino char(1);
        declare VarOptionEstoqueFutura smallint;
        declare VarOptionIdHistorico int(11);
        declare VarOptionEstoqueOrigem char(1);
        declare VarOptionEstoqueDestino char(1);
        declare VarOptionEstoqueNegativo char(1);         declare VarOptionIdfuncionario int(11);
        declare VarOptionComissaoFaturamento smallint;
        declare VarOptionComissaoBaixa smallint;
        declare VarOptionModNotaFiscal char(2);
        declare VarOptionIdSituacaoFiscal char(2);
        declare VarOptionIdTable_Codigo int(11);
        declare VarOptioncfop1 varchar(10);
        declare VarOptioncfop2 varchar(10);
        declare VarOptioncfop3 varchar(10);
        declare VarOptioncfop4 varchar(10);
        declare VarOptionCalculaIcms smallint;
        declare VarOptionCalculaPisCofins smallint;
        declare VarOptionCalculaIr smallint;
        declare VarOptionCalculaBaseSt smallint;
        declare VarOptionCalculoServicoProduto smallint;
        declare VarOptionCalculaIpi smallint;
        declare VarOptionNFRestituicao smallint;
        declare VarOptionTypeFrete smallint;
        declare VarOptionRetemPisCofins smallint;
        declare VarOptionAbateFunrural smallint;
        declare VarOptionAtualizaMedio smallint;
        declare VarOptionMaxItemPedido smallint;
        declare VarOptionNumeroMaxItem smallint;
        declare VarOptionEanDefault smallint;

        declare VarOperacao int;
        declare VarUsuario int;
        declare VarLoja double;
        declare VarHistorico varchar(30);
        declare VarNrNota varchar(10);
        declare VarTotal numeric(15,3);
        declare VarIdItemNota double;
        declare VarData date;
        declare VarFornecedor double;
        declare VarProduto double;
        declare VarSetor int;
        declare VarGrupo int;
        declare VarCategorio int;
        declare VarMargem decimal(15,3);
        declare VarPis decimal(15,3);
        declare VarCofins decimal(15,3);
        declare VarAlq decimal(15,3);
        declare VarRed decimal(15,3);
        declare VarTributacao char(2);
        declare VarStoreCustoOperacional decimal(15,3);
        declare VarStoreAliqPis decimal(15,3);
        declare VarAliqStoreCofins decimal(15,3);
        declare VarCalcPis varchar(1);
        declare VarCalcCofins varchar(1);
        declare VarCalcPisSt varchar(1);
        declare VarCalcCofinsSt varchar(1);
        declare VarIcms decimal(15,3);
        declare VarCreditoIcms decimal(15,3);
        declare VarCustoLiquido decimal(15,3);
        declare VarPisCofins int;
        declare VarTerminal int;
        declare VarPrecoPromocional decimal(15,3);
        declare VarTypeAliquota char(1);


        declare VarMovEstoqueSP smallint;
        declare VarMovFinanceiroSP smallint;
        declare VarMovServicoSP smallint;





        declare done int default false;

                    select idParamentro, pdv, idMetodo
                                from pedido
                                        where idPedido=chavePedido
                                                        into VarOperacao, VarTerminal, VarMetodo;
                                                        if(VarOperacao IS NULL) then set VarOperacao=0; end if;
                                                        if(VarTerminal is null) then set VarTerminal=0; end if;
                                                        if(VarMetodo is null)then set VarMetodo=0; end if;
                    if(VarTerminal is null)then set VarTerminal=cx; end if;
                    if(VarTypeDoc = 0)then
                    select idParamentro,
                            nr_nota,
                            serie
                                from
                                    nf
                                        where nf.nf=chaveNota
                                                        into VarOperacao, VarNrNota, @Serie;
                                                        if(VarOperacao IS NULL) then set VarOperacao=0; end if;
                    end if;
                    SELECT
                          descricao,
                          flagParamentro,
                          origem,
                          destino,
                          flagEstoqueFutura,
                          idHistorico,
                          estoqueOrigem,
                          estoqueDestino,
                          estoqueNegativo,                           idfuncionario,
                          flagComissaoFaturamento,
                          flagComissaoBaixa,
                          modNotaFiscal,
                          idSituacaoFiscal,
                          idTable_Codigo,
                          cfop1,
                          cfop2,
                          cfop3,
                          cfop4,
                          flagCalculaIcms,
                          flagCalculaPisCofins,
                          flagCalculaIr,
                          flagCalculaBaseSt,
                          flagCalculoServicoProduto,
                          flagCalculaIpi,
                          flagNFRestituicao,
                          flagTypeFrete,
                          flagRetemPisCofins,
                          flagAbateFunrural,
                          flagAtualizaMedio,
                          flagMaxItemPedido,
                          numeroMaxItem,
                          flagEanDefault
                                FROM paramentro_faturamento
                                        where idParamentro=VarOperacao
                                                into
                                                            VarOptionDescricao,
                                                            VarOptionParamentro,
                                                            VarOptionOrigem,
                                                            VarOptionDestino,
                                                            VarOptionEstoqueFutura,
                                                            VarOptionIdHistorico,
                                                            VarOptionEstoqueOrigem,
                                                            VarOptionEstoqueDestino,
                                                            VarOptionEstoqueNegativo,                                                             VarOptionIdfuncionario,
                                                            VarOptionComissaoFaturamento,
                                                            VarOptionComissaoBaixa,
                                                            VarOptionModNotaFiscal,
                                                            VarOptionIdSituacaoFiscal ,
                                                            VarOptionIdTable_Codigo,
                                                            VarOptioncfop1,
                                                            VarOptioncfop2,
                                                            VarOptioncfop3,
                                                            VarOptioncfop4 ,
                                                            VarOptionCalculaIcms,
                                                            VarOptionCalculaPisCofins,
                                                            VarOptionCalculaIr,
                                                            VarOptionCalculaBaseSt,
                                                            VarOptionCalculoServicoProduto,
                                                            VarOptionCalculaIpi,
                                                            VarOptionNFRestituicao,
                                                            VarOptionTypeFrete,
                                                            VarOptionRetemPisCofins,
                                                            VarOptionAbateFunrural,
                                                            VarOptionAtualizaMedio,
                                                            VarOptionMaxItemPedido,
                                                            VarOptionNumeroMaxItem,
                                                            VarOptionEanDefault;

case VartypeDoc
        when 0 then
IF(VarNrNota is not null)THEN
                    select
                          valorTotalNota,
                          valorTotalLiquido,
                          valorTotalProdutos,
                          emissao,
                          loja,
                          idCliente,
                          idParamentro,
                          idUsuario,
                          idFuncionario,
                          condPgto,
                          idPedido
                                  from nf
                                        where nf.nf=chaveNota
                                                    into
                                                          VarNfvalorTotalNota,
                                                          VarNfvalorTotalLiquido,
                                                          VarNfvalorTotalProdutos,
                                                          VarNfemissao,
                                                          VarNfloja,
                                                          VarNfidCliente,
                                                          VarNfidParamentro,
                                                          VarNfidUsuario,
                                                          VarNfidFuncionario,
                                                          VarNfcondPgto,
                                                          VarNfidPedido;


                    select    ifnull(case tab.idtipoPessoa when 1 then tab1.nome
                                                           when 2 then tab2.razao
                                                           when 3 then tab3.nome else 'Desconhecido' end,'Desconhecido') Nome_Razao
                                                                from
                                                                	cliente tab
                                                                  inner join loja on(tab.idloja = loja.idloja)
                                                                	left join fisica tab1 on(tab.idcliente = tab1.idcliente)
                                                                	left join juridica tab2 on(tab.idcliente = tab2.idcliente)
                                                                  left join rural tab3 on(tab.idcliente = tab3.idcliente) where tab.idCliente=VarNfidCliente into VarNfName;

                                                                  set VarHistorico = concat(mid(VarOptionDescricao,1,8),' NF: ',VarNrNota," - ",mid(VarNfName,1,10));

    begin
    declare fonteOne cursor for select
                                            tab.idProduto,
                                            tab.valorLiquido,
                                            tab.priceVenda,
                                            tab.valorTotalProduto,
                                            tab.quantidade,
                                            tab.aliquota,
                                            tab.reducao,
                                            tab2.quantidade,
                                            tab.idSetor,
                                            tab.idNfItem,
                                            tab.descontoValor,
                                            tab.valorTotalNota,
                                            tab.sequencia
                                                from
                                                nfItem tab
                                                        inner join produto tab1 on(tab.idProduto = tab1.idProduto)
                                                        inner join produtoEmbalagem tab2 on(tab.idProduto = tab2.idProduto)
                                                                                                                where
                                                                                                                    idNf=chaveNota and tab2.defaultVenda='s';

                                declare continue handler for not found set done = true;

                                open fonteOne;

                                read_loop: LOOP

                                            FETCH fonteOne  into
                                                                VarNfItemidProduto,
                                                                VarNfItemValorLiquido,
                                                                VarNfItempriceVenda,
                                                                VarNfItemvalorTotalProduto,
                                                                VarNfItemquantidade,
                                                                VarNfItemaliquota,
                                                                VarNfItemreducao,
                                                                VarNfItemquantidadeEAN,
                                                                VarNfItemidSetor,
                                                                VarNfItemChave,
                                                                VarNfItemDesconto,
                                                                VarNfItemValorTotalNota,
                                                                VarNfItemSeq;
                                                                set i = i+1;
                                                                if done then
                                                                        leave read_loop;
                                                                end if;


                if(typeEst = 1)then

                            call `conector_inc_movimentacao`(VarNfItemidProduto,
                                         VarNfloja,
                                         VarHistorico,
                                         "-",
                                         (VarNfItemquantidade*VarNfItemquantidadeEAN),
                                         0,
                                         0,
                                         0,
                                         VarNfItemValorLiquido,
                                         0,
                                         VarNfItempriceVenda,
                                         0,
                                         2,
                                         "SAIDA");
                                                                                                             else
                                                                        call `conector_inc_movimentacao`(VarNfItemidProduto,
                                                                                                         VarNfloja,
                                                                                                         VarHistorico,
                                                                                                         "+",
                                                                                                         (VarNfItemquantidade*VarNfItemquantidadeEAN),
                                                                                                         0,
                                                                                                         0,
                                                                                                         0,
                                                                                                         VarNfItemValorLiquido,
                                                                                                         0,
                                                                                                         VarNfItempriceVenda,
                                                                                                         0,
                                                                                                         3,
                                                                                                         "Entrada");

                                            end if;

                                           update pedido set final=4, status=5, sinal="verde" where idPedido=VarNfidPedido;


                                                                    select typeCalculo
                                                                                        from loja
                                                                                                where idLoja=VarNfloja
                                                                                                            into @typeCalculo;


                                                                select tab.idProduto,
                                                                       tab.idSetor,
                                                                       ifnull(tab.idGrupo,0),
                                                                       ifnull(tab.idCategoria,0),
                                                                       tab1.creditoIcms,
                                                                       tab1.custoLiquido,
                                                                       tab1.margem,
                                                                       tab1.creditoPis,
                                                                       tab1.creditoCofins,
                                                                       alq.aliquota,
                                                                       alq.reducao,
                                                                       alq.idAliquota,
                                                                       tab2.idPisCofins,
                                                                       tab.idFornecedor,
                                                                       tab1.priceFull,
                                                                       tab1.priceVenda,
                                                                       tab1.precoPromocao,
                                                                       alq.tipo
                                                                                    from produto tab
                                                                                         inner join produtoPrice tab1 on(tab.idProduto = tab1.idProduto)
                                                                                         inner join produtoImpostos tab2 on(tab.idProduto = tab2.idProduto and tab1.idLoja = tab2.idLoja)
                                                                                         inner join aliquota alq on(alq.idAliquota = tab2.tributacao)
                                                                                                            where tab.idProduto=VarNfItemidProduto and tab1.idLoja=VarNfloja
                                                                                                                    into
                                                                                                                                VarProduto,
                                                                                                                                VarSetor,
                                                                                                                                VarGrupo,
                                                                                                                                VarCategorio,
                                                                                                                                VarCreditoIcms,
                                                                                                                                VarCustoLiquido,
                                                                                                                                VarMargem,
                                                                                                                                VarPis,
                                                                                                                                VarCofins,
                                                                                                                                VarAlq,
                                                                                                                                VarRed,
                                                                                                                                VarTributacao,
                                                                                                                                VarPisCofins,
                                                                                                                                VarFornecedor,
                                                                                                                                @priceFull,
                                                                                                                                @priceVenda, VarPrecoPromocional,VarTypeAliquota;
                                            select custoOperacional, aliquotaPis, aliquotaCofins
                                                                from loja
                                                                        where idLoja=VarNfloja
                                                                                into
                                                                                    VarStoreCustoOperacional, VarStoreAliqPis, VarAliqStoreCofins;

                                            select typeAliquota from nfItem
                                                                        where idProduto=VarNfItemidProduto and
                                                                              idNfItem=VarNfItemChave and
                                                                              idNf=chaveNota into VarNfItemTipo;
                                            select creditoPis,
                                                   creditoCofins,
                                                   cofinSt,
                                                   piSt
                                                    from conector.piscofins
                                                                where idPisCofins=VarPisCofins
                                                                        into
                                                                            VarCalcPis,
                                                                            VarCalcCofins,
                                                                            VarCalcPisSt,
                                                                            VarCalcCofinsSt;
                                            set VarStoreCustoOperacional = ((VarStoreCustoOperacional/100) * VarNfItemvalorTotalProduto);

                                                            if(VarCalcCofinsSt = 's')then
                                                                set VarAliqStoreCofins = 0;
                                                            else
                                                                set VarAliqStoreCofins = (VarAliqStoreCofins / 100) * VarNfItemvalorTotalProduto;
                                                            end if;

                                                            if(VarCalcPisSt = 's')then
                                                                set VarStoreAliqPis = 0;
                                                            else
                                                                set VarStoreAliqPis = (VarStoreAliqPis / 100) * VarNfItemvalorTotalProduto;
                                                            end if;

                                                            if(VarCalcPis = 's')then
                                                                set VarPis = VarPis * VarNfItemquantidade;
                                                            else
                                                                set VarPis = 0;
                                                            end if;

                                                             if(VarCalcCofins = 's')then
                                                                set VarCofins = VarCofins * VarNfItemquantidade;
                                                            else
                                                                set VarCofins = 0;
                                                            end if;
                                                            set VarCreditoIcms = VarCreditoIcms * VarNfItemquantidade;
                                                            set VarIcms = ((VarAlq *(1-(VarRed/100)))/100 * VarNfItemvalorTotalProduto);
                                                            if(VarCustoLiquido=0 or VarCustoLiquido is null)then set VarCustoLiquido=VarNfItemValorLiquido; end if;

                                                                   case @typeCalculo
                                                                        when 'b' then

                                                                            call conector_calc_margem_lbc(VarNfItemidProduto,VarNfloja,VarCustoLiquido,VarNfItemValorLiquido,@custo,@reposicao,@venda,@minimo,@sugestao,@margem,@lbruto,@lliquido,@mBruto,@mLiquida);
                                                                        when 'r' then
                                                                            call conector_calc_margem_lbv(VarNfItemidProduto,VarNfloja,VarCustoLiquido,VarNfItemValorLiquido,@custo,@reposicao,@venda,@minimo,@sugestao,@margem,@lbruto,@lliquido,@mBruto,@mLiquida);
                                                                        when 'c' then
                                                                            call conector_calc_margem_llc(VarNfItemidProduto,VarNfloja,VarCustoLiquido,VarNfItemValorLiquido,@custo,@reposicao,@venda,@minimo,@sugestao,@margem,@lbruto,@lliquido,@mBruto,@mLiquida);
                                                                        when 'l' then
                                                                            call conector_calc_margem_llv(VarNfItemidProduto,VarNfloja,VarCustoLiquido,VarNfItemValorLiquido,@custo,@reposicao,@venda,@minimo,@sugestao,@margem,@lbruto,@lliquido,@mBruto,@mLiquida);
                                                                    end case;

                        if(VarTerminal is null || VarTerminal = 0)then set VarTerminal=cx; end if;

                        INSERT INTO `conector`.`produtomovimento`
                            (
                                `idProduto`,
                                `idloja`,
                                 idTerminal,
                                 data,
                                `cupom`,
                                `pessoa`,
                                `custoLiquido`,
                                `fornecedor`,
                                `setor`,
                                `grupo`,
                                `categoria`,
                                `margem`,
                                `lucro`,
                                `precoVenda`,
                                `precoCusto`,
                                `valorTotal`,
                                `icms`,
                                `cofins`,
                                `pis`,
                                `aliquota`,
                                 reducao,
                                `creditoPis`,
                                `creditoCofins`,
                                 sequencia,
                                `promocao`,
                                `time`,
                                `discount`,
                                `vendedor`,
                                `metodo`,
                                `historico`,
                                `qttyCancel`,
                                `precoOriginal`,
                                `finalizadora`,
                                 `quantidade`
                                ,custoOperacional,
                                 custoReposicao,
                                 tributacao,
                                 tipoProcesso,
                                 custoTransferencia,
                                 pedido,
                                 nota,
                                 serie,
                                 modelo,
                                 situacao,
                                 aliquotaFim,
                                 tipoAliquota
                                )
                                        VALUES
                                (
                                VarNfItemidProduto,
                                VarNfloja,
                                VarTerminal,
                                now(),
                                0,
                                VarNfidCliente,
                                VarCustoLiquido,
                                VarFornecedor,
                                VarSetor,
                                VarGrupo,
                                VarCategorio,
                                @mLiquida,
                                @lliquido,
                                VarNfItempriceVenda,
                        				@priceFull,
                                VarNfItemValorTotalNota,
                                ifnull(VarIcms,"000"),
                                VarCofins,
                                VarPis,
                  			        VarNfItemaliquota,
                        				VarNfItemreducao,
                                ifnull(VarStoreAliqPis,"0"),
                                ifnull(VarAliqStoreCofins,"0"),
                        				VarNfItemSeq,
                        				if(VarPrecoPromocional > 0,'Y','N'),
                        				now(),
                        				VarNfItemDesconto,
                                VarNfidFuncionario,
                        				VarMetodo,
                                concat('Documento.:',VarNrNota,'/',@Serie,' Emissao.:',VarNfemissao),
                                "0",
                                @priceVenda,
                                VarNfcondPgto,
                                VarNfItemquantidade,
                                ifnull(VarStoreCustoOperacional,"0"),
                        				@reposicao,
                                ifnull(VarTributacao,"T0"),
                        				'N',
                                0,
                                VarNfidPedido,
                        				VarNrNota,
                        				@Serie,
                        				VarOptionModNotaFiscal,
                        				VarOptionIdSituacaoFiscal,
                                IFNULL(if(VarTypeAliquota='s' || VarTypeAliquota='i',0, round(VarAlq-(VarAlq*(VarRed/100)),2)),"0"),VarTypeAliquota

                        );

                                end loop;
        close fonteOne;
    end;
                                    select tipoComissao
                                                from loja where idLoja=VarNfLoja
                                                                into VarTypeMargem;


END IF;
        WHEN 1 THEN
IF(chavePedido > 0 and chavePedido is not null)THEN

                    select
                           idLoja,
                           idFuncionario,
                           idCliente,
                           emissao,
                           status
                                from pedido
                                        where idPedido=chavePedido
                                                    into
                                                        VarLoja,
                                                        VarNfidFuncionario,
                                                        VarNfidCliente,
                                                        VarPedidoEmissao,
                                                        VarStatus;
                    select
                        tab1.idProduto,
                        tab1.quantidade,
                        tab1.situacao,
                        tab1.valorDiscount,
                        tab.idFuncionario,
                        tab1.price
                                from pedido tab
                                        inner join pedidoItens tab1 on(tab.idPedido = tab1.idPedido and tab.idLoja = tab1.idLoja)
                                                           where tab.idPedido=chavePedido
                                                                    into
                                                                            VarPedidoidProduto,
                                                                            VarPedidoquantidade,
                                                                            VarPedidosituacao,
                                                                            VarPedidovalorDiscount,
                                                                            VarPedidoidFuncionario,
                                                                            VarPedidoprice;
END IF;
end case;

end $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `conector_update_impEntrada`
--

DROP PROCEDURE IF EXISTS `conector_update_impEntrada`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='' */ $$
CREATE DEFINER=`master`@`localhost` PROCEDURE `conector_update_impEntrada`(in chave double,
                                            in store double,
                                            in updateFamily smallint)
begin
    declare VarIpi decimal(15,3);
    declare VarIpiValor decimal(15,3);
    declare VarProduto double;
    declare VarEntradItem double;
    declare VarSubstituicao decimal(15,3);
    declare VarFinanceiro decimal(15,3);
    declare VarAcrescimo decimal(15,3);
    declare VarFrete decimal(15,3);
    declare VarICMSFrete decimal(15,3);
    declare VarDespesas decimal(15,3);
    declare VarDespesasNotTributadas decimal(15,3);
    declare VarBonificacao decimal(15,3);
    declare VarDesconto decimal(15,3);
    declare VarDescontoTwo decimal(15,3);
    declare VarDescontoThre decimal(15,3);
    declare VarICMSSaida decimal(15,3);
    declare VarICMSEntrada decimal(15,3);
    declare VarSugestao decimal(15,3);
    declare VarReducaoEntrada decimal(15,3);
    declare VarReducaoSaida decimal(15,3);
    declare VarCreditoIcms decimal(15,3);
    declare VarCreditoPis decimal(15,3);
    declare VarCreditoIpi decimal(15,3);
    declare VarCreditoCofins decimal(15,3);
    declare VarDescontoValor decimal(15,3);
    declare VarValidade date;
    declare VarUtilOperacao char(1);
    declare VarOperUpdateFiscal char(1);
    declare VarOperUpdatePis char(1);
    declare VarOperUpdateCofins char(1);
    declare VarOperUpdateTipoProduto char(1);
    declare VarOperUpdateMargemProduto smallint;
    declare VarCodigoTipoProduto smallint;     declare done int default false;
    declare done1 int default false;
    
            if(store = 0)then
    begin
    
    declare fonteOne CURSOR FOR select idProduto,idEntradaItem
                                                from entradaItem
                                                        where idEntrada=chave;
                        DECLARE CONTINUE HANDLER FOR NOT FOUND SET done=true;
                        open fonteOne;
                        read_loop: LOOP
                                                     
                                                     FETCH fonteOne
                                                                     into
                                                                          VarProduto, VarEntradItem;

                                         if done then
                                            leave read_loop;
                                        end if;

                                     select idProduto,
                                            ipi,
                                            valorIpi,
                                            substituicao,
                                            financeiro,
                                            acrescimo,
                                            frete,
                                            icmsFrete,
                                            despesasTributadas,
                                            despesasNaoTributadas,
                                            bonificacao,
                                            discount1,
                                            discount2,
                                            discount3,
                                            icmsSaida,
                                            icmsEntrada,
                                            sugestao,
                                            reducaoSaida,
                                            reducaoEntrada,
                                            creditoIcms,
                                            creditoPis,
                                            creditoCofins,
                                            validade,
                                            discountValue
                                            from entradaItem
                                                     where idEntradaItem=VarEntradItem
                                                                     into
                                                                         VarProduto,
                                                                         VarIpi,
                                                                         VarIpiValor,
                                                                         VarSubstituicao,
                                                                         VarFinanceiro,
                                                                         VarAcrescimo,
                                                                         VarFrete,
                                                                         VarICMSFrete,
                                                                         VarDespesas,
                                                                         VarDespesasNotTributadas,
                                                                         VarBonificacao,
                                                                         VarDesconto,
                                                                         VarDescontoTwo,
                                                                         VarDescontoThre,
                                                                         VarICMSSaida,
                                                                         VarICMSEntrada,
                                                                         VarSugestao,
                                                                         VarReducaoEntrada,
                                                                         VarReducaoSaida,
                                                                         VarCreditoIcms,
                                                                         VarCreditoPis,
                                                                         VarCreditoCofins,
                                                                         VarValidade,
                                                                         VarDescontoValor;
    select priceSugestao from produtoPrice tab
                inner join entrada tab1 on(tab.idLoja = tab1.idLoja)
                            where 
                                        tab1.idEntrada=chave and 
                                        tab.idProduto=VarProduto
                                                    into VarSugestao;
                                        
                update produtoPrice 
                        set 
                            ipiPorcentagem = VarIpi,
                            moedaIpi=VarIpiValor,
                            substituicaoPorcetagem=VarSubstituicao,
                            financeiro=VarFinanceiro,
                            acrescimo=VarAcrescimo,
                            fretePorcentagem=VarFrete,
                            icmsFrete=VarICMSFrete,
                            despesasTributadas=VarDespesas,
                            despesaNaoTributadas=VarDespesasNotTributadas,
                            bonificacaoDesconto=VarBonificacao,
                            primeiroDesconto=VarDesconto,
                            segundoDesconto=VarDescontoTwo,
                            terceiroDesconto=VarDescontoThre, 
                            debitoIcms=VarICMSSaida,
                            creditoIcms=VarICMSEntrada,
                            priceSugestao=VarSugestao,
                            debitoRedIcms=VarReducaoEntrada,
                            creditoRedIcms=VarReducaoSaida,
                            creditoPis=VarCreditoPis,
                            creditoCofins=VarCreditoCofins,
                            validade=VarValidade,
                            descontoValor=VarDescontoValor
                                                where idProduto=VarProduto;  
        end loop;
        close fonteOne;
    end;     else
    begin
    
    declare fonteTwo CURSOR FOR select idProduto,idEntradaItem
                                                from entradaItem
                                                        where idEntrada=chave;
                                                                
                                                     DECLARE CONTINUE HANDLER FOR NOT FOUND SET done1=true;
                                                     open fonteTwo;
                                                     read_loop1: LOOP
                                                     
                                                     FETCH fonteTwo
                                                                     into
                                                                          VarProduto, VarEntradItem;

                                         if done1 then
                                            leave read_loop1;
                                        end if;
                                        
                                     select
                                            idProduto,
                                            ipi,
                                            valorIpi,
                                            substituicao,
                                            financeiro,
                                            acrescimo,
                                            frete,
                                            icmsFrete,
                                            despesasTributadas,
                                            despesasNaoTributadas,
                                            bonificacao,
                                            discount1,
                                            discount2,
                                            discount3,
                                            icmsSaida,
                                            icmsEntrada,
                                            sugestao,
                                            reducaoSaida,
                                            reducaoEntrada,
                                            creditoIcms,
                                            creditoPis,
                                            creditoCofins,
                                            validade,
                                            discountValue
                                            from entradaItem
                                                     where idEntradaItem=VarEntradItem
                                                                     into
                                                                         VarProduto,
                                                                         VarIpi,
                                                                         VarIpiValor,
                                                                         VarSubstituicao,
                                                                         VarFinanceiro,
                                                                         VarAcrescimo,
                                                                         VarFrete,
                                                                         VarICMSFrete,
                                                                         VarDespesas,
                                                                         VarDespesasNotTributadas,
                                                                         VarBonificacao,
                                                                         VarDesconto,
                                                                         VarDescontoTwo,
                                                                         VarDescontoThre,
                                                                         VarICMSSaida,
                                                                         VarICMSEntrada,
                                                                         VarSugestao,
                                                                         VarReducaoEntrada,
                                                                         VarReducaoSaida,
                                                                         VarCreditoIcms,
                                                                         VarCreditoPis,
                                                                         VarCreditoCofins,
                                                                         VarValidade,
                                                                         VarDescontoValor;

    select priceSugestao from produtoPrice tab
                inner join entrada tab1 on(tab.idLoja = tab1.idLoja)
                            where 
                                        tab1.idEntrada=chave and 
                                        tab.idProduto=VarProduto
                                                    into VarSugestao;
                                        
                update produtoPrice 
                        set 
                            ipiPorcentagem = VarIpi,
                            moedaIpi=VarIpiValor,
                            substituicaoPorcetagem=VarSubstituicao,
                            financeiro=VarFinanceiro,
                            acrescimo=VarAcrescimo,
                            fretePorcentagem=VarFrete,
                            icmsFrete=VarICMSFrete,
                            despesasTributadas=VarDespesas,
                            despesaNaoTributadas=VarDespesasNotTributadas,
                            bonificacaoDesconto=VarBonificacao,
                            primeiroDesconto=VarDesconto,
                            segundoDesconto=VarDescontoTwo,
                            terceiroDesconto=VarDescontoThre, 
                            debitoIcms=VarICMSSaida,
                            creditoIcms=VarICMSEntrada,
                            priceSugestao=VarSugestao,
                            debitoRedIcms=VarReducaoEntrada,
                            creditoRedIcms=VarReducaoSaida,
                            creditoPis=VarCreditoPis,
                            creditoCofins=VarCreditoCofins,
                            validade=VarValidade,
                            descontoValor=VarDescontoValor
                                                where idProduto=VarProduto;  
                                                
                                                insert into bof(texto)value(VarProduto);
                                                
        end loop;
        close fonteTwo;
    end;     
    end if;     
    select utilizaOperacaoEntrada 
                            from
                                system
                                        into VarUtilOperacao;

    if(VarUtilOperacao = 's')then
    
        select tab.flagGeraPis,
                tab.flagGeraCofins,
                tab.flagUpdateFiscal
                    from
                        operacaoEntrada tab
                            inner join entrada tab1 on(tab.idOperacao = tab1.idOperacao)
                                                    where
                                                        tab1.idEntrada=chave
                                                                    into VarOperUpdatePis,VarOperUpdateCofins,VarOperUpdateFiscal;
            end if;
                                                
end $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `conector_update_priceEntrada`
--

DROP PROCEDURE IF EXISTS `conector_update_priceEntrada`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='' */ $$
CREATE DEFINER=`master`@`localhost` PROCEDURE `conector_update_priceEntrada`(in chave double, in store double)
begin
    declare VarMargem numeric(15,3);
    declare VarLucroBruto numeric(15,3);
    declare VarLucroValue numeric(15,3);
    declare VarLucroLiquido numeric(15,3);
    declare VarSubstituicaoPorcetagem numeric(15,3);
    declare VarPriceSugestao numeric(15,3);
    declare VarIpiPorcentagem numeric(15,3);
    declare VarDebitoRedIcms numeric(15,3);
    declare VarDebitoIcms numeric(15,3);
    declare VarCreditoRedIcms numeric(15,3);
    declare VarCreditoIcms numeric(15,3);
    declare VarFretePorcentagem numeric(15,3);
    declare VarVendo numeric(15,3);
    declare VarDespesaFixa numeric(15,3);
    declare VarFinanceiro numeric(15,3);
    declare VarTerceiroDesconto numeric(15,3);
    declare VarSegundoDesconto numeric(15,3);
    declare VarPrimeiroDesconto numeric(15,3);
    declare VardespesasTributadas numeric(15,3);
    declare VardespesasNaoTributadas numeric(15,3);
    declare VarAcrescimo numeric(15,3);
    declare VarBonificacao numeric(15,3);

    declare VarCustoLiquido numeric(15,3);
    declare VarPriceFull numeric(15,3);
    declare VarCustoNota numeric(15,3);
    declare VarCustoT numeric(15,3);
    declare VarCustoEMB numeric(15,3);
    declare VarCustoReposicao numeric(15,3);
    declare VarBasSubstituicao numeric(15,3);
    declare VarCustoBruto numeric(15,3);
    declare VarProduto double;
    declare VarPrecoVenda numeric(15,3);
    declare VarChaveItem numeric(15,3);
    declare VarPendente char(1);
    declare VarPendenteCusto char(1);
    declare VarCustoLiquidoAtual numeric(15,3);
    declare VarPrecoVendaAtual numeric(15,3);
    declare VarPend char(1);
    declare VarTipo char(1);
    declare VarCustos char(1);
    declare VarPreco char(1);
    declare VarNota varchar(10);
    declare VarFornecedor double;
    declare VarEstoque numeric(15,4);
    declare VarQuantidade numeric(15,3);
    declare VarStore double;
    declare VarLojaUnif double;
    declare VarUnif char(1);
    declare VarConfSt smallint;
    declare VarPrecoInd char(1);
    declare VarCustoInd char(1);
    declare VarPrecoUnif numeric(15,3);
    declare Unif numeric(15,3);
    declare VarUsuario int(11);
    declare VarOperacao int;
    declare VarUtilizaOperacao char(1);
    declare VarPauta numeric(15,3);
    declare VarCustoMedio numeric(15,3);
    declare VarEmbalagemEntrada int(11);
    declare VarCategoria int(11);
    declare VarDifFinal int(11);
    declare VarTypeOperacao char(1);
    declare VarFormato char(20);
    declare VarArredondado numeric(15,2);
    declare VarCalculoCustoMedio smallint;
    declare VarNovoPreco numeric(15,3);
    declare done int default false;
    declare done1 int default false;

    select
            calculaCustoMedio,
            precoPendente,
            custoPendente,
            updateCustoEntrada,
            updatePrecoEntrada,
            idLoja,
            precoUnificado,
            calculaPrecoVendaIndividual,
            utilizaCustoIndividual,
            utilizaOperacaoEntrada from system
                                            into
                                                VarCalculoCustoMedio,
                                                VarPendente,
                                                VarPendenteCusto,
                                                VarCustos,
                                                VarPreco,
                                                VarStore,
                                                VarUnif,
                                                VarPrecoInd,
                                                VarCustoInd,
                                                VarUtilizaOperacao;

                                            if(VarCalculoCustoMedio is null)then set VarCalculoCustoMedio=0; end if;
                                            if(VarCustos = 's')then set VarCustos='1'; else SET VarCustos='0'; end if;
                                            select nr_nota,
                                                   idCliente, 
                                                   idOperacao,
                                                   idUsuarioAlteracao
                                                                                    from entrada
                                                                                            where idEntrada=chave
                                                                                                    into VarNota,
                                                                                                         VarFornecedor,
                                                                                                         VarOperacao,
                                                                                                         VarUsuario;
            if(VarUtilizaOperacao = "s")then
                select  flagPriceVenda,
                        flagPriceCusto
                                from operacaoEntrada
                                                where idOperacao=VarOperacao
                                                            into VarPreco, VarCustos;
            end if;
            if(VarCustos = '1')then
                    select AtualizaCusto from loja where idLoja=store into VarCustos;
            end if;

            begin
                declare fonteOne Cursor for select idProduto,
                                                        idEntradaItem
                                                                    from
                                                                        entradaItem
                                                                                where
                                                                                    idEntrada=chave;
                declare continue handler for not found set done = true;

                open fonteOne;

                read_loop: LOOP
                            fetch fonteOne into VarProduto, VarChaveItem;


                    if done then
                        leave read_loop;
                    end if;

                            select tab.idProduto,
                                            tab.custoReposicao,
                                            tab.custoBruto,
                                            tab.custoLiquido,
                                            tab.priceVenda,
                                            tab.custoTransferencia,
                                            tab.baseCalculoSubstituicao,
                                            (tab.quantidade*tab1.quantidade),
                                            tab.custoNotaTotal,
                                            tab.chaveEmbalagem,
                                            `tab`.`discount1`,
                                            `tab`.`discount2`,
                                            `tab`.`discount3`,
                                            (`tab`.`acrescimo`+`tab`.`financeiro`),
                                            `tab`.`bonificacao`,
                                            (`tab`.`despesasNaoTributadas`+
                                            `tab`.`despesasTributadas`),
                                            `tab`.`vendo`,
                                            `tab`.`frete`,
                                            `tab`.`icmsEntrada`,
                                            `tab`.`reducaoEntrada`,
                                            `tab`.`icmsSaida`,
                                            `tab`.`reducaoSaida`,
                                            `tab`.`ipi`,
                                            `tab`.`sugestao`,
                                            `tab`.`substituicao`,
                                            `tab`.`lucro`,
                                            `tab`.`lucroValor`,
                                            `tab`.`lucroBruto`,
                                            `tab`.`margem`,
                                            `tab`.despesasTributadas,
                                            `tab`.despesasNaoTributadas,
                                            `tab`.acrescimo,
                                             tab.novoPrecoVenda
                                                     from entradaItem tab
                                                             inner join produtoEmbalagem tab1 on(tab.chaveEmbalagem = tab1.idProdutoEmbalagem)
                                                                                                     WHERE tab.idEntradaItem=VarChaveItem
                                                                                                                    into
                                                                                                                        VarProduto,
													                                                                                              VarCustoReposicao,
													                                                                                              VarCustoBruto,
													                                                                                              VarCustoLiquido,
													                                                                                              VarPrecoVenda,
													                                                                                              VarCustoT,
													                                                                                              VarBasSubstituicao,
													                                                                                              VarQuantidade,
													                                                                                              VarCustoNota,
                                                                                                                        VarEmbalagemEntrada,
                                                                                                                        VarPrimeiroDesconto,
                                                                                                                        VarSegundoDesconto,
                                                                                                                        VarTerceiroDesconto,
                                                                                                                        VarFinanceiro,
                                                                                                                        VarBonificacao,
                                                                                                                        VarDespesaFixa,
                                                                                                                        VarVendo,
                                                                                                                        VarFretePorcentagem,
                                                                                                                        VarCreditoIcms,
                                                                                                                        VarCreditoRedIcms,
                                                                                                                        VarDebitoIcms,
                                                                                                                        VarDebitoRedIcms,
                                                                                                                        VarIpiPorcentagem,
                                                                                                                        VarPriceSugestao,
                                                                                                                        VarSubstituicaoPorcetagem,
                                                                                                                        VarLucroLiquido,
                                                                                                                        VarLucroValue,
                                                                                                                        VarLucroBruto,
                                                                                                                        VarMargem,
                                                                                                                        VardespesasTributadas,
                                                                                                                        VardespesasNaoTributadas,
                                                                                                                        VarAcrescimo,
                                                                                                                        VarNovoPreco;

                                                                                                                        if(VarNovoPreco is null || VarNovoPreco <= 0)then set VarNovoPreco= VarPriceSugestao; end if;

                            select quantidade from produtoEstoques
                                                            where idProduto=VarProduto and idLoja=store
                                                                                            into VarEstoque;
                            if(VarEstoque < 0 or VarEstoque is null)then set VarEstoque=0; end if;

                            select pauta
                                        from produtoImpostos
                                                    where idProduto=VarProduto and idLoja=VarStore
                                                                                    into VarConfSt;
                            IF(VarCustos = '0')THEN
                                if(VarCalculoCustoMedio = 1 and VarEstoque > 0)then
                                update produtoPrice set custoMedio=(((custoMedio*VarEstoque)+(VarCustoBruto*VarQuantidade))/(VarEstoque+VarQuantidade))
                                                                        where idProduto=VarProduto and idLoja=store;
                                                                        else
                                                                            update produtoPrice set custoMedio=(((custoMedio*VarEstoque)+(VarCustoNota))/(VarEstoque+VarQuantidade))
                                                                                                                        where idProduto=VarProduto and idLoja=store;
                                                                                                                                                                                end if;                             ELSE

                                    if(VarCalculoCustoMedio = 1 and VarEstoque > 0)then
                                                        update bof set texto="PONTO 01";
                                                        UPDATE PRODUTOPRICE
                                                                                SET
                                                                            custoMedio=(((custoMedio*VarEstoque)+(VarCustoBruto*VarQuantidade))/(VarEstoque+VarQuantidade)),
                                                                            CUSTOLIQUIDO=VarCustoLiquido,
                                                                            CUSTOBRUTO=VarCustoBruto,
                                                                            priceFull=VarCustoBruto,
                                                                            EMBALAGEM=VarEmbalagemEntrada,
                                                                            USUARIOALTCUSTO=VarUsuario,
                                                                            PENDENTENOTA=VarNota,
                                                                            PENDENTEFORNECEDOR = VarFornecedor,
                                                                            ORIGEM="E",
                                                                            custoTransferencia=VarCustoT,
                                                                            primeiroDesconto=VarPrimeiroDesconto,
                                                                            segundoDesconto=VarSegundoDesconto,
                                                                            terceiroDesconto=VarTerceiroDesconto,
                                                                            financeiro=VarFinanceiro,
                                                                            despesaFixa=VarDespesaFixa,
                                                                            vendo=VarVendo,
                                                                            fretePorcentagem=VarFretePorcentagem,
                                                                            creditoIcms=VarCreditoIcms,
                                                                            creditoRedIcms=VarCreditoRedIcms,
                                                                            debitoIcms=VarDebitoIcms,
                                                                            debitoRedIcms=VarDebitoRedIcms,
                                                                            ipiPorcentagem=VarIpiPorcentagem,
                                                                            priceSugestao=VarPriceSugestao,
                                                                            pricePendente = VarNovoPreco,
                                                                            substituicaoPorcetagem=VarSubstituicaoPorcetagem,
                                                                            lucroLiquido=VarLucroLiquido,
                                                                            lucroBruto=VarLucroBruto,
                                                                            margem=VarMargem,
                                                                            despesasTributadas=VarDespesasTributadas,
                                                                            despesaNaoTributadas=VarDespesasNaoTributadas,
                                                                            acrescimo=VarAcrescimo,
                                                                            pendente = VarPendente
                                                                                    WHERE IDPRODUTO=VarProduto and IdLoja=store;
                                                                            else
                                                        update bof set texto="PONTO 02";
                                                        UPDATE PRODUTOPRICE
                                                                                SET
                                                                            custoMedio=(((custoMedio*VarEstoque)+(VarCustoNota))/(VarEstoque+VarQuantidade)),
                                                                            CUSTOLIQUIDO=VarCustoLiquido,
                                                                            CUSTOBRUTO=VarCustoBruto,
                                                                            priceFull=VarCustoBruto,
                                                                            EMBALAGEM=VarEmbalagemEntrada,
                                                                            USUARIOALTCUSTO=VarUsuario,
                                                                            PENDENTENOTA=VarNota,
                                                                            PENDENTEFORNECEDOR = VarFornecedor,
                                                                            ORIGEM="E",
                                                                            custoTransferencia=VarCustoT,
                                                                            primeiroDesconto=VarPrimeiroDesconto,
                                                                            segundoDesconto=VarSegundoDesconto,
                                                                            terceiroDesconto=VarTerceiroDesconto,
                                                                            financeiro=VarFinanceiro,
                                                                            despesaFixa=VarDespesaFixa,
                                                                            vendo=VarVendo,
                                                                            fretePorcentagem=VarFretePorcentagem,
                                                                            creditoIcms=VarCreditoIcms,
                                                                            creditoRedIcms=VarCreditoRedIcms,
                                                                            debitoIcms=VarDebitoIcms,
                                                                            debitoRedIcms=VarDebitoRedIcms,
                                                                            ipiPorcentagem=VarIpiPorcentagem,
                                                                            priceSugestao=VarPriceSugestao,
                                                                            pricePendente = VarNovoPreco,
                                                                            substituicaoPorcetagem=VarSubstituicaoPorcetagem,
                                                                            lucroLiquido=VarLucroLiquido,
                                                                            lucroBruto=VarLucroBruto,
                                                                            margem=VarMargem,
                                                                            despesasTributadas=VarDespesasTributadas,
                                                                            despesaNaoTributadas=VarDespesasNaoTributadas,
                                                                            acrescimo=VarAcrescimo,
                                                                            pendente = VarPendente
                                                                                    WHERE IDPRODUTO=VarProduto and IdLoja=store;


                                    end if;
                            END IF;

                    select custoMedio,pricefull
                                    from produtoPrice
                                            where idProduto=VarProduto and idLoja=Store
                                                                            into VarCustoMedio, VarPriceFull;
                                                                            if(VarPriceFull = 0)then  UPDATE PRODUTOPRICE set priceFull=CUSTOBRUTO WHERE IDPRODUTO=VarProduto and IdLoja=store; end if;
                    UPDATE entradaItem set
                                         custoMedio=VarCustoMedio where
                                                                    idEntradaItem=VarChaveItem;
                                                        update bof set texto="PONTO 03";
                    IF(VarUnif = "S")THEN
                      if(VarPreco = "1")then
                         IF(VarPendente = "S")THEN
                            SELECT priceVenda,custoLiquido
                                                    FROM PRODUTOPRICE
                                                                    where idProduto=VarProduto and idLoja=VarLoja
                                                                                into VarCustoLiquidoAtual, VarPrecoVendaAtual;
                                                                                                if(VarCustoLiquidoAtual=VarCustoLiquido and VarPrecoVendaAtual = VarPrecoVenda)then
                                                set VarPend="N";
                                                set VarTipo="0";
                                        end if;
                                        if(VarCustoLiquidoAtual <> VarCustoLiquido and VarPendenteCusto="S")then
                                                set VarPend="S";
                                                set VarTipo="3";
                                        end if;
                                        if(VarPrecoVendaAtual < VarPrecoVenda)then
                                                set VarPend="S";
                                                set VarTipo="1";
                                        end if;
                                        if(VarPrecoVendaAtual > VarPrecoVenda)then
                                                set VarPend="S";
                                                set VarTipo="2";
                                        end if;
                                        if(VarPrecoVendaAtual = 0)then
                                                set VarPend="S";
                                                set VarTipo="4";
                                        end if;
                                        IF(VarPend="N")THEN SET VarPrecoVenda=0; END IF;
                                                        update bof set texto="PONTO 04";
                                        update PRODUTOPRICE
                                                set PRICEPENDENTE = VarPrecoVenda,
                                                    usuarioAltPrice=VarUsuario,
                                                    priceFull=VarCustoBruto,
                                                    pendente=VarPend,
                                                    statusPrice = VarTipo,
                                                    origem="E",
                                                    pendenteNota = VarNota,
                                                    pendenteFornecedor = VarFornecedor,
                                                    embalagem=VarEmbalagemEntrada,
                                                    primeiroDesconto=VarPrimeiroDesconto,
                                                    segundoDesconto=VarSegundoDesconto,
                                                    terceiroDesconto=VarTerceiroDesconto,
                                                    financeiro=VarFinanceiro,
                                                    despesaFixa=VarDespesaFixa,
                                                    vendo=VarVendo,
                                                    fretePorcentagem=VarFretePorcentagem,
                                                    creditoIcms=VarCreditoIcms,
                                                    creditoRedIcms=VarCreditoRedIcms,
                                                    debitoIcms=VarDebitoIcms,
                                                    debitoRedIcms=VarDebitoRedIcms,
                                                    ipiPorcentagem=VarIpiPorcentagem,
                                                    priceSugestao=VarPriceSugestao,
                                                    pricePendente = VarNovoPreco,
                                                    substituicaoPorcetagem=VarSubstituicaoPorcetagem,
                                                    lucroLiquido=VarLucroLiquido,
                                                    lucroBruto=VarLucroBruto,
                                                    margem=VarMargem,
                                                    despesasTributadas=VarDespesasTributadas,
                                                    despesaNaoTributadas=VarDespesasNaoTributadas,
                                                    acrescimo=VarAcrescimo
                                                            where
                                                                idProduto = VarProduto and idLoja = VarLoja;

                         END IF;
                      end if;
                    END IF;

                    IF(VarUnif = "N")THEN
                      if(VarPrecoInd = "S")then
                        IF(VarPreco = "1")THEN
                            if(VarPendente = "S")theN
                                set VarPend="N";
                                SELECT priceVenda,custoLiquido
                                                    FROM PRODUTOPRICE
                                                                    where idProduto=VarProduto and idLoja=VarLoja
                                                                                into VarCustoLiquidoAtual, VarPrecoVendaAtual;
                                                                        if(VarCustoLiquidoAtual=VarCustoLiquido and VarPrecoVendaAtual = VarPrecoVenda)then
                                                set VarPend="N";
                                                set VarTipo="0";
                                        end if;
                                        if(VarCustoLiquidoAtual <> VarCustoLiquido and VarPendenteCusto="S")then
                                                set VarPend="S";
                                                set VarTipo="3";
                                        end if;
                                        if(VarPrecoVendaAtual < VarPrecoVenda)then
                                                set VarPend="S";
                                                set VarTipo="1";
                                        end if;
                                        if(VarPrecoVendaAtual > VarPrecoVenda)then
                                                set VarPend="S";
                                                set VarTipo="2";
                                        end if;
                                        if(VarPrecoVendaAtual = 0)then
                                                set VarPend="S";
                                                set VarTipo="4";
                                        end if;
                                        IF(VarPend="N")THEN SET VarPrecoVenda=0; END IF;
                                                        update bof set texto="PONTO 05";
                                        update PRODUTOPRICE
                                                set PRICEPENDENTE = VarPrecoVenda,
                                                    usuarioAltPrice=VarUsuario,
                                                    pendente=VarPend,
                                                    statusPrice = VarTipo,
                                                    origem="E",
                                                    pendenteNota = VarNota,
                                                    pendenteFornecedor = VarFornecedor,
                                                    embalagem=VarEmbalagemEntrada,
                                                    primeiroDesconto=VarPrimeiroDesconto,
                                                    segundoDesconto=VarSegundoDesconto,
                                                    terceiroDesconto=VarTerceiroDesconto,
                                                    financeiro=VarFinanceiro,
                                                    despesaFixa=VarDespesaFixa,
                                                    vendo=VarVendo,
                                                    fretePorcentagem=VarFretePorcentagem,
                                                    creditoIcms=VarCreditoIcms,
                                                    creditoRedIcms=VarCreditoRedIcms,
                                                    debitoIcms=VarDebitoIcms,
                                                    debitoRedIcms=VarDebitoRedIcms,
                                                    ipiPorcentagem=VarIpiPorcentagem,
                                                    priceSugestao=VarPriceSugestao,
                                                    pricePendente = VarNovoPreco,
                                                    substituicaoPorcetagem=VarSubstituicaoPorcetagem,
                                                    lucroLiquido=VarLucroLiquido,
                                                    lucroBruto=VarLucroBruto,
                                                    margem=VarMargem,
                                                    despesasTributadas=VarDespesasTributadas,
                                                    despesaNaoTributadas=VarDespesasNaoTributadas,
                                                    acrescimo=VarAcrescimo
                                                            where
                                                                idProduto = VarProduto;
                            end if;
                        END IF;
                        IF(VarPendente = "S")THEN
                            BEGIN                                 declare fonteTwo Cursor for select priceVenda,
                                                                   loja
                                                                    from entradaPrice
                                                                        where entradaPrice.chave=chave;
                                declare continue handler for not found set done1 = true;
                                open fonteTwo;
                                read_loop1: LOOP
                                    fetch fonteTwo into VarPrecoUnif,
                                                        VarLojaUnif;

                                        if done1 then
                                            leave read_loop1;
                                        end if;

                                            set VarPend="N";
                                            SELECT priceVenda,custoLiquido
                                                                FROM produtoPrice
                                                                            where idProduto=VarProduto and idLoja=VarLoja
                                                                            into VarPrecoVendaAtual, VarCustoLiquidoAtual;

                                        if(VarCustoLiquidoAtual=VarCustoLiquido and VarPrecoVendaAtual = VarPrecoUnif)then
                                                set VarPend="N";
                                                set VarTipo="0";
                                        end if;
                                        if(VarCustoLiquidoAtual <> VarCustoLiquido and VarPendenteCusto="S")then
                                                set VarPend="S";
                                                set VarTipo="3";
                                        end if;
                                        if(VarPrecoVendaAtual < VarPrecoUnif)then
                                                set VarPend="S";
                                                set VarTipo="1";
                                        end if;
                                        if(VarPrecoVendaAtual > VarPrecoUnif)then
                                                set VarPend="S";
                                                set VarTipo="2";
                                        end if;
                                        if(VarPrecoVendaAtual = 0)then
                                                set VarPend="S";
                                                set VarTipo="4";
                                        end if;
                                        IF(VarPend="N")THEN SET VarPrecoUnif=0; END IF;
                                                        update bof set texto="PONTO 06";
                                        update PRODUTOPRICE
                                                set PRICEPENDENTE = VarPrecoUnif,
                                                    usuarioAltPrice=VarUsuario,
                                                    pendente=VarPend,
                                                    statusPrice = VarTipo,
                                                    origem="E",
                                                    pendenteNota = VarNota,
                                                    pendenteFornecedor = VarFornecedor,
                                                    embalagem=VarEmbalagemEntrada,
                                                    custoTransferencia=VarCustoT,
                                                    primeiroDesconto=VarPrimeiroDesconto,
                                                    segundoDesconto=VarSegundoDesconto,
                                                    terceiroDesconto=VarTerceiroDesconto,
                                                    financeiro=VarFinanceiro,
                                                    despesaFixa=VarDespesaFixa,
                                                    vendo=VarVendo,
                                                    fretePorcentagem=VarFretePorcentagem,
                                                    creditoIcms=VarCreditoIcms,
                                                    creditoRedIcms=VarCreditoRedIcms,
                                                    debitoIcms=VarDebitoIcms,
                                                    debitoRedIcms=VarDebitoRedIcms,
                                                    ipiPorcentagem=VarIpiPorcentagem,
                                                    priceSugestao=VarPriceSugestao,
                                                    pricePendente = VarNovoPreco,
                                                    substituicaoPorcetagem=VarSubstituicaoPorcetagem,
                                                    lucroLiquido=VarLucroLiquido,
                                                    lucroBruto=VarLucroBruto,
                                                    margem=VarMargem,
                                                    despesasTributadas=VarDespesasTributadas,
                                                    despesaNaoTributadas=VarDespesasNaoTributadas,
                                                    acrescimo=VarAcrescimo                                                            where
                                                                idProduto = VarProduto and idLoja=VarLojaUnif;

                                end loop;                                 close fonteTwo;
                            END;                         END IF;
                else
                    if(VarCustos = '1')then
                        IF(VarCustoInd = "S")THEN
                    update bof set texto="PONTO 10";
                        UPDATE PRODUTOPRICE
                                           SET  CUSTOLIQUIDO=VarCustoLiquido,
                                                CUSTOBRUTO=VarCustoBruto,
                                                priceFull=VarCustoBruto,
                                                EMBALAGEM=VarEmbalagemEntrada,
                                                USUARIOALTCUSTO=VarUsuario,
                                                PENDENTENOTA=VarNota,
                                                PENDENTEFORNECEDOR = VarFornecedor,
                                                ORIGEM="E",
                                                primeiroDesconto=VarPrimeiroDesconto,
                                                segundoDesconto=VarSegundoDesconto,
                                                terceiroDesconto=VarTerceiroDesconto,
                                                financeiro=VarFinanceiro,
                                                despesaFixa=VarDespesaFixa,
                                                vendo=VarVendo,
                                                fretePorcentagem=VarFretePorcentagem,
                                                creditoIcms=VarCreditoIcms,
                                                creditoRedIcms=VarCreditoRedIcms,
                                                debitoIcms=VarDebitoIcms,
                                                debitoRedIcms=VarDebitoRedIcms,
                                                ipiPorcentagem=VarIpiPorcentagem,
                                                priceSugestao=VarPriceSugestao,
                                                pricePendente = VarNovoPreco,
                                                substituicaoPorcetagem=VarSubstituicaoPorcetagem,
                                                lucroLiquido=VarLucroLiquido,
                                                lucroBruto=VarLucroBruto,
                                                margem=VarMargem,
                                                despesasTributadas=VarDespesasTributadas,
                                                despesaNaoTributadas=VarDespesasNaoTributadas,
                                                acrescimo=VarAcrescimo
                                        WHERE IDPRODUTO=VarProduto;
                                        ELSE
update bof set texto="PONTO 11";
                        UPDATE PRODUTOPRICE
                                           SET  CUSTOLIQUIDO=VarCustoLiquido,
                                                CUSTOBRUTO=VarCustoBruto,
                                                priceFull=VarCustoBruto,
                                                EMBALAGEM=VarEmbalagemEntrada,
                                                USUARIOALTCUSTO=VarUsuario,
                                                PENDENTENOTA=VarNota,
                                                PENDENTEFORNECEDOR = VarFornecedor,
                                                ORIGEM="E",
                                                primeiroDesconto=VarPrimeiroDesconto,
                                                segundoDesconto=VarSegundoDesconto,
                                                terceiroDesconto=VarTerceiroDesconto,
                                                financeiro=VarFinanceiro,
                                                despesaFixa=VarDespesaFixa,
                                                vendo=VarVendo,
                                                fretePorcentagem=VarFretePorcentagem,
                                                creditoIcms=VarCreditoIcms,
                                                creditoRedIcms=VarCreditoRedIcms,
                                                debitoIcms=VarDebitoIcms,
                                                debitoRedIcms=VarDebitoRedIcms,
                                                ipiPorcentagem=VarIpiPorcentagem,
                                                priceSugestao=VarPriceSugestao,
                                                pricePendente = VarNovoPreco,
                                                substituicaoPorcetagem=VarSubstituicaoPorcetagem,
                                                lucroLiquido=VarLucroLiquido,
                                                lucroBruto=VarLucroBruto,
                                                margem=VarMargem,
                                                despesasTributadas=VarDespesasTributadas,
                                                despesaNaoTributadas=VarDespesasNaoTributadas,
                                                acrescimo=VarAcrescimo
                                        WHERE IDPRODUTO=VarProduto and IdLoja=store;

                        END IF;
                    end if;                    end if;                   END IF;
                  end loop;                 close fonteOne;
            end;

end $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `conector_update_produtoStore`
--

DROP PROCEDURE IF EXISTS `conector_update_produtoStore`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='' */ $$
CREATE DEFINER=`master`@`localhost` PROCEDURE `conector_update_produtoStore`(
                                        in matriz double,
                                        in loja_new double
                                     )
begin
    declare VaridProduto  double;
    declare Valida  double;
    DECLARE done INT DEFAULT FALSE;
    declare exitsRelacionamento int;
    declare VarOrigem double;
    declare VarDestino double;
    declare VarControlaEstoque smallint;
    declare VarAtualizaProduto smallint;
    declare VarAtualizaPrice smallint;
    declare VarUnificaEstoque smallint;
    declare sinal smallint default 0;
    
    select count(*) 
                from lojaRelacionamento 
                                where idLojaOrigem=matriz into exitsRelacionamento;
                                
    IF(exitsRelacionamento > 0)THEN
    
    select idLojaOrigem, 
                idLojaDestino,
                controlaEstoque,
                atualizaProduto,
                atualizaPrice,
                unificaEstoque from lojaRelacionamento 
                        where idLojaOrigem=matriz and idLojaDestino=loja_new
                                                        into VarOrigem,
                                                              VarDestino,
                                                              VarControlaEstoque,
                                                              VarAtualizaProduto,
                                                              VarAtualizaPrice,
                                                              VarUnificaEstoque;

    begin
             DECLARE basicFonte CURSOR for select idProduto from produtoStore where idLoja=matriz;

                          DECLARE CONTINUE HANDLER FOR NOT FOUND SET done = TRUE;
              open basicFonte;

              read_loop: LOOP
                          fetch basicFonte into VaridProduto;

                    IF done THEN
                        LEAVE read_loop;
                    END IF;

                    if(VaridProduto is not null && VaridProduto > 0)then

                                       select coalesce((select tab.idProduto
                                                                                from produto tab
                                                                                    left join produtostore tab1 on(tab.idProduto =tab1.idProduto)
                                                                                            where tab.idProduto=VaridProduto and tab1.idLoja=loja_new),0)
                                                                                from produto tab
                                                                                    left join produtostore tab1 on(tab.idProduto =tab1.idProduto)
                                                                                            where tab.idProduto=VaridProduto and tab1.idLoja=matriz into valida;

            else
               set valida=0;
            end if;
            IF(valida = 0)then
                  if(VarAtualizaProduto = 1)then
                     replace into produtoStore select idProduto,loja_new,mix from produtoStore where idLoja=matriz and idProduto=VaridProduto;
                     replace into produtoPrice select `idProduto`,loja_new,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,`comissao`,0,0,0,0,0,0,`margem`,0,0,0,0,0,0,0,0,0,`flagCompraLoja`,`origem`,`usuarioAltCusto`,`usuarioAltPrice`,`pendente`,`pendenteNota`,`pendenteFornecedor`,`embalagem`,`custoTransferencia`,`icmsFrete`,`acrescimo`,`descontoValor`,`validade`,`margemBruta`,0,0,0,0,0 from produtoPrice where idLoja=matriz and idProduto=VaridProduto;
                     replace into produtoEstoques select `produtoestoques`.`idProduto`,loja_new,0,0,0,"",now(),now() from produtoEstoques where idLoja=matriz and idProduto=VaridProduto;
                     replace into produtoImpostos select `produtoimpostos`.`idProduto`,loja_new,`produtoimpostos`.`tributacao`,`produtoimpostos`.`tributacao1`,`produtoimpostos`.`tributacao2`,`produtoimpostos`.`idpisCofins`,`produtoimpostos`.`cst`,`produtoimpostos`.`cstSaida`,`produtoimpostos`.`cstEntrada`,`produtoimpostos`.`pauta`,`produtoimpostos`.`ipi`,`produtoimpostos`.`ipiValor`,`produtoimpostos`.`spedNcm`,`produtoimpostos`.`impMercadoInterno`,`produtoimpostos`.`csosn`,`produtoimpostos`.`idtypeItem`,`produtoimpostos`.`idGenero`,`produtoimpostos`.`reducaoCalcEspecial` from produtoImpostos where idLoja=matriz and idProduto=VaridProduto;
                  set sinal = 1;
                  end if;
                  if(VarAtualizaPrice = 1 && VarAtualizaProduto = 1)then
                    replace into produtoPrice select `idProduto`,loja_new,`priceFull`,`priceVenda`,`pricePendente`,`creditoIcms`,`creditoRedIcms`,`creditoPis`,`creditoCofins`,`creditoOutros`,`primeiroDesconto`,`segundoDesconto`,`terceiroDesconto`,`debitoIcms`,`debitoRedIcms`,`lucroLiquido`,`lucroBruto`,`custoBruto`,`custoliquido`,`custoMedio`,`IpiPorcentagem`,`moedaIpi`,`moedaFrete`,`fretePorcentagem`,`comissao`,`priceSugestao`,`substituicaoPorcetagem`,`acrescimoSubstituicao`,`moedaSubstituicao`,`bonificacaoDesconto`,`moedaBonificacao`,`margem`,`descontoMaximo`,`despesasTributadas`,`despesaNaoTributadas`,`contribuicao`,`vendo`,`financeiro`,`despesaFixa`,`statusPrice`,`chaveEntrada`,`flagCompraLoja`,`origem`,`usuarioAltCusto`,`usuarioAltPrice`,`pendente`,`pendenteNota`,`pendenteFornecedor`,`embalagem`,`custoTransferencia`,`icmsFrete`,`acrescimo`,`descontoValor`,`validade`,`margemBruta`,`margemLiquida`,`custoAnterior`,`precoVendaAnterior`,`margemAnterior` from produtoPrice where idLoja=matriz and idProduto=VaridProduto;
                  end if;

            END IF;
            end loop;
        close basicFonte;
    end;
    
    END IF;
    if(sinal = 1)then
        update lojaRelacionamento set flagRelacionamento=1 where idLojaOrigem=matriz and idLojaDestino=loja_new;
    end if;
end $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `conector_valida_dateTime`
--

DROP PROCEDURE IF EXISTS `conector_valida_dateTime`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='' */ $$
CREATE DEFINER=`master`@`localhost` PROCEDURE `conector_valida_dateTime`( in dia int, in mes int, in ano int, out d int, out m int, out a int)
begin

  declare vdia int;
  declare vmes int;
  declare vano int;
  declare vUltdia int;
  declare vdata varchar(10);
  set vdia = dia;
  set vmes = mes;
  set vano = ano;
      if(vmes = 2)then
          if(vdia > 28)then
              set  vdata = (select concat(vano,'-',vmes,'-01'));
                  select mid(date_format(last_day(vdata),'%d/%m/%Y'),1,2) into vUltdia;
              set  vdata = (select concat(vano,'-',vmes,'-',vUltdia));
              set  vdia =  (select date_format(vdata,'%d'));
          end if;
      else
            if(vDia >= 31) then
                      set  vdata = (select concat(vano,'-',vmes,'-01'));
                      select mid(date_format(last_day(vdata),'%d/%m/%Y'),1,2) into vUltdia;

                      if((vDia >= 31) && (vUltdia = 31)) then
                          set vDia=31;
                      else
                          if((vDia >= 31) && (vUltdia = 30)) then
                          set vDia=30;
                        end if;
                      end if;

            end if;
      end if;

select
        vdia,vmes,vano
                      into
                          d,m,a;

end $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `conector_valida_diaUtil`
--

DROP PROCEDURE IF EXISTS `conector_valida_diaUtil`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='' */ $$
CREATE DEFINER=`master`@`localhost` PROCEDURE `conector_valida_diaUtil`(
                                                            in dateEntry date,
                                                            in verifica char(1)
                                                      )
BEGIN
        declare diaTrue char(1);
        set diaTrue = 'N';

        while diaTrue = 'N' DO
            call conector_find_feriado(dateEntry,@feriado);
            if (@feriado = 'N') then 
                    if (verifica = 'A') then  
                            If ((SELECT DAYOFWEEK(dateEntry)) = 1) Then 

                                    select DATE_ADD(dateEntry, INTERVAL - 2 DAY) into @DIAUTIL;

                            else If ((SELECT DAYOFWEEK(dateEntry)) = 7) Then 

                                    select DATE_ADD(dateEntry, INTERVAL - 1 DAY) into @DIAUTIL;

                                  end if;
                            end if;
                     else       

                            If ((SELECT DAYOFWEEK(dateEntry)) = 1) Then 

                                    select DATE_ADD(dateEntry, INTERVAL + 1 DAY) into @DIAUTIL;

                            else If ((SELECT DAYOFWEEK(dateEntry)) = 7) Then 

                                    select DATE_ADD(dateEntry, INTERVAL + 2 DAY) into @DIAUTIL;

                            end if;
                          end if;
                    end if;

                SET diaTrue = 'S';

                IF (@DIAUTIL is not null) THEN

                        set dateEntry = @DIAUTIL;

                END IF;

                    If ((SELECT DAYOFWEEK(dateEntry)) = 1) Then 
                        set diaTrue = 'N';
                    END IF;

                    If ((SELECT DAYOFWEEK(dateEntry)) = 7) Then 
                        set diaTrue = 'N';
                    END IF;

                         call conector_find_feriado(dateEntry,@feriado);

                        if(@feriado = 'S')then
                            set diaTrue = 'N';
                        end if;


                else
                    if (verifica = 'A') then

                        select DATE_ADD(dateEntry, INTERVAL - 1 DAY) into @DIAUTIL;

                        else

                        select DATE_ADD(dateEntry, INTERVAL + 1 DAY) into @DIAUTIL;
                    IF (@DIAUTIL is not null) THEN

                        set dateEntry = @DIAUTIL;

                    END IF;
                end if;

            end if;

        end while;

        SELECT dateEntry;
END $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `conector_valida_nfEntrada`
--

DROP PROCEDURE IF EXISTS `conector_valida_nfEntrada`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='' */ $$
CREATE DEFINER=`master`@`localhost` PROCEDURE `conector_valida_nfEntrada`(in chave double, in store double)
begin
    declare VarOperacao double;
    declare VarForcePagar double;
    declare VarCountNotRecebe int default 0;
select count(*)
                from entradaItem where idEntrada=chave and flagRecebe=0
                                            into VarCountNotRecebe;

if(VarCountNotRecebe > 0)then     delete from entradaItem where idEntrada=chave and flagRecebe=0;
end if;

select idOperacao
                from entrada
                            where idEntrada =chave
                                            into VarOperacao;
select flagUpdatePagar
                from operacaoEntrada
                           where idOperacao=VarOperacao
                                            into VarForcePagar;
                                            if(VarForcePagar is null)then set VarForcePagar=1; end if;

    if(chave > 0)then
        IF(store > 0)then
            call conector.conector_update_estoque(chave);
                    if(VarForcePagar = 1)then call conector.conector_update_financeiroEntrada(chave); end if;
                     call conector.conector_update_impEntrada(chave,store,0);
                     call conector.conector_update_priceEntrada(chave,store);
            update entrada set status=1 where idEntrada=chave;
        END IF;
    end if;
end $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `conector_verifica_feriado`
--

DROP PROCEDURE IF EXISTS `conector_verifica_feriado`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='' */ $$
CREATE DEFINER=`master`@`localhost` PROCEDURE `conector_verifica_feriado`(in tipo integer, in find varchar(30), in di date, in df date)
begin
case tipo
    when 1 then
          select
                 feriado.idFeriado,
                 feriado.Feriado,
                 feriado.descricao,
                 loja.Razao,
                 feriado.todasLoja
                   from feriado,loja where feriado.idLoja = loja.idloja and idFeriado=find;
    when 2 then  
          select
                 feriado.idFeriado,
                 feriado.Feriado,
                 feriado.descricao,
                 loja.Razao,
                 feriado.todasLoja
                   from feriado,loja where feriado.idLoja = loja.idloja;
    when 3 then 
          select
                 feriado.idFeriado,
                 feriado.Feriado,
                 feriado.descricao,
                 loja.Razao,
                 feriado.todasLoja
                   from feriado,loja where (feriado.idLoja = loja.idloja) and
                                            feriado between di and df and
                                           (find=0 or loja.idloja = find);
    when 4 then 
          select
                 feriado.idFeriado,
                 feriado.descricao,
                 feriado.Feriado,
                 feriado.idLoja,
                 loja.Razao,
                 feriado.todasLoja
                   from feriado,loja where feriado.idLoja = loja.idloja and feriado.idFeriado = find;
end case;
end $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `conector_verifica_municipio`
--

DROP PROCEDURE IF EXISTS `conector_verifica_municipio`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='' */ $$
CREATE DEFINER=`master`@`localhost` PROCEDURE `conector_verifica_municipio`(in find_cep varchar(12))
BEGIN
if(select count(cep) as cep from cepbairro where cepbairro.cep=find_cep) > 0 then
  set @a = (select cepCity.nome from cepbairro inner join cepCity on(cepbairro.idcepCity = cepCity.idcepCity) inner join estado on(cepbairro.idestado=estado.idestado) where cepbairro.cep = find_cep);
  set @b = (select ifnull(idspedMunicipio,0) as cod_municipio from spedmunicipio where municipio like concat(@a,"%"));
  select @b;
else
  select 0;
end if;

END $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `conector_zera_estoque`
--

DROP PROCEDURE IF EXISTS `conector_zera_estoque`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='' */ $$
CREATE DEFINER=`master`@`localhost` PROCEDURE `conector_zera_estoque`(
                                                          in findIdusuarioAlt int(11),
                                                          in findIdloja int(11),
                                                          in findIdsetor int,
                                                          in findIdgrupo int,
                                                          in findIdcategoria int,
                                                          in findstatus smallint,
                                                          in findIdfornecedor int(11),
                                                          in findidProduto double)
begin
start transaction;

update produto tab, produtoStore tab1, produtoEstoques tab2
        set tab2.quantidade= 0,
        tab.dataAlteracao = now(),
        tab.idUsuarioAlt = findIdusuarioAlt
        where  tab1.idproduto = tab.idproduto and
               tab2.idproduto = tab.idproduto and
               tab2.idloja = tab1.idloja and
               tab1.idloja = findIdloja and
               tab2.idLoja = findIdloja
               and (findIdsetor = 0 or tab.idsetor = findIdsetor)
               and (findIdGrupo = 0 or tab.idGrupo = findIdGrupo)
               and (findIdcategoria = 0 or tab.idcategoria = findIdcategoria)
               and tab.status = findstatus
               and (findIdFornecedor = 0 or tab.idFornecedor = findIdFornecedor)
               and (findidProduto = 0 or tab.idproduto = findidProduto);

commit;
end $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `exe_carga`
--

DROP PROCEDURE IF EXISTS `exe_carga`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='' */ $$
CREATE DEFINER=`master`@`localhost` PROCEDURE `exe_carga`(            inc_loja INT,
            inc_data DATE,
            inc_sequencia_carga INT,
            inc_terminal INT,
            inc_cargaType INT,
            inc_hora_carga TIME,
            inc_hora_carga_proc TIME,
            inc_parcial SMALLINT,
            inc_statusCarga SMALLINT,
            inc_remetente VARCHAR(45),
            inc_versao VARCHAR(45),
            inc_usuario INT,
            inc_tentativas INT,
            inc_geral SMALLINT,
            inc_administradora SMALLINT,
            inc_balanca SMALLINT,
            inc_fiscal SMALLINT,
            inc_finalizadora SMALLINT,
            inc_cadastro SMALLINT,
            inc_configuracao SMALLINT,
            inc_pessoa SMALLINT,
            inc_produto SMALLINT,
            inc_cep SMALLINT)
INSERT INTO `conector`.`carga`
        (
            `loja`,
            `data`,
            `sequencia_carga`,
            `terminal`,
            `cargaType`,
            `hora_carga`,
            `hora_carga_proc`,
            `parcial`,
            `statusCarga`,
            `remetente`,
            `versao`,
            `usuario`,
            `tentativas`,
            `geral`,
            `administradora`,
            `balanca`,
            `fiscal`,
            `finalizadora`,
            `cadastro`,
            `configuracao`,
            `pessoa`,
            `produto`,
            `cep`)
    VALUES
    (
            inc_loja,
            inc_data,
            inc_sequencia_carga,
            inc_terminal,
            inc_cargaType,
            inc_hora_carga,
            inc_hora_carga_proc,
            inc_parcial,
            inc_statusCarga,
            inc_remetente,
            inc_versao,
            inc_usuario,
            inc_tentativas,
            inc_geral,
            inc_administradora,
            inc_balanca,
            inc_fiscal,
            inc_finalizadora,
            inc_cadastro,
            inc_configuracao,
            inc_pessoa,
            inc_produto,
            inc_cep
) $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `teste`
--

DROP PROCEDURE IF EXISTS `teste`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='' */ $$
CREATE DEFINER=`master`@`localhost` PROCEDURE `teste`()
begin
select   tab.idAdministradora,
        tab.`descricao`,
        tab.`taxa`,
        tab.`prazo`,
        tab.`idtypeCartao`,
        tab.`cnpj`,
        tab.`ie`,
        tab.`inclusao`,
        tab.`cep`,
        tab.`rua`,
        tab.`numero`,
        tab.`bairro`,
        tab.`municipio`,
        tab.`idestado`,
        tab.`uf`,
        tab.`inativo`,
        tab.`historicoCredito`,
        tab.`historicoDebito`,
        tab.`idcontaCorrente`,
        tab.razao,
        tab1.descricao as Credito,
        tab2.descricao as Debito,
        tab4.razao razao
                 from administradora tab
                      left join (select idHistorico,
                                         descricao
                                            from historico
                                                  where inativa != 1 and tipo="C") tab1 on(tab.historicoCredito = tab1.idHistorico)
                      left join (select idHistorico,
                                         descricao
                                            from historico
                                                  where inativa != 1 and tipo="D") tab2 on(tab.historicoDebito = tab2.idHistorico)
                       left join contaCorrente tab4 on(tab.idContaCorrente = tab4.idContaCorrente)
                 where
                                     tab.idAdministradora=1;
set @bof=0;
select @bof;
      end $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of view `vw_conector_autentic`
--

DROP TABLE IF EXISTS `vw_conector_autentic`;
DROP VIEW IF EXISTS `vw_conector_autentic`;
CREATE ALGORITHM=UNDEFINED DEFINER=`root`@`localhost` SQL SECURITY DEFINER VIEW `vw_conector_autentic` AS select `tab`.`idLoja` AS `idLoja`,`tab1`.`razao` AS `razao`,`tab`.`idTerminal` AS `idTerminal`,`tab`.`idfinalizadora` AS `idFinalizadora`,`tab2`.`descricao` AS `descricao`,`tab`.`emissao` AS `emissao`,`tab`.`historico` AS `historico`,`tab`.`reserva` AS `reserva`,round(`tab`.`total`,2) AS `subtotal`,(select round(sum(`tab`.`total`),2) AS `total` from `autentic_cx` `tab` where (date_format(`tab`.`emissao`,'%Y%m%d') = date_format(now(),'%Y%m%d'))) AS `total`,`tab`.`idFuncionario` AS `idFuncionario` from ((`autentic_cx` `tab` join `loja` `tab1` on((`tab`.`idLoja` = `tab1`.`idloja`))) join `finalizadora` `tab2` on((`tab`.`idfinalizadora` = `tab2`.`idfinalizadora`))) where ((`tab`.`idLoja` = 1) and (date_format(`tab`.`emissao`,'%Y%m%d') = date_format(now(),'%Y%m%d')));



/*!40101 SET SQL_MODE=@OLD_SQL_MODE */;
/*!40014 SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS */;
/*!40014 SET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS */;
/*!40101 SET CHARACTER_SET_CLIENT=@OLD_CHARACTER_SET_CLIENT */;
/*!40101 SET CHARACTER_SET_RESULTS=@OLD_CHARACTER_SET_RESULTS */;
/*!40101 SET COLLATION_CONNECTION=@OLD_COLLATION_CONNECTION */;
/*!40101 SET CHARACTER_SET_CLIENT=@OLD_CHARACTER_SET_CLIENT */;
