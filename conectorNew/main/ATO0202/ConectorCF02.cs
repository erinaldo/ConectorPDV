//Geracao tabela A2 Insert conector_update_lineMD5_A2 OK!
//Geracao tabela "case 7" conector_update_lineMD5_P2!
//Geracao tabela 1 produto MD5 REVER inst "conectorPDV_gera_crypt_produto"
//Geracao tabela 2 produto MD5 REVER case11 inst "conectorPDV_gera_crypt_produto"
/*
 * 
 public Service(string webconector)
        {
            this.Url = webconector;
            if ((this.IsLocalFileSystemWebService(this.Url) == true))
            {
                this.UseDefaultCredentials = true;
                this.useDefaultCredentialsSetExplicitly = false;
            }
            else
            {
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
 */

using System;
using System.Globalization;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Diagnostics;
using System.Security.Cryptography;
using System.Linq;
using System.Text;
using System.Windows.Forms;
//using conectorBema; 20052015
//using conectorECFBema;
using System.IO;
using System.IO.Ports;
using System.Reflection;
using System.Runtime.InteropServices;
using System.Threading;
//#######################Modulo Web/Net
using System.Net;
using System.Web;
using System.ServiceModel;
using System.ServiceModel.Web;

//#######################End Modulo Web/Net

namespace conectorPDV001.ATO0202
{
    public partial class ConectorCF02 : Form
    {
        //Chocolate.design@gmail.com
        //######################################################Construtores#################################################################
        public ConectorCF02()
        {
            InitializeComponent();
            if (fiscal_store.Replace("\0","").Trim() == "" ||
                    fiscal_numero_caixa.Replace("\0", "").Trim() == "" ||
                    fiscal_CGC.Replace("\0", "").Trim() == "" ||
                    fiscal_numero_serie.Replace("\0", "").Trim() == "" ||
                    fiscal_modelo.Replace("\0", "").Trim() == "" ||
                    fiscal_marca.Replace("\0", "").Trim() == "" ||
                    fiscal_letramf_adicional.Replace("\0", "").Trim() == "" ||
                    fiscal_tipo_ecf.Replace("\0", "").Trim() == "" ||
                    fiscal_VersaoFirmware.Replace("\0", "").Trim() == "" ||
                    fiscal_dtsoft_basico.Replace("\0", "").Trim() == "")
                    {
                        conector_carrega_variavel();
                    }
        }
        public ConectorCF02(int modo)
        {
            InitializeComponent();

            /*Responsavel por arquivar os movimentos
                                                            Cria senao existir
                                                         */
            Directory.CreateDirectory(folderMaster);
            Directory.CreateDirectory(folderMFD);
            Directory.CreateDirectory(folderMFDGrand);
            Directory.CreateDirectory(folderSlave);

            conector_banco();
            resetVariable();
            if (modo == 1)
            {
                //################Carregando configurações da impressora fiscal##################
                functionECF.conectorECF_GrandeTotal(alwaysVariables.ModeloEcf, ref fiscal_GT, ref fiscal_MSG, ref fiscal_retorno, alwaysVariables.ECF_Ligada);
                //fiscal_retorno = conectorECF.Bematech_FI_NumeroSerieMFD(ref fiscal_numero_serie);
                //conectorECF.Analisa_iRetorno(fiscal_retorno, ref fiscal_MSG);
                if (fiscal_retorno == 1)
                {
                    functionECF.conectorECF_NumeroLoja(alwaysVariables.ModeloEcf, ref fiscal_store, ref fiscal_MSG, ref fiscal_retorno, alwaysVariables.ECF_Ligada);
                    //fiscal_retorno = conectorECF.Bematech_FI_NumeroLoja(ref fiscal_store);
                    //conectorECF.Analisa_iRetorno(fiscal_retorno, ref fiscal_MSG);
                }
                if (fiscal_retorno == 1)
                {
                    functionECF.conectorECF_NumeroCaixa(alwaysVariables.ModeloEcf, ref fiscal_numero_caixa, ref fiscal_MSG, ref fiscal_retorno, alwaysVariables.ECF_Ligada);
                    //fiscal_retorno = conectorECF.Bematech_FI_NumeroCaixa(ref fiscal_numero_caixa);
                    //conectorECF.Analisa_iRetorno(fiscal_retorno, ref fiscal_MSG);
                }
                if (fiscal_retorno == 1)
                {
                    functionECF.conectorECF_DataMovimento(alwaysVariables.ModeloEcf, ref fiscal_data_movimento, ref fiscal_MSG, ref fiscal_retorno, alwaysVariables.ECF_Ligada);
                    //fiscal_retorno = conectorECF.Bematech_FI_DataMovimento(ref fiscal_data_movimento);
                    //conectorECF.Analisa_iRetorno(fiscal_retorno, ref fiscal_MSG);
                }
                if (fiscal_retorno == 1)
                {
                    if (fiscal_data_printer.Trim() == "")
                    {
                        functionECF.conectorECF_DataHoraReducao(alwaysVariables.ModeloEcf, ref fiscal_data_printer, ref fiscal_hora_printer, ref fiscal_MSG, ref fiscal_retorno, alwaysVariables.ECF_Ligada);
                    }
                    //fiscal_retorno = conectorECF.Bematech_FI_DataHoraImpressora(ref fiscal_data_printer, ref fiscal_hora_printer);
                    //conectorECF.Analisa_iRetorno(fiscal_retorno, ref fiscal_MSG);
                }
                if (fiscal_retorno == 1)
                {
                    if (fiscal_dtsoft_basico.Trim() == "")
                    {
                        functionECF.conectorECF_DataHoraGravacaoUsuarioSWBasicoMFAdicional(alwaysVariables.ModeloEcf, ref fiscal_dtusuario_last, ref fiscal_dtsoft_basico, ref fiscal_letramf_adicional, ref fiscal_MSG, ref fiscal_retorno, alwaysVariables.ECF_Ligada);
                    }
                    //fiscal_retorno = conectorECF.Bematech_FI_DataHoraGravacaoUsuarioSWBasicoMFAdicional(ref fiscal_dtusuario_last, ref fiscal_dtsoft_basico, ref fiscal_letramf_adicional);
                    fiscal_retorno = 1;
                    //conectorECF.Analisa_iRetorno(fiscal_retorno, ref fiscal_MSG);
                }
                if (fiscal_retorno == 1)
                {
                    functionECF.conectorECF_numero_serie(alwaysVariables.ModeloEcf, ref fiscal_numero_serie, ref fiscal_MSG, ref fiscal_retorno, alwaysVariables.ECF_Ligada);
                    //fiscal_retorno = conectorECF.Bematech_FI_NumeroSerieMFD(ref fiscal_numero_serie);
                    //conectorECF.Analisa_iRetorno(fiscal_retorno, ref fiscal_MSG);
                }
                if (fiscal_retorno == 1)
                {
                    functionECF.conectorECF_VersaoFirmwareMFD(alwaysVariables.ModeloEcf, ref fiscal_VersaoFirmware, ref fiscal_MSG, ref fiscal_retorno, alwaysVariables.ECF_Ligada);
                    //fiscal_retorno = conectorECF.Bematech_FI_VersaoFirmwareMFD(ref fiscal_VersaoFirmware);
                    //conectorECF.Analisa_iRetorno(fiscal_retorno, ref fiscal_MSG);
                }
                if (fiscal_retorno == 1)
                {
                    functionECF.conectorECF_MarcaModeloTipoImpressoraMFD(alwaysVariables.ModeloEcf, ref fiscal_marca, ref fiscal_modelo, ref fiscal_tipo_ecf, ref fiscal_MSG, ref fiscal_retorno, alwaysVariables.ECF_Ligada);
                    alwaysVariables.ECF_MODELO_CRYP = key.GetMd5Sum((fiscal_modelo.Replace("\0","").Trim()));
                    //fiscal_retorno = conectorECF.Bematech_FI_MarcaModeloTipoImpressoraMFD(ref fiscal_marca, ref fiscal_modelo, ref fiscal_tipo_ecf);
                    //conectorECF.Analisa_iRetorno(fiscal_retorno, ref fiscal_MSG);
                }
                    if (fiscal_store.Replace("\0","").Trim() == "" ||
                    fiscal_numero_caixa.Replace("\0", "").Trim() == "" ||
                    fiscal_CGC.Replace("\0", "").Trim() == "" ||
                    fiscal_numero_serie.Replace("\0", "").Trim() == "" ||
                    fiscal_modelo.Replace("\0", "").Trim() == "" ||
                    fiscal_marca.Replace("\0", "").Trim() == "" ||
                    fiscal_letramf_adicional.Replace("\0", "").Trim() == "" ||
                    fiscal_tipo_ecf.Replace("\0", "").Trim() == "" ||
                    fiscal_VersaoFirmware.Replace("\0", "").Trim() == "" ||
                    fiscal_dtsoft_basico.Replace("\0", "").Trim() == "")
                    {
                        conector_carrega_variavel();
                    }
                
            }
            else
            {
                alwaysVariables.ModoOperacao = modo;
                pnlNfce.Visible = true;
                txtEntradaDadosConectorCF.Enabled = false;
                txtEntradaDadosNF.Select();
            }
            if (modo == 0)
            {
                if (fiscal_store.Replace("\0","").Trim() == "" ||
                    fiscal_numero_caixa.Replace("\0", "").Trim() == "" ||
                    fiscal_CGC.Replace("\0", "").Trim() == "" ||
                    fiscal_numero_serie.Replace("\0", "").Trim() == "" ||
                    fiscal_modelo.Replace("\0", "").Trim() == "" ||
                    fiscal_marca.Replace("\0", "").Trim() == "" ||
                    fiscal_letramf_adicional.Replace("\0", "").Trim() == "" ||
                    fiscal_tipo_ecf.Replace("\0", "").Trim() == "" ||
                    fiscal_VersaoFirmware.Replace("\0", "").Trim() == "" ||
                    fiscal_dtsoft_basico.Replace("\0", "").Trim() == "")
                    {
                        conector_carrega_variavel();
                    }
            }
            instrucao = new instrucaol();
            auxPessoa = 0;
        }
        public ConectorCF02(string numero_serie, string store, string caixa, string mov, string hora, string dataPrinter, Int32 retorno, string nr_cupom, Int32 flag, string operador, string ip, int openBanco, string gt, string dir, string cgc, string dt_usuario_last, string dtsoft_basico, string letramf, string marca, string modelo, string tipo_ecf, string firmware, string last_reducao_coo, string last_reducao_cro, string last_reducao_crz, string last_reducao_dataMovimento, string last_reducao_ValorAcumulado, string last_reducao_Isento_ICMS, string last_reducao_naoIncide_ICMS, string last_reducao_St_ICMS, string last_reducao_Isento_ISSQN, string last_reducao_naoIncide_ISSQN, string last_reducao_St_ISSQN, string last_reducao_desconto_ICMS, string last_reducao_desconto_ISSQN, string last_reducao_acrescimo_ICMS, string last_reducao_acrescimo_ISSQN, string last_reducao_cancelamento_ICMS, string last_reducao_cancelamento_ISSQN, string last_reducao_parcial_not_icms, string last_reducao_sangria, string last_reducao_suprimento, string last_reducao_cancelamento_not_fiscal, string last_reducao_desconto_not_fiscal, string last_reducao_acrescimo_not_fiscal, string fiscal_trunca_arredonda, string t18, string t12, string t07, string gtotal, string[,] aliq)
        {
            InitializeComponent();

            /*Responsavel por arquivar os movimentos
               Cria senao existir
            */


            Directory.CreateDirectory(folderMaster);
            Directory.CreateDirectory(folderEletronico);
            Directory.CreateDirectory(folderMFD);
            Directory.CreateDirectory(folderMFDGrand);
            Directory.CreateDirectory(folderSlave);

            conector_banco();
            vetorAliquotaLastZ = aliq;
            path = dir;
            fiscal_retorno = retorno;
            fiscal_numero_caixa = caixa;
            fiscal_store = store;
            fiscal_GT = gt;
            fiscal_hora_printer = hora;
            fiscal_data_movimento = mov;
            fiscal_numero_serie = numero_serie;
            fiscal_data_printer = dataPrinter;
            fiscal_Cupom = nr_cupom;
            fiscal_CGC = cgc;
            fiscal_dtusuario_last = dt_usuario_last;
            fiscal_dtsoft_basico = dtsoft_basico;
            fiscal_letramf_adicional= letramf;
            fiscal_marca = marca;
            fiscal_modelo = modelo;
            fiscal_tipo_ecf = tipo_ecf;
            fiscal_VersaoFirmware = firmware;
            fiscal_last_reducao_coo = last_reducao_coo;
            fiscal_last_reducao_cro = last_reducao_cro;
            fiscal_last_reducao_crz = last_reducao_crz;
            fiscal_last_reducao_dataMovimento = last_reducao_dataMovimento;
            fiscal_last_reducao_ValorAcumulado = last_reducao_ValorAcumulado;
            fiscal_last_reducao_Isento_ICMS = last_reducao_Isento_ICMS;
            fiscal_last_reducao_naoIncide_ICMS = last_reducao_naoIncide_ICMS;
            fiscal_last_reducao_St_ICMS = last_reducao_St_ICMS;
            fiscal_last_reducao_Isento_ISSQN = last_reducao_Isento_ISSQN;
            fiscal_last_reducao_naoIncide_ISSQN = last_reducao_naoIncide_ISSQN;
            fiscal_last_reducao_St_ISSQN = last_reducao_St_ISSQN;
            fiscal_last_reducao_desconto_ICMS = last_reducao_desconto_ICMS;
            fiscal_last_reducao_desconto_ISSQN = last_reducao_desconto_ISSQN;
            fiscal_last_reducao_acrescimo_ICMS = last_reducao_acrescimo_ICMS;
            fiscal_last_reducao_acrescimo_ISSQN = last_reducao_acrescimo_ISSQN;
            fiscal_last_reducao_cancelamento_ICMS = last_reducao_cancelamento_ICMS;
            fiscal_last_reducao_cancelamento_ISSQN = last_reducao_cancelamento_ISSQN;
            fiscal_last_reducao_parcial_not_icms = last_reducao_parcial_not_icms;
            fiscal_last_reducao_sangria = last_reducao_sangria;
            fiscal_last_reducao_suprimento = last_reducao_suprimento;
            fiscal_last_reducao_cancelamento_not_fiscal = last_reducao_cancelamento_not_fiscal;
            fiscal_last_reducao_desconto_not_fiscal = last_reducao_desconto_not_fiscal;
            fiscal_last_reducao_acrescimo_not_fiscal = last_reducao_acrescimo_not_fiscal;
            fiscal_last_reducao_grandetotal = gtotal;
            fiscal_last_reducao_T18 = t18;
            fiscal_last_reducao_T12 = t12;
            fiscal_last_reducao_T07 = t07;

            //fiscal_last_reducao_coo
            //fiscal_last_reducao_dataMovimento
            if ((fiscal_last_reducao_dataMovimento.Trim() != "" && fiscal_last_reducao_dataMovimento != "000000"))
            {
                conectorPDV_find_detalhes("R02", fiscal_last_reducao_crz, String.Format("{0:ddMMyyyy}", DateTime.Now).Substring(4, 2) + fiscal_last_reducao_dataMovimento.Substring(4, 2) + fiscal_last_reducao_dataMovimento.Substring(2, 2) + fiscal_last_reducao_dataMovimento.Substring(0, 2));
                conectorPDV_find_detalhes("R03", fiscal_last_reducao_crz, String.Format("{0:ddMMyyyy}", DateTime.Now).Substring(4, 2) + fiscal_last_reducao_dataMovimento.Substring(4, 2) + fiscal_last_reducao_dataMovimento.Substring(2, 2) + fiscal_last_reducao_dataMovimento.Substring(0, 2));
            }


            instrucao = new instrucaol();
            if (flag != null && Convert.ToInt16(flag) >0)
            {
                fiscal_flag = flag;
            }
            else
            {
                fiscal_flag = 0;
                functionECF.conectorECF_fiscal_flag(alwaysVariables.ModeloEcf, ref fiscal_flag, ref fiscal_MSG, ref fiscal_retorno, alwaysVariables.ECF_Ligada);   
            }
            if (Convert.ToDouble(fiscal_data_movimento.Replace("\0", "").Trim() == "" ? "0" : fiscal_data_movimento) == 0) { call_pdv = 1; }
            else
            {
                Directory.CreateDirectory(folderSlave + "\\" + fiscal_data_movimento);
            }
            if (openBanco == 1)
            {
                if (fiscal_flag != 0 )
                {
                    if (fiscal_flag != 32)
                    {
                        pedido = conector_verifica_exits_pedido(fiscal_Cupom);
                    }
                }
                else
                {
                    pedido = "0";
                }
                lbStatusBancoConectorCF.Text = "ON LINE";
                this.lbStatusBancoConectorCF.ForeColor = System.Drawing.Color.Cyan;
            }
            else
            {
                lbStatusBancoConectorCF.Text = "OFF LINE";
                this.lbStatusBancoConectorCF.ForeColor = System.Drawing.Color.Red;

            }
            lbIpCaixaConectorCF.Text = ip;
            alwaysVariables.Usuario = banco_operado = operador;
            resetVariable();
            auxPessoa = 0;
            
            if (dtsoft_basico.Trim() != "")
            {
                conector_complemento_firmware();
            }

        }

        //######################################################END Construtores#############################################################

        //######################################################VARIAVEIS ENCAPSULADAS#######################################################
        // Declaração das funções não gerenciadas: GetPrivateProfileString e 
        // WritePrivateProfileString
        [DllImport("kernel32.dll", EntryPoint = "GetPrivateProfileString")]
        private static extern int GetPrivateProfileString(string lpAppName, string lpKeyName, string lpDefault, StringBuilder lpReturnedString, int nSize, string lpFileName);
        [DllImport("kernel32.dll", EntryPoint = "WritePrivateProfileString")]
        private static extern bool WritePrivateProfileString(string lpAppName, string lpKeyName, string lpString, string lpFileName);
        private string fileSecret;// = Path.Combine(Directory.GetCurrentDirectory(), "c:\\windows\\soberanu.ini");
        private conector_full_variable alwaysVariables = new conector_full_variable();
        private conectorExport0202 export = new conectorExport0202();
        //private conectorExport0201 export = new conectorExport0201();
        private sintegraClass call = new sintegraClass();
        private conectorSpedFisco sped = new conectorSpedFisco();
        private conectorTEF tef = new conectorTEF();
        private msgInfo msg;
        private instrucaol instrucao;
        private Decimal auxNumeric;
        private int modoPedido = 0; //0 Prevenda -1 dav
        private double retornoPedido = 0;
        List<string> mensagemLinha = new List<string>();
        string[] vetorSingetra = new string[50] { "#", "#", "#", "#", "#", "#", "#", "#", "#", "#", "#", "#", "#", "#", "#", "#", "#", "#", "#", "#", "#", "#", "#", "#", "#", "#", "#", "#", "#", "#", "#", "#", "#", "#", "#", "#", "#", "#", "#", "#", "#", "#", "#", "#", "#", "#", "#", "#", "#", "#" };
        string[] vetorPAF = new string[26] { "U1", "A2", "P2", "E2", "E3", "D4", "B2", "C2", "F2", "F3", "F4", "T2", "M2", "L2", "G2", "H2", "S2", "S3", "R01", "R02", "R03", "R04", "R05", "R06", "R07", "EAD" };
        string[] vetorR07;
        string[] vetorRA7;
        string[,] vetorAliquotaLastZ = new string[2,15];
        private byte[] arranjoBytes; //Balança
        private List<byte> PortBuffer = new List<byte>(); //Balança
        private int i;
        private int countFinalizadora = 0;
        private int finalizadoraTroco = 0;
        private string flagNumeric;
        private string auxTipoConsulta = "2"; // 2 Codigo/Barra e 1 para Descricao
        private int posSeparator;
        private int countRows = 0;
        private int countField = 0;
        private int auxConsistencia = 0;
        private string seq = "#";
        private string str_valida_new = "";
        private string str_valida_old = "";
        private string flagFormaFinalizacao = "D";
        private string flagDav = "0";
        private string flagPreVenda = "0";
        private bool validaDesc = false;
        private int validaPass = 0; //0 - invalido 1 - valido
        private int index = 0;
        private dados banco = new dados();
        private pross proc = new pross();
        private prd produto = new prd();
        private arquivo rmais = new arquivo();
        private dados bancoEs;
        private algMd5 key = new algMd5();
        private crypt cryptografia;
        string[,] matrizGrd;
        private string title = "";
        private string auxChaveNota;
        private string auxNumeroNota = null;
        private string auxSerieNota = null;
        private string auxLoteNota = null;
        private string auxTotalNFce = null;
        private string auxTotalTributosNFce = null;
        private string auxDescFinalizadoraNFce = null;
        private string auxQttyItensNFce = null;
        private string auxTroco = null;
        private string auxValor = null;
        private string auxformPgto;
        private string flagDataAtual = "0";
        private string path;//Diretorio de carga
        private string msgFinalCupom = "";
        private int registro = 0;
        private int call_pdv = 1; //0 - Caixa Aberto = 1 - Funcão ECF = 3 - Pagamento, finalizadoras = 5 recebimento de Prestação, 8 Menu Fiscal, 7 KEYS.F6 desconto
        private int flagModoOperacao = 0;
        private int call_produto = 0;
        private int call_funcao = 0;
        private int ativa_discount = 0;
        private int ativa_acrescimo = 0;
        private Int16 conector_carga = 0;
        private int homTeste = 0;
        private string call_finalizadora;
        private int  acessoFiscal =0;
        private int acessoMenuFiscal = 0;
        private conectorEan13 ean13 = new conectorEan13();
        private validation cpf_cnpj = new validation();
        WebConectorServer.Service MyConectorEx;
        WebConectorServer.Service MyConectorRes;
        private string[] vetorTotal = new string[12] { "#", "#", "#", "#", "#", "#", "#", "#", "#", "#", "#", "#" }; //Primeira posição abre modo finalizadora ECF, posição 1;10 finalizadora,ultima posicao encerra modo finalizadora ECF.
        private string[] vetorRecebimento = new string[12] { "#", "#", "#", "#", "#", "#", "#", "#", "#", "#", "#", "#" }; //Primeira posição abre modo finalizadora ECF, posição 1;10 finalizadora,ultima posicao encerra modo finalizadora ECF.
        private string[,] vetorFinanceiro;
        private string[,] vetorTefDebito;
        private string[,] vetorTefCredito;
        string[] vetorEXE = new string[20] { "CONECTORPDV001.EXE", "BEMATECH32.DLL", "CONECTORECF.DLL", "CONECTORCRYPT.DLL", "CONECTORINSTRUCAO.DLL", "CONECTORTEF.DLL", "CONECTORSITEGRA.DLL", "CONECTORSETTING.DLL", "CONECTORBANK.DLL", "CONECTORAMBIENT.DLL", "BOLETOFRS.DLL", "CONECTOR.EXE", "INTERFACEEPSON.dll", "ELGIN.DLL", "CONVECF.DLL", "DARUMAFRAMEWORK.DLL", "BemaMFD.DLL", "BemaMFD3.DLL", "BEMAFI32.DLL", "BEMAFI64.DLL" };
        private int tefRows;//Para Debito
        private int tefRows1;//Para Credito
        private int tefFields;
        private int auxPessoa;
        private string auxLogradouro;
        private string auxNomeRazao;
        private string auxCPFCNPJ;
        private string complementoFiscal = ""; // = new string('\x20', 29);
        private string strCupom="";
        private string caminho = "";
        private string auxDescricaoFinalizadora = "Dinheiro";
        private string auxCstPisRecebimentoProduto;
        private string auxCstCofinsRecebimentoProduto;
        private string auxCstPisEmissaoProduto;
        private string auxCstCofinsEmissaoProduto;
        private string auxCstIpiSaidaProduto;
        //############Flag Sangria######################
        private string sangria_operador_servico;
        private string sangria_operador_retirada;
        private string sangria_finalizadora;
        private string sangria_valor_servico;
        private string sangria_valor_retirada;
        //############End Flag Sangria##################
        //############Flag Gerencial####################
        private string flagBruto;
        private string flagSangria;
        private string flagVale;
        private string flagFundo_Caixa;
        private string flagCancelado;
        private string flagJuros;
        private string flagDoacao;
        private string flagDevolucao;
        private string flagSeq;
        private string flagCanceladoFechamento;
        private string flagDesconto;
        private string flagBrutoFechamento;
        private string flagLiquido;
        //############Auxilia a Recebimento###############
        private string auxRecebimentoStore;
        private string auxRecebimentoCarne;
        private string auxRecebimentoPgto;
        private string auxRecebimentoParcela;
        private string auxRecebimentoParcelamento;
        private string auxRecebimentoValorPgto;
        //############Auxilia a Recebimento###############
        //############Info Desconto/Acrescimo#############
        private string sequenciaItem  = new string('\x20', 3);
        private string sequenciaItemAle = new string('\x20', 3);
        private string typeAcresDesc = new string('\x20', 1);
        private string acresDesc = new string('\x20', 1);
        private string valuesAcresDesc = new string('\x20', 4);
        private string last_valor_item;
        private string last_qtty_item;
        private int typeDescAcre = 0;
        //############END Info Desconto/Acrescimo#########
        //############Info Convenio#######################
        private string pessoa_empresa;
        private string pessoa_nome;
        private string pessoa_cliente;
        private string pessoa_endereco;
        private string pessoa_limite;
        private string pessoa_status;
        private string pessoa_find; //0 cod. Cliente 1 cpf
        //############End Info Convenio###################
        //############Item last Item######################
        private string last_item_barra = "";
        private string last_item_chave = "";
        private string last_item_descricao = "";
        private string last_item_tributacao_mq = "";
        private string last_item_tributacao = "";
        private string last_item_tipo_quantidade = "";
        private string last_item_pesavel = "0";
        private string last_item_qtty = "";
        private Int16 last_item_casa_decimal = 2;
        private string last_item_valor_unitario = "";
        private string last_item_tipo_desconto = "%";
        private string last_item_desconto = "";
        private string last_item_unidade = "";
        private string last_item_price_venda = "";
        //############End last item#######################
        //############Info Convenio#######################
        private string convenio_empresa;
        private string convenio_razao;
        private string convenio_doc;
        private string convenio_nome;
        private string convenio_cliente;
        private string convenio_limite;
        private string convenio_status;
        private string convenio_find; //0 conveniado 1 cpf
        private string convenio_prazo;
        private string convenio_vencimento;
        //############End Info Convenio###################
        //############Info Cheque#########################
        private string cheque_cpf_cgc;
        private string cheque_agencia;
        private string cheque_banco;
        private string cheque_conta;
        private string cheque_deposito;
        private string cheque_numero;
        private string cheque_serie;
        //############End Info Cheque#####################
        //############Info Convenio#######################
        private string cartao_value;
        private string cartao_type = "99";
        private string cartao_numero_parcelas = "1";
        //############End Info Convenio###################
        //############Cabeçalho Impressora fiscal#########
        private int fiscal_retorno;
        private int gaveta = 0;
        StreamWriter file;
        private conexaoECF functionECF = new conexaoECF();
        //private int fiscal_retornoZ;
        private bool flag_tela = false;
        private int fiscal_flag;
        private int arranque = 0;
        private int arranqueCabeca = 0;
        private int arranqueTotal = 0;
        private int arranqueTotalPgto = 0;
        private int arranqueRelatorioCC = 0;
        private int arranqueBalanca = 0;
        private int arranqueMov = 0;
        private int arranqueCartao = 0;
        private string[,] notaD;
        private string NotaNumber = "0";
        private string SerieNumber = "";
        private string fiscal_registroEAD = new string('\x20',256);
        private string fiscal_numero_serie = new string('\x20', 20);
        private string fiscal_GT = new string('\x20', 18);
        private string fiscal_GT_Crypt = new string('\x20', 20);
        private string fiscal_GT_compare = new string('\x20', 18);
        private string fiscal_store = new string('\x20', 4);
        private string fiscal_numero_caixa = new string('\x20', 4);
        private string fiscal_data_movimento = new string('\x20', 6);
        private string fiscal_data_printer = new string('\x20', 6);
        private string fiscal_hora_printer = new string('\x20', 6);
        private string fiscal_Cupom = new string('\x20', 14);
        private string fiscal_Cupom_coo = new string('\x20', 6);
        private string fiscal_Cupom_ccf = new string('\x20', 6);
        private string fiscal_Cupom_gnf = new string('\x20', 6);
        private string fiscal_Cupom_gng = new string('\x20', 6);
        private string fiscal_Cupom_cdc = new string('\x20', 14);
        private string fiscal_reducao_cro = new string('\x20', 14);
        private string fiscal_reducao_crz = new string('\x20', 14);
        private string fiscal_banco_cro;
        private string fiscal_banco_crz;
        private string fiscal_banco_venda;
        private string fiscal_Zpendente = new string('\x20', 1);
        private string fiscal_NumCuponsNaoFiscal = new string('\x20', 6);
        private string fiscal_TotalNaoFiscal = new string('\x20', 15);
        private string fiscal_totalSangrias = new string('\x20', 15);
        private string fiscal_md5_line = "";
        private string fiscal_MSG = "";
        private string fiscal_CGC = new string('\x20', 18);
        private string fiscal_IE = new string('\x20', 18);
        private string fiscal_dtusuario_last = new string('\x20', 20);
        private string fiscal_dtsoft_basico = new string('\x20', 20);
        private string fiscal_letramf_adicional = new string('\x20', 2);
        private string fiscal_marca = new string('\x20', 15);
        private string fiscal_modelo = new string('\x20', 20);
        private string fiscal_tipo_ecf = new string('\x20', 7);
        private string fiscal_VersaoFirmware = new string('\x20', 7);
        private string fiscal_NumeroSubstituicoesProprietario = new string('\x20', 4);
        private string fiscal_DadosUltimaReducaoMFD = new string('\x20', 1278);
        //############Dados Last Reducao
        private string fiscal_vendaBruta_last_reducaoZ = new string('\x20', 18);
        private string fiscal_last_reducao_crz = new string('\x20', 4);
        private string fiscal_last_reducao_coo = new string('\x20', 9);
        private string fiscal_last_reducao_cro = new string('\x20', 4);
        private string fiscal_last_reducao_dataMovimento = new string('\x20', 7);
        private string fiscal_last_reducao_dataEmissao = new string('\x20', 6);
        private string fiscal_last_reducao_horaEmissao = new string('\x20', 7);
        private string fiscal_last_reducao_vendaBruta = new string('\x20', 7);
        private string fiscal_last_reducao_ValorAcumulado = new string('\x20', 13);
        private string fiscal_last_reducao_St_ICMS = new string('\x20', 14);
        private string fiscal_last_reducao_St_ISSQN = new string('\x20', 14);
        private string fiscal_last_reducao_Isento_ICMS = new string('\x20', 14);
        private string fiscal_last_reducao_naoIncide_ICMS = new string('\x20', 14);
        private string fiscal_last_reducao_naoIncide_ISSQN = new string('\x20', 14);
        private string fiscal_last_reducao_Isento_ISSQN = new string('\x20', 14);
        private string fiscal_last_reducao_desconto_ISSQN = new string('\x20', 14);
        private string fiscal_last_reducao_desconto_ICMS = new string('\x20', 14);
        private string fiscal_last_reducao_acrescimo_ISSQN = new string('\x20', 14);
        private string fiscal_last_reducao_acrescimo_ICMS = new string('\x20', 14);
        private string fiscal_last_reducao_cancelamento_ISSQN = new string('\x20', 14);
        private string fiscal_last_reducao_cancelamento_ICMS = new string('\x20', 14);
        private string fiscal_last_reducao_cancelamento_not_fiscal = new string('\x20', 14);
        private string fiscal_last_reducao_parcial_not_icms = new string('\x20', 14);
        private string fiscal_last_reducao_sangria = new string('\x20', 14);
        private string fiscal_last_reducao_suprimento = new string('\x20', 14);
        private string fiscal_last_reducao_desconto_not_fiscal = new string('\x20', 14);
        private string fiscal_last_reducao_acrescimo_not_fiscal = new string('\x20', 14);
        private string fiscal_last_reducao_grandetotal = new string('\x20', 14);
        private string fiscal_last_reducao_T18 = new string('\x20', 14);
        private string fiscal_last_reducao_T12 = new string('\x20', 14);
        private string fiscal_last_reducao_T07 = new string('\x20', 14);
        private string ACK, ST1, ST2, ST3;
        //############End Dados Last Reducao
        //private string fiscal_Z = "";
        private string fiscal_ValorDescontos = new string('\x20', 14);
        private string fiscal_ValorCancelamentos = new string('\x20', 14);
        private string fiscal_NumReducoes = new string('\x20', 4);
        private string fiscal_NumCuponsCanc = new string('\x20', 4);
        //############END Cabeçalho Impressora fiscal#####
        //############Variaveis SPED-EFD
        private string sped_perfil;
        private string sped_funcionario;
        private string sped_finalidade;
        private string sped_atividade;
        private string sped_di;
        private string sped_df;
        //string[] sped_vetor = new string[84] { "0000", "0001", "0005", "0100", "0150", "0175", "0190", "0200", "0205", "0206", "0220", "0400", "0450", "0460", "0990", "C001", "C100", "C105", "C110", "C111", "C112", "C113", "C114", "C115", "C116", "C120", "C130", "C140", "C141", "C170", "C179", "C190", "C195", "C300", "C310", "C320", "C321", "C350", "C370", "C390", "C400", "C405", "C410", "C420", "C425", "C460", "C465", "C470", "C490", "#" /*"C495"*/, "C800", "C850", "C860", "C890", "C990", "D001", "D100", "D190", "D195", "D990", "E001", "E100", "E110", "E116", "E990", "G001", "G110", "G125", "G130", "G140", "G990", "H001", "H005", "H010", "H020", "H990", "1001", "1010", "1600", "1990", "9001", "9900", "9990", "9999" };
        //string[] sped_vetor;// = new string[84] { "0000", "0001", "#", "0100", "0150", "0175", "0190", "0200", "0205", "#", "0220", "#", "#", "#", "0990", "C001", "#", "#", "#", "#", "#", "#", "#", "#", "#", "#", "#", "#", "#", "#", "#", "#", "#", "#", "#", "#", "#", "C350", "C370", "C390", "C400", "C405", "#", "C420", "C425", "C460", "#", "C470", "C490", "#" /*"C495"*/, "#", "#", "#", "#", "C990", "D001", "#", "#", "#", "D990", "E001", "E100", "E110", "E116", "E990", "G001", "#", "#", "#", "#", "G990", "H001", "#", "#", "#", "H990", "1001", "1010", "1600", "1990", "9001", "9900", "9990", "9999" };
        string[] sped_vetor = new string[83] { "0000", "0001", "#", "0005", "0100", "0150", "#", "0190", "0200", "0205", "#", "0990", "#", "#", "#", "C001", "C100", "#", "#", "#", "#", "#", "#", "#", "#", "#", "#", "#", "#", "#", "#", "C190", "#", "#", "C300", "C320", "C321", "#", "#", "#", "C400", "C405", "#", "C420", "C425", "#", "#", "#", "C490", "#", "#", "#", "#", "#", "C990", "D001", "#", "#", "#", "D990", "E001", "E100", "E110", "E116", "E990", "G001", "#", "#", "#", "#", "G990", "H001", "H005", "H010", "H990", "1001", "1010", "1600", "1990", "9001", "9900", "9990", "9999" };
        const string folderSped = @"c:\";
        private string sped_retorno;
        //############END Variaveis SPED-EFD
        //############Variaveis do cadastro de produto####
        private string produto_barra;
        private string produto_descricao;
        private string produto_tributacao_mq;
        private string produto_tipo_quantidade;
        private string produto_pesavel;
        private string produto_qtty;
        private int produto_casa_decimal = 2;
        private string produto_valor_unitario;
        private string produto_tipo_desconto = "%";
        private string produto_desconto;
        private string produto_chave;
        private string produto_tributacao;
        private string produto_unidade;
        private string produto_price_venda;
        private string produto_price_custo;
        private string banco_operado;
        private string banco_nome = "DESCONHECIDO";
        private string banco_sequencia = "0";
        private string banco_sub_total;
        private string produto_aliquota;
        private string produto_trunca;
        private string produto_ippt;
        //############END Variaveis do cadastro de produto
        //############Variaveis MFD
        private string input_biblioteca = null;
        private string input_assinatura = null;
        private string input_tipo_lmf;
        private string input_tipo_down;
        private string input_tipo_geracao;
        private string input_unico_arquivo;
        private string keys_valida_private = new string('\x20', 256);
        private string keys_valida_publica= new string('\x20', 256);
        //############End Variaveis MFD
        //############Variaveis de LMFC
        private string input_di;
        private string input_df;
        private string input_coo_first;
        private string input_coo_last;
        private string input_finalizadora;
        //############END Variaveis de LMFC
        //############Variaveis de Funções
        private string input_data_abertura;
        private string input_operador;
        private string input_cliente;
        private string input_troco;
        private string input_find;
        //############End Variaveis de Funções
        //############Variaveis do Operador
        private string operador_funcao;
        private int operador_especifica;
        private int operador_status;
        private string operador_desconto;
        //############End Variaveis do Operador
        //############Variaveis Leitura Z
        private string input_z;
        private string input_reducao;
        private string input_data_z;
        //############END Variaveis Leitura Z
        //############Variaveis Reserva
        private string pedido = "0";
        private string reserva_number;
        private string reserva_loja;
        private string reserva_status;
        private string reserva_tipo_consulta;// 1 localhost = 2 server interno [Intranet] = 3 server externo [Internet]
        private string reserva_qtty_itens;
        private string reserva_valor_un;
        private string reserva_metodo;
        private string reserva_parcelas;
        private string reserva_finalizadora;
        private string reserva_desc_metodo;
        private string reserva_item_idProduto;
        private string reserva_item_qtty_itens;
        private string reserva_item_preciLiquido;
        private string reserva_item_price_venda;
        private string reserva_item_desconto;
        private string reserva_item_barra;
        private string reserva_item_valor_unitario;
        private string auxStatusReserva;
        private DataSet dsRCabecalho = new DataSet();
        private DataSet dsRParcelamento = new DataSet();
        private DataSet dsRParcela = new DataSet();
        private DataSet dsRReserva = new DataSet();
        private DataSet dsRReservaEx = new DataSet();
        private DataSet dsRNumeroNota = new DataSet();
        private DataSet dsRItensReserva = new DataSet();
        private DataSet dsRItensReservaLog = new DataSet();
        private DataSet dsRFinanceiro = new DataSet();
        private DataSet dsRPedidoCheque = new DataSet();
        private DataSet dsRPedidoBoleto = new DataSet();
        private DataSet dsRPedidoCrediario = new DataSet();
        private DataSet dsRPedidoCartao = new DataSet();
        private DataSet dsRPedidoConvenio = new DataSet();
        private DataSet dsRDividento = new DataSet();
        private DataSet dsRPepleo = new DataSet();
        string[] vetorReserva = new string[12] { "#", "#", "#", "#", "#", "#", "#", "#", "#", "#", "#", "#" }; //Primeiro posição abre modo finalizadora ECF, posição 1;10 finalizadora,ultima posicao encerra modo finalizadora ECF.
        string[] vetorReservaFinanceiro = new string[12] { "#", "#", "#", "#", "#", "#", "#", "#", "#", "#", "#", "#" };
        
        //############END Variaveis Reserva
        //############Variaveis Cliente Web
        private DataSet dsRCliente;
        private DataSet dsRFisica;
        private DataSet dsRRural;
        private DataSet dsRJuridica;
        private DataSet dsRRisco;
        private DataSet dsRReferencia;
        private DataSet dsRProfissional;
        private DataSet dsREntrega;
        private DataSet dsRCobranca;
        private DataSet dsREndereco;
        private DataSet dsRFone;
        private DataSet matriz = new DataSet();  //Matriz de retornos locais conectorPDV
        //############END Variaveis Cliente Web
        //############Pedido NFCE
        private string newItemPedido;
        private string newDescricaoItemPedido;
        private string newQuantidadeItemPedido = "0.000";
        private string newDescontoItemPedido;
        private string newTotalItemPedido;
        private string newTotalComDescontoItemPedido;
        private string newEstoqueDisponivelItemPedido;
        private string newReservaItemPedido;
        private string newEstoqueItemPedido;
        private string newPriceVenda;
        private string newPriceFabrica;
        private string newCustoBruto;
        private string newCustoLiquido;
        private string newCustoMedio;
        private string newCustoTransferencia;
        private string newIdPistCofins;
        private string auxIdUnItemPedido;
        private string auxUnItemPedido;
        private string newBarraItemPedido;
        private string auxMultiplicador;
        private string newIdBarraItemPedido;
        private string newseq;
        //############END Pedido Nfce
        //############Variaveis Const
        const string folderEletronico = @"c:\conector\MFD\arquivos";
        const string folderMaster = @"c:\conector\";
        const string folderSlave = @"c:\conector\movimento";
        const string folderMFD = @"c:\conector\MFD";
        const string folderMFDGrand = @"c:\conector\MFD\Grand";
        //############End Variaveis Const
        //############Variaveis Thread
        eventos workObject = new eventos();
        balanca workBalanca;
        Thread servico;
        Thread peso;
        //############End Variaveis Thread
        private List<dadosIdentificacaoNfe> listaIdentificacaoNfe = new List<dadosIdentificacaoNfe>();
        private List<dadosDocumentoFiscalDiferenciado> listaDocumentoFiscalDiferenciado = new List<dadosDocumentoFiscalDiferenciado>();
        private List<dadosIdentificacaoEmitenteNfe> listaIdentificacaoEmitenteNfe = new List<dadosIdentificacaoEmitenteNfe>();
        private List<dadosIdentificacaoDestinatárioNfe> listaIdentificacaoDestinatarioNfe = new List<dadosIdentificacaoDestinatárioNfe>();
        private List<dadosIdentificacaoLocalRetirada> listaIdentificacaoLocalRetirada = new List<dadosIdentificacaoLocalRetirada>();
        private List<dadosIdentificacaoLocalEntrega> listaIdentificacaoLocalEntrega = new List<dadosIdentificacaoLocalEntrega>();
        private List<dadosAutorizacaoObterXml> listaAutorizacaoObterXml = new List<dadosAutorizacaoObterXml>();
        private List<dadosDetalhamentoProdutosNfe> listaDetalhamentoProdutosNfe = new List<dadosDetalhamentoProdutosNfe>();
        private List<dadosProdutosServicosNfe> listaProdutosServicosNfe = new List<dadosProdutosServicosNfe>();
        private List<dadosProdutosServicosDeclaracaoImportacao> listaProdutosServicosDeclaracaoImportacao = new List<dadosProdutosServicosDeclaracaoImportacao>();
        private List<dadosProdutosServicosGrupoExportacao> listaProdutosServicosGrupoExportacao = new List<dadosProdutosServicosGrupoExportacao>();
        private List<dadosProdutosServicosPedidoCompra> listaProdutosServicosPedidoCompra = new List<dadosProdutosServicosPedidoCompra>();
        private List<dadosProdutosServicosGrupoDiversos> listaProdutosServicosGrupoDiversos = new List<dadosProdutosServicosGrupoDiversos>();
        private List<dadosDetalhamentoEspecificoVeiculosNovos> listaDetalhamentoEspecificoVeiculosNovos = new List<dadosDetalhamentoEspecificoVeiculosNovos>();
        private List<dadosDetalhamentoEspecificoMedicamentoMateriasPrimasFarmaceuticas> listaDetalhamentoEspecificoMedicamentoMateriasPrimasFarmaceuticas = new List<dadosDetalhamentoEspecificoMedicamentoMateriasPrimasFarmaceuticas>();
        private List<dadosDetalhamentoEspecificoArmamentos> listaDetalhamentoEspecificoArmamentos = new List<dadosDetalhamentoEspecificoArmamentos>();
        private List<dadosDetalhamentoEspecificoCombustiveis> listaDetalhamentoEspecificoCombustiveis = new List<dadosDetalhamentoEspecificoCombustiveis>();
        private List<dadosDetalhamentoEspecificoOperacaoPapelImune> listaDetalhamentoEspecificoOperacaoPapelImune = new List<dadosDetalhamentoEspecificoOperacaoPapelImune>();
        private List<dadosTributosIncidentesProdutoServico> listaTributosIncidentesProdutoServico = new List<dadosTributosIncidentesProdutoServico>();
        private List<dadosICMSNormalST> listaICMSNormalST = new List<dadosICMSNormalST>();
        private List<dadosImpostoProdutosIndustrializados> listaImpostoProdutosIndustrializados = new List<dadosImpostoProdutosIndustrializados>();
        private List<dadosImpostoImportacao> listaImpostoImportacao = new List<dadosImpostoImportacao>();
        private List<dadosPis> listaPis = new List<dadosPis>();
        private List<dadosPisST> listaPisST = new List<dadosPisST>();
        private List<dadosCofins> listaCofins = new List<dadosCofins>();
        private List<dadosCofinsST> listaCofinsST = new List<dadosCofinsST>();
        private List<dadosISSQN> listaISSQN = new List<dadosISSQN>();
        private List<dadosCancelaNfe> listaCancelaNfce = new List<dadosCancelaNfe>();
        private List<dadosTributosDevolvidos> listaTributosDevolvidos = new List<dadosTributosDevolvidos>();
        private List<dadosInformacoesAdicionais> listaInformacoesAdicionais = new List<dadosInformacoesAdicionais>();
        private List<dadosTotalNFe> listaTotalNFe = new List<dadosTotalNFe>();
        private List<dadosTotalNFeISSQN> listaTotalNFeISSQN = new List<dadosTotalNFeISSQN>();
        private List<dadosTotalNFeRetencaoTributos> listaTotalNFeRetencaoTributos = new List<dadosTotalNFeRetencaoTributos>();
        private List<dadosInformacoesTransporteNFe> listaInformacoesTransporteNFe = new List<dadosInformacoesTransporteNFe>();
        private List<dadosDadosCobranca> listaDadosCobranca = new List<dadosDadosCobranca>();
        private List<dadosFormasPagamento> listaFormasPagamento = new List<dadosFormasPagamento>();
        private List<dadosInformacoesAdicionaisNFe> listaInformacoesAdicionaisNFe = new List<dadosInformacoesAdicionaisNFe>();
        private List<dadosInformacoesComercioExterior> listaInformacoesComercioExterior = new List<dadosInformacoesComercioExterior>();
        private List<dadosInformacoesCompras> listaInformacoesCompras = new List<dadosInformacoesCompras>();
        private List<dadosInformacoesRegistroAquisicaoCana> listaInformacoesRegistroAquisicaoCana = new List<dadosInformacoesRegistroAquisicaoCana>();
        private List<dadosAssinatura> listaAssinatura = new List<dadosAssinatura>();
        private List<dadosEnvioNfeLote> listaEnviaLote = new List<dadosEnvioNfeLote>();//Flavio
        private dadosIdentificacaoNfe identificacaoNfe;

        private dadosDocumentoFiscalDiferenciado documentoFiscalDiferenciado;

        private dadosIdentificacaoEmitenteNfe identificacaoEmitenteNfe  = new dadosIdentificacaoEmitenteNfe(null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null);

        private dadosIdentificacaoFiscoEmitenteNfe identificacaoFiscoEmitenteNfe = new dadosIdentificacaoFiscoEmitenteNfe(null, null, null, null, null, null, null, null, null, null, null);

        private dadosIdentificacaoDestinatárioNfe identificacaoDestinatarioNfe;

        private dadosIdentificacaoLocalRetirada identificacaoLocalRetirada;

        private dadosIdentificacaoLocalEntrega identificacaoLocalEntrega;

        private dadosAutorizacaoObterXml autorizacaoObterXml;

        private dadosDetalhamentoProdutosNfe detalhamentoProdutosNfe;

        private dadosProdutosServicosNfe produtosServicosNfe;

        private dadosProdutosServicosDeclaracaoImportacao produtosServicosDeclaracaoImportacao;

        private dadosProdutosServicosGrupoExportacao produtosServicosGrupoExportacao;

        private dadosProdutosServicosPedidoCompra produtosServicosPedidoCompra;

        private dadosProdutosServicosGrupoDiversos produtosServicosGrupoDiversos;

        private dadosDetalhamentoEspecificoVeiculosNovos detalhamentoEspecificoVeiculosNovos;

        private dadosDetalhamentoEspecificoMedicamentoMateriasPrimasFarmaceuticas detalhamentoEspecificoMedicamentoMateriasPrimasFarmaceuticas;

        private dadosDetalhamentoEspecificoArmamentos detalhamentoEspecificoArmamentos;

        private dadosDetalhamentoEspecificoCombustiveis detalhamentoEspecificoCombustiveis;

        private dadosDetalhamentoEspecificoOperacaoPapelImune detalhamentoEspecificoOperacaoPapelImune;

        private dadosTributosIncidentesProdutoServico tributosIncidentesProdutoServico;

        private dadosICMSNormalST iCMSNormalST;

        private dadosImpostoProdutosIndustrializados impostoProdutosIndustrializados;

        private dadosImpostoImportacao impostoImportacao;

        private dadosPis pis;

        private dadosPisST pisST;

        private dadosCofins cofins;

        private dadosCofinsST cofinsST;

        private dadosISSQN iSSQN;

        private dadosTributosDevolvidos tributosDevolvidos;

        private dadosInformacoesAdicionais informacoesAdicionais;

        private dadosTotalNFe totalNFe;

        private dadosTotalNFeISSQN TotalNFeISSQN;

        private dadosTotalNFeRetencaoTributos totalNFeRetencaoTributos;

        private dadosInformacoesTransporteNFe informacoesTransporteNFe;

        private dadosDadosCobranca dadosCobranca;

        dadosFormasPagamento FormasPagamento;

        private dadosInformacoesAdicionaisNFe informacoesAdicionaisNFe;

        private dadosInformacoesComercioExterior informacoesComercioExterior;

        private dadosInformacoesCompras informacoesCompras;

        private dadosInformacoesRegistroAquisicaoCana informacoesRegistroAquisicaoCana;

        private dadosAssinatura assinatura;

        private dadosEnvioNfeLote EnvioNfeLote;

        //############End
        //######################################################END VARIAVEIS ENCAPSULADAS###################################################

        //#############################################################Metodos De Controle Webservice########################################
        //############################################WEB - Import Método da API#####################################################
        [DllImport("wininet.dll")]
        private extern static Boolean InternetGetConnectedState(out int Description, int ReservedValue);
        // Um método que verifica se esta conectado
        public static Boolean IsConnected()
        {
            int Description;
            return InternetGetConnectedState(out Description, 0);
        }
        //############################################END WEB Import Método da API###################################################
        public static string PingHost(string args)//RECEBE COMO PARAMENTRO A URL SERVICE
        {
            HttpWebResponse res = null;

            try
            {
                // Create a request to the passed URI.  
                HttpWebRequest req = (HttpWebRequest)WebRequest.Create(args);
                req.Credentials = CredentialCache.DefaultNetworkCredentials;

                // Get the response object.  
                res = (HttpWebResponse)req.GetResponse();

                return "Service Up";
            }
            catch (Exception e)
            {
                msgInfo msg = new msgInfo("Source : " + e.Source + " Exception Source \n" + "Message : " + e.Message + " Exception Message \n" + " --->  Host Unavailable  <--- ");
                if (e.Message.ToString() == "Impossível conectar-se ao servidor remoto")
                {
                    return "Host Unavailable";
                }
                //MessageBox.Show("Source : " + e.Source, "Exception Source", MessageBoxButtons.OK);
                //MessageBox.Show("Message : " + e.Message, "Exception Message", MessageBoxButtons.OK);
                return "Host Unavailable";
            }
        }
        //#############################################################Metodos De Controle Webservice########################################

        //#############################################################Declaração de Metodos#################################################
        void conector_clear_reserva_nfce(short flag)
        {
            //Cancelamento reserva
            conectorPDV_update_status_reservaTemp(pedido, alwaysVariables.Store,"6","5");
            conector_reset_listas();
            auxIdCliente = "";
            lblNomeRazaoNfce.Text = "";
            lblTotalNfec.Text = "0,00";
            lblCodigoConsumidorNfce.Text = "";
            lblEnderecoPessoaNfce.Text = "";
            this.lblStatusNfce.ForeColor = System.Drawing.Color.Red;
            lblStatusNfce.Text = "FECHADA";
            txtTitleNFce.Clear();
            txtDescricaoNf.Clear();
            if (flag == 1)
            {
                StreamWriter sw = new StreamWriter(@"C:\conector\nfce_temp.txt", true, Encoding.ASCII);
                sw.Write(reserva_number == null ? pedido:reserva_number);
                sw.Close();
                reserva_number = null;
                this.Hide();
                mainConfig retorno = new mainConfig(1);
                this.Close();
                retorno.ShowDialog();
            }
            pedido = "";
        }

        private async void conector_stop_thread()
        {
            workObject.RequestStop(true);
            workObject.modoPdv(true);
            try
            {
                //servico.Join();
                servico.Abort();
            }
            catch (Exception)
            {

            }
        }

        private async void conector_start_thread()
        {
            servico = new Thread(workObject.Varrefolder);
            
            workObject.RequestStop(false);
            workObject.modoPdv(false);

            servico.Start();

            while (!servico.IsAlive) ;

            Thread.Sleep(1000);
        }

        private async void conector_start_thread_balanca()
        {
            workBalanca = new balanca(alwaysVariables.PortBalanca);
            peso = new Thread(workBalanca.buscaPeso);

            workBalanca.RequestStop(false);

            peso.Start();

            while (!peso.IsAlive) ;

            Thread.Sleep(1000);
        }
        public bool conector_codigo_balanca(string VarCodigo, ref string ParCodigo, ref string ParValor)
        {
            if (VarCodigo.Length == 13)
            {
                if (VarCodigo.Substring(0,1) == "2")
                {
                    ParCodigo = VarCodigo.Substring(1,6);
                    ParValor = VarCodigo.Substring(7, 5);
                    return true;
                }
                else
                {
                    return false;
                }
            }
            else
            {
                return false;
            }
        }

        void conector_reset_listas()
        {
            listaIdentificacaoNfe = new List<dadosIdentificacaoNfe>();
            listaDocumentoFiscalDiferenciado = new List<dadosDocumentoFiscalDiferenciado>();
            //listaIdentificacaoEmitenteNfe = new List<dadosIdentificacaoEmitenteNfe>();
            listaIdentificacaoDestinatarioNfe = new List<dadosIdentificacaoDestinatárioNfe>();
            listaIdentificacaoLocalRetirada = new List<dadosIdentificacaoLocalRetirada>();
            listaIdentificacaoLocalEntrega = new List<dadosIdentificacaoLocalEntrega>();
            listaAutorizacaoObterXml = new List<dadosAutorizacaoObterXml>();
            listaDetalhamentoProdutosNfe = new List<dadosDetalhamentoProdutosNfe>();
            listaProdutosServicosNfe = new List<dadosProdutosServicosNfe>();
            listaProdutosServicosDeclaracaoImportacao = new List<dadosProdutosServicosDeclaracaoImportacao>();
            listaProdutosServicosGrupoExportacao = new List<dadosProdutosServicosGrupoExportacao>();
            listaProdutosServicosPedidoCompra = new List<dadosProdutosServicosPedidoCompra>();
            listaProdutosServicosGrupoDiversos = new List<dadosProdutosServicosGrupoDiversos>();
            listaDetalhamentoEspecificoVeiculosNovos = new List<dadosDetalhamentoEspecificoVeiculosNovos>();
            listaDetalhamentoEspecificoMedicamentoMateriasPrimasFarmaceuticas = new List<dadosDetalhamentoEspecificoMedicamentoMateriasPrimasFarmaceuticas>();
            listaDetalhamentoEspecificoArmamentos = new List<dadosDetalhamentoEspecificoArmamentos>();
            listaDetalhamentoEspecificoCombustiveis = new List<dadosDetalhamentoEspecificoCombustiveis>();
            listaDetalhamentoEspecificoOperacaoPapelImune = new List<dadosDetalhamentoEspecificoOperacaoPapelImune>();
            listaTributosIncidentesProdutoServico = new List<dadosTributosIncidentesProdutoServico>();
            listaICMSNormalST = new List<dadosICMSNormalST>();
            listaImpostoProdutosIndustrializados = new List<dadosImpostoProdutosIndustrializados>();
            listaImpostoImportacao = new List<dadosImpostoImportacao>();
            listaPis = new List<dadosPis>();
            listaPisST = new List<dadosPisST>();
            listaCofins = new List<dadosCofins>();
            listaCofinsST = new List<dadosCofinsST>();
            listaISSQN = new List<dadosISSQN>();
            listaTributosDevolvidos = new List<dadosTributosDevolvidos>();
            listaInformacoesAdicionais = new List<dadosInformacoesAdicionais>();
            listaTotalNFe = new List<dadosTotalNFe>();
            listaTotalNFeISSQN = new List<dadosTotalNFeISSQN>();
            listaTotalNFeRetencaoTributos = new List<dadosTotalNFeRetencaoTributos>();
            listaInformacoesTransporteNFe = new List<dadosInformacoesTransporteNFe>();
            listaDadosCobranca = new List<dadosDadosCobranca>();
            listaFormasPagamento = new List<dadosFormasPagamento>();
            listaInformacoesAdicionaisNFe = new List<dadosInformacoesAdicionaisNFe>();
            listaInformacoesComercioExterior = new List<dadosInformacoesComercioExterior>();
            listaInformacoesCompras = new List<dadosInformacoesCompras>();
            listaInformacoesRegistroAquisicaoCana = new List<dadosInformacoesRegistroAquisicaoCana>();
            listaAssinatura = new List<dadosAssinatura>();
            listaEnviaLote = new List<dadosEnvioNfeLote>();
            identificacaoNfe = new dadosIdentificacaoNfe(null,
null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null);

            documentoFiscalDiferenciado = new dadosDocumentoFiscalDiferenciado(null, null, null,
                    null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null);

            //identificacaoEmitenteNfe = new dadosIdentificacaoEmitenteNfe(null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null);

            //identificacaoFiscoEmitenteNfe = new dadosIdentificacaoFiscoEmitenteNfe(null, null, null, null, null, null, null, null, null, null, null);

            identificacaoDestinatarioNfe = new dadosIdentificacaoDestinatárioNfe(null, null, null, null,
                    null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null);

            identificacaoLocalRetirada = new dadosIdentificacaoLocalRetirada(null, null, null,
                    null, null, null, null, null, null);

            identificacaoLocalEntrega = new dadosIdentificacaoLocalEntrega(null, null, null,
                    null, null, null, null, null, null);

            autorizacaoObterXml = new dadosAutorizacaoObterXml(null, null, null);

            detalhamentoProdutosNfe = new dadosDetalhamentoProdutosNfe(null, null);

            produtosServicosNfe = new dadosProdutosServicosNfe(null, null, null, null, null, null, null,
                    null, null, null, null, null, null, null, null, null, null, null, null, null);

            produtosServicosDeclaracaoImportacao = new dadosProdutosServicosDeclaracaoImportacao(null,
                    null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null);


            produtosServicosPedidoCompra = new dadosProdutosServicosPedidoCompra(null, null);

            produtosServicosGrupoDiversos = new dadosProdutosServicosGrupoDiversos(null);


            produtosServicosGrupoExportacao = new dadosProdutosServicosGrupoExportacao(null, null,
                    null, null, null);

            detalhamentoEspecificoVeiculosNovos = new dadosDetalhamentoEspecificoVeiculosNovos(null, null,
                    null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null);

            detalhamentoEspecificoMedicamentoMateriasPrimasFarmaceuticas = new dadosDetalhamentoEspecificoMedicamentoMateriasPrimasFarmaceuticas(
                    null, null, null, null, null, null);

            detalhamentoEspecificoArmamentos = new dadosDetalhamentoEspecificoArmamentos(null,
                    null, null, null, null);

            detalhamentoEspecificoCombustiveis = new dadosDetalhamentoEspecificoCombustiveis(
                    null, null, null, null, null, null, null, null);

            detalhamentoEspecificoOperacaoPapelImune = new dadosDetalhamentoEspecificoOperacaoPapelImune(null);

            tributosIncidentesProdutoServico = new dadosTributosIncidentesProdutoServico(null);

            iCMSNormalST = new dadosICMSNormalST(null, null, null, null, null, null, null, null, null, null, null, null,
                    null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null,
                    null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null,
                    null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null,
                    null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null,
                    null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null,
                    null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null);

            impostoProdutosIndustrializados = new dadosImpostoProdutosIndustrializados(null, null,
                    null, null, null, null, null, null, null, null, null);

            impostoImportacao = new dadosImpostoImportacao(null, null, null, null);

            pis = new dadosPis(null, null, null, null, null, null, null, null, null, null, null, null, null, null, null);

            pisST = new dadosPisST(null, null, null, null, null);

            cofins = new dadosCofins(null, null, null, null, null, null, null, null, null, null, null, null,
                    null, null, null);

            cofinsST = new dadosCofinsST(null, null, null, null, null);

            iSSQN = new dadosISSQN(null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null);

            tributosDevolvidos = new dadosTributosDevolvidos(null, null, null);

            informacoesAdicionais = new dadosInformacoesAdicionais(null);

            totalNFe = new dadosTotalNFe(null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null);

            TotalNFeISSQN = new dadosTotalNFeISSQN(null, null, null, null, null, null, null, null, null, null, null, null);

            totalNFeRetencaoTributos = new dadosTotalNFeRetencaoTributos(null, null,
                    null, null, null, null, null);

            informacoesTransporteNFe = new dadosInformacoesTransporteNFe(null, null, null, null, null,
                    null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null,
                    null, null, null, null, null, null);

            dadosCobranca = new dadosDadosCobranca(null, null, null, null, null, null, null, null);

            FormasPagamento = new dadosFormasPagamento(null, null, null, null, null, null);

            informacoesAdicionaisNFe = new dadosInformacoesAdicionaisNFe(null, null, null, null,
                    null, null, null, null, null);

            informacoesComercioExterior = new dadosInformacoesComercioExterior(null, null, null);

            informacoesCompras = new dadosInformacoesCompras(null, null, null);

            informacoesRegistroAquisicaoCana = new dadosInformacoesRegistroAquisicaoCana(null, null,
                    null, null, null, null, null, null, null, null, null, null, null);

            assinatura = new dadosAssinatura(null, null, null, null);

            EnvioNfeLote = new dadosEnvioNfeLote(null, null);
        }

        void conector_complemento_reducaoZ()
        {

            #region
            string test = String.Format("{0:ddMMyyyy}", Convert.ToDateTime(fiscal_data_movimento.Substring(0, 2) + "/" + fiscal_data_movimento.Substring(2, 2) + "/" + String.Format("{0:ddMMyyyy}", DateTime.Now).Substring(4, 2) + fiscal_data_printer.Substring(4, 2)));

            if (fiscal_data_movimento != "")
            {
                if (Convert.ToInt32(fiscal_data_movimento.Substring(0, 2)) == 1)
                {
                    DateTime firt = new DateTime(DateTime.Now.Year, Convert.ToInt32(DateTime.Now.AddMonths(-1).ToString().Substring(3, 2)), 1);
                    DateTime last = new DateTime(DateTime.Now.Year, Convert.ToInt32(DateTime.Now.AddMonths(-1).ToString().Substring(3, 2)), DateTime.DaysInMonth(DateTime.Now.Year, DateTime.Now.Month));
                    msg = new msgInfo("ATENÇÃO - Primeira emissão de leitura Z do mês, com isso uma leitura de memoria fiscal será emitida referente ao mês anterior [ ESC ] - SAIR.");
                    msg.ShowDialog();
                    //fiscal_retorno = conectorECF.Bematech_FI_LeituraMemoriaFiscalDataMFD(firt.ToShortDateString(), last.ToShortDateString(), "c");
                    functionECF.conectorECF_LeituraMemoriaFiscalData(alwaysVariables.ModeloEcf, firt.ToShortDateString(), last.ToShortDateString(), "c", ref fiscal_MSG, ref fiscal_retorno, alwaysVariables.ECF_Ligada);
                }
            }
            functionECF.conectorECF_fiscal_flag(alwaysVariables.ModeloEcf, ref fiscal_flag, ref fiscal_MSG, ref fiscal_retorno, alwaysVariables.ECF_Ligada);
            this.txtDescricaoItemConectorCF.Invoke((MethodInvoker)delegate { txtDescricaoItemConectorCF.Select(); });
            if (fiscal_flag != 35)
            {
                if (fiscal_flag != 33)
                {
                    if (fiscal_flag != 1)
                    {
                        if (fiscal_flag != 2)
                        {
                            if (fiscal_flag != 8 || 1 == 1)
                            {
                                if (fiscal_flag != 128)
                                {
                                    if (fiscal_retorno == 1)
                                    {

                                        //***************************Update Atualização do Fechamento de operador
                                        functionECF.conectorECF_Descontos(alwaysVariables.ModeloEcf, ref fiscal_ValorDescontos, ref fiscal_MSG, ref fiscal_retorno, alwaysVariables.ECF_Ligada);
                                        //fiscal_retorno = conectorECF.Bematech_FI_Descontos(ref fiscal_ValorDescontos);
                                        //conectorECF.Analisa_iRetorno(fiscal_retorno, ref fiscal_MSG);
                                        functionECF.conectorECF_ValorCancelamento(alwaysVariables.ModeloEcf, ref fiscal_ValorCancelamentos, ref fiscal_MSG, ref fiscal_retorno, alwaysVariables.ECF_Ligada);
                                        //fiscal_retorno = conectorECF.Bematech_FI_Cancelamentos(ref fiscal_ValorCancelamentos);
                                        //conectorECF.Analisa_iRetorno(fiscal_retorno, ref fiscal_MSG);
                                        functionECF.conectorECF_NumeroReducoes(alwaysVariables.ModeloEcf, ref fiscal_NumReducoes, ref fiscal_MSG, ref fiscal_retorno, alwaysVariables.ECF_Ligada);
                                        //fiscal_retorno = conectorECF.Bematech_FI_NumeroReducoes(ref fiscal_NumReducoes);
                                        //conectorECF.Analisa_iRetorno(fiscal_retorno, ref fiscal_MSG);
                                        functionECF.conectorECF_NumeroCuponsCancelados(alwaysVariables.ModeloEcf, ref fiscal_NumCuponsCanc, ref fiscal_MSG, ref fiscal_retorno, alwaysVariables.ECF_Ligada);
                                        //fiscal_retorno = conectorECF.Bematech_FI_NumeroCuponsCancelados(ref fiscal_NumCuponsCanc);
                                        //conectorECF.Analisa_iRetorno(fiscal_retorno, ref fiscal_MSG);
                                        functionECF.conectorECF_NumeroCupom(alwaysVariables.ModeloEcf, ref fiscal_Cupom, ref fiscal_MSG, ref fiscal_retorno, alwaysVariables.ECF_Ligada);
                                        //fiscal_retorno = conectorECF.Bematech_FI_NumeroCupom(ref fiscal_Cupom);
                                        //conectorECF.Analisa_iRetorno(fiscal_retorno, ref fiscal_MSG);
                                        functionECF.conectorECF_GrandeTotal(alwaysVariables.ModeloEcf, ref fiscal_GT, ref fiscal_MSG, ref fiscal_retorno, alwaysVariables.ECF_Ligada);
                                        //fiscal_retorno = conectorECF.Bematech_FI_GrandeTotal(ref fiscal_GT);

                                        if (fiscal_retorno != 1) { this.txtVisorMsgConectorCF.Invoke((MethodInvoker)delegate { txtVisorMsgConectorCF.Text = fiscal_MSG; }); } else { conectorPDV_update_contador(fiscal_Cupom); conectorPDV_alt_fechamentoCaixa(); }
                                        functionECF.conectorECF_Analisa_RetornoImpressora(alwaysVariables.ModeloEcf, ref ACK, ref ST1, ref ST2, ref ST3, ref fiscal_MSG);
                                        //fiscal_retorno = conectorECF.Bematech_FI_DataMovimento(ref fiscal_data_movimento);
                                        functionECF.conectorECF_DataMovimento(alwaysVariables.ModeloEcf, ref fiscal_data_movimento, ref fiscal_MSG, ref fiscal_retorno, alwaysVariables.ECF_Ligada);
                                        try
                                        {
                                            string dat = test.Insert(2, "/");
                                            dat = dat.Insert(5, "/");
                                            conector_main_PDVECF(fiscal_store.Replace(",", "").Trim(), Convert.ToDateTime(dat), Convert.ToDateTime(dat), fiscal_numero_serie.Replace("\0", "").Trim(), 0, 0, 0);
                                        }
                                        catch (Exception)
                                        {
                                            banco.fechaConexao(); if (title != "") { this.txtTitleCupomFiscalConectorCF.Invoke((MethodInvoker)delegate { txtTitleCupomFiscalConectorCF.Text = title; }); }
                                            msg = new msgInfo(1, "Erro fatal! Arq. Paf-Ecf não gerado."); msg.ShowDialog();
                                            //this.Dispose();
                                            Environment.Exit(0);
                                        }

                                        try
                                        {
                                            if (fiscal_data_movimento.Trim() != "" && Convert.ToDouble(fiscal_data_movimento.Replace("\0", "").Trim() == "" ? "0" : fiscal_data_movimento) <= 0 && fiscal_flag != 8)
                                            {
                                                banco_operado = input_operador = alwaysVariables.Desconhecido;
                                                if (conector_webservice_preVenda_count_expire(alwaysVariables.Store, "0", "5", "2") > 0)
                                                {
                                                    this.txtVisorMsgConectorCF.Invoke((MethodInvoker)delegate { txtVisorMsgConectorCF.Text = "CAIXA NÃO INICIALIZADO"; });
                                                    msg = new msgInfo("VERIFICAÇÃO DE ROTINA [ PRÉ-VENDAS EM ABERTO ] - FUNÇÃO COMPLEMENTAR ATO COTEPE [ F11 ] - SAIR"); msg.ShowDialog();
                                                    functionECF.conectorECF_AberturaDoDia(alwaysVariables.ModeloEcf, "1,00", "Dinheiro", ref fiscal_MSG, ref fiscal_retorno, alwaysVariables.ECF_Ligada);
                                                    conectorPDV_inc_cupom_relatorio("CN", null);

                                                    msg = new msgInfo("PRIMEIRA EXECUÇÃO DIARIA, CONFERÊNCIA DO ESTOQUE [ F11 ] - SAIR"); msg.ShowDialog();
                                                    if (fiscal_retorno == 1 && functionECF.conectorECF_Analisa_RetornoImpressora(alwaysVariables.ModeloEcf, ref ACK, ref ST1, ref ST2, ref ST3, ref fiscal_MSG))
                                                    {
                                                        conectorPDV_inc_estoque_geracao(fiscal_numero_serie);//Flash ESTOQUE
                                                        //conectorPDV_inc_cupom_relatorio("RG");
                                                    }
                                                    else
                                                    {
                                                        this.txtVisorMsgConectorCF.Invoke((MethodInvoker)delegate { txtVisorMsgConectorCF.Text = functionECF.conectorECF_Erros(alwaysVariables.ModeloEcf); });
                                                    }
                                                    functionECF.conectorECF_DataMovimento(alwaysVariables.ModeloEcf, ref fiscal_data_movimento, ref fiscal_MSG, ref fiscal_retorno, alwaysVariables.ECF_Ligada);
                                                    if (fiscal_data_movimento.Trim() != "" && Convert.ToDouble(fiscal_data_movimento.Replace("\0", "").Trim() == "" ? "0" : fiscal_data_movimento) >= 0 && fiscal_flag != 8)
                                                    {
                                                        this.lbDataMovimentoConectorCF.Invoke((MethodInvoker)delegate { lbDataMovimentoConectorCF.Text = fiscal_data_movimento.Substring(0, 2) + "/" + fiscal_data_movimento.Substring(2, 2) + "/" + String.Format("{0:ddMMyyyy}", DateTime.Now).Substring(4, 2) + fiscal_data_movimento.Substring(4, 2); });
                                                        
                                                        conectorPDV_inc_fechamentoCaixa();
                                                        conectorPDV_inc_movimentocaixa("0.00", "0.00", "0.00", "0.00", "1.00", "0.00", 1.ToString(), "0.00", "0.00", "0.00", 1.ToString(), alwaysVariables.Desconhecido, "0,00", 0, "0,00");

                                                        this.txtVisorMsgConectorCF.Invoke((MethodInvoker)delegate { txtVisorMsgConectorCF.Text = "CONFERINDO PRÉ-VENDAS PENDENTES"; });
                                                        
                                                        ataque = 0;
                                                        msg = new msgInfo("Uma conferencia na base de retaguarda foi verificada e constatou-se " + countRowsWeb.ToString() + " pré-vendas pedentes, deseja atualiza-lás [ F12 ] antes da emissão da leitura Z ou cancela-las [ F11 ] ou [ ESPACE ].");
                                                        msg.ShowDialog();
                                                        int count = countRowsWeb;
                                                        modoPedido = 1;

                                                        this.txtEntradaDadosConectorCF.Invoke((MethodInvoker)delegate { txtEntradaDadosConectorCF.Text = countRowsWeb.ToString(); });
                                                        
                                                        for (int i = 0; i < count; i++)
                                                        {
                                                            modoPedido = 1;
                                                            conector_webservice_preVenda(alwaysVariables.Store.ToString(), dsRReservaEx.Tables[0].Rows[i][0].ToString(), 1);
                                                            ataque = 1;
                                                        }
                                                        conectorPDV_find_fechamentoOp("1");
                                                        banco_operado = "0";
                                                        banco_nome = "DESCONHECIDO";
                                                        banco_sequencia = "0";
                                                        input_operador = null;
                                                        resetVariableFechamento();
                                                        if (functionECF.conectorECF_Erros(alwaysVariables.ModeloEcf) != "")
                                                        {
                                                            conector_retorno_ack();
                                                        }
                                                        else
                                                        {
                                                            this.txtVisorMsgConectorCF.Invoke((MethodInvoker)delegate { txtVisorMsgConectorCF.Text = "SEM OPERADOR"; });
                                                        }
                                                        //lblOperadorNfce.Text = lbOperadorConectorCF.Text = "0";
                                                        this.lblOperadorNfce.Invoke((MethodInvoker)delegate { lblOperadorNfce.Text = "0"; });
                                                        this.lbOperadorConectorCF.Invoke((MethodInvoker)delegate { lbOperadorConectorCF.Text = "0"; });
                                                        this.txtAutorizacaoUsuarioConectorCF.Invoke((MethodInvoker)delegate { txtAutorizacaoUsuarioConectorCF.Select(); });
                                                    }
                                                    else
                                                    {
                                                        this.txtVisorMsgConectorCF.Invoke((MethodInvoker)delegate { txtVisorMsgConectorCF.Text = "CONFERINDO PRÉ-VENDAS PENDENTES"; });
                                                        ataque = 0;
                                                        msg = new msgInfo("Uma conferencia na base de retaguarda foi verificada e constatou-se " + countRowsWeb.ToString() + " pré-vendas pedentes, deseja atualiza-lás [ F12 ] antes da emissão da leitura Z ou cancela-las [ F11 ] ou [ ESPACE ].");
                                                        msg.ShowDialog();
                                                        int count = countRowsWeb;
                                                        modoPedido = 1;
                                                        this.txtEntradaDadosConectorCF.Invoke((MethodInvoker)delegate { txtEntradaDadosConectorCF.Text = countRowsWeb.ToString(); });
                                                        for (int i = 0; i < count; i++)
                                                        {
                                                            modoPedido = 1;
                                                            conector_webservice_preVenda(alwaysVariables.Store.ToString(), dsRReservaEx.Tables[0].Rows[i][0].ToString(), 1);
                                                            ataque = 1;
                                                        }
                                                    }
                                                }
                                                conectorPDV_find_fechamentoOp("1");
                                                this.lbOperadorConectorCF.Invoke((MethodInvoker)delegate { lbOperadorConectorCF.Text = "0"; });
                                                banco_operado = "0";
                                                banco_nome = "DESCONHECIDO";
                                                banco_sequencia = "0";
                                                input_operador = null;
                                            }
                                        }
                                        catch (Exception erro)
                                        {

                                        }


                                        //****************************End Fechamento de operador
                                        banco_operado = "0";
                                        banco_nome = "DESCONHECIDO";
                                        banco_sequencia = "0";
                                        this.lbOperadorConectorCF.Invoke((MethodInvoker)delegate { lbOperadorConectorCF.Text = "0"; });
                                        this.lbDataMovimentoConectorCF.Invoke((MethodInvoker)delegate { lbDataMovimentoConectorCF.Text = "00/00/0000"; });
                                        resetLabel(); resetVariable();
                                        this.txtVisorMsgConectorCF.Invoke((MethodInvoker)delegate { txtVisorMsgConectorCF.Text = "CAIXA FECHADO"; });
                                        fiscal_data_movimento = "000000";
                                        banco_operado = "0";// verificar o causesValidation = false
                                        banco_sequencia = "0";
                                        this.txtEntradaDadosConectorCF.Invoke((MethodInvoker)delegate { txtEntradaDadosConectorCF.Select(); });
                                        //txtEntradaDadosConectorCF.CausesValidation = true;


                                    }
                                    else
                                    {
                                        this.txtVisorMsgConectorCF.Invoke((MethodInvoker)delegate { txtVisorMsgConectorCF.Text = "MENU CONECTORPDV"; });
                                        this.txtTitleCupomFiscalConectorCF.Invoke((MethodInvoker)delegate { txtTitleCupomFiscalConectorCF.Text = fiscal_MSG; });
                                        //txtVisorMsgConectorCF.Text = fiscal_MSG;
                                        conector_reset_z();
                                    }
                                    this.txtEntradaDadosConectorCF.Invoke((MethodInvoker)delegate { txtEntradaDadosConectorCF.CausesValidation = true; });
                                }
                                else
                                {
                                    msg = new msgInfo("Memória fiscal sem espaço."); msg.ShowDialog();
                                }
                            }
                            else
                            {
                                string bof = "0"; //this.lbOperadorConectorCF.Invoke((MethodInvoker)delegate { lbOperadorConectorCF.Text = "" ? "0" : lbOperadorConectorCF.Text; });
                                if (lbOperadorConectorCF.Text == "")
                                {
                                    bof = "0";
                                }
                                else
                                {
                                    bof = lbOperadorConectorCF.Text;
                                }
                                if (Convert.ToInt32(bof) == 0)
                                {
                                    msg = new msgInfo("Já houve redução Z no dia."); msg.ShowDialog();
                                }
                                else if (fiscal_flag == 8)
                                {
                                    msg = new msgInfo(1, "Todas as rotina foram finalizadas com sucesso, configura o fechamento de caixa."); msg.ShowDialog();
                                    conector_stop_thread();
                                    //this.Dispose();
                                    Environment.Exit(0);
                                }
                            }
                        }
                        else
                        {
                            msg = new msgInfo("Fechamento de formas de pagamento iniciada."); msg.ShowDialog();
                        }
                    }
                    else
                    {
                        msg = new msgInfo("Cupom fiscal aberto."); msg.ShowDialog();
                    }
                }
            }
            else
            {
                msg = new msgInfo("Fechamento de formas de pagamento iniciada."); msg.ShowDialog();
            }
            #endregion
        }
        void conector_load_PAFECF()//
        {
            auxConsistencia = 0;
            fiscal_flag = 0;
            functionECF.conectorECF_fiscal_flag(alwaysVariables.ModeloEcf, ref fiscal_flag, ref fiscal_MSG, ref fiscal_retorno, alwaysVariables.ECF_Ligada);
            //fiscal_retorno = conectorECF.Bematech_FI_FlagsFiscais(ref fiscal_flag);
            //conectorECF.Analisa_iRetorno(fiscal_retorno, ref fiscal_MSG);
            functionECF.conectorECF_Analisa_RetornoImpressora(alwaysVariables.ModeloEcf,ref ACK, ref ST1, ref ST2, ref ST3, ref fiscal_MSG);
            txtVisorMsgConectorCF.Select();
            if (fiscal_flag != 33 && fiscal_flag != 1 && fiscal_flag != 35)
            {
                if (pnlAutorizacaoPDVConectorCF.Visible == false && pnlTotalConectorCF.Visible == false)// && pnlConsultaProduto.Visible == false)
                {
                    if (call_pdv == 0 || call_pdv == 5)
                    {
                        if (call_pdv == 5)
                        {
                            conector_interface_crediario(true);
                            pnlAutorizacaoPDVConectorCF.Visible = false;
                            call_pdv = 0;
                            call_funcao = 0;
                            txtEntradaDadosConectorCF.ReadOnly = false;
                            txtEntradaDadosConectorCF.Enabled = true;
                            txtEntradaDadosConectorCF.CausesValidation = true;
                            txtEntradaDadosConectorCF.Select();
                        }
                        conector_interface_menuFiscal(true);
                    }
                    else if (call_pdv == 1 || call_pdv == 8 || call_pdv == 10 || call_pdv == 11 || call_pdv == 12 || call_pdv == 9)
                    {
                        if (call_pdv == 12)
                        {
                            txtEntradaDadosConectorCF.Visible = true;
                            lblVisorEntradaDadosConectorCF.Visible = true;
                            alwaysVariables.ModoOperacao = 1;
                        }
                        pnlConsultaProduto.Visible = false;
                        pnlModoOperacao.Visible = false;   
                        pnlNotaDConectorCF.Visible = false;
                        pnlAutorizacaoPDVConectorCF.Visible = false;
                        txtEntradaDadosConectorCF.ReadOnly = false;
                        call_funcao = 0;
                        resetVariable();
                        resetLabel();
                        conector_interface_menuFiscal(true);
                        txtEntradaDadosConectorCF.CausesValidation = true;
                        txtEntradaDadosConectorCF.Select();
                    }
                }
                else
                {
                    msgInfo msg = new msgInfo("Caro Operador - " + " ALERTA, COMANDO NEGADO."); msg.ShowDialog();
                }
            }
            else
            {
                msgInfo msg = new msgInfo("Caro Operador - " + " ALERTA, estado da impressora não possibilida prosseguir, verifique se o cupom fiscal não esta aberto no ECF."); msg.ShowDialog();
            }
            if (pnlTotalConectorCF.Visible == true)
            {
                txtEntradaDadosConectorCF.Select();
            }
            else if (pnlAutorizacaoPDVConectorCF.Visible == true)
            {
                txtEntradaDadosConectorCF.CausesValidation = true;
                txtAutorizacaoSenhaConectorCF.Select();
            }
            else if (pnlAutorizacaoPDVConectorCF.Visible == true)
            {
                txtPesquisaProduto.Select();
            }
            else
            {
                txtEntradaDadosConectorCF.CausesValidation = true;
                txtEntradaDadosConectorCF.Select();
            }
        }
        void conector_aut_recebimento()
        {
            auxDescricaoFinalizadora  = "";
            if (Convert.ToDecimal(txtValorPagoConectorCF.Text.Replace(",", ".")) > 0)
            {
                if (txtValorTrocoConectorCF.Text != "" && Convert.ToDecimal(txtValorTrocoConectorCF.Text) > 0)
                {
                    auxTypeHistory = "12";
                    conectorPDV_inc_historicoCrediario("TROCO", txtValorTrocoConectorCF.Text, 0);
                }

                txtLojaConectorCF.ReadOnly = false;
                txtNumeroContratoConectorCF.ReadOnly = false;
                txtParcelaConectorCF.ReadOnly = false;

                if (cmbSituacaoContratoConectorCF.Text != "1 | LIQUIDADO")
                {
                    conectorPDV_alt_parcela();
                }
                //fiscal_retorno = conectorECF.Bematech_FI_FlagsFiscais(ref fiscal_flag);
                fiscal_flag = 0;
                functionECF.conectorECF_fiscal_flag(alwaysVariables.ModeloEcf, ref fiscal_flag, ref fiscal_MSG, ref fiscal_retorno, alwaysVariables.ECF_Ligada);
                
                if ((fiscal_flag == 1 || fiscal_flag == 0 || fiscal_flag == 32) && flag_recebimento == 1)
                {
                    if (alwaysVariables.Autentica == "1")
                    {
                        conector_via_cliente(1);
                        flag_recebimento = 0;
                        functionECF.conectorECF_Analisa_RetornoImpressora(alwaysVariables.ModeloEcf, ref ACK, ref ST1, ref ST2, ref ST3, ref fiscal_MSG);
                        vetorRecebimento = new string[12] { "#", "#", "#", "#", "#", "#", "#", "#", "#", "#", "#", "#" };
                    }
                    else
                    {
                        functionECF.conectorECF_RelatorioGerencial(alwaysVariables.ModeloEcf, "================================================ \n" + "               R E C I B O                   \n" + "================================================ \n", ref fiscal_MSG, ref fiscal_retorno, alwaysVariables.ECF_Ligada);
                        //fiscal_retorno = conectorECF.Bematech_FI_RelatorioGerencial("================================================ \n" + "               R E C I B O                   \n" + "================================================ \n");
                        /* ----------  RETURN BANCO ----------------  */
                        conector_via_cliente(2);

                    }
                    conector_update_autparcela(txtParcelaConectorCF.Text, txtLojaConectorCF.Text, auxIdParcela, txtNumeroContratoConectorCF.Text);
                    returnDefaultPDV();
                }
                else
                {
                    msgInfo msg = new msgInfo("ERRO FATAL VERIFIQUE O STATUS DA IMPRESSORA. " + fiscal_MSG); msg.ShowDialog();
                }
                //conectorECF.Bematech_FI_CancelaRecebimentoNaoFiscalMFD(auxCPFCNPJ, auxNomeRazao, auxLogradouro);

                if (ataque == 1)
                {
                    msgInfo msg = new msgInfo("ERRO FATAL O TERMINAL SERÁ ENCERRADO"); msg.ShowDialog();
                    conector_stop_thread();
                    this.DialogResult = DialogResult.OK;
                    this.Dispose();
                }
            }
            else
            {
                msgInfo msg = new msgInfo("NÃO HOUVE RECEBIMENTO ATÉ O MOMENTO, IMPOSSIVEL POSSEGUIR."); msg.ShowDialog();
            }
        }
        void conector_calc_desconto()
        {
            if (String.Format("{0:ddMMyy}", DateTime.Now) == fiscal_data_movimento)
            {
                if (txtValorPrestacaoConectorCF.Text != "" && txtValorPrestacaoConectorCF.Text != "0,00" && Convert.ToDecimal(txtValorPrestacaoConectorCF.Text) > 0)
                {
                    txtSenhaLiberacaoDescontoConectorCF.CausesValidation = false;
                    txtValorDescontoConectorCF.Text = "0,00";
                    txtValorDescontoConectorCF.ReadOnly = false;
                    txtValorDescontoConectorCF.Select();
                    txtSenhaLiberacaoDescontoConectorCF.CausesValidation = true;
                }
                else
                {
                    msgInfo msg = new msgInfo("Caro Cliente - " + "Valor da Prestação não informado, ou igual a zero."); msg.ShowDialog();
                    txtValorPrestacaoConectorCF.Select();
                }
            }
            else
            {
                msg = new msgInfo("DATA DA IMPRESSORA DIFERENTE DA DATA DO SISTEMA,\n VERIFIQUE O STATUS DA IMPRESSORA,\n MOVIMENTO DO DIA VESUS DATA IMPRESSORA,\n AGUARDANDO EMISSÃO DA LEITURA Z."); msg.ShowDialog();
                txtEntradaDadosConectorCF.Select();
            }
        }
        void conector_calc_money()
        {
            if (String.Format("{0:ddMMyy}", DateTime.Now) == fiscal_data_movimento)
            {
                if (Convert.ToDecimal(txtValorMontanteConectorCF.Text)> 0)
                {
                    btnTotalConectorCF.Select();
                }
                conectorPDV_calc_prestacao(1.ToString(), 7.ToString());
            }
            else
            {
                msg = new msgInfo("DATA DA IMPRESSORA DIFERENTE DA DATA DO SISTEMA,\n VERIFIQUE O STATUS DA IMPRESSORA,\n MOVIMENTO DO DIA VESUS DATA IMPRESSORA,\n AGUARDANDO EMISSÃO DA LEITURA Z."); msg.ShowDialog();
                txtEntradaDadosConectorCF.Select();
            }
        }
        void conector_zera_pisCofins()
        {

            pis = new dadosPis(null, null, null, null, null, null, null, null, null, null, null, null, null, null, null);
            pisST = new dadosPisST(null, null, null, null, null);
            cofins = new dadosCofins(null, null, null, null, null, null, null, null, null, null, null, null, null, null, null);
            cofinsST = new dadosCofinsST(null, null, null, null, null);
        }
        void conector_calc_vale()
        {
            if (String.Format("{0:ddMMyy}", DateTime.Now) == fiscal_data_movimento)
            {
                if (Convert.ToDecimal(txtValorMontanteConectorCF.Text) > 0)
                {
                    btnTotalConectorCF.Select();
                }

                if (Convert.ToDecimal(txtValorMontanteConectorCF.Text) <= (Convert.ToDecimal(txtTotalDevidoConectorCF.Text) - Convert.ToDecimal(txtValorPagoConectorCF.Text)))
                {
                    conectorPDV_calc_prestacao("10", "11");
                }
                else
                {
                    msgInfo msg = new msgInfo("Caro Cliente - " + "Valor a transmitir é maior que o valor a pagar, finalizadora não permiti troco."); msg.ShowDialog();
                    txtValorMontanteConectorCF.Text = "0,00";
                    txtValorMontanteConectorCF.Select();
                }
            }
            else
            {
                msg = new msgInfo("DATA DA IMPRESSORA DIFERENTE DA DATA DO SISTEMA,\n VERIFIQUE O STATUS DA IMPRESSORA,\n MOVIMENTO DO DIA VESUS DATA IMPRESSORA,\n AGUARDANDO EMISSÃO DA LEITURA Z."); msg.ShowDialog();
                txtEntradaDadosConectorCF.Select();
            }
        }

        protected void conectorPDV_load_pedido_temp(string idPedido, int tipo)
        {
            int countFieldTemp = 0;
            int countRowsTemp = 0;
            string[,] carrega = new string[countRowsTemp, countFieldTemp];
            try
            {
                auxConsistencia = 0;
                title = banco.abreConexao();
                banco.startTransaction("conectorPDV_load_pedido_temp");
                banco.addParametro("find", idPedido);
                banco.addParametro("tipo", tipo.ToString());
                if (tipo == 1)
                {
                    banco.procedimentoRead();
                    if (banco.retornaRead().Read() == true)
                    {
                        auxIdCliente = banco.retornaRead().GetString(0);
                        alwaysVariables.FlagParametro = banco.retornaRead().GetString(1);
                        reserva_metodo = banco.retornaRead().GetString(2);
                        flagDav = banco.retornaRead().GetString(3);
                        flagFormaFinalizacao = "D";
                    }
                }
                else
                {
                    banco.procedimentoSet();
                    countFieldTemp = banco.retornaSet().Tables[0].Columns.Count;
                    countRowsTemp = banco.retornaSet().Tables[0].DefaultView.Count;
                    carrega = new string[countRowsTemp, countFieldTemp];
                    for (int w = 0; w < countRowsTemp; w++)//Linha
                    {
                        for (int f = 0; f < countFieldTemp; f++) //Coluna
                        {
                            carrega[w, f] = Convert.ToString(banco.retornaSet().Tables[0].Rows[w][f]);
                        }
                    }
                }
            }
            catch (Exception erro)
            {
                msg = new msgInfo(1, erro.Message); msg.ShowDialog(); auxConsistencia = 1;
            }
            finally
            {
                banco.fechaConexao(); if (title != "") { this.txtTitleCupomFiscalConectorCF.Invoke((MethodInvoker)delegate { txtTitleCupomFiscalConectorCF.Text = title; }); }
                if (tipo == 2)
                {
                    for (int w = 0; w < countRowsTemp; w++)//Linha
                    {
                        conector_load_reserva_itens(carrega[w, 0], carrega[w, 1], carrega[w, 2], carrega[w, 3], carrega[w, 4]);
                    }
                }

            }
            if (tipo < 2)
            {
                tipo = tipo + 1;
                conectorPDV_load_pedido_temp(idPedido, tipo);
            }
            conector_reset_reserva();
            cryptografia.conectorPDV_serie(alwaysVariables.PAF_total + "\\grandFullPDV" + ".txt", "0");
        }
        void conector_carrega_variavel()
        {
            auxConsistencia = 0;
            try
            {
                fiscal_data_printer = String.Format("{0:ddMMyy}", DateTime.Now);
                fiscal_data_movimento = String.Format("{0:ddMMyy}", DateTime.Now);
                string texto = "select caixa,";
                texto += " cnpj, ";
                texto += " numeroSerie, ";
                texto += " tab1.modelo, ";
                texto += " tab1.marca, tab2.letra_mf, tab2.tipo_ecf, tab2.versao_firmware, tab2.dtsoft_basico";
                texto += "           from licenca_ecf tab";
                texto += "           inner join nr_pdv on(tab.caixa = nr_pdv.nr_pdv)";
                texto += "           inner join ecf_adcional tab2 on(tab.caixa = tab2.idecf_adcional)";
                texto += "           inner join modelo_ecf tab1 on(tab.modelo =tab1.idMarca) where tab.caixa=" + alwaysVariables.Terminal;

                title = banco.abreConexao();
                banco.singleTransaction(texto);
                banco.procedimentoRead();
                if (banco.retornaRead().Read() == true)
                {
                    fiscal_store = alwaysVariables.Store;
                    fiscal_numero_caixa = banco.retornaRead().GetString(0);
                    fiscal_CGC = banco.retornaRead().GetString(1);
                    fiscal_numero_serie = banco.retornaRead().GetString(2);
                    //fiscal_IE = banco.retornaRead().GetString(2);
                    fiscal_modelo = banco.retornaRead().GetString(3);
                    alwaysVariables.ECF_MODELO_CRYP = key.GetMd5Sum((fiscal_modelo.Replace("\0", "").Trim()));
                    fiscal_marca = banco.retornaRead().GetString(4);
                    fiscal_letramf_adicional = banco.retornaRead().GetString(5);
                    fiscal_tipo_ecf = banco.retornaRead().GetString(6);
                    fiscal_VersaoFirmware = banco.retornaRead().GetString(7);
                    fiscal_dtsoft_basico = banco.retornaRead().GetString(8);
                }
            }
            catch (Exception erro)
            {
                msgInfo msg = new msgInfo("Caro Cliente - " + erro.Message); msg.ShowDialog(); auxConsistencia = 1;
            }
            finally
            {
                banco.fechaConexao(); if (title != "") { this.txtTitleCupomFiscalConectorCF.Invoke((MethodInvoker)delegate { txtTitleCupomFiscalConectorCF.Text = title; }); }
                if (auxConsistencia == 1)
                {
                }
            }
        }

        void conector_complemento_firmware()
        {
            auxConsistencia = 0;
            try
            {

                string texto = "REPLACE INTO `conectorpdv`.`ecf_adcional` ";
                texto += " ( `idecf_adcional`,`letra_mf`,`tipo_ecf`,`versao_firmware`,`dtsoft_basico`) ";
                texto += " values ";
                texto += "(" + alwaysVariables.Terminal.Replace("\0", "").Trim() + ",'" + fiscal_letramf_adicional.Replace("\0", "").Trim() + "','" + fiscal_tipo_ecf.Replace("\0", "").Trim() + "','" + fiscal_VersaoFirmware.Replace("\0", "").Trim() + "','" + fiscal_dtsoft_basico.Replace("\0", "").Trim() + "'";
                texto += ")";

                title = banco.abreConexao();
                banco.singleTransaction(texto);
                banco.procedimentoRead();
            }
            catch (Exception erro)
            {
                msgInfo msg = new msgInfo("Caro Cliente - " + erro.Message); msg.ShowDialog(); auxConsistencia = 1;
            }
            finally
            {
                banco.fechaConexao(); if (title != "") { this.txtTitleCupomFiscalConectorCF.Invoke((MethodInvoker)delegate { txtTitleCupomFiscalConectorCF.Text = title; }); }
                if (auxConsistencia == 1)
                {
                }
            }
        }

        void conector_calc_cheque()
        {
            if (String.Format("{0:ddMMyy}", DateTime.Now) == fiscal_data_movimento)
            {
                if (Convert.ToDecimal(txtValorMontanteConectorCF.Text) > 0)
                {
                    btnTotalConectorCF.Select();
                }
                conectorPDV_calc_prestacao("2", "8");
            }
            else
            {
                msg = new msgInfo("DATA DA IMPRESSORA DIFERENTE DA DATA DO SISTEMA,\n VERIFIQUE O STATUS DA IMPRESSORA,\n MOVIMENTO DO DIA VESUS DATA IMPRESSORA,\n AGUARDANDO EMISSÃO DA LEITURA Z."); msg.ShowDialog();
                txtEntradaDadosConectorCF.Select();
            }
        }
        void conector_calc_cartao()
        {
            if (String.Format("{0:ddMMyy}", DateTime.Now) == fiscal_data_movimento)
            {
                string test = "5";
                if (txtValorMontanteConectorCF.ReadOnly != true)
                {
                    if (auxStatusParcela != "1")
                    {
                        if (Convert.ToDecimal(txtValorMontanteConectorCF.Text) > 0)
                        {
                            if (Convert.ToDecimal(txtValorMontanteConectorCF.Text) <= (Convert.ToDecimal(txtTotalDevidoConectorCF.Text) - Convert.ToDecimal(txtValorPagoConectorCF.Text)))
                            {
                                if (Convert.ToDecimal(txtValorMontanteConectorCF.Text) > 0)
                                {
                                    btnTotalConectorCF.Select();
                                }
                                typeCard type = new typeCard("BLUE");
                                if (type.ShowDialog(this) == DialogResult.OK)
                                {
                                    auxTypeCartao = type.Type;
                                    networkCard card = new networkCard();
                                    if (card.ShowDialog(this) == DialogResult.OK)
                                    {
                                        auxMaquineta = card.Equipamento;

                                        switch (auxTypeCartao)
                                        {
                                            case "1":
                                                test = "6";
                                                break;
                                            default:
                                                test = "5";
                                                break;
                                        }
                                        conectorPDV_calc_prestacao(test, "10");
                                    }
                                }
                            }
                            else
                            {
                                msgInfo msg = new msgInfo("Caro Cliente - " + "Valor a transmitir é maior que o valor a pagar, finalizadora não permiti troco."); msg.ShowDialog();
                                txtValorMontanteConectorCF.Text = "0,00";
                                txtValorMontanteConectorCF.Select();
                            }
                        }
                        else
                        {
                            msgInfo msg = new msgInfo("Caro Cliente - " + "Valor nulo ou igual a ZERO pode não registrado."); msg.ShowDialog();
                        }
                    }
                    else
                    {
                        msgInfo msg = new msgInfo("OBSERVAÇÃO - " + "Parcela liquidada, não há mais nada a fazer deseja confirma-lá [AUTENTICA].");
                        if (msg.ShowDialog(this) == DialogResult.Cancel)
                        {
                            conectorPDV_alt_parcela();
                            returnDefaultPDV();
                        }
                    }
                    txtValorPagoConectorCF.Select();
                }
                else if (MessageBox.Show("Total [ F2 ] não foi acionado, deseja realizar o recebimento?", "Observação", MessageBoxButtons.YesNo, MessageBoxIcon.Question) == System.Windows.Forms.DialogResult.Yes)
                {
                    txtValorMontanteConectorCF.ReadOnly = false;
                    txtValorMontanteConectorCF.Select();
                }
                else
                {
                    txtValorPrestacaoConectorCF.Select();
                }
            }
            else
            {
                msg = new msgInfo("DATA DA IMPRESSORA DIFERENTE DA DATA DO SISTEMA,\n VERIFIQUE O STATUS DA IMPRESSORA,\n MOVIMENTO DO DIA VESUS DATA IMPRESSORA,\n AGUARDANDO EMISSÃO DA LEITURA Z."); msg.ShowDialog();
                txtEntradaDadosConectorCF.Select();
            }
        }
        void conectorPDV_interface_notaFiscalD(bool flag)
        {
            call_pdv = 10;
            resetLabel();
            auxIdCliente = "";
            resetVariable();
            txtNumeroNotaNFDEmitida.ReadOnly = false;
            txtItensNFDEmitida.ReadOnly = true;
            txtQuantidadeNFDEmitida.ReadOnly = false;
            txtQuantidadeNFDEmitida.Text = "0,000";
            lblTotalNotaDConectorCF.Text = "0,00";
            txtItensNFDEmitida.Clear();
            lblVisorEntradaDadosConectorCF.Text = "ENTRADA DE DADOS";
            if (flag == true)
            {
                txtVisorMsgConectorCF.Text = "EMISSAO DE NOTA SERIE D";
                txtEntradaDadosConectorCF.CausesValidation = false;
                txtEntradaDadosConectorCF.ReadOnly = true;
                txtEntradaDadosConectorCF.Select();
                this.pnlNotaDConectorCF.Location = new System.Drawing.Point(262, 92);
                this.pnlNotaDConectorCF.Size = new System.Drawing.Size(815, 526);
                this.pnlNotaDConectorCF.Visible = true;
                txtNumeroNotaNFDEmitida.Select();
            }
            else
            {
                if (call_pdv == 0)
                {
                    txtVisorMsgConectorCF.Text = "CAIXA ABERTO";
                }
                else
                {
                    txtVisorMsgConectorCF.Text = "MENU";
                }

                    //fiscal_retorno = conectorECF.Bematech_FI_FlagsFiscais(ref fiscal_flag);
                functionECF.conectorECF_fiscal_flag(alwaysVariables.ModeloEcf, ref fiscal_flag, ref fiscal_MSG, ref fiscal_retorno, alwaysVariables.ECF_Ligada);
                    if (fiscal_retorno == 1 && functionECF.conectorECF_Analisa_RetornoImpressora(alwaysVariables.ModeloEcf,ref ACK, ref ST1, ref ST2, ref ST3, ref fiscal_MSG) && txtNumeroNotaNFDEmitida.Text != "")
                    {
                        conectorPDV_find_notad_itensD("2", txtNumeroNotaNFDEmitida.Text,0);
                        if (txtNumeroNotaNFDEmitida.Text != "")
                        {
                            int t = countRows;
                            for (int a = 0; a < t; a++)
                            {
                                call_pdv = 0;
                                notaD[a, 3] = Math.Round(Decimal.Parse(notaD[a, 3].Replace(",",".")), 0).ToString();
                                //conector_load_nota_D_itens(alwaysVariables.Store, notaD[a, 0], notaD[a, 3], notaD[a, 4], "0");
                            }
                            SerieNumber = "D";
                            NotaNumber = txtNumeroNotaNFDEmitida.Text.PadLeft(10, '0');
                            txtNumeroNotaNFDEmitida.Clear();
                        }
                    }
                    else
                    {
                        if (functionECF.conectorECF_Erros(alwaysVariables.ModeloEcf) != "")
                        {
                            conector_retorno_ack();
                        }
                        
                    }
                    notaD = null;
                this.pnlNotaDConectorCF.Size = new System.Drawing.Size(1, 1);
                this.pnlNotaDConectorCF.Location = new System.Drawing.Point(1266, 603);
                this.pnlNotaDConectorCF.Visible = false;
                txtEntradaDadosConectorCF.Clear();
                txtEntradaDadosConectorCF.ReadOnly = false ;
                txtEntradaDadosConectorCF.CausesValidation = true;
                txtEntradaDadosConectorCF.Select();
                call_pdv = 0;
            }
            resetLabel_interface();
        }
        void conector_geracao_md5(string caminho, string md)
        {
            /** GERAÇÃO DO MD5
             * gerar, por meio do algoritmo Message Digest-5 (MD-5), código de autenticação do arquivo TXT a que se refere a alínea “b” e gravar o resultado no arquivo auxiliar criptografado e inacessível ao estabelecimento usuário de que trata o item 4 do Requisito XXIV, sobrepondo à gravação anteriormente realizada, devendo este código ser impresso no Cupom Fiscal, no campo
            **/

            StreamWriter sw = new StreamWriter(@"C:\conector\MFD\arquivos\serial_temp.txt", true, Encoding.ASCII);
            sw.Write(md + "\r\n");
            sw.Write(alwaysVariables.MD5_Main_32 + "\r\n");
            sw.Write(alwaysVariables.MD5_Main_conectorECF + "\r\n");
            sw.Write(alwaysVariables.MD5_Main_conectorCrypt + "\r\n");
            sw.Write(alwaysVariables.MD5_Main_conectorInstrucao + "\r\n");
            sw.Write(alwaysVariables.MD5_Main_conectorTef + "\r\n");
            sw.Write(alwaysVariables.MD5_Main_conectorSintegra + "\r\n");
            sw.Write(alwaysVariables.MD5_Main_conectorSetting + "\r\n");
            sw.Write(alwaysVariables.MD5_Main_conectorBank + "\r\n");
            sw.Write(alwaysVariables.MD5_Main_conectorAmbient + "\r\n");
            if (alwaysVariables.MD5_Main_64.Trim() != "")
            {
                sw.Write(alwaysVariables.MD5_Main_64 + "\r\n");   
            }
            sw.Write(alwaysVariables.MD5_Main_DARUMA + "\r\n");
            sw.Write(alwaysVariables.MD5_Main_ELGIN + "\r\n");
            sw.Write(alwaysVariables.MD5_Main_INTERFACEEPSON + "\r\n");
            sw.Write(alwaysVariables.MD5_Main_SWEDA + "\r\n");
            sw.Write(alwaysVariables.MD5_Main_boletoFrs + "\r\n");
            sw.Write(alwaysVariables.MD5_Main_mfd + "\r\n");
            sw.Write(alwaysVariables.MD5_Main_mfd3 + "\r\n");
            sw.Write(alwaysVariables.MD5_Main_sophus + "\r\n");
            sw.Close();
            //cryptografia.encryptFile(@"C:\conector\MFD\arquivos" + "\\", "serial_temp", -1);
            //alwaysVariables.MD5_Main = key.retornoFileMD5(@"C:\conector\MFD\arquivos\serial_temp.txt");

            conectorPDV_PAFECF_chave(caminho, alwaysVariables.MD5_Main_conectorEXE);
            //if (alwaysVariables.flagHomologacao == "1") { conectorPDV_PAFECF_chave(caminho, alwaysVariables.MD5_Main); } else { conectorPDV_PAFECF_chave(caminho, alwaysVariables.MD5VALIDO); }
            
            File.Delete(@"C:\conector\MFD\arquivos\serial_temp.txt");
            /*StreamWriter sw1 = new StreamWriter(@"C:\conector\MFD\arquivos\serial.txt", true, Encoding.ASCII);
            sw1.Write(alwaysVariables.MD5_Main);
            sw1.Close();
            cryptografia.encryptFile(@"C:\conector\MFD\arquivos" + "\\", "serial", -1);*/
        }
        void conector_interface_menuFiscal(bool flag)
        {
            if (call_pdv == 0 || call_pdv == 1)
            {
                ataque = call_pdv;   
            }
            if (workBalanca != null)
            {
                workBalanca.RequestStop(true);
            }
            call_pdv = 8;
            btnLeituraXMenuFiscal.Visible = flag;
            //MG.001 btnEspelhoMFDMenuFiscal.Visible = flag;
            //btnEstoqueMenuFiscal.Visible = flag;
            btnDAVEmitidosMenuFiscal.Visible = flag;
            btnVendaDoPeriodoSPEDMenuFiscal.Visible = flag;
            btnTabIndiceTecnicoProdutoMenuFiscal.Visible = flag;
            btnLMFCMenuFiscal.Visible = flag;
            //MG.001 btnArquivoMfdMenuFiscal.Visible = flag;
            //btnMovimentoECFMenuFiscal.Visible = flag;
            btnIdentificacaoPAFECFMenuFiscal.Visible = flag;
            btnParamentroConfiguracaoMenuFiscal.Visible = flag;
            //btnLMFSMenuFiscal.Visible = flag;
            //btnMeioPgtoMenuFiscal.Visible = flag;
            btnVendaDoPeriodoSintegraMenuFiscal.Visible = flag;
            btnRegistroPafEcfMenuFiscal.Visible = flag;
            btnArquivoMfdMenuFiscal.Visible = flag;
            btnTabIndiceTecnicoProdutoMenuFiscal.Visible = flag;
            lblVisorEntradaDadosConectorCF.Text = "ENTRADA DE DADOS";
            if (flag == true)
            {
                txtVisorMsgConectorCF.Text = "MENU - FISCAL";
                txtEntradaDadosConectorCF.CausesValidation = true;
                txtEntradaDadosConectorCF.Select();
                //this.lblVisorEntradaDadosConectorCF.Location = new System.Drawing.Point(576, 428);
                //this.txtEntradaDadosConectorCF.Location = new System.Drawing.Point(347, 457);
                this.pnlMenuFiscalConectorCF.Location = new System.Drawing.Point(70, 185);
                this.pnlMenuFiscalConectorCF.Size = new System.Drawing.Size(1015, 311);
                this.pnlMenuFiscalConectorCF.Visible = true;
            }
            else
            {
                //this.lblVisorEntradaDadosConectorCF.Location = new System.Drawing.Point(235, 511);
                //this.txtEntradaDadosConectorCF.Location = new System.Drawing.Point(1, 530);
                this.pnlMenuFiscalConectorCF.Size = new System.Drawing.Size(1, 1);
                this.pnlMenuFiscalConectorCF.Location = new System.Drawing.Point(1266, 603);
                this.pnlMenuFiscalConectorCF.Visible = false;
            }

        }

        void conector_interface_crediario(bool flag)
        {
            call_pdv = 5;
            pnlAutorizacaoPDVConectorCF.Visible = flag;
            if (flag == true)
            {
                this.pnlAutorizacaoPDVConectorCF.Location = new System.Drawing.Point(0, 92);
                    this.pnlAutorizacaoPDVConectorCF.Size = new System.Drawing.Size(649, 233);
            }
            ptbLogonStoreConectorCF.Visible = flag;
            lbQttyConectorCF.Visible = flag;
            lbPrecoCalculadoItensConectorCF.Visible = flag;
            lbPrecoUnitarioConectorCF.Visible = flag;
            ltbDetalhesConectorCF.Visible = flag;
            txtDescricaoItemConectorCF.Visible = flag;
            txtItensConectorCF.Visible = flag;
            txtEntradaDadosConectorCF.Visible = flag;
            lblVisorEntradaDadosConectorCF.Visible = flag;
            lbTitlePrecoUnitarioConectorCF.Visible = flag;
            lbTitleTotalItensConectorCF.Visible = flag;
            lbTitleQuantidadeConectorCF.Visible = flag;
//            pnlTotalConectorCF.Visible = flag;
            txtSubTotalConectorCF.Visible = flag;
            txtTitleCupomFiscalConectorCF.Visible = flag;
            lblSubTotalConectorCF.Visible = flag;
            if (flag == false)
            {
                txtVisorMsgConectorCF.Text = "CREDIÁRIO";
                txtLojaConectorCF.Select();
                this.pnlCrediarioConectorCF.Location = new System.Drawing.Point(0,0);
                this.pnlCrediarioConectorCF.Size = new System.Drawing.Size(1149, 617);
                this.pnlCrediarioConectorCF.Visible = true;
            }
            else
            {
                this.pnlCrediarioConectorCF.Size = new System.Drawing.Size(1, 1);
                this.pnlCrediarioConectorCF.Location = new System.Drawing.Point(1266, 603);
                this.pnlCrediarioConectorCF.Visible = false;
            }
            fechaMoneyObj(false);
            cmbSituacaoContratoConectorCF.Text = "0 | ABERTO";
        }
        void conector_reset_ack()
        {
            ACK = ST1 = ST2 = ST3 = null;
        }

        void conector_retorno_ack()
        {
            if (ACK != "" && ACK != null)
            {
                msgInfo msg = new msgInfo(1, ACK); msg.ShowDialog();
            }
            if (ST1 != "" && ST1 != null)
            {
                msgInfo msg = new msgInfo(1, ST1); msg.ShowDialog();
            }

            if (ST2 != "" && ST2 != null)
            {
                msgInfo msg = new msgInfo(1, ST2); msg.ShowDialog();
            }

            if (ST3 != "" && ST3 != null)
            {
                msgInfo msg = new msgInfo(1, ST3); msg.ShowDialog();
            }

            conector_reset_ack();
        }
        void conector_valida_user()
        {
            if (txtAutorizacaoUsuarioConectorCF.Text != "")
            {
                if (conector_funcionario(txtAutorizacaoUsuarioConectorCF.Text) == 1)
                {
                    txtVisorMsgConectorCF.Text = "USUÁRIO OK!";
                    txtAutorizacaoSenhaConectorCF.Select();
                }
                else
                {
                    txtVisorMsgConectorCF.Text = txtAutorizacaoUsuarioConectorCF.Text + " - USUÁRIO INVÁLIDO, OU NÃO EXISTE.";
                    txtAutorizacaoUsuarioConectorCF.Clear();
                    txtAutorizacaoUsuarioConectorCF.Select();
                }
            }
            else
            {
                if (pnlAutorizacaoPDVConectorCF.Visible == true)
                {
                    txtAutorizacaoUsuarioConectorCF.Select();
                }
                else
                {
                    if (alwaysVariables.ModoOperacao == 1)
                    {
                        txtEntradaDadosConectorCF.Select();
                    }
                    else
                    {
                        txtEntradaDadosNF.Select();
                    }
                }
                
            }
        }
        public string Conectar_Balanca_Conector()
        {

            string resposta = "";

            if (!conectorBalanca.IsOpen)
            {
                conectorBalanca.Close();
                conectorBalanca.BaudRate = 9600;
                conectorBalanca.Parity = System.IO.Ports.Parity.None;
                conectorBalanca.StopBits = System.IO.Ports.StopBits.One;
                conectorBalanca.ReadTimeout = 500;
                conectorBalanca.WriteTimeout = 500;
                
                try
                {
                    conectorBalanca.Open();
                    //aqui fica o array que eu envio a balança para pegar o peso
                    arranjoBytes = new byte[conectorBalanca.BytesToRead];
                    //conectorBalanca.Read(arranjoBytes, 0, arranjoBytes.Length);
                    //PortBuffer.AddRange(arranjoBytes);
                    conectorBalanca.Write(arranjoBytes, 0, arranjoBytes.Length);
                    PortBuffer.AddRange(arranjoBytes);
                    if (PortBuffer.Count > 1)
                    {
                        int p = 6;//conectorBalanca.BytesToRead;
                        byte[] ler = new byte[p];
                        conectorBalanca.Read(ler, 0, p);
                        int i = 1;
                        int t = p - 1;
                        string peso = "";
                        while (i < p)
                        {
                            peso += Convert.ToChar(ler[t]).ToString();
                            i += 1;
                            t -= 1;
                        }

                        string resp = peso.ToString().Insert(peso.ToString().Length - 3, ",");
                        resposta = resp.TrimStart('0');
                        StringComparer stringComparer = StringComparer.OrdinalIgnoreCase;
                        if (stringComparer.Equals(",", resposta.Substring(0, 1)))
                        {
                            resposta = "0" + resposta;
                        }
                        PortBuffer.Clear();
                    }
                    else
                    {
                        resposta = "";
                    }
                }
                catch (Exception ) { 
                }
            }
            conectorBalanca.Close();
            return resposta;
        }  
        void conector_reset_sangria()
        {
            sangria_operador_servico = null;
            // sangria_operador_retirada = null;
            sangria_finalizadora = null;
            sangria_valor_servico = null;
            sangria_valor_retirada = null;
        }
        void conector_reset_reserva()
        {
            lblInforReservaConectorCF.Text = "INFORME NUMERO DA  RESERVA";
            reserva_number = null;
            reserva_loja = null;
            reserva_status = null;
            reserva_metodo = null;
            reserva_qtty_itens = null;
            reserva_valor_un = null;
            reserva_desc_metodo = null;
            reserva_parcelas = null;
            reserva_finalizadora = null;
            reserva_item_idProduto = null;
            reserva_item_qtty_itens = null;
            reserva_item_preciLiquido = null;
            reserva_item_price_venda = null;
            reserva_item_desconto = null;
            reserva_item_barra = null;
            reserva_item_valor_unitario = null;
        }
        void conector_reset_convenio()
        {
            convenio_empresa = null;
            convenio_nome = null;
            convenio_cliente = null;
            convenio_limite = null;
            convenio_status = null;
            convenio_find = null;
            convenio_doc = null;
            convenio_razao = null;
            convenio_prazo = null;
            convenio_vencimento = null;
        }
        void conector_reset_pessoa()
        {
            pessoa_empresa = null;
            pessoa_nome = null;
            pessoa_cliente = null;
            pessoa_endereco = null;
            pessoa_limite = null;
            pessoa_status = null;
            pessoa_find = null;
        }
        private void conector_reset_discount()
        {
            typeAcresDesc = "";
            acresDesc = "0";
            valuesAcresDesc = "0";
        }
        void conector_reset_cheque()
        {
            cheque_cpf_cgc = null;
            cheque_agencia = null;
            cheque_banco = null;
            cheque_conta = null;
            cheque_deposito = null;
            cheque_numero = null;
            cheque_serie = null;
            input_cliente = null;
            auxIdCliente = null;
        }
        void conector_reset_card()
        {
            input_find = null;
            cartao_value = null;
            cartao_numero_parcelas = "1";
            cartao_type = "99";
        }
        void conector_reset_z()
        {
            input_z = null;
            input_reducao = null;
            input_data_z = null;
        }
        void conector_last_gt()
        {
            if (File.Exists(folderMFDGrand + "\\grandFullPDV" + ".enc"))
            {//Atualiza Grande Total
                File.Delete(folderMFDGrand + "\\grandFullPDV" + ".enc");
                File.Delete(folderMFDGrand + "\\grandFullPDV" + ".txt");//ALT ERIC
                File.Delete(folderMFDGrand + "\\temp" + ".txt");//ALT ERIC
                fiscal_GT_Crypt = new string('\x20', 20);
                functionECF.conectorECF_GrandeTotal_Crypt(alwaysVariables.ModeloEcf, ref fiscal_GT_Crypt, ref fiscal_MSG, ref fiscal_retorno, alwaysVariables.ECF_Ligada);
                cryptografia.conectorPDV_serie(alwaysVariables.PAF_total + "\\grandFullPDV" + ".txt", "0");
                File.Delete(folderMFDGrand + "\\grandFullPDV" + ".txt");
                cryptografia.descryptFile(folderMFDGrand + "\\grandFullPDV" + ".enc", "\\grandFullPDV"); //ALT ERIC
                //fiscal_retorno = conectorECF.Bematech_FI_GrandeTotal(ref fiscal_GT);
                //cryptografia.conectorPDV_aut_grandTotal(fiscal_GT);
            }
        }
        void conector_reset_variaveis_nfce()
        {
            auxNumeroNota = null;
            auxSerieNota = null;
            auxLoteNota = null;
            auxTotalTributosNFce = null;
            auxDescFinalizadoraNFce = null;
            auxQttyItensNFce = null;
            auxTotalNFce = null;
            auxNomeRazao = null;
            auxIdCliente = "0";
            auxLogradouro = null;
            auxTipoPessoa = null;
        }
        void conector_reset_input()
        {
            txtEntradaDadosConectorCF.Clear();
            txtEntradaDadosConectorCF.ReadOnly = false;
            lblVisorEntradaDadosConectorCF.Text = "ENTRADA DE DADOS";
            txtEntradaDadosConectorCF.CausesValidation = false;
            if (alwaysVariables.ModoOperacao == 1)
            {
                txtEntradaDadosConectorCF.Select();
            }
            else
            {
                txtEntradaDadosNF.Select();
            }
            txtEntradaDadosConectorCF.CausesValidation = true;
            input_data_abertura = null;
            input_operador = null;
            input_find = null;
            input_troco = null;
            input_cliente = null;
        }

        void conector_reset_input_NFCe()
        {
            txtEntradaDadosNF.Clear();
            txtEntradaDadosNF.ReadOnly = false;
            lblEntradaDadosNfce.Text = "ENTRADA DE DADOS";
            txtEntradaDadosConectorCF.CausesValidation = false;
            if (alwaysVariables.ModoOperacao == 1)
            {
                txtEntradaDadosConectorCF.Select();
            }
            else
            {
                txtEntradaDadosNF.Select();
            }
            txtEntradaDadosNF.CausesValidation = true;
            input_data_abertura = null;
            input_operador = null;
            input_find = null;
            input_troco = null;
            input_cliente = null;
        }

        void conector_reset_meioPgto()
        {
            input_find = null;
            input_tipo_geracao = null;
            input_tipo_down = null;
            input_di = null;
            input_finalizadora = null;
        }

        void conector_reset_sped()
        {
            sped_perfil = null;
            sped_funcionario = null;
            sped_finalidade = null;
            sped_atividade = null;
            sped_di = null;
            sped_df = null;
            sped_retorno = null;
        }
        void conector_reset_MFD()
        {
            input_biblioteca = null;
            input_assinatura = null;
            input_tipo_down = null;
            input_tipo_geracao = null;
            input_unico_arquivo = null;
            keys_valida_private = new string('\x20', 256);
            keys_valida_publica = new string('\x20', 256);
            input_coo_first = null;
            input_coo_last = null;
            input_di = null;
            input_df = null;
            input_find = null;
        }
        void conector_reset_lmfc()
        {
            lblVisorEntradaDadosConectorCF.Text = "ENTRADA DE DADOS";
            input_tipo_lmf = null;
            input_tipo_down = null;
            input_tipo_geracao = null;
            input_coo_first = null;
            input_coo_last = null;
            input_di = null;
            input_df = null;
            input_find = null;
        }
        void conector_reset_recebimento()
        {
            auxRecebimentoStore = null;
            auxRecebimentoCarne = "0";
            auxRecebimentoPgto = "0,00";
            auxRecebimentoParcela = "0";
            auxRecebimentoValorPgto = "0,00";
            auxRecebimentoParcelamento = "0";
        }
        void conector_banco()
        {
            if (File.Exists("c:\\windows\\soberanu.ini"))
            {
                fileSecret = Path.Combine(Directory.GetCurrentDirectory(), "c:\\windows\\soberanu.ini");
            }
            else
            {
                fileSecret = Path.Combine(Directory.GetCurrentDirectory(), "soberanu.ini");
            }
            alwaysVariables.Schema = getValue("banco_smartPDV", "schema", fileSecret);
            alwaysVariables.UserName = getValue("banco_smartPDV", "username", fileSecret);
            alwaysVariables.Senha = getValue("banco_smartPDV", "password", fileSecret);
            alwaysVariables.LocalHost = getValue("banco_smartPDV", "server", fileSecret);
            alwaysVariables.Store = getValue("loja", "store", fileSecret);
        }
        void resetLabel_interface()
        {
            txtNumeroNotaNFDEmitida.Clear();
            txtItensNFDEmitida.Clear();
            txtQuantidadeNFDEmitida.Text = "0,000";
            lblNoClienteConectorCF.Text = "0";
            dgvNotaDConectorCF.Rows.Clear();
            if (dgvNotaDConectorCF.RowCount < 1)
            {
                dgvNotaDConectorCF.Rows.Add();
            }
        }
        void resetLabel()
        {
            /*Nfce*/
            this.lblQttyNfec.Invoke((MethodInvoker)delegate { lblQttyNfec.Text = "0,000"; });
            this.lblPrecoUnitarioNfec.Invoke((MethodInvoker)delegate { lblPrecoUnitarioNfec.Text = "0,00"; });
            this.lblTotalNfec.Invoke((MethodInvoker)delegate { lblTotalNfec.Text = "0,00"; });
            
            /****End*/
            this.lbPrecoCalculadoItensConectorCF.Invoke((MethodInvoker)delegate { lbPrecoCalculadoItensConectorCF.Text = "0,00"; });
            this.lbPrecoUnitarioConectorCF.Invoke((MethodInvoker)delegate { lbPrecoUnitarioConectorCF.Text = "0,00"; });
            
            if (index == -1)
            {
                this.lbQttyConectorCF.Invoke((MethodInvoker)delegate { lbQttyConectorCF.Text = "0,000"; });

            }
            if (fiscal_flag == 0 || fiscal_flag == 32)
            {
                this.txtSubTotalConectorCF.Invoke((MethodInvoker)delegate { txtSubTotalConectorCF.Clear(); });
                this.txtSubTotalConectorCF.Invoke((MethodInvoker)delegate { txtSubTotalConectorCF.Text = "0,00"; });
                this.lblTotalMoneyConectorCF.Invoke((MethodInvoker)delegate { lblTotalMoneyConectorCF.Text = "0,00"; });
            }
            else
            {
                // conector_find_subFull("1");
            }
            objFinanceiro(false);
            this.txtDescricaoItemConectorCF.Invoke((MethodInvoker)delegate { txtDescricaoItemConectorCF.Clear(); });
            
        }
        void conectorPDV_test_grandeTotal()
        {
            ///Verifica o serial
            ///Verifica se o PDV esta em modo administrativo '1' e função de reparo 26
            ///Verifica se o PDV esta em modo MENU PAFECF
            ///Verifica se o PDV esta em modo NFCe
            functionECF.conectorECF_GrandeTotal(alwaysVariables.ModeloEcf, ref fiscal_GT, ref fiscal_MSG, ref fiscal_retorno, alwaysVariables.ECF_Ligada);
            if (File.Exists(folderMFDGrand + "\\temp" + ".txt")) { File.Delete(folderMFDGrand + "\\temp" + ".txt"); }
            if (File.Exists(folderMFDGrand + "\\grandFullPDV" + ".enc"))
            {
                if (call_pdv != 1 && fiscal_GT.Trim() != "" && alwaysVariables.ECF_Ligada != -6)
                {

                    if ((((alwaysVariables.flagHomologacao == "1" && (Convert.ToDouble(fiscal_banco_venda) > (Convert.ToDouble(fiscal_GT)))) || 
                        (Convert.ToDouble(fiscal_banco_venda) > (Convert.ToDouble(fiscal_GT))) && call_pdv == 1)))
                    {

                        msgInfo msg = new msgInfo(1, "Caro Cliente - " + "ERRO FATAL VENDA BRUTA INCONSISTENCIA."); msg.ShowDialog();
                        conector_acao_controleMenu();
                        txtAutorizacaoUsuarioConectorCF.Select();
                    }
                    else
                        if (((Convert.ToDouble(fiscal_banco_crz) > Convert.ToDouble(fiscal_reducao_crz)) && call_pdv == 1) ||
                            (Convert.ToDouble(fiscal_banco_crz) > Convert.ToDouble(fiscal_reducao_crz)))
                        {

                            msgInfo msg = new msgInfo(1, "Caro Cliente - " + "ERRO FATAL CRZ INCONSISTENCIA."); msg.ShowDialog();
                            txtAutorizacaoUsuarioConectorCF.Select();
                            conector_acao_controleMenu();
                        }
                        else if ((!true)/*((Convert.ToDouble(fiscal_banco_cro) > Convert.ToDouble(fiscal_reducao_cro.Trim() == "" ? "0" : fiscal_banco_cro)) && call_pdv == 1) ||
                            (Convert.ToDouble(fiscal_banco_cro) > Convert.ToDouble(fiscal_reducao_cro.Trim() == "" ? "0" : fiscal_banco_cro))*/)
                        {
                            ///b) se tiver ocorrido incremento do CRO, hipótese em que deverá recompor o valor do Totalizador Geral no arquivo auxiliar criptografado a partir do valor correspondente gravado no ECF.
                            /*msgInfo msg = new msgInfo(1, "Caro Cliente - " + "ERRO FATAL CRO INCONSISTENCIA."); msg.ShowDialog();
                            conector_acao_controleMenu();*/
                            arquivo_crz_cro(1);
                            txtAutorizacaoUsuarioConectorCF.Select();
                        }
                        else if (Convert.ToDouble(fiscal_reducao_crz) < Convert.ToDouble(fiscal_banco_crz))
                        {
                            arquivo_crz_cro(1);
                        }
                        else if (Convert.ToDouble(fiscal_reducao_cro.Trim() == "" ? "0" : fiscal_reducao_cro) < Convert.ToDouble(fiscal_banco_cro))
                        {
                            arquivo_crz_cro(1);
                        }
                }
            }
            else if(call_pdv != 1 && call_pdv != 8)
            {
                msgInfo msg = new msgInfo(1, "Caro Cliente - " + "ERRO FATAL ARQUIVO GRANDE TOTAL NÃO ENCONTRADO, INCONSISTENTE."); if (alwaysVariables.flagHomologacao == "1") { msg.ShowDialog(); }
                txtAutorizacaoUsuarioConectorCF.Select();
                conector_acao_controleMenu();
            }
        }
        void conectorPDV_geracao_estoque()
        {
            if (auxConsistencia == 0)
            {
                string[] vetor = new string[4] { "E1", "E2", "E3", "E9" };
                string[,] recarga; //Matriz Bidimencionada
                if (File.Exists(caminho))
                {
                    StreamWriter sw = new StreamWriter(caminho, true, Encoding.ASCII);

                    //################################################################Instrução Banco
                    auxConsistencia = 0;
                    countField = 0;
                    countRows = 0;

                    for (int m = 0; m < vetor.Length; m++)
                    {
                        if (vetor[m] != "#")
                        {
                            try
                            {
                                auxConsistencia = 0;
                                title = banco.abreConexao();
                                banco.startTransaction("conectorPDV_PAFECF_Estoque");
                                banco.addParametro("tipo", vetor[m]);
                                banco.addParametro("store", alwaysVariables.Store);
                                banco.addParametro("ecf", fiscal_numero_serie);
                                banco.addParametro("di", String.Format("{0:yyyyMMdd}", Convert.ToDateTime(DateTime.Now)));
                                banco.procedimentoSet();

                            }
                            catch (Exception erro) { auxConsistencia = 1; }
                            finally
                            {
                                if (auxConsistencia == 0)
                                {
                                    countField = banco.retornaSet().Tables[0].Columns.Count;
                                    countRows = banco.retornaSet().Tables[0].DefaultView.Count;
                                    if (countRows > 0)
                                    {
                                        recarga = new string[countRows, countField];
                                        for (int i = 0; i < countRows; i++)//Linha
                                        {
                                            for (int j = 0; j < countField; j++) //Coluna
                                            {
                                                recarga[i, j] = Convert.ToString(banco.retornaSet().Tables[0].Rows[i][j]);
                                            }
                                            switch (vetor[m])
                                            {
                                                case "E1":
                                                    sw.Write(export.registro_tipo_e1(vetor[m], recarga[i, 0], recarga[i, 1], recarga[i, 2], recarga[i, 3]) + "\r\n");
                                                    break;
                                                case "E2":
                                                    sw.Write(export.registro_tipo_e2(vetor[m], recarga[i, 0], recarga[i, 1], recarga[i, 2], recarga[i, 3], recarga[i, 4], recarga[i, 5]) + "\r\n");
                                                    break;
                                                case "E3":
                                                    sw.Write(export.registro_tipo_e3(vetor[m], recarga[i, 1], recarga[i, 2], recarga[i, 3], recarga[i, 4], recarga[i, 5], recarga[i, 6],recarga[i, 7]) + "\r\n");
                                                    break;
                                                case "E9":
                                                    sw.Write(export.registro_tipo_e9(vetor[m], recarga[i, 0], recarga[i, 1], recarga[i, 2]) + "\r\n");
                                                    break;
                                            }
                                        }
                                    }
                                }
                                banco.fechaConexao(); if (title != "") { this.txtTitleCupomFiscalConectorCF.Invoke((MethodInvoker)delegate { txtTitleCupomFiscalConectorCF.Text = title; }); }
                            }
                        }
                    }
                    sw.Close();
                    if (auxConsistencia == 0)
                    {
                        txtVisorMsgConectorCF.Text = "CONFERÊNCIA ESTOQUE...!";
                        conectorPDV_inc_estoque_geracao(fiscal_numero_serie);
                        conectorPDV_gera_crypt_estoque("E2");
                        conectorPDV_gera_crypt_estoque("E3");
                    }
                    lblVisorEntradaDadosConectorCF.Text = "ENTRADA DE DADOS";
                    msgInfo msg = new msgInfo(1, "Caro Usuário: Arquivo gerado, caminho: " + caminho); msg.ShowDialog();
                    txtVisorMsgConectorCF.Text = "ARQ. GERADO COM SUCESSO...!";
                    txtEntradaDadosConectorCF.CausesValidation = true;
                    txtEntradaDadosConectorCF.Clear();
                    if (alwaysVariables.ModoOperacao == 1)
                    {
                        txtEntradaDadosConectorCF.Select();
                    }
                    else
                    {
                        txtEntradaDadosNF.Select();
                    }
                }
            }
            else
            {
                auxConsistencia = 0;
            }
        }
        void resetVariableFechamento()
        {
            flagBruto = "0.00";
            flagSangria = "0.00";
            flagVale = "0.00";
            flagFundo_Caixa = "0.00";
            flagCancelado = "0.00";
            flagJuros = "0.00";
            flagDoacao = "0.00";
            flagDevolucao = "0.00";
            flagSeq = "0";
            flagCanceladoFechamento = "0.00";
            flagDesconto = "0.00";
            flagBrutoFechamento = "0.00";
            flagLiquido = "0.00";
        }

        void acionaComandoPagamento()
        {
            if (call_finalizadora != "A" && call_finalizadora != "E")
            {
                txtVisorMsgConectorCF.Text = "PAGAMENTO";
            }
            switch (call_finalizadora)
            {
                case "D":
                    conector_finalizadora_dinheiro();
                    break;
                case "H":
                    txtEntradaDadosConectorCF.Clear();
                    conector_finalizadora_cheque();
                    break;
                case "O":
                    txtEntradaDadosConectorCF.Clear();
                    conector_finalizadora_convenio();
                    break;
                case "C": // FINALIZADORA CREDIARIO
                    txtEntradaDadosConectorCF.Clear();
                    conector_finalizadora_crediario();
                    break;
                case "V": //FINALIZADORA VALE
                    conector_finalizadora_vale();
                    break;
                case "R": //FINALIZADORA RECEBIMENTO
                    conector_finalizadora_recebimento();
                    break;
                case "B": //FINALIZADORA BOLETO
                    conector_finalizadora_boleto();
                    break;
                case "U": //FINALIZADORA DUPLICATA
                    conector_finalizadora_duplicata();
                    break;
                case "E": //FINALIZADORA CARTAO CREDITO
                    //conector_finalizadora_cartaoCredito();
                    txtCartaoCreditoConectorCF.Text = vetorTotal[5] == "#" ? "0,00" : vetorTotal[5];
                    this.pnlTotalConectorCF.Size = new System.Drawing.Size(650, 527);
                    txtEntradaDadosConectorCF.Clear();
                    break;
                case "A": //FINALIZADORA CARTAO DEBITO
                    //conector_finalizadora_cartaoDebito();
                    txtCartaoDebitoConectorCF.Text = vetorTotal[6] == "#" ? "0,00" : vetorTotal[6];
                    this.pnlTotalConectorCF.Size = new System.Drawing.Size(650, 527);
                    txtEntradaDadosConectorCF.Clear();
                    break;
            }
        }

        public string conectorPDV_msgCupom()
        {
            msgFinalCupom = "";
                        #region
                        if (alwaysVariables.flagHomologacao == "1") { msgFinalCupom = "MD-5:" + alwaysVariables.MD5_Main + "\n"; } else { msgFinalCupom = "MD-5:" + alwaysVariables.MD5VALIDO.Trim() + "\n"; }
                        #endregion
                        //10
                        string SubTotal = new string('\x20', 14);
                        functionECF.conectorECF_SubTotal(alwaysVariables.ModeloEcf, ref SubTotal, ref fiscal_MSG, ref fiscal_retorno, alwaysVariables.ECF_Ligada);
                        //fiscal_retorno = conectorECF.Bematech_FI_SubTotal(ref SubTotal);

                        if (fiscal_CGC == "")
                        {
                            functionECF.conectorECF_CGC_IE(alwaysVariables.ModeloEcf, ref fiscal_CGC, ref fiscal_IE, ref fiscal_MSG, ref fiscal_retorno, alwaysVariables.ECF_Ligada);
                            //fiscal_retorno = conectorECF.Bematech_FI_CGC_IE(ref fiscal_CGC, ref fiscal_IE);
                            if (alwaysVariables.CNPJ == fiscal_CGC.Replace(".", "").Replace("-", "").Replace("/", "").Replace("\0", "").Trim())
                            {
                                complementoFiscal = fiscal_CGC.Replace("-", "").Replace("/", "").Replace(".", "").Replace("\0", "").Trim() + " " + String.Format("{0:ddMMyyyy}", Convert.ToDateTime(fiscal_data_movimento.Substring(0, 2) + "/" + fiscal_data_movimento.Substring(2, 2) + "/" + String.Format("{0:ddMMyyyy}", DateTime.Now).Substring(4, 2) + fiscal_data_printer.Substring(4, 2))) + " " + Convert.ToDecimal(SubTotal).ToString();
                            }
                        }
                        else
                        {

                            switch (alwaysVariables.UF)
                            {
                                case "MG"://MG.001
                                    complementoFiscal = fiscal_CGC.Replace("-", "").Replace("/", "").Replace(".", "").Replace("\0", "").Trim() + " " + String.Format("{0:ddMMyyyy}", Convert.ToDateTime(fiscal_data_movimento.Substring(0, 2) + "/" + fiscal_data_movimento.Substring(2, 2) + "/" + String.Format("{0:ddMMyyyy}", DateTime.Now).Substring(4, 2) + fiscal_data_printer.Substring(4, 2))) + " " + Convert.ToDecimal(SubTotal).ToString();
                                    break;
                                case "RJ":
                                    //complementoFiscal = fiscal_IE.Replace("\0", "").Trim() + " " + String.Format("{0:ddMMyy}", Convert.ToDateTime(fiscal_data_movimento.Substring(0, 2) + "/" + fiscal_data_movimento.Substring(2, 2) + "/" + String.Format("{0:ddMMyyyy}", DateTime.Now).Substring(4, 2) + fiscal_data_printer.Substring(4, 2))) + " " + fiscal_Cupom_coo.Replace("\0","").Trim() + fiscal_numero_caixa.Replace("\0","").PadLeft(3,'0');
                                    break;
                                case "DF":
                                    complementoFiscal = conectorPDV_PAFECF_tributos(fiscal_Cupom.Replace("\0", "").Trim(), fiscal_store.Replace("\0", "").Trim(), fiscal_numero_caixa.Replace("\0", "").Trim(), "2").Replace(".", ","); //Calculo tributo
                                    break;
                                case "PB":
                                    string test = String.Format("{0:ddMMyyyy}", Convert.ToDateTime(fiscal_data_movimento.Substring(0, 2) + "/" + fiscal_data_movimento.Substring(2, 2) + "/" + String.Format("{0:ddMMyyyy}", DateTime.Now).Substring(4, 2) + fiscal_data_printer.Substring(4, 2)));
                                    complementoFiscal = fiscal_IE.Replace("\0", "").Trim() + " " + test + " " + fiscal_Cupom_coo.Replace("\0", "").Trim() + " " + Convert.ToDecimal(SubTotal).ToString();
                                    break;
                                default:
                                    break;
                            }
                        }
                        if (flagPreVenda != "" && Convert.ToDouble(flagPreVenda) > 0 ||
                            flagDav != "" && Convert.ToDouble(flagDav) > 0)
                        {
                            if (flagFormaFinalizacao == "D")//MG.001
                            {
                                msgFinalCupom += "DAV " + flagDav.PadLeft(10, '0')+ "\n";
                            }
                            else
                            {
                                msgFinalCupom += "PV " + flagPreVenda.PadLeft(10, '0') + "\n";
                            }

                        }
                        else if (NotaNumber != "0" && NotaNumber != "" && NotaNumber != null)
                        {
                            msgFinalCupom = "NF:" + NotaNumber + "\n";
                        }
                        else
                        {
                            try
                            {
                                banco.startTransaction("acao_pdv");
                                banco.addParametro("nivel", "3");
                                banco.addParametro("store", alwaysVariables.Store);
                                banco.addParametro("barras", "0");
                                banco.procedimentoSet();

                            }
                            catch (Exception erro) { msgInfo msg = new msgInfo("Caro Cliente - " + erro.Message); msg.ShowDialog(); auxConsistencia = 1; }
                            finally
                            {
                                if (auxConsistencia == 0)
                                {
                                    countField = banco.retornaSet().Tables[0].Columns.Count;
                                    countRows = banco.retornaSet().Tables[0].DefaultView.Count;
                                    if (countRows > 0)
                                    {
                                        if (msgFinalCupom == "")
                                        {
                                            msgFinalCupom = "\n ******** PROMOÇÃO DO DIA ********\n";
                                        }
                                        else
                                        {
                                            msgFinalCupom = msgFinalCupom + "\n ******** PROMOÇÃO DO DIA ********\n";
                                        }
                                        for (int i = 0; i < countRows; i++)//Linha
                                        {
                                            msgFinalCupom = msgFinalCupom + Convert.ToString(banco.retornaSet().Tables[0].Rows[i][0]) + "\n";
                                        }
                                    }
                                    else
                                    {

                                    }
                                }
                                banco.fechaConexao(); if (title != "") { this.txtTitleCupomFiscalConectorCF.Invoke((MethodInvoker)delegate { txtTitleCupomFiscalConectorCF.Text = title; }); }
                            }
                        }
                        switch (alwaysVariables.UF) /* REQUISITO IX */
                        {
                            case "MG":  /* Minas Legal */
                                msgFinalCupom += "MINAS LEGAL.:" + complementoFiscal + "\n";
                                break;
                            case "DF":
                                StringBuilder concat = new StringBuilder();
                                concat.Append((Char)27);
                                concat.Append((Char)69);
                                concat.Append("NOTA LEGAL: ");
                                concat.Append((Char)27);
                                concat.Append((Char)70);
                                msgFinalCupom += "ESTABELECIMENTO INCLUÍDO NO PROGRAMA DE \n";
                                msgFinalCupom += "CONCESSÃO DE CRÉDITOS - LEI nº 4.159/08. \n";
                                //msgFinalCupom += "#27" + "#69" + "NOTA LEGAL: ICMS = " + "#27" + "#70" +  complementoFiscal + "\n";
                                msgFinalCupom += concat.ToString() + " ICMS = " + complementoFiscal + "  ISS = 0,00 \n";
                                break;
                            case "RJ": /* CUPOM MANIA, CONCORRA A PRÊMIOS */
                                //msgFinalCupom += "CUPOM MANIA, CONCORRA A PRÊMIOS \n";
                                //msgFinalCupom += "ENVIE SMS P/ 6789: " + complementoFiscal + "\n";
                                //msgFinalCupom += complementoFiscal + "\n";
                                break;
                            case "PB":
                                msgFinalCupom += "PARAÍBA LEGAL - RECEITA CIDADÃ \n";
                                msgFinalCupom += "TORPEDO PREMIADO: \n";
                                msgFinalCupom += complementoFiscal + "\n";
                                break;
                            default:
                                break;
                        }
                        msgFinalCupom += "TRIBUTOS APROX: " + conectorPDV_PAFECF_tributos(fiscal_Cupom.Replace("\0", "").Trim(), fiscal_store.Replace("\0", "").Trim(), fiscal_numero_caixa.Replace("\0", "").Trim(), "1", 0).Replace(".", ",") + " Fonte: IBGT" + "\n";
                        msgFinalCupom += "OPERADOR: " + banco_operado + "\n";

                        return msgFinalCupom;
        }
        void conector_valida_pass()
        {
            if (call_pdv == 1 || call_pdv == 0) //Terminal case enter
            {
                validaPass = 0;
                if (pnlAutorizacaoPDVConectorCF.Visible == true)
                {
                    txtAutorizacaoUsuarioConectorCF.CausesValidation = false;
                    txtAutorizacaoUsuarioConectorCF.Select();
                    if (txtAutorizacaoUsuarioConectorCF.Text != "") { conector_valida_user(); }//altera banco_op para input_op
                    ProcessTabKey(true);
                    if ((validaPass == 0) && call_funcao == 1)
                    {
                        if (txtAutorizacaoUsuarioConectorCF.Text != "")
                        {
                            txtAutorizacaoSenhaConectorCF.CausesValidation = false;
                            txtAutorizacaoSenhaConectorCF.Text = "";
                            txtAutorizacaoSenhaConectorCF.Select();
                            txtAutorizacaoSenhaConectorCF.CausesValidation = true;
                        }
                        else
                        {
                            txtAutorizacaoUsuarioConectorCF.Select();
                        }

                        if (pnlAutorizacaoPDVConectorCF.Visible == false)
                        {
                            txtEntradaDadosConectorCF.ReadOnly = false;
                            txtEntradaDadosConectorCF.Select();
                        }
                    }
                    else
                    {
                        if (validaPass == 0)
                        {
                            if (txtVisorMsgConectorCF.Text == "1 - USUÁRIO INVÁLIDO, OU NÃO EXISTE." || txtVisorMsgConectorCF.Text == "PDV - BLOQUEADO" || txtVisorMsgConectorCF.Text == "OPERADOR SEM PERMISSÃO - CAIXA! ")
                            {
                                txtAutorizacaoUsuarioConectorCF.Select();
                            }
                            else
                            {
                                txtAutorizacaoSenhaConectorCF.Select();
                            }

                        }
                        else
                        {
                            if (call_pdv == 0)
                            {
                                txtEntradaDadosConectorCF.CausesValidation = false;
                                txtEntradaDadosConectorCF.ReadOnly = false;
                                txtEntradaDadosConectorCF.Select();
                                txtEntradaDadosConectorCF.CausesValidation = true;
                            }
                            else if (call_pdv == 1)
                            {
                                txtEntradaDadosConectorCF.ReadOnly = false;
                                txtEntradaDadosConectorCF.CausesValidation = true;
                                txtEntradaDadosConectorCF.Select();
                            }
                            else
                            {
                                txtAutorizacaoUsuarioConectorCF.Select();
                            }
                        }
                    }
                    txtAutorizacaoUsuarioConectorCF.CausesValidation = true;
                }
                else if (pnlAutorizacaoPDVConectorCF.Visible == false && call_pdv == 0)
                {
                    //validaFinalizadoras(false, "#");
                    if (txtEntradaDadosConectorCF.Text != "")
                    {
                        txtEntradaDadosConectorCF.CausesValidation = true;
                        txtAutorizacaoUsuarioConectorCF.CausesValidation = false;
                        ProcessTabKey(true);
                        txtAutorizacaoUsuarioConectorCF.CausesValidation = true;
                        txtEntradaDadosConectorCF.ReadOnly = false;
                        txtEntradaDadosConectorCF.Select();
                    }
                }
                else if (pnlAutorizacaoPDVConectorCF.Visible == false && call_pdv == 1)
                {
                    txtEntradaDadosConectorCF.ReadOnly = false;
                    txtEntradaDadosConectorCF.Select();
                }
                //  ProcessTabKey(true);
            }
        }
        void resetVariable()
        {
            if (fiscal_flag == 0 || fiscal_flag == 32)
            {
                last_item_barra = produto_barra;
                last_item_chave = produto_chave;
                last_item_descricao = produto_descricao;
                last_item_tributacao_mq = produto_tributacao_mq;
                last_item_tipo_quantidade = produto_tipo_quantidade;
                last_item_pesavel = produto_pesavel;
                last_item_qtty = produto_qtty;
                last_item_casa_decimal = 2;
                last_item_valor_unitario = produto_valor_unitario;
                last_item_tipo_desconto = produto_tipo_desconto;
                last_item_desconto = produto_desconto;
                last_item_unidade = produto_unidade;
                last_item_price_venda = produto_price_venda;
                last_item_tributacao = produto_tributacao;
            }


            produto_barra = "";
            produto_chave = "";
            produto_descricao = "";
            produto_tributacao_mq = "";
            produto_tipo_quantidade = "";
            produto_pesavel = "0";
            produto_qtty = "";
            produto_casa_decimal = 2;
            produto_valor_unitario = "";
            produto_tipo_desconto = "%";
            produto_desconto = "";
            produto_unidade = "";
            produto_price_venda = "";
            produto_tributacao = "";
            pedido = "0";
            //call_funcao = 0;

            newItemPedido = "";
            newDescricaoItemPedido = "";
            newQuantidadeItemPedido = "0.000";
            newDescontoItemPedido = "";
            newTotalItemPedido = "";
            newTotalComDescontoItemPedido = "";
            newEstoqueDisponivelItemPedido = "";
            newReservaItemPedido = "";
            newEstoqueItemPedido = "";
            newPriceVenda = "";
            newPriceFabrica = "";
            newCustoBruto = "";
            newCustoLiquido = "";
            newCustoMedio = "";
            newCustoTransferencia = "";
            newIdPistCofins = "";
            auxIdUnItemPedido = "";
            auxUnItemPedido = "";
            newBarraItemPedido = "";
            auxMultiplicador = "";
            newIdBarraItemPedido = "";

        }
        private string sumTotal()
        {
            string parcial = "0,00";
            for (int i = 0; i < vetorTotal.Length ; i++)
            {
                if (vetorTotal[i] != "#")
                {
                    parcial = (Convert.ToDecimal(parcial.Replace(",", ".")) + Convert.ToDecimal(String.Format("{0:F2}", Convert.ToDecimal(vetorTotal[i].Replace(",", "."))))).ToString();
                }
            }
            return parcial.Replace(".", ",");
        }
        void fechaMoneyObj(bool flag)
        {
            txtEntradaDadosConectorCF.Enabled = flag;
            txtAutorizacaoSenhaConectorCF.Enabled = flag;
            txtAutorizacaoUsuarioConectorCF.Enabled = flag;
            txtDescricaoItemConectorCF.Enabled = flag;
            if (flag == true)
            {
                txtEntradaDadosConectorCF.CausesValidation = false;
                if (alwaysVariables.ModoOperacao == 1)
                {
                    txtEntradaDadosConectorCF.Select();
                }
                else
                {
                    txtEntradaDadosNF.Select();
                }
                txtEntradaDadosConectorCF.CausesValidation = true;
            }
            else
            {
                txtEntradaDadosConectorCF.CausesValidation = false;
            }
        }

        void conector_finalizadora_cheque()
        {
            if (cheque_cpf_cgc == null)
            {
                string test = "0";
                if (txtEntradaDadosConectorCF.Text.Length == 11)
                {
                    test = cpf_cnpj.calculo_cpf(txtEntradaDadosConectorCF.Text);
                }
                else if (txtEntradaDadosConectorCF.Text.Length >= 11)
                {
                    test = cpf_cnpj.calculo_cgc(txtEntradaDadosConectorCF.Text);
                }
                else
                {
                    test = "0";
                }
                if (txtEntradaDadosConectorCF.Text != "" && txtEntradaDadosConectorCF.Text.Length >= 11 && txtEntradaDadosConectorCF.Text.Length <= 15 && test == "1")
                {
                    cheque_cpf_cgc = txtEntradaDadosConectorCF.Text;
                    int resultado = conectorPDV_find_cliente("1", txtEntradaDadosConectorCF.Text.Replace(",","").Replace(".","").Replace("-","").Replace("/",""));
                    txtEntradaDadosConectorCF.Clear();
                    lblVisorEntradaDadosConectorCF.Text = "BANCO";
                    txtEntradaDadosConectorCF.CausesValidation = false;
                    if (alwaysVariables.ModoOperacao == 1)
                    {
                        txtEntradaDadosConectorCF.Select();
                    }
                    else
                    {
                        txtEntradaDadosNF.Select();
                    }
                }
                else
                {
                    lblVisorEntradaDadosConectorCF.Text = "CPF ou CNPJ DO CLIENTE - INVÁLIDO";
                    txtEntradaDadosConectorCF.Clear();
                    if (alwaysVariables.ModoOperacao == 1)
                    {
                        txtEntradaDadosConectorCF.Select();
                    }
                    else
                    {
                        txtEntradaDadosNF.Select();
                    }
                    cheque_cpf_cgc = null;
                }
            }
            else if (cheque_banco == null)
            {
                if (txtEntradaDadosConectorCF.Text != "")
                {
                    cheque_banco = txtEntradaDadosConectorCF.Text;
                    txtEntradaDadosConectorCF.Clear();
                    lblVisorEntradaDadosConectorCF.Text = "AGENCIA";
                    txtEntradaDadosConectorCF.CausesValidation = false;
                    if (alwaysVariables.ModoOperacao == 1)
                    {
                        txtEntradaDadosConectorCF.Select();
                    }
                    else
                    {
                        txtEntradaDadosNF.Select();
                    }
                }
                else
                {
                    cheque_banco = null;
                }
            }
            else if (cheque_agencia == null)
            {
                if (txtEntradaDadosConectorCF.Text != "")
                {
                    cheque_agencia = txtEntradaDadosConectorCF.Text;
                    txtEntradaDadosConectorCF.Clear();
                    lblVisorEntradaDadosConectorCF.Text = "NUMERO DO CHEQUE";
                    txtEntradaDadosConectorCF.CausesValidation = false;
                    if (alwaysVariables.ModoOperacao == 1)
                    {
                        txtEntradaDadosConectorCF.Select();
                    }
                    else
                    {
                        txtEntradaDadosNF.Select();
                    }
                }
                else
                {
                    cheque_agencia = null;
                }
            }
            else if (cheque_numero == null)
            {
                if (txtEntradaDadosConectorCF.Text != "")
                {
                    cheque_numero = txtEntradaDadosConectorCF.Text;
                    txtEntradaDadosConectorCF.Clear();
                    lblVisorEntradaDadosConectorCF.Text = "INFORME A SERIE";
                    txtEntradaDadosConectorCF.CausesValidation = false;
                    if (alwaysVariables.ModoOperacao == 1)
                    {
                        txtEntradaDadosConectorCF.Select();
                    }
                    else
                    {
                        txtEntradaDadosNF.Select();
                    }
                }
                else
                {
                    cheque_numero = null;
                }
            }
            else if (cheque_serie == null)
            {
                if (txtEntradaDadosConectorCF.Text != "")
                {
                    cheque_serie = txtEntradaDadosConectorCF.Text;
                    txtEntradaDadosConectorCF.Clear();
                    lblVisorEntradaDadosConectorCF.Text = "CONTA CORRENTE";
                    txtEntradaDadosConectorCF.CausesValidation = false;
                    if (alwaysVariables.ModoOperacao == 1)
                    {
                        txtEntradaDadosConectorCF.Select();
                    }
                    else
                    {
                        txtEntradaDadosNF.Select();
                    }
                }
                else
                {
                    cheque_serie = null;
                }
            }
            else if (cheque_conta == null)
            {
                if (txtEntradaDadosConectorCF.Text != "")
                {
                    cheque_conta = txtEntradaDadosConectorCF.Text;
                    txtEntradaDadosConectorCF.Clear();
                    lblVisorEntradaDadosConectorCF.Text = "DEPOSITO [ DATA ] - [ ddMMyyyy ]";
                    txtEntradaDadosConectorCF.CausesValidation = false;
                    if (alwaysVariables.ModoOperacao == 1)
                    {
                        txtEntradaDadosConectorCF.Select();
                    }
                    else
                    {
                        txtEntradaDadosNF.Select();
                    }
                }
                else
                {
                    cheque_conta = null;
                }
            }
            else if (cheque_deposito == null)
            {
                
                if (txtEntradaDadosConectorCF.Text != "" )
                {
                    DateTime di = new DateTime(Convert.ToInt32(txtEntradaDadosConectorCF.Text.Substring(4, 4)), Convert.ToInt32(txtEntradaDadosConectorCF.Text.Substring(2, 2)), Convert.ToInt32(txtEntradaDadosConectorCF.Text.Substring(0, 2)), 0, 0, 0, 0);
                    if ((di >= DateTime.Now))
                    {
                        cheque_deposito = txtEntradaDadosConectorCF.Text;
                        txtEntradaDadosConectorCF.Clear();
                        txtEntradaDadosConectorCF.CausesValidation = false;
                        if (alwaysVariables.ModoOperacao == 1)
                        {
                            txtEntradaDadosConectorCF.Select();
                        }
                        else
                        {
                            txtEntradaDadosNF.Select();
                        }
                        txtEntradaDadosConectorCF.Clear();
                        txtEntradaDadosConectorCF.ReadOnly = true;
                        txtChequeConectorCF.Select();
                        this.pnlTotalConectorCF.Size = new System.Drawing.Size(650, 527);
                        lblVisorEntradaDadosConectorCF.Text = "ENTRADA DE DADOS";
                        txtEntradaDadosConectorCF.CausesValidation = true;
                    }
                    else
                    {
                        lblVisorEntradaDadosConectorCF.Text = "DEPOSITO [ DATA ] - INVÁLIDA";
                        cheque_deposito = null;
                        if (alwaysVariables.ModoOperacao == 1)
                        {
                            txtEntradaDadosConectorCF.Select();
                        }
                        else
                        {
                            txtEntradaDadosNF.Select();
                        }
                    }
                }
                else
                {
                    lblVisorEntradaDadosConectorCF.Text = "DEPOSITO [ DATA ] - INVÁLIDA";
                    cheque_deposito = null;
                    if (alwaysVariables.ModoOperacao == 1)
                    {
                        txtEntradaDadosConectorCF.Select();
                    }
                    else
                    {
                        txtEntradaDadosNF.Select();
                    }
                }
            }
            else if (cheque_serie != null && cheque_agencia != null && cheque_banco != null && cheque_conta != null && cheque_cpf_cgc != null && cheque_deposito != null && cheque_numero != null)
            {
                auxConsistencia = conector_webservice_situacao_cheque(cheque_numero, "", cheque_conta, cheque_banco, cheque_agencia);
                DateTime data = new DateTime(Convert.ToInt32(cheque_deposito.Substring(4, 4)),Convert.ToInt32(cheque_deposito.Substring(2, 2)), Convert.ToInt32(cheque_deposito.Substring(0, 2)));
                if (auxConsistencia == 0 || auxConsistencia == -1)
                {
                    this.pnlTotalConectorCF.Size = new System.Drawing.Size(650, 527);
                    string test = "0,00";
                    test = Convert.ToString(Convert.ToDecimal(test.Replace(",", ".")) + Convert.ToDecimal(txtChequeConectorCF.Text.Replace(",", ".")));

                    if ((Convert.ToDecimal(lblTotalMoneyConectorCF.Text.Replace(",", ".")) >= Convert.ToDecimal(test.Replace(",", "."))) || alwaysVariables.TrocoCard == "s")
                    {
                        if (Convert.ToDecimal(txtChequeConectorCF.Text.Replace(",", ".")) > 0 && txtChequeConectorCF.Text.Replace(",", ".") != "")
                        {
                            vetorTotal[2] = String.Format("{0:F2}", Convert.ToDecimal(txtChequeConectorCF.Text.Replace(",", "."))).Replace(".", ",");
                            txtChequeConectorCF.Text = String.Format("{0:F2}", Convert.ToDecimal(txtChequeConectorCF.Text.Replace(",", "."))).Replace(".", ",");
                            conectorPDV_inc_cheque(cheque_banco, alwaysVariables.Store, auxIdCliente, cheque_conta, cheque_serie, cheque_agencia, "1", data, cheque_numero, txtChequeConectorCF.Text, fiscal_Cupom_coo.Replace("\0", "").Trim(), alwaysVariables.Terminal, banco_operado);
                            finalizadoraTroco = 2;
                        }
                        else
                        {
                            txtChequeConectorCF.Text = "0,00";
                            vetorTotal[2] = "#";
                        }
                        lblRecebidoMoneyConectorCF.Text = sumTotal();
                        if ((Convert.ToDecimal(lblTotalMoneyConectorCF.Text.Replace(",", ".")) - Convert.ToDecimal(lblRecebidoMoneyConectorCF.Text.Replace(",", "."))) < 0)
                        {
                            lblRestanteMoneyConectorCF.Text = "0,00";
                        }
                        else
                        {
                            lblRestanteMoneyConectorCF.Text = (Convert.ToDecimal(lblTotalMoneyConectorCF.Text.Replace(",", ".")) - Convert.ToDecimal(lblRecebidoMoneyConectorCF.Text.Replace(",", "."))).ToString();
                        }
                    }
                    else
                    {
                        txtVisorMsgConectorCF.Text = "Forma de PGTO não aceita troco.";
                        txtChequeConectorCF.Text = "0,00";
                        vetorTotal[2] = "#";
                    }
                    if (Convert.ToDecimal(lblRecebidoMoneyConectorCF.Text.Replace(",", ".")) > Convert.ToDecimal(lblTotalMoneyConectorCF.Text.Replace(",", ".")))
                    {
                        lblMoneyTrocoConectorCF.Text = String.Format("{0:F2}", (Convert.ToDecimal(lblRecebidoMoneyConectorCF.Text.Replace(",", ".")) - Convert.ToDecimal(lblTotalMoneyConectorCF.Text.Replace(",", ".")))).Replace(".", ",");
                        //                    conector_pgto_ecf(vetorTotal, lblTotalMoneyConectorCF.Text, String.Format("{0:F2}", (Convert.ToDecimal(lblRecebidoMoneyConectorCF.Text.Replace(",", ".")) - Convert.ToDecimal(lblMoneyTrocoConectorCF.Text.Replace(",", ".")))), lblMoneyTrocoConectorCF.Text);
                        lblRecebidoMoneyConectorCF.Text = lblTotalMoneyConectorCF.Text;
                    }
                    else
                    {
                        lblMoneyTrocoConectorCF.Text = "0,00";
                    }
                    txtEntradaDadosConectorCF.ReadOnly = true;
                    btnFinalizadoraChequeConectorCF.Select();
                    txtVisorMsgConectorCF.Text = "PAGAMENTO";
                }
                else
                {
                    txtVisorMsgConectorCF.Text = "CHEQUE CADASTRADO NO SISTEMA";
                    conector_reset_cheque();
                    this.pnlTotalConectorCF.Size = new System.Drawing.Size(701, 422);
                    call_finalizadora = "H";
                    lblVisorEntradaDadosConectorCF.Text = "CPF ou CNPJ DO CLIENTE";
                    txtEntradaDadosConectorCF.ReadOnly = false;
                    txtEntradaDadosConectorCF.CausesValidation = false;
                    if (alwaysVariables.ModoOperacao == 1)
                    {
                        txtEntradaDadosConectorCF.Select();
                    }
                    else
                    {
                        txtEntradaDadosNF.Select();
                    }
                    txtEntradaDadosConectorCF.CausesValidation = true;
                }
            }
            else
            {
                conector_reset_cheque();
                this.pnlTotalConectorCF.Size = new System.Drawing.Size(701, 422);
                txtVisorMsgConectorCF.Text = "DADOS INVÁLIDOS - REPITA A OPERAÇÃO";
                lblVisorEntradaDadosConectorCF.Text = "CPF ou CNPJ DO CLIENTE";
                call_finalizadora = "H";
                txtEntradaDadosConectorCF.ReadOnly = false;
                txtEntradaDadosConectorCF.CausesValidation = false;
                if (alwaysVariables.ModoOperacao == 1)
                {
                    txtEntradaDadosConectorCF.Select();
                }
                else
                {
                    txtEntradaDadosNF.Select();
                }
                txtEntradaDadosConectorCF.CausesValidation = true;
            }
        }
        void conector_finalizadora_convenio()
        {
            if (convenio_empresa == null && conector_convenio(txtEntradaDadosConectorCF.Text) > 0)
            {

                if (txtEntradaDadosConectorCF.Text != "")
                {
                    convenio_empresa = txtEntradaDadosConectorCF.Text;
                    txtEntradaDadosConectorCF.Clear();
                    if (input_cliente != null && convenio_cliente == null)
                    {
                    //    convenio_empresa = input_cliente;
                        convenio_find = "1";
                        lblVisorEntradaDadosConectorCF.Text = "CLIENTE JÁ INSERIDO - [ENTER] CONFIRMAR";
                        txtEntradaDadosConectorCF.Text = input_cliente;
                    }
                    else if (convenio_empresa != null)
                    {
                        lblVisorEntradaDadosConectorCF.Text = " [ 0 ] - CODIGO CONVENIADO [ 1 ] - CPF ";
                    }
                    txtEntradaDadosConectorCF.CausesValidation = false;
                    if (alwaysVariables.ModoOperacao == 1)
                    {
                        txtEntradaDadosConectorCF.Select();
                    }
                    else
                    {
                        txtEntradaDadosNF.Select();
                    }
                }
                else
                {
                    convenio_empresa = null;
                }
            }
            else if (convenio_find == null)
            {
                if (txtEntradaDadosConectorCF.Text != "")
                {
                    convenio_find = txtEntradaDadosConectorCF.Text;
                    txtEntradaDadosConectorCF.Clear();
                    if (convenio_find == "0")
                    {
                        lblVisorEntradaDadosConectorCF.Text = "DIGITE CODIGO DO CONVENIADO";
                    }
                    else if (convenio_find == "1")
                    {
                        lblVisorEntradaDadosConectorCF.Text = "DIGITE CPF DO CONVENIADO";
                    }
                    txtEntradaDadosConectorCF.CausesValidation = false;
                    if (alwaysVariables.ModoOperacao == 1)
                    {
                        txtEntradaDadosConectorCF.Select();
                    }
                    else
                    {
                        txtEntradaDadosNF.Select();
                    }
                }
                else
                {
                    lblVisorEntradaDadosConectorCF.Text = " [ 0 ] - CODIGO CONVENIADO [ 1 ] - CPF ";
                    txtEntradaDadosConectorCF.Clear();
                    convenio_find = null;
                }
            }
            else if (convenio_cliente == null && txtEntradaDadosConectorCF.Text != "")
            {
                int resultado = conectorPDV_find_conv(convenio_find, txtEntradaDadosConectorCF.Text, convenio_empresa);
                if (resultado == 1)
                {

                    txtEntradaDadosConectorCF.Clear();
                    txtEntradaDadosConectorCF.CausesValidation = false;
                    if (alwaysVariables.ModoOperacao == 1)
                    {
                        txtEntradaDadosConectorCF.Select();
                    }
                    else
                    {
                        txtEntradaDadosNF.Select();
                    }
                    txtEntradaDadosConectorCF.Clear();
                    txtConvenioConectorCF.Select();
                    if (convenio_nome != null) { txtVisorMsgConectorCF.Text = convenio_nome; };
                    this.pnlTotalConectorCF.Size = new System.Drawing.Size(650, 527);
                    lblVisorEntradaDadosConectorCF.Text = "ENTRADA DE DADOS";
                    txtEntradaDadosConectorCF.CausesValidation = true;
                }
                else
                {
                    convenio_cliente = null;
                }
            }
            else if (convenio_cliente != null && convenio_empresa != null && convenio_status != null)
            {
                string test = "0,00";
                test = Convert.ToString(Convert.ToDecimal(test.Replace(",", ".")) + Convert.ToDecimal(txtConvenioConectorCF.Text.Replace(",",".")));
                if ((Convert.ToDecimal(lblTotalMoneyConectorCF.Text.Replace(",", ".")) >= Convert.ToDecimal(test.Replace(",", "."))) || alwaysVariables.TrocoCard == "s")
                {
                    if (txtConvenioConectorCF.Text.Replace(",", ".").Trim() != "" && Convert.ToDecimal(txtConvenioConectorCF.Text.Replace(",", ".")) > 0)
                    {
                        conectorPDV_inc_convenioMovimento(convenio_cliente,alwaysVariables.Store, convenio_empresa,convenio_vencimento,txtConvenioConectorCF.Text.Replace(",","."),convenio_prazo,fiscal_Cupom_coo.Replace("\0","").Trim(), banco_operado,alwaysVariables.Terminal,"Venda Cupom fiscal.: " + fiscal_Cupom_coo.Replace("\0","").Trim(),pedido);
                        vetorTotal[4] = String.Format("{0:F2}", Convert.ToDecimal(txtConvenioConectorCF.Text.Replace(",", "."))).Replace(".", ",");
                        txtConvenioConectorCF.Text = String.Format("{0:F2}", Convert.ToDecimal(txtConvenioConectorCF.Text.Replace(",", "."))).Replace(".", ",");
                        finalizadoraTroco = 4;
                    }
                    else
                    {
                        txtConvenioConectorCF.Text = "0,00";
                        vetorTotal[4] = "#";
                    }
                    lblRecebidoMoneyConectorCF.Text = sumTotal();
                    if ((Convert.ToDecimal(lblTotalMoneyConectorCF.Text.Replace(",", ".")) - Convert.ToDecimal(lblRecebidoMoneyConectorCF.Text.Replace(",", "."))) < 0)
                    {
                        lblRestanteMoneyConectorCF.Text = "0,00";
                    }
                    else
                    {
                        lblRestanteMoneyConectorCF.Text = (Convert.ToDecimal(lblTotalMoneyConectorCF.Text.Replace(",", ".")) - Convert.ToDecimal(lblRecebidoMoneyConectorCF.Text.Replace(",", "."))).ToString();
                    }
                }
                else
                {
                    txtVisorMsgConectorCF.Text = "Forma de PGTO não aceita troco.";
                    txtConvenioConectorCF.Text = "0,00";
                    vetorTotal[4] = "#";
                }
                if (Convert.ToDecimal(lblRecebidoMoneyConectorCF.Text.Replace(",", ".")) >= Convert.ToDecimal(lblTotalMoneyConectorCF.Text.Replace(",", ".")))
                {
                    lblMoneyTrocoConectorCF.Text = String.Format("{0:F2}", (Convert.ToDecimal(lblRecebidoMoneyConectorCF.Text.Replace(",", ".")) - Convert.ToDecimal(lblTotalMoneyConectorCF.Text.Replace(",", ".")))).Replace(".", ",");
                    //                conector_pgto_ecf(vetorTotal, lblTotalMoneyConectorCF.Text, String.Format("{0:F2}", (Convert.ToDecimal(lblRecebidoMoneyConectorCF.Text.Replace(",", ".")) - Convert.ToDecimal(lblMoneyTrocoConectorCF.Text.Replace(",", ".")))), lblMoneyTrocoConectorCF.Text);
                    lblRecebidoMoneyConectorCF.Text = lblTotalMoneyConectorCF.Text;
                }
                else
                {
                    lblMoneyTrocoConectorCF.Text = "0,00";
                }
                txtEntradaDadosConectorCF.ReadOnly = true;
                lblVisorEntradaDadosConectorCF.Text = "PAGAMENTO";
                btnFinalizadoraConvenioConectorCF.Select();
            }
            else
            {
                //validaFinalizadoras(false, "O");
                //txtConvenioConectorCF.Select();
                conector_reset_convenio();
                lblVisorEntradaDadosConectorCF.Text = "DADO INVALIDO - DIGITE NOVAMENTE";
                this.pnlTotalConectorCF.Size = new System.Drawing.Size(701, 422);
                lblVisorEntradaDadosConectorCF.Text = "INFORME A EMPRESA CONVENIADA";
                call_finalizadora = "O";
                //validaFinalizadoras(true, "O");
                txtEntradaDadosConectorCF.ReadOnly = false;
                txtEntradaDadosConectorCF.CausesValidation = false;
                if (alwaysVariables.ModoOperacao == 1)
                {
                    txtEntradaDadosConectorCF.Select();
                }
                else
                {
                    txtEntradaDadosNF.Select();
                }
                txtEntradaDadosConectorCF.CausesValidation = true;
            }
        }
        void conector_finalizadora_crediario()
        {
            if (pessoa_empresa == null && conector_pessoa(txtEntradaDadosConectorCF.Text) > 0 && input_cliente == null)
            {

                if (txtEntradaDadosConectorCF.Text != "")
                {
                    pessoa_empresa = txtEntradaDadosConectorCF.Text;
                    txtEntradaDadosConectorCF.Clear();
                    lblVisorEntradaDadosConectorCF.Text = " [ 0 ] - CODIGO DO CLIENTE [ 1 ] - CPF/CNPJ ";
                    txtEntradaDadosConectorCF.CausesValidation = false;
                    if (alwaysVariables.ModoOperacao == 1)
                    {
                        txtEntradaDadosConectorCF.Select();
                    }
                    else
                    {
                        txtEntradaDadosNF.Select();
                    }
                }
                else
                {
                    pessoa_empresa = null;
                }
            }
            else if (pessoa_find == null && input_cliente == null)
            {
                if (txtEntradaDadosConectorCF.Text != "")
                {
                    pessoa_find = txtEntradaDadosConectorCF.Text;
                    txtEntradaDadosConectorCF.Clear();
                    if (pessoa_find == "0")
                    {
                        this.lblVisorEntradaDadosConectorCF.Location = new System.Drawing.Point(175, 511);
                        lblVisorEntradaDadosConectorCF.Text = "DIGITE CODIGO DO CLIENTE";
                    }
                    else if (pessoa_find == "1")
                    {
                        this.lblVisorEntradaDadosConectorCF.Location = new System.Drawing.Point(180, 511);
                        lblVisorEntradaDadosConectorCF.Text = "DIGITE CPF DO CLIENTE";
                    }
                    txtEntradaDadosConectorCF.CausesValidation = false;
                    if (alwaysVariables.ModoOperacao == 1)
                    {
                        txtEntradaDadosConectorCF.Select();
                    }
                    else
                    {
                        txtEntradaDadosNF.Select();
                    }
                }
                else
                {
                    lblVisorEntradaDadosConectorCF.Text = " [ 0 ] - CODIGO DO CLIENTE  [ 1 ] - CPF/CNPJ";
                    txtEntradaDadosConectorCF.Clear();
                    pessoa_find = null;
                }
            }
            else if (input_cliente != null && pessoa_empresa == null && pessoa_find == null)
            {
                pessoa_find = "1";
                lblVisorEntradaDadosConectorCF.Text = "CLIENTE JÁ INSERIDO - [ENTER] CONFIRMAR";
                pessoa_empresa = txtEntradaDadosConectorCF.Text;
                txtEntradaDadosConectorCF.Text = input_cliente;
            }
            else if (pessoa_cliente == null && txtEntradaDadosConectorCF.Text != "")
            {
                int resultado = conectorPDV_find_pessoa(pessoa_find, txtEntradaDadosConectorCF.Text);
                if (resultado == 1)
                {
                    /*txtEntradaDadosConectorCF.Clear();
                    txtEntradaDadosConectorCF.CausesValidation = false;*/
                    if (alwaysVariables.ModoOperacao == 1)
                    {
                        txtEntradaDadosConectorCF.Select();
                    }
                    else
                    {
                        txtEntradaDadosNF.Select();
                    }
                    txtEntradaDadosConectorCF.Clear();
                    //txtCrediarioConectorCF.Select();
                    txtVisorMsgConectorCF.Text = pessoa_nome;
                    lblVisorEntradaDadosConectorCF.Text = "CLIENTE CONFIRMADO - INFORME O METODO VALIDO";
                    txtEntradaDadosConectorCF.Clear();
                    reserva_metodo = null;
                    /*this.pnlTotalConectorCF.Size = new System.Drawing.Size(650, 527);
                    lblVisorEntradaDadosConectorCF.Text = "ENTRADA DE DADOS";
                    txtEntradaDadosConectorCF.CausesValidation = true;*/
                }
                else
                {
                    pessoa_cliente = null;
                }
            }
            else if (reserva_metodo == null && txtEntradaDadosConectorCF.Text != "")
            {
                if (conector_verifica_exits_metodo(txtEntradaDadosConectorCF.Text) > 0)
                {
                    txtEntradaDadosConectorCF.Clear();
                    txtEntradaDadosConectorCF.CausesValidation = false;
                    if (alwaysVariables.ModoOperacao == 1)
                    {
                        txtEntradaDadosConectorCF.Select();
                    }
                    else
                    {
                        txtEntradaDadosNF.Select();
                    }
                    txtEntradaDadosConectorCF.Clear();
                    txtCrediarioConectorCF.Select();
                    this.pnlTotalConectorCF.Size = new System.Drawing.Size(650, 527);
                    lblVisorEntradaDadosConectorCF.Text = "ENTRADA DE DADOS";
                    txtEntradaDadosConectorCF.CausesValidation = true;
                }
                else
                {
                    reserva_metodo = null;
                    lblVisorEntradaDadosConectorCF.Text = "METODO INVALIDO - INFORME NOVAMENTE";
                    if (alwaysVariables.ModoOperacao == 1)
                    {
                        txtEntradaDadosConectorCF.Select();
                    }
                    else
                    {
                        txtEntradaDadosNF.Select();
                    }
                    txtEntradaDadosConectorCF.Clear();
                }
            }
            else if (pessoa_cliente != null && pessoa_empresa != null && pessoa_status != null)
            {
                string test = "0,00";
                test = Convert.ToString(Convert.ToDecimal(test.Replace(",", ".")) + Convert.ToDecimal(txtCrediarioConectorCF.Text.Replace(",",".")));
                if ((Convert.ToDecimal(lblTotalMoneyConectorCF.Text.Replace(",", ".")) >= Convert.ToDecimal(test.Replace(",", "."))) || alwaysVariables.TrocoCard == "s")
                {
                    if (Convert.ToDecimal(txtCrediarioConectorCF.Text.Replace(",", ".")) > 0 && txtCrediarioConectorCF.Text != "")
                    {
                        vetorTotal[3] = String.Format("{0:F2}", Convert.ToDecimal(txtCrediarioConectorCF.Text.Replace(",", "."))).Replace(".", ",");
                        txtCrediarioConectorCF.Text = String.Format("{0:F2}", Convert.ToDecimal(txtCrediarioConectorCF.Text.Replace(",", "."))).Replace(".", ",");
                        txtVisorMsgConectorCF.Text = "PAGAMENTO";
                        finalizadoraTroco = 3;
                    }
                    else
                    {
                        txtCrediarioConectorCF.Text = "0,00";
                        vetorTotal[3] = "#";
                    }
                    lblRecebidoMoneyConectorCF.Text = sumTotal();
                    if ((Convert.ToDecimal(lblTotalMoneyConectorCF.Text.Replace(",", ".")) - Convert.ToDecimal(lblRecebidoMoneyConectorCF.Text.Replace(",", "."))) < 0)
                    {
                        lblRestanteMoneyConectorCF.Text = "0,00";
                    }
                    else
                    {
                        lblRestanteMoneyConectorCF.Text = (Convert.ToDecimal(lblTotalMoneyConectorCF.Text.Replace(",", ".")) - Convert.ToDecimal(lblRecebidoMoneyConectorCF.Text.Replace(",", "."))).ToString();
                    }
                }
                else
                {
                    txtVisorMsgConectorCF.Text = "Forma de PGTO não aceita troco.";
                    txtCrediarioConectorCF.Text = "0,00";
                    vetorTotal[3] = "#";
                }
                if (Convert.ToDecimal(lblRecebidoMoneyConectorCF.Text.Replace(",", ".")) >= Convert.ToDecimal(lblTotalMoneyConectorCF.Text.Replace(",", ".")))
                {
                    lblMoneyTrocoConectorCF.Text = String.Format("{0:F2}", (Convert.ToDecimal(lblRecebidoMoneyConectorCF.Text.Replace(",", ".")) - Convert.ToDecimal(lblTotalMoneyConectorCF.Text.Replace(",", ".")))).Replace(".", ",");
                    //                conector_pgto_ecf(vetorTotal, lblTotalMoneyConectorCF.Text, String.Format("{0:F2}", (Convert.ToDecimal(lblRecebidoMoneyConectorCF.Text.Replace(",", ".")) - Convert.ToDecimal(lblMoneyTrocoConectorCF.Text.Replace(",", ".")))), lblMoneyTrocoConectorCF.Text);
                    lblRecebidoMoneyConectorCF.Text = lblTotalMoneyConectorCF.Text;
                }
                else
                {
                    lblMoneyTrocoConectorCF.Text = "0,00";
                }
                txtEntradaDadosConectorCF.ReadOnly = true;
                lblVisorEntradaDadosConectorCF.Text = "PAGAMENTO";
                btnFinalizadoraCrediarioConectorCF.Select();
            }
            else
            {
                //validaFinalizadoras(false, "O");
                //txtConvenioConectorCF.Select();
                conector_reset_pessoa();
                conector_reset_input();
                lblVisorEntradaDadosConectorCF.Text = "DADO INVALIDO - DIGITE NOVAMENTE";
                this.pnlTotalConectorCF.Size = new System.Drawing.Size(701, 422);
                lblVisorEntradaDadosConectorCF.Text = "INFORME O COD. DA LOJA";
                call_finalizadora = "C";
                txtEntradaDadosConectorCF.ReadOnly = false;
                txtEntradaDadosConectorCF.CausesValidation = false;
                if (alwaysVariables.ModoOperacao == 1)
                {
                    txtEntradaDadosConectorCF.Select();
                }
                else
                {
                    txtEntradaDadosNF.Select();
                }
                txtEntradaDadosConectorCF.CausesValidation = true;
            }
            /*
            if (Convert.ToDecimal(txtCrediarioConectorCF.Text) > 0 && txtCrediarioConectorCF.Text != "")
            {
                vetorTotal[3] = String.Format("{0:F2}", Convert.ToDecimal(txtCrediarioConectorCF.Text.Replace(",", "."))).Replace(".", ",");
                txtCrediarioConectorCF.Text = String.Format("{0:F2}", Convert.ToDecimal(txtCrediarioConectorCF.Text.Replace(",", "."))).Replace(".", ",");
            }
            else
            {
                txtCrediarioConectorCF.Text = "0,00";
                vetorTotal[3] = "#";
            }
            lblRecebidoMoneyConectorCF.Text = sumTotal();
            if ((Convert.ToDecimal(lblTotalMoneyConectorCF.Text.Replace(",", ".")) - Convert.ToDecimal(lblRecebidoMoneyConectorCF.Text.Replace(",", "."))) < 0)
            {
                lblRestanteMoneyConectorCF.Text = "0,00";
            }
            else
            {
                lblRestanteMoneyConectorCF.Text = (Convert.ToDecimal(lblTotalMoneyConectorCF.Text.Replace(",", ".")) - Convert.ToDecimal(lblRecebidoMoneyConectorCF.Text.Replace(",", "."))).ToString();
            }
            if (Convert.ToDecimal(lblRecebidoMoneyConectorCF.Text.Replace(",", ".")) >= Convert.ToDecimal(lblTotalMoneyConectorCF.Text.Replace(",", ".")))
            {
                lblMoneyTrocoConectorCF.Text = String.Format("{0:F2}", (Convert.ToDecimal(lblRecebidoMoneyConectorCF.Text.Replace(",", ".")) - Convert.ToDecimal(lblTotalMoneyConectorCF.Text.Replace(",", ".")))).Replace(".", ",");
                //                conector_pgto_ecf(vetorTotal, lblTotalMoneyConectorCF.Text, String.Format("{0:F2}", (Convert.ToDecimal(lblRecebidoMoneyConectorCF.Text.Replace(",", ".")) - Convert.ToDecimal(lblMoneyTrocoConectorCF.Text.Replace(",", ".")))), lblMoneyTrocoConectorCF.Text);
                lblRecebidoMoneyConectorCF.Text = lblTotalMoneyConectorCF.Text;
            }
            else
            {
                lblMoneyTrocoConectorCF.Text = "0,00";
            }
            btnFinalizadoraCrediarioConectorCF.Select();*/
        }
        void conector_finalizadora_vale()
        {
            string test = "0,00";
            test = Convert.ToString(Convert.ToDecimal(test.Replace(",", ".")) + Convert.ToDecimal(txtValeConectorCF.Text.Replace(",", ".")));
            if ((Convert.ToDecimal(lblTotalMoneyConectorCF.Text.Replace(",", ".")) >= Convert.ToDecimal(test.Replace(",", "."))) || alwaysVariables.TrocoCard == "s")
            {
                if (Convert.ToDecimal(txtValeConectorCF.Text.Replace(",", ".")) > 0 && txtValeConectorCF.Text != "")
                {
                    vetorTotal[10] = String.Format("{0:F2}", Convert.ToDecimal(txtValeConectorCF.Text.Replace(",", "."))).Replace(".", ",");
                    txtValeConectorCF.Text = String.Format("{0:F2}", Convert.ToDecimal(txtValeConectorCF.Text.Replace(",", "."))).Replace(".", ",");
                    finalizadoraTroco = 10;
                }
                else
                {
                    txtValeConectorCF.Text = "0,00";
                    vetorTotal[10] = "#";
                }
                lblRecebidoMoneyConectorCF.Text = sumTotal();
                if ((Convert.ToDecimal(lblTotalMoneyConectorCF.Text.Replace(",", ".")) - Convert.ToDecimal(lblRecebidoMoneyConectorCF.Text.Replace(",", "."))) < 0)
                {
                    lblRestanteMoneyConectorCF.Text = "0,00";
                }
                else
                {
                    lblRestanteMoneyConectorCF.Text = (Convert.ToDecimal(lblTotalMoneyConectorCF.Text.Replace(",", ".")) - Convert.ToDecimal(lblRecebidoMoneyConectorCF.Text.Replace(",", "."))).ToString();
                }
            }
            else
            {
                txtVisorMsgConectorCF.Text = "Forma de PGTO não aceita troco.";
                txtValeConectorCF.Text = "0,00";
                vetorTotal[10] = "#";
            }
            if (Convert.ToDecimal(lblRecebidoMoneyConectorCF.Text.Replace(",", ".")) >= Convert.ToDecimal(lblTotalMoneyConectorCF.Text.Replace(",", ".")))
            {
                lblMoneyTrocoConectorCF.Text = String.Format("{0:F2}", (Convert.ToDecimal(lblRecebidoMoneyConectorCF.Text.Replace(",", ".")) - Convert.ToDecimal(lblTotalMoneyConectorCF.Text.Replace(",", ".")))).Replace(".", ",");
                //                conector_pgto_ecf(vetorTotal, lblTotalMoneyConectorCF.Text, String.Format("{0:F2}", (Convert.ToDecimal(lblRecebidoMoneyConectorCF.Text.Replace(",", ".")) - Convert.ToDecimal(lblMoneyTrocoConectorCF.Text.Replace(",", ".")))), lblMoneyTrocoConectorCF.Text);
                lblRecebidoMoneyConectorCF.Text = lblTotalMoneyConectorCF.Text;
            }
            else
            {
                lblMoneyTrocoConectorCF.Text = "0,00";
            }
            btnFinalizadoraValeConectorCF.Select();
        }
        void conector_finalizadora_recebimento()
        {
            if (Convert.ToDecimal(txtRecebimentoConectorCF.Text.Replace(",", ".")) > 0 && txtRecebimentoConectorCF.Text != "")
            {
                vetorTotal[9] = String.Format("{0:F2}", Convert.ToDecimal(txtRecebimentoConectorCF.Text.Replace(",", "."))).Replace(".", ",");
                txtRecebimentoConectorCF.Text = String.Format("{0:F2}", Convert.ToDecimal(txtRecebimentoConectorCF.Text.Replace(",", "."))).Replace(".", ",");
                finalizadoraTroco = 9;
            }
            else
            {
                txtRecebimentoConectorCF.Text = "0,00";
                vetorTotal[9] = "#";
            }
            lblRecebidoMoneyConectorCF.Text = sumTotal();
            if ((Convert.ToDecimal(lblTotalMoneyConectorCF.Text.Replace(",", ".")) - Convert.ToDecimal(lblRecebidoMoneyConectorCF.Text.Replace(",", "."))) < 0)
            {
                lblRestanteMoneyConectorCF.Text = "0,00";
            }
            else
            {
                lblRestanteMoneyConectorCF.Text = (Convert.ToDecimal(lblTotalMoneyConectorCF.Text.Replace(",", ".")) - Convert.ToDecimal(lblRecebidoMoneyConectorCF.Text.Replace(",", "."))).ToString();
            }
            if (Convert.ToDecimal(lblRecebidoMoneyConectorCF.Text.Replace(",", ".")) >= Convert.ToDecimal(lblTotalMoneyConectorCF.Text.Replace(",", ".")))
            {
                lblMoneyTrocoConectorCF.Text = String.Format("{0:F2}", (Convert.ToDecimal(lblRecebidoMoneyConectorCF.Text.Replace(",", ".")) - Convert.ToDecimal(lblTotalMoneyConectorCF.Text.Replace(",", ".")))).Replace(".", ",");
                //                conector_pgto_ecf(vetorTotal, lblTotalMoneyConectorCF.Text, String.Format("{0:F2}", (Convert.ToDecimal(lblRecebidoMoneyConectorCF.Text.Replace(",", ".")) - Convert.ToDecimal(lblMoneyTrocoConectorCF.Text.Replace(",", ".")))), lblMoneyTrocoConectorCF.Text);
                lblRecebidoMoneyConectorCF.Text = lblTotalMoneyConectorCF.Text;
            }
            else
            {
                lblMoneyTrocoConectorCF.Text = "0,00";
            }
            btnFinalizadoraRecebimentoConectorCF.Select();
        }
        void conector_finalizadora_boleto()
        {
            string test = "0,00";
                test = Convert.ToString(Convert.ToDecimal(test.Replace(",", ".")) + Convert.ToDecimal(txtBoletoConectorCF.Text.Replace(",",".") == "" ? "0":txtBoletoConectorCF.Text.Replace(",",".")));
                if ((Convert.ToDecimal(lblTotalMoneyConectorCF.Text.Replace(",", ".")) >= Convert.ToDecimal(test.Replace(",", "."))) || alwaysVariables.TrocoCard == "s")
                {
                    if (Convert.ToDecimal(txtBoletoConectorCF.Text.Replace(",", ".") == "" ? "0" : txtBoletoConectorCF.Text.Replace(",", ".")) > 0 && txtBoletoConectorCF.Text != "")
                    {
                        vetorTotal[7] = String.Format("{0:F2}", Convert.ToDecimal(txtBoletoConectorCF.Text.Replace(",", "."))).Replace(".", ",");
                        txtBoletoConectorCF.Text = String.Format("{0:F2}", Convert.ToDecimal(txtBoletoConectorCF.Text.Replace(",", ".") == "" ? "0" : txtBoletoConectorCF.Text.Replace(",", "."))).Replace(".", ",");
                        finalizadoraTroco = 7;

                    }
                    else
                    {
                        txtBoletoConectorCF.Text = "0,00";
                        vetorTotal[7] = "#";
                    }
                    lblRecebidoMoneyConectorCF.Text = sumTotal();
                    if ((Convert.ToDecimal(lblTotalMoneyConectorCF.Text.Replace(",", ".")) - Convert.ToDecimal(lblRecebidoMoneyConectorCF.Text.Replace(",", "."))) < 0)
                    {
                        lblRestanteMoneyConectorCF.Text = "0,00";
                    }
                    else
                    {
                        lblRestanteMoneyConectorCF.Text = (Convert.ToDecimal(lblTotalMoneyConectorCF.Text.Replace(",", ".")) - Convert.ToDecimal(lblRecebidoMoneyConectorCF.Text.Replace(",", "."))).ToString();
                    }
                }
                else
                {
                    txtVisorMsgConectorCF.Text = "Forma de PGTO não aceita troco.";
                    txtBoletoConectorCF.Text = "0,00";
                    vetorTotal[7] = "#";
                }
            if (Convert.ToDecimal(lblRecebidoMoneyConectorCF.Text.Replace(",", ".")) >= Convert.ToDecimal(lblTotalMoneyConectorCF.Text.Replace(",", ".")))
            {
                lblMoneyTrocoConectorCF.Text = String.Format("{0:F2}", (Convert.ToDecimal(lblRecebidoMoneyConectorCF.Text.Replace(",", ".")) - Convert.ToDecimal(lblTotalMoneyConectorCF.Text.Replace(",", ".")))).Replace(".", ",");
                //                conector_pgto_ecf(vetorTotal, lblTotalMoneyConectorCF.Text, String.Format("{0:F2}", (Convert.ToDecimal(lblRecebidoMoneyConectorCF.Text.Replace(",", ".")) - Convert.ToDecimal(lblMoneyTrocoConectorCF.Text.Replace(",", ".")))), lblMoneyTrocoConectorCF.Text);
                lblRecebidoMoneyConectorCF.Text = lblTotalMoneyConectorCF.Text;
            }
            else
            {
                lblMoneyTrocoConectorCF.Text = "0,00";
            }
            btnFinalizadoraBoletoConectorCF.Select();
        }
        void conector_finalizadora_duplicata()
        {
            string test = "0,00";
                test = Convert.ToString(Convert.ToDecimal(test.Replace(",", ".")) + Convert.ToDecimal(txtDuplicataConectorCF.Text.Replace(",",".")));
                if ((Convert.ToDecimal(lblTotalMoneyConectorCF.Text.Replace(",", ".")) >= Convert.ToDecimal(test.Replace(",", "."))) || alwaysVariables.TrocoCard == "s")
                {
                    if (Convert.ToDecimal(txtDuplicataConectorCF.Text.Replace(",", ".")) > 0 && txtDuplicataConectorCF.Text != "")
                    {
                        vetorTotal[8] = String.Format("{0:F2}", Convert.ToDecimal(txtDuplicataConectorCF.Text.Replace(",", "."))).Replace(".", ",");
                        txtDuplicataConectorCF.Text = String.Format("{0:F2}", Convert.ToDecimal(txtDuplicataConectorCF.Text.Replace(",", "."))).Replace(".", ",");
                        finalizadoraTroco = 8;

                    }
                    else
                    {
                        txtDuplicataConectorCF.Text = "0,00";
                        vetorTotal[8] = "#";
                    }
                    lblRecebidoMoneyConectorCF.Text = sumTotal();
                    if ((Convert.ToDecimal(lblTotalMoneyConectorCF.Text.Replace(",", ".")) - Convert.ToDecimal(lblRecebidoMoneyConectorCF.Text.Replace(",", "."))) < 0)
                    {
                        lblRestanteMoneyConectorCF.Text = "0,00";
                    }
                    else
                    {
                        lblRestanteMoneyConectorCF.Text = (Convert.ToDecimal(lblTotalMoneyConectorCF.Text.Replace(",", ".")) - Convert.ToDecimal(lblRecebidoMoneyConectorCF.Text.Replace(",", "."))).ToString();
                    }
                }
                else
                {
                    txtVisorMsgConectorCF.Text = "Forma de PGTO não aceita troco";
                    txtDuplicataConectorCF.Text = "0,00";
                    vetorTotal[8] = "#";
                }
            if (Convert.ToDecimal(lblRecebidoMoneyConectorCF.Text.Replace(",", ".")) >= Convert.ToDecimal(lblTotalMoneyConectorCF.Text.Replace(",", ".")))
            {
                lblMoneyTrocoConectorCF.Text = String.Format("{0:F2}", (Convert.ToDecimal(lblRecebidoMoneyConectorCF.Text.Replace(",", ".")) - Convert.ToDecimal(lblTotalMoneyConectorCF.Text.Replace(",", ".")))).Replace(".", ",");
                //                conector_pgto_ecf(vetorTotal, lblTotalMoneyConectorCF.Text, String.Format("{0:F2}", (Convert.ToDecimal(lblRecebidoMoneyConectorCF.Text.Replace(",", ".")) - Convert.ToDecimal(lblMoneyTrocoConectorCF.Text.Replace(",", ".")))), lblMoneyTrocoConectorCF.Text);
                lblRecebidoMoneyConectorCF.Text = lblTotalMoneyConectorCF.Text;
            }
            else
            {
                lblMoneyTrocoConectorCF.Text = "0,00";
            }
            btnFinalizadoraDuplicataConectorCF.Select();
        }
        void conector_finalizadora_cartaoCredito(string parcelamento, string parcela)
        {
            Boolean envioTef = false;

            if (txtEntradaDadosConectorCF.Text != "" && Convert.ToDecimal(txtEntradaDadosConectorCF.Text.Replace(",", ".") == "" ? "0" : txtEntradaDadosConectorCF.Text.Replace(",", ".")) > 0 && (Convert.ToDecimal(txtEntradaDadosConectorCF.Text == "" ? "0" : txtEntradaDadosConectorCF.Text.Replace(",", ".")) <= Convert.ToDecimal(lblRestanteMoneyConectorCF.Text.Replace(",", ".") == "" ? "0" : lblRestanteMoneyConectorCF.Text.Replace(",", "."))))
            {
                txtCartaoCreditoConectorCF.Text = String.Format("{0:F2}", Convert.ToDecimal(txtCartaoCreditoConectorCF.Text.Replace(",","."))).Replace(".",",");
                cartao_value = txtCartaoCreditoConectorCF.Text;
                txtEntradaDadosConectorCF.Text = txtCartaoCreditoConectorCF.Text;
                txtEntradaDadosConectorCF.CausesValidation = false;
                if (alwaysVariables.ModoOperacao == 1)
                {
                    txtEntradaDadosConectorCF.Select();
                }
                else
                {
                    txtEntradaDadosNF.Select();
                }
                if (alwaysVariables.UtilizaTef == "0")
                {
                    lblVisorEntradaDadosConectorCF.Text = "....Aguardando Finalização com POS...!";
                }
                else
                {
                    lblVisorEntradaDadosConectorCF.Text = "....COMUNICAÇÃO TEF...!";
                }
                txtEntradaDadosConectorCF.Clear();
                string test = "0,00";
                test = Convert.ToString(Convert.ToDecimal(test.Replace(",", ".")) + Convert.ToDecimal(txtCartaoCreditoConectorCF.Text.Replace(",",".")));
                if (alwaysVariables.UtilizaTef == "1" &&  ((Convert.ToDecimal(lblTotalMoneyConectorCF.Text.Replace(",", ".")) >= Convert.ToDecimal(test.Replace(",", "."))) || alwaysVariables.TrocoCard == "s"))
                {
                    tef = new conectorTEF(fiscal_Cupom_coo, fiscal_store, fiscal_numero_caixa);
                    envioTef = tef.enviaSolicitacao(String.Format("{0:F2}", Convert.ToDecimal(txtCartaoCreditoConectorCF.Text.Replace(",", "."))).Replace(".", ","), fiscal_Cupom, "C", pedido);
                }else if (alwaysVariables.UtilizaTef == "1" &&  (((Convert.ToDecimal(lblTotalMoneyConectorCF.Text.Replace(",", ".")) >= Convert.ToDecimal(test.Replace(",", "."))) || alwaysVariables.TrocoCard == "s") && alwaysVariables.UF == "SC"))
                {
                    if ((Convert.ToDecimal(lblTotalMoneyConectorCF.Text.Replace(",", ".")) - Convert.ToDecimal(txtCartaoCreditoConectorCF.Text.Replace(",", "."))) <= Convert.ToDecimal(alwaysVariables.valueTrocoCard.Replace(",", "."))) //Linha do Troco
                    {
                        tef = new conectorTEF(fiscal_Cupom_coo, fiscal_store, fiscal_numero_caixa);
                        envioTef = tef.enviaSolicitacao(String.Format("{0:F2}", Convert.ToDecimal(txtCartaoCreditoConectorCF.Text.Replace(",", "."))).Replace(".", ","), fiscal_Cupom, "C", pedido);
                        /*if (envioTef == true)
                        {
                            fiscal_retorno = conectorECF.Bematech_FI_FlagsFiscais(ref fiscal_flag);
                            conectorECF.Analisa_iRetorno(fiscal_retorno, ref fiscal_MSG);
                            //envia o CNF
                            tef.ConfirmaTransacao();
                        }*/
                    }
                    else
                    {
                        msg = new msgInfo(1, "TROCO SUPERIOR AO PERMITIDO...!"); msg.ShowDialog();
                    }
                }
                else if (alwaysVariables.UtilizaTef == "0")
                {
                    envioTef = false;
                }
                else
                {
                    txtVisorMsgConectorCF.Text = "OP. CANCELADA! TROCO INVÁLIDO.";
                    envioTef = false;
                }
            }
            //Thread.Sleep(5000);
            if (envioTef == true || alwaysVariables.UtilizaTef == "0")//Entra como POS
            {
                if (Convert.ToDecimal(txtCartaoCreditoConectorCF.Text.Replace(",",".")) > 0 && txtCartaoCreditoConectorCF.Text != "")
                {
                    try
                    {
                        txtCartaoCreditoConectorCF.Text = String.Format("{0:F2}", Convert.ToDecimal(txtCartaoCreditoConectorCF.Text.Replace(",", "."))).Replace(".", ",");
                        cartao_value = txtCartaoCreditoConectorCF.Text;
                        vetorTotal[5] = String.Format("{0:F2}", Convert.ToDecimal(txtCartaoCreditoConectorCF.Text.Replace(",", "."))).Replace(".", ",");
                        vetorTefCredito[tefFields, tefRows1] = cartao_value.Replace(",", ".");
                        tefRows1++;
                        txtCartaoCreditoConectorCF.Text = "0";
                        if (vetorTefCredito != null)
                        {
                            for (int t = 0; t < vetorTefCredito.Length; t++)
                            {
                                if (vetorTefCredito[tefFields, t] != null)
                                {
                                    txtCartaoCreditoConectorCF.Text = String.Format("{0:F2}", (Convert.ToDecimal(txtCartaoCreditoConectorCF.Text.Replace(",", ".")) + Convert.ToDecimal(vetorTefCredito[tefFields, t].Replace(",", ".")))).Replace(".", ",");
                                }
                            }
                        }
                        vetorTotal[5] = String.Format("{0:F2}", Convert.ToDecimal(txtCartaoCreditoConectorCF.Text.Replace(",", "."))).Replace(".", ",");
                        //txtCartaoCreditoConectorCF.Text = String.Format("{0:F2}", Convert.ToDecimal(txtCartaoCreditoConectorCF.Text.Replace(",", "."))).Replace(".", ",");
                        /*-----Renova o total------*/
                    }
                    catch (Exception erro)
                    {
                    }
                    finalizadoraTroco = 5;
                }
                else
                {
                    txtCartaoCreditoConectorCF.Text = "0,00";
                    vetorTotal[5] = "#";
                }
                lblRecebidoMoneyConectorCF.Text = sumTotal();
                if ((Convert.ToDecimal(lblTotalMoneyConectorCF.Text.Replace(",", ".")) - Convert.ToDecimal(lblRecebidoMoneyConectorCF.Text.Replace(",", "."))) < 0)
                {
                    lblRestanteMoneyConectorCF.Text = "0,00";
                }
                else
                {
                    lblRestanteMoneyConectorCF.Text = (Convert.ToDecimal(lblTotalMoneyConectorCF.Text.Replace(",", ".")) - Convert.ToDecimal(lblRecebidoMoneyConectorCF.Text.Replace(",", "."))).ToString();
                }
                if (Convert.ToDecimal(lblRecebidoMoneyConectorCF.Text.Replace(",", ".")) >= Convert.ToDecimal(lblTotalMoneyConectorCF.Text.Replace(",", ".")))
                {
                    lblMoneyTrocoConectorCF.Text = String.Format("{0:F2}", (Convert.ToDecimal(lblRecebidoMoneyConectorCF.Text.Replace(",", ".")) - Convert.ToDecimal(lblTotalMoneyConectorCF.Text.Replace(",", ".")))).Replace(".", ",");
                    //                conector_pgto_ecf(vetorTotal, lblTotalMoneyConectorCF.Text, String.Format("{0:F2}", (Convert.ToDecimal(lblRecebidoMoneyConectorCF.Text.Replace(",", ".")) - Convert.ToDecimal(lblMoneyTrocoConectorCF.Text.Replace(",", ".")))), lblMoneyTrocoConectorCF.Text);
                    lblRecebidoMoneyConectorCF.Text = lblTotalMoneyConectorCF.Text;
                }
                else
                {
                    lblMoneyTrocoConectorCF.Text = "0,00";
                }
                if (alwaysVariables.UtilizaTef == "0")
                {
                    txtVisorMsgConectorCF.Text = "CARTÃO EM MODO MANUAL [ OK ]";
                }
                else
                {
                    txtVisorMsgConectorCF.Text = "TEF TRANSMISSÃO [ OK ]";
                }
                this.pnlTotalConectorCF.Size = new System.Drawing.Size(650, 527);
                btnFinalizadoraCartaoDebitoConectorCF.Select();
            }
            else
            {
                txtVisorMsgConectorCF.Text = "OPERAÇÃO CANCELADA VERIFIQUE O GERENCIADOR";
                this.pnlTotalConectorCF.Size = new System.Drawing.Size(650, 527);
                txtCartaoDebitoConectorCF.Text = "0,00";
                btnFinalizadoraCartaoDebitoConectorCF.Select();
            }
            if (alwaysVariables.UtilizaTef == "0")
            {
                if (cartao_value == null)
                {
                    cartao_value = "0";
                }
                somatorio = Convert.ToDecimal(cartao_value.Replace(",", ".").Trim());
                auxTypeCartao = "2";
                for (int h = 1; h <= Convert.ToInt32(parcelamento); h++)
                {
                    conectorPDV_inc_cartao(fiscal_Cupom.Replace("\0", "").Trim(), parcelamento, h.ToString());
                }
            }
        }
        void conector_finalizadora_cartaoDebito()
        {
            Boolean envioTef = false;
            if (alwaysVariables.UtilizaTef == "0" ||(txtEntradaDadosConectorCF.Text != "" && Convert.ToDecimal(txtEntradaDadosConectorCF.Text.Replace(",",".") == "" ? "0" : txtEntradaDadosConectorCF.Text.Replace(",",".")) > 0 && (Convert.ToDecimal(txtEntradaDadosConectorCF.Text == "" ? "0" : txtEntradaDadosConectorCF.Text.Replace(",",".")) <= Convert.ToDecimal(lblRestanteMoneyConectorCF.Text.Replace(",", ".") == "" ? "0" : lblRestanteMoneyConectorCF.Text.Replace(",",".")))))
            {
                txtCartaoDebitoConectorCF.Text = String.Format("{0:F2}", Convert.ToDecimal(txtCartaoDebitoConectorCF.Text.Replace(",", "."))).Replace(".", ",");
                cartao_value = txtCartaoDebitoConectorCF.Text;
                txtEntradaDadosConectorCF.Text = txtCartaoDebitoConectorCF.Text;
                txtEntradaDadosConectorCF.CausesValidation = false;
                if (alwaysVariables.ModoOperacao == 1)
                {
                    txtEntradaDadosConectorCF.Select();
                }
                else
                {
                    txtEntradaDadosNF.Select();
                }
                if (alwaysVariables.UtilizaTef == "0")
                {
                    lblVisorEntradaDadosConectorCF.Text = "....Aguardando Finalização com POS...!";
                }
                else
                {
                    lblVisorEntradaDadosConectorCF.Text = "....COMUNICAÇÃO TEF...!";
                }
                txtEntradaDadosConectorCF.Clear();
                string test = sumTotal();
                test = Convert.ToString(Convert.ToDecimal(test.Replace(",", ".")) + Convert.ToDecimal(txtCartaoDebitoConectorCF.Text.Replace(",",".")));

                if (alwaysVariables.UtilizaTef == "1" && ((Convert.ToDecimal(lblTotalMoneyConectorCF.Text.Replace(",", ".")) >= Convert.ToDecimal(test.Replace(",", ".")))))
                {
                    tef = new conectorTEF(fiscal_Cupom_coo, fiscal_store, fiscal_numero_caixa);
                    envioTef = tef.enviaSolicitacao(String.Format("{0:F2}", Convert.ToDecimal(txtCartaoDebitoConectorCF.Text.Replace(",", "."))).Replace(".", ","), fiscal_Cupom.Replace("\0", "").Trim(), "D", pedido);
                }else if (alwaysVariables.UtilizaTef == "0" && (((Convert.ToDecimal(lblTotalMoneyConectorCF.Text.Replace(",", ".")) >= Convert.ToDecimal(test.Replace(",", "."))) || alwaysVariables.TrocoCard == "s") && alwaysVariables.UF == "SC"))
                {
                    if ((Convert.ToDecimal(lblTotalMoneyConectorCF.Text.Replace(",", ".")) - Convert.ToDecimal(txtCartaoDebitoConectorCF.Text.Replace(",", "."))) <= Convert.ToDecimal(alwaysVariables.valueTrocoCard.Replace(",", "."))) //Linha do Troco
                    {
                        tef = new conectorTEF(fiscal_Cupom_coo, fiscal_store, fiscal_numero_caixa);
                        envioTef = tef.enviaSolicitacao(String.Format("{0:F2}", Convert.ToDecimal(txtCartaoDebitoConectorCF.Text.Replace(",", "."))).Replace(".", ","), fiscal_Cupom.Replace("\0", "").Trim(), "D", pedido);
                        /* if (envioTef == true)
                         {
                             fiscal_retorno = conectorECF.Bematech_FI_FlagsFiscais(ref fiscal_flag);
                             conectorECF.Analisa_iRetorno(fiscal_retorno, ref fiscal_MSG);
                             //envia o CNF
                             tef.ConfirmaTransacao(fiscal_retorno);
                         }*/
                    }
                    else
                    {
                        msg = new msgInfo(1,"TROCO SUPERIOR AO PERMITIDO...!"); msg.ShowDialog();
                    }
                }
                else if (alwaysVariables.UtilizaTef == "0")
                {
                    envioTef = false;
                }
                else
                {
                    txtVisorMsgConectorCF.Text = "OP. CANCELADA! TROCO INVÁLIDO.";
                    envioTef = false;
                }

            }
            if (alwaysVariables.UtilizaTef == "0" || (envioTef == true))
            {
                if (alwaysVariables.UtilizaTef == "0" || (Convert.ToDecimal(txtCartaoDebitoConectorCF.Text.Replace(",",".")) > 0 && txtCartaoDebitoConectorCF.Text != ""))
                {
                    try
                    {
                        vetorTotal[6] = String.Format("{0:F2}", Convert.ToDecimal(txtCartaoDebitoConectorCF.Text.Replace(",", "."))).Replace(".", ",");
                        vetorTefDebito[tefFields, tefRows] = cartao_value;
                        tefRows++;
                        txtCartaoDebitoConectorCF.Text = "0";
                        for (int t = 0; t < vetorTefDebito.Length; t++)
                        {
                            if (vetorTefDebito[tefFields, t] != null)
                            {
                                txtCartaoDebitoConectorCF.Text = String.Format("{0:F2}", (Convert.ToDecimal(txtCartaoDebitoConectorCF.Text.Replace(",", ".")) + Convert.ToDecimal(vetorTefDebito[tefFields, t].Replace(",", ".")))).Replace(".", ",");
                            }
                        }
                        vetorTotal[6] = String.Format("{0:F2}", Convert.ToDecimal(txtCartaoDebitoConectorCF.Text.Replace(",", "."))).Replace(".", ",");
                        //txtCartaoDebitoConectorCF.Text = String.Format("{0:F2}", Convert.ToDecimal(txtCartaoDebitoConectorCF.Text.Replace(",", "."))).Replace(".", ",");
                        /*-----Renova o total------*/
                    }
                    catch (Exception)
                    {
                    }
                    finalizadoraTroco = 6;
                }
                else
                {
                    txtCartaoDebitoConectorCF.Text = "0,00";
                    vetorTotal[6] = "#";
                }
                lblRecebidoMoneyConectorCF.Text = sumTotal();
                if ((Convert.ToDecimal(lblTotalMoneyConectorCF.Text.Replace(",", ".")) - Convert.ToDecimal(lblRecebidoMoneyConectorCF.Text.Replace(",", "."))) < 0)
                {
                    lblRestanteMoneyConectorCF.Text = "0,00";
                }
                else
                {
                    lblRestanteMoneyConectorCF.Text = (Convert.ToDecimal(lblTotalMoneyConectorCF.Text.Replace(",", ".")) - Convert.ToDecimal(lblRecebidoMoneyConectorCF.Text.Replace(",", "."))).ToString();
                }
                if (Convert.ToDecimal(lblRecebidoMoneyConectorCF.Text.Replace(",", ".")) >= Convert.ToDecimal(lblTotalMoneyConectorCF.Text.Replace(",", ".")))
                {
                    lblMoneyTrocoConectorCF.Text = String.Format("{0:F2}", (Convert.ToDecimal(lblRecebidoMoneyConectorCF.Text.Replace(",", ".")) - Convert.ToDecimal(lblTotalMoneyConectorCF.Text.Replace(",", ".")))).Replace(".", ",");
                    //                conector_pgto_ecf(vetorTotal, lblTotalMoneyConectorCF.Text, String.Format("{0:F2}", (Convert.ToDecimal(lblRecebidoMoneyConectorCF.Text.Replace(",", ".")) - Convert.ToDecimal(lblMoneyTrocoConectorCF.Text.Replace(",", ".")))), lblMoneyTrocoConectorCF.Text);
                    lblRecebidoMoneyConectorCF.Text = lblTotalMoneyConectorCF.Text;
                }
                else
                {
                    lblMoneyTrocoConectorCF.Text = "0,00";
                }
                if (alwaysVariables.UtilizaTef == "0")
                {
                    txtVisorMsgConectorCF.Text = "CARTÃO EM MODO MANUAL [ OK ]";
                }
                else
                {
                    txtVisorMsgConectorCF.Text = "TEF TRANSMISSÃO [ OK ]";
                }
                this.pnlTotalConectorCF.Size = new System.Drawing.Size(650, 527);
                btnFinalizadoraCartaoDebitoConectorCF.Select();
            }
            else
            {
                txtVisorMsgConectorCF.Text = "OPERAÇÃO CANCELADA VERIFIQUE O GERENCIADOR";
                this.pnlTotalConectorCF.Size = new System.Drawing.Size(650, 527);
                txtCartaoDebitoConectorCF.Text ="0,00";
                btnFinalizadoraCartaoDebitoConectorCF.Select();
            }
            if (alwaysVariables.UtilizaTef == "0")
            {
                somatorio = Convert.ToDecimal(cartao_value.Replace(",", ".").Trim());
                auxTypeCartao = "1";
                conectorPDV_inc_cartao(fiscal_Cupom.Replace("\0", "").Trim(),"1","1");
            }
        }
        void conector_finalizadora_dinheiro()
        {
            if (Convert.ToDecimal(txtDinheiroConectorCF.Text == "" ? "0" : txtDinheiroConectorCF.Text.Replace(",", ".")) > 0 && txtDinheiroConectorCF.Text != "")
            {
                vetorTotal[1] = String.Format("{0:F2}", Convert.ToDecimal(txtDinheiroConectorCF.Text.Replace(",", "."))).Replace(".", ",");
                txtDinheiroConectorCF.Text = String.Format("{0:F2}", Convert.ToDecimal(txtDinheiroConectorCF.Text.Replace(",", "."))).Replace(".", ",");
                finalizadoraTroco = 1;
            }
            else
            {
                txtDinheiroConectorCF.Text = "0,00";
                vetorTotal[1] = "#";
            }

            lblRecebidoMoneyConectorCF.Text = sumTotal();
            if ((Convert.ToDecimal(lblTotalMoneyConectorCF.Text.Replace(",", ".")) - Convert.ToDecimal(lblRecebidoMoneyConectorCF.Text.Replace(",", "."))) < 0)
            {
                lblRestanteMoneyConectorCF.Text = "0,00";
            }
            else
            {
                lblRestanteMoneyConectorCF.Text = (Convert.ToDecimal(lblTotalMoneyConectorCF.Text.Replace(",", ".")) - Convert.ToDecimal(lblRecebidoMoneyConectorCF.Text.Replace(",", "."))).ToString();
            }

            if (Convert.ToDecimal(lblRecebidoMoneyConectorCF.Text.Replace(",", ".")) >= Convert.ToDecimal(lblTotalMoneyConectorCF.Text.Replace(",", ".")))
            {
                lblMoneyTrocoConectorCF.Text = String.Format("{0:F2}", (Convert.ToDecimal(lblRecebidoMoneyConectorCF.Text.Replace(",", ".")) - Convert.ToDecimal(lblTotalMoneyConectorCF.Text.Replace(",", ".")))).Replace(".", ",");
                //                conector_pgto_ecf(vetorTotal, lblTotalMoneyConectorCF.Text, String.Format("{0:F2}", (Convert.ToDecimal(lblRecebidoMoneyConectorCF.Text.Replace(",", ".")) - Convert.ToDecimal(lblMoneyTrocoConectorCF.Text.Replace(",", ".")))), lblMoneyTrocoConectorCF.Text);
                lblRecebidoMoneyConectorCF.Text = lblTotalMoneyConectorCF.Text;
            }
            else
            {
                lblMoneyTrocoConectorCF.Text = "0,00";
            }
            btnFinalizadoraDinheiroConectorCF.Select();
        }
        private string conector_finalizadora(int id)
        {
            string test = "Dinheiro";
            switch (id)
            {
                case 1:
                    test = "Dinheiro";
                    break;
                case 2:
                    test = "Cheque";
                    break;
                case 3:
                    test = "Crediario";
                    break;
                case 4:
                    test = "Convenio";
                    break;
                case 5:
                    test = "Cartao Credito";
                    break;
                case 6:
                    test = "Cartao Debito";
                    break;
                case 7:
                    test = "Boleto";
                    break;
                case 8:
                    test = "Duplicata";
                    break;
                case 9:
                    test = "Recebimento";
                    break;
                case 10:
                    test = "Vale";
                    break;
                default:
                    test = "Dinheiro";
                    break;
            }
            return test;

        }

        void conector_pgto_NFCe(string[] pgto, string totalCalculado, string totalRecebido, string totalTroco)
        {
            string totalFinalizadoEcf = "0.00";
            typeDescAcre = 0;
            if ((fiscal_retorno == 1 && functionECF.conectorECF_Analisa_RetornoImpressora(alwaysVariables.ModeloEcf, ref ACK, ref ST1, ref ST2, ref ST3, ref fiscal_MSG)) || alwaysVariables.ModoOperacao == 0)
            {
                countFinalizadora = 0;
                int countPgto = 0;
                listaFormasPagamento.Add(FormasPagamento);
                for (int i = 0; i < pgto.Length; i++)
                {
                    if (pgto[i] != "#")
                    {
                        countFinalizadora++;

                        if ((fiscal_retorno == 1 && functionECF.conectorECF_Analisa_RetornoImpressora(alwaysVariables.ModeloEcf, ref ACK, ref ST1, ref ST2, ref ST3, ref fiscal_MSG)) || alwaysVariables.ModoOperacao == 0)
                        {
                            totalFinalizadoEcf = (Convert.ToDecimal(totalFinalizadoEcf) + Convert.ToDecimal(pgto[i].Replace(",", "."))).ToString();
                                conectorPDV_inc_nfPgto(auxChaveNota, countFinalizadora.ToString(), i.ToString(), lblRecebidoMoneyConectorCF.Text.Replace(",", "."), acresDesc, "0", "0", "0", alwaysVariables.card_cnpj, alwaysVariables.card_band, alwaysVariables.card_aut, lblOperadorNfce.Text, null, totalTroco, countPgto);
                        }
                        else
                        {
                            txtVisorMsgConectorCF.Text = functionECF.conectorECF_Erros(alwaysVariables.ModeloEcf);
                        }

                        if (Convert.ToDecimal(lblRecebidoMoneyConectorCF.Text.Replace(",", ".")) == (Convert.ToDecimal(totalFinalizadoEcf.Replace(",", ".")) - Convert.ToDecimal(totalTroco.Replace(",", "."))))
                        {
                            fiscal_retorno = 1;
                        }
                        else
                            fiscal_retorno = 0;
                    }
                }

            }

            #region
            ataque = 0;
            for (int i = pgto.Length; i > 0; i--)
            //for (int i = 0; i < pgto.Length; i++)
            {
                switch (i)
                {
                    case 3:
                        if (alwaysVariables.EmitiVinculo == "1" && alwaysVariables.VinculoCrediario == "1" && pgto[i] != "#")
                        {
                            if (ataque == 0)
                            {
                                functionECF.conectorECF_AbreComprovanteNaoFiscalVinculado(alwaysVariables.ModeloEcf, "Crediario", "", "", ref fiscal_MSG, ref fiscal_retorno,alwaysVariables.ECF_Ligada);
                                //fiscal_retorno = conectorECF.Bematech_FI_AbreComprovanteNaoFiscalVinculado("Crediario", "", "");
                            }
                            else
                            {
                                functionECF.conectorECF_AbreComprovanteNaoFiscalVinculado(alwaysVariables.ModeloEcf, "Crediario", pgto[i], fiscal_Cupom, ref fiscal_MSG, ref fiscal_retorno, alwaysVariables.ECF_Ligada);
                                //fiscal_retorno = conectorECF.Bematech_FI_AbreComprovanteNaoFiscalVinculado("Crediario", pgto[i], fiscal_Cupom);
                            }
                            ataque = 1;
                            try
                            {
                                functionECF.conectorECF_UsaComprovanteNaoFiscalVinculado(alwaysVariables.ModeloEcf, "CABEÇALHO DO CONTRATO", ref fiscal_MSG, ref fiscal_retorno, alwaysVariables.ECF_Ligada);
                                functionECF.conectorECF_UsaComprovanteNaoFiscalVinculado(alwaysVariables.ModeloEcf, "================================================", ref fiscal_MSG, ref fiscal_retorno, alwaysVariables.ECF_Ligada);
                                functionECF.conectorECF_UsaComprovanteNaoFiscalVinculado(alwaysVariables.ModeloEcf, "CONTRATO............:", ref fiscal_MSG, ref fiscal_retorno, alwaysVariables.ECF_Ligada);
                                functionECF.conectorECF_UsaComprovanteNaoFiscalVinculado(alwaysVariables.ModeloEcf, "CODIGO..............: " + input_cliente /*input_cliente*/, ref fiscal_MSG, ref fiscal_retorno, alwaysVariables.ECF_Ligada);
                                functionECF.conectorECF_UsaComprovanteNaoFiscalVinculado(alwaysVariables.ModeloEcf, "NOME/RAZAO..........: " + pessoa_nome, ref fiscal_MSG, ref fiscal_retorno, alwaysVariables.ECF_Ligada);
                                functionECF.conectorECF_UsaComprovanteNaoFiscalVinculado(alwaysVariables.ModeloEcf, "CPF/CNPJ............: " + pessoa_cliente, ref fiscal_MSG, ref fiscal_retorno, alwaysVariables.ECF_Ligada);
                                functionECF.conectorECF_UsaComprovanteNaoFiscalVinculado(alwaysVariables.ModeloEcf, "METODO DE PGTO......: " + (reserva_metodo == null ? "0" : reserva_metodo), ref fiscal_MSG, ref fiscal_retorno, alwaysVariables.ECF_Ligada);
                                functionECF.conectorECF_UsaComprovanteNaoFiscalVinculado(alwaysVariables.ModeloEcf, "DESCRIÇÃO METODO....: " + (reserva_desc_metodo == null ? "DESCONHECIDO" : reserva_desc_metodo), ref fiscal_MSG, ref fiscal_retorno, alwaysVariables.ECF_Ligada);
                                functionECF.conectorECF_UsaComprovanteNaoFiscalVinculado(alwaysVariables.ModeloEcf, "FINALIZADORA........: " + i.ToString() + " - CREDIARIO", ref fiscal_MSG, ref fiscal_retorno, alwaysVariables.ECF_Ligada);
                                functionECF.conectorECF_UsaComprovanteNaoFiscalVinculado(alwaysVariables.ModeloEcf, "DADOS DO CUPOM FISCAL", ref fiscal_MSG, ref fiscal_retorno, alwaysVariables.ECF_Ligada);
                                functionECF.conectorECF_UsaComprovanteNaoFiscalVinculado(alwaysVariables.ModeloEcf, "================================================", ref fiscal_MSG, ref fiscal_retorno, alwaysVariables.ECF_Ligada);

                                /*fiscal_retorno = conectorECF.Bematech_FI_UsaComprovanteNaoFiscalVinculado("CABEÇALHO DO CONTRATO");
                                fiscal_retorno = conectorECF.Bematech_FI_UsaComprovanteNaoFiscalVinculado("================================================");
                                fiscal_retorno = conectorECF.Bematech_FI_UsaComprovanteNaoFiscalVinculado("CONTRATO............:");
                                fiscal_retorno = conectorECF.Bematech_FI_UsaComprovanteNaoFiscalVinculado("CODIGO..............: " + input_cliente);//input_cliente
                                fiscal_retorno = conectorECF.Bematech_FI_UsaComprovanteNaoFiscalVinculado("NOME/RAZAO..........: " + pessoa_nome);
                                fiscal_retorno = conectorECF.Bematech_FI_UsaComprovanteNaoFiscalVinculado("CPF/CNPJ............: " + pessoa_cliente);
                                fiscal_retorno = conectorECF.Bematech_FI_UsaComprovanteNaoFiscalVinculado("METODO DE PGTO......: " + (reserva_metodo == null ? "0" : reserva_metodo));
                                fiscal_retorno = conectorECF.Bematech_FI_UsaComprovanteNaoFiscalVinculado("DESCRIÇÃO METODO....: " + (reserva_desc_metodo == null ? "DESCONHECIDO" : reserva_desc_metodo));
                                fiscal_retorno = conectorECF.Bematech_FI_UsaComprovanteNaoFiscalVinculado("FINALIZADORA........: " + i.ToString() + " - CREDIARIO");
                                fiscal_retorno = conectorECF.Bematech_FI_UsaComprovanteNaoFiscalVinculado("DADOS DO CUPOM FISCAL");
                                fiscal_retorno = conectorECF.Bematech_FI_UsaComprovanteNaoFiscalVinculado("================================================");*/

                                if (fiscal_data_printer.Trim() == "")
                                {
                                    functionECF.conectorECF_DataHoraReducao(alwaysVariables.ModeloEcf, ref fiscal_data_printer, ref fiscal_hora_printer, ref fiscal_MSG, ref fiscal_retorno, alwaysVariables.ECF_Ligada);
                                }
                                //fiscal_retorno = conectorECF.Bematech_FI_DataHoraImpressora(ref fiscal_data_printer, ref fiscal_hora_printer);

                                functionECF.conectorECF_UsaComprovanteNaoFiscalVinculado(alwaysVariables.ModeloEcf, "EMISSÃO.............: " + String.Format("{0:yyyyMMdd}", Convert.ToDateTime(fiscal_data_printer.Substring(0, 2) + "/" + fiscal_data_printer.Substring(2, 2) + "/" + String.Format("{0:ddMMyyyy}", DateTime.Now).Substring(4, 2) + fiscal_data_printer.Substring(4, 2))) + " / " + fiscal_hora_printer, ref fiscal_MSG, ref fiscal_retorno, alwaysVariables.ECF_Ligada);
                                functionECF.conectorECF_UsaComprovanteNaoFiscalVinculado(alwaysVariables.ModeloEcf, "CUPOM FISCAL........: " + fiscal_Cupom, ref fiscal_MSG, ref fiscal_retorno, alwaysVariables.ECF_Ligada);
                                functionECF.conectorECF_UsaComprovanteNaoFiscalVinculado(alwaysVariables.ModeloEcf, "PARCELAMENTO", ref fiscal_MSG, ref fiscal_retorno, alwaysVariables.ECF_Ligada);
                                functionECF.conectorECF_UsaComprovanteNaoFiscalVinculado(alwaysVariables.ModeloEcf, "================================================", ref fiscal_MSG, ref fiscal_retorno, alwaysVariables.ECF_Ligada);
                                functionECF.conectorECF_UsaComprovanteNaoFiscalVinculado(alwaysVariables.ModeloEcf, "PARCELAMENTO........: " + (reserva_parcelas == null ? "1" : reserva_parcelas), ref fiscal_MSG, ref fiscal_retorno, alwaysVariables.ECF_Ligada);
                                functionECF.conectorECF_UsaComprovanteNaoFiscalVinculado(alwaysVariables.ModeloEcf, "COBRANÇA", ref fiscal_MSG, ref fiscal_retorno, alwaysVariables.ECF_Ligada);
                                functionECF.conectorECF_UsaComprovanteNaoFiscalVinculado(alwaysVariables.ModeloEcf, "================================================", ref fiscal_MSG, ref fiscal_retorno, alwaysVariables.ECF_Ligada);
                                functionECF.conectorECF_UsaComprovanteNaoFiscalVinculado(alwaysVariables.ModeloEcf, "DOCUMENTO DE COB....: " + "0", ref fiscal_MSG, ref fiscal_retorno, alwaysVariables.ECF_Ligada);
                                functionECF.conectorECF_UsaComprovanteNaoFiscalVinculado(alwaysVariables.ModeloEcf, "\n", ref fiscal_MSG, ref fiscal_retorno, alwaysVariables.ECF_Ligada);
                                functionECF.conectorECF_UsaComprovanteNaoFiscalVinculado(alwaysVariables.ModeloEcf, "TOTALIZADORES", ref fiscal_MSG, ref fiscal_retorno, alwaysVariables.ECF_Ligada);
                                functionECF.conectorECF_UsaComprovanteNaoFiscalVinculado(alwaysVariables.ModeloEcf, "================================================", ref fiscal_MSG, ref fiscal_retorno, alwaysVariables.ECF_Ligada);
                                functionECF.conectorECF_UsaComprovanteNaoFiscalVinculado(alwaysVariables.ModeloEcf, "VALOR LIQUIDO.......: " + pgto[i], ref fiscal_MSG, ref fiscal_retorno, alwaysVariables.ECF_Ligada);
                                functionECF.conectorECF_UsaComprovanteNaoFiscalVinculado(alwaysVariables.ModeloEcf, "\n\n", ref fiscal_MSG, ref fiscal_retorno, alwaysVariables.ECF_Ligada);
                                functionECF.conectorECF_UsaComprovanteNaoFiscalVinculado(alwaysVariables.ModeloEcf, "Reconheço a exatidão na importância acima", ref fiscal_MSG, ref fiscal_retorno, alwaysVariables.ECF_Ligada);
                                functionECF.conectorECF_UsaComprovanteNaoFiscalVinculado(alwaysVariables.ModeloEcf, "informada e pagarei `a, conforme os vencimentos", ref fiscal_MSG, ref fiscal_retorno, alwaysVariables.ECF_Ligada);
                                functionECF.conectorECF_UsaComprovanteNaoFiscalVinculado(alwaysVariables.ModeloEcf, "descritos no documento de cobrança desse comprovante.", ref fiscal_MSG, ref fiscal_retorno, alwaysVariables.ECF_Ligada);
                                functionECF.conectorECF_UsaComprovanteNaoFiscalVinculado(alwaysVariables.ModeloEcf, "\n\n", ref fiscal_MSG, ref fiscal_retorno, alwaysVariables.ECF_Ligada);
                                functionECF.conectorECF_UsaComprovanteNaoFiscalVinculado(alwaysVariables.ModeloEcf, "________________________________________________", ref fiscal_MSG, ref fiscal_retorno, alwaysVariables.ECF_Ligada);
                                functionECF.conectorECF_UsaComprovanteNaoFiscalVinculado(alwaysVariables.ModeloEcf, "                  Assinatura do Cliente          ", ref fiscal_MSG, ref fiscal_retorno, alwaysVariables.ECF_Ligada);
                                /*
                                fiscal_retorno = conectorECF. Bematech_FI_UsaComprovanteNaoFiscalVinculado("EMISSÃO.............: " + String.Format("{0:yyyyMMdd}", Convert.ToDateTime(fiscal_data_printer.Substring(0, 2) + "/" + fiscal_data_printer.Substring(2, 2) + "/" + String.Format("{0:ddMMyyyy}", DateTime.Now).Substring(4, 2) + fiscal_data_printer.Substring(4, 2))) + " / " + fiscal_hora_printer);
                                fiscal_retorno = conectorECF.Bematech_FI_UsaComprovanteNaoFiscalVinculado("CUPOM FISCAL........: " + fiscal_Cupom);
                                fiscal_retorno = conectorECF.Bematech_FI_UsaComprovanteNaoFiscalVinculado("PARCELAMENTO");
                                fiscal_retorno = conectorECF.Bematech_FI_UsaComprovanteNaoFiscalVinculado("================================================");
                                fiscal_retorno = conectorECF.Bematech_FI_UsaComprovanteNaoFiscalVinculado("PARCELAMENTO........: " + (reserva_parcelas == null ? "1" : reserva_parcelas));
                                fiscal_retorno = conectorECF.Bematech_FI_UsaComprovanteNaoFiscalVinculado("COBRANÇA");
                                fiscal_retorno = conectorECF.Bematech_FI_UsaComprovanteNaoFiscalVinculado("================================================");
                                fiscal_retorno = conectorECF.Bematech_FI_UsaComprovanteNaoFiscalVinculado("DOCUMENTO DE COB....: " + "0");
                                fiscal_retorno = conectorECF.Bematech_FI_UsaComprovanteNaoFiscalVinculado("\n");
                                fiscal_retorno = conectorECF.Bematech_FI_UsaComprovanteNaoFiscalVinculado("TOTALIZADORES");
                                fiscal_retorno = conectorECF.Bematech_FI_UsaComprovanteNaoFiscalVinculado("================================================");
                                fiscal_retorno = conectorECF.Bematech_FI_UsaComprovanteNaoFiscalVinculado("VALOR LIQUIDO.......: " + pgto[i]);
                                fiscal_retorno = conectorECF.Bematech_FI_UsaComprovanteNaoFiscalVinculado("\n\n");
                                fiscal_retorno = conectorECF.Bematech_FI_UsaComprovanteNaoFiscalVinculado("Reconheço a exatidão na importância acima");
                                fiscal_retorno = conectorECF.Bematech_FI_UsaComprovanteNaoFiscalVinculado("informada e pagarei `a, conforme os vencimentos");
                                fiscal_retorno = conectorECF.Bematech_FI_UsaComprovanteNaoFiscalVinculado("descritos no documento de cobrança desse comprovante.");
                                fiscal_retorno = conectorECF.Bematech_FI_UsaComprovanteNaoFiscalVinculado("\n\n");
                                fiscal_retorno = conectorECF.Bematech_FI_UsaComprovanteNaoFiscalVinculado("________________________________________________");
                                fiscal_retorno = conectorECF.Bematech_FI_UsaComprovanteNaoFiscalVinculado("                  Assinatura do Cliente          ");*/
                                if (functionECF.conectorECF_Analisa_RetornoImpressora(alwaysVariables.ModeloEcf, ref ACK, ref ST1, ref ST2, ref ST3, ref fiscal_MSG) == false)
                                {
                                    txtVisorMsgConectorCF.Text = functionECF.conectorECF_Erros(alwaysVariables.ModeloEcf);
                                }
                                functionECF.conectorECF_FechaComprovanteNaoFiscalVinculado(alwaysVariables.ModeloEcf, ref fiscal_MSG, ref fiscal_retorno, alwaysVariables.ECF_Ligada);
                                //fiscal_retorno = conectorECF.Bematech_FI_FechaComprovanteNaoFiscalVinculado();
                                functionECF.conectorECF_NumeroCupom(alwaysVariables.ModeloEcf, ref fiscal_Cupom_coo, ref fiscal_MSG, ref fiscal_retorno, alwaysVariables.ECF_Ligada);
                                //fiscal_retorno = conectorECF.Bematech_FI_NumeroCupom(ref fiscal_Cupom_coo);
                                functionECF.conectorECF_ContadorCupomFiscal(alwaysVariables.ModeloEcf, ref fiscal_Cupom_ccf, ref fiscal_MSG, ref fiscal_retorno, alwaysVariables.ECF_Ligada);
                                //fiscal_retorno = conectorECF.Bematech_FI_ContadorCupomFiscalMFD(ref fiscal_Cupom_ccf);

                                //functionECF.conectorECF_AcionaGuilhotinaMFD(alwaysVariables.ModeloEcf, 1 , ref fiscal_MSG, ref fiscal_retorno, alwaysVariables.ECF_Ligada);
                            }
                            catch (Exception)
                            {
                                if (functionECF.conectorECF_Analisa_RetornoImpressora(alwaysVariables.ModeloEcf, ref ACK, ref ST1, ref ST2, ref ST3, ref fiscal_MSG) == false)
                                {
                                    txtVisorMsgConectorCF.Text = functionECF.conectorECF_Erros(alwaysVariables.ModeloEcf);
                                }
                            }
                            if (fiscal_retorno == 1 && functionECF.conectorECF_Analisa_RetornoImpressora(alwaysVariables.ModeloEcf, ref ACK, ref ST1, ref ST2, ref ST3, ref fiscal_MSG))
                            {
                                if (Convert.ToDouble(fiscal_Cupom_coo.Trim()) > 0 && Convert.ToInt32(lbOperadorConectorCF.Text == "" ? "0" : lbOperadorConectorCF.Text) > 0)
                                {
                                    conector_inc_cupom_detalhes_movimento_coo(fiscal_Cupom_coo, alwaysVariables.Terminal, String.Format("{0:yyyy-MM-dd}", DateTime.Now), i.ToString(), "Crediario", fiscal_Cupom, fiscal_Cupom_ccf, lbOperadorConectorCF.Text, pgto[i], alwaysVariables.Serie);
                                    //conectorPDV_inc_cupom_relatorio_meio_pgto("3", pgto[i], "0", "N");
                                }
                            }
                            else
                            {
                                txtVisorMsgConectorCF.Text = functionECF.conectorECF_Erros(alwaysVariables.ModeloEcf);
                            }
                            input_cliente = null;
                        }
                        break;
                    case 4:
                        if (alwaysVariables.EmitiVinculo == "1" && alwaysVariables.VinculoConvenio == "1" && pgto[i] != "#")
                        {
                            if (ataque == 0)
                            {
                                functionECF.conectorECF_AbreComprovanteNaoFiscalVinculado(alwaysVariables.ModeloEcf, "Convenio", "", "", ref fiscal_MSG, ref fiscal_retorno, alwaysVariables.ECF_Ligada);
                                //fiscal_retorno = conectorECF.Bematech_FI_AbreComprovanteNaoFiscalVinculado("Convenio", "", "");
                            }
                            else
                            {
                                functionECF.conectorECF_AbreComprovanteNaoFiscalVinculado(alwaysVariables.ModeloEcf, "Convenio", pgto[i], fiscal_Cupom, ref fiscal_MSG, ref fiscal_retorno, alwaysVariables.ECF_Ligada);
                                //fiscal_retorno = conectorECF.Bematech_FI_AbreComprovanteNaoFiscalVinculado("Convenio", pgto[i], fiscal_Cupom);
                            }
                            ataque = 1;
                            if (functionECF.conectorECF_Analisa_RetornoImpressora(alwaysVariables.ModeloEcf, ref ACK, ref ST1, ref ST2, ref ST3, ref fiscal_MSG))
                            {
                                functionECF.conectorECF_UsaComprovanteNaoFiscalVinculado(alwaysVariables.ModeloEcf, "                  CONVENIO                   \n", ref fiscal_MSG, ref fiscal_retorno, alwaysVariables.ECF_Ligada);
                                functionECF.conectorECF_UsaComprovanteNaoFiscalVinculado(alwaysVariables.ModeloEcf, "EMPRESA.........: " + convenio_empresa + "\n", ref fiscal_MSG, ref fiscal_retorno, alwaysVariables.ECF_Ligada);
                                functionECF.conectorECF_UsaComprovanteNaoFiscalVinculado(alwaysVariables.ModeloEcf, "RAZAO EMPRESA...: " + convenio_razao + "\n", ref fiscal_MSG, ref fiscal_retorno, alwaysVariables.ECF_Ligada);
                                functionECF.conectorECF_UsaComprovanteNaoFiscalVinculado(alwaysVariables.ModeloEcf, "CODIGO..........: " + convenio_cliente + "\n", ref fiscal_MSG, ref fiscal_retorno, alwaysVariables.ECF_Ligada);
                                functionECF.conectorECF_UsaComprovanteNaoFiscalVinculado(alwaysVariables.ModeloEcf, "NOME/RAZAO......: " + convenio_nome + "\n", ref fiscal_MSG, ref fiscal_retorno, alwaysVariables.ECF_Ligada);
                                functionECF.conectorECF_UsaComprovanteNaoFiscalVinculado(alwaysVariables.ModeloEcf, "CPF/CNPJ........: " + convenio_doc + "\n", ref fiscal_MSG, ref fiscal_retorno, alwaysVariables.ECF_Ligada);
                                functionECF.conectorECF_UsaComprovanteNaoFiscalVinculado(alwaysVariables.ModeloEcf, "METODO DE PGTO..:\n", ref fiscal_MSG, ref fiscal_retorno, alwaysVariables.ECF_Ligada);
                                functionECF.conectorECF_UsaComprovanteNaoFiscalVinculado(alwaysVariables.ModeloEcf, "FINALIZADORA....: " + i + " - Convenio \n", ref fiscal_MSG, ref fiscal_retorno, alwaysVariables.ECF_Ligada);
                                functionECF.conectorECF_UsaComprovanteNaoFiscalVinculado(alwaysVariables.ModeloEcf, "CUPOM FISCAL....: " + fiscal_Cupom + "\n", ref fiscal_MSG, ref fiscal_retorno, alwaysVariables.ECF_Ligada);
                                functionECF.conectorECF_UsaComprovanteNaoFiscalVinculado(alwaysVariables.ModeloEcf, "DOCMENTO DE COB.: " + "00000000000" + "\n", ref fiscal_MSG, ref fiscal_retorno, alwaysVariables.ECF_Ligada);
                                functionECF.conectorECF_UsaComprovanteNaoFiscalVinculado(alwaysVariables.ModeloEcf, "VALOR LIQUIDO...: " + pgto[i] + "\n", ref fiscal_MSG, ref fiscal_retorno, alwaysVariables.ECF_Ligada);

                                /*fiscal_retorno = conectorECF.Bematech_FI_UsaComprovanteNaoFiscalVinculado("                  CONVENIO                   \n");
                                fiscal_retorno = conectorECF.Bematech_FI_UsaComprovanteNaoFiscalVinculado("EMPRESA.........: " + convenio_empresa + "\n");//input_cliente
                                fiscal_retorno = conectorECF.Bematech_FI_UsaComprovanteNaoFiscalVinculado("RAZAO EMPRESA...: " + convenio_razao + "\n");
                                fiscal_retorno = conectorECF.Bematech_FI_UsaComprovanteNaoFiscalVinculado("CODIGO..........: " + convenio_cliente + "\n");//input_cliente
                                fiscal_retorno = conectorECF.Bematech_FI_UsaComprovanteNaoFiscalVinculado("NOME/RAZAO......: " + convenio_nome + "\n");
                                fiscal_retorno = conectorECF.Bematech_FI_UsaComprovanteNaoFiscalVinculado("CPF/CNPJ........: " + convenio_doc + "\n");
                                fiscal_retorno = conectorECF.Bematech_FI_UsaComprovanteNaoFiscalVinculado("METODO DE PGTO..:\n");
                                fiscal_retorno = conectorECF.Bematech_FI_UsaComprovanteNaoFiscalVinculado("FINALIZADORA....: " + i + " - Convenio \n");
                                fiscal_retorno = conectorECF.Bematech_FI_UsaComprovanteNaoFiscalVinculado("CUPOM FISCAL....: " + fiscal_Cupom + "\n");
                                fiscal_retorno = conectorECF.Bematech_FI_UsaComprovanteNaoFiscalVinculado("DOCMENTO DE COB.: " + "TESTE FLAVIO" + "\n");
                                fiscal_retorno = conectorECF.Bematech_FI_UsaComprovanteNaoFiscalVinculado("VALOR LIQUIDO...: " + pgto[i] + "\n");*/
                                //fiscal_retorno = conectorECF.Bematech_FI_AcionaGuilhotinaMFD(1);

                                //fiscal_retorno = conectorECF.Bematech_FI_FechaComprovanteNaoFiscalVinculado();
                                functionECF.conectorECF_FechaComprovanteNaoFiscalVinculado(alwaysVariables.ModeloEcf, ref fiscal_MSG, ref fiscal_retorno, alwaysVariables.ECF_Ligada);
                                functionECF.conectorECF_NumeroCupom(alwaysVariables.ModeloEcf, ref fiscal_Cupom_coo, ref fiscal_MSG, ref fiscal_retorno, alwaysVariables.ECF_Ligada);
                                //fiscal_retorno = conectorECF.Bematech_FI_NumeroCupom(ref fiscal_Cupom_coo);
                            }
                            else
                            {
                                txtVisorMsgConectorCF.Text = functionECF.conectorECF_Erros(alwaysVariables.ModeloEcf);
                            }
                            if (Convert.ToDouble(fiscal_Cupom_coo.Trim()) > 0 && Convert.ToInt32(lbOperadorConectorCF.Text == "" ? "0" : lbOperadorConectorCF.Text) > 0 && functionECF.conectorECF_Analisa_RetornoImpressora(alwaysVariables.ModeloEcf, ref ACK, ref ST1, ref ST2, ref ST3, ref fiscal_MSG))
                            {
                                conector_inc_cupom_detalhes_movimento_coo(fiscal_Cupom_coo, alwaysVariables.Terminal, String.Format("{0:yyyy-MM-dd}", DateTime.Now), i.ToString(), "Convenio", fiscal_Cupom, "", lbOperadorConectorCF.Text, pgto[i], alwaysVariables.Serie);
                                //conectorPDV_inc_cupom_relatorio_meio_pgto("4", pgto[i], "0", "N");
                            }
                            else
                            {
                                txtVisorMsgConectorCF.Text = functionECF.conectorECF_Erros(alwaysVariables.ModeloEcf);
                            }
                        }
                        break;
                    case 5:
                        if (alwaysVariables.EmitiVinculo == "1" && alwaysVariables.VinculoCartaoCf == "1" && pgto[i] != "#")
                        {
                            for (int w = 0; w < vetorTefCredito.Length; w++)
                            {
                                if (vetorTefCredito[tefFields, w] != null)
                                {
                                    if (ataque == 0)
                                    {
                                        tef.imprimir(ataque, "", "", "Cartao Credito", fiscal_Cupom.Replace("\0", "").Trim(), fiscal_store, fiscal_numero_caixa);
                                    }
                                    else
                                    {
                                        tef.imprimir(ataque, vetorTefCredito[tefFields, w], fiscal_Cupom.Replace("\0", "").Trim(), "Cartao Credito", fiscal_Cupom.Replace("\0", "").Trim(), fiscal_store, fiscal_numero_caixa);
                                    }
                                    //conectorPDV_inc_cupom_relatorio("CC", null);
                                    if (backgroundConectorRelatorioCCartao.IsBusy != true)
                                    {
                                        // Start the asynchronous operation.
                                        backgroundConectorRelatorioCCartao.RunWorkerAsync();
                                    }
                                    arranqueRelatorioCC = 1;
                                    conectorPDV_alt_nfPgto(auxChaveNota, "", "5", alwaysVariables.card_cnpj, alwaysVariables.card_band, alwaysVariables.card_aut);
                                    /*if (ataque == 0)
                                    {
                                        fiscal_retorno = conectorECF.Bematech_FI_AbreComprovanteNaoFiscalVinculado("Cartao Credito", "", "");
                                    }
                                    else
                                    {
                                        fiscal_retorno = conectorECF.Bematech_FI_AbreComprovanteNaoFiscalVinculado("Cartao Credito", vetorTefCredito[tefFields, w], fiscal_Cupom);
                                    }*/
                                    ataque = 1;
                                    /*
                                    conectorECF.Analisa_iRetorno(fiscal_retorno, ref fiscal_MSG);
                                    fiscal_retorno = conectorECF.Bematech_FI_UsaComprovanteNaoFiscalVinculado("======================CIELO====================== \n");
                                    fiscal_retorno = conectorECF.Bematech_FI_UsaComprovanteNaoFiscalVinculado("===================VISA CREDITO================== \n");
                                    fiscal_retorno = conectorECF.Bematech_FI_UsaComprovanteNaoFiscalVinculado("==============49310******0058-07/17============== \n");
                                    fiscal_retorno = conectorECF.Bematech_FI_UsaComprovanteNaoFiscalVinculado("=================VIA DO CLIENTE================== \n");
                                    fiscal_retorno = conectorECF.Bematech_FI_UsaComprovanteNaoFiscalVinculado("VALOR   :                  " + vetorTefDebito[tefFields, w] + " \n");
                                    fiscal_retorno = conectorECF.Bematech_FI_UsaComprovanteNaoFiscalVinculado("OPERADOR:                  " + alwaysVariables.Usuario + " - " + alwaysVariables.UserName + " \n");
                                    fiscal_retorno = conectorECF.Bematech_FI_UsaComprovanteNaoFiscalVinculado("================================================= \n");
                                    conectorECF.Analisa_iRetorno(fiscal_retorno, ref fiscal_MSG);
                                    fiscal_retorno = conectorECF.Bematech_FI_FechaComprovanteNaoFiscalVinculado();
                                    conectorECF.Analisa_iRetorno(fiscal_retorno, ref fiscal_MSG);*/
                                    //fiscal_retorno = conectorECF.Bematech_FI_NumeroCupom(ref fiscal_Cupom_coo);
                                    functionECF.conectorECF_NumeroCupom(alwaysVariables.ModeloEcf, ref fiscal_Cupom_coo, ref fiscal_MSG, ref fiscal_retorno, alwaysVariables.ECF_Ligada);
                                    if (fiscal_retorno == 1 && functionECF.conectorECF_Analisa_RetornoImpressora(alwaysVariables.ModeloEcf, ref ACK, ref ST1, ref ST2, ref ST3, ref fiscal_MSG))
                                    {
                                        if (Convert.ToDouble(fiscal_Cupom_coo.Trim()) > 0 && Convert.ToInt32(lbOperadorConectorCF.Text == "" ? "0" : lbOperadorConectorCF.Text) > 0)
                                        {
                                            conector_inc_cupom_detalhes_movimento_coo(fiscal_Cupom_coo, alwaysVariables.Terminal, String.Format("{0:yyyy-MM-dd}", DateTime.Now), i.ToString(), "Cartao Credito", fiscal_Cupom, "", lbOperadorConectorCF.Text, pgto[i], alwaysVariables.Serie);
                                            //conectorPDV_inc_cupom_relatorio_meio_pgto("5", vetorTefCredito[tefFields, w], "0", "N");
                                        }
                                    }
                                    else
                                    {
                                        txtVisorMsgConectorCF.Text = functionECF.conectorECF_Erros(alwaysVariables.ModeloEcf);
                                    }
                                }
                            }
                        }

                        break;
                    case 6:
                        lblVisorEntradaDadosConectorCF.Text = "....IMPRIMINDO TICKETS TEF...!";
                        if (alwaysVariables.EmitiVinculo == "1" && alwaysVariables.VinculoCartaoDb == "1" && pgto[i] != "#")
                        {
                            for (int w = 0; w < vetorTefDebito.Length; w++)
                            {
                                if (vetorTefDebito[tefFields, w] != null)
                                {
                                    if (ataque == 0)
                                    {
                                        tef.imprimir(ataque, "", "", "Cartao Debito", fiscal_Cupom.Replace("\0", "").Trim(), fiscal_store, fiscal_numero_caixa);
                                    }
                                    else
                                    {
                                        tef.imprimir(ataque, vetorTefDebito[tefFields, w], fiscal_Cupom.Replace("\0", "").Trim(), "Cartao Debito", fiscal_Cupom.Replace("\0", "").Trim(), fiscal_store, fiscal_numero_caixa);
                                    }
                                    //conectorPDV_inc_cupom_relatorio("CC", null);
                                    if (backgroundConectorRelatorioCCartao.IsBusy != true)
                                    {
                                        // Start the asynchronous operation.
                                        backgroundConectorRelatorioCCartao.RunWorkerAsync();
                                    }
                                    arranqueRelatorioCC = 1;
                                    conectorPDV_alt_nfPgto(auxChaveNota, "", "6", alwaysVariables.card_cnpj, alwaysVariables.card_cnpj, alwaysVariables.card_aut);
                                    ataque = 1;
                                    /*
                                    if (ataque == 0)
                                    {
                                        fiscal_retorno = conectorECF.Bematech_FI_AbreComprovanteNaoFiscalVinculado("Cartao Debito", "", "");
                                    }
                                    else
                                    {
                                        fiscal_retorno = conectorECF.Bematech_FI_AbreComprovanteNaoFiscalVinculado("Cartao Debito", vetorTefDebito[tefFields, w], fiscal_Cupom);
                                    }
                                                
                                    conectorECF.Analisa_iRetorno(fiscal_retorno, ref fiscal_MSG);
                                    fiscal_retorno = conectorECF.Bematech_FI_UsaComprovanteNaoFiscalVinculado("=================CIELO================= \n");
                                    fiscal_retorno = conectorECF.Bematech_FI_UsaComprovanteNaoFiscalVinculado("===============VISA ELETRO============== \n");
                                    fiscal_retorno = conectorECF.Bematech_FI_UsaComprovanteNaoFiscalVinculado("==========49310******0058-07/17========= \n");
                                    fiscal_retorno = conectorECF.Bematech_FI_UsaComprovanteNaoFiscalVinculado("=============VIA DO CLIENTE============= \n");
                                    fiscal_retorno = conectorECF.Bematech_FI_UsaComprovanteNaoFiscalVinculado("VALOR   :                  " + vetorTefDebito[tefFields, w] + " \n");
                                    fiscal_retorno = conectorECF.Bematech_FI_UsaComprovanteNaoFiscalVinculado("OPERADOR:                  " + alwaysVariables.Usuario + " - " + alwaysVariables.UserName + " \n");
                                    conectorECF.Analisa_iRetorno(fiscal_retorno, ref fiscal_MSG);
                                    fiscal_retorno = conectorECF.Bematech_FI_FechaComprovanteNaoFiscalVinculado();
                                    conectorECF.Analisa_iRetorno(fiscal_retorno, ref fiscal_MSG);*/
                                    functionECF.conectorECF_NumeroCupom(alwaysVariables.ModeloEcf, ref fiscal_Cupom_coo, ref fiscal_MSG, ref fiscal_retorno, alwaysVariables.ECF_Ligada);
                                    //fiscal_retorno = conectorECF.Bematech_FI_NumeroCupom(ref fiscal_Cupom_coo);
                                    //conectorECF.Analisa_iRetorno(fiscal_retorno, ref fiscal_MSG);
                                    if (fiscal_retorno == 1 && functionECF.conectorECF_Analisa_RetornoImpressora(alwaysVariables.ModeloEcf, ref ACK, ref ST1, ref ST2, ref ST3, ref fiscal_MSG))
                                    {
                                        if (Convert.ToDouble(fiscal_Cupom_coo == "              " ? "0" : fiscal_Cupom_coo.Trim()) > 0 && Convert.ToInt32(lbOperadorConectorCF.Text == "" ? "0" : lbOperadorConectorCF.Text) > 0)
                                        {
                                            conector_inc_cupom_detalhes_movimento_coo(fiscal_Cupom_coo, alwaysVariables.Terminal, String.Format("{0:yyyy-MM-dd}", DateTime.Now), i.ToString(), "Debito", fiscal_Cupom, "", lbOperadorConectorCF.Text, pgto[i], alwaysVariables.Serie);
                                            //conectorPDV_inc_cupom_relatorio_meio_pgto("6", vetorTefDebito[tefFields, w], "0", "N");
                                        }
                                    }
                                    else
                                    {
                                        txtVisorMsgConectorCF.Text = functionECF.conectorECF_Erros(alwaysVariables.ModeloEcf);
                                    }
                                }
                            }
                        }
                        break;
                }
            }
            #endregion
        }

        void conector_pgto_ecf(string[] pgto, string totalCalculado, string totalRecebido, string totalTroco)
        {
            workBalanca.RequestStop(true);
            workObject.modoPdv(true); //Para rotina loop
            string totalFinalizadoEcf = "0.00";
            string descontoMov = "0";
            if (call_pdv == 3 && typeDescAcre == 1)
            {
                if (Convert.ToDecimal(txtSubTotalConectorCF.Text.Replace(",", ".")) > Convert.ToDecimal(lblTotalMoneyConectorCF.Text.Replace(",", ".")))
                {
                    /*if (acresDesc.Trim() == "" || acresDesc == "0")
                    {
                        acresDesc = Math.Round((Math.Round(((1 - (Convert.ToDecimal(lblTotalMoneyConectorCF.Text.Replace(",", ".")) / Convert.ToDecimal(txtSubTotalConectorCF.Text.Replace(",", ".")))) * 100), 2) * 100)).ToString();
                    }*/
                    if (ativa_discount == 1)
                    {
                        conector_desconto_subTotal(fiscal_Cupom, fiscal_store.Replace("\0", "").Trim(), fiscal_numero_caixa.Replace("\0", "").Trim(), Math.Round((Convert.ToDecimal(acresDesc.Replace(",", ".")) / 100), 2).ToString());
                        ativa_discount = 0;
                    }

                    //conector_acrescimo_subTotal(fiscal_Cupom.Replace("\0", "").Trim(), fiscal_store.Replace("\0", "").Trim() == "" ? alwaysVariables.Store : fiscal_store, fiscal_numero_caixa.Replace("\0", "").Trim(), valuesAcresDesc.Replace(",", "."));
                }

                functionECF.conectorECF_IniciaFechamentoCupom(alwaysVariables.ModeloEcf, "D", "%", acresDesc == "" ? "0" : acresDesc, ref fiscal_MSG, ref fiscal_retorno, alwaysVariables.ECF_Ligada);
                descontoMov = valuesAcresDesc;
                //fiscal_retorno = conectorECF.Bematech_FI_IniciaFechamentoCupom("D", "%", acresDesc == "" ? "0" : acresDesc);
            }
            else if (call_pdv == 3 && typeDescAcre == 2)
            {
                if (Convert.ToDecimal(txtSubTotalConectorCF.Text.Replace(",", ".")) < Convert.ToDecimal(lblTotalMoneyConectorCF.Text.Replace(",", ".")))
                {
                    if (ativa_acrescimo == 1)
                    {
                        conector_acrescimo_subTotal(fiscal_Cupom.Replace("\0", "").Trim(), fiscal_store.Replace("\0", "").Trim() == "" ? alwaysVariables.Store : fiscal_store, fiscal_numero_caixa.Replace("\0", "").Trim(), valuesAcresDesc.Replace(",", "."));
                        ativa_acrescimo = 0;
                    }
                }
                functionECF.conectorECF_IniciaFechamentoCupom(alwaysVariables.ModeloEcf, "A", "%", acresDesc == "" ? "0" : acresDesc, ref fiscal_MSG, ref fiscal_retorno, alwaysVariables.ECF_Ligada);
                //fiscal_retorno = conectorECF.Bematech_FI_IniciaFechamentoCupom("A", "%", acresDesc == "" ? "0" : acresDesc);
                if (fiscal_retorno == 1 && functionECF.conectorECF_Analisa_RetornoImpressora(alwaysVariables.ModeloEcf, ref ACK, ref ST1, ref ST2, ref ST3, ref fiscal_MSG))
                {
                    /*if (File.Exists(folderMFDGrand + "\\grandFullPDV" + ".enc"))
                    {//Atualiza Grande Total
                        fiscal_GT_Crypt = new string('\x20', 20);
                        File.Delete(folderMFDGrand + "\\grandFullPDV" + ".enc");
                        functionECF.conectorECF_GrandeTotal_Crypt(alwaysVariables.ModeloEcf, ref fiscal_GT_Crypt, ref fiscal_MSG, ref fiscal_retorno, alwaysVariables.ECF_Ligada);
                        cryptografia.conectorPDV_serie(alwaysVariables.PAF_total + "\\grandFullPDV" + ".txt", "0");
                        File.Delete(alwaysVariables.PAF_total + "\\grandFullPDV" + ".txt");
                    }*/
                    if (backgroundConectorGrandeTotal.IsBusy != true)
                    {
                        // Start the asynchronous operation.
                        backgroundConectorGrandeTotal.RunWorkerAsync();
                    }
                    arranqueTotal = 1;
                }
                else
                {
                    if (ST1 != null)
                    {
                        txtVisorMsgConectorCF.Text = functionECF.conectorECF_Erros(alwaysVariables.ModeloEcf);
                    }
                }
            }
            else
            {
                //fiscal_retorno = conectorECF.Bematech_FI_IniciaFechamentoCupom("D", "%", acresDesc == "" ? "0" : acresDesc);
                functionECF.conectorECF_IniciaFechamentoCupom(alwaysVariables.ModeloEcf, "D", "%", acresDesc == "" ? "0" : acresDesc, ref fiscal_MSG, ref fiscal_retorno, alwaysVariables.ECF_Ligada);
            }
            if (fiscal_MSG != "" && fiscal_retorno != 1)
            {
                msg = new msgInfo(1, fiscal_MSG); msg.ShowDialog();
            }
            else
            {
                typeDescAcre = 0;
                if (fiscal_retorno == 1 && functionECF.conectorECF_Analisa_RetornoImpressora(alwaysVariables.ModeloEcf, ref ACK, ref ST1, ref ST2, ref ST3, ref fiscal_MSG))
                {
                    countFinalizadora = 0;
                    for (int i = 0; i < pgto.Length; i++)
                    {
                        if (pgto[i] != "#")
                        {
                            countFinalizadora++;
                            if (conector_verifica_count_financeiro(fiscal_Cupom.Replace("\0", "").Trim(), fiscal_store.Replace("\0", "").Trim(), fiscal_numero_caixa.Replace("\0", "").Trim(), i.ToString()) == 0)
                            {
                                functionECF.conectorECF_EfetuaFormaPagamento(alwaysVariables.ModeloEcf, conector_finalizadora(i), pgto[i].Replace(".", ","), ref fiscal_MSG, ref fiscal_retorno, alwaysVariables.ECF_Ligada);
                                //fiscal_retorno = conectorECF.Bematech_FI_EfetuaFormaPagamento(conector_finalizadora(i), pgto[i].Replace(".", ","));
                                //conectorECF.Analisa_iRetorno(fiscal_retorno, ref fiscal_MSG);
                            }
                            else
                            {
                                fiscal_retorno = 1;
                            }

                            if (fiscal_retorno == 1 && functionECF.conectorECF_Analisa_RetornoImpressora(alwaysVariables.ModeloEcf, ref ACK, ref ST1, ref ST2, ref ST3, ref fiscal_MSG))
                            {
                                totalFinalizadoEcf = (Convert.ToDecimal(totalFinalizadoEcf) + Convert.ToDecimal(pgto[i].Replace(",", "."))).ToString();
                                if (conector_verifica_count_financeiro(fiscal_Cupom.Trim(), fiscal_store.Replace("\0", "").Trim(), fiscal_numero_caixa.Replace("\0", "").Trim(), i.ToString()) == 0)
                                {
                                    if (Convert.ToDecimal(pgto[i].Replace(",", ".")) > Convert.ToDecimal(lblRecebidoMoneyConectorCF.Text.Replace(",", ".")))
                                    {
                                        conectorPDV_inc_cupom_movimento(fiscal_Cupom, fiscal_numero_caixa, i.ToString(), lblRecebidoMoneyConectorCF.Text.Replace(",", "."), null, null, cheque_agencia, cheque_conta, cheque_numero, cheque_deposito, cheque_cpf_cgc, cartao_type, cheque_banco, null, totalTroco);
                                        conectorPDV_inc_movimentocaixa(lblRecebidoMoneyConectorCF.Text.Replace(",", "."), "0.00", "0.00", "0.00", "0.00", "0.00", "1", "0.00", "0.00", "0.00", i.ToString(), lbOperadorConectorCF.Text, "0.00", 0, descontoMov);
                                    }
                                    else
                                    {
                                        conectorPDV_inc_cupom_movimento(fiscal_Cupom, fiscal_numero_caixa, i.ToString(), pgto[i].Replace(",", "."), null, null, cheque_agencia, cheque_conta, cheque_numero, cheque_deposito, cheque_cpf_cgc, cartao_type, cheque_banco, null, "0.00");
                                        conectorPDV_inc_movimentocaixa(pgto[i].Replace(",", "."), "0.00", "0.00", "0.00", "0.00", "0.00", "1", "0.00", "0.00", "0.00", i.ToString(), lbOperadorConectorCF.Text, "0.00", 0, descontoMov);
                                    }

                                }
                            }
                            else
                            {
                                txtVisorMsgConectorCF.Text = functionECF.conectorECF_Erros(alwaysVariables.ModeloEcf);
                            }

                            if (Convert.ToDecimal(lblRecebidoMoneyConectorCF.Text.Replace(",", ".")) == (Convert.ToDecimal(totalFinalizadoEcf.Replace(",", ".")) - Convert.ToDecimal(totalTroco.Replace(",", "."))))
                            {
                                fiscal_retorno = 1;
                            }
                            else
                                fiscal_retorno = 0;
                        }
                    }
                    arranqueMov = 1;
                    // Start the asynchronous operation.
                    //backgroundConectorCupomMovimento.RunWorkerAsync();
                    if (backgroundConectorCupomMovimento.IsBusy != true)
                    {
                        // Start the asynchronous operation.
                        backgroundConectorCupomMovimento.RunWorkerAsync();
                    }

                    arranqueMov = 1;
                }
                else
                {
                    txtVisorMsgConectorCF.Text = functionECF.conectorECF_Erros(alwaysVariables.ModeloEcf);
                }

                if (fiscal_retorno == 1 && functionECF.conectorECF_Analisa_RetornoImpressora(alwaysVariables.ModeloEcf, ref ACK, ref ST1, ref ST2, ref ST3, ref fiscal_MSG))
                {
                    if (totalTroco != "" && Convert.ToDecimal(totalTroco.Replace(",", ".")) > 0)
                    {
                        conectorPDV_inc_movimentocaixa("0.00", "0.00", "0.00", "0.00", "0.00", "0.00", "1", "0.00", "0.00", "0.00", 1.ToString(), lbOperadorConectorCF.Text, totalTroco, 0, "0,00");
                        totalFinalizadoEcf = (Convert.ToDecimal(totalFinalizadoEcf) - Convert.ToDecimal(totalTroco.Replace(",", "."))).ToString();
                        if (countFinalizadora > 1)
                        {
                            for (int i = 0; i < pgto.Length; i++)
                            {
                                if (finalizadoraTroco == i)
                                {
                                    conector_update_troco(totalTroco, i.ToString(), fiscal_Cupom.Replace("\0", "").Trim(), fiscal_store.Replace("\0", "").Trim(), fiscal_numero_caixa.Replace("\0", "").Trim(), pgto[i]); break;
                                }
                                else if (i == 1)//Nesse caso ocorre o seguinte Sempre voltar o troco em dinheiro ou vale /*sujeito a alteração no vale*/
                                {
                                    conector_update_troco(totalTroco, i.ToString(), fiscal_Cupom.Replace("\0", "").Trim(), fiscal_store.Replace("\0", "").Trim(), fiscal_numero_caixa.Replace("\0", "").Trim(), pgto[i]);
                                    break;
                                }
                            }
                        }
                    }
                    try
                    {

                        if (Convert.ToDecimal(totalCalculado.Replace(",", ".")) == Convert.ToDecimal(totalRecebido.Replace(",", ".")) && Convert.ToDecimal(totalFinalizadoEcf.Replace(",", ".")) == Convert.ToDecimal(totalRecebido.Replace(",", ".")))
                        {
                            /*Trecho de MSG obdecendo ao PAF - ECF*/
                            string SubTotal = new string('\x20', 14);
                            msgFinalCupom = "";
                            #region
                            if (alwaysVariables.flagHomologacao == "1") { msgFinalCupom = "MD-5:" + alwaysVariables.MD5_Main + "\n"; } else { msgFinalCupom = "MD-5:" + alwaysVariables.MD5VALIDO.Trim() + "\n"; }
                            #endregion
                            //10
                            functionECF.conectorECF_SubTotal(alwaysVariables.ModeloEcf, ref SubTotal, ref fiscal_MSG, ref fiscal_retorno, alwaysVariables.ECF_Ligada);
                            //fiscal_retorno = conectorECF.Bematech_FI_SubTotal(ref SubTotal);

                            if (fiscal_CGC == "")
                            {
                                functionECF.conectorECF_CGC_IE(alwaysVariables.ModeloEcf, ref fiscal_CGC, ref fiscal_IE, ref fiscal_MSG, ref fiscal_retorno, alwaysVariables.ECF_Ligada);
                                //fiscal_retorno = conectorECF.Bematech_FI_CGC_IE(ref fiscal_CGC, ref fiscal_IE);
                                if (alwaysVariables.CNPJ == fiscal_CGC.Replace(".", "").Replace("-", "").Replace("/", "").Replace("\0", "").Trim())
                                {
                                    complementoFiscal = fiscal_CGC.Replace("-", "").Replace("/", "").Replace(".", "").Replace("\0", "").Trim() + " " + String.Format("{0:ddMMyyyy}", Convert.ToDateTime(fiscal_data_movimento.Substring(0, 2) + "/" + fiscal_data_movimento.Substring(2, 2) + "/" + String.Format("{0:ddMMyyyy}", DateTime.Now).Substring(4, 2) + fiscal_data_printer.Substring(4, 2))) + " " + Convert.ToDecimal(SubTotal).ToString();
                                }
                            }
                            else
                            {

                                switch (alwaysVariables.UF)
                                {
                                    case "MG":
                                        complementoFiscal = fiscal_CGC.Replace("-", "").Replace("/", "").Replace(".", "").Replace("\0", "").Trim() + " " + String.Format("{0:ddMMyyyy}", Convert.ToDateTime(fiscal_data_movimento.Substring(0, 2) + "/" + fiscal_data_movimento.Substring(2, 2) + "/" + String.Format("{0:ddMMyyyy}", DateTime.Now).Substring(4, 2) + fiscal_data_printer.Substring(4, 2))) + " " + Convert.ToDecimal(SubTotal).ToString();
                                        break;
                                    case "RJ":
                                        //complementoFiscal = fiscal_IE.Replace("\0", "").Trim() + " " + String.Format("{0:ddMMyy}", Convert.ToDateTime(fiscal_data_movimento.Substring(0, 2) + "/" + fiscal_data_movimento.Substring(2, 2) + "/" + String.Format("{0:ddMMyyyy}", DateTime.Now).Substring(4, 2) + fiscal_data_printer.Substring(4, 2))) + " " + fiscal_Cupom_coo.Replace("\0","").Trim() + fiscal_numero_caixa.Replace("\0","").PadLeft(3,'0');
                                        break;
                                    case "DF":
                                        complementoFiscal = conectorPDV_PAFECF_tributos(fiscal_Cupom.Replace("\0", "").Trim(), fiscal_store.Replace("\0", "").Trim(), fiscal_numero_caixa.Replace("\0", "").Trim(), "2").Replace(".", ","); //Calculo tributo
                                        break;
                                    case "PB":
                                        string test = String.Format("{0:ddMMyyyy}", Convert.ToDateTime(fiscal_data_movimento.Substring(0, 2) + "/" + fiscal_data_movimento.Substring(2, 2) + "/" + String.Format("{0:ddMMyyyy}", DateTime.Now).Substring(4, 2) + fiscal_data_printer.Substring(4, 2)));
                                        complementoFiscal = fiscal_IE.Replace("\0", "").Trim() + " " + test + " " + fiscal_Cupom_coo.Replace("\0", "").Trim() + " " + Convert.ToDecimal(SubTotal).ToString();
                                        break;
                                    default:
                                        break;
                                }
                            }
                            if (pedido != "" && Convert.ToDouble(pedido) > 0 ||
                                flagPreVenda != "" && Convert.ToDouble(flagPreVenda) > 0 ||
                                flagDav != "" && Convert.ToDouble(flagDav) > 0)
                            {
                                if (flagFormaFinalizacao == "D")//MG.001
                                {
                                    msgFinalCupom += "DAV " + flagDav.PadLeft(10, '0') + "\n";
                                }
                                else
                                {
                                    msgFinalCupom += "PV " + flagPreVenda.PadLeft(10, '0') + "\n";
                                }

                            }
                            else if (NotaNumber != "0" && NotaNumber != "" && NotaNumber != null)
                            {
                                msgFinalCupom += "NF: " + NotaNumber + "\n";
                            }
                            else
                            {
                                try
                                {
                                    banco.startTransaction("acao_pdv");
                                    banco.addParametro("nivel", "3");
                                    banco.addParametro("store", alwaysVariables.Store);
                                    banco.addParametro("barras", "0");
                                    banco.procedimentoSet();

                                }
                                catch (Exception erro) { msgInfo msg = new msgInfo("Caro Cliente - " + erro.Message); msg.ShowDialog(); auxConsistencia = 1; }
                                finally
                                {
                                    if (auxConsistencia == 0)
                                    {
                                        countField = banco.retornaSet().Tables[0].Columns.Count;
                                        countRows = banco.retornaSet().Tables[0].DefaultView.Count;
                                        if (countRows > 0)
                                        {
                                            if (msgFinalCupom == "")
                                            {
                                                msgFinalCupom = "\n ******** PROMOÇÃO DO DIA ********\n";
                                            }
                                            else
                                            {
                                                msgFinalCupom = msgFinalCupom + "\n ******** PROMOÇÃO DO DIA ********\n";
                                            }
                                            for (int i = 0; i < countRows; i++)//Linha
                                            {
                                                msgFinalCupom = msgFinalCupom + Convert.ToString(banco.retornaSet().Tables[0].Rows[i][0]) + "\n";
                                            }
                                        }
                                        else
                                        {

                                        }
                                    }
                                    banco.fechaConexao(); if (title != "") { this.txtTitleCupomFiscalConectorCF.Invoke((MethodInvoker)delegate { txtTitleCupomFiscalConectorCF.Text = title; }); }
                                }
                            }
                            switch (alwaysVariables.UF) /* REQUISITO IX */
                            {
                                case "MG":  /* Minas Legal */
                                    msgFinalCupom += "MINAS LEGAL:" + complementoFiscal + "\n";
                                    break;
                                case "DF":
                                    StringBuilder concat = new StringBuilder();
                                    concat.Append((Char)27);
                                    concat.Append((Char)69);
                                    concat.Append("NOTA LEGAL: ");
                                    concat.Append((Char)27);
                                    concat.Append((Char)70);
                                    msgFinalCupom += "ESTABELECIMENTO INCLUÍDO NO PROGRAMA DE \n";
                                    msgFinalCupom += "CONCESSÃO DE CRÉDITOS - LEI nº 4.159/08. \n";
                                    //msgFinalCupom += "#27" + "#69" + "NOTA LEGAL: ICMS = " + "#27" + "#70" +  complementoFiscal + "\n";
                                    msgFinalCupom += concat.ToString() + " ICMS = " + complementoFiscal + "  ISS = 0,00 \n";
                                    break;
                                case "RJ": /* CUPOM MANIA, CONCORRA A PRÊMIOS */
                                    //msgFinalCupom += "CUPOM MANIA, CONCORRA A PRÊMIOS \n";
                                    //msgFinalCupom += "ENVIE SMS P/ 6789: " + complementoFiscal + "\n";
                                    //msgFinalCupom += complementoFiscal + "\n";
                                    break;
                                case "PB":
                                    msgFinalCupom += "PARAÍBA LEGAL - RECEITA CIDADÃ \n";
                                    msgFinalCupom += "TORPEDO PREMIADO: \n";
                                    msgFinalCupom += complementoFiscal + "\n";
                                    break;
                                default:
                                    break;
                            }
                            msgFinalCupom += "TRIBUTOS APROX: " + conectorPDV_PAFECF_tributos(fiscal_Cupom.Replace("\0", "").Trim(), fiscal_store.Replace("\0", "").Trim(), fiscal_numero_caixa.Replace("\0", "").Trim(), "1", 0).Replace(".", ",") + " Fonte: IBGT" + "\n";
                            msgFinalCupom += "OPERADOR: " + banco_operado + "-" + banco_nome + "\n";

                            pedido = ""; flagDav = ""; flagPreVenda = "";
                            if (cartao_numero_parcelas != "" && cartao_numero_parcelas != null && Convert.ToInt32(cartao_numero_parcelas) > 1)
                            {
                                msgFinalCupom += "CARTÃO DE CREDITO: " + cartao_numero_parcelas + "x PARCELAS \n";
                                cartao_numero_parcelas = null;
                            }
                            //fiscal_retorno =  conectorECF.Bematech_FI_TerminaFechamentoCupom(msgFinalCupom);
                            functionECF.conectorECF_TerminaFechamentoCupom(alwaysVariables.ModeloEcf, msgFinalCupom.Replace("\0", ""), ref fiscal_MSG, ref fiscal_retorno, alwaysVariables.ECF_Ligada);


                            if (fiscal_retorno == 1)
                            {
                                pedido = "0";
                                resetLabel();
                                resetVariable();
                                ltbDetalhesConectorCF.Clear();
                                ltbDetalhesConectorCF.Text = " ITEM  CÓDIGO  DESCRIÇÃO QTD  UN VL UNIT(R$) ST VL ITEM(R$)" + "\r\n" +
                                                             "===========================================================";
                                rtbVisualizacaoDadosNf.Clear();
                                rtbVisualizacaoDadosNf.Text = " ITEM  CÓDIGO  DESCRIÇÃO QTD  UN VL UNIT(R$) ST VL ITEM(R$)" + "\r\n" +
                                                                                                                                                     "===========================================================";
                            }

                            this.backgroundConectorCupom.CancelAsync();
                            if (fiscal_retorno == 1)
                            {
                                functionECF.conectorECF_AcionaGaveta(alwaysVariables.ModeloEcf, ref fiscal_MSG, ref fiscal_retorno, alwaysVariables.ECF_Ligada);
                                functionECF.VerificaEstadoGaveta(alwaysVariables.ModeloEcf, ref fiscal_MSG, ref gaveta, ref fiscal_retorno, alwaysVariables.ECF_Ligada);
                                if (gaveta == 0)
                                {
                                    //Estado = 1 sensor em nível 1 (fechada)
                                    //Estado = 0 sensor em nível 0 (aberta)
                                    msg = new msgInfo("INFORMAÇÃO DO SISTEMA! GAVETA ABERTA."); msg.ShowDialog();
                                }
                            }
                            workObject.modoPdv(false);
                            conector_reset_listas();

                            if (fiscal_retorno == 1 && (functionECF.conectorECF_Analisa_RetornoImpressora(alwaysVariables.ModeloEcf, ref ACK, ref ST1, ref ST2, ref ST3, ref fiscal_MSG)))
                            {
                                if (Convert.ToDouble(fiscal_data_movimento.Trim() == "" ? "0" : fiscal_data_movimento.Trim()) > 0)
                                {
                                    string test = String.Format("{0:yyyyMMdd}", Convert.ToDateTime(fiscal_data_movimento.Substring(2, 2) + "/" + fiscal_data_movimento.Substring(0, 2) + "/" + String.Format("{0:ddMMyyyy}", DateTime.Now).Substring(4, 2) + fiscal_data_printer.Substring(4, 2)));
                                    conector_update_lineMD5_r04(fiscal_Cupom, fiscal_numero_caixa, conectorPDV_PAFECF_indicador("R04", test, fiscal_store.Replace("\0", "").Trim(), fiscal_numero_caixa.Replace("\0", "").Trim(), fiscal_Cupom.Replace("\0", "").Trim(), "0"));
                                }
                            }
                            else
                            {
                                txtVisorMsgConectorCF.Text = functionECF.conectorECF_Erros(alwaysVariables.ModeloEcf);
                            }

                            fiscal_flag = 0;
                            functionECF.conectorECF_fiscal_flag(alwaysVariables.ModeloEcf, ref fiscal_flag, ref fiscal_MSG, ref fiscal_retorno, alwaysVariables.ECF_Ligada);
                        }

                        if (Convert.ToDecimal(totalCalculado.Replace(",", ".")) == Convert.ToDecimal(totalRecebido.Replace(",", ".")) && Convert.ToDecimal(totalFinalizadoEcf.Replace(",", ".")) == Convert.ToDecimal(totalRecebido.Replace(",", ".")))
                        {
                            flag_tela = true;
                            //Thread.Sleep(2000);
                        }

                        //#########################Cupom Vinculado####################
                        #region
                        ataque = 0;
                        for (int i = pgto.Length; i > 0; i--)
                        //for (int i = 0; i < pgto.Length; i++)
                        {
                            switch (i)
                            {
                                case 3:
                                    if (alwaysVariables.EmitiVinculo == "1" && alwaysVariables.VinculoCrediario == "1" && pgto[i] != "#")
                                    {
                                        if (ataque == 0)
                                        {
                                            functionECF.conectorECF_AbreComprovanteNaoFiscalVinculado(alwaysVariables.ModeloEcf, "Crediario", "", "", ref fiscal_MSG, ref fiscal_retorno, alwaysVariables.ECF_Ligada);
                                            //fiscal_retorno = conectorECF.Bematech_FI_AbreComprovanteNaoFiscalVinculado("Crediario", "", "");
                                        }
                                        else
                                        {
                                            functionECF.conectorECF_AbreComprovanteNaoFiscalVinculado(alwaysVariables.ModeloEcf, "Crediario", pgto[i], fiscal_Cupom, ref fiscal_MSG, ref fiscal_retorno, alwaysVariables.ECF_Ligada);
                                            //fiscal_retorno = conectorECF.Bematech_FI_AbreComprovanteNaoFiscalVinculado("Crediario", pgto[i], fiscal_Cupom);
                                        }
                                        ataque = 1;
                                        try
                                        {
                                            functionECF.conectorECF_UsaComprovanteNaoFiscalVinculado(alwaysVariables.ModeloEcf, "CABEÇALHO DO CONTRATO", ref fiscal_MSG, ref fiscal_retorno, alwaysVariables.ECF_Ligada);
                                            functionECF.conectorECF_UsaComprovanteNaoFiscalVinculado(alwaysVariables.ModeloEcf, "================================================", ref fiscal_MSG, ref fiscal_retorno, alwaysVariables.ECF_Ligada);
                                            functionECF.conectorECF_UsaComprovanteNaoFiscalVinculado(alwaysVariables.ModeloEcf, "CONTRATO............:", ref fiscal_MSG, ref fiscal_retorno, alwaysVariables.ECF_Ligada);
                                            functionECF.conectorECF_UsaComprovanteNaoFiscalVinculado(alwaysVariables.ModeloEcf, "CODIGO..............: " + input_cliente /*input_cliente*/, ref fiscal_MSG, ref fiscal_retorno, alwaysVariables.ECF_Ligada);
                                            functionECF.conectorECF_UsaComprovanteNaoFiscalVinculado(alwaysVariables.ModeloEcf, "NOME/RAZAO..........: " + pessoa_nome, ref fiscal_MSG, ref fiscal_retorno, alwaysVariables.ECF_Ligada);
                                            functionECF.conectorECF_UsaComprovanteNaoFiscalVinculado(alwaysVariables.ModeloEcf, "CPF/CNPJ............: " + pessoa_cliente, ref fiscal_MSG, ref fiscal_retorno, alwaysVariables.ECF_Ligada);
                                            functionECF.conectorECF_UsaComprovanteNaoFiscalVinculado(alwaysVariables.ModeloEcf, "METODO DE PGTO......: " + (reserva_metodo == null ? "0" : reserva_metodo), ref fiscal_MSG, ref fiscal_retorno, alwaysVariables.ECF_Ligada);
                                            functionECF.conectorECF_UsaComprovanteNaoFiscalVinculado(alwaysVariables.ModeloEcf, "DESCRIÇÃO METODO....: " + (reserva_desc_metodo == null ? "DESCONHECIDO" : reserva_desc_metodo), ref fiscal_MSG, ref fiscal_retorno, alwaysVariables.ECF_Ligada);
                                            functionECF.conectorECF_UsaComprovanteNaoFiscalVinculado(alwaysVariables.ModeloEcf, "FINALIZADORA........: " + i.ToString() + " - CREDIARIO", ref fiscal_MSG, ref fiscal_retorno, alwaysVariables.ECF_Ligada);
                                            functionECF.conectorECF_UsaComprovanteNaoFiscalVinculado(alwaysVariables.ModeloEcf, "DADOS DO CUPOM FISCAL", ref fiscal_MSG, ref fiscal_retorno, alwaysVariables.ECF_Ligada);
                                            functionECF.conectorECF_UsaComprovanteNaoFiscalVinculado(alwaysVariables.ModeloEcf, "================================================", ref fiscal_MSG, ref fiscal_retorno, alwaysVariables.ECF_Ligada);

                                            /*fiscal_retorno = conectorECF.Bematech_FI_UsaComprovanteNaoFiscalVinculado("CABEÇALHO DO CONTRATO");
                                            fiscal_retorno = conectorECF.Bematech_FI_UsaComprovanteNaoFiscalVinculado("================================================");
                                            fiscal_retorno = conectorECF.Bematech_FI_UsaComprovanteNaoFiscalVinculado("CONTRATO............:");
                                            fiscal_retorno = conectorECF.Bematech_FI_UsaComprovanteNaoFiscalVinculado("CODIGO..............: " + input_cliente);//input_cliente
                                            fiscal_retorno = conectorECF.Bematech_FI_UsaComprovanteNaoFiscalVinculado("NOME/RAZAO..........: " + pessoa_nome);
                                            fiscal_retorno = conectorECF.Bematech_FI_UsaComprovanteNaoFiscalVinculado("CPF/CNPJ............: " + pessoa_cliente);
                                            fiscal_retorno = conectorECF.Bematech_FI_UsaComprovanteNaoFiscalVinculado("METODO DE PGTO......: " + (reserva_metodo == null ? "0" : reserva_metodo));
                                            fiscal_retorno = conectorECF.Bematech_FI_UsaComprovanteNaoFiscalVinculado("DESCRIÇÃO METODO....: " + (reserva_desc_metodo == null ? "DESCONHECIDO" : reserva_desc_metodo));
                                            fiscal_retorno = conectorECF.Bematech_FI_UsaComprovanteNaoFiscalVinculado("FINALIZADORA........: " + i.ToString() + " - CREDIARIO");
                                            fiscal_retorno = conectorECF.Bematech_FI_UsaComprovanteNaoFiscalVinculado("DADOS DO CUPOM FISCAL");
                                            fiscal_retorno = conectorECF.Bematech_FI_UsaComprovanteNaoFiscalVinculado("================================================");*/

                                            if (fiscal_data_printer.Trim() == "")
                                            {
                                                functionECF.conectorECF_DataHoraReducao(alwaysVariables.ModeloEcf, ref fiscal_data_printer, ref fiscal_hora_printer, ref fiscal_MSG, ref fiscal_retorno, alwaysVariables.ECF_Ligada);
                                            }
                                            //fiscal_retorno = conectorECF.Bematech_FI_DataHoraImpressora(ref fiscal_data_printer, ref fiscal_hora_printer);

                                            functionECF.conectorECF_UsaComprovanteNaoFiscalVinculado(alwaysVariables.ModeloEcf, "EMISSÃO.............: " + String.Format("{0:yyyyMMdd}", Convert.ToDateTime(fiscal_data_printer.Substring(0, 2) + "/" + fiscal_data_printer.Substring(2, 2) + "/" + String.Format("{0:ddMMyyyy}", DateTime.Now).Substring(4, 2) + fiscal_data_printer.Substring(4, 2))) + " / " + fiscal_hora_printer, ref fiscal_MSG, ref fiscal_retorno, alwaysVariables.ECF_Ligada);
                                            functionECF.conectorECF_UsaComprovanteNaoFiscalVinculado(alwaysVariables.ModeloEcf, "CUPOM FISCAL........: " + fiscal_Cupom, ref fiscal_MSG, ref fiscal_retorno, alwaysVariables.ECF_Ligada);
                                            functionECF.conectorECF_UsaComprovanteNaoFiscalVinculado(alwaysVariables.ModeloEcf, "PARCELAMENTO", ref fiscal_MSG, ref fiscal_retorno, alwaysVariables.ECF_Ligada);
                                            functionECF.conectorECF_UsaComprovanteNaoFiscalVinculado(alwaysVariables.ModeloEcf, "================================================", ref fiscal_MSG, ref fiscal_retorno, alwaysVariables.ECF_Ligada);
                                            functionECF.conectorECF_UsaComprovanteNaoFiscalVinculado(alwaysVariables.ModeloEcf, "PARCELAMENTO........: " + (reserva_parcelas == null ? "1" : reserva_parcelas), ref fiscal_MSG, ref fiscal_retorno, alwaysVariables.ECF_Ligada);
                                            functionECF.conectorECF_UsaComprovanteNaoFiscalVinculado(alwaysVariables.ModeloEcf, "COBRANÇA", ref fiscal_MSG, ref fiscal_retorno, alwaysVariables.ECF_Ligada);
                                            functionECF.conectorECF_UsaComprovanteNaoFiscalVinculado(alwaysVariables.ModeloEcf, "================================================", ref fiscal_MSG, ref fiscal_retorno, alwaysVariables.ECF_Ligada);
                                            functionECF.conectorECF_UsaComprovanteNaoFiscalVinculado(alwaysVariables.ModeloEcf, "DOCUMENTO DE COB....: " + "0", ref fiscal_MSG, ref fiscal_retorno, alwaysVariables.ECF_Ligada);
                                            functionECF.conectorECF_UsaComprovanteNaoFiscalVinculado(alwaysVariables.ModeloEcf, "\n", ref fiscal_MSG, ref fiscal_retorno, alwaysVariables.ECF_Ligada);
                                            functionECF.conectorECF_UsaComprovanteNaoFiscalVinculado(alwaysVariables.ModeloEcf, "TOTALIZADORES", ref fiscal_MSG, ref fiscal_retorno, alwaysVariables.ECF_Ligada);
                                            functionECF.conectorECF_UsaComprovanteNaoFiscalVinculado(alwaysVariables.ModeloEcf, "================================================", ref fiscal_MSG, ref fiscal_retorno, alwaysVariables.ECF_Ligada);
                                            functionECF.conectorECF_UsaComprovanteNaoFiscalVinculado(alwaysVariables.ModeloEcf, "VALOR LIQUIDO.......: " + pgto[i], ref fiscal_MSG, ref fiscal_retorno, alwaysVariables.ECF_Ligada);
                                            functionECF.conectorECF_UsaComprovanteNaoFiscalVinculado(alwaysVariables.ModeloEcf, "\n\n", ref fiscal_MSG, ref fiscal_retorno, alwaysVariables.ECF_Ligada);
                                            functionECF.conectorECF_UsaComprovanteNaoFiscalVinculado(alwaysVariables.ModeloEcf, "Reconheço a exatidão na importância acima", ref fiscal_MSG, ref fiscal_retorno, alwaysVariables.ECF_Ligada);
                                            functionECF.conectorECF_UsaComprovanteNaoFiscalVinculado(alwaysVariables.ModeloEcf, "informada e pagarei `a, conforme os vencimentos", ref fiscal_MSG, ref fiscal_retorno, alwaysVariables.ECF_Ligada);
                                            functionECF.conectorECF_UsaComprovanteNaoFiscalVinculado(alwaysVariables.ModeloEcf, "descritos no documento de cobrança desse comprovante.", ref fiscal_MSG, ref fiscal_retorno, alwaysVariables.ECF_Ligada);
                                            functionECF.conectorECF_UsaComprovanteNaoFiscalVinculado(alwaysVariables.ModeloEcf, "\n\n", ref fiscal_MSG, ref fiscal_retorno, alwaysVariables.ECF_Ligada);
                                            functionECF.conectorECF_UsaComprovanteNaoFiscalVinculado(alwaysVariables.ModeloEcf, "________________________________________________", ref fiscal_MSG, ref fiscal_retorno, alwaysVariables.ECF_Ligada);
                                            functionECF.conectorECF_UsaComprovanteNaoFiscalVinculado(alwaysVariables.ModeloEcf, "                  Assinatura do Cliente          ", ref fiscal_MSG, ref fiscal_retorno, alwaysVariables.ECF_Ligada);
                                            /*
                                            fiscal_retorno = conectorECF. Bematech_FI_UsaComprovanteNaoFiscalVinculado("EMISSÃO.............: " + String.Format("{0:yyyyMMdd}", Convert.ToDateTime(fiscal_data_printer.Substring(0, 2) + "/" + fiscal_data_printer.Substring(2, 2) + "/" + String.Format("{0:ddMMyyyy}", DateTime.Now).Substring(4, 2) + fiscal_data_printer.Substring(4, 2))) + " / " + fiscal_hora_printer);
                                            fiscal_retorno = conectorECF.Bematech_FI_UsaComprovanteNaoFiscalVinculado("CUPOM FISCAL........: " + fiscal_Cupom);
                                            fiscal_retorno = conectorECF.Bematech_FI_UsaComprovanteNaoFiscalVinculado("PARCELAMENTO");
                                            fiscal_retorno = conectorECF.Bematech_FI_UsaComprovanteNaoFiscalVinculado("================================================");
                                            fiscal_retorno = conectorECF.Bematech_FI_UsaComprovanteNaoFiscalVinculado("PARCELAMENTO........: " + (reserva_parcelas == null ? "1" : reserva_parcelas));
                                            fiscal_retorno = conectorECF.Bematech_FI_UsaComprovanteNaoFiscalVinculado("COBRANÇA");
                                            fiscal_retorno = conectorECF.Bematech_FI_UsaComprovanteNaoFiscalVinculado("================================================");
                                            fiscal_retorno = conectorECF.Bematech_FI_UsaComprovanteNaoFiscalVinculado("DOCUMENTO DE COB....: " + "0");
                                            fiscal_retorno = conectorECF.Bematech_FI_UsaComprovanteNaoFiscalVinculado("\n");
                                            fiscal_retorno = conectorECF.Bematech_FI_UsaComprovanteNaoFiscalVinculado("TOTALIZADORES");
                                            fiscal_retorno = conectorECF.Bematech_FI_UsaComprovanteNaoFiscalVinculado("================================================");
                                            fiscal_retorno = conectorECF.Bematech_FI_UsaComprovanteNaoFiscalVinculado("VALOR LIQUIDO.......: " + pgto[i]);
                                            fiscal_retorno = conectorECF.Bematech_FI_UsaComprovanteNaoFiscalVinculado("\n\n");
                                            fiscal_retorno = conectorECF.Bematech_FI_UsaComprovanteNaoFiscalVinculado("Reconheço a exatidão na importância acima");
                                            fiscal_retorno = conectorECF.Bematech_FI_UsaComprovanteNaoFiscalVinculado("informada e pagarei `a, conforme os vencimentos");
                                            fiscal_retorno = conectorECF.Bematech_FI_UsaComprovanteNaoFiscalVinculado("descritos no documento de cobrança desse comprovante.");
                                            fiscal_retorno = conectorECF.Bematech_FI_UsaComprovanteNaoFiscalVinculado("\n\n");
                                            fiscal_retorno = conectorECF.Bematech_FI_UsaComprovanteNaoFiscalVinculado("________________________________________________");
                                            fiscal_retorno = conectorECF.Bematech_FI_UsaComprovanteNaoFiscalVinculado("                  Assinatura do Cliente          ");*/
                                            if (functionECF.conectorECF_Analisa_RetornoImpressora(alwaysVariables.ModeloEcf, ref ACK, ref ST1, ref ST2, ref ST3, ref fiscal_MSG) == false)
                                            {
                                                txtVisorMsgConectorCF.Text = functionECF.conectorECF_Erros(alwaysVariables.ModeloEcf);
                                            }
                                            functionECF.conectorECF_FechaComprovanteNaoFiscalVinculado(alwaysVariables.ModeloEcf, ref fiscal_MSG, ref fiscal_retorno, alwaysVariables.ECF_Ligada);
                                            //fiscal_retorno = conectorECF.Bematech_FI_FechaComprovanteNaoFiscalVinculado();
                                            functionECF.conectorECF_NumeroCupom(alwaysVariables.ModeloEcf, ref fiscal_Cupom_coo, ref fiscal_MSG, ref fiscal_retorno, alwaysVariables.ECF_Ligada);
                                            //fiscal_retorno = conectorECF.Bematech_FI_NumeroCupom(ref fiscal_Cupom_coo);
                                            functionECF.conectorECF_ContadorCupomFiscal(alwaysVariables.ModeloEcf, ref fiscal_Cupom_ccf, ref fiscal_MSG, ref fiscal_retorno, alwaysVariables.ECF_Ligada);
                                            //fiscal_retorno = conectorECF.Bematech_FI_ContadorCupomFiscalMFD(ref fiscal_Cupom_ccf);

                                            //functionECF.conectorECF_AcionaGuilhotinaMFD(alwaysVariables.ModeloEcf, 1 , ref fiscal_MSG, ref fiscal_retorno, alwaysVariables.ECF_Ligada);
                                        }
                                        catch (Exception)
                                        {
                                            if (functionECF.conectorECF_Analisa_RetornoImpressora(alwaysVariables.ModeloEcf, ref ACK, ref ST1, ref ST2, ref ST3, ref fiscal_MSG) == false)
                                            {
                                                txtVisorMsgConectorCF.Text = functionECF.conectorECF_Erros(alwaysVariables.ModeloEcf);
                                            }
                                        }
                                        if (fiscal_retorno == 1 && functionECF.conectorECF_Analisa_RetornoImpressora(alwaysVariables.ModeloEcf, ref ACK, ref ST1, ref ST2, ref ST3, ref fiscal_MSG))
                                        {
                                            if (Convert.ToDouble(fiscal_Cupom_coo.Trim()) > 0 && Convert.ToInt32(lbOperadorConectorCF.Text == "" ? "0" : lbOperadorConectorCF.Text) > 0)
                                            {
                                                conector_inc_cupom_detalhes_movimento_coo(fiscal_Cupom_coo, alwaysVariables.Terminal, String.Format("{0:yyyy-MM-dd}", DateTime.Now), i.ToString(), "Crediario", fiscal_Cupom, fiscal_Cupom_ccf, lbOperadorConectorCF.Text, pgto[i], alwaysVariables.Serie);
                                                //conectorPDV_inc_cupom_relatorio_meio_pgto("3", pgto[i], "0", "N");
                                            }
                                        }
                                        else
                                        {
                                            txtVisorMsgConectorCF.Text = functionECF.conectorECF_Erros(alwaysVariables.ModeloEcf);
                                        }
                                        input_cliente = null;
                                    }
                                    break;
                                case 4:
                                    if (alwaysVariables.EmitiVinculo == "1" && alwaysVariables.VinculoConvenio == "1" && pgto[i] != "#")
                                    {
                                        if (ataque == 0)
                                        {
                                            functionECF.conectorECF_AbreComprovanteNaoFiscalVinculado(alwaysVariables.ModeloEcf, "Convenio", "", "", ref fiscal_MSG, ref fiscal_retorno, alwaysVariables.ECF_Ligada);
                                            //fiscal_retorno = conectorECF.Bematech_FI_AbreComprovanteNaoFiscalVinculado("Convenio", "", "");
                                        }
                                        else
                                        {
                                            functionECF.conectorECF_AbreComprovanteNaoFiscalVinculado(alwaysVariables.ModeloEcf, "Convenio", pgto[i], fiscal_Cupom, ref fiscal_MSG, ref fiscal_retorno, alwaysVariables.ECF_Ligada);
                                            //fiscal_retorno = conectorECF.Bematech_FI_AbreComprovanteNaoFiscalVinculado("Convenio", pgto[i], fiscal_Cupom);
                                        }
                                        ataque = 1;
                                        if (functionECF.conectorECF_Analisa_RetornoImpressora(alwaysVariables.ModeloEcf, ref ACK, ref ST1, ref ST2, ref ST3, ref fiscal_MSG))
                                        {
                                            functionECF.conectorECF_UsaComprovanteNaoFiscalVinculado(alwaysVariables.ModeloEcf, "================================================", ref fiscal_MSG, ref fiscal_retorno, alwaysVariables.ECF_Ligada);
                                            functionECF.conectorECF_UsaComprovanteNaoFiscalVinculado(alwaysVariables.ModeloEcf, "===  C O M P R O V A N T E  C O N V Ê N I O  ===", ref fiscal_MSG, ref fiscal_retorno, alwaysVariables.ECF_Ligada);
                                            functionECF.conectorECF_UsaComprovanteNaoFiscalVinculado(alwaysVariables.ModeloEcf, "================================================", ref fiscal_MSG, ref fiscal_retorno, alwaysVariables.ECF_Ligada);
                                            functionECF.conectorECF_UsaComprovanteNaoFiscalVinculado(alwaysVariables.ModeloEcf, "EMPRESA.........: " + convenio_empresa + "\n", ref fiscal_MSG, ref fiscal_retorno, alwaysVariables.ECF_Ligada);
                                            functionECF.conectorECF_UsaComprovanteNaoFiscalVinculado(alwaysVariables.ModeloEcf, "RAZAO EMPRESA...: " + convenio_razao + "\n", ref fiscal_MSG, ref fiscal_retorno, alwaysVariables.ECF_Ligada);
                                            functionECF.conectorECF_UsaComprovanteNaoFiscalVinculado(alwaysVariables.ModeloEcf, "CODIGO..........: " + convenio_cliente + "\n", ref fiscal_MSG, ref fiscal_retorno, alwaysVariables.ECF_Ligada);
                                            functionECF.conectorECF_UsaComprovanteNaoFiscalVinculado(alwaysVariables.ModeloEcf, "NOME/RAZAO......: " + convenio_nome + "\n", ref fiscal_MSG, ref fiscal_retorno, alwaysVariables.ECF_Ligada);
                                            functionECF.conectorECF_UsaComprovanteNaoFiscalVinculado(alwaysVariables.ModeloEcf, "CPF/CNPJ........: " + convenio_doc + "\n", ref fiscal_MSG, ref fiscal_retorno, alwaysVariables.ECF_Ligada);
                                            functionECF.conectorECF_UsaComprovanteNaoFiscalVinculado(alwaysVariables.ModeloEcf, "METODO DE PGTO..:\n", ref fiscal_MSG, ref fiscal_retorno, alwaysVariables.ECF_Ligada);
                                            functionECF.conectorECF_UsaComprovanteNaoFiscalVinculado(alwaysVariables.ModeloEcf, "FINALIZADORA....: " + i + " - Convênio \n", ref fiscal_MSG, ref fiscal_retorno, alwaysVariables.ECF_Ligada);
                                            functionECF.conectorECF_UsaComprovanteNaoFiscalVinculado(alwaysVariables.ModeloEcf, "CUPOM FISCAL....: " + fiscal_Cupom + "\n", ref fiscal_MSG, ref fiscal_retorno, alwaysVariables.ECF_Ligada);
                                            //functionECF.conectorECF_UsaComprovanteNaoFiscalVinculado(alwaysVariables.ModeloEcf, "DOCMENTO DE COB.: " + "TESTE FLAVIO" + "\n", ref fiscal_MSG, ref fiscal_retorno, alwaysVariables.ECF_Ligada);
                                            functionECF.conectorECF_UsaComprovanteNaoFiscalVinculado(alwaysVariables.ModeloEcf, "VALOR...........: " + pgto[i] + "\n\n\n\n\n", ref fiscal_MSG, ref fiscal_retorno, alwaysVariables.ECF_Ligada);
                                            functionECF.conectorECF_UsaComprovanteNaoFiscalVinculado(alwaysVariables.ModeloEcf, "Ass.:__________________________________________", ref fiscal_MSG, ref fiscal_retorno, alwaysVariables.ECF_Ligada);
                                            functionECF.conectorECF_UsaComprovanteNaoFiscalVinculado(alwaysVariables.ModeloEcf, convenio_nome + "\n", ref fiscal_MSG, ref fiscal_retorno, alwaysVariables.ECF_Ligada);
                                            functionECF.conectorECF_UsaComprovanteNaoFiscalVinculado(alwaysVariables.ModeloEcf, "ASSUMO A RESPOSABILIDADE PELAS INFORMAÇÕES PRESTADAS ", ref fiscal_MSG, ref fiscal_retorno, alwaysVariables.ECF_Ligada);
                                            /*fiscal_retorno = conectorECF.Bematech_FI_UsaComprovanteNaoFiscalVinculado("                  CONVENIO                   \n");
                                            fiscal_retorno = conectorECF.Bematech_FI_UsaComprovanteNaoFiscalVinculado("EMPRESA.........: " + convenio_empresa + "\n");//input_cliente
                                            fiscal_retorno = conectorECF.Bematech_FI_UsaComprovanteNaoFiscalVinculado("RAZAO EMPRESA...: " + convenio_razao + "\n");
                                            fiscal_retorno = conectorECF.Bematech_FI_UsaComprovanteNaoFiscalVinculado("CODIGO..........: " + convenio_cliente + "\n");//input_cliente
                                            fiscal_retorno = conectorECF.Bematech_FI_UsaComprovanteNaoFiscalVinculado("NOME/RAZAO......: " + convenio_nome + "\n");
                                            fiscal_retorno = conectorECF.Bematech_FI_UsaComprovanteNaoFiscalVinculado("CPF/CNPJ........: " + convenio_doc + "\n");
                                            fiscal_retorno = conectorECF.Bematech_FI_UsaComprovanteNaoFiscalVinculado("METODO DE PGTO..:\n");
                                            fiscal_retorno = conectorECF.Bematech_FI_UsaComprovanteNaoFiscalVinculado("FINALIZADORA....: " + i + " - Convenio \n");
                                            fiscal_retorno = conectorECF.Bematech_FI_UsaComprovanteNaoFiscalVinculado("CUPOM FISCAL....: " + fiscal_Cupom + "\n");
                                            fiscal_retorno = conectorECF.Bematech_FI_UsaComprovanteNaoFiscalVinculado("DOCMENTO DE COB.: " + "TESTE FLAVIO" + "\n");
                                            fiscal_retorno = conectorECF.Bematech_FI_UsaComprovanteNaoFiscalVinculado("VALOR LIQUIDO...: " + pgto[i] + "\n");*/
                                            //fiscal_retorno = conectorECF.Bematech_FI_AcionaGuilhotinaMFD(1);

                                            //fiscal_retorno = conectorECF.Bematech_FI_FechaComprovanteNaoFiscalVinculado();
                                            functionECF.conectorECF_FechaComprovanteNaoFiscalVinculado(alwaysVariables.ModeloEcf, ref fiscal_MSG, ref fiscal_retorno, alwaysVariables.ECF_Ligada);
                                            functionECF.conectorECF_NumeroCupom(alwaysVariables.ModeloEcf, ref fiscal_Cupom_coo, ref fiscal_MSG, ref fiscal_retorno, alwaysVariables.ECF_Ligada);
                                            //fiscal_retorno = conectorECF.Bematech_FI_NumeroCupom(ref fiscal_Cupom_coo);
                                        }
                                        else
                                        {
                                            txtVisorMsgConectorCF.Text = functionECF.conectorECF_Erros(alwaysVariables.ModeloEcf);
                                        }
                                        if (Convert.ToDouble(fiscal_Cupom_coo.Trim()) > 0 && Convert.ToInt32(lbOperadorConectorCF.Text == "" ? "0" : lbOperadorConectorCF.Text) > 0 && functionECF.conectorECF_Analisa_RetornoImpressora(alwaysVariables.ModeloEcf, ref ACK, ref ST1, ref ST2, ref ST3, ref fiscal_MSG))
                                        {
                                            conector_inc_cupom_detalhes_movimento_coo(fiscal_Cupom_coo, alwaysVariables.Terminal, String.Format("{0:yyyy-MM-dd}", DateTime.Now), i.ToString(), "Convenio", fiscal_Cupom, "", lbOperadorConectorCF.Text, pgto[i], alwaysVariables.Serie);
                                            //conectorPDV_inc_cupom_relatorio_meio_pgto("4", pgto[i], "0", "N");
                                        }
                                        else
                                        {
                                            txtVisorMsgConectorCF.Text = functionECF.conectorECF_Erros(alwaysVariables.ModeloEcf);
                                        }
                                    }
                                    break;
                                case 5:
                                    if (alwaysVariables.EmitiVinculo == "1" && alwaysVariables.VinculoCartaoCf == "1" && pgto[i] != "#")
                                    {
                                        for (int w = 0; w < vetorTefCredito.Length; w++)
                                        {
                                            if (vetorTefCredito[tefFields, w] != null)
                                            {
                                                if (ataque == 0)
                                                {
                                                    tef.imprimir(ataque, "", "", "Cartao Credito", fiscal_Cupom.Replace("\0", "").Trim(), fiscal_store, fiscal_numero_caixa);
                                                }
                                                else
                                                {
                                                    tef.imprimir(ataque, vetorTefCredito[tefFields, w], fiscal_Cupom.Replace("\0", "").Trim(), "Cartao Credito", fiscal_Cupom.Replace("\0", "").Trim(), fiscal_store, fiscal_numero_caixa);
                                                }
                                                //conectorPDV_inc_cupom_relatorio("CC", null);
                                                if (backgroundConectorRelatorioCCartao.IsBusy != true)
                                                {
                                                    // Start the asynchronous operation.
                                                    backgroundConectorRelatorioCCartao.RunWorkerAsync();
                                                }
                                                arranqueRelatorioCC = 1;

                                                /*if (ataque == 0)
                                                {
                                                    fiscal_retorno = conectorECF.Bematech_FI_AbreComprovanteNaoFiscalVinculado("Cartao Credito", "", "");
                                                }
                                                else
                                                {
                                                    fiscal_retorno = conectorECF.Bematech_FI_AbreComprovanteNaoFiscalVinculado("Cartao Credito", vetorTefCredito[tefFields, w], fiscal_Cupom);
                                                }*/
                                                ataque = 1;
                                                /*
                                                conectorECF.Analisa_iRetorno(fiscal_retorno, ref fiscal_MSG);
                                                fiscal_retorno = conectorECF.Bematech_FI_UsaComprovanteNaoFiscalVinculado("======================CIELO====================== \n");
                                                fiscal_retorno = conectorECF.Bematech_FI_UsaComprovanteNaoFiscalVinculado("===================VISA CREDITO================== \n");
                                                fiscal_retorno = conectorECF.Bematech_FI_UsaComprovanteNaoFiscalVinculado("==============49310******0058-07/17============== \n");
                                                fiscal_retorno = conectorECF.Bematech_FI_UsaComprovanteNaoFiscalVinculado("=================VIA DO CLIENTE================== \n");
                                                fiscal_retorno = conectorECF.Bematech_FI_UsaComprovanteNaoFiscalVinculado("VALOR   :                  " + vetorTefDebito[tefFields, w] + " \n");
                                                fiscal_retorno = conectorECF.Bematech_FI_UsaComprovanteNaoFiscalVinculado("OPERADOR:                  " + alwaysVariables.Usuario + " - " + alwaysVariables.UserName + " \n");
                                                fiscal_retorno = conectorECF.Bematech_FI_UsaComprovanteNaoFiscalVinculado("================================================= \n");
                                                conectorECF.Analisa_iRetorno(fiscal_retorno, ref fiscal_MSG);
                                                fiscal_retorno = conectorECF.Bematech_FI_FechaComprovanteNaoFiscalVinculado();
                                                conectorECF.Analisa_iRetorno(fiscal_retorno, ref fiscal_MSG);*/
                                                //fiscal_retorno = conectorECF.Bematech_FI_NumeroCupom(ref fiscal_Cupom_coo);
                                                functionECF.conectorECF_NumeroCupom(alwaysVariables.ModeloEcf, ref fiscal_Cupom_coo, ref fiscal_MSG, ref fiscal_retorno, alwaysVariables.ECF_Ligada);
                                                if (fiscal_retorno == 1 && functionECF.conectorECF_Analisa_RetornoImpressora(alwaysVariables.ModeloEcf, ref ACK, ref ST1, ref ST2, ref ST3, ref fiscal_MSG))
                                                {
                                                    if (Convert.ToDouble(fiscal_Cupom_coo.Trim()) > 0 && Convert.ToInt32(lbOperadorConectorCF.Text == "" ? "0" : lbOperadorConectorCF.Text) > 0)
                                                    {
                                                        conector_inc_cupom_detalhes_movimento_coo(fiscal_Cupom_coo, alwaysVariables.Terminal, String.Format("{0:yyyy-MM-dd}", DateTime.Now), i.ToString(), "Cartao Credito", fiscal_Cupom, "", lbOperadorConectorCF.Text, pgto[i], alwaysVariables.Serie);
                                                        // conectorPDV_inc_cupom_relatorio_meio_pgto("5", vetorTefCredito[tefFields, w], "0", "N");
                                                    }
                                                }
                                                else
                                                {
                                                    txtVisorMsgConectorCF.Text = functionECF.conectorECF_Erros(alwaysVariables.ModeloEcf);
                                                }
                                            }
                                        }
                                    }

                                    break;
                                case 6:
                                    lblVisorEntradaDadosConectorCF.Text = "....IMPRIMINDO TICKETS TEF...!";
                                    if (alwaysVariables.EmitiVinculo == "1" && alwaysVariables.VinculoCartaoDb == "1" && pgto[i] != "#")
                                    {
                                        for (int w = 0; w < vetorTefDebito.Length; w++)
                                        {
                                            if (vetorTefDebito[tefFields, w] != null)
                                            {
                                                if (ataque == 0)
                                                {
                                                    tef.imprimir(ataque, "", "", "Cartao Debito", fiscal_Cupom.Replace("\0", "").Trim(), fiscal_store, fiscal_numero_caixa);
                                                }
                                                else
                                                {
                                                    tef.imprimir(ataque, vetorTefDebito[tefFields, w], fiscal_Cupom.Replace("\0", "").Trim(), "Cartao Debito", fiscal_Cupom.Replace("\0", "").Trim(), fiscal_store, fiscal_numero_caixa);
                                                }
                                                ataque = 1;
                                                //conectorPDV_inc_cupom_relatorio("CC", null);
                                                if (backgroundConectorRelatorioCCartao.IsBusy != true)
                                                {
                                                    // Start the asynchronous operation.
                                                    backgroundConectorRelatorioCCartao.RunWorkerAsync();
                                                }
                                                arranqueRelatorioCC = 1;
                                                /*
                                                if (ataque == 0)
                                                {
                                                    fiscal_retorno = conectorECF.Bematech_FI_AbreComprovanteNaoFiscalVinculado("Cartao Debito", "", "");
                                                }
                                                else
                                                {
                                                    fiscal_retorno = conectorECF.Bematech_FI_AbreComprovanteNaoFiscalVinculado("Cartao Debito", vetorTefDebito[tefFields, w], fiscal_Cupom);
                                                }
                                                
                                                conectorECF.Analisa_iRetorno(fiscal_retorno, ref fiscal_MSG);
                                                fiscal_retorno = conectorECF.Bematech_FI_UsaComprovanteNaoFiscalVinculado("=================CIELO================= \n");
                                                fiscal_retorno = conectorECF.Bematech_FI_UsaComprovanteNaoFiscalVinculado("===============VISA ELETRO============== \n");
                                                fiscal_retorno = conectorECF.Bematech_FI_UsaComprovanteNaoFiscalVinculado("==========49310******0058-07/17========= \n");
                                                fiscal_retorno = conectorECF.Bematech_FI_UsaComprovanteNaoFiscalVinculado("=============VIA DO CLIENTE============= \n");
                                                fiscal_retorno = conectorECF.Bematech_FI_UsaComprovanteNaoFiscalVinculado("VALOR   :                  " + vetorTefDebito[tefFields, w] + " \n");
                                                fiscal_retorno = conectorECF.Bematech_FI_UsaComprovanteNaoFiscalVinculado("OPERADOR:                  " + alwaysVariables.Usuario + " - " + alwaysVariables.UserName + " \n");
                                                conectorECF.Analisa_iRetorno(fiscal_retorno, ref fiscal_MSG);
                                                fiscal_retorno = conectorECF.Bematech_FI_FechaComprovanteNaoFiscalVinculado();
                                                conectorECF.Analisa_iRetorno(fiscal_retorno, ref fiscal_MSG);*/
                                                functionECF.conectorECF_NumeroCupom(alwaysVariables.ModeloEcf, ref fiscal_Cupom_coo, ref fiscal_MSG, ref fiscal_retorno, alwaysVariables.ECF_Ligada);
                                                //fiscal_retorno = conectorECF.Bematech_FI_NumeroCupom(ref fiscal_Cupom_coo);
                                                //conectorECF.Analisa_iRetorno(fiscal_retorno, ref fiscal_MSG);
                                                if (fiscal_retorno == 1 && functionECF.conectorECF_Analisa_RetornoImpressora(alwaysVariables.ModeloEcf, ref ACK, ref ST1, ref ST2, ref ST3, ref fiscal_MSG))
                                                {
                                                    if (Convert.ToDouble(fiscal_Cupom_coo == "              " ? "0" : fiscal_Cupom_coo.Trim()) > 0 && Convert.ToInt32(lbOperadorConectorCF.Text == "" ? "0" : lbOperadorConectorCF.Text) > 0)
                                                    {
                                                        conector_inc_cupom_detalhes_movimento_coo(fiscal_Cupom_coo, alwaysVariables.Terminal, String.Format("{0:yyyy-MM-dd}", DateTime.Now), i.ToString(), "Debito", fiscal_Cupom, "", lbOperadorConectorCF.Text, pgto[i], alwaysVariables.Serie);
                                                        //conectorPDV_inc_cupom_relatorio_meio_pgto("6", vetorTefDebito[tefFields, w], "0", "N");
                                                    }
                                                }
                                                else
                                                {
                                                    txtVisorMsgConectorCF.Text = functionECF.conectorECF_Erros(alwaysVariables.ModeloEcf);
                                                }
                                            }
                                        }
                                    }
                                    break;
                            }
                        }
                        #endregion
                        //#########################End Cupom Vinculado################
                    }
                    catch (Exception erro)
                    {
                        msg = new msgInfo(1, "INFORMAÇÃO DO SISTEMA! FINALIZAÇÃO FORÇADA, ERRO LINE 5290."); msg.ShowDialog();
                        functionECF.conectorECF_TerminaFechamentoCupom(alwaysVariables.ModeloEcf, msgFinalCupom.Replace("\0", ""), ref fiscal_MSG, ref fiscal_retorno, alwaysVariables.ECF_Ligada);

                        pedido = "0";
                        resetLabel();
                        resetVariable();
                        ltbDetalhesConectorCF.Clear();
                        ltbDetalhesConectorCF.Text = " ITEM  CÓDIGO  DESCRIÇÃO QTD  UN VL UNIT(R$) ST VL ITEM(R$)" + "\r\n" +
                                                     "===========================================================";
                        rtbVisualizacaoDadosNf.Clear();
                        rtbVisualizacaoDadosNf.Text = " ITEM  CÓDIGO  DESCRIÇÃO QTD  UN VL UNIT(R$) ST VL ITEM(R$)" + "\r\n" +
                                                                                                                                             "===========================================================";
                    }
                }
                else if (functionECF.conectorECF_Erros(alwaysVariables.ModeloEcf) != "")
                {
                    //conector_retorno_ack();
                    if (Convert.ToDecimal(totalCalculado.Replace(",", ".")) == Convert.ToDecimal(totalRecebido.Replace(",", ".")) && Convert.ToDecimal(totalFinalizadoEcf.Replace(",", ".")) == Convert.ToDecimal(totalRecebido.Replace(",", ".")))
                    {
                        //fiscal_retorno = conectorECF.Bematech_FI_TerminaFechamentoCupom(msgFinalCupom);
                        functionECF.conectorECF_TerminaFechamentoCupom(alwaysVariables.ModeloEcf, conectorPDV_msgCupom(), ref fiscal_MSG, ref fiscal_retorno, alwaysVariables.ECF_Ligada);
                        this.backgroundConectorCupom.CancelAsync();
                        if (fiscal_retorno == 1)
                        {
                            functionECF.conectorECF_AcionaGaveta(alwaysVariables.ModeloEcf, ref fiscal_MSG, ref fiscal_retorno, alwaysVariables.ECF_Ligada);
                            functionECF.VerificaEstadoGaveta(alwaysVariables.ModeloEcf, ref fiscal_MSG, ref gaveta, ref fiscal_retorno, alwaysVariables.ECF_Ligada);
                            if (gaveta == 0)
                            {
                                //Estado = 1 sensor em nível 1 (fechada)
                                //Estado = 0 sensor em nível 0 (aberta)
                                msg = new msgInfo("INFORMAÇÃO DO SISTEMA! GAVETA ABERTA."); msg.ShowDialog();
                            }
                        }
                        workObject.modoPdv(false);
                        if (fiscal_retorno == 1)
                        {
                            pedido = "0";
                            resetLabel();
                            resetVariable();
                            ltbDetalhesConectorCF.Clear();
                            ltbDetalhesConectorCF.Text = " ITEM  CÓDIGO  DESCRIÇÃO QTD  UN VL UNIT(R$) ST VL ITEM(R$)" + "\r\n" +
                                                         "===========================================================";
                            rtbVisualizacaoDadosNf.Clear();
                            rtbVisualizacaoDadosNf.Text = " ITEM  CÓDIGO  DESCRIÇÃO QTD  UN VL UNIT(R$) ST VL ITEM(R$)" + "\r\n" +
                                                                                                                                                 "===========================================================";

                        }
                    }
                }
                else if (call_pdv == 1 && functionECF.conectorECF_Analisa_RetornoImpressora(alwaysVariables.ModeloEcf, ref ACK, ref ST1, ref ST2, ref ST3, ref fiscal_MSG))
                {
                    functionECF.conectorECF_TerminaFechamentoCupom(alwaysVariables.ModeloEcf, conectorPDV_msgCupom(), ref fiscal_MSG, ref fiscal_retorno, alwaysVariables.ECF_Ligada);
                    this.backgroundConectorCupom.CancelAsync();
                    if (fiscal_retorno == 1)
                    {
                        functionECF.conectorECF_AcionaGaveta(alwaysVariables.ModeloEcf, ref fiscal_MSG, ref fiscal_retorno, alwaysVariables.ECF_Ligada);
                        functionECF.VerificaEstadoGaveta(alwaysVariables.ModeloEcf, ref fiscal_MSG, ref gaveta, ref fiscal_retorno, alwaysVariables.ECF_Ligada);
                        if (gaveta == 0)
                        {
                            //Estado = 1 sensor em nível 1 (fechada)
                            //Estado = 0 sensor em nível 0 (aberta)
                            msg = new msgInfo("INFORMAÇÃO DO SISTEMA! GAVETA ABERTA."); msg.ShowDialog();
                        }
                    }
                    workObject.modoPdv(false);
                    //fiscal_retorno = conectorECF.Bematech_FI_TerminaFechamentoCupom(msgFinalCupom);
                }
            }
            valuesAcresDesc = "    ";
            File.Delete(@"C:\conector\MFD\Grand\temp.txt");
            acresDesc = " ";
            auxIdCliente = null;
            auxNomeRazao = null;
            workObject.modoPdv(false); //Libera rotina loop
            //conector_start_thread_balanca();
            arranqueBalanca = 1;
            if (backgroundConectorBalanca.IsBusy != true)
            {
                // Start the asynchronous operation.
                backgroundConectorBalanca.RunWorkerAsync();
            }
            arranqueBalanca = 1;
            //conector_last_gt();
            if (backgroundConectorGrandeTotalPgto.IsBusy != true)
            {
                // Start the asynchronous operation.
                backgroundConectorGrandeTotalPgto.RunWorkerAsync();
            }
            arranqueTotalPgto = 1;
            NotaNumber = null;
            modoPedido = 0;
            reservaFinanceiro = "0";
            fiscal_Cupom = new string('\x20', 14);
            fiscal_Cupom_coo = new string('\x20', 6);
        }
        
        void resetFinanceiro()
        {
            vetorTotal = new string[12] { "#", "#", "#", "#", "#", "#", "#", "#", "#", "#", "#", "#" };
            vetorRecebimento = new string[12] { "#", "#", "#", "#", "#", "#", "#", "#", "#", "#", "#", "#" };
            txtDinheiroConectorCF.Text = "0,00";
            txtChequeConectorCF.Text = "0,00";
            txtCartaoDebitoConectorCF.Text = "0,00";
            txtCartaoCreditoConectorCF.Text = "0,00";
            txtConvenioConectorCF.Text = "0,00";
            txtCrediarioConectorCF.Text = "0,00";
            txtRecebimentoConectorCF.Text = "0,00";
            txtValeConectorCF.Text = "0,00";
            txtDuplicataConectorCF.Text = "0,00";
            txtBoletoConectorCF.Text = "0,00";
            lblMoneyTrocoConectorCF.Text = "0,00";
            lblRecebidoMoneyConectorCF.Text = "0,00";
        }


        void objFinanceiro(bool flag)
        {
            this.txtDinheiroConectorCF.Invoke((MethodInvoker)delegate { txtDinheiroConectorCF.ReadOnly = flag; });
            this.txtChequeConectorCF.Invoke((MethodInvoker)delegate { txtChequeConectorCF.ReadOnly = flag; });
            this.txtCartaoDebitoConectorCF.Invoke((MethodInvoker)delegate { txtCartaoDebitoConectorCF.ReadOnly = flag; });
            this.txtCartaoCreditoConectorCF.Invoke((MethodInvoker)delegate { txtCartaoCreditoConectorCF.ReadOnly = flag; });
            this.txtConvenioConectorCF.Invoke((MethodInvoker)delegate { txtConvenioConectorCF.ReadOnly = flag; });
            this.txtCrediarioConectorCF.Invoke((MethodInvoker)delegate { txtCrediarioConectorCF.ReadOnly = flag; });
            this.txtValeConectorCF.Invoke((MethodInvoker)delegate { txtValeConectorCF.ReadOnly = flag; });
            this.txtDuplicataConectorCF.Invoke((MethodInvoker)delegate { txtDuplicataConectorCF.ReadOnly = flag; });
            this.txtBoletoConectorCF.Invoke((MethodInvoker)delegate { txtBoletoConectorCF.ReadOnly = flag; });
        }
        public static string getFile(string localizacao)
        {
            if (localizacao.IndexOf("\\conector") != -1)
            {
                localizacao = localizacao.Replace("\\conector", "");
            }
            return localizacao;
        }

        public static string getValue(string secao, string chave, string fileName)
        {
            int carateres = 256;
            StringBuilder buffer = new StringBuilder(carateres);
            string sdefault = "";
            if (GetPrivateProfileString(secao, chave, sdefault, buffer, carateres, fileName) != 0)
            {
                return buffer.ToString();
            }
            else
            {
                // Verifica o último erro Win32.
                int err = Marshal.GetLastWin32Error();
                return null;
            }
        }

        public static bool writeValue(string secao, string chave, string value, string filename)
        {
            return WritePrivateProfileString(secao, chave, value, filename);
        }

        void arquivo_crz_cro(int tipo)
        {
            functionECF.conectorECF_NumeroReinicio(alwaysVariables.ModeloEcf, ref fiscal_reducao_cro, ref fiscal_MSG, ref fiscal_retorno, alwaysVariables.ECF_Ligada);
            functionECF.conectorECF_NumeroReducoes(alwaysVariables.ModeloEcf, ref fiscal_reducao_crz, ref fiscal_MSG, ref fiscal_retorno, alwaysVariables.ECF_Ligada);

            /*File.Delete(@"C:\crz_coo.txt");
            StreamWriter sw = new StreamWriter(@"C:\crz_coo.txt", true, Encoding.ASCII);
            sw.Write(fiscal_reducao_cro + "-" + fiscal_reducao_crz);
            sw.Close();*/
            if (tipo == 1)
            {
                cryptografia.conectorPDV_serie(alwaysVariables.PAF_total + "\\grandFullPDV" + ".txt", "0");
                if (alwaysVariables.flagHomologacao == "1") { msgInfo msg = new msgInfo(1, "CARO USUÁRIO: GRANDE TOTAL RECOMPOSTO."); //msg.ShowDialog(); 
                }
            }
        }
        void fechaObj(Boolean flag)
        {

            txtEntradaDadosConectorCF.ReadOnly = flag;
            pnlAutorizacaoPDVConectorCF.Visible = flag;
            if (flag == true)
            {
                this.pnlAutorizacaoPDVConectorCF.Location = new System.Drawing.Point(0, 92);
                this.pnlAutorizacaoPDVConectorCF.Size = new System.Drawing.Size(649, 233);
            }
            txtEntradaDadosConectorCF.CausesValidation = false;
            txtEntradaDadosConectorCF.Clear();
            txtEntradaDadosConectorCF.CausesValidation = true;
            lbPrecoCalculadoItensConectorCF.Text = "0,00";
            lbPrecoUnitarioConectorCF.Text = "0,00";
            lbQttyConectorCF.Text = "0,000";
            conector_find_subFull("1");
            txtVisorMsgConectorCF.Text = "PDV - BLOQUEADO";
            ltbDetalhesConectorCF.Clear();
            ltbDetalhesConectorCF.Text = " ITEM  CÓDIGO  DESCRIÇÃO QTD  UN VL UNIT(R$) ST VL ITEM(R$)" + "\r\n" +
                                         "===========================================================";
            rtbVisualizacaoDadosNf.Clear();
            rtbVisualizacaoDadosNf.Text = " ITEM  CÓDIGO  DESCRIÇÃO QTD  UN VL UNIT(R$) ST VL ITEM(R$)" + "\r\n" +
                                                                                                                                                 "===========================================================";

            txtEntradaDadosConectorCF.CausesValidation = false;
            txtAutorizacaoSenhaConectorCF.Clear();
            txtAutorizacaoUsuarioConectorCF.Clear();
            txtAutorizacaoUsuarioConectorCF.CausesValidation = false;
            
            txtAutorizacaoUsuarioConectorCF.Select();
            txtAutorizacaoUsuarioConectorCF.CausesValidation = true;
            txtEntradaDadosConectorCF.CausesValidation = true;

        }

        protected void conector_msg()
        {
            msgInfo msg = new msgInfo(1, "ATUALIZAÇÃO LIBERADA, RECEBENDO CARGA DE DADOS, EM ALGUNS MINUTOS PDV LIBERADO.");
            msg.Show();
        }
        protected void conector_process_venda()
        {
            timer_conector.Interval = 2000;
            timer_conector.Enabled = true;
            string[] fileRecepcao = Directory.GetFiles(@"c:\conector\recepcao\");
            string[] fileTransmissao = Directory.GetFiles(@"c:\conector\Transmissao\");

            for (int y = 0; y < fileRecepcao.GetLength(0); y++)
            {
                if (fileRecepcao.GetLength(0) > 0)
                {
                    if ((fileRecepcao[y].ToString().IndexOf("TRANSMISSAO") != -1) && (fileRecepcao[y].ToString().IndexOf("rar") != -1))
                    {
                        this.lbLastCargaConectorCF.Invoke((MethodInvoker)delegate { lbLastCargaConectorCF.Text = "AGUARDANDO CARGA"; });
                        this.lbLastCargaConectorCF.ForeColor = System.Drawing.Color.Chocolate;
                    }
                }
                if (fileRecepcao.GetLength(0) > 0 && (call_pdv == 0 && call_funcao == 0))
                {
                    if (fiscal_flag != 35)
                    {
                        if (fiscal_flag != 33)
                        {
                            if (fiscal_flag != 1)
                            {
                                if (fiscal_flag != 2)
                                {
                                    if ((fileRecepcao[y].ToString().IndexOf("TRANSMISSAO") != -1) && (fileRecepcao[y].ToString().IndexOf("rar") != -1) && pnlAutorizacaoPDVConectorCF.Visible == false && pnlConsultaProduto.Visible == false)
                                    {
                                        conector_msg();
                                        this.lbLastCargaConectorCF.Invoke((MethodInvoker)delegate { lbLastCargaConectorCF.Text = "ATUALIZANDO PDV"; });
                                        this.lbLastCargaConectorCF.ForeColor = System.Drawing.Color.Red;
                                        this.txtVisorMsgConectorCF.Invoke((MethodInvoker)delegate { txtVisorMsgConectorCF.Text = "PDV INOPERANTE..."; });
                                        instrucao.preparaSql(fileRecepcao[y]);
                                        instrucao.carregaSql();
                                        instrucao.executaSqlBat(conector_carga);
                                        conector_carga++;
                                        this.lbLastCargaConectorCF.ForeColor = System.Drawing.Color.Cyan;
                                        this.lbLastCargaConectorCF.Invoke((MethodInvoker)delegate { lbLastCargaConectorCF.Text = "ULTIMA ATUALIZAÇÃO " + DateTime.Now.ToShortDateString(); });
                                        this.txtVisorMsgConectorCF.Invoke((MethodInvoker)delegate { txtVisorMsgConectorCF.Text = "CAIXA LIVRE..."; });
                                        fileRecepcao = Directory.GetFiles(@"c:\conector\recepcao\");
                                    }
                                }
                            }
                        }
                    }
                    fileRecepcao = Directory.GetFiles(@"c:\conector\recepcao\");
                }
            }
            /*conectorBalanca.DataReceived += new SerialDataReceivedEventHandler(DataReceivedHandler);

            conectorBalanca.Open();
            if (conectorBalanca.IsOpen)
            {
                

                string data = conectorBalanca.ReadExisting();

                try
                
                {
                    //conectorBalanca.GetPortNames();
                    //conectorBalanca.ReadLine();
                    int bytes = conectorBalanca.BytesToRead;
                    arranjoBytes = new byte[conectorBalanca.BytesToRead];
                    conectorBalanca.Read(arranjoBytes, 0, arranjoBytes.Length);
                    PortBuffer.AddRange(arranjoBytes);
                    for (int t = 0; t < bytes; t++)
                    {
                        lbQttyConectorCF.Text += (arranjoBytes[t]).ToString();
                    }
                }
                catch (Exception)
                {
                    
                }
                
            }
            conectorBalanca.Close();*/
            if (fileRecepcao.GetLength(0) == 0)
            {
                if (fileTransmissao.GetLength(0) == 0)
                {
                    workObject.RequestStop(true);   
                }
            }
        }
        protected void conector_limpa_consulta()
        {
            dgvPesquisaProduto.Rows.Clear();
            if (dgvPesquisaProduto.RowCount < 1)
            {
                dgvPesquisaProduto.Rows.Add();
            }
            txtPesquisaProduto.Clear();
            lblPesquisaDescricao.Text = "F5 - DESCRIÇÃO";
            lblPesquisaCodigo.Text = "F2 - CODIGO *";
            txtPesquisaProduto.Select();
        }
        protected void conector_call_consulta()
        {
            if (String.Format("{0:ddMMyy}", DateTime.Now) == fiscal_data_movimento || ((fiscal_flag == 0 || fiscal_flag == 32 || fiscal_flag == 33 || fiscal_flag == 37|| fiscal_flag == 1) && call_pdv ==  0))
            {
                txtVisorMsgConectorCF.Text = "CONSULTA PRODUTO";
                this.pnlConsultaProduto.Visible = true;
                this.pnlConsultaProduto.Location = new System.Drawing.Point(1, 92);
                this.pnlConsultaProduto.Size = new System.Drawing.Size(1150, 526);
                call_produto = call_pdv;
                call_pdv = 9;
                conector_limpa_consulta();
                auxTipoConsulta = "2";
                txtPesquisaProduto.Select();
            }
            else
            {
                msg = new msgInfo("COMANDO NEGADO, VERIFIQUE O STATUS DA IMPRESSORA."); msg.ShowDialog();
            }
        }

        protected void conector_call_pgtoReserva()
        {
            if (txtSubTotalNfce.Text != "" && Convert.ToDecimal(txtSubTotalNfce.Text.Replace(",", ".")) > 0)
            {
                if (Convert.ToDecimal(txtSubTotalNfce.Text.Replace(",", ".")) > 0)
                {
                    call_pdv = 3;
                    btnFinalizadoraDinheiroConectorCF.Select();
                    txtEntradaDadosNF.CausesValidation = false;
                    txtEntradaDadosNF.ReadOnly = true;
                    resetFinanceiro();
                    txtVisorNfce.Text = "PAGAMENTO";
                    this.pnlTotalConectorCF.Visible = true;
                    this.pnlTotalConectorCF.Location = new System.Drawing.Point(1, 91);
                    //this.pnlTotalConectorCF.Size = new System.Drawing.Size(650, 527);
                    this.pnlTotalConectorCF.Size = new System.Drawing.Size(650, 527);
                }
            }
        }
        protected void conector_call_pgto()
        {
            //fiscal_retorno = conectorECF.Bematech_FI_NumeroCupom(ref fiscal_Cupom_coo);
            //conectorECF.Analisa_iRetorno(fiscal_retorno, ref fiscal_MSG);
            functionECF.conectorECF_NumeroCupom(alwaysVariables.ModeloEcf, ref fiscal_Cupom_coo, ref fiscal_MSG, ref fiscal_retorno, alwaysVariables.ECF_Ligada);

            if (String.Format("{0:ddMMyy}", DateTime.Now) == fiscal_data_movimento || fiscal_flag == 35)
            {
                if (call_pdv == 0)
                {
                    txtAutorizacaoUsuarioConectorCF.CausesValidation = false;
                    if (txtSubTotalConectorCF.Text != "" && Convert.ToDecimal(txtSubTotalConectorCF.Text.Replace(",",".")) > 0)
                    {
                        if (Convert.ToDecimal(txtSubTotalConectorCF.Text.Replace(",", ".")) > 0)
                        {
                            call_pdv = 3;
                            btnFinalizadoraDinheiroConectorCF.Select();
                            txtEntradaDadosConectorCF.CausesValidation = false;
                            txtEntradaDadosConectorCF.ReadOnly = true;
                            resetFinanceiro();
                            if (Convert.ToDouble(reservaFinanceiro) > 0)
                            {
                                auxConsistencia = 0;
                                objFinanceiro(true);

                                for (int i = 0; i < vetorReservaFinanceiro.Length; i++)
                                {
                                    if (vetorReservaFinanceiro[i] != "#")
                                    {
                                        switch (i)
                                        {
                                            case 1:
                                                txtDinheiroConectorCF.Text = String.Format("{0:F2}", Convert.ToDecimal(vetorReservaFinanceiro[i])).Replace(".", ",").Trim();
                                                break;
                                            case 2:
                                                txtChequeConectorCF.Text = String.Format("{0:F2}", vetorReservaFinanceiro[i]).Replace(".", ",").Trim();
                                                break;
                                            case 3:
                                                txtCrediarioConectorCF.Text = String.Format("{0:F2}", vetorReservaFinanceiro[i]).Replace(".", ",").Trim();
                                                break;
                                            case 4:
                                                txtConvenioConectorCF.Text = String.Format("{0:F2}", vetorReservaFinanceiro[i]).Replace(".", ",").Trim();
                                                break;
                                            case 5:
                                                txtCartaoCreditoConectorCF.Text = String.Format("{0:F2}", vetorReservaFinanceiro[i]).Replace(".", ",").Trim();
                                                break;
                                            case 6:
                                                txtCartaoDebitoConectorCF.Text = String.Format("{0:F2}", vetorReservaFinanceiro[i]).Replace(".", ",").Trim();
                                                break;
                                            case 7:
                                                txtBoletoConectorCF.Text = String.Format("{0:F2}", vetorReservaFinanceiro[i]).Replace(".", ",").Trim();
                                                break;
                                            case 8:
                                                txtDuplicataConectorCF.Text = String.Format("{0:F2}", vetorReservaFinanceiro[i]).Replace(".", ",").Trim();
                                                break;
                                            case 9:
                                                txtRecebimentoConectorCF.Text = String.Format("{0:F2}", vetorReservaFinanceiro[i]).Replace(".", ",").Trim();
                                                break;
                                            case 10:
                                                txtValeConectorCF.Text = String.Format("{0:F2}", vetorReservaFinanceiro[i]).Replace(".", ",").Trim();
                                                break;
                                        }
                                        auxConsistencia++;
                                    }
                                }
                                if (auxConsistencia > 0)
                                {
                                    msg = new msgInfo("FORMA DE PAGAMENTO INICIADA PELO SISTEMA, CONFIRME O TOTAL INFORMADO COM O TOTAL FATURADO."); msg.ShowDialog();
                                    txtDinheiroConectorCF.ReadOnly = false;
                                }
                                else
                                {
                                    reservaFinanceiro = "0";
                                    objFinanceiro(false);
                                }
                            }
                            if (fiscal_last_reducao_dataMovimento.Trim() != "")
                            {
                                recuperaCard(fiscal_Cupom_coo, alwaysVariables.Terminal, alwaysVariables.Store);
                            }
                            txtVisorMsgConectorCF.Text = "PAGAMENTO";
                            this.pnlTotalConectorCF.Visible = true;
                            this.pnlTotalConectorCF.Location = new System.Drawing.Point(1, 91);
                            //this.pnlTotalConectorCF.Size = new System.Drawing.Size(650, 527);
                            this.pnlTotalConectorCF.Size = new System.Drawing.Size(650, 527);
                        }
                    }
                }
            }
            else
            {
                //######################Cancela o cupom fiscal se houver
                if (fiscal_flag == 33 || fiscal_flag == 36 || fiscal_flag == 37)
                {
                    functionECF.conectorECF_CancelaCupom(alwaysVariables.ModeloEcf, ref fiscal_MSG, ref fiscal_retorno, alwaysVariables.ECF_Ligada);
                    //fiscal_retorno = conectorECF.Bematech_FI_CancelaCupom();
                    //conectorECF.Analisa_iRetorno(fiscal_retorno, ref fiscal_MSG);
                    pedido = "0";
                    fiscal_flag = 0;
                    functionECF.conectorECF_fiscal_flag(alwaysVariables.ModeloEcf, ref fiscal_flag, ref fiscal_MSG, ref fiscal_retorno, alwaysVariables.ECF_Ligada);
                    resetLabel();
                    resetVariable();
                    ltbDetalhesConectorCF.Clear();
                    ltbDetalhesConectorCF.Text = " ITEM  CÓDIGO  DESCRIÇÃO QTD  UN VL UNIT(R$) ST VL ITEM(R$)" + "\r\n" +
                                                 "===========================================================";
                    rtbVisualizacaoDadosNf.Clear();
                    rtbVisualizacaoDadosNf.Text = " ITEM  CÓDIGO  DESCRIÇÃO QTD  UN VL UNIT(R$) ST VL ITEM(R$)" + "\r\n" +
                                                                                                                                                 "===========================================================";

                    txtVisorMsgConectorCF.Text = "CUPOM FISCAL CANCELADO";
                    conectorPDV_exe_cupom(fiscal_Cupom, fiscal_numero_caixa, produto_barra);
                }

                //######################Dita a messagem
                msg = new msgInfo("DATA DA IMPRESSORA DIFERENTE DA DATA DO SISTEMA,\n VERIFIQUE O STATUS DA IMPRESSORA,\n MOVIMENTO DO DIA VESUS DATA IMPRESSORA,\n AGUARDANDO EMISSÃO DA LEITURA Z."); msg.ShowDialog();
                //######################Entra no menu pdv
                fiscal_flag = 0;
                functionECF.conectorECF_fiscal_flag(alwaysVariables.ModeloEcf, ref fiscal_flag, ref fiscal_MSG, ref fiscal_retorno, alwaysVariables.ECF_Ligada);
                call_finalizadora = null;
                typeDescAcre = 0;
                this.txtEntradaDadosConectorCF.Font = new System.Drawing.Font("Microsoft Sans Serif", 38F, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
                txtAutorizacaoUsuarioConectorCF.CausesValidation = true;
                this.lblVisorEntradaDadosConectorCF.Location = new System.Drawing.Point(284, 511);
                this.txtEntradaDadosConectorCF.Font = new System.Drawing.Font("Microsoft Sans Serif", 38F, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
                conector_reset_discount();

                if (pnlTotalConectorCF.Visible == false)
                {
                    vetorTotal = null;
                    fechaMoneyObj(true);
                    call_pdv = 1;
                    resetLabel();
                    resetVariable();
                    conector_reset_input();
                    conector_acao_carregaMenu();
                    pnlAutorizacaoPDVConectorCF.Visible = true;
                    this.pnlAutorizacaoPDVConectorCF.Location = new System.Drawing.Point(0, 92);
                    this.pnlAutorizacaoPDVConectorCF.Size = new System.Drawing.Size(649, 233);
                    txtEntradaDadosConectorCF.CausesValidation = false;
                    txtAutorizacaoUsuarioConectorCF.CausesValidation = false;
                    txtAutorizacaoUsuarioConectorCF.Select();
                    txtAutorizacaoUsuarioConectorCF.CausesValidation = true;
                    txtEntradaDadosConectorCF.CausesValidation = true;
                }
                if (alwaysVariables.ModoOperacao == 1)
                {
                    txtEntradaDadosConectorCF.Select();
                }
                else
                {
                    txtEntradaDadosNF.Select();
                }
            }
        }
        protected string conector_cancela_cupom(int flag)
        {
            if (flag == 33 || flag == 35)
            {
                functionECF.conectorECF_CancelaCupom(alwaysVariables.ModeloEcf, ref fiscal_MSG, ref fiscal_retorno, alwaysVariables.ECF_Ligada);
                //fiscal_retorno = conectorECF.Bematech_FI_CancelaCupom();
                //conectorECF.Analisa_iRetorno(fiscal_retorno, ref fiscal_MSG);
                if (fiscal_retorno != 1) { txtVisorMsgConectorCF.Text = fiscal_MSG; }
                else
                {
                    fiscal_flag = 0;
                    functionECF.conectorECF_fiscal_flag(alwaysVariables.ModeloEcf, ref fiscal_flag, ref fiscal_MSG, ref fiscal_retorno, alwaysVariables.ECF_Ligada);
                    resetLabel();
                    resetVariable();
                    ltbDetalhesConectorCF.Clear();
                    ltbDetalhesConectorCF.Text = " ITEM  CÓDIGO  DESCRIÇÃO QTD  UN VL UNIT(R$) ST VL ITEM(R$)" + "\r\n" +
                                                 "===========================================================";
                    rtbVisualizacaoDadosNf.Clear();
                    rtbVisualizacaoDadosNf.Text = " ITEM  CÓDIGO  DESCRIÇÃO QTD  UN VL UNIT(R$) ST VL ITEM(R$)" + "\r\n" +
                                                                                                                                                 "===========================================================";

                    txtVisorMsgConectorCF.Text = "CUPOM FISCAL CANCELADO";
                    conectorPDV_exe_cupom(fiscal_Cupom, fiscal_numero_caixa, produto_barra);
                    ataque = 1;
                    call_pdv = 0;
                    msgInfo msg = new msgInfo("Caro Cliente - " + "Instrução Interrompida - Cancelada pelo sistema \n, falha ao carregar a reserva."); msg.ShowDialog();
                }
            }
            return "ERRO NA OPERAÇÃO, WEB FORA DO AR";
        }
        //#############################################################End Metodos####################################################################
        //######################################################Metodos e Funções MSDN############################################################
        public static string Left(string param, int length)
        {
            //we start at 0 since we want to get the characters starting from the
            //left and with the specified lenght and assign it to a variable
            string result = param.Substring(0, length);
            //return the result of the operation
            return result;
        }
        //public static string Right(string param, int length)
        public string Right(string param, int length)
        {
            //start at the index based on the lenght of the sting minus
            //the specified lenght and assign it a variable
            string result = param.Substring(param.Length - length, length);
            //return the result of the operation
            return result;
        }
        //######################################################END Metodos e Funções MSDN########################################################
        //######################################################Funcão do Crediario###############################################################
        #region 
        //###########################################################Variaveis Encapsuladas####################################################################
        private int ataque = 0;
        private int countRowsWeb = 0;
        private int countRowsWebCliente = 0;
        private string auxIdParcela = ""; 
        private string defaultLoja;
        private decimal somatorio = 0;
        private string auxTypeHistory = "7";
        private string reservaFinanceiro = "0";
        private string logica = "0";
        private string auxStatusParcela = null;
        private string auxStatusCrediario = null;
        private string flagDiscount = "0,00";
        private string flagIdFuncionario = "0";
        private string flagFuncao = "0";
        private string flagDescricaoFuncionario = "";
        private string flagDescricaoFuncao = "";
        private string auxIdCliente;
        private string auxTipoPessoa;
        private string auxIdLoja;
        private string auxIdFinalizadora = "1";
        private int flag_recebimento = 0;
        private int flagParada = 0;
        private int flagSemaforo = 0;
        private crediario calculo = new crediario();
        private string auxTypeCartao = "2";
        private string auxMaquineta = "1";

        //###########################################################FUNÇÕES WEBSERVICE #######################################################################
        protected int conector_load_reserva_pessoa(string store, string cpf_cgc)
        {
            int retorno = 0;
            //fiscal_retorno = conectorECF.Bematech_FI_FlagsFiscais(ref fiscal_flag);
            //conectorECF.Analisa_iRetorno(fiscal_retorno, ref fiscal_MSG);
            fiscal_flag = 0;
            functionECF.conectorECF_fiscal_flag(alwaysVariables.ModeloEcf, ref fiscal_flag, ref fiscal_MSG, ref fiscal_retorno, alwaysVariables.ECF_Ligada);
            if (fiscal_flag == 32 || fiscal_flag == 0 || fiscal_flag == 4 || fiscal_flag == 36)
            {
                int resultado = conectorPDV_find_cliente("0", cpf_cgc);
                if (resultado == 0)
                {
                    if (call_pdv != 1)
                    {
                        call_pdv = 0;
                    }

                    //fiscal_retorno = conectorECF.Bematech_FI_AbreCupom(input_cliente);
                    functionECF.conectorECF_AbreCupomMFD(alwaysVariables.ModeloEcf, input_cliente, pessoa_nome, pessoa_endereco, ref fiscal_MSG, ref fiscal_retorno, alwaysVariables.ECF_Ligada);
                    if (backgroundConectorCupom.IsBusy != true)
                    {
                        // Start the asynchronous operation.
                        backgroundConectorCupom.RunWorkerAsync();
                    }

                    if (fiscal_retorno == 1 && functionECF.conectorECF_Analisa_RetornoImpressora(alwaysVariables.ModeloEcf,ref ACK, ref ST1, ref ST2, ref ST3, ref fiscal_MSG))
                    {
                        //fiscal_retorno = conectorECF.Bematech_FI_NumeroCupom(ref fiscal_Cupom);
                        functionECF.conectorECF_NumeroCupom(alwaysVariables.ModeloEcf, ref fiscal_Cupom, ref fiscal_MSG, ref fiscal_retorno, alwaysVariables.ECF_Ligada);
                        conectorPDV_inc_cupom_cabecalho(fiscal_Cupom, fiscal_numero_caixa, null, lbOperadorConectorCF.Text == "" ? banco_operado : lbOperadorConectorCF.Text, null, null, null, null, null, DateTime.Now, null, 0, null, 0, null, null, null, null, null, null, null, pedido,"1");
                        retorno = 0;
                    }
                    else { txtVisorMsgConectorCF.Text = fiscal_MSG; retorno = 1; }
                    if (fiscal_MSG != "" && fiscal_retorno != 1)
                    {
                        txtVisorMsgConectorCF.Text = fiscal_MSG;
                    }
                    if (call_pdv != 1)
                    {
                        ltbDetalhesConectorCF.Clear();
                        ltbDetalhesConectorCF.Text = " ITEM  CÓDIGO  DESCRIÇÃO QTD  UN VL UNIT(R$) ST VL ITEM(R$)" + "\r\n" +
                                                      "========================================================";
                    }

                    if (fiscal_retorno != 1) { txtVisorMsgConectorCF.Text = fiscal_MSG; retorno = 1; }
                    else
                    {
                        retorno = 0;
                    }
                    //input_cliente = null;
                    lblVisorEntradaDadosConectorCF.Text = "ENTRADA DE DADOS";
                }
                else
                {
                    lblVisorEntradaDadosConectorCF.Text = "CLIENTE INVALIDO OU NÃO EXISTE";
                    retorno = 1;
                }
            }
            else
            {
                retorno = 1;
            }

            return retorno;
        }
        protected int conector_load_nota_D_itens_old(string store, string produto, string qtty, string valor_unitario, string descontoValor)
        {
            index = produto.IndexOf("*");

            resetLabel();

            fiscal_flag = 0;

            reserva_qtty_itens =  qtty;
            reserva_valor_un = valor_unitario.Replace(",",".");

            //fiscal_retorno = conectorECF.Bematech_FI_FlagsFiscais(ref fiscal_flag);
            functionECF.conectorECF_fiscal_flag(alwaysVariables.ModeloEcf, ref fiscal_flag, ref fiscal_MSG, ref fiscal_retorno, alwaysVariables.ECF_Ligada);
            
            //Carrega Variaveis do Produto
            conector_produto(produto = Right(produto, (produto.Length - (index + 1))), alwaysVariables.Store, ref registro);

            if (registro == 0)
            {
                //conector_produto(produto = Right(produto, (produto.Length - (index + 1))), alwaysVariables.Store, ref registro);
                if (fiscal_flag == 0 || fiscal_flag == 32 || fiscal_flag == 36)
                {
                    txtVisorMsgConectorCF.Text = "CUPOM FISCAL - ABERTO";
                    //fiscal_retorno = conectorECF.Bematech_FI_AbreCupom("");
                    functionECF.conectorECF_AbreCupomMFD(alwaysVariables.ModeloEcf, "", "", "", ref fiscal_MSG, ref fiscal_retorno, alwaysVariables.ECF_Ligada);
                    if (backgroundConectorCupom.IsBusy != true)
                    {
                        // Start the asynchronous operation.
                        backgroundConectorCupom.RunWorkerAsync();
                    }

                    if (fiscal_retorno == 1 && functionECF.conectorECF_Analisa_RetornoImpressora(alwaysVariables.ModeloEcf,ref ACK, ref ST1, ref ST2, ref ST3, ref fiscal_MSG))
                    {
                        //fiscal_retorno = conectorECF.Bematech_FI_NumeroCupom(ref fiscal_Cupom);
                        functionECF.conectorECF_NumeroCupom(alwaysVariables.ModeloEcf, ref fiscal_Cupom, ref fiscal_MSG, ref fiscal_retorno, alwaysVariables.ECF_Ligada);
                        conectorPDV_inc_cupom_cabecalho(fiscal_Cupom, fiscal_numero_caixa, null, lbOperadorConectorCF.Text, null, null, null, null, null, DateTime.Now, null, 0, null, 0, null, null, null, null, NotaNumber, SerieNumber, null, pedido,"1");
                    }
                    else { txtVisorMsgConectorCF.Text = fiscal_MSG; ataque = 1; }
                    if (fiscal_MSG != "" && fiscal_retorno != 1)
                    {
                        txtVisorMsgConectorCF.Text = fiscal_MSG;
                        ataque = 1;
                    }
                    if (call_pdv == 0)
                    {
                        ltbDetalhesConectorCF.Clear();
                        ltbDetalhesConectorCF.Text = " ITEM  CÓDIGO  DESCRIÇÃO QTD  UN VL UNIT(R$) ST VL ITEM(R$)" + "\r\n" +
                                                      "========================================================";
                        rtbVisualizacaoDadosNf.Clear();
                        rtbVisualizacaoDadosNf.Text = " ITEM  CÓDIGO  DESCRIÇÃO QTD  UN VL UNIT(R$) ST VL ITEM(R$)" + "\r\n" +
                                                                                                                                                 "===========================================================";
                    }
                }
                else if (fiscal_flag == 33 || fiscal_flag == 1 || fiscal_flag == 37)
                {
                    txtVisorMsgConectorCF.Text = "CUPOM FISCAL ABERTO";
                }

                if (Convert.ToDecimal(valor_unitario) > 0)
                {
                    if (produto_tipo_quantidade == "I")
                    {
                        if (Convert.ToDecimal(qtty.Replace(",",".")) < 0 )
                        {
                            qtty = Math.Round(Decimal.Parse(produto_qtty.Replace(",",".")), 0).ToString();   
                        }
                    }
                    else if (produto_tipo_quantidade == "F")
                    {
                        if (Convert.ToDecimal(lbQttyConectorCF.Text.Replace(",", ".")) == 0)
                        {
                            qtty = lbQttyConectorCF.Text;
                        }
                        else
                        {
                            qtty = Math.Round(Decimal.Parse(produto_qtty.Replace(",", ".")), 3).ToString().Replace(".", ",");
                        }
                    }

                    string var = Math.Round(Decimal.Parse(valor_unitario.Replace(",", ".")), 2).ToString().Replace(".", ",");
                    functionECF.conectorECF_VendeItem(alwaysVariables.ModeloEcf, produto, produto_descricao, produto_tributacao_mq, produto_tipo_quantidade, qtty.Replace(".", ","), 2, var.Replace(".", ","), "%", "0", ref fiscal_MSG, ref fiscal_retorno, alwaysVariables.ECF_Ligada);
                    produto_qtty = qtty;
                    //fiscal_retorno = conectorECF.Bematech_FI_VendeItem(produto, produto_descricao, produto_tributacao_mq, produto_tipo_quantidade, qtty.Replace(".", ","), 2, Math.Round(Decimal.Parse(valor_unitario), 2).ToString().Replace(".", ","), "%", "0");
                    //conectorECF.Analisa_iRetorno(fiscal_retorno, ref fiscal_MSG);
                    if (fiscal_MSG != "" && fiscal_retorno != 1)
                    {
                        ataque = 1;
                        resetLabel();
                        txtVisorMsgConectorCF.Text = fiscal_MSG;
                    }

                    if (fiscal_retorno == 1)
                    {
                        /*
                        fiscal_GT_Crypt = new string('\x20', 20);
                        if (File.Exists(folderMFDGrand + "\\grandFullPDV" + ".enc"))
                        {//Atualiza Grande Total
                            File.Delete(folderMFDGrand + "\\grandFullPDV" + ".enc");
                            //fiscal_retorno = conectorECF.Bematech_FI_GrandeTotalCriptografado(ref fiscal_GT_Crypt);
                            functionECF.conectorECF_GrandeTotal_Crypt(alwaysVariables.ModeloEcf, ref fiscal_GT_Crypt, ref fiscal_MSG, ref fiscal_retorno, alwaysVariables.ECF_Ligada);
                            cryptografia.conectorPDV_serie(alwaysVariables.PAF_total + "\\grandFullPDV" + ".txt", "0");
                            File.Delete(alwaysVariables.PAF_total + "\\grandFullPDV" + ".txt");
                        }
                         * */
                        if (backgroundConectorGrandeTotal.IsBusy != true)
                        {
                            // Start the asynchronous operation.
                            backgroundConectorGrandeTotal.RunWorkerAsync();
                        }
                        arranqueTotal = 1;
                    }

                    if (fiscal_retorno == 1 && functionECF.conectorECF_Analisa_RetornoImpressora(alwaysVariables.ModeloEcf,ref ACK, ref ST1, ref ST2, ref ST3, ref fiscal_MSG))
                    {
                        sequenciaItem = (Int32.Parse(sequenciaItem) + 1).ToString().PadLeft(3, '0');
                        if (call_pdv == 0 || call_pdv == 10)
                        {
                            if (Convert.ToDecimal(qtty.Replace(",", ".")) < 0)
                            {

                                ltbDetalhesConectorCF.Text += sequenciaItem + "    "
                           + produto_barra + "    "//produto_barra.PadLeft(12, '0') + "    "
                           + produto_descricao + "    "
                           + (produto_pesavel == "0" ? produto_qtty.Replace(".", ",") : "    ") + "    "
                           + produto_unidade + "    "
                           + (produto_pesavel == "0" ? Math.Round(Convert.ToDecimal(produto_qtty)) + produto_unidade : String.Format("{0:F3}", Decimal.Parse(produto_qtty.Replace(",", ".")), 3).ToString().Replace(".", ",") + " X " + produto_unidade) + "    "
                           + produto_valor_unitario + "      "
                           + produto_tributacao + "    "
                           + Math.Round((Decimal.Parse(produto_qtty.Replace(",", ".")) * Decimal.Parse(produto_valor_unitario.Replace(",", "."))), 2).ToString().Replace(".", ",") + "\r\n";
                                ltbDetalhesConectorCF.Text += "___________________________________________________________" + "\r\n";
                                ltbDetalhesConectorCF.Select(ltbDetalhesConectorCF.Text.Length, 0);
                                ltbDetalhesConectorCF.ScrollToCaret();
                            }
                            else
                            {
                                string itens = "0";
                                if (txtEntradaDadosConectorCF.Text == produto_barra)
                                {
                                    itens = produto_barra;
                                }
                                else
                                {
                                    itens = produto_chave;
                                }
                                ltbDetalhesConectorCF.Text += sequenciaItem + "    "
                                                           + itens + "    "//produto_barra.PadLeft(12, '0') + "    "
                                                           + produto_descricao + "    "
                                                           + (produto_pesavel == "0" ? qtty.Replace(".", ",") : "    ") + "    "
                                                           + produto_unidade + "    "
                                                           + (produto_pesavel == "0" ? Math.Round(Convert.ToDecimal(qtty)) + produto_unidade : String.Format("{0:F3}", Decimal.Parse(qtty.Replace(",", ".")), 3).ToString().Replace(".", ",") + " X " + produto_unidade) + "    "
                                                           + produto_valor_unitario + "      "
                                                           + produto_tributacao + "    "
                                                           + Math.Round((Decimal.Parse(qtty.Replace(",", ".")) * Decimal.Parse(produto_valor_unitario.Replace(",", "."))), 2).ToString().Replace(".", ",") + "\r\n";
                                ltbDetalhesConectorCF.Text += "___________________________________________________________" + "\r\n";
                                ltbDetalhesConectorCF.Select(ltbDetalhesConectorCF.Text.Length, 0);
                                ltbDetalhesConectorCF.ScrollToCaret();
                            }

                        }
                        last_item_qtty = produto_qtty;
                        last_item_valor_unitario = produto_valor_unitario;
                        last_item_tipo_desconto = produto_tipo_desconto;
                        last_item_desconto = produto_desconto;
                        last_item_price_venda = produto_price_venda;
                        last_valor_item = produto_valor_unitario;
                        last_qtty_item = produto_qtty;

                        //Insert o item 'cupom detalhes'
                        if (Convert.ToDecimal(qtty.Replace(",", ".")) < 0)
                        {
                            conectorPDV_inc_cupom_detalhes(fiscal_Cupom, fiscal_numero_caixa, produto_chave, produto_barra, produto_descricao, produto_qtty, Math.Round(Decimal.Parse(produto_valor_unitario.Replace(",", ".")), 2).ToString().Replace(",", "."), produto_desconto, (Decimal.Parse(produto_valor_unitario.Replace(",", ".")) * Math.Round(Decimal.Parse(produto_qtty.Replace(",", ".")), 2)).ToString(), lbOperadorConectorCF.Text /*rever*/, produto_tipo_quantidade, produto_unidade, "0,00", reserva_metodo, pedido, produto_tributacao, produto_price_custo, "0.00", "0.00", "0", produto_chave, produto_trunca, produto_ippt);
                        }
                        else
                        {
                            conectorPDV_inc_cupom_detalhes(fiscal_Cupom, fiscal_numero_caixa, produto_chave, produto_barra, produto_descricao, qtty, Math.Round(Decimal.Parse(produto_valor_unitario.Replace(",", ".")), 2).ToString().Replace(",", "."), produto_desconto, (Decimal.Parse(produto_valor_unitario.Replace(",", ".")) * Math.Round(Decimal.Parse(qtty.Replace(",", ".")), 2)).ToString(), lbOperadorConectorCF.Text /*rever*/, produto_tipo_quantidade, produto_unidade, "0,00", reserva_metodo, pedido, produto_tributacao, produto_price_custo, "0.00", "0.00", "0", produto_chave, produto_trunca, produto_ippt);
                        }

                        if (fiscal_retorno == 1 && auxConsistencia == 0)
                        {
                            if (Convert.ToDouble(descontoValor.Replace(",", ".")) > 0)
                            {
                                string test = String.Format("{0:F2}", ((Convert.ToDecimal(descontoValor.Replace(",", ".")) / Math.Round((Decimal.Parse(last_item_qtty.Replace(",", ".")) * Decimal.Parse(last_item_valor_unitario.Replace(",", "."))), 2))) * 100).ToString().Replace(".", ",");
                                functionECF.conectorECF_AcrescimoDescontoItem(alwaysVariables.ModeloEcf, sequenciaItem, "D", last_item_tipo_desconto, String.Format("{0:F2}", ((Convert.ToDecimal(descontoValor.Replace(",", ".")) / Math.Round((Decimal.Parse(last_item_qtty.Replace(",", ".")) * Decimal.Parse(last_item_valor_unitario.Replace(",", "."))), 2))) * 100).ToString().Replace(".", ","), ref fiscal_MSG, ref fiscal_retorno, alwaysVariables.ECF_Ligada);
                                //fiscal_retorno = conectorECF.Bematech_FI_AcrescimoDescontoItemMFD(sequenciaItem, "D", last_item_tipo_desconto, String.Format("{0:F2}", ((Convert.ToDecimal(descontoValor.Replace(",", ".")) / Math.Round((Decimal.Parse(last_item_qtty.Replace(",", ".")) * Decimal.Parse(last_item_valor_unitario.Replace(",", "."))), 2))) * 100).ToString().Replace(".", ","));
                                if (functionECF.conectorECF_Analisa_RetornoImpressora(alwaysVariables.ModeloEcf,ref ACK, ref ST1, ref ST2, ref ST3, ref fiscal_MSG))
                                {
                                    conectorPDV_PAFECF_exe("R04", fiscal_Cupom.Replace(",", "").Trim(), 5, produto_barra.Replace("\0", "").Trim(), sequenciaItemAle);
                                    conectorPDV_PAFECF_exe("R05", fiscal_Cupom.Replace(",", "").Trim(), 4, produto_barra.Replace("\0", "").Trim(), sequenciaItemAle);
                                    call_pdv = 0;
                                    call_funcao = 0;
                                    txtVisorMsgConectorCF.Text = "CUPOM FISCAL ABERTO";
                                    this.ltbDetalhesConectorCF.ForeColor = System.Drawing.Color.Yellow;
                                    //string bof = String.Format("{0:F2}", (Convert.ToDecimal(txtEntradaDadosConectorCF.Text.Replace(",", ".")))) + "% (R$ " + String.Format("{0:F2}", ((Convert.ToDecimal(txtEntradaDadosConectorCF.Text.Replace(",", ".")) * (Convert.ToDecimal(last_valor_item.Replace(",", ".")) * Convert.ToDecimal(last_qtty_item))) / 100));
                                    ltbDetalhesConectorCF.Text += "                                     DESCONTO ITEM => " + sequenciaItem + "   " + test + "% (R$ " + descontoValor + ")" + "\r\n";
                                    this.ltbDetalhesConectorCF.ForeColor = System.Drawing.Color.White;
                                    conector_desconto_item(fiscal_Cupom, fiscal_store.Replace("\0", "").Trim(), fiscal_numero_caixa.Replace("\0", "").Trim(), sequenciaItem, test.Replace(",", "."));
                                    resetLabel();
                                    txtEntradaDadosConectorCF.Clear();
                                    conector_find_subFull("1");
                                    if (alwaysVariables.ModoOperacao == 1)
                                    {
                                        if (alwaysVariables.ModoOperacao == 1)
                                        {
                                            txtEntradaDadosConectorCF.Select();
                                        }
                                        else
                                        {
                                            txtEntradaDadosNF.Select();
                                        }
                                    }
                                    else
                                    {
                                        txtEntradaDadosNF.Select();
                                    }
                                    valuesAcresDesc = "    ";
                                    acresDesc = " ";
                                }
                                else
                                {
                                    call_pdv = 0;
                                    call_funcao = 0;
                                    txtVisorMsgConectorCF.Text = functionECF.conectorECF_Erros(alwaysVariables.ModeloEcf);
                                    this.ltbDetalhesConectorCF.ForeColor = System.Drawing.Color.White;
                                    conector_desconto_item(fiscal_Cupom, fiscal_store.Replace("\0", "").Trim(), fiscal_numero_caixa.Replace("\0", "").Trim(), sequenciaItem, test.Replace(",", "."));
                                    resetLabel();
                                    txtEntradaDadosConectorCF.Clear();
                                    conector_find_subFull("1");
                                    if (alwaysVariables.ModoOperacao == 1)
                                    {
                                        txtEntradaDadosConectorCF.Select();
                                    }
                                    else
                                    {
                                        txtEntradaDadosNF.Select();
                                    }
                                    valuesAcresDesc = "    ";
                                    acresDesc = " ";
                                }
                            }
                        }
                    }
                    else
                    {
                        if (functionECF.conectorECF_Erros(alwaysVariables.ModeloEcf) != "")
                        {
                            conector_retorno_ack();
                        }
                        else
                        {
                            txtVisorMsgConectorCF.Text = "ITEM INVÁLIDO - " + produto_barra;
                            ataque = 1;
                        }
                        if (alwaysVariables.ModoOperacao == 1)
                        {
                            txtEntradaDadosConectorCF.Select();
                        }
                        else
                        {
                            txtEntradaDadosNF.Select();
                        }
                        ataque = 1;
                    }
                    txtEntradaDadosConectorCF.Clear();
                }
                else
                {
                    txtEntradaDadosConectorCF.Clear();
                    txtVisorMsgConectorCF.Text = "ITEM INVÁLIDO - PREÇO ZERADO";
                    if (alwaysVariables.ModoOperacao == 1)
                    {
                        txtEntradaDadosConectorCF.Select();
                    }
                    else
                    {
                        txtEntradaDadosNF.Select();
                    }
                    ataque = 1;
                }
            }
            else
            {
                ataque = 1;
            }
            return ataque;
        }

        protected int conector_webservice_situacao_cheque(string numeroCheque, string serie, string conta, string banco, string agencia)
        {
            MyConectorEx = new WebConectorServer.Service(alwaysVariables.UrlWebConector);
            countRowsWeb = -1;
            int w = 0;

            auxConsistencia = 0;
            //int i = 0; //Zera o contador
            string test = "Host Unavailable";
            if (IsConnected() == true)
            {
                test = PingHost(MyConectorEx.Url);
                if (test == null) { test = "Host Unavailable"; }
            }
            else
            {
                test = "Host Unavailable";
                countRowsWeb = -1;
            }

            if (test == "Service Up")
            {
                /*---------------------Case Falha WebService------------------------------*/
                try
                {
                    auxConsistencia = 0;
                    pgbWaitReservaConectorCF.Value = 1;
                    countRowsWeb = MyConectorEx.ObterResultCheque(conta, serie, agencia, banco, numeroCheque);
                }
                catch (Exception e)
                {
                    auxConsistencia = 1;
                }finally
                {
                    if (auxConsistencia == 1)
                    {
                        countRowsWeb = -1;
                    }
                }
            }
            return countRowsWeb;
        }

        protected Boolean conector_webservice_nfce_numeroNota(string store, ref string numero, ref string serie, ref string lote, ref string chave)
        {
            MyConectorEx = new WebConectorServer.Service(alwaysVariables.UrlWebConector);

            auxConsistencia = 0;
            countRowsWeb = 0;
            Boolean valida = false;

            string test = "Host Unavailable";
            if (IsConnected() == true)
            {
                test = PingHost(MyConectorEx.Url);
                if (test == null) { test = "Host Unavailable"; }
            }
            else
            {
                test = "Host Unavailable";
            }

            if (test == "Service Up")
            {
                /*---------------------Case Falha WebService------------------------------*/
                try
                {
                    auxConsistencia = 0;
                    pgbWaitReservaConectorCF.Value = 1;//conectorPDV_index(pedido);
                    dsRNumeroNota = MyConectorEx.ObterNumNr(store, alwaysVariables.TipoNf);
                    countRowsWeb = dsRNumeroNota.Tables[0].DefaultView.Count;

                }
                catch (Exception e)
                {
                    auxConsistencia = 1;
                    valida = false;
                    countRowsWeb = 0;
                }
                finally
                {
                    if (auxConsistencia == 0 && countRowsWeb > 0)
                    {
                        numero = dsRNumeroNota.Tables[0].Rows[0][1].ToString();
                        serie = dsRNumeroNota.Tables[0].Rows[0][2].ToString();
                        lote = dsRNumeroNota.Tables[0].Rows[0][0].ToString();
                        chave = dsRNumeroNota.Tables[0].Rows[0][3].ToString();
                        valida = true;

                        try
                        {
                            title = banco.abreConexao();
                            banco.startTransaction("conectorPDV_update_storeNf");
                            banco.addParametro("tipo", alwaysVariables.TipoNf);
                            banco.addParametro("varlote", lote);
                            banco.addParametro("varserie", serie);
                            banco.addParametro("varnr_nota", numero);
                            banco.addParametro("store", alwaysVariables.Store);
                            banco.addParametro("find", "0");
                            banco.addParametro("seq", "0");
                            banco.procedimentoSet();

                        }
                        catch (Exception erro) { msgInfo msg = new msgInfo("Caro Cliente - " + erro.Message); msg.ShowDialog(); auxConsistencia = 1; }
                        finally
                        {
                            banco.fechaConexao(); if (title != "") { this.txtTitleCupomFiscalConectorCF.Invoke((MethodInvoker)delegate { txtTitleCupomFiscalConectorCF.Text = title; }); }
                        }
                    }
                    else
                    {
                        numero = null;
                        serie = null;
                        lote = null;
                        chave = null;
                        valida = false;
                    }
                }
            }
            return valida;
        }
        protected int conector_webservice_preVenda_count_expire(string store, string reserva, string dmais, string dmais2)
        {
            MyConectorEx = new WebConectorServer.Service(alwaysVariables.UrlWebConector);

            auxConsistencia = 0;
            countRowsWeb = 0;
            int w = 0;

            auxConsistencia = 0;
            //int i = 0; //Zera o contador
            //fiscal_retorno = conectorECF.Bematech_FI_FlagsFiscais(ref fiscal_flag);
            functionECF.conectorECF_fiscal_flag(alwaysVariables.ModeloEcf, ref fiscal_flag, ref fiscal_MSG, ref fiscal_retorno, alwaysVariables.ECF_Ligada);
            string test = "Host Unavailable";
            if (IsConnected() == true)
            {
                test = PingHost(MyConectorEx.Url);
                if (test == null) { test = "Host Unavailable"; }
            }
            else
            {
                test = "Host Unavailable";
            }

            if (test == "Service Up")
            {
                /*---------------------Case Falha WebService------------------------------*/
                try
                {
                    auxConsistencia = 0;
                    pgbWaitReservaConectorCF.Value = 1;
                    dsRReservaEx = MyConectorEx.ObterPedidoExpire(reserva, store, dmais,dmais2);
                    countRowsWeb = dsRReservaEx.Tables[0].DefaultView.Count;

                }
                catch (Exception e)
                {
                    auxConsistencia = 1;
                }
            }
            return countRowsWeb;
        }

        protected int conector_webservice_preVenda_retorno_pedido(string store, string reserva)
        {
            MyConectorRes = new WebConectorServer.Service(alwaysVariables.UrlWebConector);

            auxConsistencia = 0;
            countRowsWeb = 0;
            int w = 0;

            auxConsistencia = 0;
            //int i = 0; //Zera o contador
            //fiscal_retorno = conectorECF.Bematech_FI_FlagsFiscais(ref fiscal_flag);
            functionECF.conectorECF_fiscal_flag(alwaysVariables.ModeloEcf, ref fiscal_flag, ref fiscal_MSG, ref fiscal_retorno, alwaysVariables.ECF_Ligada);

            string test = "Host Unavailable";
            if (IsConnected() == true)
            {
                test = PingHost(MyConectorRes.Url);
                if (test == null) { test = "Host Unavailable"; }
            }
            else
            {
                test = "Host Unavailable";
            }

            if (test == "Service Up")
            {
                /*---------------------Case Falha WebService------------------------------*/
                try
                {
                    auxConsistencia = 0;
                    pgbWaitReservaConectorCF.Value = 1;
                    MyConectorRes.AlteraStatusPedidoFinal(retornoPedido.ToString(), alwaysVariables.Store, "1", "10", "verde");

                }
                catch (Exception e)
                {
                    auxConsistencia = 1;
                }
            }
            return countRowsWeb;
        }
        protected string conector_webservice_preVenda(string store, string reserva, Int16 aux)
        {
            string reservaTemp = reserva;
            pgbWaitReservaConectorCF.Value = 0;
            ataque = 0;
            int w = 0;
            string value_call = "0";
            //reservaTemp = "0";
            vetorReservaFinanceiro = new string[12] { "#", "#", "#", "#", "#", "#", "#", "#", "#", "#", "#", "#" };

            WebConectorServer.Service MyConector = new WebConectorServer.Service(alwaysVariables.UrlWebConector);

            auxConsistencia = 0;
            //int i = 0; //Zera o contador
            functionECF.conectorECF_fiscal_flag(alwaysVariables.ModeloEcf, ref fiscal_flag, ref fiscal_MSG, ref fiscal_retorno, alwaysVariables.ECF_Ligada);
            string test = "Host Unavailable";
            if (IsConnected() == true)
            {
                test = PingHost(MyConector.Url);
                if (test == null) { test = "Host Unavailable"; }
            }
            else
            {
                test = "Host Unavailable";
            }
            if (test == "Service Up")
            {
                /*---------------------Case Falha WebService------------------------------*/
                try
                {
                    auxConsistencia = 0;
                    pgbWaitReservaConectorCF.Value = 1;
                    dsRReserva = MyConector.ObterPedido(reserva, store, modoPedido.ToString());

                    countRowsWeb = dsRReserva.Tables[0].DefaultView.Count;
                    if (countRowsWeb > 0 )
                    {
                        reserva_number = pedido = reserva = dsRReserva.Tables[0].Rows[0][0].ToString();
                        retornoPedido = Convert.ToDouble(pedido);
                    }
                    //MyConector.AlteraStatusPedidoFinal(reserva, store, "2", "10", "vermelho");
                    auxStatusReserva = MyConector.VerificaStatusPedido(reserva, store).ToString();
                }
                catch (Exception e)
                {
                    auxConsistencia = 1;
                }

                if (auxStatusReserva == "-1" && aux == 0)
                {
                    txtVisorMsgConectorCF.Text = "RESERVA NÃO EXISTE";
                    call_pdv = 0;
                    ataque = 1;
                }
                else if (auxStatusReserva == "1" && aux == 0)
                {
                    txtVisorMsgConectorCF.Text = "RESERVA INCLUIDA NÃO PODE SER CARREGADA";
                    call_pdv = 0;
                    ataque = 1;
                }
                else if (auxStatusReserva == "2" && aux == 0)
                {
                    txtVisorMsgConectorCF.Text = "RESERVA TRAVADA SOLICITE ORIENTAÇÃO AO SUPORTE AO USUARIO, COM ISSO NÃO PODE SER CARREGADA";
                    call_pdv = 0;
                    ataque = 1;
                }
                else if (auxStatusReserva == "7" && aux == 0)
                {
                    txtVisorMsgConectorCF.Text = "RESERVA EXPIDA SOLICITE ORIENTAÇÃO AO SUPORTE AO USUÁRIO, COM ISSO NÃO PODE SER CARREGADA";
                    call_pdv = 0;
                    ataque = 1;
                }
                else if (auxStatusReserva == "9" && aux == 0)
                {
                    txtVisorMsgConectorCF.Text = "RESERVA EM TRANSITO TRANSFERÊNCIA NÃO PODE SER CARREGADA";
                    call_pdv = 0;
                    ataque = 1;
                }
                else if (auxStatusReserva == "5" && aux == 0)
                {
                    txtVisorMsgConectorCF.Text = "RESERVA VENDIDO IMPOSSÍVEL PROSSEGUIR";
                    call_pdv = 0;
                    ataque = 1;
                }
                else if (auxStatusReserva == "6" && aux == 0)
                {
                    txtVisorMsgConectorCF.Text = "RESERVA CANCELADA IMPOSSÍVEL PROSSEGUIR";
                    call_pdv = 0;
                    ataque = 1;
                }
                else if ((((auxStatusReserva == "4" || auxStatusReserva == "3" || auxStatusReserva == "10") && auxConsistencia == 0) || (aux == 1 && auxStatusReserva != "6"))&& countRowsWeb > 0)
                {
                    if (MyConector.VerificaFinalPedido(reserva,store) == 1)
                    {
                        int pgto =Convert.ToInt32(MyConector.VerificaFinalizadoraPedido(reserva,store));
                        if (pgto == 3)
                        {
                            msgInfo msg = new msgInfo("RESERVA NEGADA: " + "FORMA DE PAGAMENTO NÃO PASSOU PELO FATURAMENTO."); msg.ShowDialog(); return "0";
                        }
                    }
                    MyConector.AlteraStatusPedidoFinal(reserva, store, "4", "5", "vermelho");
                    if (countRowsWeb > 0)
                    {
                        if (auxConsistencia == 0)
                        {
                            try
                            {
                                auxConsistencia = 0;
                                auxPessoa = MyConector.verificaExitsPepleo(Convert.ToString(dsRReserva.Tables[0].Rows[0][3]));
                                auxIdCliente = Convert.ToString(dsRReserva.Tables[0].Rows[0][3]);
                            }
                            catch (Exception e)
                            {
                                auxConsistencia = 1;
                                msgInfo msg = new msgInfo("ERRO FATAL - " + "CONEXÃO COM WEBSERVICE FALHOU, REPITA A OPERAÇÃO E VERIFIQUE O STATUS DA INTERNET."); msg.ShowDialog();
                                returnDefaultPDV();
                                txtLojaConectorCF.Select();
                            }
                        }
                        if (auxPessoa == 1 && conector_verifica_exits_pepleoLocal(auxIdCliente) >= 1 && auxConsistencia == 0)
                        {
                            pedido = Convert.ToString(dsRReserva.Tables[0].Rows[0][0]);
                            for (i = 0; i < countRowsWeb; i++)
                            {//Abre o cupom fiscal nesta etapa.
                                value_call = Convert.ToString(dsRReserva.Tables[0].Rows[i][13]);
                                if ((ataque = conectorPDV_replace_reserva(Convert.ToString(dsRReserva.Tables[0].Rows[i][0]),
                                     Convert.ToString(dsRReserva.Tables[0].Rows[i][1]),
                                     Convert.ToString(dsRReserva.Tables[0].Rows[i][2]),
                                     Convert.ToString(dsRReserva.Tables[0].Rows[i][3]),
                                     Convert.ToString(dsRReserva.Tables[0].Rows[i][4]),
                                     Convert.ToString(dsRReserva.Tables[0].Rows[i][5]),
                                     Convert.ToString(dsRReserva.Tables[0].Rows[i][6]),
                                     Convert.ToString(dsRReserva.Tables[0].Rows[i][7]),
                                     Convert.ToString(dsRReserva.Tables[0].Rows[i][8]),
                                     Convert.ToString(dsRReserva.Tables[0].Rows[i][9]),
                                     Convert.ToString(dsRReserva.Tables[0].Rows[i][10]),
                                     Convert.ToString(dsRReserva.Tables[0].Rows[i][11]),
                                     Convert.ToString(dsRReserva.Tables[0].Rows[i][12]),
                                     Convert.ToString(dsRReserva.Tables[0].Rows[i][13]),
                                     Convert.ToString(dsRReserva.Tables[0].Rows[i][14]),
                                     Convert.ToString(dsRReserva.Tables[0].Rows[i][15]),
                                     Convert.ToString(dsRReserva.Tables[0].Rows[i][16]),
                                     Convert.ToString(dsRReserva.Tables[0].Rows[i][17]),
                                     Convert.ToString(dsRReserva.Tables[0].Rows[i][18]),
                                     Convert.ToString(dsRReserva.Tables[0].Rows[i][19]),
                                     Convert.ToString(dsRReserva.Tables[0].Rows[i][20]),
                                     Convert.ToString(dsRReserva.Tables[0].Rows[i][21]),
                                     Convert.ToString(dsRReserva.Tables[0].Rows[i][22]),
                                     Convert.ToString(dsRReserva.Tables[0].Rows[i][23]),
                                     Convert.ToString(dsRReserva.Tables[0].Rows[i][26]),
                                     Convert.ToString(dsRReserva.Tables[0].Rows[i][27]),
                                     Convert.ToString(dsRReserva.Tables[0].Rows[i][28]))) == 0)
                                {
                                    //pgbWaitReservaConectorCF.Value = 2; DE 2 PARA 10, POIS 8 ETAPAS DO CADASTRO DE CLIENTE
                                    pgbWaitReservaConectorCF.Value = 10;
                                }
                            }
                        }
                        else if (MessageBox.Show("Cliente não cadastrado, deseja atualiza-lo?", "Observação", MessageBoxButtons.YesNo, MessageBoxIcon.Question) == System.Windows.Forms.DialogResult.Yes && auxPessoa == 1 && ataque == 0)
                        {
                            if (auxConsistencia == 0)
                            {
                                try
                                {
                                    auxConsistencia = 0;
                                    pgbWaitReservaConectorCF.Value = 2; //Inicio do cadastro de cliente
                                    dsRCliente = MyConector.ObterMainPepleo(auxIdCliente);
                                    countRowsWebCliente = dsRCliente.Tables[0].DefaultView.Count;
                                }
                                catch (Exception e)
                                {
                                    auxConsistencia = 1;
                                    msgInfo msg = new msgInfo("ERRO FATAL - " + "CONEXÃO COM WEBSERVICE FALHOU, REPITA A OPERAÇÃO E VERIFIQUE O STATUS DA INTERNET."); msg.ShowDialog();
                                    returnDefaultPDV();
                                    txtLojaConectorCF.Select();
                                }
                            }
                            if (countRowsWebCliente == 1 && ataque == 0 && auxConsistencia == 0)//Cadastro do Cliente 
                            {
                                if ((ataque = conectorPDV_replace_cliente(
                                     Convert.ToString(dsRCliente.Tables[0].Rows[w][0]),
                                     Convert.ToString(dsRCliente.Tables[0].Rows[w][1]),
                                     Convert.ToString(dsRCliente.Tables[0].Rows[w][2]),
                                     Convert.ToString(dsRCliente.Tables[0].Rows[w][3]),
                                     Convert.ToString(dsRCliente.Tables[0].Rows[w][4]),
                                     Convert.ToString(dsRCliente.Tables[0].Rows[w][5]),
                                     Convert.ToString(dsRCliente.Tables[0].Rows[w][6]),
                                     Convert.ToString(dsRCliente.Tables[0].Rows[w][7]),
                                     Convert.ToString(dsRCliente.Tables[0].Rows[w][8]),
                                     Convert.ToString(dsRCliente.Tables[0].Rows[w][9]),
                                     Convert.ToString(dsRCliente.Tables[0].Rows[w][10]),
                                     Convert.ToString(dsRCliente.Tables[0].Rows[w][11]),
                                     Convert.ToString(dsRCliente.Tables[0].Rows[w][12]),
                                     Convert.ToString(dsRCliente.Tables[0].Rows[w][13])
                                    )) == 0)
                                {
                                    pgbWaitReservaConectorCF.Value = 3;
                                }
                                switch (Convert.ToString(dsRCliente.Tables[0].Rows[w][2]))//Tipo de pessoa
                                {
                                    case "1":
                                        if (auxConsistencia == 0)
                                        {
                                            try
                                            {
                                                auxConsistencia = 0;
                                                dsRFisica = MyConector.ObterMainPepleoFisica(auxIdCliente);
                                                countRowsWebCliente = dsRFisica.Tables[0].DefaultView.Count;
                                            }
                                            catch (Exception e)
                                            {
                                                auxConsistencia = 1;
                                                msgInfo msg = new msgInfo("ERRO FATAL - " + "CONEXÃO COM WEBSERVICE FALHOU, REPITA A OPERAÇÃO E VERIFIQUE O STATUS DA INTERNET."); msg.ShowDialog();
                                                returnDefaultPDV();
                                                txtLojaConectorCF.Select();
                                            }
                                        }
                                        if (countRowsWebCliente == 1 && auxConsistencia == 0)
                                        {
                                            if ((ataque = conectorPDV_replace_fisica(Convert.ToString(dsRFisica.Tables[0].Rows[w][0]),
                                                                        Convert.ToString(dsRFisica.Tables[0].Rows[w][1]),
                                                                        Convert.ToString(dsRFisica.Tables[0].Rows[w][2]),
                                                                        Convert.ToString(dsRFisica.Tables[0].Rows[w][3]),
                                                                        Convert.ToString(dsRFisica.Tables[0].Rows[w][4]),
                                                                        Convert.ToString(dsRFisica.Tables[0].Rows[w][5]),
                                                                        Convert.ToString(dsRFisica.Tables[0].Rows[w][6]),
                                                                        Convert.ToString(dsRFisica.Tables[0].Rows[w][7]))) == 0)
                                            {
                                                pgbWaitReservaConectorCF.Value = 3;
                                            }
                                        }
                                        break;
                                    case "2":
                                        if (auxConsistencia == 0)
                                        {
                                            try
                                            {
                                                auxConsistencia = 0;
                                                dsRJuridica = MyConector.ObterMainPepleoJuridica(auxIdCliente);
                                                countRowsWebCliente = dsRJuridica.Tables[0].DefaultView.Count;
                                            }
                                            catch (Exception e)
                                            {
                                                auxConsistencia = 1;
                                                msgInfo msg = new msgInfo("ERRO FATAL - " + "CONEXÃO COM WEBSERVICE FALHOU, REPITA A OPERAÇÃO E VERIFIQUE O STATUS DA INTERNET."); msg.ShowDialog();
                                                returnDefaultPDV();
                                                txtLojaConectorCF.Select();
                                            }
                                        }
                                        if (countRowsWebCliente == 1 && auxConsistencia == 0)
                                        { //index 2.2
                                            if ((ataque = conectorPDV_replace_juridica(Convert.ToString(dsRJuridica.Tables[0].Rows[w][0]),
                                                                        Convert.ToString(dsRJuridica.Tables[0].Rows[w][1]),
                                                                        Convert.ToString(dsRJuridica.Tables[0].Rows[w][2]),
                                                                        Convert.ToString(dsRJuridica.Tables[0].Rows[w][3]),
                                                                        Convert.ToString(dsRJuridica.Tables[0].Rows[w][4]),
                                                                        Convert.ToString(dsRJuridica.Tables[0].Rows[w][5]),
                                                                        Convert.ToString(dsRJuridica.Tables[0].Rows[w][6]),
                                                                        Convert.ToString(dsRJuridica.Tables[0].Rows[w][7]))) == 0)
                                            {
                                                pgbWaitReservaConectorCF.Value = 3;
                                            }
                                        }
                                        break;
                                    case "3":
                                        if (auxConsistencia == 0)
                                        {
                                            try
                                            {
                                                auxConsistencia = 0;
                                                dsRRural = MyConector.ObterMainPepleoRural(auxIdCliente);
                                                countRowsWebCliente = dsRRural.Tables[0].DefaultView.Count;
                                            }
                                            catch (Exception e)
                                            {
                                                auxConsistencia = 1;
                                                msgInfo msg = new msgInfo("ERRO FATAL - " + "CONEXÃO COM WEBSERVICE FALHOU, REPITA A OPERAÇÃO E VERIFIQUE O STATUS DA INTERNET."); msg.ShowDialog();
                                                returnDefaultPDV();
                                                txtLojaConectorCF.Select();
                                            }
                                        }
                                        if (countRowsWebCliente == 1 && auxConsistencia == 0)
                                        { //index 2.2
                                            if ((ataque = conectorPDV_replace_rural(Convert.ToString(dsRRural.Tables[0].Rows[w][0]),
                                                                        Convert.ToString(dsRRural.Tables[0].Rows[w][1]),
                                                                        Convert.ToString(dsRRural.Tables[0].Rows[w][2]),
                                                                        Convert.ToString(dsRRural.Tables[0].Rows[w][3]),
                                                                        Convert.ToString(dsRRural.Tables[0].Rows[w][4]),
                                                                        Convert.ToString(dsRRural.Tables[0].Rows[w][5]),
                                                                        Convert.ToString(dsRRural.Tables[0].Rows[w][6]),
                                                                        Convert.ToString(dsRRural.Tables[0].Rows[w][7]),
                                                                        Convert.ToString(dsRRural.Tables[0].Rows[w][8]))) == 0)
                                            {
                                                pgbWaitReservaConectorCF.Value = 3;
                                            }
                                        }
                                        break;
                                    default:
                                        ataque = 2;
                                        break;
                                }
                            }
                            if (ataque == 0 && auxConsistencia == 0)
                            {
                                if (auxConsistencia == 0)
                                {
                                    try
                                    {
                                        auxConsistencia = 0;
                                        dsREndereco = MyConector.ObterEndereco(auxIdCliente);
                                        countRowsWebCliente = dsREndereco.Tables[0].DefaultView.Count;
                                    }
                                    catch (Exception e)
                                    {
                                        auxConsistencia = 1;
                                        msgInfo msg = new msgInfo("ERRO FATAL - " + "CONEXÃO COM WEBSERVICE FALHOU, REPITA A OPERAÇÃO E VERIFIQUE O STATUS DA INTERNET."); msg.ShowDialog();
                                        returnDefaultPDV();
                                        txtLojaConectorCF.Select();
                                    }
                                }

                                if (countRowsWebCliente >= 1 && ataque == 0 && auxConsistencia == 0)
                                { //index 2.3
                                    for (w = 0; w < countRowsWebCliente; w++)
                                    {
                                        if ((ataque = conectorPDV_replace_endereco(Convert.ToString(dsREndereco.Tables[0].Rows[w][0]),
                                                                    Convert.ToString(dsREndereco.Tables[0].Rows[w][1]),
                                                                    Convert.ToString(dsREndereco.Tables[0].Rows[w][2]),
                                                                    Convert.ToString(dsREndereco.Tables[0].Rows[w][3]),
                                                                    Convert.ToString(dsREndereco.Tables[0].Rows[w][4]),
                                                                    Convert.ToString(dsREndereco.Tables[0].Rows[w][5]),
                                                                    Convert.ToString(dsREndereco.Tables[0].Rows[w][6]),
                                                                    Convert.ToString(dsREndereco.Tables[0].Rows[w][7]),
                                                                    Convert.ToString(dsREndereco.Tables[0].Rows[w][8]),
                                                                    Convert.ToString(dsREndereco.Tables[0].Rows[w][9]),
                                                                    Convert.ToString(dsREndereco.Tables[0].Rows[w][10]),
                                                                    Convert.ToString(dsREndereco.Tables[0].Rows[w][11]))) == 0)
                                        {
                                            pgbWaitReservaConectorCF.Value = 4;
                                        }
                                    }
                                }
                                if (auxConsistencia == 0)
                                {
                                    try
                                    {
                                        auxConsistencia = 0;
                                        dsRFone = MyConector.ObterFone(auxIdCliente);
                                        countRowsWebCliente = dsRFone.Tables[0].DefaultView.Count;
                                    }
                                    catch (Exception e)
                                    {
                                        auxConsistencia = 1;
                                        msgInfo msg = new msgInfo("ERRO FATAL - " + "CONEXÃO COM WEBSERVICE FALHOU, REPITA A OPERAÇÃO E VERIFIQUE O STATUS DA INTERNET."); msg.ShowDialog();
                                        returnDefaultPDV();
                                        txtLojaConectorCF.Select();
                                    }
                                }
                                if (countRowsWebCliente >= 1 && ataque == 0 && auxConsistencia == 0)
                                {//index 2.4
                                    for (w = 0; w < countRowsWebCliente; w++)
                                    {
                                        if ((ataque = conectorPDV_replace_fone(Convert.ToString(dsRFone.Tables[0].Rows[w][0]),
                                                                    Convert.ToString(dsRFone.Tables[0].Rows[w][1]),
                                                                    Convert.ToString(dsRFone.Tables[0].Rows[w][2]),
                                                                    Convert.ToString(dsRFone.Tables[0].Rows[w][3]),
                                                                    Convert.ToString(dsRFone.Tables[0].Rows[w][4]),
                                                                    Convert.ToString(dsRFone.Tables[0].Rows[w][5]),
                                                                    Convert.ToString(dsRFone.Tables[0].Rows[w][6]),
                                                                    Convert.ToString(dsRFone.Tables[0].Rows[w][7]),
                                                                    Convert.ToString(dsRFone.Tables[0].Rows[w][8]))) == 0)
                                        {
                                            pgbWaitReservaConectorCF.Value = 5;
                                        }
                                    }
                                }
                                if (auxConsistencia == 0)
                                {
                                    try
                                    {
                                        auxConsistencia = 0;
                                        dsRProfissional = MyConector.ObterPepleoProfissional(auxIdCliente);
                                        countRowsWebCliente = dsRProfissional.Tables[0].DefaultView.Count;
                                    }
                                    catch (Exception e)
                                    {
                                        auxConsistencia = 1;
                                        msgInfo msg = new msgInfo("ERRO FATAL - " + "CONEXÃO COM WEBSERVICE FALHOU, REPITA A OPERAÇÃO E VERIFIQUE O STATUS DA INTERNET."); msg.ShowDialog();
                                        returnDefaultPDV();
                                        txtLojaConectorCF.Select();
                                    }
                                }
                                if (countRowsWebCliente >= 1 && ataque == 0)
                                { //index 2.5
                                    for (w = 0; w < countRowsWebCliente; w++)
                                    {
                                        if ((ataque = conectorPDV_replace_clienteProfissional(Convert.ToString(dsRProfissional.Tables[0].Rows[w][0]),
                                                                    Convert.ToString(dsRProfissional.Tables[0].Rows[w][1]),
                                                                    Convert.ToString(dsRProfissional.Tables[0].Rows[w][2]),
                                                                    Convert.ToString(dsRProfissional.Tables[0].Rows[w][3]),
                                                                    Convert.ToString(dsRProfissional.Tables[0].Rows[w][4]),
                                                                    Convert.ToString(dsRProfissional.Tables[0].Rows[w][5]),
                                                                    Convert.ToString(dsRProfissional.Tables[0].Rows[w][6]),
                                                                    Convert.ToString(dsRProfissional.Tables[0].Rows[w][7]),
                                                                    Convert.ToString(dsRProfissional.Tables[0].Rows[w][8]))) == 0)
                                        {
                                            pgbWaitReservaConectorCF.Value = 6;
                                        }
                                    }
                                }
                                if (auxConsistencia == 0)
                                {
                                    try
                                    {
                                        auxConsistencia = 0;
                                        dsRRisco = MyConector.ObterPepleoRisco(auxIdCliente);
                                        countRowsWebCliente = dsRRisco.Tables[0].DefaultView.Count;
                                    }
                                    catch (Exception e)
                                    {
                                        auxConsistencia = 1;
                                        msgInfo msg = new msgInfo("ERRO FATAL - " + "CONEXÃO COM WEBSERVICE FALHOU, REPITA A OPERAÇÃO E VERIFIQUE O STATUS DA INTERNET."); msg.ShowDialog();
                                        returnDefaultPDV();
                                        txtLojaConectorCF.Select();
                                    }
                                }
                                if (countRowsWebCliente >= 1 && ataque == 0 && auxConsistencia == 0)
                                { //index 2.6
                                    for (w = 0; w < countRowsWebCliente; w++)
                                    {
                                        if ((ataque = conectorPDV_replace_clienteRisco(Convert.ToString(dsRRisco.Tables[0].Rows[w][0]),
                                                                    Convert.ToString(dsRRisco.Tables[0].Rows[w][1]),
                                                                    Convert.ToString(dsRRisco.Tables[0].Rows[w][2]),
                                                                    Convert.ToString(dsRRisco.Tables[0].Rows[w][3]),
                                                                    Convert.ToString(dsRRisco.Tables[0].Rows[w][4]),
                                                                    Convert.ToString(dsRRisco.Tables[0].Rows[w][5]),
                                                                    Convert.ToString(dsRRisco.Tables[0].Rows[w][6]),
                                                                    Convert.ToString(dsRRisco.Tables[0].Rows[w][7]),
                                                                    Convert.ToString(dsRRisco.Tables[0].Rows[w][8]),
                                                                    Convert.ToString(dsRRisco.Tables[0].Rows[w][9]),
                                                                    Convert.ToString(dsRRisco.Tables[0].Rows[w][10]),
                                                                    Convert.ToString(dsRRisco.Tables[0].Rows[w][11]),
                                                                    Convert.ToString(dsRRisco.Tables[0].Rows[w][12]),
                                                                    Convert.ToString(dsRRisco.Tables[0].Rows[w][13]),
                                                                    Convert.ToString(dsRRisco.Tables[0].Rows[w][14]),
                                                                    Convert.ToString(dsRRisco.Tables[0].Rows[w][15]))) == 0)
                                        {
                                            pgbWaitReservaConectorCF.Value = 7;
                                        }
                                    }
                                }
                                if (auxConsistencia == 0)
                                {
                                    try
                                    {
                                        auxConsistencia = 0;
                                        dsRReferencia = MyConector.ObterPepleoReferencia(auxIdCliente);
                                        countRowsWebCliente = dsRReferencia.Tables[0].DefaultView.Count;
                                    }
                                    catch (Exception e)
                                    {
                                        auxConsistencia = 1;
                                        msgInfo msg = new msgInfo("ERRO FATAL - " + "CONEXÃO COM WEBSERVICE FALHOU, REPITA A OPERAÇÃO E VERIFIQUE O STATUS DA INTERNET."); msg.ShowDialog();
                                        returnDefaultPDV();
                                        txtLojaConectorCF.Select();
                                    }
                                }
                                if (countRowsWebCliente >= 1 && ataque == 0 && auxConsistencia == 0)
                                { //index 2.7
                                    for (w = 0; w < countRowsWebCliente; w++)
                                    {
                                        if ((ataque = conectorPDV_replace_clienteReferencia(Convert.ToString(dsRReferencia.Tables[0].Rows[w][0]),
                                                                    Convert.ToString(dsRReferencia.Tables[0].Rows[w][1]),
                                                                    Convert.ToString(dsRReferencia.Tables[0].Rows[w][2]),
                                                                    Convert.ToString(dsRReferencia.Tables[0].Rows[w][3]),
                                                                    Convert.ToString(dsRReferencia.Tables[0].Rows[w][4]),
                                                                    Convert.ToString(dsRReferencia.Tables[0].Rows[w][5]),
                                                                    Convert.ToString(dsRReferencia.Tables[0].Rows[w][6]),
                                                                    Convert.ToString(dsRReferencia.Tables[0].Rows[w][7]),
                                                                    Convert.ToString(dsRReferencia.Tables[0].Rows[w][8]),
                                                                    Convert.ToString(dsRReferencia.Tables[0].Rows[w][9])
                                                                                                    )) == 0)
                                        {
                                            pgbWaitReservaConectorCF.Value = 8;
                                        }
                                    }
                                }
                                if (auxConsistencia == 0)
                                {
                                    try
                                    {
                                        auxConsistencia = 0;
                                        dsRCobranca = MyConector.ObterPepleoCobranca(auxIdCliente);
                                        countRowsWebCliente = dsRCobranca.Tables[0].DefaultView.Count;
                                    }
                                    catch (Exception e)
                                    {
                                        auxConsistencia = 1;
                                        msgInfo msg = new msgInfo("ERRO FATAL - " + "CONEXÃO COM WEBSERVICE FALHOU, REPITA A OPERAÇÃO E VERIFIQUE O STATUS DA INTERNET."); msg.ShowDialog();
                                        returnDefaultPDV();
                                        txtLojaConectorCF.Select();
                                    }
                                }
                                if (countRowsWebCliente >= 1 && ataque == 0 && auxConsistencia == 0)
                                { //index 2.8
                                    for (w = 0; w < countRowsWebCliente; w++)
                                    {
                                        if ((ataque = conectorPDV_replace_clienteCobranca(Convert.ToString(dsRCobranca.Tables[0].Rows[w][0]),
                                                                    Convert.ToString(dsRCobranca.Tables[0].Rows[w][1]),
                                                                    Convert.ToString(dsRCobranca.Tables[0].Rows[w][2]),
                                                                    Convert.ToString(dsRCobranca.Tables[0].Rows[w][3]),
                                                                    Convert.ToString(dsRCobranca.Tables[0].Rows[w][4])
                                                                                                    )) == 0)
                                        {
                                            pgbWaitReservaConectorCF.Value = 9;
                                        }
                                    }
                                }
                                if (auxConsistencia == 0)
                                {
                                    try
                                    {
                                        auxConsistencia = 0;
                                        dsREntrega = MyConector.ObterPepleoEntrega(auxIdCliente);
                                        countRowsWebCliente = dsREndereco.Tables[0].DefaultView.Count;
                                    }
                                    catch (Exception e)
                                    {
                                        auxConsistencia = 1;
                                        msgInfo msg = new msgInfo("ERRO FATAL - " + "CONEXÃO COM WEBSERVICE FALHOU, REPITA A OPERAÇÃO E VERIFIQUE O STATUS DA INTERNET."); msg.ShowDialog();
                                        returnDefaultPDV();
                                        txtLojaConectorCF.Select();
                                    }
                                }
                                if (countRowsWebCliente >= 1 && ataque == 0 && auxConsistencia == 0)
                                { //index 2.9
                                    for (w = 0; w < countRowsWebCliente; w++)
                                    {
                                        if ((ataque = conectorPDV_replace_clienteEntrega(Convert.ToString(dsREndereco.Tables[0].Rows[w][0]),
                                                                    Convert.ToString(dsREndereco.Tables[0].Rows[w][1]),
                                                                    Convert.ToString(dsREndereco.Tables[0].Rows[w][2]),
                                                                    Convert.ToString(dsREndereco.Tables[0].Rows[w][3]),
                                                                    Convert.ToString(dsREndereco.Tables[0].Rows[w][4])
                                                                                                    )) == 0)
                                        {
                                            pgbWaitReservaConectorCF.Value = 10;
                                        }
                                    }
                                }
                                if (conector_verifica_exits_pepleoLocal(auxIdCliente) == 1)//Reverifica e con
                                {
                                    if (reserva_loja.Trim() != "")
                                    {
                                        if (reserva_number.Trim() != "")
                                        {
                                            reserva_number = reserva_number = reservaTemp;
                                            MyConector.AlteraStatusPedidoFinal(reserva, store, "2", "10", "vermelho");//Instrução reversa do cadastro automatico do cliente
                                            pedido = conector_webservice_preVenda(reserva_loja.Trim(), reservaTemp.Trim(),0);//recursividade Flavio
                                        }
                                    }
                                }
                            }
                        }
                        else
                        {
                            ataque = 1;
                            call_pdv = 0;
                            txtVisorMsgConectorCF.Text = "OPERAÇÃO CANCELADA...!";
                        }
                    }
                    else
                    {
                        txtVisorMsgConectorCF.Text = conector_cancela_cupom(fiscal_flag);
                        ataque = 1;
                    }
                }
                else if (auxConsistencia == 1)
                {
                    msgInfo msg = new msgInfo("ERRO FATAL - STATUS PEDIDO \n" + "CONEXÃO COM WEBSERVICE FALHOU, REPITA A OPERAÇÃO E VERIFIQUE O STATUS DA INTERNET."); msg.ShowDialog();
                    returnDefaultPDV();
                    txtLojaConectorCF.Select();
                }

                if (auxConsistencia == 0 && ataque == 0 && countRowsWeb > 0 && auxStatusReserva != "6")
                {
                    try
                    {
                        auxConsistencia = 0;
                        countRowsWeb = 0;
                        dsRItensReserva = MyConector.ObterPedidoItens(reserva, store);
                        countRowsWeb = dsRItensReserva.Tables[0].DefaultView.Count;
                    }
                    catch (Exception e)
                    {
                        auxConsistencia = 1;
                        msgInfo msg = new msgInfo("ERRO FATAL - " + "CONEXÃO COM WEBSERVICE FALHOU, REPITA A OPERAÇÃO E VERIFIQUE O STATUS DA INTERNET."); msg.ShowDialog();
                        returnDefaultPDV();
                        txtLojaConectorCF.Select();
                    }
                }
                else
                {
                    auxConsistencia = 1;
                }
                if (countRowsWeb > 0 && ataque == 0 && auxConsistencia == 0)
                {
                    if (reserva_number != null || (call_pdv ==  1 && countRowsWeb > 0) || aux == 1)// barra a recursividade da inserção do pedido
                    {
                        for (i = 0; i < countRowsWeb; i++)
                        {
                            if (ataque == 0)
                            {
                                if ((ataque = conectorPDV_replace_pedidoItens(Convert.ToString(dsRItensReserva.Tables[0].Rows[i][0]),
                                         Convert.ToString(dsRItensReserva.Tables[0].Rows[i][1]),
                                         Convert.ToString(dsRItensReserva.Tables[0].Rows[i][2]),
                                         Convert.ToString(dsRItensReserva.Tables[0].Rows[i][3]),
                                         Convert.ToString(dsRItensReserva.Tables[0].Rows[i][4]),
                                         Convert.ToString(dsRItensReserva.Tables[0].Rows[i][5]),
                                         Convert.ToString(dsRItensReserva.Tables[0].Rows[i][6]),
                                         Convert.ToString(dsRItensReserva.Tables[0].Rows[i][7]),
                                         Convert.ToString(dsRItensReserva.Tables[0].Rows[i][8]),
                                         Convert.ToString(dsRItensReserva.Tables[0].Rows[i][9]),
                                         Convert.ToString(dsRItensReserva.Tables[0].Rows[i][10]),
                                         Convert.ToString(dsRItensReserva.Tables[0].Rows[i][11]),
                                         Convert.ToString(dsRItensReserva.Tables[0].Rows[i][12]),
                                         Convert.ToString(dsRItensReserva.Tables[0].Rows[i][13]),
                                         Convert.ToString(dsRItensReserva.Tables[0].Rows[i][14])
                                         )) == 0)
                                {
                                    ataque = conector_load_reserva_itens(dsRItensReserva.Tables[0].Rows[i][1].ToString(), dsRItensReserva.Tables[0].Rows[i][2].ToString(), dsRItensReserva.Tables[0].Rows[i][6].ToString(), Math.Round(Decimal.Parse(dsRItensReserva.Tables[0].Rows[i][08].ToString()), 2).ToString().Replace(".", ","), Math.Round(Decimal.Parse(dsRItensReserva.Tables[0].Rows[i][09].ToString()), 2).ToString().Replace(".", ","));
                                    
                                    if (Convert.ToString(dsRItensReserva.Tables[0].Rows[i][5]) == "5")
                                    {
                                        functionECF.conectorECF_CancelaItemGenerico(alwaysVariables.ModeloEcf, Convert.ToString(dsRItensReserva.Tables[0].Rows[i][3]).PadLeft(3, '0'), ref fiscal_MSG, ref fiscal_retorno, alwaysVariables.ECF_Ligada);
                                        //fiscal_retorno = conectorECF.Bematech_FI_CancelaItemGenerico(Convert.ToString(dsRItensReserva.Tables[0].Rows[i][3]).PadLeft(3, '0'));
                                        //conectorECF.Analisa_iRetorno(fiscal_retorno, ref fiscal_MSG);
                                        if (fiscal_retorno != 1)
                                        { txtVisorMsgConectorCF.Text = fiscal_MSG; }
                                        else
                                        {
                                            
                                            ltbDetalhesConectorCF.Text += sequenciaItem + "    "
                                                        + last_item_barra + "    "//produto_barra.PadLeft(12, '0') + "    "
                                                        + last_item_descricao + "    " + " [CANCELADO]" + "    "
                                                        + (last_item_pesavel == "0" ? last_item_qtty : "    ") + "    "
                                                        + last_item_unidade + "    "
                                                        + (last_item_pesavel == "0" ? last_item_qtty + last_item_unidade : String.Format("{0:F3}", Decimal.Parse(last_item_qtty.Replace(",", ".")), 3).ToString().Replace(".", ",") + last_item_unidade + " X " + last_item_price_venda.Replace(".", ",")) + "    "
                                                        + Math.Round(Decimal.Parse(last_item_valor_unitario.Replace(",", ".")), 2).ToString().Replace(".", ",") + "      "
                                                        + last_item_tributacao + "    "
                                                        + Math.Round((Decimal.Parse(last_item_qtty.Replace(",", ".")) * Decimal.Parse(last_item_valor_unitario)), 2).ToString().Replace(".", ",") + "\r\n";
                                            ltbDetalhesConectorCF.Text += "___________________________________________________________" + "\r\n";
                                            ltbDetalhesConectorCF.Select(ltbDetalhesConectorCF.Text.Length, 0);
                                            ltbDetalhesConectorCF.ScrollToCaret();
                                            this.ltbDetalhesConectorCF.ForeColor = System.Drawing.Color.White;
                                            conectorPDV_exe_cupomlastItem(fiscal_Cupom.Replace("\0", "").Trim(), fiscal_numero_caixa.Replace("\0", "").Trim(), last_item_chave, sequenciaItem);
                                            conector_find_subFull("1");
                                        }
                                    }
                                    pgbWaitReservaConectorCF.Value = 11;
                                }
                            }
                            else
                            {
                                txtVisorMsgConectorCF.Text = conector_cancela_cupom(fiscal_flag);
                            }
                        }
                    }
                }
                else
                {
                    if (countRowsWeb > 0)
                    {
                        if (auxStatusReserva == "4" || auxStatusReserva == "3" || auxStatusReserva == "10")
                        {
                            txtVisorMsgConectorCF.Text = conector_cancela_cupom(fiscal_flag);
                        }
                    }
                    auxConsistencia = 1;
                }
                if (auxConsistencia == 0 && ataque == 0)
                {
                    /*Acesso ao log*/

                    try
                    {
                        auxConsistencia = 0;
                        countRowsWeb = 0;
                        dsRItensReservaLog = MyConector.ObterPedidoLog(reserva, store);
                        countRowsWeb = dsRItensReservaLog.Tables[0].DefaultView.Count;
                    }
                    catch (Exception e)
                    {
                        auxConsistencia = 1;
                        msgInfo msg = new msgInfo("ERRO FATAL - " + "CONEXÃO COM WEBSERVICE FALHOU, REPITA A OPERAÇÃO E VERIFIQUE O STATUS DA INTERNET."); msg.ShowDialog();
                        returnDefaultPDV();
                        txtLojaConectorCF.Select();
                    }
                }
                if (countRowsWeb > 0 && ataque == 0 && auxConsistencia == 0)
                {
                    if (reserva_number != null || (call_pdv == 1 && countRowsWeb > 0) || aux == 1)// barra a recursividade da inserção do pedido
                    {
                        for (i = 0; i < countRowsWeb; i++)
                        {
                            if (ataque == 0)
                            {
                                if ((ataque = conectorPDV_replace_pedido_log(Convert.ToString(dsRItensReservaLog.Tables[0].Rows[i][0]),
                                         Convert.ToString(dsRItensReservaLog.Tables[0].Rows[i][1]),
                                         Convert.ToString(dsRItensReservaLog.Tables[0].Rows[i][2]),
                                         Convert.ToString(dsRItensReservaLog.Tables[0].Rows[i][3]),
                                         Convert.ToString(dsRItensReservaLog.Tables[0].Rows[i][4]),
                                         Convert.ToString(dsRItensReservaLog.Tables[0].Rows[i][5]),
                                         Convert.ToString(dsRItensReservaLog.Tables[0].Rows[i][6]),
                                         Convert.ToString(dsRItensReservaLog.Tables[0].Rows[i][7]),
                                         Convert.ToString(dsRItensReservaLog.Tables[0].Rows[i][8]),
                                         Convert.ToString(dsRItensReservaLog.Tables[0].Rows[i][9]),
                                         Convert.ToString(dsRItensReservaLog.Tables[0].Rows[i][10]),
                                         Convert.ToString(dsRItensReservaLog.Tables[0].Rows[i][11]),
                                         Convert.ToString(dsRItensReservaLog.Tables[0].Rows[i][12]),
                                         Convert.ToString(dsRItensReservaLog.Tables[0].Rows[i][13]),
                                         Convert.ToString(dsRItensReservaLog.Tables[0].Rows[i][14]),
                                         Convert.ToString(dsRItensReservaLog.Tables[0].Rows[i][15]),
                                         Convert.ToString(dsRItensReservaLog.Tables[0].Rows[i][16]),
                                         Convert.ToString(dsRItensReservaLog.Tables[0].Rows[i][17]),
                                         Convert.ToString(dsRItensReservaLog.Tables[0].Rows[i][18]), 
                                         Convert.ToString(dsRItensReservaLog.Tables[0].Rows[i][19]), 
                                         Convert.ToString(dsRItensReservaLog.Tables[0].Rows[i][20]),
                                         Convert.ToString(dsRItensReservaLog.Tables[0].Rows[i][22]))) == 0)
                                {
                                    pgbWaitReservaConectorCF.Value = 11;
                                }
                            }
                            else
                            {
                                txtVisorMsgConectorCF.Text = conector_cancela_cupom(fiscal_flag);
                            }
                        }
                    }
                }
                if (auxConsistencia == 0)
                {
                    try
                    {
                        auxConsistencia = 0;
                        countRowsWeb = 0;
                        dsRFinanceiro = MyConector.ObterPedidoFinanceiro(reserva, store);
                        countRowsWeb = dsRFinanceiro.Tables[0].DefaultView.Count;
                        if (countRowsWeb == 0)
                        {
                            vetorReserva[0] = "1"; //Finalizadora Dinheiro
                        }
                    }
                    catch (Exception e)
                    {
                        countRowsWeb = -1;
                        auxConsistencia = 1;
                        msgInfo msg = new msgInfo("ERRO FATAL - FINANCEIRO NÃO CONCLUIDO \n" + "CONEXÃO COM WEBSERVICE FALHOU, REPITA A OPERAÇÃO E VERIFIQUE O STATUS DA INTERNET."); msg.ShowDialog();
                        returnDefaultPDV();
                        txtLojaConectorCF.Select();
                    }
                }

                if (countRowsWeb >= 0 && ataque == 0 && auxConsistencia == 0)
                {
                    for (i = 0; i < countRowsWeb; i++)
                    {
                        if((ataque = conectorPDV_replace_pedidoFinanceiro(Convert.ToString(dsRFinanceiro.Tables[0].Rows[i][0]),
                                Convert.ToString(dsRFinanceiro.Tables[0].Rows[i][1]),
                                Convert.ToString(dsRFinanceiro.Tables[0].Rows[i][2]),
                                Convert.ToString(dsRFinanceiro.Tables[0].Rows[i][3]),
                                Convert.ToString(dsRFinanceiro.Tables[0].Rows[i][4]),
                                Convert.ToString(dsRFinanceiro.Tables[0].Rows[i][5]),
                                Convert.ToString(dsRFinanceiro.Tables[0].Rows[i][6]),
                                Convert.ToString(dsRFinanceiro.Tables[0].Rows[i][7]),
                                Convert.ToString(dsRFinanceiro.Tables[0].Rows[i][8]),
                                Convert.ToString(dsRFinanceiro.Tables[0].Rows[i][9]),
                                Convert.ToString(dsRFinanceiro.Tables[0].Rows[i][10]),
                                Convert.ToString(dsRFinanceiro.Tables[0].Rows[i][11]))) == 0)
                        {
                            pgbWaitReservaConectorCF.Value = 12;
                            vetorReserva[i] = Convert.ToString(dsRFinanceiro.Tables[0].Rows[i][2]);
                        }
                        
                    }
                }
                else
                {
                    if (auxConsistencia == 0)
                    {
                        if (auxStatusReserva == "4" || auxStatusReserva == "3" || auxStatusReserva == "10")
                        {
                            txtVisorMsgConectorCF.Text = conector_cancela_cupom(fiscal_flag);
                        }
                    }
                    auxConsistencia = 1;
                }
                if (ataque == 0)
                {
                    
                    pgbWaitReservaConectorCF.Value = 13;

                    if (vetorReserva.Length > 0)
                    {
                        for (int j = 0; j < vetorReserva.Length - 1; j++)
                        {
                            if (vetorReserva[j] != "#" && call_pdv == 0)
                            {
                                switch (vetorReserva[j])
                                {
                                    case "1":
                                        try
                                        {
                                            vetorReservaFinanceiro[1] = Convert.ToString(Convert.ToString(Convert.ToDecimal(dsRReserva.Tables[0].Rows[0][13].ToString().Replace(",", ".")) - Convert.ToDecimal(dsRReserva.Tables[0].Rows[0][11].ToString().Replace(",", "."))));
                                        }
                                        catch (Exception)
                                        {

                                            vetorReservaFinanceiro[1] = "0";
                                        }
                                        break;
                                    case "2":
                                        if (auxConsistencia == 0)
                                        {
                                            try
                                            {
                                                auxConsistencia = 0;
                                                countRowsWeb = 0;
                                                dsRPedidoCheque = MyConector.ObterPedidoParcelamento(2, reserva, store);
                                                countRowsWeb = dsRPedidoCheque.Tables[0].DefaultView.Count;
                                            }
                                            catch (Exception e)
                                            {
                                                auxConsistencia = 1;
                                                msgInfo msg = new msgInfo("ERRO FATAL - CHEQUE" + "CONEXÃO COM WEBSERVICE FALHOU, REPITA A OPERAÇÃO E VERIFIQUE O STATUS DA INTERNET."); msg.ShowDialog();
                                                returnDefaultPDV();
                                                txtLojaConectorCF.Select();
                                            }
                                        }
                                        if (countRowsWeb > 0 && ataque == 0 && auxConsistencia == 0)
                                        {
                                            for (i = 0; i < countRowsWeb; i++)
                                            {
                                                if ((ataque = conectorPDV_replace_pedidoCheque(Convert.ToString(dsRPedidoCheque.Tables[0].Rows[i][0]),
                                                        Convert.ToString(dsRPedidoCheque.Tables[0].Rows[i][1]),
                                                        Convert.ToString(dsRPedidoCheque.Tables[0].Rows[i][2]),
                                                        Convert.ToString(dsRPedidoCheque.Tables[0].Rows[i][3]),
                                                        Convert.ToString(dsRPedidoCheque.Tables[0].Rows[i][4]),
                                                        Convert.ToString(dsRPedidoCheque.Tables[0].Rows[i][5]),
                                                        Convert.ToString(dsRPedidoCheque.Tables[0].Rows[i][6]),
                                                        Convert.ToString(dsRPedidoCheque.Tables[0].Rows[i][7]),
                                                        Convert.ToString(dsRPedidoCheque.Tables[0].Rows[i][8]),
                                                        Convert.ToString(dsRPedidoCheque.Tables[0].Rows[i][9]),
                                                        Convert.ToString(dsRPedidoCheque.Tables[0].Rows[i][10]))) == 0)
                                                {
                                                    vetorReservaFinanceiro[2] = String.Format("{0:F2}", dsRPedidoCheque.Tables[0].Rows[i][5]);
                                                }
                                            }
                                        }
                                        else
                                        {
                                            txtVisorMsgConectorCF.Text = conector_cancela_cupom(fiscal_flag);
                                        }
                                        break;
                                    case "3":
                                        if (auxConsistencia == 0)
                                        {
                                            try
                                            {
                                                auxConsistencia = 0;
                                                countRowsWeb = 0;
                                                dsRPedidoCrediario = MyConector.ObterPedidoParcelamento(3, reserva, store);
                                                countRowsWeb = dsRPedidoCrediario.Tables[0].DefaultView.Count;
                                            }
                                            catch (Exception e)
                                            {
                                                auxConsistencia = 1;
                                                msgInfo msg = new msgInfo("ERRO FATAL - CREDIARIO \n" + "CONEXÃO COM WEBSERVICE FALHOU, REPITA A OPERAÇÃO E VERIFIQUE O STATUS DA INTERNET."); msg.ShowDialog();
                                                returnDefaultPDV();
                                                txtLojaConectorCF.Select();
                                            }
                                        }
                                        if (countRowsWeb > 0 && ataque == 0 && auxConsistencia == 0)
                                        {
                                            for (i = 0; i < countRowsWeb; i++)
                                            {
                                                if ((ataque = conectorPDV_replace_pedidoCrediario(Convert.ToString(dsRPedidoCrediario.Tables[0].Rows[i][0]),
                                                        Convert.ToString(dsRPedidoCrediario.Tables[0].Rows[i][1]),
                                                        Convert.ToString(dsRPedidoCrediario.Tables[0].Rows[i][2]),
                                                        Convert.ToString(dsRPedidoCrediario.Tables[0].Rows[i][3]),
                                                        Convert.ToString(dsRPedidoCrediario.Tables[0].Rows[i][4]),
                                                        Convert.ToString(dsRPedidoCrediario.Tables[0].Rows[i][5]),
                                                        Convert.ToString(dsRPedidoCrediario.Tables[0].Rows[i][6]),
                                                        Convert.ToString(dsRPedidoCrediario.Tables[0].Rows[i][7]),
                                                        Convert.ToString(dsRPedidoCrediario.Tables[0].Rows[i][8]),
                                                        Convert.ToString(dsRPedidoCrediario.Tables[0].Rows[i][9]),
                                                        Convert.ToString(dsRPedidoCrediario.Tables[0].Rows[i][10]),
                                                        Convert.ToString(dsRPedidoCrediario.Tables[0].Rows[i][11]),
                                                        Convert.ToString(dsRPedidoCrediario.Tables[0].Rows[i][12]))) == 0)
                                                {
                                                    vetorReservaFinanceiro[3] = String.Format("{0:F2}", dsRPedidoCrediario.Tables[0].Rows[i][10]);
                                                }
                                            }
                                        }
                                        else
                                        {
                                            txtVisorMsgConectorCF.Text = conector_cancela_cupom(fiscal_flag);
                                        }
                                        break;
                                    case "4":
                                        if (auxConsistencia == 0)
                                        {
                                            try
                                            {
                                                auxConsistencia = 0;
                                                countRowsWeb = 0;
                                                dsRPedidoConvenio = MyConector.ObterPedidoParcelamento(4, reserva, store);
                                                countRowsWeb = dsRPedidoConvenio.Tables[0].DefaultView.Count;
                                            }
                                            catch (Exception e)
                                            {
                                                auxConsistencia = 1;
                                                msgInfo msg = new msgInfo("ERRO FATAL - CONVENIO \n" + "CONEXÃO COM WEBSERVICE FALHOU, REPITA A OPERAÇÃO E VERIFIQUE O STATUS DA INTERNET."); msg.ShowDialog();
                                                returnDefaultPDV();
                                                txtLojaConectorCF.Select();
                                            }
                                        }
                                        if (countRowsWeb > 0 && ataque == 0 && auxConsistencia == 0)
                                        {
                                            for (i = 0; i < countRowsWeb; i++)
                                            {
                                                if ((ataque = conectorPDV_replace_pedidoConvenio(Convert.ToString(dsRPedidoConvenio.Tables[0].Rows[i][0]),
                                                        Convert.ToString(dsRPedidoConvenio.Tables[0].Rows[i][1]),
                                                        Convert.ToString(dsRPedidoConvenio.Tables[0].Rows[i][2]),
                                                        Convert.ToString(dsRPedidoConvenio.Tables[0].Rows[i][3]),
                                                        Convert.ToString(dsRPedidoConvenio.Tables[0].Rows[i][4]),
                                                        Convert.ToString(dsRPedidoConvenio.Tables[0].Rows[i][5]),
                                                        Convert.ToString(dsRPedidoConvenio.Tables[0].Rows[i][6]),
                                                        Convert.ToString(dsRPedidoConvenio.Tables[0].Rows[i][7]),
                                                        Convert.ToString(dsRPedidoConvenio.Tables[0].Rows[i][8]),
                                                        Convert.ToString(dsRPedidoConvenio.Tables[0].Rows[i][9]))) == 0)
                                                {
                                                    vetorReservaFinanceiro[4] = String.Format("{0:F2}", dsRPedidoConvenio.Tables[0].Rows[i][8]);
                                                };
                                            }
                                        }
                                        else
                                        {
                                            txtVisorMsgConectorCF.Text = conector_cancela_cupom(fiscal_flag);
                                        }
                                        break;
                                    case "5":
                                        if (auxConsistencia == 0)
                                        {
                                            try
                                            {
                                                auxConsistencia = 0;
                                                countRowsWeb = 0;
                                                dsRPedidoCartao = MyConector.ObterPedidoParcelamento(5, reserva, store);
                                                countRowsWeb = dsRPedidoCartao.Tables[0].DefaultView.Count;
                                            }
                                            catch (Exception e)
                                            {
                                                auxConsistencia = 1;
                                                msgInfo msg = new msgInfo("ERRO FATAL - CARTAO CREDITO \n" + "CONEXÃO COM WEBSERVICE FALHOU, REPITA A OPERAÇÃO E VERIFIQUE O STATUS DA INTERNET."); msg.ShowDialog();
                                                returnDefaultPDV();
                                                txtLojaConectorCF.Select();
                                            }
                                        }
                                        if (countRowsWeb > 0 && ataque == 0 && auxConsistencia == 0)
                                        {
                                            for (i = 0; i < countRowsWeb; i++)
                                            {
                                                if ((ataque = conectorPDV_replace_pedidoCartao(Convert.ToString(dsRPedidoCartao.Tables[0].Rows[i][0]),
                                                        Convert.ToString(dsRPedidoCartao.Tables[0].Rows[i][1]),
                                                        Convert.ToString(dsRPedidoCartao.Tables[0].Rows[i][2]),
                                                        Convert.ToString(dsRPedidoCartao.Tables[0].Rows[i][3]),
                                                        Convert.ToString(dsRPedidoCartao.Tables[0].Rows[i][4]),
                                                        Convert.ToString(dsRPedidoCartao.Tables[0].Rows[i][5]),
                                                        Convert.ToString(dsRPedidoCartao.Tables[0].Rows[i][6]),
                                                        Convert.ToString(dsRPedidoCartao.Tables[0].Rows[i][7]),
                                                        Convert.ToString(dsRPedidoCartao.Tables[0].Rows[i][8]))) == 0)
                                                {
                                                    vetorReservaFinanceiro[6] = String.Format("{0:F2}", dsRPedidoCartao.Tables[0].Rows[i][7]);
                                                };
                                            }
                                        }
                                        else
                                        {
                                            txtVisorMsgConectorCF.Text = conector_cancela_cupom(fiscal_flag);
                                        }
                                        break;
                                    case "6":
                                        if (auxConsistencia == 0)
                                        {
                                            try
                                            {
                                                auxConsistencia = 0;
                                                countRowsWeb = 0;
                                                dsRPedidoCartao = MyConector.ObterPedidoParcelamento(6, reserva, store);
                                                countRowsWeb = dsRPedidoCartao.Tables[0].DefaultView.Count;
                                            }
                                            catch (Exception e)
                                            {
                                                auxConsistencia = 1;
                                                msgInfo msg = new msgInfo("ERRO FATAL - CARTAO DEBITO \n" + "CONEXÃO COM WEBSERVICE FALHOU, REPITA A OPERAÇÃO E VERIFIQUE O STATUS DA INTERNET."); msg.ShowDialog();
                                                returnDefaultPDV();
                                                txtLojaConectorCF.Select();
                                            }
                                        }
                                        if (countRowsWeb > 0 && ataque == 0 && auxConsistencia == 0)
                                        {
                                            for (i = 0; i < countRowsWeb; i++)
                                            {
                                                if ((ataque = conectorPDV_replace_pedidoCartao(Convert.ToString(dsRPedidoCartao.Tables[0].Rows[i][0]),
                                                        Convert.ToString(dsRPedidoCartao.Tables[0].Rows[i][1]),
                                                        Convert.ToString(dsRPedidoCartao.Tables[0].Rows[i][2]),
                                                        Convert.ToString(dsRPedidoCartao.Tables[0].Rows[i][3]),
                                                        Convert.ToString(dsRPedidoCartao.Tables[0].Rows[i][4]),
                                                        Convert.ToString(dsRPedidoCartao.Tables[0].Rows[i][5]),
                                                        Convert.ToString(dsRPedidoCartao.Tables[0].Rows[i][6]),
                                                        Convert.ToString(dsRPedidoCartao.Tables[0].Rows[i][7]),
                                                        Convert.ToString(dsRPedidoCartao.Tables[0].Rows[i][8]))) == 0)
                                                {
                                                    vetorReservaFinanceiro[5] = String.Format("{0:F2}", dsRPedidoCartao.Tables[0].Rows[i][7]);
                                                };
                                            }
                                        }
                                        else
                                        {
                                            txtVisorMsgConectorCF.Text = conector_cancela_cupom(fiscal_flag);
                                        }
                                        break;
                                    case "7":
                                        if (auxConsistencia == 0)
                                        {
                                            try
                                            {
                                                auxConsistencia = 0;
                                                countRowsWeb = 0;
                                                dsRPedidoBoleto = MyConector.ObterPedidoParcelamento(7, reserva, store);
                                                countRowsWeb = dsRPedidoBoleto.Tables[0].DefaultView.Count;
                                            }
                                            catch (Exception e)
                                            {
                                                auxConsistencia = 1;
                                                msgInfo msg = new msgInfo("ERRO FATAL - BOLETO \n" + "CONEXÃO COM WEBSERVICE FALHOU, REPITA A OPERAÇÃO E VERIFIQUE O STATUS DA INTERNET."); msg.ShowDialog();
                                                returnDefaultPDV();
                                                txtLojaConectorCF.Select();
                                            }
                                        }

                                        if (countRowsWeb > 0 && ataque == 0 && auxConsistencia == 0)
                                        {
                                            for (i = 0; i < countRowsWeb; i++)
                                            {
                                                if ((ataque = conectorPDV_replace_pedidoBoleto(Convert.ToString(dsRPedidoBoleto.Tables[0].Rows[i][0]),
                                                        Convert.ToString(dsRPedidoBoleto.Tables[0].Rows[i][1]),
                                                        Convert.ToString(dsRPedidoBoleto.Tables[0].Rows[i][2]),
                                                        Convert.ToString(dsRPedidoBoleto.Tables[0].Rows[i][3]),
                                                        Convert.ToString(dsRPedidoBoleto.Tables[0].Rows[i][4]),
                                                        Convert.ToString(dsRPedidoBoleto.Tables[0].Rows[i][5]),
                                                        Convert.ToString(dsRPedidoBoleto.Tables[0].Rows[i][6]),
                                                        Convert.ToString(dsRPedidoBoleto.Tables[0].Rows[i][7]),
                                                        Convert.ToString(dsRPedidoBoleto.Tables[0].Rows[i][8]),
                                                        Convert.ToString(dsRPedidoBoleto.Tables[0].Rows[i][9]))) == 0)
                                                {
                                                    vetorReservaFinanceiro[7] = String.Format("{0:F2}", dsRPedidoBoleto.Tables[0].Rows[i][6]);
                                                };
                                            }
                                        }
                                        else
                                        {
                                            txtVisorMsgConectorCF.Text = conector_cancela_cupom(fiscal_flag);
                                        }
                                        break;
                                    case "8":
                                        vetorReservaFinanceiro[8] = Convert.ToString(Convert.ToString(Convert.ToDecimal(dsRReserva.Tables[0].Rows[i][13]) - Convert.ToDecimal(dsRReserva.Tables[0].Rows[i][11])));
                                        break;
                                    case "9":
                                        vetorReservaFinanceiro[9] = Convert.ToString(Convert.ToString(Convert.ToDecimal(dsRReserva.Tables[0].Rows[i][13]) - Convert.ToDecimal(dsRReserva.Tables[0].Rows[i][11])));
                                        break;
                                    case "10":
                                        vetorReservaFinanceiro[10] = Convert.ToString(Convert.ToString(Convert.ToDecimal(dsRReserva.Tables[0].Rows[i][13]) - Convert.ToDecimal(dsRReserva.Tables[0].Rows[i][11])));
                                        break;
                                }
                            }
                            if (vetorReserva[j] != "#" && (call_pdv == 1 || aux == 1) && auxStatusReserva != "6")
                            {
                                vetorReservaFinanceiro[9] = Math.Round(Convert.ToDecimal(value_call.Replace(",",".")),2).ToString();
                                conector_pgto_ecf(vetorReservaFinanceiro, Math.Round(Convert.ToDecimal(value_call.Replace(",", ".")), 2).ToString(), Math.Round(Convert.ToDecimal(value_call.Replace(",", ".")), 2).ToString(), "0");
                                
                                functionECF.conectorECF_TerminaFechamentoCupom(alwaysVariables.ModeloEcf, conectorPDV_msgCupom(), ref fiscal_MSG, ref fiscal_retorno, alwaysVariables.ECF_Ligada);
                                this.backgroundConectorCupom.CancelAsync();
                                if (fiscal_retorno == 1)
                                {
                                    functionECF.conectorECF_AcionaGaveta(alwaysVariables.ModeloEcf, ref fiscal_MSG, ref fiscal_retorno, alwaysVariables.ECF_Ligada);
                                    functionECF.VerificaEstadoGaveta(alwaysVariables.ModeloEcf, ref fiscal_MSG, ref gaveta, ref fiscal_retorno, alwaysVariables.ECF_Ligada);
                                    if (gaveta == 0)
                                    {
                                        //Estado = 1 sensor em nível 1 (fechada)
                                        //Estado = 0 sensor em nível 0 (aberta)
                                        msg = new msgInfo("INFORMAÇÃO DO SISTEMA! GAVETA ABERTA."); msg.ShowDialog();
                                    }
                                }
                                workObject.modoPdv(false);
                                resetFinanceiro();
                                this.pnlTotalConectorCF.Visible = false;
                                lblVisorEntradaDadosConectorCF.Text = "ENTRADA DE DADOS";
                                vetorReservaFinanceiro = null;
                                vetorReservaFinanceiro = new string[12] { "#", "#", "#", "#", "#", "#", "#", "#", "#", "#", "#", "#" };
                                conector_acao_cancelaCupom();
                                call_pdv = 1;
                                j = 100;
                                MyConector.AlteraStatusPedidoFinal(reserva, store, "5", "6", "verde");
                            }
                        }
                    }
                    else
                    {
                        txtVisorMsgConectorCF.Text = conector_cancela_cupom(fiscal_flag);
                    }
                }
                else
                {
                    if (auxStatusReserva == "4" || auxStatusReserva == "3" || auxStatusReserva == "10")
                    {
                        txtVisorMsgConectorCF.Text = conector_cancela_cupom(fiscal_flag);
                    }
                    auxConsistencia = 1;
                }
                if (call_funcao != 6)
                {
                    conector_reset_reserva();
                    pnlReservaConectorCF.Visible = false;
                    if (call_pdv != 1)
                    {
                        call_pdv = 0;
                    }
                    if (alwaysVariables.ModoOperacao == 1)
                    {
                        txtEntradaDadosConectorCF.Select();
                    }
                    else
                    {
                        txtEntradaDadosNF.Select();
                    }
                }
                //OBS: Termino no index 13
            }
            else
            {
                //#####################################Funcao Local Web não identificada
                if (auxConsistencia == 0)
                {
                    try
                    {
                        auxConsistencia = 0;
                        pgbWaitReservaConectorCF.Value = 1;
                        auxStatusReserva = conectorPDV_local_verifica_status_pedido(reserva, store).ToString();
                        dsRReserva = conectorPDV_local_find_pedido(reserva, store);
                        countRowsWeb = dsRReserva.Tables[0].DefaultView.Count;
                    }
                    catch (Exception e)
                    {
                        auxConsistencia = 1;
                        msgInfo msg = new msgInfo("ERRO FATAL - " + "CONEXÃO COM WEBSERVICE FALHOU, REPITA A OPERAÇÃO E VERIFIQUE O STATUS DA INTERNET."); msg.ShowDialog();
                        returnDefaultPDV();
                        txtLojaConectorCF.Select();
                    }
                }
                if (auxStatusReserva == "-1")
                {
                    txtVisorMsgConectorCF.Text = "RESERVA NÃO EXISTE";
                    call_pdv = 0;
                    ataque = 1;
                }
                else if (auxConsistencia == 1)
                {
                    msgInfo msg = new msgInfo("ERRO FATAL - " + "CONEXÃO COM WEBSERVICE FALHOU, REPITA A OPERAÇÃO E VERIFIQUE O STATUS DA INTERNET."); msg.ShowDialog();
                    returnDefaultPDV();
                    txtLojaConectorCF.Select();
                }
                else if (auxConsistencia == 0)
                {
                    if (countRowsWeb > 0)
                    {
                        if (auxConsistencia == 0)
                        {
                            try
                            {
                                auxConsistencia = 0;
                                auxPessoa = conectorPDV_verifica_exits_pepleo(Convert.ToString(dsRReserva.Tables[0].Rows[0][3]));// rever
                                auxIdCliente = Convert.ToString(dsRReserva.Tables[0].Rows[0][3]);
                            }
                            catch (Exception e)
                            {
                                auxConsistencia = 1;
                                msgInfo msg = new msgInfo("ERRO FATAL - " + "CONEXÃO COM WEBSERVICE FALHOU, REPITA A OPERAÇÃO E VERIFIQUE O STATUS DA INTERNET."); msg.ShowDialog();
                                returnDefaultPDV();
                                txtLojaConectorCF.Select();
                            }
                        }
                        if (auxPessoa == 1 && conector_verifica_exits_pepleoLocal(auxIdCliente) == 1)
                        {
                            pedido = Convert.ToString(dsRReserva.Tables[0].Rows[0][0]);
                            for (i = 0; i < countRowsWeb; i++)
                            {//Abre o cupom fiscal nesta etapa.
                                if ((ataque = conectorPDV_replace_reserva(Convert.ToString(dsRReserva.Tables[0].Rows[i][0]),
                                     Convert.ToString(dsRReserva.Tables[0].Rows[i][1]),
                                     Convert.ToString(dsRReserva.Tables[0].Rows[i][2]),
                                     Convert.ToString(dsRReserva.Tables[0].Rows[i][3]),
                                     Convert.ToString(dsRReserva.Tables[0].Rows[i][4]),
                                     Convert.ToString(dsRReserva.Tables[0].Rows[i][5]),
                                     Convert.ToString(dsRReserva.Tables[0].Rows[i][6]),
                                     Convert.ToString(dsRReserva.Tables[0].Rows[i][7]),
                                     Convert.ToString(dsRReserva.Tables[0].Rows[i][8]),
                                     Convert.ToString(dsRReserva.Tables[0].Rows[i][9]),
                                     Convert.ToString(dsRReserva.Tables[0].Rows[i][10]),
                                     Convert.ToString(dsRReserva.Tables[0].Rows[i][11]),
                                     Convert.ToString(dsRReserva.Tables[0].Rows[i][12]),
                                     Convert.ToString(dsRReserva.Tables[0].Rows[i][13]),
                                     Convert.ToString(dsRReserva.Tables[0].Rows[i][14]),
                                     Convert.ToString(dsRReserva.Tables[0].Rows[i][15]),
                                     Convert.ToString(dsRReserva.Tables[0].Rows[i][16]),
                                     Convert.ToString(dsRReserva.Tables[0].Rows[i][17]),
                                     Convert.ToString(dsRReserva.Tables[0].Rows[i][18]),
                                     Convert.ToString(dsRReserva.Tables[0].Rows[i][19]),
                                     Convert.ToString(dsRReserva.Tables[0].Rows[i][20]),
                                     Convert.ToString(dsRReserva.Tables[0].Rows[i][21]),
                                     Convert.ToString(dsRReserva.Tables[0].Rows[i][22]),
                                     Convert.ToString(dsRReserva.Tables[0].Rows[i][23]),
                                     Convert.ToString(dsRReserva.Tables[0].Rows[i][26]),
                                     Convert.ToString(dsRReserva.Tables[0].Rows[i][27]),
                                     Convert.ToString(dsRReserva.Tables[0].Rows[i][28]))) == 0)
                                {
                                    //pgbWaitReservaConectorCF.Value = 2; DE 2 PARA 10, POIS 8 ETAPAS DO CADASTRO DE CLIENTE
                                    pgbWaitReservaConectorCF.Value = 10;
                                }
                            }
                        }
                    }
                    else
                    {
                        txtVisorMsgConectorCF.Text = conector_cancela_cupom(fiscal_flag);
                        ataque = 1;
                    }
                }
                if (auxConsistencia == 0)
                {

                    try
                    {
                        auxConsistencia = 0;
                        countRowsWeb = 0;
                        dsRItensReserva = conectorPDV_local_find_pedidoItens(reserva, store);
                        countRowsWeb = dsRItensReserva.Tables[0].DefaultView.Count;
                    }
                    catch (Exception e)
                    {
                        auxConsistencia = 1;
                        msgInfo msg = new msgInfo("ERRO FATAL - " + "CONEXÃO COM WEBSERVICE FALHOU, REPITA A OPERAÇÃO E VERIFIQUE O STATUS DA INTERNET."); msg.ShowDialog();
                        returnDefaultPDV();
                        txtLojaConectorCF.Select();
                    }
                }
                if (countRowsWeb > 0 && ataque == 0 && auxConsistencia == 0)
                {
                    for (i = 0; i < countRowsWeb; i++)
                    {
                        if (ataque == 0)
                        {
                            if ((ataque = conectorPDV_replace_pedidoItens(Convert.ToString(dsRItensReserva.Tables[0].Rows[i][0]),
                                     Convert.ToString(dsRItensReserva.Tables[0].Rows[i][1]),
                                     Convert.ToString(dsRItensReserva.Tables[0].Rows[i][2]),
                                     Convert.ToString(dsRItensReserva.Tables[0].Rows[i][3]),
                                     Convert.ToString(dsRItensReserva.Tables[0].Rows[i][4]),
                                     Convert.ToString(dsRItensReserva.Tables[0].Rows[i][5]),
                                     Convert.ToString(dsRItensReserva.Tables[0].Rows[i][6]),
                                     Convert.ToString(dsRItensReserva.Tables[0].Rows[i][7]),
                                     Convert.ToString(dsRItensReserva.Tables[0].Rows[i][8]),
                                     Convert.ToString(dsRItensReserva.Tables[0].Rows[i][9]),
                                     Convert.ToString(dsRItensReserva.Tables[0].Rows[i][10]),
                                     Convert.ToString(dsRItensReserva.Tables[0].Rows[i][11]),
                                     Convert.ToString(dsRItensReserva.Tables[0].Rows[i][12]),
                                     Convert.ToString(dsRItensReserva.Tables[0].Rows[i][13]), Convert.ToString(dsRItensReserva.Tables[0].Rows[i][14]))) == 0)
                            {
                                ataque = conector_load_reserva_itens(dsRItensReserva.Tables[0].Rows[i][1].ToString(), dsRItensReserva.Tables[0].Rows[i][2].ToString(), dsRItensReserva.Tables[0].Rows[i][6].ToString(), Math.Round(Decimal.Parse(dsRItensReserva.Tables[0].Rows[i][08].ToString()), 2).ToString().Replace(".", ","), Math.Round(Decimal.Parse(dsRItensReserva.Tables[0].Rows[i][09].ToString()), 2).ToString().Replace(".", ","));
                                pgbWaitReservaConectorCF.Value = 11;
                            }
                        }
                        else
                        {
                            txtVisorMsgConectorCF.Text = conector_cancela_cupom(fiscal_flag);
                        }
                    }
                }
                else
                {
                    txtVisorMsgConectorCF.Text = conector_cancela_cupom(fiscal_flag);
                }
                if (auxConsistencia == 0)
                {

                    try
                    {
                        auxConsistencia = 0;
                        countRowsWeb = 0;
                        dsRFinanceiro = conectorPDV_local_find_pedidoFinanceiro(reserva, store);
                        countRowsWeb = dsRFinanceiro.Tables[0].DefaultView.Count;
                        if (countRowsWeb == 0)
                        {
                            vetorReserva[0] = "1"; //Finalizadora Dinheiro
                        }
                    }
                    catch (Exception e)
                    {
                        auxConsistencia = 1;
                        msgInfo msg = new msgInfo("ERRO FATAL - FINANCEIRO \n" + "CONEXÃO COM WEBSERVICE FALHOU, REPITA A OPERAÇÃO E VERIFIQUE O STATUS DA INTERNET."); msg.ShowDialog();
                        returnDefaultPDV();
                        txtLojaConectorCF.Select();
                    }
                }
                if (countRowsWeb >= 0 && ataque == 0 && auxConsistencia == 0)
                {
                    for (i = 0; i < countRowsWeb; i++)
                    {
                        if ((ataque = conectorPDV_replace_pedidoFinanceiro(Convert.ToString(dsRFinanceiro.Tables[0].Rows[i][0]),
                                Convert.ToString(dsRFinanceiro.Tables[0].Rows[i][1]),
                                Convert.ToString(dsRFinanceiro.Tables[0].Rows[i][2]),
                                Convert.ToString(dsRFinanceiro.Tables[0].Rows[i][3]),
                                Convert.ToString(dsRFinanceiro.Tables[0].Rows[i][4]),
                                Convert.ToString(dsRFinanceiro.Tables[0].Rows[i][5]),
                                Convert.ToString(dsRFinanceiro.Tables[0].Rows[i][6]),
                                Convert.ToString(dsRFinanceiro.Tables[0].Rows[i][7]),
                                Convert.ToString(dsRFinanceiro.Tables[0].Rows[i][8]),
                                Convert.ToString(dsRFinanceiro.Tables[0].Rows[i][9]),
                                Convert.ToString(dsRFinanceiro.Tables[0].Rows[i][10]),
                                Convert.ToString(dsRFinanceiro.Tables[0].Rows[i][11]))) == 0)
                        {
                            pgbWaitReservaConectorCF.Value = 12;
                            vetorReserva[i] = Convert.ToString(dsRFinanceiro.Tables[0].Rows[i][2]);
                        }

                    }
                }
                else
                {
                    txtVisorMsgConectorCF.Text = conector_cancela_cupom(fiscal_flag);
                }
                if (ataque == 0 && auxConsistencia == 0)
                {

                    pgbWaitReservaConectorCF.Value = 13;

                    if (vetorReserva.Length > 0)
                    {
                        for (int j = 0; j < vetorReserva.Length - 1; j++)
                        {
                            if (vetorReserva[j] != "#")
                            {
                                switch (vetorReserva[j])
                                {
                                    case "1":
                                        vetorReservaFinanceiro[1] = Convert.ToString(Convert.ToString(dsRReserva.Tables[0].Rows[i][12]));
                                        break;
                                    case "2":
                                        if (auxConsistencia == 0)
                                        {

                                            try
                                            {
                                                auxConsistencia = 0;
                                                countRowsWeb = 0;
                                                dsRPedidoCheque = ObterPedidoParcelamento(2, reserva, store);
                                                countRowsWeb = dsRPedidoCheque.Tables[0].DefaultView.Count;
                                            }
                                            catch (Exception e)
                                            {
                                                auxConsistencia = 1;
                                                msgInfo msg = new msgInfo("ERRO FATAL - " + "CONEXÃO COM WEBSERVICE FALHOU, REPITA A OPERAÇÃO E VERIFIQUE O STATUS DA INTERNET."); msg.ShowDialog();
                                                returnDefaultPDV();
                                                txtLojaConectorCF.Select();
                                            }
                                        }
                                        if (countRowsWeb > 0 && ataque == 0 && auxConsistencia == 0)
                                        {
                                            for (i = 0; i < countRowsWeb; i++)
                                            {
                                                if ((ataque = conectorPDV_replace_pedidoCheque(Convert.ToString(dsRPedidoCheque.Tables[0].Rows[i][0]),
                                                        Convert.ToString(dsRPedidoCheque.Tables[0].Rows[i][1]),
                                                        Convert.ToString(dsRPedidoCheque.Tables[0].Rows[i][2]),
                                                        Convert.ToString(dsRPedidoCheque.Tables[0].Rows[i][3]),
                                                        Convert.ToString(dsRPedidoCheque.Tables[0].Rows[i][4]),
                                                        Convert.ToString(dsRPedidoCheque.Tables[0].Rows[i][5]),
                                                        Convert.ToString(dsRPedidoCheque.Tables[0].Rows[i][6]),
                                                        Convert.ToString(dsRPedidoCheque.Tables[0].Rows[i][7]),
                                                        Convert.ToString(dsRPedidoCheque.Tables[0].Rows[i][8]),
                                                        Convert.ToString(dsRPedidoCheque.Tables[0].Rows[i][9]),
                                                        Convert.ToString(dsRPedidoCheque.Tables[0].Rows[i][10]))) == 0)
                                                {
                                                    vetorReservaFinanceiro[2] = String.Format("{0:F2}", dsRPedidoCheque.Tables[0].Rows[i][5]);
                                                }
                                            }
                                        }
                                        else
                                        {
                                            txtVisorMsgConectorCF.Text = conector_cancela_cupom(fiscal_flag);
                                        }
                                        break;
                                    case "3":
                                        if (auxConsistencia == 0)
                                        {

                                            try
                                            {
                                                auxConsistencia = 0;
                                                countRowsWeb = 0;
                                                dsRPedidoCrediario = ObterPedidoParcelamento(3, reserva, store);
                                                countRowsWeb = dsRPedidoCrediario.Tables[0].DefaultView.Count;
                                            }
                                            catch (Exception e)
                                            {
                                                auxConsistencia = 1;
                                                msgInfo msg = new msgInfo("ERRO FATAL - " + "CONEXÃO COM WEBSERVICE FALHOU, REPITA A OPERAÇÃO E VERIFIQUE O STATUS DA INTERNET."); msg.ShowDialog();
                                                returnDefaultPDV();
                                                txtLojaConectorCF.Select();
                                            }
                                        }                                        
                                        if (countRowsWeb > 0 && ataque == 0 && auxConsistencia == 0)
                                        {
                                            for (i = 0; i < countRowsWeb; i++)
                                            {
                                                if ((ataque = conectorPDV_replace_pedidoCrediario(Convert.ToString(dsRPedidoCrediario.Tables[0].Rows[i][0]),
                                                        Convert.ToString(dsRPedidoCrediario.Tables[0].Rows[i][1]),
                                                        Convert.ToString(dsRPedidoCrediario.Tables[0].Rows[i][2]),
                                                        Convert.ToString(dsRPedidoCrediario.Tables[0].Rows[i][3]),
                                                        Convert.ToString(dsRPedidoCrediario.Tables[0].Rows[i][4]),
                                                        Convert.ToString(dsRPedidoCrediario.Tables[0].Rows[i][5]),
                                                        Convert.ToString(dsRPedidoCrediario.Tables[0].Rows[i][6]),
                                                        Convert.ToString(dsRPedidoCrediario.Tables[0].Rows[i][7]),
                                                        Convert.ToString(dsRPedidoCrediario.Tables[0].Rows[i][8]),
                                                        Convert.ToString(dsRPedidoCrediario.Tables[0].Rows[i][9]),
                                                        Convert.ToString(dsRPedidoCrediario.Tables[0].Rows[i][10]),
                                                        Convert.ToString(dsRPedidoCrediario.Tables[0].Rows[i][11]),
                                                        Convert.ToString(dsRPedidoCrediario.Tables[0].Rows[i][12]))) == 0)
                                                {
                                                    vetorReservaFinanceiro[3] = String.Format("{0:F2}", dsRPedidoCrediario.Tables[0].Rows[i][10]);
                                                }
                                            }
                                        }
                                        else
                                        {
                                            txtVisorMsgConectorCF.Text = conector_cancela_cupom(fiscal_flag);
                                        }
                                        break;
                                    case "4":
                                        if (auxConsistencia == 0)
                                        {

                                            try
                                            {
                                                auxConsistencia = 0;
                                                countRowsWeb = 0;
                                                dsRPedidoConvenio = ObterPedidoParcelamento(4, reserva, store);
                                                countRowsWeb = dsRPedidoConvenio.Tables[0].DefaultView.Count;
                                            }
                                            catch (Exception e)
                                            {
                                                auxConsistencia = 1;
                                                msgInfo msg = new msgInfo("ERRO FATAL - " + "CONEXÃO COM WEBSERVICE FALHOU, REPITA A OPERAÇÃO E VERIFIQUE O STATUS DA INTERNET."); msg.ShowDialog();
                                                returnDefaultPDV();
                                                txtLojaConectorCF.Select();
                                            }
                                        }
                                        if (countRowsWeb > 0 && ataque == 0 && auxConsistencia == 0)
                                        {
                                            for (i = 0; i < countRowsWeb; i++)
                                            {
                                                if ((ataque = conectorPDV_replace_pedidoConvenio(Convert.ToString(dsRPedidoConvenio.Tables[0].Rows[i][0]),
                                                        Convert.ToString(dsRPedidoConvenio.Tables[0].Rows[i][1]),
                                                        Convert.ToString(dsRPedidoConvenio.Tables[0].Rows[i][2]),
                                                        Convert.ToString(dsRPedidoConvenio.Tables[0].Rows[i][3]),
                                                        Convert.ToString(dsRPedidoConvenio.Tables[0].Rows[i][4]),
                                                        Convert.ToString(dsRPedidoConvenio.Tables[0].Rows[i][5]),
                                                        Convert.ToString(dsRPedidoConvenio.Tables[0].Rows[i][6]),
                                                        Convert.ToString(dsRPedidoConvenio.Tables[0].Rows[i][7]),
                                                        Convert.ToString(dsRPedidoConvenio.Tables[0].Rows[i][8]),
                                                        Convert.ToString(dsRPedidoConvenio.Tables[0].Rows[i][9]))) == 0)
                                                {
                                                    vetorReservaFinanceiro[4] = String.Format("{0:F2}", dsRPedidoConvenio.Tables[0].Rows[i][8]);
                                                };
                                            }
                                        }
                                        else
                                        {
                                            txtVisorMsgConectorCF.Text = conector_cancela_cupom(fiscal_flag);
                                        }
                                        break;
                                    case "5":
                                        if (auxConsistencia == 0)
                                        {

                                            try
                                            {
                                                auxConsistencia = 0;
                                                countRowsWeb = 0;
                                                dsRPedidoCartao = ObterPedidoParcelamento(5, reserva, store);
                                                countRowsWeb = dsRPedidoCartao.Tables[0].DefaultView.Count;
                                            }
                                            catch (Exception e)
                                            {
                                                auxConsistencia = 1;
                                                msgInfo msg = new msgInfo("ERRO FATAL - " + "CONEXÃO COM WEBSERVICE FALHOU, REPITA A OPERAÇÃO E VERIFIQUE O STATUS DA INTERNET."); msg.ShowDialog();
                                                returnDefaultPDV();
                                                txtLojaConectorCF.Select();
                                            }
                                        }
                                        if (countRowsWeb > 0 && ataque == 0 && auxConsistencia == 0)
                                        {
                                            for (i = 0; i < countRowsWeb; i++)
                                            {
                                                if ((ataque = conectorPDV_replace_pedidoCartao(Convert.ToString(dsRPedidoCartao.Tables[0].Rows[i][0]),
                                                        Convert.ToString(dsRPedidoCartao.Tables[0].Rows[i][1]),
                                                        Convert.ToString(dsRPedidoCartao.Tables[0].Rows[i][2]),
                                                        Convert.ToString(dsRPedidoCartao.Tables[0].Rows[i][3]),
                                                        Convert.ToString(dsRPedidoCartao.Tables[0].Rows[i][4]),
                                                        Convert.ToString(dsRPedidoCartao.Tables[0].Rows[i][5]),
                                                        Convert.ToString(dsRPedidoCartao.Tables[0].Rows[i][6]),
                                                        Convert.ToString(dsRPedidoCartao.Tables[0].Rows[i][7]),
                                                        Convert.ToString(dsRPedidoCartao.Tables[0].Rows[i][8]))) == 0)
                                                {
                                                    vetorReservaFinanceiro[6] = String.Format("{0:F2}", dsRPedidoCartao.Tables[0].Rows[i][7]);
                                                };
                                            }
                                        }
                                        else
                                        {
                                            txtVisorMsgConectorCF.Text = conector_cancela_cupom(fiscal_flag);
                                        }
                                        break;
                                    case "6":
                                        if (auxConsistencia == 0)
                                        {

                                            try
                                            {
                                                auxConsistencia = 0;
                                                countRowsWeb = 0;
                                                dsRPedidoCartao = ObterPedidoParcelamento(6, reserva, store);
                                                countRowsWeb = dsRPedidoCartao.Tables[0].DefaultView.Count;
                                            }
                                            catch (Exception e)
                                            {
                                                auxConsistencia = 1;
                                                msgInfo msg = new msgInfo("ERRO FATAL - " + "CONEXÃO COM WEBSERVICE FALHOU, REPITA A OPERAÇÃO E VERIFIQUE O STATUS DA INTERNET."); msg.ShowDialog();
                                                returnDefaultPDV();
                                                txtLojaConectorCF.Select();
                                            }
                                        }
                                        if (countRowsWeb > 0 && ataque == 0 && auxConsistencia == 0)
                                        {
                                            for (i = 0; i < countRowsWeb; i++)
                                            {
                                                if ((ataque = conectorPDV_replace_pedidoCartao(Convert.ToString(dsRPedidoCartao.Tables[0].Rows[i][0]),
                                                        Convert.ToString(dsRPedidoCartao.Tables[0].Rows[i][1]),
                                                        Convert.ToString(dsRPedidoCartao.Tables[0].Rows[i][2]),
                                                        Convert.ToString(dsRPedidoCartao.Tables[0].Rows[i][3]),
                                                        Convert.ToString(dsRPedidoCartao.Tables[0].Rows[i][4]),
                                                        Convert.ToString(dsRPedidoCartao.Tables[0].Rows[i][5]),
                                                        Convert.ToString(dsRPedidoCartao.Tables[0].Rows[i][6]),
                                                        Convert.ToString(dsRPedidoCartao.Tables[0].Rows[i][7]),
                                                        Convert.ToString(dsRPedidoCartao.Tables[0].Rows[i][8]))) == 0)
                                                {
                                                    vetorReservaFinanceiro[5] = String.Format("{0:F2}", dsRPedidoCartao.Tables[0].Rows[i][7]);
                                                };
                                            }
                                        }
                                        else
                                        {
                                            txtVisorMsgConectorCF.Text = conector_cancela_cupom(fiscal_flag);
                                        }
                                        break;
                                    case "7":
                                        if (auxConsistencia == 0)
                                        {

                                            try
                                            {
                                                auxConsistencia = 0;
                                                countRowsWeb = 0;
                                                dsRPedidoBoleto = ObterPedidoParcelamento(7, reserva, store);
                                                countRowsWeb = dsRPedidoBoleto.Tables[0].DefaultView.Count;
                                            }
                                            catch (Exception e)
                                            {
                                                auxConsistencia = 1;
                                                msgInfo msg = new msgInfo("ERRO FATAL - " + "CONEXÃO COM WEBSERVICE FALHOU, REPITA A OPERAÇÃO E VERIFIQUE O STATUS DA INTERNET."); msg.ShowDialog();
                                                returnDefaultPDV();
                                                txtLojaConectorCF.Select();
                                            }
                                        }
                                        if (countRowsWeb > 0 && ataque == 0 && auxConsistencia == 0)
                                        {
                                            for (i = 0; i < countRowsWeb; i++)
                                            {
                                                if ((ataque = conectorPDV_replace_pedidoBoleto(Convert.ToString(dsRPedidoBoleto.Tables[0].Rows[i][0]),
                                                        Convert.ToString(dsRPedidoBoleto.Tables[0].Rows[i][1]),
                                                        Convert.ToString(dsRPedidoBoleto.Tables[0].Rows[i][2]),
                                                        Convert.ToString(dsRPedidoBoleto.Tables[0].Rows[i][3]),
                                                        Convert.ToString(dsRPedidoBoleto.Tables[0].Rows[i][4]),
                                                        Convert.ToString(dsRPedidoBoleto.Tables[0].Rows[i][5]),
                                                        Convert.ToString(dsRPedidoBoleto.Tables[0].Rows[i][6]),
                                                        Convert.ToString(dsRPedidoBoleto.Tables[0].Rows[i][7]),
                                                        Convert.ToString(dsRPedidoBoleto.Tables[0].Rows[i][8]),
                                                        Convert.ToString(dsRPedidoBoleto.Tables[0].Rows[i][9]))) == 0)
                                                {
                                                    vetorReservaFinanceiro[7] = String.Format("{0:F2}", dsRPedidoBoleto.Tables[0].Rows[i][6]);
                                                };
                                            }
                                        }
                                        else
                                        {
                                            txtVisorMsgConectorCF.Text = conector_cancela_cupom(fiscal_flag);
                                        }
                                        break;
                                    case "8":
                                        //vetorReservaFinanceiro[8] = Convert.ToString(dsRPedidoCartao.Tables[0].Rows[i][]);
                                        break;
                                    case "9":
                                        //vetorReservaFinanceiro[9] = Convert.ToString(dsRPedidoCartao.Tables[0].Rows[i][]);
                                        break;
                                    case "10":
                                        //vetorReservaFinanceiro[10] = Convert.ToString(dsRPedidoCartao.Tables[0].Rows[i][]);
                                        break;
                                }
                            }
                        }
                    }
                    else
                    {
                        txtVisorMsgConectorCF.Text = conector_cancela_cupom(fiscal_flag);
                    }
                }
                else
                {
                    txtVisorMsgConectorCF.Text = conector_cancela_cupom(fiscal_flag);
                }
                conector_reset_reserva();
                pnlReservaConectorCF.Visible = false;
                if (alwaysVariables.ModoOperacao == 1)
                {
                    txtEntradaDadosConectorCF.Select();
                }
                else
                {
                    txtEntradaDadosNF.Select();
                }
                //OBS: Termino no index 13
            }
            reservaFinanceiro = reserva;
            if (ataque == 1)
            {
                reserva = "0";
            }
            if (auxStatusReserva != "" && auxStatusReserva != "5" && auxStatusReserva != "6")
            {
                conector_find_subFull("1");
            }
            MyConector.Dispose();
            return reserva;

        }//END RESERVA PRE-VENDA
        protected void conector_webservice_crediario(string store, string carne, string parcela)
        {
            int ok = 0;
            int verificaBaixa = 0;
            auxConsistencia = 0;
            WebConectorServer.Service MyConector = new WebConectorServer.Service(alwaysVariables.UrlWebConector);
//            MyConector.Timeout = 15000;//Segundos
            string test = PingHost(MyConector.Url);

            
            if (test == null){test = "Host Unavailable";} //Assume base local.

            if (test == "Host Unavailable")
            {
                conectorPDV_exe_parcela();
            }
            else if (test == "Service Up")
            {
                if (auxConsistencia == 0)
                {

                    try
                    {
                        auxConsistencia = 0;
                        dsRDividento = MyConector.ObterDividento("0", store, carne, parcela, "3");
                        countRows = dsRDividento.Tables[0].DefaultView.Count;
                        //STATUS DO CARNE/PARCELA
                        auxStatusCrediario = MyConector.verificaStatusCrediario(carne, store).ToString();
                        auxStatusParcela = MyConector.verificaStatusParcelaCrediario(carne, store, parcela).ToString();
                        //END STATUS DO CARNE/PARCELA
                        if (countRows == 0)
                        {
                            msgInfo msg = new msgInfo(" CARO OPERADOR " + " PARCELA NÃO IDENTIFICADA NA BASE PRINCIPAL, COM ISSO O SERVIÇO SERÁ ENCERRADO."); msg.ShowDialog();
                            returnDefaultPDV();
                            txtNumeroContratoConectorCF.ReadOnly = false;
                            txtLojaConectorCF.Select();
                            auxConsistencia = 1;
                        }
                    }
                    catch (Exception e)
                    {
                        auxConsistencia = 1;
                        msgInfo msg = new msgInfo("ERRO FATAL - " + "CONEXÃO COM WEBSERVICE FALHOU, REPITA A OPERAÇÃO E VERIFIQUE O STATUS DA INTERNET."); msg.ShowDialog();
                        returnDefaultPDV();
                        txtLojaConectorCF.Select();
                    }
                }
                if (countRows == 1 && auxConsistencia == 0)
                {
                    if (auxStatusCrediario == "0" || auxStatusCrediario == "3")
                    {
                        if (auxConsistencia == 0)
                        {

                            try
                            {
                                auxConsistencia = 0;

                                //ATUALIZAÇÃO DO CARNE [BANCO DE DADOS]
                                dsRCabecalho = MyConector.ObterCrediario(carne, store);
                                countRowsWeb = dsRCabecalho.Tables[0].DefaultView.Count;
                            }
                            catch (Exception e)
                            {
                                auxConsistencia = 1;
                                msgInfo msg = new msgInfo("ERRO FATAL - " + "CONEXÃO COM WEBSERVICE FALHOU, REPITA A OPERAÇÃO E VERIFIQUE O STATUS DA INTERNET."); msg.ShowDialog();
                                returnDefaultPDV();
                                txtLojaConectorCF.Select();
                            }
                        }
                        if (countRowsWeb > 0 && auxConsistencia == 0)
                        {
                            if (auxConsistencia == 0)
                            {

                                try
                                {
                                    auxConsistencia = 0;
                                    auxPessoa = MyConector.verificaExitsPepleo(Convert.ToString(dsRCabecalho.Tables[0].Rows[0][3]));
                                    auxIdCliente = Convert.ToString(dsRCabecalho.Tables[0].Rows[0][3]);
                                }
                                catch (Exception e)
                                {
                                    auxConsistencia = 1;
                                    msgInfo msg = new msgInfo("ERRO FATAL - " + "CONEXÃO COM WEBSERVICE FALHOU, REPITA A OPERAÇÃO E VERIFIQUE O STATUS DA INTERNET."); msg.ShowDialog();
                                    returnDefaultPDV();
                                    txtLojaConectorCF.Select();
                                }
                            }
                            if (auxPessoa == 1 && conector_verifica_exits_pepleoLocal(auxIdCliente) == 1 && auxConsistencia == 0)
                            {
                                for (i = 0; i < countRowsWeb; i++)
                                {
                                    conectorPDV_replace_contrato(Convert.ToString(dsRCabecalho.Tables[0].Rows[i][0]),
                                        Convert.ToString(dsRCabecalho.Tables[0].Rows[i][1]),
                                        Convert.ToString(dsRCabecalho.Tables[0].Rows[i][2]),
                                        Convert.ToString(dsRCabecalho.Tables[0].Rows[i][3]),
                                        Convert.ToString(dsRCabecalho.Tables[0].Rows[i][4]),
                                        Convert.ToString(dsRCabecalho.Tables[0].Rows[i][5]),
                                        Convert.ToString(dsRCabecalho.Tables[0].Rows[i][6]),
                                        Convert.ToString(dsRCabecalho.Tables[0].Rows[i][7]),
                                        Convert.ToString(dsRCabecalho.Tables[0].Rows[i][8]),
                                        Convert.ToString(dsRCabecalho.Tables[0].Rows[i][9]),
                                        Convert.ToString(dsRCabecalho.Tables[0].Rows[i][10]),
                                        Convert.ToString(dsRCabecalho.Tables[0].Rows[i][11]),
                                        Convert.ToString(dsRCabecalho.Tables[0].Rows[i][12]),
                                        Convert.ToString(dsRCabecalho.Tables[0].Rows[i][13]),
                                        Convert.ToString(dsRCabecalho.Tables[0].Rows[i][14]),
                                        Convert.ToString(dsRCabecalho.Tables[0].Rows[i][15]),
                                        Convert.ToString(dsRCabecalho.Tables[0].Rows[i][16]),
                                        Convert.ToString(dsRCabecalho.Tables[0].Rows[i][17]),
                                        Convert.ToString(dsRCabecalho.Tables[0].Rows[i][18]),
                                        Convert.ToString(dsRCabecalho.Tables[0].Rows[i][19]),
                                        Convert.ToString(dsRCabecalho.Tables[0].Rows[i][20]));
                                }
                            }
                            else if (MessageBox.Show("Cliente não cadastrado, deseja atualiza-lo via Webservice?", "Observação", MessageBoxButtons.YesNo, MessageBoxIcon.Question) == System.Windows.Forms.DialogResult.Yes && auxPessoa == 1 && ataque == 0)
                            {
                                if (auxConsistencia == 0)
                                {

                                    try
                                    {
                                        auxConsistencia = 0;
                                        pgbWaitReservaConectorCF.Value = 2; //Inicio do cadastro de cliente
                                        dsRCliente = MyConector.ObterMainPepleo(auxIdCliente);
                                        countRowsWebCliente = dsRCliente.Tables[0].DefaultView.Count;
                                    }
                                    catch (Exception e)
                                    {
                                        auxConsistencia = 1;
                                        msgInfo msg = new msgInfo("ERRO FATAL - " + "CONEXÃO COM WEBSERVICE FALHOU, REPITA A OPERAÇÃO E VERIFIQUE O STATUS DA INTERNET."); msg.ShowDialog();
                                        returnDefaultPDV();
                                        txtLojaConectorCF.Select();
                                    }
                                }
                                if (countRowsWebCliente == 1 && ataque == 0 && auxConsistencia == 0)
                                {
                                    if ((ataque = conectorPDV_replace_cliente(Convert.ToString(dsRCliente.Tables[0].Rows[i][0]),
                                         Convert.ToString(dsRCliente.Tables[0].Rows[i][1]),
                                         Convert.ToString(dsRCliente.Tables[0].Rows[i][2]),
                                         Convert.ToString(dsRCliente.Tables[0].Rows[i][3]),
                                         Convert.ToString(dsRCliente.Tables[0].Rows[i][4]),
                                         Convert.ToString(dsRCliente.Tables[0].Rows[i][5]),
                                         Convert.ToString(dsRCliente.Tables[0].Rows[i][6]),
                                         Convert.ToString(dsRCliente.Tables[0].Rows[i][7]),
                                         Convert.ToString(dsRCliente.Tables[0].Rows[i][8]),
                                         Convert.ToString(dsRCliente.Tables[0].Rows[i][9]),
                                         Convert.ToString(dsRCliente.Tables[0].Rows[i][10]),
                                         Convert.ToString(dsRCliente.Tables[0].Rows[i][11]),
                                         Convert.ToString(dsRCliente.Tables[0].Rows[i][12]),
                                         Convert.ToString(dsRCliente.Tables[0].Rows[i][13])
                                        )) == 0)
                                    {
                                        
                                    }
                                    switch (Convert.ToString(dsRCliente.Tables[0].Rows[i][2]))
                                    {
                                        case "1":
                                            if (auxConsistencia == 0)
                                            {

                                                try
                                                {
                                                    auxConsistencia = 0;
                                                    dsRFisica = MyConector.ObterMainPepleoFisica(auxIdCliente);
                                                    countRowsWebCliente = dsRFisica.Tables[0].DefaultView.Count;
                                                }
                                                catch (Exception e)
                                                {
                                                    auxConsistencia = 1;
                                                    msgInfo msg = new msgInfo("ERRO FATAL - " + "CONEXÃO COM WEBSERVICE FALHOU, REPITA A OPERAÇÃO E VERIFIQUE O STATUS DA INTERNET."); msg.ShowDialog();
                                                    returnDefaultPDV();
                                                    txtLojaConectorCF.Select();
                                                }
                                            }
                                            if (countRowsWebCliente == 1 && auxConsistencia == 0)
                                            {
                                                if ((ataque = conectorPDV_replace_fisica(Convert.ToString(dsRFisica.Tables[0].Rows[i][0]),
                                                                            Convert.ToString(dsRFisica.Tables[0].Rows[i][1]),
                                                                            Convert.ToString(dsRFisica.Tables[0].Rows[i][2]),
                                                                            Convert.ToString(dsRFisica.Tables[0].Rows[i][3]),
                                                                            Convert.ToString(dsRFisica.Tables[0].Rows[i][4]),
                                                                            Convert.ToString(dsRFisica.Tables[0].Rows[i][5]),
                                                                            Convert.ToString(dsRFisica.Tables[0].Rows[i][6]),
                                                                            Convert.ToString(dsRFisica.Tables[0].Rows[i][7]))) == 0)
                                                {
                                        
                                                }
                                            }
                                            break;
                                        case "2":
                                            if (auxConsistencia == 0)
                                            {

                                                try
                                                {
                                                    auxConsistencia = 0;
                                                    dsRJuridica = MyConector.ObterMainPepleoJuridica(auxIdCliente);
                                                    countRowsWebCliente = dsRJuridica.Tables[0].DefaultView.Count;
                                                }
                                                catch (Exception e)
                                                {
                                                    auxConsistencia = 1;
                                                    msgInfo msg = new msgInfo("ERRO FATAL - " + "CONEXÃO COM WEBSERVICE FALHOU, REPITA A OPERAÇÃO E VERIFIQUE O STATUS DA INTERNET."); msg.ShowDialog();
                                                    returnDefaultPDV();
                                                    txtLojaConectorCF.Select();
                                                }
                                            }
                                            if (countRowsWebCliente == 1 && auxConsistencia == 0)
                                            { //index 2.2
                                                if ((ataque = conectorPDV_replace_juridica(Convert.ToString(dsRJuridica.Tables[0].Rows[i][0]),
                                                                            Convert.ToString(dsRJuridica.Tables[0].Rows[i][1]),
                                                                            Convert.ToString(dsRJuridica.Tables[0].Rows[i][2]),
                                                                            Convert.ToString(dsRJuridica.Tables[0].Rows[i][3]),
                                                                            Convert.ToString(dsRJuridica.Tables[0].Rows[i][4]),
                                                                            Convert.ToString(dsRJuridica.Tables[0].Rows[i][5]),
                                                                            Convert.ToString(dsRJuridica.Tables[0].Rows[i][6]),
                                                                            Convert.ToString(dsRJuridica.Tables[0].Rows[i][7]))) == 0)
                                                {
                                        
                                                }
                                            }
                                            break;
                                        case "3":
                                            if (auxConsistencia == 0)
                                            {

                                                try
                                                {
                                                    auxConsistencia = 0;
                                                    dsRRural = MyConector.ObterMainPepleoRural(auxIdCliente);
                                                    countRowsWebCliente = dsRRural.Tables[0].DefaultView.Count;
                                                }
                                                catch (Exception e)
                                                {
                                                    auxConsistencia = 1;
                                                    msgInfo msg = new msgInfo("ERRO FATAL - " + "CONEXÃO COM WEBSERVICE FALHOU, REPITA A OPERAÇÃO E VERIFIQUE O STATUS DA INTERNET."); msg.ShowDialog();
                                                    returnDefaultPDV();
                                                    txtLojaConectorCF.Select();
                                                }
                                            }
                                            if (countRowsWebCliente == 1 && auxConsistencia == 0)
                                            { //index 2.2
                                                if ((ataque = conectorPDV_replace_rural(Convert.ToString(dsRRural.Tables[0].Rows[i][0]),
                                                                            Convert.ToString(dsRRural.Tables[0].Rows[i][1]),
                                                                            Convert.ToString(dsRRural.Tables[0].Rows[i][2]),
                                                                            Convert.ToString(dsRRural.Tables[0].Rows[i][3]),
                                                                            Convert.ToString(dsRRural.Tables[0].Rows[i][4]),
                                                                            Convert.ToString(dsRRural.Tables[0].Rows[i][5]),
                                                                            Convert.ToString(dsRRural.Tables[0].Rows[i][6]),
                                                                            Convert.ToString(dsRRural.Tables[0].Rows[i][7]),
                                                                            Convert.ToString(dsRRural.Tables[0].Rows[i][8]))) == 0)
                                                {
                                                }
                                            }
                                            break;
                                        default:
                                            ataque = 2;
                                            break;
                                    }
                                }
                                if (ataque == 0)
                                {
                                    if (auxConsistencia == 0)
                                    {

                                        try
                                        {
                                            auxConsistencia = 0;
                                            dsREndereco = MyConector.ObterEndereco(auxIdCliente);
                                            countRowsWebCliente = dsREndereco.Tables[0].DefaultView.Count;
                                        }
                                        catch (Exception e)
                                        {
                                            auxConsistencia = 1;
                                            msgInfo msg = new msgInfo("ERRO FATAL - " + "CONEXÃO COM WEBSERVICE FALHOU, REPITA A OPERAÇÃO E VERIFIQUE O STATUS DA INTERNET."); msg.ShowDialog();
                                            returnDefaultPDV();
                                            txtLojaConectorCF.Select();
                                        }
                                    }
                                    if (countRowsWebCliente >= 1 && ataque == 0 && auxConsistencia == 0)
                                    { //index 2.3
                                        for (int i = 0; i < countRowsWebCliente; i++)
                                        {
                                            if ((ataque = conectorPDV_replace_endereco(Convert.ToString(dsREndereco.Tables[0].Rows[i][0]),
                                                                        Convert.ToString(dsREndereco.Tables[0].Rows[i][1]),
                                                                        Convert.ToString(dsREndereco.Tables[0].Rows[i][2]),
                                                                        Convert.ToString(dsREndereco.Tables[0].Rows[i][3]),
                                                                        Convert.ToString(dsREndereco.Tables[0].Rows[i][4]),
                                                                        Convert.ToString(dsREndereco.Tables[0].Rows[i][5]),
                                                                        Convert.ToString(dsREndereco.Tables[0].Rows[i][6]),
                                                                        Convert.ToString(dsREndereco.Tables[0].Rows[i][7]),
                                                                        Convert.ToString(dsREndereco.Tables[0].Rows[i][8]),
                                                                        Convert.ToString(dsREndereco.Tables[0].Rows[i][9]),
                                                                        Convert.ToString(dsREndereco.Tables[0].Rows[i][10]),
                                                                        Convert.ToString(dsREndereco.Tables[0].Rows[i][11]))) == 0)
                                            {
                                                
                                            }
                                        }
                                    }
                                    if (auxConsistencia == 0)
                                    {

                                        try
                                        {
                                            auxConsistencia = 0;
                                            dsRFone = MyConector.ObterFone(auxIdCliente);
                                            countRowsWebCliente = dsRFone.Tables[0].DefaultView.Count;
                                        }
                                        catch (Exception e)
                                        {
                                            auxConsistencia = 1;
                                            msgInfo msg = new msgInfo("ERRO FATAL - " + "CONEXÃO COM WEBSERVICE FALHOU, REPITA A OPERAÇÃO E VERIFIQUE O STATUS DA INTERNET."); msg.ShowDialog();
                                            returnDefaultPDV();
                                            txtLojaConectorCF.Select();
                                        }
                                    }
                                    if (countRowsWebCliente >= 1 && ataque == 0 && auxConsistencia == 0)
                                    {//index 2.4
                                        for (int i = 0; i < countRowsWebCliente; i++)
                                        {
                                            if ((ataque = conectorPDV_replace_fone(Convert.ToString(dsRFone.Tables[0].Rows[i][0]),
                                                                        Convert.ToString(dsRFone.Tables[0].Rows[i][1]),
                                                                        Convert.ToString(dsRFone.Tables[0].Rows[i][2]),
                                                                        Convert.ToString(dsRFone.Tables[0].Rows[i][3]),
                                                                        Convert.ToString(dsRFone.Tables[0].Rows[i][4]),
                                                                        Convert.ToString(dsRFone.Tables[0].Rows[i][5]),
                                                                        Convert.ToString(dsRFone.Tables[0].Rows[i][6]),
                                                                        Convert.ToString(dsRFone.Tables[0].Rows[i][7]),
                                                                        Convert.ToString(dsRFone.Tables[0].Rows[i][8]))) == 0)
                                            {
                                                pgbWaitReservaConectorCF.Value = 5;
                                            }
                                        }
                                    }
                                    if (auxConsistencia == 0)
                                    {

                                        try
                                        {
                                            auxConsistencia = 0;
                                            dsRProfissional = MyConector.ObterPepleoProfissional(auxIdCliente);
                                            countRowsWebCliente = dsRProfissional.Tables[0].DefaultView.Count;
                                        }
                                        catch (Exception e)
                                        {
                                            auxConsistencia = 1;
                                            msgInfo msg = new msgInfo("ERRO FATAL - " + "CONEXÃO COM WEBSERVICE FALHOU, REPITA A OPERAÇÃO E VERIFIQUE O STATUS DA INTERNET."); msg.ShowDialog();
                                            returnDefaultPDV();
                                            txtLojaConectorCF.Select();
                                        }
                                    }
                                    if (countRowsWebCliente >= 1 && ataque == 0 && auxConsistencia == 0)
                                    { //index 2.5
                                        for (int i = 0; i < countRowsWebCliente; i++)
                                        {
                                            if ((ataque = conectorPDV_replace_clienteProfissional(Convert.ToString(dsRProfissional.Tables[0].Rows[i][0]),
                                                                        Convert.ToString(dsRProfissional.Tables[0].Rows[i][1]),
                                                                        Convert.ToString(dsRProfissional.Tables[0].Rows[i][2]),
                                                                        Convert.ToString(dsRProfissional.Tables[0].Rows[i][3]),
                                                                        Convert.ToString(dsRProfissional.Tables[0].Rows[i][4]),
                                                                        Convert.ToString(dsRProfissional.Tables[0].Rows[i][5]),
                                                                        Convert.ToString(dsRProfissional.Tables[0].Rows[i][6]),
                                                                        Convert.ToString(dsRProfissional.Tables[0].Rows[i][7]),
                                                                        Convert.ToString(dsRProfissional.Tables[0].Rows[i][8]))) == 0)
                                            {
                                                
                                            }
                                        }
                                    }
                                    if (auxConsistencia == 0)
                                    {

                                        try
                                        {
                                            auxConsistencia = 0;
                                            countRowsWebCliente = 0;
                                            dsRRisco = MyConector.ObterPepleoRisco(auxIdCliente);
                                            countRowsWebCliente = dsRRisco.Tables[0].DefaultView.Count;
                                        }
                                        catch (Exception e)
                                        {
                                            auxConsistencia = 1;
                                            msgInfo msg = new msgInfo("ERRO FATAL - " + "CONEXÃO COM WEBSERVICE FALHOU, REPITA A OPERAÇÃO E VERIFIQUE O STATUS DA INTERNET."); msg.ShowDialog();
                                            returnDefaultPDV();
                                            txtLojaConectorCF.Select();
                                        }
                                    }
                                    if (countRowsWebCliente >= 1 && ataque == 0 && auxConsistencia == 0)
                                    { //index 2.6
                                        for (int i = 0; i < countRowsWebCliente; i++)
                                        {
                                            if ((ataque = conectorPDV_replace_clienteRisco(Convert.ToString(dsRRisco.Tables[0].Rows[i][0]),
                                                                        Convert.ToString(dsRRisco.Tables[0].Rows[i][1]),
                                                                        Convert.ToString(dsRRisco.Tables[0].Rows[i][2]),
                                                                        Convert.ToString(dsRRisco.Tables[0].Rows[i][3]),
                                                                        Convert.ToString(dsRRisco.Tables[0].Rows[i][4]),
                                                                        Convert.ToString(dsRRisco.Tables[0].Rows[i][5]),
                                                                        Convert.ToString(dsRRisco.Tables[0].Rows[i][6]),
                                                                        Convert.ToString(dsRRisco.Tables[0].Rows[i][7]),
                                                                        Convert.ToString(dsRRisco.Tables[0].Rows[i][8]),
                                                                        Convert.ToString(dsRRisco.Tables[0].Rows[i][9]),
                                                                        Convert.ToString(dsRRisco.Tables[0].Rows[i][10]),
                                                                        Convert.ToString(dsRRisco.Tables[0].Rows[i][11]),
                                                                        Convert.ToString(dsRRisco.Tables[0].Rows[i][12]),
                                                                        Convert.ToString(dsRRisco.Tables[0].Rows[i][13]),
                                                                        Convert.ToString(dsRRisco.Tables[0].Rows[i][14]),
                                                                        Convert.ToString(dsRRisco.Tables[0].Rows[i][15]))) == 0)
                                            {
                                                
                                            }
                                        }
                                    }
                                    if (auxConsistencia == 0)
                                    {

                                        try
                                        {
                                            auxConsistencia = 0;
                                            countRowsWebCliente = 0;
                                            dsRReferencia = MyConector.ObterPepleoReferencia(auxIdCliente);
                                            countRowsWebCliente = dsRReferencia.Tables[0].DefaultView.Count;
                                        }
                                        catch (Exception e)
                                        {
                                            auxConsistencia = 1;
                                            msgInfo msg = new msgInfo("ERRO FATAL - " + "CONEXÃO COM WEBSERVICE FALHOU, REPITA A OPERAÇÃO E VERIFIQUE O STATUS DA INTERNET."); msg.ShowDialog();
                                            returnDefaultPDV();
                                            txtLojaConectorCF.Select();
                                        }
                                    }

                                    if (countRowsWebCliente >= 1 && ataque == 0 && auxConsistencia == 0)
                                    { //index 2.7
                                        for (int i = 0; i < countRowsWebCliente; i++)
                                        {
                                            if ((ataque = conectorPDV_replace_clienteReferencia(Convert.ToString(dsRReferencia.Tables[0].Rows[i][0]),
                                                                        Convert.ToString(dsRReferencia.Tables[0].Rows[i][1]),
                                                                        Convert.ToString(dsRReferencia.Tables[0].Rows[i][2]),
                                                                        Convert.ToString(dsRReferencia.Tables[0].Rows[i][3]),
                                                                        Convert.ToString(dsRReferencia.Tables[0].Rows[i][4]),
                                                                        Convert.ToString(dsRReferencia.Tables[0].Rows[i][5]),
                                                                        Convert.ToString(dsRReferencia.Tables[0].Rows[i][6]),
                                                                        Convert.ToString(dsRReferencia.Tables[0].Rows[i][7]),
                                                                        Convert.ToString(dsRReferencia.Tables[0].Rows[i][8]),
                                                                        Convert.ToString(dsRReferencia.Tables[0].Rows[i][9])
                                                                                                        )) == 0)
                                            {
                                                
                                            }
                                        }
                                    }
                                    
                                    if (countRowsWebCliente >= 1 && ataque == 0 && auxConsistencia == 0)
                                    { //index 2.8
                                        for (int i = 0; i < countRowsWebCliente; i++)
                                        {
                                            if ((ataque = conectorPDV_replace_clienteCobranca(Convert.ToString(dsRCobranca.Tables[0].Rows[i][0]),
                                                                        Convert.ToString(dsRCobranca.Tables[0].Rows[i][1]),
                                                                        Convert.ToString(dsRCobranca.Tables[0].Rows[i][2]),
                                                                        Convert.ToString(dsRCobranca.Tables[0].Rows[i][3]),
                                                                        Convert.ToString(dsRCobranca.Tables[0].Rows[i][4])
                                                                                                        )) == 0)
                                            {
                                                
                                            }
                                        }
                                    }
                                    if (auxConsistencia == 0)
                                    {

                                        try
                                        {
                                            auxConsistencia = 0;
                                            countRowsWebCliente = 0;
                                            dsREntrega = MyConector.ObterPepleoEntrega(auxIdCliente);
                                            countRowsWebCliente = dsREndereco.Tables[0].DefaultView.Count;
                                        }
                                        catch (Exception e)
                                        {
                                            auxConsistencia = 1;
                                            msgInfo msg = new msgInfo("ERRO FATAL - " + "CONEXÃO COM WEBSERVICE FALHOU, REPITA A OPERAÇÃO E VERIFIQUE O STATUS DA INTERNET."); msg.ShowDialog();
                                            returnDefaultPDV();
                                            txtLojaConectorCF.Select();
                                        }
                                    }
                                    if (countRowsWebCliente >= 1 && ataque == 0 && auxConsistencia == 0)
                                    { //index 2.9
                                        for (int i = 0; i < countRowsWebCliente; i++)
                                        {
                                            if ((ataque = conectorPDV_replace_clienteEntrega(Convert.ToString(dsREndereco.Tables[0].Rows[i][0]),
                                                                        Convert.ToString(dsREndereco.Tables[0].Rows[i][1]),
                                                                        Convert.ToString(dsREndereco.Tables[0].Rows[i][2]),
                                                                        Convert.ToString(dsREndereco.Tables[0].Rows[i][3]),
                                                                        Convert.ToString(dsREndereco.Tables[0].Rows[i][4])
                                                                                                        )) == 0)
                                            {
                                                
                                            }
                                        }
                                    }
                                    if (conector_verifica_exits_pepleoLocal(auxIdCliente) == 1 && auxConsistencia == 0)//Reverifica e con
                                    {
                                        conector_webservice_crediario(txtLojaConectorCF.Text, txtNumeroContratoConectorCF.Text, txtParcelaConectorCF.Text);
                                    }
                                }
                            }
                            else
                            {
                                ataque = 1;
                            }
                        }
                        if (auxConsistencia == 0)
                        {

                            try
                            {
                                auxConsistencia = 0;
                                countRowsWeb = 0;
                                dsRParcelamento = MyConector.ObterParcelamento(carne, store);
                                countRowsWeb = dsRParcelamento.Tables[0].DefaultView.Count;
                            }
                            catch (Exception e)
                            {
                                auxConsistencia = 1;
                                msgInfo msg = new msgInfo("ERRO FATAL - " + "CONEXÃO COM WEBSERVICE FALHOU, REPITA A OPERAÇÃO E VERIFIQUE O STATUS DA INTERNET."); msg.ShowDialog();
                                returnDefaultPDV();
                                txtLojaConectorCF.Select();
                            }
                        }

                        if (countRowsWeb > 0 && auxConsistencia == 0)
                        {
                            for (i = 0; i < countRowsWeb; i++)
                            {
                                conectorPDV_replace_parcela2(Convert.ToString(dsRParcelamento.Tables[0].Rows[i][0]),
                                        Convert.ToString(dsRParcelamento.Tables[0].Rows[i][1]),
                                        Convert.ToString(dsRParcelamento.Tables[0].Rows[i][2]),
                                        Convert.ToString(dsRParcelamento.Tables[0].Rows[i][3]),
                                        Convert.ToString(dsRParcelamento.Tables[0].Rows[i][4]),
                                        Convert.ToString(dsRParcelamento.Tables[0].Rows[i][5]),
                                        Convert.ToString(dsRParcelamento.Tables[0].Rows[i][6]),
                                        Convert.ToString(dsRParcelamento.Tables[0].Rows[i][7]),
                                        Convert.ToString(dsRParcelamento.Tables[0].Rows[i][8]),
                                        Convert.ToString(dsRParcelamento.Tables[0].Rows[i][9]),
                                        Convert.ToString(dsRParcelamento.Tables[0].Rows[i][10]),
                                        Convert.ToString(dsRParcelamento.Tables[0].Rows[i][11]),
                                        Convert.ToString(dsRParcelamento.Tables[0].Rows[i][12]),
                                        Convert.ToString(dsRParcelamento.Tables[0].Rows[i][13]),
                                        Convert.ToString(dsRParcelamento.Tables[0].Rows[i][14]));
                            }
                        }
                        //END ATUALIZAÇÃO DO CARNE [BANCO DE DADOS]
                        if (auxConsistencia == 0)
                        {
                            try
                            {
                                if (dsRDividento.Tables[0].Rows[0][11].ToString() == "0" || dsRDividento.Tables[0].Rows[0][11].ToString() == "2")
                                {
                                    dtpEmissaoConectorCF.Value = Convert.ToDateTime(dsRDividento.Tables[0].Rows[0][2].ToString());
                                    txtDiasAtrasoConectorCF.Text = dsRDividento.Tables[0].Rows[0][6].ToString();
                                    txtValorPrestacaoConectorCF.Text = dsRDividento.Tables[0].Rows[0][4].ToString();
                                    txtParcelaConectorCF.Text = dsRDividento.Tables[0].Rows[0][3].ToString();
                                    lbNomeConectorCF.Text = dsRDividento.Tables[0].Rows[0][9].ToString();
                                    lbNumeroClienteConectorCF.Text = dsRDividento.Tables[0].Rows[0][8].ToString();
                                    auxIdCliente = dsRDividento.Tables[0].Rows[0][8].ToString();
                                    txtArmotizadoConectorCF.Text = dsRDividento.Tables[0].Rows[0][10].ToString();
                                    verificaBaixa = Convert.ToInt32(dsRDividento.Tables[0].Rows[0][12].ToString());
                                    auxIdParcela = dsRDividento.Tables[0].Rows[0][13].ToString();
                                    if (Convert.ToDecimal(dsRDividento.Tables[0].Rows[0][10].ToString()) > 0)
                                    {
                                        cmbSituacaoContratoConectorCF.Text = "2 | PARCIAL";
                                    }
                                    ok = 1;
                                }
                                else
                                {
                                    ok = 0;
                                }
                            }
                            catch (Exception erro)
                            { msgInfo msg = new msgInfo("Caro Cliente - " + erro.Message); msg.ShowDialog(); }
                            finally
                            {
                                if (ok == 0)
                                {
                                    msgInfo msg = new msgInfo("Caro Cliente - " + "Contrato inválido para o recebimento, ou não existe."); msg.ShowDialog();
                                    returnDefaultPDV();
                                    /* if (ataque == 1)
                                     {
                                         this.DialogResult = DialogResult.Cancel;
                                         this.Dispose();
                                     }*/
                                    txtLojaConectorCF.Select();
                                }
                                else if (ok == 1)
                                {
                                    if (verificaBaixa == 1)
                                    {
                                        conectorPDV_grade_calculo(Convert.ToDecimal(txtValorPrestacaoConectorCF.Text) - Convert.ToDecimal(txtArmotizadoConectorCF.Text));
                                        txtLojaConectorCF.ReadOnly = true;
                                        txtNumeroContratoConectorCF.ReadOnly = true;
                                        txtParcelaConectorCF.ReadOnly = true;
                                    }
                                    else
                                    {
                                        msgInfo msg = new msgInfo("Caro Cliente - " + "Existe parcela anterior não baixada, impossível prosseguir."); msg.ShowDialog();
                                        returnDefaultPDV();
                                        /*if (ataque == 1)
                                        {
                                            this.DialogResult = DialogResult.Cancel;
                                            this.Dispose();
                                        }*/
                                        txtLojaConectorCF.Select();
                                    }
                                }
                            }
                        }//End AuxConsistencia
                    }
                }
            }
            MyConector.Dispose();
        }
        protected int conector_load_reserva_itens(string store, string produto, string qtty, string valor_unitario, string descontoValor)
        {
            index = produto.IndexOf("*");

            resetLabel();

            fiscal_flag = 0;

            reserva_qtty_itens = qtty;
            reserva_valor_un = valor_unitario.Replace(",", ".");

            functionECF.conectorECF_fiscal_flag(alwaysVariables.ModeloEcf, ref fiscal_flag, ref fiscal_MSG, ref fiscal_retorno, alwaysVariables.ECF_Ligada);
            
            //Carrega Variaveis do Produto
            conector_produto(produto = Right(produto, (produto.Length - (index + 1))), alwaysVariables.Store, ref registro);
            if (reserva_item_idProduto == null)
            {
                reserva_item_idProduto = produto;
                reserva_item_qtty_itens = last_item_qtty;
                reserva_item_preciLiquido = last_valor_item;
                reserva_item_valor_unitario = last_item_valor_unitario;
                reserva_item_barra = last_item_barra;
                reserva_item_desconto = last_item_desconto;
            }
            
            if (registro == 0)
            {
                produto_chave = reserva_item_idProduto;
                produto_qtty = reserva_item_qtty_itens.Replace(",", ".");
                produto_price_custo = Math.Round(Decimal.Parse(reserva_item_preciLiquido.Replace(",", ".")), 2).ToString();
                produto_price_venda = Math.Round(Decimal.Parse(reserva_item_qtty_itens.Replace(",", ".")) * Decimal.Parse(reserva_item_valor_unitario.Replace(",", ".")), 2).ToString();
                produto_desconto = (((Math.Round(Decimal.Parse(reserva_item_desconto.Replace(",", ".")), 2) / Math.Round(Decimal.Parse(reserva_item_qtty_itens.Replace(",", ".")) * Decimal.Parse(reserva_item_valor_unitario.Replace(",", ".")), 2)) * 100)).ToString();
                produto_barra = reserva_item_barra;
                produto_valor_unitario = Math.Round(Decimal.Parse(reserva_item_valor_unitario.Replace(",", ".")), 2).ToString();
                //conector_produto(produto = Right(produto, (produto.Length - (index + 1))), alwaysVariables.Store, ref registro);
                if (fiscal_flag == 0 || fiscal_flag == 32 || fiscal_flag == 36)
                {
                    txtVisorMsgConectorCF.Text = "CUPOM FISCAL - ABERTO";
                    functionECF.conectorECF_AbreCupomMFD(alwaysVariables.ModeloEcf, "", "", "", ref fiscal_MSG, ref fiscal_retorno, alwaysVariables.ECF_Ligada);
                    if (backgroundConectorCupom.IsBusy != true)
                    {
                        // Start the asynchronous operation.
                        backgroundConectorCupom.RunWorkerAsync();
                    }
                    //fiscal_retorno = conectorECF.Bematech_FI_AbreCupom("");
                    functionECF.conectorECF_NumeroCupom(alwaysVariables.ModeloEcf, ref fiscal_Cupom, ref fiscal_MSG, ref fiscal_retorno, alwaysVariables.ECF_Ligada);
                    //fiscal_retorno = conectorECF.Bematech_FI_NumeroCupom(ref fiscal_Cupom);
                    if (fiscal_retorno == 1 && functionECF.conectorECF_Analisa_RetornoImpressora(alwaysVariables.ModeloEcf,ref ACK, ref ST1, ref ST2, ref ST3, ref fiscal_MSG))
                    {
                        conectorPDV_inc_cupom_cabecalho(fiscal_Cupom, fiscal_numero_caixa, null, lbOperadorConectorCF.Text, null, null, null, null, null, DateTime.Now, null, 0, null, 0, null, null, null, null, null, null, null, pedido,"1");
                    }
                    else { conector_retorno_ack(); ataque = 1; }
                    if (functionECF.conectorECF_Erros(alwaysVariables.ModeloEcf).Replace("\r","").Trim() != "COMANDO OK")
                    {
                        conector_retorno_ack();
                        ataque = 1;
                    }
                    if (call_pdv == 0)
                    {
                        ltbDetalhesConectorCF.Clear();
                        ltbDetalhesConectorCF.Text = " ITEM  CÓDIGO  DESCRIÇÃO QTD  UN VL UNIT(R$) ST VL ITEM(R$)" + "\r\n" +
                                                      "========================================================";
                        rtbVisualizacaoDadosNf.Clear();
                        rtbVisualizacaoDadosNf.Text = " ITEM  CÓDIGO  DESCRIÇÃO QTD  UN VL UNIT(R$) ST VL ITEM(R$)" + "\r\n" +
                                                                                                                                                 "===========================================================";

                    }
                }
                else if (fiscal_flag == 33 || fiscal_flag == 1 || fiscal_flag == 37)
                {
                    txtVisorMsgConectorCF.Text = "CUPOM FISCAL ABERTO";
                }

                if (Convert.ToDecimal(valor_unitario.Replace(",",".")) > 0)
                {
                    if (produto_tipo_quantidade == "I")
                    {
                        if (Convert.ToDecimal(qtty.Replace(",", ".")) > 1)
                        {
                            qtty = Math.Round(Decimal.Parse(qtty.Replace(",", ".")), 0).ToString();
                        }
                        else
                        {
                            qtty = Math.Round(Decimal.Parse(produto_qtty.Replace(",", ".")), 0).ToString();
                        }
                        
                    }
                    else if (produto_tipo_quantidade == "F")
                    {
                        if (Convert.ToDecimal(lbQttyConectorCF.Text.Replace(",", ".")) == 0)
                        {
                            qtty = lbQttyConectorCF.Text.Replace(",", ".");
                        }
                        else
                        {
                            qtty = Math.Round(Decimal.Parse(produto_qtty.Replace(",", ".")), 3).ToString().Replace(".", ",");
                        }
                    }
                    functionECF.conectorECF_VendeItem(alwaysVariables.ModeloEcf, produto, produto_descricao, produto_tributacao_mq, produto_tipo_quantidade, qtty.Replace(".", ","), 2, Math.Round(Decimal.Parse(valor_unitario.Replace(",", ".")), 2).ToString().Replace(".", ","), "%", Math.Round(Decimal.Parse(produto_desconto.Replace(",", ".")), 2).ToString().Replace(".", ","), ref fiscal_MSG, ref fiscal_retorno, alwaysVariables.ECF_Ligada);
                    produto_qtty = qtty.Replace(".", ",");
                    //fiscal_retorno = conectorECF.Bematech_FI_VendeItem(produto, produto_descricao, produto_tributacao_mq, produto_tipo_quantidade, qtty.Replace(".", ","), 2, Math.Round(Decimal.Parse(valor_unitario), 2).ToString().Replace(".", ","), "%", "0");
                    //conectorECF.Analisa_iRetorno(fiscal_retorno, ref fiscal_MSG);
                    if (fiscal_retorno == 1 && functionECF.conectorECF_Analisa_RetornoImpressora(alwaysVariables.ModeloEcf,ref ACK, ref ST1, ref ST2, ref ST3, ref fiscal_MSG))
                    {//Modifica grande total
                        
                        /*
                        if (File.Exists(folderMFDGrand + "\\grandFullPDV" + ".enc"))
                        {//Atualiza Grande Total
                            fiscal_GT_Crypt = new string('\x20', 20);
                            File.Delete(folderMFDGrand + "\\grandFullPDV" + ".enc");
                            functionECF.conectorECF_GrandeTotal_Crypt(alwaysVariables.ModeloEcf, ref fiscal_GT_Crypt, ref fiscal_MSG, ref fiscal_retorno, alwaysVariables.ECF_Ligada);
                            cryptografia.encryptFile(fiscal_GT_Crypt.Trim(), "grandFullPDV", 0);
                        }*/
                    }
                    else if (fiscal_retorno !=  1)
                    {
                        if (fiscal_retorno == 0)
                        {
                            msgInfo msg = new msgInfo(1, "Caro Cliente - " + "COMANDO NÃO EXECUTADO...!"); msg.ShowDialog();
                        }
                        else
                        {
                            msgInfo msg = new msgInfo(1, "Caro Cliente - " + fiscal_MSG); msg.ShowDialog();
                        }
                    }
                    
                    /* //Flavio if (conectorECF.Erros.Replace("\r", "").Trim() != "COMANDO OK")
                    {
                        ataque = 1;
                        resetLabel();
                        txtVisorMsgConectorCF.Text = fiscal_MSG;
                    }*/
                    

                    if (fiscal_retorno == 1 && functionECF.conectorECF_Analisa_RetornoImpressora(alwaysVariables.ModeloEcf,ref ACK, ref ST1, ref ST2, ref ST3, ref fiscal_MSG))
                    {
                        sequenciaItem = (Int32.Parse(sequenciaItem) + 1).ToString().PadLeft(3, '0');
                        if (call_pdv == 0)
                        {
                            string itens = "0";
                            if (txtEntradaDadosConectorCF.Text == produto_barra)
                            {
                                itens = produto_barra;
                            }
                            else
                            {
                                itens = produto_chave;
                            }
                            ltbDetalhesConectorCF.Text += sequenciaItem + "    "
                                                       + itens + "    "//produto_barra.PadLeft(12, '0') + "    "
                                                       + produto_descricao + "    "
                                                       + (produto_pesavel == "0" ? produto_qtty.Replace(".", ",") : "    ") + "    "
                                                       + produto_unidade + "    "
                                                       + (produto_pesavel == "0" ? Math.Round(Convert.ToDecimal(produto_qtty.Replace(",","."))) + produto_unidade : String.Format("{0:F3}", Decimal.Parse(produto_qtty.Replace(",", ".")), 3).ToString().Replace(".", ",") + " X " + produto_unidade) + "    "
                                                       + Math.Round(Decimal.Parse(reserva_item_valor_unitario.Replace(",", ".")), 2).ToString() + "      "
                                                       + produto_tributacao + "    "
                                                       + Math.Round((Decimal.Parse(produto_qtty.Replace(",", ".")) * Decimal.Parse(produto_valor_unitario.Replace(",", "."))), 2).ToString().Replace(".", ",") + "\r\n";
                            ltbDetalhesConectorCF.Text += "___________________________________________________________" + "\r\n";
                            ltbDetalhesConectorCF.Select(ltbDetalhesConectorCF.Text.Length, 0);
                            ltbDetalhesConectorCF.ScrollToCaret();

                        }
                        last_item_qtty = produto_qtty;
                        last_item_valor_unitario = produto_valor_unitario;
                        last_item_tipo_desconto = produto_tipo_desconto;
                        last_item_desconto = produto_desconto;
                        last_item_price_venda = produto_price_venda;
                        last_valor_item = produto_valor_unitario;
                        last_qtty_item = produto_qtty;

                        //Insert o item 'cupom detalhes '
                        conectorPDV_inc_cupom_detalhes(fiscal_Cupom.Replace("\0","").Trim(), fiscal_numero_caixa, produto_chave, produto_barra, produto_descricao, produto_qtty, Math.Round(Decimal.Parse(produto_valor_unitario.Replace(",", ".")), 2).ToString().Replace(",", "."), produto_desconto, (Decimal.Parse(produto_valor_unitario.Replace(",", ".")) * Math.Round(Decimal.Parse(produto_qtty.Replace(",",".")), 2)).ToString(), lbOperadorConectorCF.Text /*rever*/, produto_tipo_quantidade, produto_unidade, reserva_item_desconto == null ? "0":reserva_item_desconto, reserva_metodo, pedido, produto_tributacao, produto_price_custo, "0.00", "0.00", "0", produto_chave, produto_trunca, produto_ippt);

                        if (fiscal_retorno == 1 && auxConsistencia == 0)
                        {
                            if (Convert.ToDouble(descontoValor.Replace(",", ".")) > 0)
                            {
                                string test = String.Format("{0:F2}", ((Convert.ToDecimal(descontoValor.Replace(",", ".")) / Math.Round((Decimal.Parse(last_item_qtty.Replace(",", ".")) * Decimal.Parse(last_item_valor_unitario.Replace(",", "."))), 2))) * 100).ToString().Replace(".", ",");
                                functionECF.conectorECF_AcrescimoDescontoItem(alwaysVariables.ModeloEcf, sequenciaItem, "D", last_item_tipo_desconto, String.Format("{0:F2}", ((Convert.ToDecimal(descontoValor.Replace(",", ".")) / Math.Round((Decimal.Parse(last_item_qtty.Replace(",", ".")) * Decimal.Parse(last_item_valor_unitario.Replace(",", "."))), 2))) * 100).ToString().Replace(".", ","), ref fiscal_MSG, ref fiscal_retorno, alwaysVariables.ECF_Ligada);
                                //fiscal_retorno = conectorECF.Bematech_FI_AcrescimoDescontoItemMFD(sequenciaItem, "D", last_item_tipo_desconto, String.Format("{0:F2}", ((Convert.ToDecimal(descontoValor.Replace(",", ".")) / Math.Round((Decimal.Parse(last_item_qtty.Replace(",", ".")) * Decimal.Parse(last_item_valor_unitario.Replace(",", "."))), 2))) * 100).ToString().Replace(".", ","));
                                if (fiscal_retorno == 1)
                                {
                                    conectorPDV_PAFECF_exe("R04", fiscal_Cupom.Replace(",", "").Trim(), 5, produto_barra.Replace("\0", "").Trim(), sequenciaItemAle);
                                    conectorPDV_PAFECF_exe("R05", fiscal_Cupom.Replace(",", "").Trim(), 4, produto_barra.Replace("\0", "").Trim(), sequenciaItemAle);
                                    call_pdv = 0;
                                    call_funcao = 0;
                                    txtVisorMsgConectorCF.Text = "CUPOM FISCAL ABERTO";
                                    this.ltbDetalhesConectorCF.ForeColor = System.Drawing.Color.Yellow;
                                    ltbDetalhesConectorCF.Text += "                                     DESCONTO ITEM => " + sequenciaItem + "   " + test + "% (R$ " + descontoValor + ")" + "\r\n";
                                    ltbDetalhesConectorCF.Text += "___________________________________________________________" + "\r\n";
                                    ltbDetalhesConectorCF.Select(ltbDetalhesConectorCF.Text.Length, 0);
                                    ltbDetalhesConectorCF.ScrollToCaret();
                                    this.ltbDetalhesConectorCF.ForeColor = System.Drawing.Color.White;
                                    conector_desconto_item(fiscal_Cupom, fiscal_store.Replace("\0", "").Trim(), fiscal_numero_caixa.Replace("\0", "").Trim(), sequenciaItem, test.Replace(",", "."));
                                    resetLabel();
                                    txtEntradaDadosConectorCF.Clear();
                                    conector_find_subFull("1");
                                    if (alwaysVariables.ModoOperacao == 1)
                                    {
                                        txtEntradaDadosConectorCF.Select();
                                    }
                                    else
                                    {
                                        txtEntradaDadosNF.Select();
                                    }
                                    valuesAcresDesc = "    ";
                                    acresDesc = " ";
                                }
                            }
                        }
                    }
                    else
                    {
                        if (functionECF.conectorECF_Erros(alwaysVariables.ModeloEcf) != "")
                        {
                            conector_retorno_ack();
                        }
                        else
                        {
                            txtVisorMsgConectorCF.Text = "ITEM INVÁLIDO - " + produto_barra;
                            ataque = 1;
                        }
                        if (alwaysVariables.ModoOperacao == 1)
                        {
                            txtEntradaDadosConectorCF.Select();
                        }
                        else
                        {
                            txtEntradaDadosNF.Select();
                        }
                        ataque = 1;
                    }
                    txtEntradaDadosConectorCF.Clear();
                }
                else
                {
                    txtEntradaDadosConectorCF.Clear();
                    txtVisorMsgConectorCF.Text = "ITEM INVÁLIDO - PREÇO ZERADO";
                    if (alwaysVariables.ModoOperacao == 1)
                    {
                        txtEntradaDadosConectorCF.Select();
                    }
                    else
                    {
                        txtEntradaDadosNF.Select();
                    }
                    ataque = 1;
                }
            }
            else
            {
                ataque = 1;
            }

            reserva_item_idProduto = null;

            return ataque;
        }
        //###########################################################END FUNÇÕES WEBSERVICE ###################################################################

        //###########################################################Controle de objetos#######################################################################
        void conectorPDV_talk_pessoa()
        {
            if (Convert.ToDecimal(txtValorPagoConectorCF.Text.Replace(",", ".")) == 0)
            {
                //this.Hide();
                string nome;
                consultaCliente consulta = new consultaCliente(alwaysVariables.Store, alwaysVariables.Usuario, fiscal_numero_caixa);

                if (consulta.ShowDialog() == DialogResult.OK)
                {
                    auxIdCliente = consulta.GridCodigo;
                    auxNomeRazao = nome = consulta.GridNome;
                    auxLogradouro = consulta.GridLogradouro + ", " + consulta.GridNumero + " " + consulta.GridCidade + " UF: " + " " + consulta.GridEstado;
                    if (consulta.GridTypePessoa == 2)
                    {
                        auxNomeRazao = consulta.GridRazao;
                        auxCPFCNPJ = consulta.GridCNPJ;
                    }
                    else
                    {
                        auxNomeRazao = consulta.GridNome;
                        auxCPFCNPJ = consulta.GridCPF;
                    }
                    if (auxIdCliente != "")
                    {
                        string store = "";
                        if (txtLojaConectorCF.Text != "")
                        {
                            store = alwaysVariables.Store;
                        }
                        else
                        {
                            store = txtLojaConectorCF.Text;
                        }
                        editorPrestacao parcelamento = new editorPrestacao(auxIdCliente, nome,store);
                        if (parcelamento.ShowDialog(this) == DialogResult.OK)
                        {

                            if (parcelamento.GridStore != "")
                            {
                                if (parcelamento.GridNrParcela != "")
                                {
                                    txtLojaConectorCF.Text = parcelamento.GridStore;
                                    txtNumeroContratoConectorCF.Text = parcelamento.GridContrato;
                                    dtpEmissaoConectorCF.Value = Convert.ToDateTime(parcelamento.GridEmissao);
                                    txtDiasAtrasoConectorCF.Text = parcelamento.GridPrazo;
                                    txtValorPrestacaoConectorCF.Text = parcelamento.GridValorPrestacao;
                                    txtParcelaConectorCF.Text = parcelamento.GridNrParcela;
                                    lbNumeroClienteConectorCF.Text = parcelamento.GridCliente;
                                    lbNomeConectorCF.Text = parcelamento.GridNomeCliente;
                                    conector_webservice_crediario(txtLojaConectorCF.Text, txtNumeroContratoConectorCF.Text, txtParcelaConectorCF.Text);

                                }
                            }
                        }
                    }
                    else
                    {
                        auxLogradouro = "";
                    }
                    this.Show();
                }
                else
                {
                    this.Show();
                }
            }
            else
            {
                msgInfo msg = new msgInfo("Caro Cliente - " + "Pagamento inicializado, finalize o pagamento para prosseguir...!"); msg.ShowDialog();
            }
        }
        void statusObjPDV(bool flag)
        {
            txtLojaConectorCF.ReadOnly = flag;
            txtNumeroContratoConectorCF.ReadOnly = flag;
            txtParcelaConectorCF.ReadOnly = flag;
        }
        void conectorPDV_talk_parcela() // sem informação
        {
            //returnDefault();
            if (Convert.ToDecimal(txtValorPrestacaoConectorCF.Text) == 0)
            {
                if (txtLojaConectorCF.Text != "" && txtLojaConectorCF.Text != "0")
                {
                    if (txtNumeroContratoConectorCF.Text != "" && txtNumeroContratoConectorCF.Text != "000000000000000000000" && Convert.ToDouble(txtNumeroContratoConectorCF.Text) > 0)
                    {
                        if (txtParcelaConectorCF.Text != "")
                        {
                            int test = conector_verifica_exits_contrato(txtNumeroContratoConectorCF.Text, txtParcelaConectorCF.Text, txtLojaConectorCF.Text);
                            if (test == 1)
                            {
                                conectorPDV_exe_parcela();
                            }
                            else if (test == 0)
                            {
                                msgInfo msg = new msgInfo("Caro Operador - " + "Uma consulta web ao servidor será realizada, caso obtenha sucesso a sua será atualizada...!"); msg.ShowDialog();
                                conector_webservice_crediario(txtLojaConectorCF.Text, txtNumeroContratoConectorCF.Text, txtParcelaConectorCF.Text);
                            }
                        }
                    }
                }
            }
        }
        void conectorPDV_acion_funcao()
        {
            functionECF.VerificaEstadoGaveta(alwaysVariables.ModeloEcf, ref fiscal_MSG, ref gaveta, ref fiscal_retorno, alwaysVariables.ECF_Ligada);
            if ((gaveta == 0 && (lbINumeroSerieConectorCF.Text.Trim() != "" && alwaysVariables.ECF_Ligada != -6)) && alwaysVariables.gavetaEcf == 1)
            {
                //Estado = 1 sensor em nível 1 (fechada)
                //Estado = 0 sensor em nível 0 (aberta)
                msg = new msgInfo("INFORMAÇÃO DO SISTEMA! GAVETA ABERTA."); msg.ShowDialog();
            }
            //Zera Variaveil Produto
            resetVariable();

            if (call_pdv == 0)
            {
                conector_verifica_crz_cro(ref fiscal_banco_crz, ref fiscal_banco_cro);
            }
            //Verificar Serial
            if (1==1 ||((call_pdv == 1 && txtEntradaDadosConectorCF.Text == "8") || 
                cryptografia.conectorPDV_verifica_serial() == true || 
                (call_pdv == 1 && (txtEntradaDadosConectorCF.Text == "" ? "0" : txtEntradaDadosConectorCF.Text) == "26") || 
                alwaysVariables.ModoOperacao == 0 || call_pdv == 8 || (call_pdv == 1 && call_funcao == 6)))
            {
                conector_verifica_venda_bruta(ref fiscal_banco_venda);
                conectorPDV_test_grandeTotal();
                if (alwaysVariables.ModoOperacao == 1)
                {
                    conector_verifica_crz_cro(ref fiscal_banco_crz, ref fiscal_banco_cro);//Conferencia Banco de dados
                    conector_verifica_venda_bruta(ref fiscal_banco_venda);

                    if ((alwaysVariables.flagHomologacao == "0" && !File.Exists(folderMFDGrand + "\\MD5" + ".enc")) || (cryptografia.conectorPDV_aut_serial() == true && call_pdv == 0) || (call_pdv != 0) || fiscal_numero_serie == "EMULADOR            ")
                    {

                        if (lbINumeroSerieConectorCF.Text.Trim() != "" || call_pdv == 8)
                        {
                            if (fiscal_data_printer.Trim() == "" || fiscal_data_printer == "000000")
                            {
                                functionECF.conectorECF_DataHoraPrinter(alwaysVariables.ModeloEcf, ref fiscal_data_printer, ref fiscal_hora_printer, ref fiscal_MSG, ref fiscal_retorno, alwaysVariables.ECF_Ligada);
                            }

                            if ((String.Format("{0:ddMMyy}", DateTime.Now) == fiscal_data_printer && call_pdv == 0) || Convert.ToDouble(call_pdv) >= 1)
                            {
                                int minutes = 0;

                                if (lbINumeroSerieConectorCF.Text.Trim() != "" && alwaysVariables.ECF_Ligada != -6)
                                {
                                    TimeSpan temp01 = new TimeSpan(Convert.ToInt32(fiscal_hora_printer.Substring(0, 2)), Convert.ToInt32(fiscal_hora_printer.Substring(2, 2)), Convert.ToInt32(fiscal_hora_printer.Substring(4, 2)));
                                    TimeSpan temp02 = new TimeSpan(Convert.ToInt32(DateTime.Now.ToString("dd/MM/yyyy HH':'mm':'ss 'GMT'").Substring(11, 2)), Convert.ToInt32(DateTime.Now.ToString("dd/MM/yyyy HH':'mm':'ss 'GMT'").Substring(14, 2)), Convert.ToInt32(DateTime.Now.ToString("dd/MM/yyyy HH':'mm':'ss 'GMT'").Substring(17, 2)));
                                    TimeSpan temp03 = temp01 - temp02;
                                    TimeSpan temp04 = temp02.Subtract(temp01);
                                    minutes = (temp04.Hours * 60) + temp04.Minutes;
                                }
                                
                                if (functionECF.conectorECF_Analisa_RetornoImpressora(alwaysVariables.ModeloEcf, ref ACK, ref ST1, ref ST2, ref ST3, ref fiscal_MSG) || call_pdv == 8 || (call_pdv == 1 && call_funcao == 6) || (call_pdv == 1 && call_funcao == 7))
                                {
                                    if (minutes >= -60 && minutes <= 60 || call_pdv == 8) //Tolerancia de time ECF
                                    {
                                        if (pnlAutorizacaoPDVConectorCF.Visible == false)
                                        {

                                            flagDataAtual = String.Format("{0:ddMMyy}", DateTime.Now);
                                            if (flag_recebimento == 0)
                                            {
                                                if (call_pdv == 8 || flagDataAtual == fiscal_data_movimento || (call_pdv == 1 && call_funcao == 6) || (call_pdv == 1 && call_funcao == 7) || (call_pdv == 1 && txtEntradaDadosConectorCF.Text == "6" || call_pdv == 1 && txtEntradaDadosConectorCF.Text == "7") || Convert.ToDouble(fiscal_data_movimento.Replace("\0", "").Trim() == "" ? "0" : fiscal_data_movimento) == 0 || (txtEntradaDadosConectorCF.Text == "8" && call_pdv == 1))
                                                {

                                                    if (call_pdv != 3 && call_pdv != 4 && call_pdv != 5 && call_pdv != 6 && call_pdv != 7 && call_pdv != 8) //Diferente do Financeiro e Info Cliente
                                                    {
                                                        fiscal_flag = 0;
                                                        functionECF.conectorECF_fiscal_flag(alwaysVariables.ModeloEcf, ref fiscal_flag, ref fiscal_MSG, ref fiscal_retorno, alwaysVariables.ECF_Ligada);

                                                        if (call_funcao != 1)
                                                        {
                                                            index = txtEntradaDadosConectorCF.Text.IndexOf("*");
                                                            //if (index == -1) { resetLabel(); }
                                                            resetLabel();
                                                        }
                                                        else if (fiscal_flag == 8)
                                                        {
                                                            txtVisorMsgConectorCF.Text = "ECF INOPERANTE";
                                                        }
                                                        else if (fiscal_flag == 35)
                                                        {
                                                            txtVisorMsgConectorCF.Text = "PAGAMENTO INICIADO - FINALIZE O CUPOM";
                                                            txtEntradaDadosConectorCF.Clear();
                                                            txtEntradaDadosConectorCF.Select();
                                                        }
                                                        if (fiscal_retorno == 1 || (call_pdv == 1 && txtEntradaDadosConectorCF.Text == "8"))
                                                        {
                                                            switch (call_pdv)
                                                            {
                                                                case 0:
                                                                    switch (call_funcao)
                                                                    {
                                                                        case 0:
                                                                            conectorPDV_acion_cupom();
                                                                            /*if (backgroundConectorCupom.IsBusy != true)
                                                                            {
                                                                                // Start the asynchronous operation.
                                                                                backgroundConectorCupom.RunWorkerAsync();
                                                                            }
                                                                            arranque = 1;*/
                                                                            
                                                                            break;
                                                                        case 1:
                                                                            //fiscal_flag = 0;
                                                                            //functionECF.conectorECF_fiscal_flag(alwaysVariables.ModeloEcf, ref fiscal_flag, ref fiscal_MSG, ref fiscal_retorno, alwaysVariables.ECF_Ligada);

                                                                            if (fiscal_flag == 8)
                                                                            {
                                                                                txtVisorMsgConectorCF.Text = "ECF INOPERANTE";
                                                                            }
                                                                            else if (fiscal_flag == 35)
                                                                            {
                                                                                txtVisorMsgConectorCF.Text = "PAGAMENTO INICIADO - FINALIZE O CUPOM";
                                                                                txtEntradaDadosConectorCF.Clear();
                                                                                txtEntradaDadosConectorCF.Select();
                                                                            }
                                                                            else if (fiscal_flag == 33 || fiscal_flag == 36 || fiscal_flag == 37)
                                                                            {
                                                                                int result = conector_verifica_exits_sequencia(fiscal_Cupom, fiscal_store, fiscal_numero_caixa, txtEntradaDadosConectorCF.Text, 1);
                                                                                if (result == 1)
                                                                                {
                                                                                    string temp = txtEntradaDadosConectorCF.Text;
                                                                                    index = txtEntradaDadosConectorCF.Text.IndexOf("*");
                                                                                    if (produto_barra != "" && produto_barra != "0")
                                                                                    {
                                                                                        txtEntradaDadosConectorCF.Text = produto_barra;
                                                                                    }
                                                                                    conector_produto(txtEntradaDadosConectorCF.Text = Right(txtEntradaDadosConectorCF.Text, (txtEntradaDadosConectorCF.Text.Length - (index + 1))), fiscal_store.Replace("\0", "").Trim() == "" ? alwaysVariables.Store : fiscal_store.Replace("\0", "").Trim(), ref registro);
                                                                                    sequenciaItemAle = temp;
                                                                                    txtVisorMsgConectorCF.Text = " CONFIRME O CANCELAMENTO [ ENTER ]";
                                                                                    txtDescricaoItemConectorCF.Text = "[ CANCELAMENTO ]";
                                                                                    txtEntradaDadosConectorCF.Clear();
                                                                                    txtEntradaDadosConectorCF.Select();
                                                                                }
                                                                                else
                                                                                {
                                                                                    txtVisorMsgConectorCF.Text = " ITEM INVÁLIDO PARA [ CANCELAMENTO ]";
                                                                                    valuesAcresDesc = "    ";
                                                                                    txtEntradaDadosConectorCF.Clear();
                                                                                    txtEntradaDadosConectorCF.Select();
                                                                                }

                                                                                /* if (fiscal_retorno == 1)
                                                                                {

                                                                                    if (produto_barra == "")
                                                                                    {
                                                                                        index = txtEntradaDadosConectorCF.Text.IndexOf("*");
                                                                                        conector_produto(txtEntradaDadosConectorCF.Text = Right(txtEntradaDadosConectorCF.Text, (txtEntradaDadosConectorCF.Text.Length - (index + 1))), fiscal_store.Replace("\0", "").Trim() == "" ? alwaysVariables.Store : fiscal_store, ref registro);
                                                                                        txtVisorMsgConectorCF.Text = "INFORME O VALOR DO ITEM";
                                                                                        resetLabel();
                                                                                        txtDescricaoItemConectorCF.Text = "[ CANCELAMENTO ]";
                                                                                        txtEntradaDadosConectorCF.Clear();
                                                                                        txtEntradaDadosConectorCF.Select();
                                                                                    }
                                                                                    else if (valuesAcresDesc == "    " || Convert.ToDecimal(valuesAcresDesc == "   " ? "0" : valuesAcresDesc) == 0)
                                                                                    {

                                                                                        if (txtEntradaDadosConectorCF.Text != "" && Convert.ToDecimal(txtEntradaDadosConectorCF.Text.Replace(",", ".") == "    " ? 0 : Convert.ToDecimal(txtEntradaDadosConectorCF.Text.Replace(",", "."))) > 0)
                                                                                        {
                                                                                            valuesAcresDesc = txtEntradaDadosConectorCF.Text;
                                                                                            if (valuesAcresDesc != "   " && Convert.ToDecimal(valuesAcresDesc.Replace(",", ".") == "   " ? "0" : valuesAcresDesc.Replace(",", ".")) > 0)
                                                                                            {
                                                                                                sequenciaItemAle = conector_verifica_exits_itemAleatorio(fiscal_Cupom.Replace("\0", "").Trim(), fiscal_numero_caixa.Replace("\0", "").Trim(), fiscal_numero_caixa.Replace("\0", "").Trim(), produto_barra, valuesAcresDesc.Replace(",", ".") == "    " ? "0" : valuesAcresDesc.Replace(",", ".")).ToString().PadLeft(3, '0');
                                                                                                if (Convert.ToInt32(sequenciaItemAle.Trim() == "" ? "0" : sequenciaItemAle) > 0)
                                                                                                {
                                                                                                }
                                                                                                else
                                                                                                {
                                                                                                    sequenciaItemAle = "   ";
                                                                                                    valuesAcresDesc = "    ";
                                                                                                    call_funcao = 0;
                                                                                                    resetLabel();
                                                                                                    resetVariable();
                                                                                                    txtVisorMsgConectorCF.Text = "ITEM INFORMADO NÃO EXISTE";
                                                                                                    txtEntradaDadosConectorCF.Select();
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                        else
                                                                                        {
                                                                                            valuesAcresDesc = "    ";
                                                                                        }
                                                                                    }
                                                                                }*/
                                                                            }
                                                                            break;
                                                                        //default: /* Abre e inseri cupom */
                                                                          //  conectorPDV_acion_cupom();
                                                                           // break;
                                                                    }

                                                                    break;
                                                                case 1:

                                                                    if (txtEntradaDadosConectorCF.Text == "") { call_funcao = 0; } else { if (lblVisorEntradaDadosConectorCF.Text == "ENTRADA DE DADOS") { call_funcao = Convert.ToInt32(txtEntradaDadosConectorCF.Text); } };
                                                                    txtEntradaDadosConectorCF.CausesValidation = false;

                                                                    conectorPDV_acion_menu_operacional();

                                                                    break;
                                                            }//End Switch
                                                        }
                                                        else
                                                        {
                                                            msg = new msgInfo(1, "CARO USUÁRIO: ERRO FATAL, ECF SEM COMUNICAÇÃO, VERIFIQUE O STATUS DA IMPRESSORA."); msg.ShowDialog();
                                                            txtEntradaDadosConectorCF.Clear();
                                                            txtEntradaDadosConectorCF.Select();
                                                        }
                                                        if (pnlAutorizacaoPDVConectorCF.Visible == false)
                                                        {
                                                            if (call_pdv == 9)
                                                            {
                                                                txtPesquisaProduto.Select();
                                                            }
                                                            else
                                                            {
                                                                txtEntradaDadosConectorCF.Select();
                                                            }

                                                        }
                                                    }
                                                    else if (call_pdv == 7)
                                                    {
                                                        fiscal_flag = 0;
                                                        functionECF.conectorECF_fiscal_flag(alwaysVariables.ModeloEcf, ref fiscal_flag, ref fiscal_MSG, ref fiscal_retorno, alwaysVariables.ECF_Ligada);

                                                        if (fiscal_flag == 8)
                                                        {
                                                            txtVisorMsgConectorCF.Text = "ECF INOPERANTE";
                                                        }
                                                        else if (fiscal_flag == 35)
                                                        {
                                                            txtVisorMsgConectorCF.Text = "PAGAMENTO INICIADO - FINALIZE O CUPOM";
                                                            txtEntradaDadosConectorCF.Clear();
                                                            txtEntradaDadosConectorCF.Select();
                                                        }
                                                        else if (fiscal_flag == 33 || fiscal_flag == 36 || fiscal_flag == 37)
                                                        {
                                                            if (fiscal_retorno == 1)
                                                            {
                                                                conectorPDV_acion_descAcres();
                                                            }
                                                        }
                                                    }
                                                    else if (call_pdv == 3)
                                                    {
                                                        if (Convert.ToDecimal(txtEntradaDadosConectorCF.Text == "" ? "0" : txtEntradaDadosConectorCF.Text.Replace(",", ".")) >= 0)
                                                        {
                                                            switch (call_funcao)
                                                            {
                                                                case 1:
                                                                    if (txtEntradaDadosConectorCF.Text != "")
                                                                    {
                                                                        if (Convert.ToDecimal(txtEntradaDadosConectorCF.Text.Replace(",", ".")) > 0 && Convert.ToDecimal(txtEntradaDadosConectorCF.Text.Replace(",", ".")) < 100)
                                                                        {
                                                                            valuesAcresDesc = txtEntradaDadosConectorCF.Text.Replace(",", ".");
                                                                            acresDesc = Math.Round((Convert.ToDecimal(txtEntradaDadosConectorCF.Text.Replace(",", ".")) * 100)).ToString();
                                                                            //valuesAcresDesc = String.Format("{0:F3}", ((Convert.ToDecimal(txtSubTotalConectorCF.Text.Replace(",", ".")) * Convert.ToDecimal(valuesAcresDesc.Replace(",", "."))) / 100)).Replace(".", ",");
                                                                            valuesAcresDesc = (Math.Truncate(100*((Convert.ToDecimal(txtSubTotalConectorCF.Text.Replace(",", ".")) * Convert.ToDecimal(valuesAcresDesc.Replace(",", "."))) / 100))/100).ToString().Replace(".", ",");
                                                                            lblRestanteMoneyConectorCF.Text = lblTotalMoneyConectorCF.Text = (Convert.ToDecimal(txtSubTotalConectorCF.Text.Replace(",", ".")) - Convert.ToDecimal(valuesAcresDesc.Replace(",", "."))).ToString().Replace(".", ",");
                                                                            this.pnlTotalConectorCF.Size = new System.Drawing.Size(650, 527);

                                                                            //Flavio conector_desconto_subTotal(fiscal_Cupom, fiscal_store.Replace("\0", "").Trim(), fiscal_numero_caixa.Replace("\0", "").Trim(), txtEntradaDadosConectorCF.Text.Replace(",", "."));

                                                                            txtEntradaDadosConectorCF.Clear();
                                                                            txtEntradaDadosConectorCF.ReadOnly = true;
                                                                            txtEntradaDadosConectorCF.CausesValidation = true;
                                                                            btnDinheiroConectorCF.Select();
                                                                            ativa_discount = 1;
                                                                            typeDescAcre = call_funcao;
                                                                            call_funcao = 0;

                                                                        }
                                                                        else
                                                                        {
                                                                            valuesAcresDesc = "    ";
                                                                            acresDesc = " ";
                                                                            this.pnlTotalConectorCF.Size = new System.Drawing.Size(650, 527);
                                                                            btnDinheiroConectorCF.Select();
                                                                        }
                                                                    }
                                                                    else
                                                                    {
                                                                        valuesAcresDesc = "    ";
                                                                        acresDesc = " ";
                                                                        this.pnlTotalConectorCF.Size = new System.Drawing.Size(650, 527);
                                                                        btnDinheiroConectorCF.Select();
                                                                    }
                                                                    break;
                                                                case 2:
                                                                    if (txtEntradaDadosConectorCF.Text != "")
                                                                    {
                                                                        if (Convert.ToDecimal(txtEntradaDadosConectorCF.Text.Replace(",", ".")) > 0 && Convert.ToDecimal(txtEntradaDadosConectorCF.Text.Replace(",", ".")) < 100)
                                                                        {
                                                                            valuesAcresDesc = txtEntradaDadosConectorCF.Text.Replace(",", ".");
                                                                            acresDesc = Math.Round((Convert.ToDecimal(txtEntradaDadosConectorCF.Text.Replace(",", ".")) * 100)).ToString();
                                                                            valuesAcresDesc = String.Format("{0:F2}", ((Convert.ToDecimal(txtSubTotalConectorCF.Text.Replace(",", ".")) * Convert.ToDecimal(valuesAcresDesc.Replace(",", "."))) / 100)).Replace(".", ",");
                                                                            lblRestanteMoneyConectorCF.Text = lblTotalMoneyConectorCF.Text = (Convert.ToDecimal(txtSubTotalConectorCF.Text.Replace(",", ".")) + Convert.ToDecimal(valuesAcresDesc.Replace(",", "."))).ToString().Replace(".", ",");
                                                                            this.pnlTotalConectorCF.Size = new System.Drawing.Size(650, 527);
                                                                            txtEntradaDadosConectorCF.Clear();
                                                                            txtEntradaDadosConectorCF.ReadOnly = true;
                                                                            txtEntradaDadosConectorCF.CausesValidation = true;
                                                                            btnDinheiroConectorCF.Select();
                                                                            //conector_acrescimo_subTotal(fiscal_Cupom.Replace("\0", "").Trim(), fiscal_store.Replace("\0", "").Trim() == "" ? alwaysVariables.Store : fiscal_store, fiscal_numero_caixa.Replace("\0", "").Trim(), valuesAcresDesc.Replace(",", "."));
                                                                            ativa_acrescimo = 1;
                                                                            typeDescAcre = call_funcao;
                                                                            call_funcao = 0;
                                                                        }
                                                                        else
                                                                        {
                                                                            valuesAcresDesc = "    ";
                                                                            acresDesc = " ";
                                                                            this.pnlTotalConectorCF.Size = new System.Drawing.Size(650, 527);
                                                                            btnDinheiroConectorCF.Select();
                                                                        }
                                                                    }
                                                                    else
                                                                    {
                                                                        valuesAcresDesc = "    ";
                                                                        acresDesc = " ";
                                                                        this.pnlTotalConectorCF.Size = new System.Drawing.Size(650, 527);
                                                                        btnDinheiroConectorCF.Select();
                                                                    }
                                                                    break;
                                                            }
                                                        }
                                                        else { msg = new msgInfo("CARO USUÁRIO: VALOR INVÁLIDO."); msg.ShowDialog(); txtEntradaDadosConectorCF.Clear(); txtEntradaDadosConectorCF.Select(); }
                                                    }
                                                    else if (call_pdv == 8)
                                                    {
                                                        homTeste = 0;
                                                        if (call_pdv == 8 && txtEntradaDadosConectorCF.Text == "10" && call_funcao == 0)
                                                        {
                                                            txtEntradaDadosConectorCF.Text = "5";
                                                            homTeste = 1;
                                                        }
                                                        if (txtEntradaDadosConectorCF.Text == "")
                                                        { call_funcao = 0; }
                                                        else
                                                        { if (lblVisorEntradaDadosConectorCF.Text == "ENTRADA DE DADOS") { call_funcao = Convert.ToInt32(txtEntradaDadosConectorCF.Text); } };
                                                        txtEntradaDadosConectorCF.CausesValidation = false;
                                                        functionECF.conectorECF_VerificaImpressoraLigada(alwaysVariables.ModeloEcf, ref fiscal_MSG, ref fiscal_retorno);

                                                        conectorPDV_acion_menu_fiscal();
                                                    }
                                                }
                                                else
                                                {
                                                    fiscal_flag = 0;
                                                    functionECF.conectorECF_fiscal_flag(alwaysVariables.ModeloEcf, ref fiscal_flag, ref fiscal_MSG, ref fiscal_retorno, alwaysVariables.ECF_Ligada);
                                                    if (fiscal_flag == 0 || fiscal_flag == 32)
                                                    {
                                                        //functionECF.conectorECF_AcionaGuilhotinaMFD(alwaysVariables.ModeloEcf, 1 , ref fiscal_MSG, ref fiscal_retorno, alwaysVariables.ECF_Ligada);
                                                        functionECF.conectorECF_FechaRelatorioGerencial(alwaysVariables.ModeloEcf, ref fiscal_MSG, ref fiscal_retorno, alwaysVariables.ECF_Ligada);
                                                        //fiscal_retorno = conectorECF.Bematech_FI_FechaRelatorioGerencial();
                                                    }

                                                    if (functionECF.conectorECF_Analisa_RetornoImpressora(alwaysVariables.ModeloEcf, ref ACK, ref ST1, ref ST2, ref ST3, ref fiscal_MSG) == false)
                                                    {
                                                        conector_retorno_ack();
                                                        txtEntradaDadosConectorCF.Clear();
                                                        txtEntradaDadosConectorCF.Select();
                                                    }
                                                    else
                                                    {
                                                        if (call_funcao != 1 && call_pdv == 0)
                                                        {
                                                            conector_retorno_ack();
                                                            msg = new msgInfo(1, "ERRO FATAL DATA DA IMPRESSORA DIFERENTE DA DATA DO SISTEMA."); msg.ShowDialog();
                                                            txtEntradaDadosConectorCF.Select();
                                                        }
                                                    }
                                                }
                                            }
                                            else
                                            {
                                                if (call_pdv != 5)
                                                {
                                                    msg = new msgInfo("VERIFIQUE O STATUS DA IMPRESSORA."); msg.ShowDialog();
                                                    txtEntradaDadosConectorCF.Select();
                                                }
                                            }
                                        }//Flag Time
                                    }
                                    else
                                    {
                                        msg = new msgInfo(1, "HORA DO COMPUTADOR DIFERE DA HORA DO ECF! RECONFERINDO DISPOSITIVO"); msg.ShowDialog();
                                        functionECF.conectorECF_DataHoraPrinter(alwaysVariables.ModeloEcf, ref fiscal_data_printer, ref fiscal_hora_printer, ref fiscal_MSG, ref fiscal_retorno, alwaysVariables.ECF_Ligada);
                                    }
                                }
                                else
                                {
                                    if (call_pdv != 9)
                                    {
                                        if (txtEntradaDadosConectorCF.Text == "25" && call_pdv == 1)
                                        {
                                            call_funcao = Convert.ToInt32(txtEntradaDadosConectorCF.Text);
                                            conector_call_consulta();
                                        }
                                        else
                                        {
                                            conector_retorno_ack();
                                            txtEntradaDadosConectorCF.CausesValidation = true;
                                            txtEntradaDadosConectorCF.Clear();
                                            txtEntradaDadosConectorCF.Select();
                                        }
                                    }

                                }
                            }
                            else
                            {
                                msg = new msgInfo(1, "DATA DA IMPRESSORA, DIFERENTE DA DATA DO COMPUTADOR"); msg.ShowDialog();
                            }
                        }
                        else
                        {
                            msg = new msgInfo(1, "IMPRESSORA NÃO IDENTIFICADA."); msg.ShowDialog();
                        }
                    }
                    else
                    {
                        //msgInfo msg = new msgInfo(1, "Caro Cliente - " + "COMANDO NEGADO, NUMERO DE SERIE INVALIDO...!"); msg.ShowDialog();
                        if (functionECF.conectorECF_Analisa_RetornoImpressora(alwaysVariables.ModeloEcf, ref ACK, ref ST1, ref ST2, ref ST3, ref fiscal_MSG) == false)
                        {
                            conector_retorno_ack();
                            txtEntradaDadosConectorCF.Clear();
                            txtEntradaDadosConectorCF.Select();
                        }
                    }
                }
                else
                {

                }
            }
            else
            {
                if (call_pdv == 1 && txtEntradaDadosConectorCF.Text != "26")
                {
                    msgInfo msg = new msgInfo(1, "Caro Cliente - " + "ERRO FATAL SERIAL INVALIDO."); msg.ShowDialog();
                    txtEntradaDadosConectorCF.Clear();
                    txtEntradaDadosConectorCF.CausesValidation = true;
                    txtEntradaDadosConectorCF.Select();
                    call_pdv = 1;
                    call_funcao = 0;
                }
                else
                {
                    msgInfo msg = new msgInfo(1, "Caro Cliente - " + "ERRO FATAL SERIAL INVALIDO."); msg.ShowDialog();
                    functionECF.conectorECF_fiscal_flag(alwaysVariables.ModeloEcf, ref fiscal_flag, ref fiscal_MSG, ref fiscal_retorno, alwaysVariables.ECF_Ligada);
                    if (fiscal_flag == 1 || fiscal_flag == 33 || fiscal_flag == 36)
                    {
                        conector_acao_cancelaCupom();
                    }
                    txtVisorMsgConectorCF.Text = txtVisorNfce.Text = "SERIAL INVALIDO OU NÃO ENCONTRADO";
                    conector_acao_controleMenu();
                    txtEntradaDadosConectorCF.CausesValidation = true;
                    call_pdv = 1;
                    call_funcao = 0;
                }
            }
            if ((modoPedido == 3 || (NotaNumber != "" && NotaNumber != "0" && Convert.ToDouble(NotaNumber) > 0)) && (alwaysVariables.Perfil == "W" || alwaysVariables.Perfil == "V") && call_pdv == 0)
            {
                conectorPDV_inc_notad_item(NotaNumber, last_item_barra, last_item_descricao, last_item_qtty.Replace(",", "."), last_item_valor_unitario.Replace(",", "."), (Convert.ToDecimal(last_item_qtty.Replace(",", ".")) * Convert.ToDecimal(last_item_valor_unitario.Replace(",", "."))).ToString(), last_item_unidade);
            }
        }
        private void conectorPDV_acion_gt_cryt()
        {
            fiscal_retorno = 0;
            functionECF.conectorECF_GrandeTotal(alwaysVariables.ModeloEcf, ref fiscal_GT, ref fiscal_MSG, ref fiscal_retorno, alwaysVariables.ECF_Ligada);
            if ((call_pdv == 0 && (File.Exists(folderMFDGrand + "\\grandFullPDV" + ".enc") && arranqueTotal == 1)) || 
                File.Exists(folderMFDGrand + "\\grandFullPDV" + ".enc") && arranqueTotal == 0)
            {
                string valida = cryptografia.descryptFile(folderMFDGrand + "\\grandFullPDV" + ".enc", "\\grandFullPDV");
                //fiscal_retorno = conectorECF.Bematech_FI_GrandeTotal(ref fiscal_GT);
                if (fiscal_retorno == 1)
                {
                    //fiscal_GT_Crypt = cryptografia.descryptFile(folderMFDGrand + "\\grandFullPDV" + ".enc", "\\grandFullPDV").Substring(0, 19) + "  ";
                    if (alwaysVariables.ArqTotal.Count > 0)
                    {
                        functionECF.conectorECF_GrandeTotal(alwaysVariables.ModeloEcf, ref fiscal_GT, ref fiscal_MSG, ref fiscal_retorno, alwaysVariables.ECF_Ligada);
                        //fiscal_retorno = conectorECF.Bematech_FI_NumeroSerieMFD(ref fiscal_numero_serie);
                        if (fiscal_retorno == 1)
                        {//Identificação do serial no arquivo grande total
                            for (int j = 0; j < alwaysVariables.ArqTotal.Count; j++)
                            {
                                if (alwaysVariables.ArqTotal[j].Length >= 24)
                                {
                                    if (alwaysVariables.ArqTotal[j].Substring(4, 20) == fiscal_numero_serie)
                                    {
                                        fiscal_GT_compare = new string('\x20', 18);
                                        fiscal_GT_Crypt = alwaysVariables.ArqTotal[j].Substring(24, alwaysVariables.ArqTotal[j].Length - 24);
                                        functionECF.conectorECF_GrandeTotalDescriptografado(alwaysVariables.ModeloEcf, alwaysVariables.ArqTotal[j].Substring(24, alwaysVariables.ArqTotal[j].Length - 24), ref fiscal_GT_compare, ref fiscal_MSG, ref fiscal_retorno, alwaysVariables.ECF_Ligada);
                                        //fiscal_retorno = conectorECF.Bematech_FI_GrandeTotalDescriptografado(alwaysVariables.ArqTotal[j].Substring(24, alwaysVariables.ArqTotal[j].Length - 24), ref fiscal_GT_compare);
                                        if (fiscal_GT != fiscal_GT_compare)
                                        {
                                            fiscal_flag = 0;
                                            if (alwaysVariables.flagHomologacao == "1" || call_pdv == 0)
                                            {
                                                conector_last_gt(); //ALTERACAO ERIC! E LISIANE! DATA 05052015
                                                txtEntradaDadosConectorCF.Clear();
                                                txtVisorMsgConectorCF.Text = txtVisorNfce.Text = "GRANDE TOTAL RECOMPOSTO";
                                                return;
                                            }
                                            else
                                            {
                                                functionECF.conectorECF_fiscal_flag(alwaysVariables.ModeloEcf, ref fiscal_flag, ref fiscal_MSG, ref fiscal_retorno, alwaysVariables.ECF_Ligada);
                                                msgInfo msg = new msgInfo(1, "Caro Cliente - " + "ERRO FATAL GRANDE TOTAL INVÁLIDO!"); msg.ShowDialog();
                                                fiscal_GT_compare = "00000000000000";
                                                if (fiscal_flag == 0 || fiscal_flag == 32)
                                                {
                                                    conector_acao_controleMenu();
                                                    txtEntradaDadosConectorCF.CausesValidation = true;
                                                    call_pdv = 1;
                                                    call_funcao = 0;
                                                }
                                            }
                                        }
                                        else
                                        {
                                            if (valida == "000000000000000000000")//Confere CRO - CRZ
                                            {//Falhou a consulta do arquivo PAF
                                                if (call_pdv == 0)
                                                {
                                                    conector_verifica_crz_cro(ref fiscal_banco_crz, ref fiscal_banco_cro);
                                                }

                                                conectorPDV_test_grandeTotal();

                                            }
                                            else if (fiscal_banco_cro == fiscal_reducao_cro && fiscal_banco_crz == fiscal_reducao_crz)
                                            {//Recompoe o arquivo
                                                ///a1) se os números e valor forem iguais, recompor os dados no arquivo auxiliar (número de série de fabricação do ECF conectado e valor do Totalizador Geral atual do ECF conectado).
                                                if (fiscal_GT != fiscal_GT_compare)
                                                {
                                                    conector_last_gt(); //ALTERACAO ERIC! E LISIANE! DATA 05052015
                                                    txtVisorMsgConectorCF.Text = txtVisorNfce.Text = "GRANDE TOTAL RECOMPOSTO";
                                                }
                                            }
                                        }
                                    }
                                }
                                File.Delete(@"C:\conector\MFD\Grand\temp.txt");
                            }//End For
                        }
                        File.Delete(@"C:\conector\MFD\Grand\temp.txt");
                    }
                    else
                    {
                        fiscal_retorno = 0;
                        if (fiscal_flag == 0)
                        {
                            msgInfo msg = new msgInfo(1, "Caro Cliente - " + "ERRO FATAL GRANDE TOTAL INVÁLIDO! SOLICITE A AUTORIZAÇÃO PARA GERAÇÃO DO GRANDE TOTAL"); msg.ShowDialog();
                            conector_acao_controleMenu();
                            txtEntradaDadosConectorCF.CausesValidation = true;
                            call_pdv = 1;
                            call_funcao = 0;
                        }
                    }
                    if (fiscal_GT_Crypt == "0000000000000000000  ")
                    {
                        fiscal_GT_Crypt = "";
                    }
                }
            }
            else if (arranqueTotal == 1)
            {
                return;
            }
            else
            {
                msgInfo msg = new msgInfo(1, "Caro Cliente - " + "ERRO FATAL GRANDETOTAL.ENC INCONSISTENCIA."); msg.ShowDialog();
                conector_acao_controleMenu();
                txtAutorizacaoUsuarioConectorCF.Select();
            }
        }
        private void conectorPDV_acion_menu_fiscal()
        {
            switch (call_funcao)
            {
                case 1:
                    txtVisorMsgConectorCF.Text = "EMISSÃO DE LEITURA X";
                    //fiscal_retorno = conectorECF.Bematech_FI_LeituraX();
                    if (alwaysVariables.ECF_Ligada != -6)
                    {
                        functionECF.conectorECF_LeituraX(alwaysVariables.ModeloEcf, ref fiscal_MSG, ref fiscal_retorno, alwaysVariables.ECF_Ligada);
                        if (fiscal_retorno == 1 && functionECF.conectorECF_Analisa_RetornoImpressora(alwaysVariables.ModeloEcf, ref ACK, ref ST1, ref ST2, ref ST3, ref fiscal_MSG))
                        {
                            conectorPDV_inc_cupom_relatorio("RG", null);
                        }
                        else
                        {
                            functionECF.conectorECF_Analisa_RetornoImpressora(alwaysVariables.ModeloEcf, ref ACK, ref ST1, ref ST2, ref ST3, ref fiscal_MSG);
                            conector_retorno_ack();
                        }
                    }
                    else
                    {
                        txtVisorNfce.Text = txtVisorMsgConectorCF.Text = fiscal_MSG;
                    }
                    txtEntradaDadosConectorCF.CausesValidation = true;
                    txtEntradaDadosConectorCF.Clear();
                    txtEntradaDadosConectorCF.Select();
                    break;
                case 2:
                    if (alwaysVariables.ECF_Ligada != -6)
                    {
                        txtVisorMsgConectorCF.Text = "LEITURA MEMORIA";
                        if (lblVisorEntradaDadosConectorCF.Text == "ENTRADA DE DADOS")
                        {
                            conector_reset_lmfc();
                            //lblVisorEntradaDadosConectorCF.Text = "DATA INICIAL - ddMMyyyy";
                            lblVisorEntradaDadosConectorCF.Text = "[ 1 ] LMFC - COMPLETA   [ 2 ] LMFS - SIMPLES";
                            txtEntradaDadosConectorCF.Clear();
                            txtEntradaDadosConectorCF.Select();
                            //input_di = null;
                        }
                    }
                    else
                    {
                        txtVisorNfce.Text = txtVisorMsgConectorCF.Text = fiscal_MSG;
                        txtEntradaDadosConectorCF.CausesValidation = true;
                        txtEntradaDadosConectorCF.Clear();
                        txtEntradaDadosConectorCF.Select();
                    }
                    break;
                case 3:
                    /*
                    txtVisorMsgConectorCF.Text = "LEITURA MEMORIA FISCAL SIMPLIFICADA";
                    if (alwaysVariables.ECF_Ligada != -6)
                    {
                        if (lblVisorEntradaDadosConectorCF.Text == "ENTRADA DE DADOS")
                        {
                            conector_reset_lmfc();
                            //lblVisorEntradaDadosConectorCF.Text = "DATA INICIAL - ddMMyyyy";
                            lblVisorEntradaDadosConectorCF.Text = "TIPO DOWNLOAD MFD [ 0 - DATA   1 - COO ]";
                            txtEntradaDadosConectorCF.Clear();
                            txtEntradaDadosConectorCF.Select();
                            //input_di = null;
                        }
                    }
                    else
                    {
                        txtVisorNfce.Text = txtVisorMsgConectorCF.Text = fiscal_MSG;
                        txtEntradaDadosConectorCF.CausesValidation = true;
                        txtEntradaDadosConectorCF.Clear();
                        txtEntradaDadosConectorCF.Select();
                    }*/
                    break;
                case 4://Espelho MFD
                    txtVisorMsgConectorCF.Text = "GERAÇÃO DO ESPELHO MFD";
                    if (lblVisorEntradaDadosConectorCF.Text == "ENTRADA DE DADOS")
                    {
                        //this.lblVisorEntradaDadosConectorCF.Location = new System.Drawing.Point(157, 511);
                        lblVisorEntradaDadosConectorCF.Text = "CARREGANDO MODULOS - [ENTER]";
                        conector_reset_MFD();
                    }
                    break;
                case 5://Arquivo MFD
                    if (homTeste == 0)
                    {
                        txtVisorMsgConectorCF.Text = "GERAÇÃO DO ARQUIVO MFD";
                    }
                    else
                    {
                        txtVisorMsgConectorCF.Text = "GERAÇÃO DO ARQUIVO MF";
                    }
                    if (lblVisorEntradaDadosConectorCF.Text == "ENTRADA DE DADOS")
                    {
                        //this.lblVisorEntradaDadosConectorCF.Location = new System.Drawing.Point(157, 511);
                        lblVisorEntradaDadosConectorCF.Text = "CARREGANDO MODULOS - [ENTER]";
                        conector_reset_MFD();
                    }
                    break;
                case 6://Tab Produto
                    txtVisorMsgConectorCF.Text = "GERAÇÃO TABELA DE PRODUTOS/SERVIÇO";
                    if (lblVisorEntradaDadosConectorCF.Text == "ENTRADA DE DADOS")
                    {
                        if (export.iniciaGeracaoFile(folderMFD + "\\Produto", ref caminho, "Produto") == true)
                        {
                            lblVisorEntradaDadosConectorCF.Text = "GERAÇÃO DA TABELA P/S - [ENTER]";
                        }
                        txtEntradaDadosConectorCF.Clear();
                        txtEntradaDadosConectorCF.CausesValidation = false;
                        auxConsistencia = 1;
                    }
                    break;
                case 7:
                    txtVisorMsgConectorCF.Text = "GERAÇÃO DO ESTOQUE";
                    if (lblVisorEntradaDadosConectorCF.Text == "ENTRADA DE DADOS")
                    {
                        if (export.iniciaGeracaoFile(folderMFD + "\\Estoque", ref caminho, "Estoque") == true)
                        {
                            lblVisorEntradaDadosConectorCF.Text = "GERAÇÃO DO ESTOQUE - [ENTER]";
                        }
                        txtEntradaDadosConectorCF.Clear();
                        txtEntradaDadosConectorCF.CausesValidation = false;
                        auxConsistencia = 1;
                    }
                    break;
                case 8:
                    txtVisorMsgConectorCF.Text = "GERAÇÃO DE MOVIMENTO POR ECF";
                    if (lblVisorEntradaDadosConectorCF.Text == "ENTRADA DE DADOS")
                    {
                        string test = String.Format("{0:ddMMyyyy}", Convert.ToDateTime(fiscal_last_reducao_dataMovimento.Substring(0, 2) + "/" + fiscal_last_reducao_dataMovimento.Substring(2, 2) + "/" + String.Format("{0:ddMMyyyy}", DateTime.Now).Substring(4, 2) + fiscal_data_printer.Substring(4, 2)));
                        if (export.iniciaGeracaoFile(folderMFD + "\\" + fiscal_numero_serie + test, ref caminho, fiscal_numero_serie + test) == true)
                        {
                            lblVisorEntradaDadosConectorCF.Text = "INFORME O NUMERO DO ECF";
                            conector_reset_MFD();
                        }
                        txtEntradaDadosConectorCF.Clear();
                        txtEntradaDadosConectorCF.CausesValidation = false;
                        auxConsistencia = 1;
                    }
                    break;
                case 9:
                    txtVisorMsgConectorCF.Text = "RELATORIO DE MEIOS DE PAGAMENTO";
                    if (lblVisorEntradaDadosConectorCF.Text == "ENTRADA DE DADOS")
                    {
                        lblVisorEntradaDadosConectorCF.Text = "INFORME O CODIGO RELATORIO";
                        txtEntradaDadosConectorCF.Clear();
                        conector_reset_meioPgto();
                    }
                    break;
                case 10:
                    txtVisorMsgConectorCF.Text = "RELATORIO DE DAV EMITIDOS";
                    if (lblVisorEntradaDadosConectorCF.Text == "ENTRADA DE DADOS")
                    {
                        string test = String.Format("{0:ddMMyyyy}", Convert.ToDateTime(fiscal_last_reducao_dataMovimento.Substring(0, 2) + "/" + fiscal_last_reducao_dataMovimento.Substring(2, 2) + "/" + String.Format("{0:ddMMyyyy}", DateTime.Now).Substring(4, 2) + fiscal_data_printer.Substring(4, 2)));
                        if (export.iniciaGeracaoFile(folderMFD + "\\" + "DAV", ref caminho, "DAV" + test) == true)
                        {
                            lblVisorEntradaDadosConectorCF.Text = "INFORMA O CODIGO REL. IMPRESSÃO DAV-s - [ENTER]";
                            conector_reset_MFD();
                            auxConsistencia = 1;
                        }
                        txtEntradaDadosConectorCF.Clear();
                        txtEntradaDadosConectorCF.CausesValidation = false;
                    }
                    break;
                case 11:
                    if (alwaysVariables.ECF_Ligada != -6)
                    {
                        if (cryptografia.conectorPDV_verifica_serial() == true)
                        {
                            if (lblVisorEntradaDadosConectorCF.Text == "ENTRADA DE DADOS")
                            {
                                lblVisorEntradaDadosConectorCF.Text = "INFORME O CÓDIGO DO RELATÓRIO";
                                conector_reset_MFD();
                                auxConsistencia = 1;
                                txtEntradaDadosConectorCF.Clear();
                                txtEntradaDadosConectorCF.CausesValidation = false;
                            }
                        }
                        else
                        {
                            txtEntradaDadosConectorCF.CausesValidation = true;
                            call_funcao = 0;
                            txtVisorMsgConectorCF.Text = "Número de série inválido";
                        }
                    }
                    else
                    {
                        txtVisorNfce.Text = txtVisorMsgConectorCF.Text = fiscal_MSG;
                        txtEntradaDadosConectorCF.CausesValidation = true;
                        txtEntradaDadosConectorCF.Clear();
                        txtEntradaDadosConectorCF.Select();
                    }
                    break;
                case 12:
                    if (lblVisorEntradaDadosConectorCF.Text == "ENTRADA DE DADOS")
                    {
                        string test = "";
                        if (lbINumeroSerieConectorCF.Text.Trim() != "" && lbINumeroSerieConectorCF.Text != "SÉRIE")
                        {
                            test = String.Format("{0:ddMMyyyyHHmmss}", Convert.ToDateTime(fiscal_last_reducao_dataMovimento.Substring(0, 2) + "/" + fiscal_last_reducao_dataMovimento.Substring(2, 2) + "/" + String.Format("{0:ddMMyyyy}", DateTime.Now).Substring(4, 2) + fiscal_data_printer.Substring(4, 2)));
                        }
                        else
                        {
                            test = String.Format("{0:ddMMyyyyHHmmss}", DateTime.Now);
                        }

                        if (export.iniciaGeracaoFile(folderMFD + "\\" + "SINTEGRA", ref caminho, "SINTEGRA" + test) == true)
                        {
                            lblVisorEntradaDadosConectorCF.Text = "RELATORIO DE VENDAS 'SINTEGRA' - [ENTER]";
                            conector_reset_MFD();
                            auxConsistencia = 1;
                        }
                        txtEntradaDadosConectorCF.Clear();
                        txtEntradaDadosConectorCF.CausesValidation = false;
                    }
                    break;
                case 13:
                    msg = new msgInfo("CARO USUÁRIO: Este PAF-ECF não executa funções de baixa de estoque com base em índices técnicos de produção, não podendo ser utilizando por estabelecimento que necessite deste recurso;"); msg.ShowDialog();
                    txtEntradaDadosConectorCF.Clear();
                    txtEntradaDadosConectorCF.CausesValidation = true;
                    txtEntradaDadosConectorCF.Select();
                    break;
                case 14:
                    if (alwaysVariables.ECF_Ligada != -6)
                    {
                        if (cryptografia.conectorPDV_verifica_serial() == true)
                        {
                            txtVisorMsgConectorCF.Text = "GERAÇÃO DOS PARAMETROS DE CONFIGURAÇÃO";
                            if (lblVisorEntradaDadosConectorCF.Text == "ENTRADA DE DADOS")
                            {
                                //this.lblVisorEntradaDadosConectorCF.Location = new System.Drawing.Point(157, 511);
                                lblVisorEntradaDadosConectorCF.Text = "INFORME CODIGO DO RELATÓRIO PARA GERAÇÃO DA INFORMAÇÃO";
                                txtEntradaDadosConectorCF.Clear();
                                txtEntradaDadosConectorCF.CausesValidation = false;
                                conector_reset_MFD();
                                auxConsistencia = 1;
                            }

                        }
                        else
                        {
                            txtEntradaDadosConectorCF.CausesValidation = true;
                            call_funcao = 0;
                            txtVisorMsgConectorCF.Text = "Numero de serie inválido";
                        }
                    }
                    else
                    {
                        txtVisorMsgConectorCF.Text = txtVisorNfce.Text = fiscal_MSG;
                    }
                    break;
                case 17:
                    if (lblVisorEntradaDadosConectorCF.Text == "ENTRADA DE DADOS")
                    {
                        txtVisorMsgConectorCF.Text = "RELATORIO PAFECF";
                        lblVisorEntradaDadosConectorCF.Text = "RELATORIO PAFECF' - [ENTER]";
                        conector_reset_MFD();
                        auxConsistencia = 1;
                        txtEntradaDadosConectorCF.Clear();
                        txtEntradaDadosConectorCF.CausesValidation = false;
                    }
                    break;
                case 18:
                    if (lblVisorEntradaDadosConectorCF.Text == "ENTRADA DE DADOS")
                    {
                        lblVisorEntradaDadosConectorCF.Text = "GERAÇÃO EFD - SPED' - [ENTER]";
                        conector_reset_sped();
                        auxConsistencia = 1;
                        txtEntradaDadosConectorCF.Clear();
                        txtEntradaDadosConectorCF.CausesValidation = false;
                    }
                    break;
                default:
                    lblVisorEntradaDadosConectorCF.Text = "ENTRADA DE DADOS";
                    txtVisorMsgConectorCF.Text = "MENU FISCAL";
                    txtEntradaDadosConectorCF.CausesValidation = true;
                    txtEntradaDadosConectorCF.Clear();
                    txtEntradaDadosConectorCF.Select();
                    break;
            }
        }
        private void conectorPDV_acion_descAcres()
        {
            switch (call_funcao)
            {
                case 1: //Desconto Item
                    if (txtEntradaDadosConectorCF.Text == "")
                    {
                        txtEntradaDadosConectorCF.Text = "0";
                    }
                    string desconto = String.Format("{0:F2}", Convert.ToDecimal(txtEntradaDadosConectorCF.Text.Replace(",", "."))).Replace(".", ",");
                    functionECF.conectorECF_AcrescimoDescontoItem(alwaysVariables.ModeloEcf, sequenciaItem, "D", produto_tipo_desconto, desconto, ref fiscal_MSG, ref fiscal_retorno, alwaysVariables.ECF_Ligada);
                    //fiscal_retorno = conectorECF.Bematech_FI_AcrescimoDescontoItemMFD(sequenciaItem, "D", produto_tipo_desconto, String.Format("{0:F2}", Convert.ToDecimal(txtEntradaDadosConectorCF.Text.Replace(",", "."))).Replace(".", ","));
                    if (fiscal_retorno == 1 && functionECF.conectorECF_Analisa_RetornoImpressora(alwaysVariables.ModeloEcf, ref ACK, ref ST1, ref ST2, ref ST3, ref fiscal_MSG))
                    {
                        // string bof = String.Format("{0:F3}", Math.Truncate(((Convert.ToDecimal(txtEntradaDadosConectorCF.Text.Replace(",", ".")) * (Convert.ToDecimal(last_valor_item.Replace(",", ".")) * Convert.ToDecimal(last_qtty_item))) / 100)));

                        validaDesc = false;

                        call_pdv = 0;
                        call_funcao = 0;
                        txtVisorMsgConectorCF.Text = "CUPOM FISCAL ABERTO";
                        this.ltbDetalhesConectorCF.ForeColor = System.Drawing.Color.Yellow;
                        //string descont = String.Format("{0:F2}", (Convert.ToDecimal(txtEntradaDadosConectorCF.Text.Replace(",", ".")))) + "% (R$ " + String.Format("{0:F2}", ((Convert.ToDecimal(txtEntradaDadosConectorCF.Text.Replace(",", ".")) * (Convert.ToDecimal(last_valor_item.Replace(",", ".")) * Convert.ToDecimal(last_qtty_item))) / 100));
                        ltbDetalhesConectorCF.Text += "                                     DESCONTO ITEM => " + sequenciaItem + "   " + String.Format("{0:F3}", (Convert.ToDecimal(txtEntradaDadosConectorCF.Text.Replace(",", ".")))) + "% (R$ " + String.Format("{0:F2}", ((Convert.ToDecimal(txtEntradaDadosConectorCF.Text.Replace(",", ".")) * (Convert.ToDecimal(last_valor_item.Replace(",", ".")) * Convert.ToDecimal(last_qtty_item))) / 100)).Replace(".", ",") + ")" + "\r\n";
                        ltbDetalhesConectorCF.Text += "___________________________________________________________" + "\r\n";
                        ltbDetalhesConectorCF.Select(ltbDetalhesConectorCF.Text.Length, 0);
                        ltbDetalhesConectorCF.ScrollToCaret();
                        this.ltbDetalhesConectorCF.ForeColor = System.Drawing.Color.White;
                        conector_desconto_item(fiscal_Cupom.Replace("\0", "").Trim(), fiscal_store.Replace("\0", "").Trim() == "" ? alwaysVariables.Store : fiscal_store, fiscal_numero_caixa.Replace("\0", "").Trim(), sequenciaItem, txtEntradaDadosConectorCF.Text);
                        conectorPDV_inc_movimentocaixa("0", "0.00", "0.00", "0.00", input_troco, "0.00", 1.ToString(), "0.00", "0.00", "0.00", 12.ToString(), lbOperadorConectorCF.Text, "0,00", 0, String.Format("{0:F2}", ((Convert.ToDecimal(txtEntradaDadosConectorCF.Text.Replace(",", ".")) * (Convert.ToDecimal(last_valor_item.Replace(",", ".")) * Convert.ToDecimal(last_qtty_item))) / 100)).Replace(".", ","));
                        resetLabel();
                        txtEntradaDadosConectorCF.Clear();
                        conector_find_subFull("1");
                        txtEntradaDadosConectorCF.Select();
                        valuesAcresDesc = "    ";
                        acresDesc = " ";
                    }
                    else
                    {
                        txtVisorMsgConectorCF.Text = functionECF.conectorECF_Erros(alwaysVariables.ModeloEcf);
                    }
                    //fiscal_retorno = conectorECF.Bematech_FI_AcrescimoDescontoSubtotalMFD("D", "%", String.Format("{0:F2}", (Convert.ToDecimal(txtEntradaDadosConectorCF.Text))));

                    break;
                case 2: //Desconto Sub Total
                    if (sequenciaItemAle == "    " || sequenciaItemAle == "   " || sequenciaItemAle.Trim() == "")
                    {
                        int result = conector_verifica_exits_sequencia(fiscal_Cupom, fiscal_store, fiscal_numero_caixa, txtEntradaDadosConectorCF.Text, 1);
                        if (result == 1)
                        {
                            sequenciaItemAle = txtEntradaDadosConectorCF.Text;
                            txtVisorMsgConectorCF.Text = " INFORME O DESCONTO ";
                            txtDescricaoItemConectorCF.Text = "[ PORCENTAGEM ]";
                            txtEntradaDadosConectorCF.Clear();
                            txtEntradaDadosConectorCF.Select();
                        }
                        else
                        {
                            txtVisorMsgConectorCF.Text = " ITEM INVÁLIDO PARA [DESCONTO]";
                            valuesAcresDesc = "    ";
                            txtEntradaDadosConectorCF.Clear();
                            txtEntradaDadosConectorCF.Select();
                        }

                    }
                    else if (valuesAcresDesc == "    " || Convert.ToDecimal(valuesAcresDesc.Trim() == "" ? "0" : valuesAcresDesc) == 0)
                    {

                        if (txtEntradaDadosConectorCF.Text != "" && Convert.ToDecimal(txtEntradaDadosConectorCF.Text.Replace(",", ".") == "    " ? 0 : Convert.ToDecimal(txtEntradaDadosConectorCF.Text.Replace(",", "."))) > 0)
                        {
                            valuesAcresDesc = txtEntradaDadosConectorCF.Text;
                        }
                        else
                        {
                            valuesAcresDesc = "    ";
                        }
                    }
                    break;
                case 3: //Acrescimo Item
                    //fiscal_retorno =  conectorECF.Bematech_FI_AcrescimoDescontoItemMFD(sequenciaItem, "A", produto_tipo_desconto, String.Format("{0:F2}", Convert.ToDecimal(txtEntradaDadosConectorCF.Text.Replace(",", "."))).Replace(".", ","));
                    functionECF.conectorECF_AcrescimoDescontoItem(alwaysVariables.ModeloEcf, sequenciaItem, "A", produto_tipo_desconto, String.Format("{0:F2}", Convert.ToDecimal(txtEntradaDadosConectorCF.Text.Replace(",", "."))).Replace(".", ","), ref fiscal_MSG, ref fiscal_retorno, alwaysVariables.ECF_Ligada);
                    if (fiscal_retorno == 1 && functionECF.conectorECF_Analisa_RetornoImpressora(alwaysVariables.ModeloEcf, ref ACK, ref ST1, ref ST2, ref ST3, ref fiscal_MSG))
                    {
                        validaDesc = false;
                        if (fiscal_retorno == 1)
                        {
                            //Atualizando grande total
                            if (File.Exists(folderMFDGrand + "\\grandFullPDV" + ".enc"))
                            {//Atualiza Grande Total
                                if (backgroundConectorGrandeTotal.IsBusy != true)
                                {
                                    // Start the asynchronous operation.
                                    backgroundConectorGrandeTotal.RunWorkerAsync();
                                }
                                arranqueTotal = 1;
                                /*
                                fiscal_GT_Crypt = new string('\x20', 20);
                                File.Delete(folderMFDGrand + "\\grandFullPDV" + ".enc");
                                functionECF.conectorECF_GrandeTotal_Crypt(alwaysVariables.ModeloEcf, ref fiscal_GT_Crypt, ref fiscal_MSG, ref fiscal_retorno, alwaysVariables.ECF_Ligada);
                                cryptografia.conectorPDV_serie(alwaysVariables.PAF_total + "\\grandFullPDV" + ".txt", "0");
                                File.Delete(alwaysVariables.PAF_total + "\\grandFullPDV" + ".txt");
                                 * */
                            }

                            call_pdv = 0;
                            call_funcao = 0;
                            txtVisorMsgConectorCF.Text = "CUPOM FISCAL ABERTO";
                            ltbDetalhesConectorCF.Text += "                                     ACRESCIMO ITEM => " + sequenciaItem + "   " + String.Format("{0:F2}", (Convert.ToDecimal(txtEntradaDadosConectorCF.Text.Replace(",", ".")))) + "% R$ " + String.Format("{0:F2}", ((Convert.ToDecimal(txtEntradaDadosConectorCF.Text.Replace(",", ".")) * (Convert.ToDecimal(last_valor_item) * Convert.ToDecimal(last_qtty_item))) / 100)) + "\r\n";
                            conector_acrescimo_item(fiscal_Cupom.Replace("\0", "").Trim(), fiscal_store.Replace("\0", "").Trim() == "" ? alwaysVariables.Store : fiscal_store, fiscal_numero_caixa.Replace("\0", "").Trim(), sequenciaItem, txtEntradaDadosConectorCF.Text);
                            resetLabel();
                            txtEntradaDadosConectorCF.Clear();
                            conector_find_subFull("1");
                            txtEntradaDadosConectorCF.Select();
                            valuesAcresDesc = "    ";
                            acresDesc = " ";
                        }
                    }
                    else
                    {
                        if (functionECF.conectorECF_Erros(alwaysVariables.ModeloEcf) == "")
                        {
                            txtVisorMsgConectorCF.Text = "FALHA DE PROCEDIMENTO";
                        }
                        else
                        {
                            txtVisorMsgConectorCF.Text = functionECF.conectorECF_Erros(alwaysVariables.ModeloEcf);
                        }
                        resetLabel();
                        call_pdv = 0;
                        call_funcao = 0;
                        txtEntradaDadosConectorCF.Clear();
                        conector_find_subFull("1");
                        txtEntradaDadosConectorCF.Select();
                        valuesAcresDesc = "    ";
                        acresDesc = " ";
                    }

                    break;
                case 4: //Acrescimo Aleatorio
                    if (sequenciaItemAle == "    " || sequenciaItemAle == "   " || sequenciaItemAle.Trim() == "")
                    {
                        int result = conector_verifica_exits_sequencia(fiscal_Cupom, fiscal_store, fiscal_numero_caixa, txtEntradaDadosConectorCF.Text, 2);
                        if (result == 1)
                        {
                            sequenciaItemAle = txtEntradaDadosConectorCF.Text;
                            txtVisorMsgConectorCF.Text = " INFORME O ACRESCIMO ";
                            txtDescricaoItemConectorCF.Text = "[ PORCENTAGEM ]";
                            txtEntradaDadosConectorCF.Clear();
                            txtEntradaDadosConectorCF.Select();
                        }
                        else
                        {
                            txtVisorMsgConectorCF.Text = " ITEM INVÁLIDO PARA [ ACRESCIMO ]";
                            valuesAcresDesc = "    ";
                            txtEntradaDadosConectorCF.Clear();
                            txtEntradaDadosConectorCF.Select();
                        }

                    }
                    else if (valuesAcresDesc == "    " || Convert.ToDecimal(valuesAcresDesc.Trim() == "" ? "0" : valuesAcresDesc) == 0)
                    {

                        if (txtEntradaDadosConectorCF.Text != "" && Convert.ToDecimal(txtEntradaDadosConectorCF.Text.Replace(",", ".") == "    " ? 0 : Convert.ToDecimal(txtEntradaDadosConectorCF.Text.Replace(",", "."))) > 0)
                        {
                            valuesAcresDesc = txtEntradaDadosConectorCF.Text;
                        }
                        else
                        {
                            valuesAcresDesc = "    ";
                        }
                    }
                    break;
            }
        }
        private void conectorPDV_acion_menu_operacional_abertura_cx()
        {
            //fiscal_retorno = conectorECF.Bematech_FI_DataMovimento(ref fiscal_data_movimento);
                    functionECF.conectorECF_DataMovimento(alwaysVariables.ModeloEcf, ref fiscal_data_movimento, ref fiscal_MSG, ref fiscal_retorno, alwaysVariables.ECF_Ligada);
                    //conectorECF.Analisa_iRetorno(fiscal_retorno, ref fiscal_MSG);
                    functionECF.conectorECF_fiscal_flag(alwaysVariables.ModeloEcf, ref fiscal_flag, ref fiscal_MSG, ref fiscal_retorno, alwaysVariables.ECF_Ligada);
                    //conectorECF.Analisa_iRetorno(fiscal_retorno, ref fiscal_MSG);
                    if (Convert.ToDouble(fiscal_data_movimento.Replace("\0", "").Trim() == "" ? "0" : fiscal_data_movimento) <= 0 && fiscal_flag != 8)
                    {
                        if (input_operador == null)
                        {

                            if (conector_funcionario(txtEntradaDadosConectorCF.Text) == 1 || txtEntradaDadosConectorCF.Text != "")
                            {
                                input_operador = banco_operado;
                                txtEntradaDadosConectorCF.Clear();
                                this.lblVisorEntradaDadosConectorCF.Location = new System.Drawing.Point(157, 511);
                                if (fiscal_data_printer == String.Format("{0:ddMMyy}", DateTime.Now))
                                {
                                    lblVisorEntradaDadosConectorCF.Text = "CONFIRMA A DATA DO MOVIMENTO = 'ddMMyy'";
                                    txtEntradaDadosConectorCF.Text = fiscal_data_printer;
                                    txtEntradaDadosConectorCF.CausesValidation = false;
                                    txtEntradaDadosConectorCF.Select();
                                }
                                else
                                {
                                    if (fiscal_data_printer.Trim() == "")
                                    {
                                        functionECF.conectorECF_DataHoraReducao(alwaysVariables.ModeloEcf, ref fiscal_data_printer, ref fiscal_hora_printer, ref fiscal_MSG, ref fiscal_retorno, alwaysVariables.ECF_Ligada);
                                    }
                                    //fiscal_retorno = conectorECF.Bematech_FI_DataHoraImpressora(ref fiscal_data_printer, ref fiscal_hora_printer);
                                    //conectorECF.Analisa_iRetorno(fiscal_retorno, ref fiscal_MSG);
                                    lblVisorEntradaDadosConectorCF.Text = "CONFIRMA DA DATA DO MOVIMENTO = 'ddMMyy'";
                                    txtEntradaDadosConectorCF.Text = fiscal_data_printer;
                                    txtEntradaDadosConectorCF.CausesValidation = false;
                                    txtEntradaDadosConectorCF.Select();
                                }
                            }
                            else
                            {
                                input_operador = null;
                            }
                        }
                        else if (input_data_abertura == null)
                        {
                            if (Convert.ToDouble(fiscal_data_movimento.Replace("\0", "").Trim() == "" ? "0" : fiscal_data_movimento) <= 0 || lbDataMovimentoConectorCF.Text == "00/00/0000")
                            {
                                if (fiscal_data_printer == String.Format("{0:ddMMyy}", DateTime.Now) && txtEntradaDadosConectorCF.Text != "" && fiscal_data_printer == txtEntradaDadosConectorCF.Text)
                                {
                                    input_data_abertura = fiscal_data_printer.Substring(0, 2) + "/" + fiscal_data_printer.Substring(2, 2) + "/" + String.Format("{0:ddMMyyyy}", DateTime.Now).Substring(4, 2) + fiscal_data_printer.Substring(4, 2);
                                    this.lblVisorEntradaDadosConectorCF.Location = new System.Drawing.Point(284, 511);
                                    lblVisorEntradaDadosConectorCF.Text = "ENTRADA DO TROCO";
                                    txtEntradaDadosConectorCF.Text = "0,00";
                                }
                                else
                                {
                                    this.lblVisorEntradaDadosConectorCF.Location = new System.Drawing.Point(284, 511);
                                    lblVisorEntradaDadosConectorCF.Text = "ERRO DATA SISTEMA";
                                    input_data_abertura = null;
                                }
                            }
                        }
                        else if (input_troco == null)
                        {

                            if (txtEntradaDadosConectorCF.Text != "" && Convert.ToDecimal(txtEntradaDadosConectorCF.Text.Replace(",", ".")) > 0)
                            {
                                input_troco = String.Format("{0:F2}", Convert.ToDecimal(txtEntradaDadosConectorCF.Text)).Replace(".", ",");
                            }
                            else
                            {
                                lblVisorEntradaDadosConectorCF.Text = "ENTRADA DO TROCO - OBRIGATORIO";
                                txtEntradaDadosConectorCF.Text = "0,00";
                                input_troco = null;
                            }
                            
                            if (input_troco != null)
                            {
                                call_pdv = 0;
                                txtVisorMsgConectorCF.Text = "REALIZANDO ABERTURA DE CAIXA";
                                if (alwaysVariables.CarregaPgto == "1")
                                {
                                    txtVisorMsgConectorCF.Text = fiscal_MSG == "" ? "CARREGANDO FORMAS DE PGTO DINHEIRO" : fiscal_MSG;
                                    functionECF.conectorECF_ProgramaFormaPagamentoMFD(alwaysVariables.ModeloEcf, "Dinheiro", "0", ref fiscal_MSG, ref fiscal_retorno, alwaysVariables.ECF_Ligada);
                                    //fiscal_retorno = conectorECF.Bematech_FI_ProgramaFormaPagamentoMFD("Dinheiro", "0");
                                    //conectorECF.Analisa_iRetorno(fiscal_retorno, ref fiscal_MSG);
                                    txtVisorMsgConectorCF.Text = fiscal_MSG == "" ? "CARREGANDO FORMAS DE PGTO CHEQUE" : fiscal_MSG;
                                    functionECF.conectorECF_ProgramaFormaPagamentoMFD(alwaysVariables.ModeloEcf, "Cheque", "1", ref fiscal_MSG, ref fiscal_retorno, alwaysVariables.ECF_Ligada);
                                    //fiscal_retorno = conectorECF.Bematech_FI_ProgramaFormaPagamentoMFD("Cheque", "1");
                                    //conectorECF.Analisa_iRetorno(fiscal_retorno, ref fiscal_MSG);
                                    txtVisorMsgConectorCF.Text = fiscal_MSG == "" ? "CARREGANDO FORMAS DE PGTO CREDIARIO" : fiscal_MSG;
                                    functionECF.conectorECF_ProgramaFormaPagamentoMFD(alwaysVariables.ModeloEcf, "Crediario", "1", ref fiscal_MSG, ref fiscal_retorno, alwaysVariables.ECF_Ligada);
                                    //fiscal_retorno = conectorECF.Bematech_FI_ProgramaFormaPagamentoMFD("Crediario", "1");
                                    //conectorECF.Analisa_iRetorno(fiscal_retorno, ref fiscal_MSG);
                                    txtVisorMsgConectorCF.Text = fiscal_MSG == "" ? "CARREGANDO FORMAS DE PGTO CONVENIO" : fiscal_MSG;
                                    functionECF.conectorECF_ProgramaFormaPagamentoMFD(alwaysVariables.ModeloEcf, "Convenio", "1", ref fiscal_MSG, ref fiscal_retorno, alwaysVariables.ECF_Ligada);
                                    //fiscal_retorno = conectorECF.Bematech_FI_ProgramaFormaPagamentoMFD("Convenio", "1");
                                    //conectorECF.Analisa_iRetorno(fiscal_retorno, ref fiscal_MSG);
                                    txtVisorMsgConectorCF.Text = fiscal_MSG == "" ? "CARREGANDO FORMAS DE PGTO CARTAO CREDITO" : fiscal_MSG;
                                    functionECF.conectorECF_ProgramaFormaPagamentoMFD(alwaysVariables.ModeloEcf, "Cartao Credito", "1", ref fiscal_MSG, ref fiscal_retorno, alwaysVariables.ECF_Ligada);
                                    //fiscal_retorno = conectorECF.Bematech_FI_ProgramaFormaPagamentoMFD("Cartao Credito", "1");
                                    //conectorECF.Analisa_iRetorno(fiscal_retorno, ref fiscal_MSG);
                                    txtVisorMsgConectorCF.Text = fiscal_MSG == "" ? "CARREGANDO FORMAS DE PGTO CARTAO DEBITO" : fiscal_MSG;
                                    functionECF.conectorECF_ProgramaFormaPagamentoMFD(alwaysVariables.ModeloEcf, "Cartao Debito", "1", ref fiscal_MSG, ref fiscal_retorno, alwaysVariables.ECF_Ligada);
                                    //fiscal_retorno = conectorECF.Bematech_FI_ProgramaFormaPagamentoMFD("Cartao Debito", "1");
                                    //conectorECF.Analisa_iRetorno(fiscal_retorno, ref fiscal_MSG);
                                    txtVisorMsgConectorCF.Text = fiscal_MSG == "" ? "CARREGANDO FORMAS DE PGTO BOLETO" : fiscal_MSG;
                                    functionECF.conectorECF_ProgramaFormaPagamentoMFD(alwaysVariables.ModeloEcf, "Boleto", "0", ref fiscal_MSG, ref fiscal_retorno, alwaysVariables.ECF_Ligada);
                                    //fiscal_retorno = conectorECF.Bematech_FI_ProgramaFormaPagamentoMFD("Boleto", "0");
                                    //conectorECF.Analisa_iRetorno(fiscal_retorno, ref fiscal_MSG);
                                    txtVisorMsgConectorCF.Text = fiscal_MSG == "" ? "CARREGANDO FORMAS DE PGTO DUPLICATA" : fiscal_MSG;
                                    functionECF.conectorECF_ProgramaFormaPagamentoMFD(alwaysVariables.ModeloEcf, "Duplicata", "0", ref fiscal_MSG, ref fiscal_retorno, alwaysVariables.ECF_Ligada);
                                    //fiscal_retorno = conectorECF.Bematech_FI_ProgramaFormaPagamentoMFD("Duplicata", "0");
                                    //conectorECF.Analisa_iRetorno(fiscal_retorno, ref fiscal_MSG);
                                    txtVisorMsgConectorCF.Text = fiscal_MSG == "" ? "CARREGANDO FORMAS DE PGTO RECEBIMENTO" : fiscal_MSG;
                                    functionECF.conectorECF_ProgramaFormaPagamentoMFD(alwaysVariables.ModeloEcf, "Recebimento", "0", ref fiscal_MSG, ref fiscal_retorno, alwaysVariables.ECF_Ligada);
                                    //fiscal_retorno = conectorECF.Bematech_FI_ProgramaFormaPagamentoMFD("Recebimento", "0");
                                    //conectorECF.Analisa_iRetorno(fiscal_retorno, ref fiscal_MSG);
                                    txtVisorMsgConectorCF.Text = fiscal_MSG == "" ? "CARREGANDO FORMAS DE PGTO VALE" : fiscal_MSG;
                                    functionECF.conectorECF_ProgramaFormaPagamentoMFD(alwaysVariables.ModeloEcf, "Vale", "0", ref fiscal_MSG, ref fiscal_retorno, alwaysVariables.ECF_Ligada);
                                    //fiscal_retorno = conectorECF.Bematech_FI_ProgramaFormaPagamentoMFD("Vale", "0");
                                    //conectorECF.Analisa_iRetorno(fiscal_retorno, ref fiscal_MSG);
                                }
                                //######################Carregando Suprimento e abrindo o Movimento de Caixa
                                try
                                {
                                    functionECF.conectorECF_AberturaDoDia(alwaysVariables.ModeloEcf, input_troco, "Dinheiro", ref fiscal_MSG, ref fiscal_retorno, alwaysVariables.ECF_Ligada);
                                }
                                catch (Exception e)
                                {
                                    msg = new msgInfo(1, "Erro no abertura do dia, verifique [" + e.ToString() + "]");
                                    msg.ShowDialog();
                                }
                                conectorPDV_inc_cupom_relatorio("CN", null);
                                //fiscal_retorno = conectorECF.Bematech_FI_AberturaDoDia(input_troco, "Dinheiro");
                                functionECF.conectorECF_DataMovimento(alwaysVariables.ModeloEcf, ref fiscal_data_movimento, ref fiscal_MSG, ref fiscal_retorno, alwaysVariables.ECF_Ligada);
                                //fiscal_retorno = conectorECF.Bematech_FI_ DataMovimento(ref fiscal_data_movimento);

                                if (fiscal_data_movimento != "000000")
                                {
                                    if (fiscal_retorno == 1)
                                    {
                                        Directory.CreateDirectory(folderSlave + "\\" + fiscal_data_movimento);
                                        if (alwaysVariables.flagHomologacao == "1") { conector_geracao_md5(folderEletronico + "\\" + "crytECF-" + fiscal_numero_serie.Replace("\0", "").Trim() + "-" + fiscal_data_movimento, alwaysVariables.MD5_Main); } else { conector_geracao_md5(folderEletronico + "\\" + "crytECF-" + fiscal_numero_serie.Replace("\0", "").Trim() + "-" + fiscal_data_movimento, alwaysVariables.MD5VALIDO); }
                                    }
                                    //######################Carregando Suprimento e abrindo o Movimento de Caixa
                                    //######################Gerando Relatorio gerencial de entrada do operador

                                    functionECF.conectorECF_RelatorioGerencial(alwaysVariables.ModeloEcf, "================================================ \n" + "   E N T R A D A    D E   O P E R A D O R   \n" + "================================================ \n" + DateTime.Now.ToString() + "\n" + "================================================ \n", ref fiscal_MSG, ref fiscal_retorno, alwaysVariables.ECF_Ligada);
                                    //fiscal_retorno = conectorECF.Bematech_FI_RelatorioGerencial("================================================ \n" + "   E N T R A D A    D E   O P E R A D O R   \n" + "================================================ \n" + DateTime.Now.ToString() + "\n" + "================================================ \n");

                                    functionECF.conectorECF_UsaComprovanteNaoFiscalVinculado(alwaysVariables.ModeloEcf, "OPERADOR   : " + input_operador + "          LOJA - " + alwaysVariables.Store + flagLiquido, ref fiscal_MSG, ref fiscal_retorno, alwaysVariables.ECF_Ligada);
                                    functionECF.conectorECF_UsaComprovanteNaoFiscalVinculado(alwaysVariables.ModeloEcf, "SUPERVISOR : " + input_operador + "          LOJA - " + alwaysVariables.Store + flagLiquido, ref fiscal_MSG, ref fiscal_retorno, alwaysVariables.ECF_Ligada);
                                    functionECF.conectorECF_UsaComprovanteNaoFiscalVinculado(alwaysVariables.ModeloEcf, "------------------------------------------------" + flagLiquido, ref fiscal_MSG, ref fiscal_retorno, alwaysVariables.ECF_Ligada);
                                    functionECF.conectorECF_UsaComprovanteNaoFiscalVinculado(alwaysVariables.ModeloEcf, "Suprimento de Caixa R$ " + input_troco + flagLiquido, ref fiscal_MSG, ref fiscal_retorno, alwaysVariables.ECF_Ligada);
                                    functionECF.conectorECF_UsaComprovanteNaoFiscalVinculado(alwaysVariables.ModeloEcf, "================================================ \n" + flagLiquido, ref fiscal_MSG, ref fiscal_retorno, alwaysVariables.ECF_Ligada);


                                    /*fiscal_retorno = conectorECF.Bematech_FI_UsaComprovanteNaoFiscalVinculado("OPERADOR   : " + input_operador + "          LOJA - " + alwaysVariables.Store);
                                    fiscal_retorno = conectorECF.Bematech_FI_UsaComprovanteNaoFiscalVinculado("SUPERVISOR : " + input_operador + "          LOJA - " + alwaysVariables.Store);
                                    fiscal_retorno = conectorECF.Bematech_FI_UsaComprovanteNaoFiscalVinculado("------------------------------------------------");
                                    fiscal_retorno = conectorECF.Bematech_FI_UsaComprovanteNaoFiscalVinculado("Suprimento de Caixa R$ " + input_troco);
                                    fiscal_retorno = conectorECF.Bematech_FI_UsaComprovanteNaoFiscalVinculado("================================================ \n");*/
                                    functionECF.conectorECF_FechaRelatorioGerencial(alwaysVariables.ModeloEcf, ref fiscal_MSG, ref fiscal_retorno, alwaysVariables.ECF_Ligada);
                                    //fiscal_retorno = conectorECF.Bematech_FI_FechaRelatorioGerencial();
                                    if (fiscal_retorno == 1 && functionECF.conectorECF_Analisa_RetornoImpressora(alwaysVariables.ModeloEcf, ref ACK, ref ST1, ref ST2, ref ST3, ref fiscal_MSG))
                                    {
                                        conectorPDV_inc_estoque_geracao(fiscal_numero_serie);//Flash ESTOQUE
                                        //conectorPDV_inc_cupom_relatorio("RG");
                                    }
                                    else
                                    {
                                        txtVisorMsgConectorCF.Text = functionECF.conectorECF_Erros(alwaysVariables.ModeloEcf);
                                    }
                                    //######################End Gerando Relatorio gerencial de entrada do operador
                                    functionECF.conectorECF_NumeroCupom(alwaysVariables.ModeloEcf, ref fiscal_Cupom, ref fiscal_MSG, ref fiscal_retorno, alwaysVariables.ECF_Ligada);
                                    //fiscal_retorno = conectorECF.Bematech_FI_NumeroCupom(ref fiscal_Cupom);
                                    functionECF.conectorECF_GrandeTotal(alwaysVariables.ModeloEcf, ref fiscal_GT, ref fiscal_MSG, ref fiscal_retorno, alwaysVariables.ECF_Ligada);
                                    //fiscal_retorno = conectorECF.Bematech_FI_GrandeTotal(ref fiscal_GT);

                                    txtVisorMsgConectorCF.Text = functionECF.conectorECF_Erros(alwaysVariables.ModeloEcf) == "" ? "ABERTURA REALIZADA COM SUCESSO" : functionECF.conectorECF_Erros(alwaysVariables.ModeloEcf);
                                    if (fiscal_retorno == 1)
                                    {
                                        //fiscal_retorno = conectorECF.Bematech_FI_DataMovimento(ref fiscal_data_movimento);
                                        functionECF.conectorECF_DataMovimento(alwaysVariables.ModeloEcf, ref fiscal_data_movimento, ref fiscal_MSG, ref fiscal_retorno, alwaysVariables.ECF_Ligada);
                                        if (Convert.ToDouble(fiscal_data_movimento.Replace("\0", "").Trim() == "" ? "0" : fiscal_data_movimento) > 0 && functionECF.conectorECF_Analisa_RetornoImpressora(alwaysVariables.ModeloEcf, ref ACK, ref ST1, ref ST2, ref ST3, ref fiscal_MSG))
                                        {
                                            txtVisorMsgConectorCF.Text = fiscal_MSG == "" ? "ABERTURA REALIZADA COM SUCESSO" : fiscal_MSG;
                                            if (fiscal_MSG != "" && fiscal_retorno != 1)
                                            {
                                                txtVisorMsgConectorCF.Text = fiscal_MSG;
                                            }

                                            if (fiscal_data_printer.Trim() == "")
                                            {
                                                functionECF.conectorECF_DataHoraReducao(alwaysVariables.ModeloEcf, ref fiscal_data_printer, ref fiscal_hora_printer, ref fiscal_MSG, ref fiscal_retorno, alwaysVariables.ECF_Ligada);
                                            }
                                            //fiscal_retorno = conectorECF.Bematech_FI_DataHoraImpressora(ref fiscal_data_printer, ref fiscal_hora_printer);
                                            //conectorECF.Analisa_iRetorno(fiscal_retorno, ref fiscal_MSG);

                                            txtVisorMsgConectorCF.Text = fiscal_MSG == "" ? "ABERTURA REALIZADA COM SUCESSO" : fiscal_MSG;

                                            conectorPDV_inc_cupom_relatorio("CN", null);

                                            if (Convert.ToDouble(fiscal_data_movimento.Replace("\0", "").Trim() == "" ? "0" : fiscal_data_movimento) <= 0)
                                            {
                                                lbDataMovimentoConectorCF.Text = "00/00/0000";
                                            }
                                            else
                                            {
                                                if ((Convert.ToDouble(conector_verifica_last_movimento()) < Convert.ToDouble(String.Format("{0:ddMMyyyy}", DateTime.Now))) &&
                                                    Convert.ToDouble(conector_verifica_last_movimento()) > 0)
                                                {
                                                    if (conector_webservice_preVenda_count_expire(alwaysVariables.Store, "0", "4", "1") > 0)
                                                    {
                                                        txtVisorMsgConectorCF.Text = "CONFERINDO PRÉ-VENDAS PENDENTES";
                                                        ataque = 0;
                                                        msg = new msgInfo("Uma conferencia na base de retaguarda foi verificada e constatou-se " + countRowsWeb.ToString() + " pré-vendas pedentes, deseja atualiza-lás [ F12 ] antes da emissão da leitura Z ou cancela-las [ F11 ] ou [ ESPACE ].");
                                                        //if (msg.ShowDialog() == DialogResult.Yes)
                                                        //{
                                                        int count = countRowsWeb;
                                                        modoPedido = 1;
                                                        txtEntradaDadosConectorCF.Text = countRowsWeb.ToString();
                                                        for (int i = 0; i < count; i++)
                                                        {
                                                            modoPedido = 1;
                                                            conector_webservice_preVenda(alwaysVariables.Store.ToString(), dsRReservaEx.Tables[0].Rows[i][0].ToString(), 1);
                                                            ataque = 1;
                                                        }
                                                        //}

                                                    }
                                                }

                                                if (export.iniciaGeracaoFile(folderMFD + "\\Estoque", ref caminho, "Estoque") == true)
                                                {
                                                    auxConsistencia = 0;
                                                    conectorPDV_geracao_estoque();
                                                }
                                                lbDataMovimentoConectorCF.Text = fiscal_data_movimento.Substring(0, 2) + "/" + fiscal_data_movimento.Substring(2, 2) + "/" + String.Format("{0:ddMMyyyy}", DateTime.Now).Substring(4, 2) + fiscal_data_movimento.Substring(4, 2);
                                                txtVisorMsgConectorCF.Text = "CAIXA ABERTO";

                                                conectorPDV_inc_fechamentoCaixa();
                                                conectorPDV_inc_movimentocaixa("0.00", "0.00", "0.00", "0.00", input_troco, "0.00", 1.ToString(), "0.00", "0.00", "0.00", 1.ToString(), input_operador, "0,00", 0, "0,00");
                                                conectorPDV_find_operador();
                                                if (fiscal_last_reducao_dataMovimento != "000000")
                                                {
                                                    cryptografia.conectorPDV_GT(String.Format("{0:yyyyMMdd}", Convert.ToDateTime(fiscal_last_reducao_dataMovimento.Substring(0, 2) + "/" + fiscal_last_reducao_dataMovimento.Substring(2, 2) + "/" + String.Format("{0:ddMMyyyy}", DateTime.Now).Substring(4, 2) + fiscal_data_printer.Substring(4, 2))), fiscal_store, fiscal_numero_caixa, banco_sequencia, banco_operado, fiscal_numero_serie);
                                                }
                                                else
                                                {
                                                    cryptografia.conectorPDV_GT(String.Format("{0:yyyyMMdd}", Convert.ToDateTime(fiscal_data_movimento.Substring(0, 2) + "/" + fiscal_data_movimento.Substring(2, 2) + "/" + String.Format("{0:ddMMyyyy}", DateTime.Now).Substring(4, 2) + fiscal_data_printer.Substring(4, 2))), fiscal_store, fiscal_numero_caixa, banco_sequencia, banco_operado, fiscal_numero_serie);
                                                }
                                                if (fiscal_MSG != "" && fiscal_retorno != 1)
                                                {
                                                    txtVisorMsgConectorCF.Text = fiscal_MSG;
                                                }
                                                else
                                                {
                                                    fiscal_MSG = "";
                                                }
                                                txtAutorizacaoUsuarioConectorCF.Select();
                                                if (ataque == 0)
                                                {
                                                    if (conector_webservice_preVenda_count_expire(alwaysVariables.Store, "0", "5", "2") > 0)
                                                    {
                                                        txtVisorMsgConectorCF.Text = "CONFERINDO PRÉ-VENDAS PENDENTES";
                                                        int count = countRowsWeb;
                                                        modoPedido = 1;
                                                        txtEntradaDadosConectorCF.Text = countRowsWeb.ToString();
                                                        for (int i = 0; i < count; i++)
                                                        {
                                                            conector_webservice_preVenda(alwaysVariables.Store.ToString(), dsRReservaEx.Tables[0].Rows[i][0].ToString(), 1);
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                        else
                                        {
                                            if (functionECF.conectorECF_Erros(alwaysVariables.ModeloEcf) != "")
                                            {
                                                conector_retorno_ack();
                                            }
                                            else
                                            {
                                                txtVisorMsgConectorCF.Text = "FALHA NA ABERTURA DO DIA - REPITA A OPERAÇÃO";
                                            }
                                        }
                                    }
                                    if (Convert.ToDouble(fiscal_data_movimento.Replace("\0", "").Trim() == "" ? "0" : fiscal_data_movimento) == 0) { call_pdv = 1; }
                                    lblVisorEntradaDadosConectorCF.Text = "ENTRADA DE DADOS";
                                    pnlAutorizacaoPDVConectorCF.Visible = true;
                                    this.pnlAutorizacaoPDVConectorCF.Location = new System.Drawing.Point(0, 92);
                                    this.pnlAutorizacaoPDVConectorCF.Size = new System.Drawing.Size(649, 233);
                                    if (Convert.ToInt32(banco_operado) > 0)
                                    {
                                        txtVisorMsgConectorCF.Text = "PDV BLOQUEADO...!";
                                        txtEntradaDadosConectorCF.Clear();
                                        txtEntradaDadosConectorCF.CausesValidation = false;
                                        lbOperadorConectorCF.Text = banco_operado;
                                        resetLabel();
                                        fechaObj(true);
                                        call_pdv = 0;
                                        call_funcao = 0;
                                        txtAutorizacaoUsuarioConectorCF.Clear();
                                        txtAutorizacaoUsuarioConectorCF.Select();
                                        /*                                              txtAutorizacaoSenhaConectorCF.Clear();

                                                                                        txtEntradaDadosConectorCF.CausesValidation = true;*/
                                        ltbDetalhesConectorCF.Clear();
                                        ltbDetalhesConectorCF.Text = " ITEM  CÓDIGO  DESCRIÇÃO QTD  UN VL UNIT(R$) ST VL ITEM(R$)" + "\r\n" +
                                                                      "========================================================";

                                    }
                                }
                                else
                                {
                                    functionECF.conectorECF_fiscal_flag(alwaysVariables.ModeloEcf, ref fiscal_flag, ref fiscal_MSG, ref fiscal_retorno, alwaysVariables.ECF_Ligada);

                                    if (fiscal_retorno == 8 || fiscal_retorno == 40 || fiscal_retorno == 9 || fiscal_retorno == 10 || fiscal_retorno == 12 || fiscal_retorno == 24 || fiscal_retorno == 72 || fiscal_retorno == 136)
                                    {
                                        txtVisorMsgConectorCF.Text = "LEITURA Z - JÁ EMITIDA";
                                    }
                                    else
                                    {
                                        txtVisorMsgConectorCF.Text = "ERRO DE GRAVAÇÃO NO MOVIMENTO - REPITA A OPERAÇÃO";
                                    }
                                }
                            }
                            /*txtEntradaDadosConectorCF.CausesValidation = true;
                            txtEntradaDadosConectorCF.Clear();
                            txtEntradaDadosConectorCF.Select();*/

                        }
                    }
                    else
                    {
                        if (fiscal_flag == 8)
                        {
                            txtVisorMsgConectorCF.Text = "LEITURA Z JÁ PROCESSADA...! ";
                        }
                        else
                        {
                            txtVisorMsgConectorCF.Text = "ABERTURA DE CAIXA JÁ REALIZADA PARA DATA " + String.Format("{0:ddMMyyyy}", DateTime.Now);
                        }
                        lblVisorEntradaDadosConectorCF.Text = "ENTRADA DE DADOS";
                        txtEntradaDadosConectorCF.CausesValidation = true;
                        txtEntradaDadosConectorCF.Clear();
                        //                                        txtEntradaDadosConectorCF.Select();
                    }
        }
        private void conectorPDV_acion_menu_operacional_reducao_z()
        { 
            //fiscal_retorno = conectorECF.Bematech_FI_DataMovimento(ref fiscal_data_movimento);
                    functionECF.conectorECF_DataMovimento(alwaysVariables.ModeloEcf, ref fiscal_data_movimento, ref fiscal_MSG, ref fiscal_retorno, alwaysVariables.ECF_Ligada);
                    string test = "00000000";
                    string test_operador = banco_operado;
                    bool valida = true;
                    if (fiscal_data_movimento == "000000" || fiscal_data_movimento.Trim() == "")
                    {
                        return;
                    }

                    test = String.Format("{0:ddMMyyyy}", Convert.ToDateTime(fiscal_data_movimento.Substring(0, 2) + "/" + fiscal_data_movimento.Substring(2, 2) + "/" + String.Format("{0:ddMMyyyy}", DateTime.Now).Substring(4, 2) + fiscal_data_printer.Substring(4, 2)));

                    /*if (Convert.ToDouble(test) == Convert.ToDouble(String.Format("{0:ddMMyyyy}", DateTime.Now)))
                    {
                        if (conector_webservice_preVenda_count_expire(alwaysVariables.Store, "0", "4","1") > 0)
                        {
                            txtVisorMsgConectorCF.Text = "CONFERINDO PRÉ-VENDAS PENDENTES";
                            valida = false;
                            ataque = 0;
                            msg = new msgInfo("Uma conferencia na base de retaguarda foi verificada e constatou-se " + countRowsWeb.ToString() + " pré-vendas pedentes, deseja atualiza-lás [ F12 ] antes da emissão da leitura Z ou cancela-las [ F11 ] ou [ ESPACE ].");
                            if (msg.ShowDialog() == DialogResult.Yes)
                            {
                                valida = false;
                            }
                            else
                            {
                                valida = true;
                                int count = countRowsWeb;
                                txtEntradaDadosConectorCF.Text = countRowsWeb.ToString();
                                modoPedido = 1;
                                for (int i = 0; i < count; i++)
                                {
                                    conector_webservice_preVenda(alwaysVariables.Store.ToString(), dsRReservaEx.Tables[0].Rows[i][0].ToString(), 1);
                                    ataque = 1;
                                }
                            }

                        }
                    }
                    else
                    {
                        valida = true;
                    }*/

                    if (Convert.ToDouble(fiscal_data_movimento.Replace("\0", "").Trim() == "" ? "0" : fiscal_data_movimento) > 0 && valida == true)
                    {
                        if (input_z == null)
                        {
                            if (txtEntradaDadosConectorCF.Text != "")
                            {
                                this.txtEntradaDadosConectorCF.Font = new System.Drawing.Font("Microsoft Sans Serif", 38F, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
                                input_z = txtEntradaDadosConectorCF.Text;
                                txtEntradaDadosConectorCF.Clear();
                                this.lblVisorEntradaDadosConectorCF.Location = new System.Drawing.Point(284, 511);
                                lblVisorEntradaDadosConectorCF.Text = "CONFIRMA O ENCERRAMENTO";
                                txtEntradaDadosConectorCF.Text = lbDataMovimentoConectorCF.Text;
                                txtEntradaDadosConectorCF.CausesValidation = true;
                                txtEntradaDadosConectorCF.Select();
                                txtEntradaDadosConectorCF.ReadOnly = false;
                            }
                            else
                            {
                                input_z = null;
                                this.txtEntradaDadosConectorCF.Font = new System.Drawing.Font("Microsoft Sans Serif", 27F, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
                                txtEntradaDadosConectorCF.Text = "[ENTER] CONFIRMA" + "\r\n" + "[ESC] CANCELA";
                            }
                        }
                        else if (input_data_z == null)
                        {
                            conectorPDV_clear_log_pedido();
                            instrucao.carregaListaReparo();//Reprocesso
                            this.txtEntradaDadosConectorCF.Font = new System.Drawing.Font("Microsoft Sans Serif", 38F, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
                            input_data_z = txtEntradaDadosConectorCF.Text;
                            txtEntradaDadosConectorCF.Clear();
                            this.lblVisorEntradaDadosConectorCF.Location = new System.Drawing.Point(284, 511);
                            lblVisorEntradaDadosConectorCF.Text = "ENTRADA DE DADOS";
                            //fiscal_retorno = conectorECF.Bematech_FI_ReducaoZ("", "");//Paramentro 1 data/ Paramentro 2 data

                            if (conector_webservice_preVenda_count_expire(alwaysVariables.Store, "0", "4", "1") > 0)
                            {
                                if (input_data_z == DateTime.Now.ToShortDateString())
                                {
                                    txtVisorMsgConectorCF.Text = "CONFERINDO PRÉ-VENDAS PENDENTES";
                                    ataque = 0;
                                    msg = new msgInfo(1, "Uma conferencia na base de retaguarda foi verificada e constatou-se " + countRowsWeb.ToString() + " pré-vendas pedentes, deseja atualiza-lás [ F12 ] antes da emissão da leitura Z ou cancela-las [ F11 ] ou [ ESPACE ].");
                                    msg.ShowDialog();

                                    int count = countRowsWeb;
                                    txtEntradaDadosConectorCF.Text = countRowsWeb.ToString();
                                    for (int i = 0; i < count; i++)
                                    {
                                        modoPedido = 1;
                                        conector_webservice_preVenda(alwaysVariables.Store.ToString(), dsRReservaEx.Tables[0].Rows[i][0].ToString(), 1);
                                        ataque = 1;
                                    }
                                }
                                else
                                {
                                    msg = new msgInfo("Verificou-se que existem Pré-venda para serem atualizadas, contra partida o sistema não consegue finaliza-lás devido a data do movimento ser menor que a data vigente.");
                                    msg.ShowDialog();
                                }

                            }

                            conectorPDV_report_venda("2", "2");
                            functionECF.conectorECF_ReducaoZ(alwaysVariables.ModeloEcf, "", "", "", ref fiscal_MSG, ref fiscal_retorno, alwaysVariables.ECF_Ligada);//Paramentro 1 data/ Paramentro 2 data
                            if (fiscal_retorno == 1)
                            {
                                string opnf = conector_result_opnf(alwaysVariables.Store, String.Format("{0:yyyyMMdd}", Convert.ToDateTime(fiscal_data_movimento.Substring(0, 2) + "/" + fiscal_data_movimento.Substring(2, 2) + "/" + String.Format("{0:ddMMyyyy}", DateTime.Now).Substring(4, 2) + fiscal_data_printer.Substring(4, 2))), alwaysVariables.Terminal);
                                functionECF.conectorECF_NumeroCupom(alwaysVariables.ModeloEcf, ref fiscal_Cupom_coo, ref fiscal_MSG, ref fiscal_retorno, alwaysVariables.ECF_Ligada);
                                //conectorPDV_inc_cupom_relatorio("RG");
                                //Thread.Sleep(5000);
                                //fiscal_retorno = conectorECF.Bematech_FI_DadosUltimaReducaoMFD(ref fiscal_DadosUltimaReducaoMFD);
                                functionECF.conectorECF_DadosUltimaReducaoMFD(alwaysVariables.ModeloEcf, ref fiscal_DadosUltimaReducaoMFD, ref fiscal_MSG, ref fiscal_retorno, alwaysVariables.ECF_Ligada);
                                if (fiscal_retorno == 1 && fiscal_DadosUltimaReducaoMFD.Trim() != "")
                                {
                                    vetorAliquotaLastZ[0, 0] = fiscal_DadosUltimaReducaoMFD.Substring(1207, 4).Insert(2, ",");
                                    vetorAliquotaLastZ[0, 1] = fiscal_DadosUltimaReducaoMFD.Substring(1211, 4).Insert(2, ",");
                                    vetorAliquotaLastZ[0, 2] = fiscal_DadosUltimaReducaoMFD.Substring(1215, 4).Insert(2, ",");
                                    vetorAliquotaLastZ[0, 3] = fiscal_DadosUltimaReducaoMFD.Substring(1219, 4).Insert(2, ",");
                                    vetorAliquotaLastZ[0, 4] = fiscal_DadosUltimaReducaoMFD.Substring(1223, 4).Insert(2, ",");
                                    vetorAliquotaLastZ[0, 5] = fiscal_DadosUltimaReducaoMFD.Substring(1227, 4).Insert(2, ",");
                                    vetorAliquotaLastZ[0, 6] = fiscal_DadosUltimaReducaoMFD.Substring(1231, 4).Insert(2, ",");
                                    vetorAliquotaLastZ[0, 7] = fiscal_DadosUltimaReducaoMFD.Substring(1235, 4).Insert(2, ",");
                                    vetorAliquotaLastZ[0, 8] = fiscal_DadosUltimaReducaoMFD.Substring(1239, 4).Insert(2, ",");
                                    vetorAliquotaLastZ[0, 9] = fiscal_DadosUltimaReducaoMFD.Substring(1243, 4).Insert(2, ",");
                                    vetorAliquotaLastZ[0, 10] = fiscal_DadosUltimaReducaoMFD.Substring(1247, 4).Insert(2, ",");
                                    vetorAliquotaLastZ[0, 11] = fiscal_DadosUltimaReducaoMFD.Substring(1251, 4).Insert(2, ",");
                                    vetorAliquotaLastZ[0, 12] = fiscal_DadosUltimaReducaoMFD.Substring(1255, 4).Insert(2, ",");
                                    vetorAliquotaLastZ[0, 13] = fiscal_DadosUltimaReducaoMFD.Substring(1259, 4).Insert(2, ",");
                                    vetorAliquotaLastZ[0, 14] = fiscal_DadosUltimaReducaoMFD.Substring(1263, 4).Insert(2, ",");

                                    vetorAliquotaLastZ[1, 0] = fiscal_last_reducao_T18 = fiscal_DadosUltimaReducaoMFD.Substring(334, 14).Insert(12, ",");
                                    vetorAliquotaLastZ[1, 1] = fiscal_last_reducao_T12 = fiscal_DadosUltimaReducaoMFD.Substring(348, 14).Insert(12, ",");
                                    vetorAliquotaLastZ[1, 2] = fiscal_last_reducao_T07 = fiscal_DadosUltimaReducaoMFD.Substring(362, 14).Insert(12, ",");
                                    vetorAliquotaLastZ[1, 3] = fiscal_DadosUltimaReducaoMFD.Substring(376, 14).Insert(12, ",");
                                    vetorAliquotaLastZ[1, 4] = fiscal_DadosUltimaReducaoMFD.Substring(390, 14).Insert(12, ",");
                                    vetorAliquotaLastZ[1, 5] = fiscal_DadosUltimaReducaoMFD.Substring(404, 14).Insert(12, ",");
                                    vetorAliquotaLastZ[1, 6] = fiscal_DadosUltimaReducaoMFD.Substring(418, 14).Insert(12, ",");
                                    vetorAliquotaLastZ[1, 7] = fiscal_DadosUltimaReducaoMFD.Substring(432, 14).Insert(12, ",");
                                    vetorAliquotaLastZ[1, 8] = fiscal_DadosUltimaReducaoMFD.Substring(446, 14).Insert(12, ",");
                                    vetorAliquotaLastZ[1, 9] = fiscal_DadosUltimaReducaoMFD.Substring(460, 14).Insert(12, ",");
                                    vetorAliquotaLastZ[1, 10] = fiscal_DadosUltimaReducaoMFD.Substring(474, 14).Insert(12, ",");
                                    vetorAliquotaLastZ[1, 11] = fiscal_DadosUltimaReducaoMFD.Substring(488, 14).Insert(12, ",");
                                    vetorAliquotaLastZ[1, 12] = fiscal_DadosUltimaReducaoMFD.Substring(502, 14).Insert(12, ",");
                                    vetorAliquotaLastZ[1, 13] = fiscal_DadosUltimaReducaoMFD.Substring(516, 14).Insert(12, ",");
                                    vetorAliquotaLastZ[1, 14] = fiscal_DadosUltimaReducaoMFD.Substring(530, 14).Insert(12, ",");

                                    fiscal_last_reducao_coo = fiscal_DadosUltimaReducaoMFD.Substring(13, 6);
                                    fiscal_last_reducao_cro = fiscal_DadosUltimaReducaoMFD.Substring(3, 4);
                                    fiscal_last_reducao_crz = fiscal_DadosUltimaReducaoMFD.Substring(8, 4);
                                    fiscal_last_reducao_dataMovimento = fiscal_DadosUltimaReducaoMFD.Substring(1272, 6);
                                    fiscal_last_reducao_ValorAcumulado = fiscal_DadosUltimaReducaoMFD.Substring(315, 18).Insert(16, ",");
                                    fiscal_last_reducao_Isento_ICMS = fiscal_DadosUltimaReducaoMFD.Substring(559, 14).Insert(12, ",");
                                    fiscal_last_reducao_naoIncide_ICMS = fiscal_DadosUltimaReducaoMFD.Substring(574, 14).Insert(12, ",");
                                    fiscal_last_reducao_St_ICMS = fiscal_DadosUltimaReducaoMFD.Substring(589, 14).Insert(12, ",");
                                    fiscal_last_reducao_Isento_ISSQN = fiscal_DadosUltimaReducaoMFD.Substring(604, 14).Insert(12, ",");
                                    fiscal_last_reducao_naoIncide_ISSQN = fiscal_DadosUltimaReducaoMFD.Substring(619, 14).Insert(12, ",");
                                    fiscal_last_reducao_St_ISSQN = fiscal_DadosUltimaReducaoMFD.Substring(634, 14).Insert(12, ",");
                                    fiscal_last_reducao_desconto_ICMS = fiscal_DadosUltimaReducaoMFD.Substring(649, 14).Insert(12, ",");
                                    fiscal_last_reducao_desconto_ISSQN = fiscal_DadosUltimaReducaoMFD.Substring(664, 14).Insert(12, ",");
                                    fiscal_last_reducao_acrescimo_ICMS = fiscal_DadosUltimaReducaoMFD.Substring(679, 14).Insert(12, ",");
                                    fiscal_last_reducao_acrescimo_ISSQN = fiscal_DadosUltimaReducaoMFD.Substring(694, 14).Insert(12, ",");
                                    fiscal_last_reducao_cancelamento_ICMS = fiscal_DadosUltimaReducaoMFD.Substring(709, 14).Insert(12, ",");
                                    fiscal_last_reducao_cancelamento_ISSQN = fiscal_DadosUltimaReducaoMFD.Substring(724, 14).Insert(12, ",");
                                    fiscal_last_reducao_parcial_not_icms = fiscal_DadosUltimaReducaoMFD.Substring(739, 14).Insert(12, ",");
                                    fiscal_last_reducao_sangria = fiscal_DadosUltimaReducaoMFD.Substring(754, 14).Insert(12, ",");
                                    fiscal_last_reducao_suprimento = fiscal_DadosUltimaReducaoMFD.Substring(769, 14).Insert(12, ",");
                                    fiscal_last_reducao_cancelamento_not_fiscal = fiscal_DadosUltimaReducaoMFD.Substring(784, 14).Insert(12, ",");
                                    fiscal_last_reducao_desconto_not_fiscal = fiscal_DadosUltimaReducaoMFD.Substring(799, 14).Insert(12, ",");
                                    fiscal_last_reducao_acrescimo_not_fiscal = fiscal_DadosUltimaReducaoMFD.Substring(814, 14).Insert(12, ",");

                                    conectorPDV_inc_movimentodia(alwaysVariables.Store, fiscal_numero_caixa.Replace("\0", "").Trim(), String.Format("{0:yyyyMMdd}", Convert.ToDateTime(fiscal_last_reducao_dataMovimento.Substring(0, 2) + "/" + fiscal_last_reducao_dataMovimento.Substring(2, 2) + "/" + String.Format("{0:ddMMyyyy}", DateTime.Now).Substring(4, 2) + fiscal_data_printer.Substring(4, 2))), test_operador, fiscal_numero_serie, fiscal_letramf_adicional, fiscal_modelo, fiscal_last_reducao_crz, fiscal_Cupom_coo, fiscal_last_reducao_cro, String.Format("{0:yyyyMMdd}", Convert.ToDateTime(fiscal_last_reducao_dataMovimento.Substring(0, 2) + "/" + fiscal_last_reducao_dataMovimento.Substring(2, 2) + "/" + String.Format("{0:ddMMyyyy}", DateTime.Now).Substring(4, 2) + fiscal_data_printer.Substring(4, 2))), String.Format("{0:hhmmss}", DateTime.Now), fiscal_vendaBruta_last_reducaoZ, "", opnf);
                                    msg = new msgInfo(1,"LOG1 - MOVIMENTO DO DIA FINALIZADO"); msg.ShowDialog();
                                    try
                                    {
                                        workObject.modoPdv(true); //Para rotina loop
                                        strCupom = "";
                                        instrucao.setVetorCupom();

                                        strCupom = instrucao.getFechamentoCaixa(alwaysVariables.UserName, alwaysVariables.Senha, Convert.ToDouble(fiscal_store.Replace("\0", "").Trim() == "" ? alwaysVariables.Store : fiscal_store.Replace("\0", "").Trim()) > 0 ? fiscal_store.Replace("\0", "").Trim() : alwaysVariables.Store, test_operador, String.Format("{0:yyyyMMdd}", Convert.ToDateTime(lbDataMovimentoConectorCF.Text)), fiscal_numero_caixa.Replace("\0", "").Trim(), fiscal_Cupom.Replace("\0", "").Trim(), 2.ToString());
                                        instrucao.carregaInstrucaoMovimentoVenda(instrucao._fechamentoCaixa, strCupom, 0);
                                        instrucao.compactScript(instrucao._fechamentoCaixa, "fechamentoCaixa");
                                        workObject.modoPdv(false); //Libera rotina loop
                                    }
                                    catch (Exception erro)
                                    {
                                        msg = new msgInfo("LOG2 - REGISTRO DE INFORMAÇÕES, FALHA DE INSTRUÇÃO REGISTRO TABLE [FECHAMENTOCAIXA], HISTORICO PÓS REDUÇÃO Z FALHOU, VERIFIQUE A INFORMAÇÃO.: " + erro.Message); msg.ShowDialog(); auxConsistencia = 1;
                                        workObject.modoPdv(false); //Libera rotina loop
                                    }
                                }
                            }
                            else
                            {
                                functionECF.conectorECF_NumeroCupom(alwaysVariables.ModeloEcf, ref fiscal_last_reducao_coo, ref fiscal_MSG, ref fiscal_retorno, alwaysVariables.ECF_Ligada);
                                functionECF.conectorECF_NumeroReducoes(alwaysVariables.ModeloEcf, ref fiscal_last_reducao_crz, ref fiscal_MSG, ref fiscal_retorno, alwaysVariables.ECF_Ligada);
                                functionECF.conectorECF_NumeroIntervencoes(alwaysVariables.ModeloEcf, ref fiscal_last_reducao_cro, ref fiscal_MSG, ref fiscal_retorno, alwaysVariables.ECF_Ligada);
                                conectorPDV_inc_movimentodia(alwaysVariables.Store, fiscal_numero_caixa, String.Format("{0:yyyyMMdd}", Convert.ToDateTime(fiscal_last_reducao_dataMovimento.Substring(0, 2) + "/" + fiscal_last_reducao_dataMovimento.Substring(2, 2) + "/" + String.Format("{0:ddMMyyyy}", DateTime.Now).Substring(4, 2) + fiscal_data_printer.Substring(4, 2))), test_operador, fiscal_numero_serie, fiscal_letramf_adicional, fiscal_modelo, fiscal_last_reducao_crz, fiscal_last_reducao_coo, fiscal_last_reducao_cro, String.Format("{0:yyyyMMdd}", Convert.ToDateTime(fiscal_last_reducao_dataMovimento.Substring(0, 2) + "/" + fiscal_last_reducao_dataMovimento.Substring(2, 2) + "/" + String.Format("{0:ddMMyyyy}", DateTime.Now).Substring(4, 2) + fiscal_data_printer.Substring(4, 2))), String.Format("{0:hhmmss}", DateTime.Now), fiscal_vendaBruta_last_reducaoZ, "", "");
                                workObject.modoPdv(true); //Para rotina loop
                                strCupom = "";
                                instrucao.setVetorCupom();
                                strCupom = instrucao.getFechamentoCaixa(alwaysVariables.UserName, alwaysVariables.Senha, Convert.ToDouble(fiscal_store.Replace("\0", "").Trim()) > 0 ? fiscal_store.Replace("\0", "").Trim() : alwaysVariables.Store, test_operador, String.Format("{0:yyyyMMdd}", Convert.ToDateTime(alwaysVariables.XDataTime(lbDataMovimentoConectorCF.Text).ToString())), fiscal_numero_caixa.Replace("\0", "").Trim(), fiscal_Cupom.Replace("\0", ""), 2.ToString());
                                instrucao.carregaInstrucaoMovimentoVenda(instrucao._fechamentoCaixa, strCupom, 0);
                                instrucao.compactScript(instrucao._fechamentoCaixa, "fechamentoCaixa");
                                workObject.modoPdv(false); //Libera rotina loop
                            }

                            backgroundConectorReducaoZ.RunWorkerAsync();

                            msg = new msgInfo(1,"ATENÇÃO - AGUARDE O PROCESSAMENTO DE DADOS! EM ALGUNS SEGUNDOS O SISTEMA FECHARÁ TODAS AS JANELAS - [ ESC ] - SAIR.");
                            msg.Show();
                            //Flavio retirada
                        }
                    }
                    else
                    {
                        conector_reset_z();
                        txtVisorMsgConectorCF.Text = "NÃO HÁ DIA PARA SER ENCERRADO";
                        txtEntradaDadosConectorCF.Clear();
                        txtEntradaDadosConectorCF.Select();
                        txtEntradaDadosConectorCF.CausesValidation = true;
                        this.lblVisorEntradaDadosConectorCF.Location = new System.Drawing.Point(284, 511);
                        lblVisorEntradaDadosConectorCF.Text = "ENTRADA DE DADOS";
                    }
                    workObject.RequestStop(false);
                    workObject.modoPdv(false);
                    //txtEntradaDadosConectorCF.Clear();
                    txtDescricaoItemConectorCF.Select();
                    txtEntradaDadosConectorCF.CausesValidation = true;
                    txtEntradaDadosConectorCF.Select();
                    //txtEntradaDadosConectorCF.CausesValidation = true;
        }
        private void conectorPDV_acion_menu_operacional_funcoes()
        {
            switch (call_funcao)
            {
                case 1:
                    conectorPDV_acion_menu_operacional_abertura_cx();
                    break;
                case 2:
                    functionECF.conectorECF_AcionaGaveta(alwaysVariables.ModeloEcf, ref fiscal_MSG, ref fiscal_retorno, alwaysVariables.ECF_Ligada);
                    //fiscal_retorno = conectorECF.Bematech_FI_AcionaGaveta();
                    //conectorECF.Analisa_iRetorno(fiscal_retorno, ref fiscal_MSG);
                    functionECF.VerificaEstadoGaveta(alwaysVariables.ModeloEcf, ref fiscal_MSG, ref gaveta, ref fiscal_retorno, alwaysVariables.ECF_Ligada);
                    if (gaveta == 0)
                    {
                        //Estado = 1 sensor em nível 1 (fechada)
                        //Estado = 0 sensor em nível 0 (aberta)
                        msg = new msgInfo("INFORMAÇÃO DO SISTEMA! GAVETA ABERTA."); msg.ShowDialog(); auxConsistencia = 1;
                    }
                    else
                    {
                        msg = new msgInfo("INFORMAÇÃO DO SISTEMA! GAVETA FECHADA."); msg.ShowDialog(); auxConsistencia = 1;
                    }
                    txtEntradaDadosConectorCF.CausesValidation = true;
                    break;
                case 3:
                    if (Convert.ToInt32(lbOperadorConectorCF.Text == "" ? "0" : lbOperadorConectorCF.Text) == 0)
                    {
                        if (statusMovimento() == 0)
                        {
                            functionECF.conectorECF_fiscal_flag(alwaysVariables.ModeloEcf, ref fiscal_flag, ref fiscal_MSG, ref fiscal_retorno, alwaysVariables.ECF_Ligada);

                            if (Convert.ToDouble(fiscal_data_movimento.Replace("\0", "").Trim() == "" ? "0" : fiscal_data_movimento) > 0 && fiscal_flag != 8)
                            {
                                if (lblVisorEntradaDadosConectorCF.Text == "ENTRADA DE DADOS")
                                {
                                    conector_reset_input();
                                    lblVisorEntradaDadosConectorCF.Text = "CODIGO DO OPERADOR";
                                    txtEntradaDadosConectorCF.Clear();
                                    txtEntradaDadosConectorCF.Select();
                                    txtEntradaDadosConectorCF.CausesValidation = false;
                                    input_operador = null;
                                }
                                else if (input_operador == null)
                                {
                                    if (conector_funcionario(txtEntradaDadosConectorCF.Text) == 1 && txtEntradaDadosConectorCF.Text != "")
                                    {
                                        input_operador = banco_operado;
                                        txtEntradaDadosConectorCF.Clear();
                                        lblVisorEntradaDadosConectorCF.Text = "ENTRADA DO TROCO";
                                        txtEntradaDadosConectorCF.Text = "0,00";
                                        txtEntradaDadosConectorCF.Select();
                                    }
                                    else
                                    {
                                        txtVisorMsgConectorCF.Text = "FUNCIONARIO INVÁLIDO, OU NÃO EXISTE.";
                                        input_operador = null;
                                        txtEntradaDadosConectorCF.Clear();
                                        txtEntradaDadosConectorCF.Select();
                                    }
                                }
                                else if (input_troco == null)
                                {
                                    call_pdv = 0;
                                    if (Convert.ToDecimal(txtEntradaDadosConectorCF.Text.Replace(",", ".")) >= 0)
                                    {
                                        input_troco = String.Format("{0:F2}", Convert.ToDecimal(txtEntradaDadosConectorCF.Text.Replace(",", "."))).Replace(".", ",");
                                        //fiscal_retorno = conectorECF.Bematech_FI_LeituraX();
                                        functionECF.conectorECF_LeituraX(alwaysVariables.ModeloEcf, ref fiscal_MSG, ref fiscal_retorno, alwaysVariables.ECF_Ligada);

                                        //conectorECF.Analisa_iRetorno(fiscal_retorno, ref fiscal_MSG);
                                        //fiscal_retorno = conectorECF.Bematech_FI_NumeroCupom(ref fiscal_Cupom);
                                        functionECF.conectorECF_NumeroCupom(alwaysVariables.ModeloEcf, ref fiscal_Cupom, ref fiscal_MSG, ref fiscal_retorno, alwaysVariables.ECF_Ligada);
                                        if (fiscal_retorno != 1) 
                                        { txtVisorMsgConectorCF.Text = fiscal_MSG; } else 
                                        { conectorPDV_update_contador(fiscal_Cupom); }
                                        functionECF.conectorECF_Suprimento(alwaysVariables.ModeloEcf, String.Format("{0:F2}", Math.Round(Convert.ToDecimal(txtEntradaDadosConectorCF.Text.Replace(",", ".")))).Replace(".", ","), "Dinheiro", ref fiscal_MSG, ref fiscal_retorno, alwaysVariables.ECF_Ligada);
                                        //fiscal_retorno = conectorECF.Bematech_FI_Suprimento(input_troco.Replace(".", ","), "Dinheiro");
                                        //conectorECF.Analisa_iRetorno(fiscal_retorno, ref fiscal_MSG);
                                        functionECF.conectorECF_NumeroCupom(alwaysVariables.ModeloEcf, ref fiscal_Cupom, ref fiscal_MSG, ref fiscal_retorno, alwaysVariables.ECF_Ligada);
                                        if (fiscal_retorno == 1)
                                        {
                                            if (input_operador != "0")
                                            {
                                                conectorPDV_inc_cupom_relatorio("CN", null);
                                            }
                                        }
                                        //fiscal_retorno = conectorECF.Bematech_FI_NumeroCupom(ref fiscal_Cupom);
                                        if (fiscal_retorno != 1) { txtVisorMsgConectorCF.Text = fiscal_MSG; } else { conectorPDV_update_contador(fiscal_Cupom); }
                                        //##################################Relatorio Gerencial######################################################
                                        //fiscal_retorno = conectorECF.Bematech_FI_RelatorioGerencial("================================================ \n" + "   E N T R A D A    D E   O P E R A D O R   \n" + "================================================ \n" + DateTime.Now.ToString() + "\n" + "================================================ \n");
                                        functionECF.conectorECF_RelatorioGerencial(alwaysVariables.ModeloEcf, "================================================ \n" + "   E N T R A D A    D E   O P E R A D O R   \n" + "================================================ \n" + DateTime.Now.ToString() + "\n" + "================================================ \n", ref fiscal_MSG, ref fiscal_retorno, alwaysVariables.ECF_Ligada);
                                        functionECF.conectorECF_UsaComprovanteNaoFiscalVinculado(alwaysVariables.ModeloEcf, "OPERADOR  : " + input_operador + "       " + " LOJA - " + alwaysVariables.Store + "\n", ref fiscal_MSG, ref fiscal_retorno, alwaysVariables.ECF_Ligada);
                                        functionECF.conectorECF_UsaComprovanteNaoFiscalVinculado(alwaysVariables.ModeloEcf, "SUPERVISOR: " + input_operador + "       " + " LOJA - " + alwaysVariables.Store + "\n", ref fiscal_MSG, ref fiscal_retorno, alwaysVariables.ECF_Ligada);
                                        functionECF.conectorECF_UsaComprovanteNaoFiscalVinculado(alwaysVariables.ModeloEcf, "------------------------------------------------ \n", ref fiscal_MSG, ref fiscal_retorno, alwaysVariables.ECF_Ligada);
                                        functionECF.conectorECF_UsaComprovanteNaoFiscalVinculado(alwaysVariables.ModeloEcf, "Suprimento de Caixa R$ " + input_troco + "\n", ref fiscal_MSG, ref fiscal_retorno, alwaysVariables.ECF_Ligada);
                                        functionECF.conectorECF_UsaComprovanteNaoFiscalVinculado(alwaysVariables.ModeloEcf, "================================================ \n", ref fiscal_MSG, ref fiscal_retorno, alwaysVariables.ECF_Ligada);

                                        /*fiscal_retorno = conectorECF.Bematech_FI_UsaComprovanteNaoFiscalVinculado("OPERADOR  : " + input_operador + "       " + " LOJA - " + alwaysVariables.Store + "\n");
                                        fiscal_retorno = conectorECF.Bematech_FI_UsaComprovanteNaoFiscalVinculado("SUPERVISOR: " + input_operador + "       " + " LOJA - " + alwaysVariables.Store + "\n");
                                        fiscal_retorno = conectorECF.Bematech_FI_UsaComprovanteNaoFiscalVinculado("------------------------------------------------ \n");
                                        fiscal_retorno = conectorECF.Bematech_FI_UsaComprovanteNaoFiscalVinculado("Suprimento de Caixa R$ " + input_troco + "\n");
                                        fiscal_retorno = conectorECF.Bematech_FI_UsaComprovanteNaoFiscalVinculado("================================================ \n");*/
                                        functionECF.conectorECF_FechaRelatorioGerencial(alwaysVariables.ModeloEcf, ref fiscal_MSG, ref fiscal_retorno, alwaysVariables.ECF_Ligada);
                                        //fiscal_retorno = conectorECF.Bematech_FI_FechaRelatorioGerencial();
                                        if (fiscal_retorno == 1)
                                        {
                                            if (input_operador != "0")
                                            {
                                                conectorPDV_inc_cupom_relatorio("RG", null);
                                            }
                                        }
                                        functionECF.conectorECF_NumeroCupom(alwaysVariables.ModeloEcf, ref fiscal_Cupom, ref fiscal_MSG, ref fiscal_retorno, alwaysVariables.ECF_Ligada);
                                        //conectorECF.Analisa_iRetorno(fiscal_retorno, ref fiscal_MSG);
                                        //fiscal_retorno = conectorECF.Bematech_FI_NumeroCupom(ref fiscal_Cupom);
                                        if (fiscal_retorno != 1) { txtVisorMsgConectorCF.Text = fiscal_MSG; } else { conectorPDV_update_contador(fiscal_Cupom); }
                                        //##################################END Relatorio Gerencial##################################################

                                    }
                                    else
                                    {
                                        input_troco = "0";
                                    }

                                    if (fiscal_retorno == 1 && functionECF.conectorECF_Analisa_RetornoImpressora(alwaysVariables.ModeloEcf, ref ACK, ref ST1, ref ST2, ref ST3, ref fiscal_MSG))
                                    {
                                        //fiscal_retorno = conectorECF.Bematech_FI_DataMovimento(ref fiscal_data_movimento);
                                        //conectorECF.Analisa_iRetorno(fiscal_retorno, ref fiscal_MSG);
                                        functionECF.conectorECF_DataMovimento(alwaysVariables.ModeloEcf, ref fiscal_data_movimento, ref fiscal_MSG, ref fiscal_retorno, alwaysVariables.ECF_Ligada);
                                        txtVisorMsgConectorCF.Text = fiscal_MSG == "" ? "ENTRADA DE OPERADOR REALIZADA COM SUCESSO" : fiscal_MSG;
                                        if (fiscal_MSG != "" && fiscal_retorno != 1)
                                        {
                                            txtVisorMsgConectorCF.Text = fiscal_MSG;
                                        }

                                        if (fiscal_data_printer.Trim() == "")
                                        {
                                            functionECF.conectorECF_DataHoraReducao(alwaysVariables.ModeloEcf, ref fiscal_data_printer, ref fiscal_hora_printer, ref fiscal_MSG, ref fiscal_retorno, alwaysVariables.ECF_Ligada);
                                        }
                                        //fiscal_retorno = conectorECF.Bematech_FI_DataHoraImpressora(ref fiscal_data_printer, ref fiscal_hora_printer);
                                        //conectorECF.Analisa_iRetorno(fiscal_retorno, ref fiscal_MSG);
                                        txtVisorMsgConectorCF.Text = fiscal_MSG == "" ? "ENTRADA DE OPERADOR REALIZADA COM SUCESSO" : fiscal_MSG;
                                        if (fiscal_MSG != "" && fiscal_retorno != 1)
                                        {
                                            txtVisorMsgConectorCF.Text = fiscal_MSG;
                                        }

                                        if (Convert.ToDouble(fiscal_data_movimento.Replace("\0", "").Trim() == "" ? "0" : fiscal_data_movimento) <= 0)
                                        {
                                            lbDataMovimentoConectorCF.Text = "00/00/0000";
                                        }
                                        else
                                        {
                                            lbDataMovimentoConectorCF.Text = fiscal_data_movimento.Substring(0, 2) + "/" + fiscal_data_movimento.Substring(2, 2) + "/" + String.Format("{0:ddMMyyyy}", DateTime.Now).Substring(4, 2) + fiscal_data_movimento.Substring(4, 2);
                                            txtVisorMsgConectorCF.Text = "CAIXA ABERTO";
                                            conectorPDV_inc_fechamentoCaixa();
                                            //Flavio alt Kaite conectorPDV_inc_movimentocaixa(input_troco, "0.00", "0.00", "0.00", "0.00", "0.00", 1.ToString(), "0.00", "0.00", "0.00", 1.ToString(), input_operador, "0.00", 0, "0,00");
                                        }
                                    }
                                    else
                                    {
                                        conector_retorno_ack();
                                    }
                                    if (Convert.ToDouble(fiscal_data_movimento.Replace("\0", "").Trim() == "" ? "0" : fiscal_data_movimento) == 0) { call_pdv = 1; }
                                    lblVisorEntradaDadosConectorCF.Text = "ENTRADA DE DADOS";
                                    resetLabel();
                                    fechaObj(true);
                                    pnlAutorizacaoPDVConectorCF.Visible = true;
                                    this.pnlAutorizacaoPDVConectorCF.Location = new System.Drawing.Point(0, 92);
                                    this.pnlAutorizacaoPDVConectorCF.Size = new System.Drawing.Size(649, 233);
                                    txtAutorizacaoSenhaConectorCF.Select();
                                    if (Convert.ToInt32(banco_operado) > 0)
                                    {
                                        txtVisorMsgConectorCF.Text = "PDV BLOQUEADO...!";
                                        txtEntradaDadosConectorCF.CausesValidation = false;
                                        lbOperadorConectorCF.Text = banco_operado;
                                        fechaObj(true);
                                        txtAutorizacaoUsuarioConectorCF.Select();
                                        txtEntradaDadosConectorCF.CausesValidation = true;
                                        ltbDetalhesConectorCF.Text = " ITEM  CÓDIGO  DESCRIÇÃO QTD  UN VL UNIT(R$) ST VL ITEM(R$)" + "\r\n" +
                                                                     "===========================================================";

                                    }

                                }
                            }
                            else
                            {
                                txtVisorMsgConectorCF.Text = "ABERTURA DO DIA NÃO INICIADA, ABRA O DIA PRIMEIRAMENTE.";
                                lblVisorEntradaDadosConectorCF.Text = "ENTRADA DE DADOS";
                                call_funcao = 0;
                                txtEntradaDadosConectorCF.CausesValidation = true;
                            }
                        }
                        else
                        {
                            txtVisorMsgConectorCF.Text = "MOVIMENTO EM ABERTO, VERIFIQUE...!";
                            input_operador = null;
                            txtEntradaDadosConectorCF.CausesValidation = true;
                        }
                    }
                    else
                    {
                        txtVisorMsgConectorCF.Text = "EXISTE OPERADOR EM EXERCÍCIO, VERIFIQUE...!";
                        input_operador = null;
                        txtEntradaDadosConectorCF.CausesValidation = true;
                    }
                    break;
                case 4:
                    // if (statusMovimento() > 0 && Convert.ToInt32(lbOperadorConectorCF.Text) > 0)
                    if (statusMovimento() > 0 || Convert.ToInt32(lbOperadorConectorCF.Text == "" ? "0" : lbOperadorConectorCF.Text) > 0)
                    {
                        functionECF.conectorECF_Descontos(alwaysVariables.ModeloEcf, ref fiscal_ValorDescontos, ref fiscal_MSG, ref fiscal_retorno, alwaysVariables.ECF_Ligada);
                        functionECF.conectorECF_ValorCancelamento(alwaysVariables.ModeloEcf, ref fiscal_ValorCancelamentos, ref fiscal_MSG, ref fiscal_retorno, alwaysVariables.ECF_Ligada);
                        //fiscal_retorno = conectorECF.Bematech_FI_Descontos(ref fiscal_ValorDescontos);
                        //fiscal_retorno = conectorECF.Bematech_FI_Cancelamentos(ref fiscal_ValorCancelamentos);
                        //fiscal_retorno = conectorECF.Bematech_FI_NumeroReducoes(ref fiscal_NumReducoes);
                        functionECF.conectorECF_NumeroReducoes(alwaysVariables.ModeloEcf, ref fiscal_NumReducoes, ref fiscal_MSG, ref fiscal_retorno, alwaysVariables.ECF_Ligada);
                        functionECF.conectorECF_NumeroCuponsCancelados(alwaysVariables.ModeloEcf, ref fiscal_NumCuponsCanc, ref fiscal_MSG, ref fiscal_retorno, alwaysVariables.ECF_Ligada);
                        //fiscal_retorno = conectorECF.Bematech_FI_NumeroCuponsCancelados(ref fiscal_NumCuponsCanc);
                        functionECF.conectorECF_NumeroCupom(alwaysVariables.ModeloEcf, ref fiscal_Cupom, ref fiscal_MSG, ref fiscal_retorno, alwaysVariables.ECF_Ligada);
                        //fiscal_retorno = conectorECF.Bematech_FI_NumeroCupom(ref fiscal_Cupom);
                        conectorPDV_find_operador();
                        if (fiscal_retorno == 1 && functionECF.conectorECF_Analisa_RetornoImpressora(alwaysVariables.ModeloEcf, ref ACK, ref ST1, ref ST2, ref ST3, ref fiscal_MSG))
                        {//conectorPDV_report_venda("2","2");

                            if (saida_operador(lbOperadorConectorCF.Text) == 1)
                            {
                                // old if (fiscal_retorno != 1) { txtVisorMsgConectorCF.Text = fiscal_MSG; } else { conectorPDV_update_contador(fiscal_Cupom); }
                                if (fiscal_retorno != 1) { txtVisorMsgConectorCF.Text = fiscal_MSG; } else { conectorPDV_update_contador(fiscal_Cupom); conectorPDV_alt_fechamentoCaixa(); }
                                resetVariableFechamento();
                                //fiscal_retorno = conectorECF.Bematech_FI_LeituraX();
                                functionECF.conectorECF_LeituraX(alwaysVariables.ModeloEcf, ref fiscal_MSG, ref fiscal_retorno, alwaysVariables.ECF_Ligada);

                                conectorPDV_find_fechamentoOp("1");
                                functionECF.conectorECF_NumeroCupom(alwaysVariables.ModeloEcf, ref fiscal_Cupom, ref fiscal_MSG, ref fiscal_retorno, alwaysVariables.ECF_Ligada);

                                conectorPDV_report_venda("2", "2");

                                //fiscal_retorno = conectorECF.Bematech_FI_NumeroCupom(ref fiscal_Cupom);
                                //fiscal_retorno = conectorECF.Bematech_FI_RelatorioGerencial("================================================ \n" + "   F E C H A M E N T O    O P E R A D O R   \n" + "================================================ \n" + DateTime.Now.ToString() + "\n" + "================================================ \n");
                                /* Nova retirada functionECF.conectorECF_RelatorioGerencial(alwaysVariables.ModeloEcf, "================================================ \n" + "   F E C H A M E N T O    O P E R A D O R   \n" + "================================================ \n" + DateTime.Now.ToString() + "\n" + "================================================ \n", ref fiscal_MSG, ref fiscal_retorno, alwaysVariables.ECF_Ligada);

                                functionECF.conectorECF_UsaComprovanteNaoFiscalVinculado(alwaysVariables.ModeloEcf, "OPERADOR  : " + input_operador + "LOJA - " + alwaysVariables.Store, ref fiscal_MSG, ref fiscal_retorno, alwaysVariables.ECF_Ligada);
                                functionECF.conectorECF_UsaComprovanteNaoFiscalVinculado(alwaysVariables.ModeloEcf, "SEQUENCIA OPERADOR  : " + banco_sequencia, ref fiscal_MSG, ref fiscal_retorno, alwaysVariables.ECF_Ligada);
                                functionECF.conectorECF_UsaComprovanteNaoFiscalVinculado(alwaysVariables.ModeloEcf, "SUPERVISOR: " + input_operador + "LOJA - " + alwaysVariables.Store, ref fiscal_MSG, ref fiscal_retorno, alwaysVariables.ECF_Ligada);
                                functionECF.conectorECF_UsaComprovanteNaoFiscalVinculado(alwaysVariables.ModeloEcf, "------------------------------------------------", ref fiscal_MSG, ref fiscal_retorno, alwaysVariables.ECF_Ligada);
                                functionECF.conectorECF_UsaComprovanteNaoFiscalVinculado(alwaysVariables.ModeloEcf, "V A L O R E S -  P O R - F I N A L I Z A D O R A ", ref fiscal_MSG, ref fiscal_retorno, alwaysVariables.ECF_Ligada);
                                functionECF.conectorECF_UsaComprovanteNaoFiscalVinculado(alwaysVariables.ModeloEcf, "------------------------------------------------", ref fiscal_MSG, ref fiscal_retorno, alwaysVariables.ECF_Ligada);
                                functionECF.conectorECF_UsaComprovanteNaoFiscalVinculado(alwaysVariables.ModeloEcf, "Finalizadora           Valor           Qtd.     ", ref fiscal_MSG, ref fiscal_retorno, alwaysVariables.ECF_Ligada);
                                conectorPDV_find_fechamentoOp("1");
                                functionECF.conectorECF_UsaComprovanteNaoFiscalVinculado(alwaysVariables.ModeloEcf, "================================================", ref fiscal_MSG, ref fiscal_retorno, alwaysVariables.ECF_Ligada);
                                functionECF.conectorECF_UsaComprovanteNaoFiscalVinculado(alwaysVariables.ModeloEcf, "Valor Tot. Liquido      R$  " + flagLiquido, ref fiscal_MSG, ref fiscal_retorno, alwaysVariables.ECF_Ligada);
                                functionECF.conectorECF_UsaComprovanteNaoFiscalVinculado(alwaysVariables.ModeloEcf, "Valor Troco Cedido      R$  " + "0,00", ref fiscal_MSG, ref fiscal_retorno, alwaysVariables.ECF_Ligada);
                                functionECF.conectorECF_UsaComprovanteNaoFiscalVinculado(alwaysVariables.ModeloEcf, "Valor Vale Cedido       R$  " + flagVale, ref fiscal_MSG, ref fiscal_retorno, alwaysVariables.ECF_Ligada);
                                functionECF.conectorECF_UsaComprovanteNaoFiscalVinculado(alwaysVariables.ModeloEcf, "Valor Sangria           R$  " + flagSangria, ref fiscal_MSG, ref fiscal_retorno, alwaysVariables.ECF_Ligada);
                                functionECF.conectorECF_UsaComprovanteNaoFiscalVinculado(alwaysVariables.ModeloEcf, "Valor Devoluções        R$  " + flagDevolucao, ref fiscal_MSG, ref fiscal_retorno, alwaysVariables.ECF_Ligada);
                                functionECF.conectorECF_UsaComprovanteNaoFiscalVinculado(alwaysVariables.ModeloEcf, "Valor Fundo-Caixa       R$  " + flagFundo_Caixa, ref fiscal_MSG, ref fiscal_retorno, alwaysVariables.ECF_Ligada);
                                functionECF.conectorECF_UsaComprovanteNaoFiscalVinculado(alwaysVariables.ModeloEcf, "Valor Total Doação      R$  " + flagDoacao, ref fiscal_MSG, ref fiscal_retorno, alwaysVariables.ECF_Ligada);
                                functionECF.conectorECF_UsaComprovanteNaoFiscalVinculado(alwaysVariables.ModeloEcf, "Valor Saque Sitef       R$  " + "0,00", ref fiscal_MSG, ref fiscal_retorno, alwaysVariables.ECF_Ligada);
                                functionECF.conectorECF_UsaComprovanteNaoFiscalVinculado(alwaysVariables.ModeloEcf, "Valor Total Cancelados  R$  " + flagCanceladoFechamento, ref fiscal_MSG, ref fiscal_retorno, alwaysVariables.ECF_Ligada);
                                functionECF.conectorECF_UsaComprovanteNaoFiscalVinculado(alwaysVariables.ModeloEcf, "Valor Total Descontos   R$  " + flagDesconto, ref fiscal_MSG, ref fiscal_retorno, alwaysVariables.ECF_Ligada);
                                functionECF.conectorECF_UsaComprovanteNaoFiscalVinculado(alwaysVariables.ModeloEcf, "Valor Juros Tributados  R$  " + "0,00", ref fiscal_MSG, ref fiscal_retorno, alwaysVariables.ECF_Ligada);
                                functionECF.conectorECF_UsaComprovanteNaoFiscalVinculado(alwaysVariables.ModeloEcf, "Valor Não Tributados    R$  " + "0,00", ref fiscal_MSG, ref fiscal_retorno, alwaysVariables.ECF_Ligada);
                                functionECF.conectorECF_UsaComprovanteNaoFiscalVinculado(alwaysVariables.ModeloEcf, "------------------------------------------------", ref fiscal_MSG, ref fiscal_retorno, alwaysVariables.ECF_Ligada);
                                functionECF.conectorECF_UsaComprovanteNaoFiscalVinculado(alwaysVariables.ModeloEcf, "Cupom: " + fiscal_Cupom + "Hora: " + "00:00" + "\n \n", ref fiscal_MSG, ref fiscal_retorno, alwaysVariables.ECF_Ligada);
                                functionECF.conectorECF_UsaComprovanteNaoFiscalVinculado(alwaysVariables.ModeloEcf, "Envelope: " + "0000000000", ref fiscal_MSG, ref fiscal_retorno, alwaysVariables.ECF_Ligada);
                                functionECF.conectorECF_UsaComprovanteNaoFiscalVinculado(alwaysVariables.ModeloEcf, "DINHEIRO: " + "0,00", ref fiscal_MSG, ref fiscal_retorno, alwaysVariables.ECF_Ligada);
                                functionECF.conectorECF_UsaComprovanteNaoFiscalVinculado(alwaysVariables.ModeloEcf, "------------------------------------------------ \n", ref fiscal_MSG, ref fiscal_retorno, alwaysVariables.ECF_Ligada);
                                functionECF.conectorECF_UsaComprovanteNaoFiscalVinculado(alwaysVariables.ModeloEcf, "================================================ \n", ref fiscal_MSG, ref fiscal_retorno, alwaysVariables.ECF_Ligada);
                                functionECF.conectorECF_UsaComprovanteNaoFiscalVinculado(alwaysVariables.ModeloEcf, "         R E C A R G A   C E L U L A R          ", ref fiscal_MSG, ref fiscal_retorno, alwaysVariables.ECF_Ligada);
                                functionECF.conectorECF_UsaComprovanteNaoFiscalVinculado(alwaysVariables.ModeloEcf, "------------------------------------------------", ref fiscal_MSG, ref fiscal_retorno, alwaysVariables.ECF_Ligada);
                                functionECF.conectorECF_UsaComprovanteNaoFiscalVinculado(alwaysVariables.ModeloEcf, "OPERADOR  : " + input_operador + "LOJA - " + alwaysVariables.Store, ref fiscal_MSG, ref fiscal_retorno, alwaysVariables.ECF_Ligada);
                                functionECF.conectorECF_UsaComprovanteNaoFiscalVinculado(alwaysVariables.ModeloEcf, "------------------------------------------------", ref fiscal_MSG, ref fiscal_retorno, alwaysVariables.ECF_Ligada);
                                functionECF.conectorECF_UsaComprovanteNaoFiscalVinculado(alwaysVariables.ModeloEcf, "Fin   Descricao                     Valor       ", ref fiscal_MSG, ref fiscal_retorno, alwaysVariables.ECF_Ligada);
                                functionECF.conectorECF_UsaComprovanteNaoFiscalVinculado(alwaysVariables.ModeloEcf, "================================================", ref fiscal_MSG, ref fiscal_retorno, alwaysVariables.ECF_Ligada);
                                functionECF.conectorECF_UsaComprovanteNaoFiscalVinculado(alwaysVariables.ModeloEcf, "            Nao Houve Recarga Celular           ", ref fiscal_MSG, ref fiscal_retorno, alwaysVariables.ECF_Ligada);
                                functionECF.conectorECF_UsaComprovanteNaoFiscalVinculado(alwaysVariables.ModeloEcf, "================================================", ref fiscal_MSG, ref fiscal_retorno, alwaysVariables.ECF_Ligada);
                                functionECF.conectorECF_UsaComprovanteNaoFiscalVinculado(alwaysVariables.ModeloEcf, "TOTAL + SANGRIA : R$ " + "0,00", ref fiscal_MSG, ref fiscal_retorno, alwaysVariables.ECF_Ligada);
                                functionECF.conectorECF_UsaComprovanteNaoFiscalVinculado(alwaysVariables.ModeloEcf, "TOTAL VENDA     : R$ " + flagLiquido, ref fiscal_MSG, ref fiscal_retorno, alwaysVariables.ECF_Ligada);

                                /*fiscal_retorno = conectorECF.Bematech_FI_UsaComprovanteNaoFiscalVinculado("OPERADOR  : " + input_operador + "LOJA - " + alwaysVariables.Store);
                                fiscal_retorno = conectorECF.Bematech_FI_UsaComprovanteNaoFiscalVinculado("SEQUENCIA OPERADOR  : " + banco_sequencia);
                                fiscal_retorno = conectorECF.Bematech_FI_UsaComprovanteNaoFiscalVinculado("SUPERVISOR: " + input_operador + "LOJA - " + alwaysVariables.Store);
                                fiscal_retorno = conectorECF.Bematech_FI_UsaComprovanteNaoFiscalVinculado("------------------------------------------------");
                                fiscal_retorno = conectorECF.Bematech_FI_UsaComprovanteNaoFiscalVinculado("V A L O R E S -  P O R - F I N A L I Z A D O R A ");
                                fiscal_retorno = conectorECF.Bematech_FI_UsaComprovanteNaoFiscalVinculado("------------------------------------------------");
                                fiscal_retorno = conectorECF.Bematech_FI_UsaComprovanteNaoFiscalVinculado("Finalizadora           Valor           Qtd.     ");
                                conectorPDV_find_fechamentoOp("1");
                                fiscal_retorno = conectorECF.Bematech_FI_UsaComprovanteNaoFiscalVinculado("================================================");
                                //PREENCHER COM RESULTADO DE RETORNO DO BANCO - FINALIZADORAS
                                conectorPDV_find_fechamentoOp("2");
                                fiscal_retorno = conectorECF.Bematech_FI_UsaComprovanteNaoFiscalVinculado("Valor Tot. Liquido      R$  " + flagLiquido);
                                fiscal_retorno = conectorECF.Bematech_FI_UsaComprovanteNaoFiscalVinculado("Valor Troco Cedido      R$  " + "0,00");
                                fiscal_retorno = conectorECF.Bematech_FI_UsaComprovanteNaoFiscalVinculado("Valor Vale Cedido       R$  " + flagVale);
                                fiscal_retorno = conectorECF.Bematech_FI_UsaComprovanteNaoFiscalVinculado("Valor Sangria           R$  " + flagSangria);
                                fiscal_retorno = conectorECF.Bematech_FI_UsaComprovanteNaoFiscalVinculado("Valor Devoluções        R$  " + flagDevolucao);
                                fiscal_retorno = conectorECF.Bematech_FI_UsaComprovanteNaoFiscalVinculado("Valor Fundo-Caixa       R$  " + flagFundo_Caixa);
                                fiscal_retorno = conectorECF.Bematech_FI_UsaComprovanteNaoFiscalVinculado("Valor Total Doação      R$  " + flagDoacao);
                                fiscal_retorno = conectorECF.Bematech_FI_UsaComprovanteNaoFiscalVinculado("Valor Saque Sitef       R$  " + "0,00");
                                fiscal_retorno = conectorECF.Bematech_FI_UsaComprovanteNaoFiscalVinculado("Valor Total Cancelados  R$  " + flagCanceladoFechamento);
                                fiscal_retorno = conectorECF.Bematech_FI_UsaComprovanteNaoFiscalVinculado("Valor Total Descontos   R$  " + flagDesconto);
                                fiscal_retorno = conectorECF.Bematech_FI_UsaComprovanteNaoFiscalVinculado("Valor Juros Tributados  R$  " + "0,00"); /// Acrescimo
                                fiscal_retorno = conectorECF.Bematech_FI_UsaComprovanteNaoFiscalVinculado("Valor Não Tributados    R$  " + "0,00");
                                fiscal_retorno = conectorECF.Bematech_FI_UsaComprovanteNaoFiscalVinculado("------------------------------------------------");
                                fiscal_retorno = conectorECF.Bematech_FI_UsaComprovanteNaoFiscalVinculado("Cupom: " + fiscal_Cupom + "Hora: " + "00:00" + "\n \n");
                                fiscal_retorno = conectorECF.Bematech_FI_UsaComprovanteNaoFiscalVinculado("Envelope: " + "0000000000");
                                fiscal_retorno = conectorECF.Bematech_FI_UsaComprovanteNaoFiscalVinculado("DINHEIRO: " + "0,00");
                                fiscal_retorno = conectorECF.Bematech_FI_UsaComprovanteNaoFiscalVinculado("------------------------------------------------ \n");
                                fiscal_retorno = conectorECF.Bematech_FI_UsaComprovanteNaoFiscalVinculado("================================================ \n");
                                fiscal_retorno = conectorECF.Bematech_FI_UsaComprovanteNaoFiscalVinculado("         R E C A R G A   C E L U L A R          ");
                                fiscal_retorno = conectorECF.Bematech_FI_UsaComprovanteNaoFiscalVinculado("------------------------------------------------");
                                fiscal_retorno = conectorECF.Bematech_FI_UsaComprovanteNaoFiscalVinculado("OPERADOR  : " + input_operador + "LOJA - " + alwaysVariables.Store);
                                fiscal_retorno = conectorECF.Bematech_FI_UsaComprovanteNaoFiscalVinculado("------------------------------------------------");
                                fiscal_retorno = conectorECF.Bematech_FI_UsaComprovanteNaoFiscalVinculado("Fin   Descricao                     Valor       ");
                                fiscal_retorno = conectorECF.Bematech_FI_UsaComprovanteNaoFiscalVinculado("================================================");
                                fiscal_retorno = conectorECF.Bematech_FI_UsaComprovanteNaoFiscalVinculado("            Nao Houve Recarga Celular           ");
                                fiscal_retorno = conectorECF.Bematech_FI_UsaComprovanteNaoFiscalVinculado("================================================");
                                fiscal_retorno = conectorECF.Bematech_FI_UsaComprovanteNaoFiscalVinculado("TOTAL + SANGRIA : R$ " + "0,00");
                                fiscal_retorno = conectorECF.Bematech_FI_UsaComprovanteNaoFiscalVinculado("TOTAL VENDA     : R$ " + flagLiquido); end Nova Retirada */

                                ///functionECF.conectorECF_FechaRelatorioGerencial(alwaysVariables.ModeloEcf, ref fiscal_MSG, ref fiscal_retorno, alwaysVariables.ECF_Ligada);

                                //fiscal_retorno = conectorECF.Bematech_FI_FechaRelatorioGerencial();
                                if (fiscal_retorno == 1 && functionECF.conectorECF_Analisa_RetornoImpressora(alwaysVariables.ModeloEcf, ref ACK, ref ST1, ref ST2, ref ST3, ref fiscal_MSG))
                                {
                                    conectorPDV_inc_cupom_relatorio("RG", null);
                                    //conectorPDV_inc_cupom_relatorio("CN");
                                }
                                //##################################Relatorio Gerencial######################################################
                                lbOperadorConectorCF.Text = "0";
                                banco_operado = "0";
                                banco_sequencia = "0";
                                input_operador = null;
                                txtEntradaDadosConectorCF.Clear();
                                txtEntradaDadosConectorCF.Select();
                                resetVariableFechamento();
                                if (functionECF.conectorECF_Erros(alwaysVariables.ModeloEcf) != "")
                                {
                                    conector_retorno_ack();
                                }
                                else
                                {
                                    txtVisorMsgConectorCF.Text = "SEM OPERADOR";
                                }

                            };
                            conectorPDV_find_operador();
                        }
                        else
                        {
                            txtVisorMsgConectorCF.Text = functionECF.conectorECF_Erros(alwaysVariables.ModeloEcf);
                        }
                    }
                    else if (Convert.ToInt32(lbOperadorConectorCF.Text == "" ? "0" : lbOperadorConectorCF.Text) > 0 && fiscal_data_movimento.Trim() != "" && fiscal_data_movimento.Trim() != "000000")
                    {
                        saida_operador(lbOperadorConectorCF.Text);
                        conectorPDV_find_fechamentoOp("1");
                        lbOperadorConectorCF.Text = "0";
                        banco_operado = "0";
                        banco_nome = "DESCONHECIDO";
                        banco_sequencia = "0";
                        input_operador = null;
                        txtEntradaDadosConectorCF.Clear();
                        txtEntradaDadosConectorCF.Select();
                    }
                    else
                    {
                        txtVisorMsgConectorCF.Text = "SEM OPERADOR";
                        txtEntradaDadosConectorCF.Select();
                    }
                    txtEntradaDadosConectorCF.CausesValidation = true;
                    break;
                case 5:
                    if (Convert.ToInt32(lbOperadorConectorCF.Text == "" ? "0" : lbOperadorConectorCF.Text) == 0)
                    {
                        txtVisorMsgConectorCF.Text = "CANCELADA OPÇÃO - SANGRIA DE VALORES";
                    }
                    else
                    {
                        if (Convert.ToDouble(fiscal_data_movimento.Replace("\0", "").Trim() == "" ? "0" : fiscal_data_movimento) > 0)
                        {
                            if (sangria_finalizadora == null)
                            {
                                if (txtEntradaDadosConectorCF.Text != "")
                                {
                                    lblVisorEntradaDadosConectorCF.Text = "CONFIRMA O OPERADOR - ATUAL";
                                    sangria_finalizadora = txtEntradaDadosConectorCF.Text;
                                    txtEntradaDadosConectorCF.Text = lbOperadorConectorCF.Text;
                                    txtEntradaDadosConectorCF.Select();
                                    sangria_operador_servico = null;
                                }
                                else
                                {
                                    sangria_finalizadora = null;
                                }
                            }
                            else if (sangria_operador_servico == null)
                            {
                                if (txtEntradaDadosConectorCF.Text != "")
                                {
                                    lblVisorEntradaDadosConectorCF.Text = "CONFIRMA O OPERADOR - RETIRADA";
                                    sangria_operador_servico = txtEntradaDadosConectorCF.Text;
                                    txtEntradaDadosConectorCF.Text = sangria_operador_retirada;
                                    txtEntradaDadosConectorCF.Select();
                                    sangria_valor_servico = null;
                                }
                                else
                                {
                                    sangria_operador_servico = null;
                                }
                            }
                            else if (sangria_operador_retirada != null && sangria_valor_servico == null)
                            {
                                if (txtEntradaDadosConectorCF.Text != "")
                                {
                                    lblVisorEntradaDadosConectorCF.Text = "CONFIRME O VALOR DE TRABALHO";
                                    sangria_operador_retirada = txtEntradaDadosConectorCF.Text;
                                    txtEntradaDadosConectorCF.Select();
                                    sangria_valor_servico = "0";
                                    txtEntradaDadosConectorCF.Text = conector_verifica_totalSangria(sangria_finalizadora, sangria_operador_servico).ToString().Replace(".", ",");
                                    if (Convert.ToDecimal(txtEntradaDadosConectorCF.Text.Replace(",", ".")) < 0)
                                    {
                                        txtVisorMsgConectorCF.Text = "OPERAÇÃO CANCELADA";
                                        msgInfo msg = new msgInfo(1, "VALOR INVALIDO - OPERAÇÃO CANCELADA"); msg.ShowDialog();
                                        conector_reset_sangria();
                                        lblVisorEntradaDadosConectorCF.Text = "ENTRADA DE DADOS";
                                        txtEntradaDadosConectorCF.Clear();
                                        txtDescricaoItemConectorCF.Select();
                                        txtEntradaDadosConectorCF.CausesValidation = true;
                                        txtEntradaDadosConectorCF.Select();
                                    }
                                }
                                else
                                {
                                    sangria_operador_retirada = null;
                                }
                            }
                            else if (sangria_valor_servico == "0")
                            {
                                if (txtEntradaDadosConectorCF.Text != "")
                                {
                                    lblVisorEntradaDadosConectorCF.Text = "INFORME O VALOR A SER RETIRADO";
                                    sangria_valor_servico = txtEntradaDadosConectorCF.Text;
                                    txtEntradaDadosConectorCF.Clear();
                                    sangria_valor_retirada = null;
                                    txtEntradaDadosConectorCF.Select();
                                }
                                else
                                {
                                    sangria_valor_servico = null;
                                }
                            }
                            else if (sangria_valor_retirada == null)
                            {
                                if (txtEntradaDadosConectorCF.Text != "" && Convert.ToDecimal(txtEntradaDadosConectorCF.Text.Replace(",", ".")) > 0)
                                {
                                    if (Convert.ToDecimal(txtEntradaDadosConectorCF.Text.Replace(",", ".")) <= Convert.ToDecimal(sangria_valor_servico.Replace(",", ".")))
                                    {
                                        lblVisorEntradaDadosConectorCF.Text = "ENTRADA DE DADOS";
                                        sangria_valor_retirada = String.Format("{0:F2}", Convert.ToDecimal(txtEntradaDadosConectorCF.Text.Replace(",", "."))).Replace(".", ",");
                                        functionECF.conectorECF_Sangria(alwaysVariables.ModeloEcf, sangria_valor_retirada.Replace(".", ","), ref fiscal_MSG, ref fiscal_retorno, alwaysVariables.ECF_Ligada);//Paramentro 1 data/ Paramentro 2 data
                                        //fiscal_retorno = conectorECF.Bematech_FI_Sangria(sangria_valor_retirada.Replace(".", ","));
                                        if (fiscal_retorno == 1 && functionECF.conectorECF_Analisa_RetornoImpressora(alwaysVariables.ModeloEcf, ref ACK, ref ST1, ref ST2, ref ST3, ref fiscal_MSG))
                                        {
                                            conectorPDV_inc_cupom_relatorio("CN", null);
                                            conector_altera_sangria(banco_sequencia, fiscal_store.Replace("\0", "").Trim() == "" ? alwaysVariables.Store : fiscal_store.Replace("\0", "").Trim(), sangria_finalizadora, sangria_valor_retirada.Replace(",", "."), 1);
                                            txtEntradaDadosConectorCF.CausesValidation = true;
                                        }
                                        else
                                        {
                                            txtVisorMsgConectorCF.Text = functionECF.conectorECF_Erros(alwaysVariables.ModeloEcf);
                                        }
                                    }
                                    else
                                    {
                                        txtVisorMsgConectorCF.Text = "CANCELADA OPÇÃO - SANGRIA DE VALORES";
                                        this.lblVisorEntradaDadosConectorCF.Location = new System.Drawing.Point(284, 511);
                                        lblVisorEntradaDadosConectorCF.Text = "ENTRADA DE DADOS";
                                    }
                                    txtEntradaDadosConectorCF.Clear();
                                    txtEntradaDadosConectorCF.CausesValidation = true;
                                    txtEntradaDadosConectorCF.Select();
                                }
                                else
                                {
                                    sangria_valor_servico = null;
                                }
                            }
                        }
                        else
                        {
                            txtVisorMsgConectorCF.Text = "DIA NÃO INICIADO, DATA - " + lbDataMovimentoConectorCF.Text;
                        }

                    }

                    break;
                case 6:
                    conectorPDV_acion_menu_operacional_reducao_z();
                    break;
                case 7:// LEITURA X
                    txtVisorMsgConectorCF.Text = "EMISSÃO DE LEITURA X";
                    //fiscal_retorno = conectorECF.Bematech_FI_LeituraX();
                    functionECF.conectorECF_LeituraX(alwaysVariables.ModeloEcf, ref fiscal_MSG, ref fiscal_retorno, alwaysVariables.ECF_Ligada);
                    if (export.iniciaGeracaoFile(folderMFD + "\\Estoque", ref caminho, "Estoque") == true)
                    {
                        auxConsistencia = 0;
                        conectorPDV_geracao_estoque();
                    }
                    if (fiscal_retorno == 1)
                    {
                        conectorPDV_inc_cupom_relatorio("RG", null);
                    }
                    else
                    {
                        functionECF.conectorECF_Analisa_RetornoImpressora(alwaysVariables.ModeloEcf, ref ACK, ref ST1, ref ST2, ref ST3, ref fiscal_MSG);
                        conector_retorno_ack();
                    }
                    functionECF.conectorECF_NumeroCupom(alwaysVariables.ModeloEcf, ref fiscal_Cupom, ref fiscal_MSG, ref fiscal_retorno, alwaysVariables.ECF_Ligada);
                    //fiscal_retorno = conectorECF.Bematech_FI_NumeroCupom(ref fiscal_Cupom);
                    if (fiscal_retorno != 1)
                    {
                        functionECF.conectorECF_Analisa_RetornoImpressora(alwaysVariables.ModeloEcf, ref ACK, ref ST1, ref ST2, ref ST3, ref fiscal_MSG);
                        conector_retorno_ack();
                    }
                    else { conectorPDV_update_contador(fiscal_Cupom); }
                    call_funcao = 0;
                    txtEntradaDadosConectorCF.Clear();
                    txtEntradaDadosConectorCF.Select();
                    txtEntradaDadosConectorCF.CausesValidation = true;
                    break;
                case 8:
                    if (backgroundReprocesso.IsBusy != true)
                    {
                        // Start the asynchronous operation.
                        backgroundReprocesso.RunWorkerAsync();
                    }
                    conector_stop_thread();
                    this.DialogResult = DialogResult.OK;
                    //this.Dispose();
                    Environment.Exit(0);
                    break;
                case 30:
                    conectorPDV_acion_sintegra();//MG.001
                    break;
                case 31:
                    conectorPDV_acion_sped();//MG.001
                    break;
                default:
                    //      ProcessTabKey(true);
                    //      txtEntradaDadosConectorCF.Select();
                    break;
                case 10:
                    if (File.Exists(folderMFDGrand + "\\grandFullPDV" + ".enc"))
                    {
                        File.Delete(folderMFDGrand + "\\grandFullPDV" + ".enc");
                    }
                    else
                    {
                        if (txtEntradaDadosConectorCF.Text == String.Format("{0:MMyyyydd}", DateTime.Now))
                        {
                            if (input_find != null && input_find == String.Format("{0:MMyyyydd}", DateTime.Now))
                            {
                                fiscal_GT_Crypt = new string('\x20', 20);
                                functionECF.conectorECF_GrandeTotal_Crypt(alwaysVariables.ModeloEcf, ref fiscal_GT_Crypt, ref fiscal_MSG, ref fiscal_retorno, alwaysVariables.ECF_Ligada);
                                if (fiscal_retorno == 1)
                                {
                                    call_funcao = 0;
                                    cryptografia.conectorPDV_serie(alwaysVariables.PAF_total + "\\grandFullPDV" + ".txt", "1");
                                    txtEntradaDadosConectorCF.Clear();
                                    txtEntradaDadosConectorCF.Select();
                                    txtEntradaDadosConectorCF.CausesValidation = true;
                                    this.lblVisorEntradaDadosConectorCF.Location = new System.Drawing.Point(284, 511);
                                    txtVisorMsgConectorCF.Text = "GRANDE TOTAL - ATUALIZADO COM SUCESSO...!";
                                    lblVisorEntradaDadosConectorCF.Text = "ENTRADA DE DADOS";
                                    arquivo_crz_cro(0);
                                    conector_verifica_crz_cro(ref fiscal_banco_crz, ref fiscal_banco_cro);
                                    conector_verifica_venda_bruta(ref fiscal_banco_venda);
                                }
                            }
                            else
                            {
                                lblVisorEntradaDadosConectorCF.Text = "SENHA LIBERADA - PRESSIONE [ENTER] PARA PROSSEGUIR";
                                input_find = txtEntradaDadosConectorCF.Text;
                            }
                        }
                        else
                        {
                            txtEntradaDadosConectorCF.Text = "";
                        }
                    }
                    break;
                case 26:

                    if (txtEntradaDadosConectorCF.Text == String.Format("{0:MMyyyydd}", DateTime.Now))
                    {
                        if (input_find != null && input_find == String.Format("{0:MMyyyydd}", DateTime.Now))
                        {
                            if (fiscal_retorno == 1)
                            {
                                if (File.Exists(folderMFDGrand + "\\MD5" + ".enc"))
                                {//corrompido 
                                    File.Delete(folderMFDGrand + "\\MD5" + ".enc");
                                }
                                //rever flavio conector_update_lineMD5_r01_fiscal(fiscal_numero_serie, conectorPDV_PAFECF_indicador("R01", "0000-00-00", "0000-00-00", alwaysVariables.Store, fiscal_numero_serie, "0"));
                                conector_update_lineMD5_r01_fiscal(fiscal_numero_serie, conectorPDV_PAFECF_indicador("R01", String.Format("{0:yyyyMMdd}", DateTime.Now), alwaysVariables.Store, fiscal_numero_serie, alwaysVariables.Terminal, "0")); //Retirar teste
                                call_funcao = 0;
                                if (cryptografia.conectorPDV_aut_serial() == false)
                                {
                                    msgInfo msg = new msgInfo(1, "Caro Cliente - " + "ERRO DE LEITURA ARQUIVO NÃO ENCONTRADO! UM NOVO ARQUIVO SERÁ GERADO...!"); msg.ShowDialog();
                                    txtEntradaDadosConectorCF.Clear();
                                    txtEntradaDadosConectorCF.Select();
                                    txtEntradaDadosConectorCF.CausesValidation = true;
                                    this.lblVisorEntradaDadosConectorCF.Location = new System.Drawing.Point(284, 511);
                                    txtVisorMsgConectorCF.Text = "ERRO DE LEITURA...!";
                                    lblVisorEntradaDadosConectorCF.Text = "ENTRADA DE DADOS";
                                }
                                else
                                {
                                    txtEntradaDadosConectorCF.Clear();
                                    txtEntradaDadosConectorCF.Select();
                                    txtEntradaDadosConectorCF.CausesValidation = true;
                                    this.lblVisorEntradaDadosConectorCF.Location = new System.Drawing.Point(284, 511);
                                    txtVisorMsgConectorCF.Text = "SERIAL - ATUALIZADO COM SUCESSO...!";
                                    lblVisorEntradaDadosConectorCF.Text = "ENTRADA DE DADOS";
                                }
                            }
                        }
                        else
                        {
                            lblVisorEntradaDadosConectorCF.Text = "SENHA LIBERADA - PRESSIONE [ENTER] PARA PROSSEGUIR";
                            input_find = txtEntradaDadosConectorCF.Text;
                        }
                    }
                    else
                    {
                        txtEntradaDadosConectorCF.Text = "";
                    }
                    break;
                case 23:
                    if (auxConsistencia == 0)
                    {
                        if (input_tipo_down == null)
                        {
                            if (txtEntradaDadosConectorCF.Text != "")
                            {
                                lblVisorEntradaDadosConectorCF.Text = "INFORME O TITULO DO RELATORIO GERENCIAL";
                                input_tipo_down = txtEntradaDadosConectorCF.Text;
                                txtDescricaoItemConectorCF.Clear();
                                txtEntradaDadosConectorCF.Clear();
                                txtDescricaoItemConectorCF.CausesValidation = false;
                                txtDescricaoItemConectorCF.ReadOnly = false;
                                txtDescricaoItemConectorCF.Select();
                            }
                            else
                            {
                                input_tipo_down = null;
                                auxConsistencia = 0;
                            }
                        }
                        else if (input_find == null)
                        {
                            if (txtDescricaoItemConectorCF.Text != "")
                            {
                                lblVisorEntradaDadosConectorCF.Text = "[ENTER] - Confirma Relatorio";
                                input_find = txtDescricaoItemConectorCF.Text;
                                txtDescricaoItemConectorCF.Clear();
                                txtDescricaoItemConectorCF.CausesValidation = false;
                                txtEntradaDadosConectorCF.Select();
                            }
                            else
                            {
                                input_find = null;
                                auxConsistencia = 0;
                            }
                        }
                        else if (input_find != null && input_tipo_down != "" && auxConsistencia == 0)
                        {
                            txtDescricaoItemConectorCF.ReadOnly = true;
                            //Caso queira usar todos de uma so vez = Bematech_FI_NomeiaRelatoriosPAFECF();
                            //fiscal_retorno = conectorECF.Bematech_FI_NomeiaRelatorioGerencialMFD(input_tipo_down, input_find);

                            functionECF.conectorECF_NomeiaRelatorioGerencial(alwaysVariables.ModeloEcf, input_tipo_down, input_find, ref fiscal_MSG, ref fiscal_retorno, alwaysVariables.ECF_Ligada);

                            if (functionECF.conectorECF_Analisa_RetornoImpressora(alwaysVariables.ModeloEcf, ref ACK, ref ST1, ref ST2, ref ST3, ref fiscal_MSG) == false)
                            {
                                txtVisorMsgConectorCF.Text = functionECF.conectorECF_Erros(alwaysVariables.ModeloEcf);
                            }
                            conector_reset_meioPgto();
                            lblVisorEntradaDadosConectorCF.Text = "ENTRADA DE DADOS";
                            txtEntradaDadosConectorCF.Clear();
                            txtEntradaDadosConectorCF.CausesValidation = true;
                            txtEntradaDadosConectorCF.Select();
                        }
                        else
                        {
                            auxConsistencia = 0;
                        }
                    }
                    else
                    {
                        auxConsistencia = 0;
                    }
                    break;
                case 24:
                    if (auxConsistencia == 0)
                    {
                        //fiscal_retorno = conectorECF.Bematech_FI_ImprimeConfiguracoesImpressora();

                        if (txtEntradaDadosConectorCF.Text != "" && Convert.ToDecimal(txtEntradaDadosConectorCF.Text.Replace(",", ".")) > 0 && Convert.ToDecimal(txtEntradaDadosConectorCF.Text.Replace(",", ".")) < 10001)
                        {
                            //fiscal_retorno = conectorECF.Bematech_FI_Suprimento(String.Format("{0:F2}", Math.Round(Convert.ToDecimal(txtEntradaDadosConectorCF.Text.Replace(",", ".")))).Replace(".", ","), "FUNDO DE TROCO");
                            functionECF.conectorECF_Suprimento(alwaysVariables.ModeloEcf, String.Format("{0:F2}", Math.Round(Convert.ToDecimal(txtEntradaDadosConectorCF.Text.Replace(",", ".")))).Replace(".", ","), "FUNDO DE TROCO", ref fiscal_MSG, ref fiscal_retorno, alwaysVariables.ECF_Ligada);
                            if (fiscal_retorno == 1)
                            {
                                if (input_operador != "0")
                                {
                                    conectorPDV_inc_cupom_relatorio("CN", null);
                                }
                            }
                            if (functionECF.conectorECF_Analisa_RetornoImpressora(alwaysVariables.ModeloEcf, ref ACK, ref ST1, ref ST2, ref ST3, ref fiscal_MSG))
                            {
                                lblVisorEntradaDadosConectorCF.Text = "ENTRADA DE DADOS";
                                txtVisorMsgConectorCF.Text = "SUPRIMENTO - CONFIRA O COMPROVANTE";
                                txtEntradaDadosConectorCF.CausesValidation = true;
                                txtEntradaDadosConectorCF.Clear();
                                txtEntradaDadosConectorCF.Select();
                            }
                            else
                            {
                                txtVisorMsgConectorCF.Text = functionECF.conectorECF_Erros(alwaysVariables.ModeloEcf);
                                lblVisorEntradaDadosConectorCF.Text = "ENTRADA DE DADOS";
                                txtEntradaDadosConectorCF.CausesValidation = true;
                                txtEntradaDadosConectorCF.Clear();
                                txtEntradaDadosConectorCF.Select();
                            }
                        }
                        else
                        {
                            auxConsistencia = 1;
                            txtVisorMsgConectorCF.Text = "ERRO NA EMISSAO DO DOCUMENTO...!";

                        }
                    }
                    else
                    {
                        auxConsistencia = 0;
                    }
                    break;
            }
        }
        private void conectorPDV_acion_menu_operacional()
        {
            switch (call_funcao)
            {
                case 1:
                    string fiscal_data_printer_compare = new string('\x20', 6);
                    fiscal_data_printer_compare = String.Format("{0:ddMMyy}", DateTime.Now);
                    if (fiscal_data_printer != fiscal_data_printer_compare)
                    {
                        msg = new msgInfo(1, "CARO USUÁRIO: DATA DO COMPUTADOR DIFERENTE DA DATA DO ECF, O SISTEMA NÃO PODE SER INICIALIZADO."); msg.ShowDialog();
                        this.Dispose();
                        return;
                    }
                    
                    if (Convert.ToDouble(fiscal_data_movimento.Replace("\0", "").Trim() == "" ? "0" : fiscal_data_movimento) <= 0)
                    {
                        txtVisorMsgConectorCF.Text = "REALIZANDO ABERTURA DE CAIXA";
                        if (lblVisorEntradaDadosConectorCF.Text == "ENTRADA DE DADOS")
                        {
                            conector_reset_input();
                            lblVisorEntradaDadosConectorCF.Text = "CODIGO DO OPERADOR";
                            txtEntradaDadosConectorCF.CausesValidation = false;
                            txtEntradaDadosConectorCF.Clear();
                            txtEntradaDadosConectorCF.Select();
                            input_operador = null;
                        }
                    }
                    else
                    {
                        txtVisorMsgConectorCF.Text = "DIA JÁ INICIADO, DATA - " + lbDataMovimentoConectorCF.Text;
                    }
                    break;
                case 3:
                    if (Convert.ToInt32(lbOperadorConectorCF.Text == "" ? "0" : lbOperadorConectorCF.Text) == 0)
                    {
                        txtVisorMsgConectorCF.Text = "ENTRADA DE OPERADOR";
                        banco_operado = "0";
                    }
                    else
                    {
                        txtVisorMsgConectorCF.Text = "EXISTE OPERADOR EM TRABALHO NO MOMENTO";
                    }
                    break;
                case 5:
                    //fiscal_retorno = conectorECF.Bematech_FI_DataMovimento(ref fiscal_data_movimento);
                    functionECF.conectorECF_DataMovimento(alwaysVariables.ModeloEcf, ref fiscal_data_movimento, ref fiscal_MSG, ref fiscal_retorno, alwaysVariables.ECF_Ligada);

                    functionECF.conectorECF_Analisa_RetornoImpressora(alwaysVariables.ModeloEcf, ref ACK, ref ST1, ref ST2, ref ST3, ref fiscal_MSG);
                    if (Convert.ToDouble(fiscal_data_movimento.Replace("\0", "").Trim() == "" ? "0" : fiscal_data_movimento) > 0)
                    {
                        if (Convert.ToInt32(lbOperadorConectorCF.Text == "" ? "0" : lbOperadorConectorCF.Text) > 0)
                        {
                            functionECF.conectorECF_fiscal_flag(alwaysVariables.ModeloEcf, ref fiscal_flag, ref fiscal_MSG, ref fiscal_retorno, alwaysVariables.ECF_Ligada);

                            if (Convert.ToDouble(fiscal_data_movimento.Replace("\0", "").Trim() == "" ? "0" : fiscal_data_movimento) > 0 && fiscal_flag != 8)
                            {
                                if (lblVisorEntradaDadosConectorCF.Text == "ENTRADA DE DADOS")
                                {
                                    conector_reset_sangria();
                                    txtVisorMsgConectorCF.Text = "SAIDA DE VALORES - SANGRIA";
                                    this.lblVisorEntradaDadosConectorCF.Location = new System.Drawing.Point(175, 511);
                                    lblVisorEntradaDadosConectorCF.Text = "INFORME A FINALIZADORA DE SAIDA";
                                    txtEntradaDadosConectorCF.Clear();
                                    txtEntradaDadosConectorCF.Select();
                                    txtEntradaDadosConectorCF.CausesValidation = false;
                                    sangria_finalizadora = null;
                                }
                            }
                        }
                    }
                    else
                    {
                        txtVisorMsgConectorCF.Text = "ECF BLOQUEADO POR RZ";
                    }

                    break;
                case 6:
                    if (lblVisorEntradaDadosConectorCF.Text == "ENTRADA DE DADOS")
                    {
                        txtVisorMsgConectorCF.Text = "EMISSÃO DA LEITURA Z";
                        this.lblVisorEntradaDadosConectorCF.Location = new System.Drawing.Point(150, 513);//284; 511
                        lblVisorEntradaDadosConectorCF.Text = "TEM CERTEZA QUE DESEJA ENCERRAR O CAIXA!";
                        conector_reset_z();
                        txtEntradaDadosConectorCF.Clear();
                        txtEntradaDadosConectorCF.Select();
                    }
                    break;
                case 11:
                    string[] dirs = Directory.GetFiles(@"c:\conector\transmissao\", "*TRANSMISSAO*");
                    foreach (string dir in dirs)
                    {

                        if (File.Exists(dir))
                        {
                            workObject.modoPdv(true); //Para rotina loop
                            txtVisorMsgConectorCF.Text = "... RECEBENDO CARGA DE DADOS ...";
                            instrucao.preparaSql(dir);
                            instrucao.carregaSql();
                            txtVisorMsgConectorCF.Select();
                            instrucao.executaSqlBat(0);
                            //conectorPDV_gera_crypt_produto();
                            if (backgroundProdutoCrypt.IsBusy != true)
                            {
                                // Start the asynchronous operation.
                                backgroundProdutoCrypt.RunWorkerAsync();
                            }
                            workObject.modoPdv(false); //Libera rotina loop
                            //Aplicar Instrucao
                            //conectorPDV_gera_crypt_produto()
                            txtVisorMsgConectorCF.Text = "MENU CONECTORPDV";
                            txtEntradaDadosConectorCF.CausesValidation = true;
                            txtEntradaDadosConectorCF.Clear();
                            txtEntradaDadosConectorCF.Select();

                        }
                        else
                        {
                            txtVisorMsgConectorCF.Text = "... NÃO HÁ CARGA PARA SER ATUALIZADA ...";
                            txtEntradaDadosConectorCF.CausesValidation = true;
                            txtEntradaDadosConectorCF.Clear();
                            txtVisorMsgConectorCF.Select();
                        }
                    }
                    txtEntradaDadosConectorCF.Select();
                    break;
                case 10:
                    if (lblVisorEntradaDadosConectorCF.Text == "ENTRADA DE DADOS")
                    {
                        txtVisorMsgConectorCF.Text = "EMISSÃO DO NOVO GRANDE TOTAL";
                        this.lblVisorEntradaDadosConectorCF.Location = new System.Drawing.Point(150, 513);//284; 511
                        input_find = null;
                        lblVisorEntradaDadosConectorCF.Text = "INFORME A SENHA DE LIBERAÇÃO";
                        txtEntradaDadosConectorCF.CausesValidation = false;
                        txtEntradaDadosConectorCF.Clear();
                        txtEntradaDadosConectorCF.Select();
                    }
                    break;
                case 14:
                    tef.funcaoADM();
                    txtEntradaDadosConectorCF.CausesValidation = true;
                    txtEntradaDadosConectorCF.Clear();
                    txtEntradaDadosConectorCF.Select();
                    break;
                case 21:
                    if (conector_webservice_preVenda_count_expire(alwaysVariables.Store, "0", "4", "1") > 0)
                    {
                        int count = countRowsWeb;
                        txtEntradaDadosConectorCF.Text = countRowsWeb.ToString();
                        for (int i = 0; i < count; i++)
                        {
                            modoPedido = 1;
                            conector_webservice_preVenda(alwaysVariables.Store.ToString(), dsRReservaEx.Tables[0].Rows[i][0].ToString(), 1);
                        }
                    }
                    break;
                case 23:
                    if (lblVisorEntradaDadosConectorCF.Text == "ENTRADA DE DADOS")
                    {
                        txtVisorMsgConectorCF.Text = "NOMEIA RELATORIO GERENCIAL";
                        lblVisorEntradaDadosConectorCF.Text = "INFORME O NOVO INDICE GERENCIAL";
                        conector_reset_MFD();
                        auxConsistencia = 1;
                        txtEntradaDadosConectorCF.CausesValidation = false;
                        txtEntradaDadosConectorCF.Clear();
                        txtEntradaDadosConectorCF.Select();
                    }
                    break;
                case 24:
                    txtVisorMsgConectorCF.Text = "ENTRADA DE VALORES - SUPRIMENTO";
                    if (lblVisorEntradaDadosConectorCF.Text == "ENTRADA DE DADOS")
                    {
                        //this.lblVisorEntradaDadosConectorCF.Location = new System.Drawing.Point(157, 511);
                        lblVisorEntradaDadosConectorCF.Text = "INSIRA O VALOR DE ENTRADA - [ENTER]";
                        txtEntradaDadosConectorCF.Clear();
                        txtEntradaDadosConectorCF.CausesValidation = false;
                        conector_reset_MFD();
                        auxConsistencia = 1;
                    }
                    break;
                case 25:
                    conector_call_consulta();
                    break;
                case 26:
                    if (lblVisorEntradaDadosConectorCF.Text == "ENTRADA DE DADOS")
                    {
                        txtVisorMsgConectorCF.Text = "VERIFICA SERIAL";
                        this.lblVisorEntradaDadosConectorCF.Location = new System.Drawing.Point(150, 513);//284; 511
                        input_find = null;
                        lblVisorEntradaDadosConectorCF.Text = "INFORME A SENHA DE LIBERAÇÃO";
                        txtEntradaDadosConectorCF.CausesValidation = false;
                        txtEntradaDadosConectorCF.Clear();
                        txtEntradaDadosConectorCF.Select();
                    }
                    break;
                case 27:
                    conector_verifica_crz_cro(ref fiscal_banco_crz, ref fiscal_banco_cro);
                    msg = new msgInfo(1, "CARO USUÁRIO: CONTADORES RECARREGADOS PRONTO PARA ACESSAR O PDV."); msg.ShowDialog();
                    txtEntradaDadosConectorCF.Clear();
                    txtEntradaDadosConectorCF.Select();
                    break;
                case 28://Idem Item 6 menu paf-ecf


                    if (auxConsistencia == 0)
                    {
                        conectorPDV_gera_crypt_produto();

                        string[] vetor = new string[1] { "P2" };
                        string[,] recarga; //Matriz Bidimencionada
                        File.Delete("c:\\produto.txt");
                        if (File.Exists("c:\\produto.txt"))
                        {
                            StreamWriter sw = new StreamWriter("c:\\produto.txt", true, Encoding.ASCII);

                            //################################################################Instrução Banco
                            auxConsistencia = 0;
                            countField = 0;
                            countRows = 0;

                            for (int m = 0; m < vetor.Length; m++)
                            {
                                if (vetor[m] != "#")
                                {
                                    try
                                    {
                                        auxConsistencia = 0;
                                        title = banco.abreConexao();
                                        banco.startTransaction("conectorPDV_PAFECF_Tabela");
                                        banco.addParametro("varType", vetor[m]);
                                        banco.addParametro("store", alwaysVariables.Store);
                                        banco.procedimentoSet();

                                    }
                                    catch (Exception erro) { auxConsistencia = 1; }
                                    finally
                                    {
                                        if (auxConsistencia == 0)
                                        {
                                            countField = banco.retornaSet().Tables[0].Columns.Count;
                                            countRows = banco.retornaSet().Tables[0].DefaultView.Count;
                                            if (countRows > 0)
                                            {
                                                recarga = new string[countRows, countField];
                                                for (int i = 0; i < countRows; i++)//Linha
                                                {
                                                    for (int j = 0; j < countField; j++) //Coluna
                                                    {
                                                        recarga[i, j] = Convert.ToString(banco.retornaSet().Tables[0].Rows[i][j]);
                                                    }
                                                    switch (vetor[m])
                                                    {
                                                        case "P2":
                                                            sw.Write(export.registro_tipo_p2(vetor[m], recarga[i, 0], recarga[i, 1], recarga[i, 2], recarga[i, 3], recarga[i, 4], recarga[i, 5], recarga[i, 6], recarga[i, 7], recarga[i, 8]) + "\r\n");
                                                            //conector_update_lineMD5_P2(export.registro_tipo_p2(vetor[m], recarga[i, 0], recarga[i, 1], recarga[i, 2], recarga[i, 3], recarga[i, 4], recarga[i, 5], recarga[i, 6], recarga[i, 7], recarga[i, 8]), recarga[i, 1]);
                                                            break;
                                                    }
                                                }
                                                banco.fechaConexao(); if (title != "") { this.txtTitleCupomFiscalConectorCF.Invoke((MethodInvoker)delegate { txtTitleCupomFiscalConectorCF.Text = title; }); }
                                                for (int i = 0; i < recarga.GetLength(0) + 1; i++)//Linha
                                                {
                                                    conector_update_lineMD5_P2(recarga[i, 1], key.GetMd5Sum(export.registro_tipo_p2("P2", recarga[i, 0], recarga[i, 1], recarga[i, 2], recarga[i, 3], recarga[i, 4], recarga[i, 5], recarga[i, 6], recarga[i, 7], recarga[i, 8])));
                                                }
                                            }
                                        }
                                        banco.fechaConexao(); if (title != "") { this.txtTitleCupomFiscalConectorCF.Invoke((MethodInvoker)delegate { txtTitleCupomFiscalConectorCF.Text = title; }); }
                                    }
                                }
                            }
                            sw.Close();
                            lblVisorEntradaDadosConectorCF.Text = "ENTRADA DE DADOS";
                            txtVisorMsgConectorCF.Text = "ARQ. GERADO COM SUCESSO...!";
                            msgInfo msg1 = new msgInfo(1, "Caro Usuário: Arquivo gerado, caminho: " + caminho); msg1.ShowDialog();
                            txtEntradaDadosConectorCF.CausesValidation = true;
                            txtEntradaDadosConectorCF.Clear();
                            txtEntradaDadosConectorCF.Select();
                        }
                    }
                    else
                    {
                        auxConsistencia = 0;
                    }
                    txtEntradaDadosConectorCF.CausesValidation = true;
                    txtEntradaDadosConectorCF.Clear();
                    txtEntradaDadosConectorCF.Select();
                    break;
                case 29:
                    conectorPDV_gera_crypt_estoque("E2");
                    conectorPDV_gera_crypt_estoque("E3");
                    txtEntradaDadosConectorCF.CausesValidation = true;
                    txtEntradaDadosConectorCF.Clear();
                    txtEntradaDadosConectorCF.Select();
                    break;
                case 30://MG.001
                    if (lblVisorEntradaDadosConectorCF.Text == "ENTRADA DE DADOS")
                    {
                        string test = "";
                        if (lbINumeroSerieConectorCF.Text.Trim() != "" && lbINumeroSerieConectorCF.Text != "SÉRIE")
                        {
                            test = String.Format("{0:ddMMyyyyHHmmss}", Convert.ToDateTime(fiscal_last_reducao_dataMovimento.Substring(0, 2) + "/" + fiscal_last_reducao_dataMovimento.Substring(2, 2) + "/" + String.Format("{0:ddMMyyyy}", DateTime.Now).Substring(4, 2) + fiscal_data_printer.Substring(4, 2)));
                        }
                        else
                        {
                            test = String.Format("{0:ddMMyyyyHHmmss}", DateTime.Now);
                        }

                        if (export.iniciaGeracaoFile(folderMFD + "\\" + "SINTEGRA", ref caminho, "SINTEGRA" + test) == true)
                        {
                            lblVisorEntradaDadosConectorCF.Text = "RELATORIO DE VENDAS 'SINTEGRA' - [ENTER]";
                            conector_reset_MFD();
                            auxConsistencia = 1;
                        }
                        txtEntradaDadosConectorCF.Clear();
                        txtEntradaDadosConectorCF.CausesValidation = false;
                    }
                    break;
                case 31://MG.001
                    if (lblVisorEntradaDadosConectorCF.Text == "ENTRADA DE DADOS")
                    {
                        lblVisorEntradaDadosConectorCF.Text = "GERAÇÃO EFD - SPED' - [ENTER]";
                        conector_reset_sped();
                        auxConsistencia = 1;
                        txtEntradaDadosConectorCF.Clear();
                        txtEntradaDadosConectorCF.CausesValidation = false;
                    }
                    break;
                case 8:
                    conector_stop_thread();
                    Environment.Exit(1);
                    this.Dispose();
                    this.DialogResult = DialogResult.Cancel;
                    break;
                default:
                    txtEntradaDadosConectorCF.CausesValidation = true;
                    txtEntradaDadosConectorCF.Clear();
                    txtEntradaDadosConectorCF.Select();
                    break;
            }//END CASE CALL_FUNCAO
        }
        private void conectorPDV_acion_cupom()
        {
            index = txtEntradaDadosConectorCF.Text.IndexOf("*");
            //Zera Variaveil Produto
            resetVariable();

            if (txtEntradaDadosConectorCF.Text != "" && txtEntradaDadosConectorCF.Text.Length > 0)
            {
                if (txtEntradaDadosConectorCF.Text != "" && txtEntradaDadosConectorCF.Text.Length > 12)//Ean 13 
                {
                    if (txtEntradaDadosConectorCF.Text.Substring(0, 1) == "3")//Nacionalidade Brasil
                    {//3000000105597
                        System.Text.StringBuilder sbjoin1 = new System.Text.StringBuilder(txtEntradaDadosConectorCF.Text);
                        string test = ean13.extraiPrdConector(sbjoin1);
                        txtEntradaDadosConectorCF.Text = test;
                    }
                }

                if (txtEntradaDadosConectorCF.Text.Substring(txtEntradaDadosConectorCF.Text.Length - 1, 1) != "*" && txtEntradaDadosConectorCF.Text.Substring(txtEntradaDadosConectorCF.Text.Length - 1, 1) != ",")
                {
                    if (Convert.ToDouble(fiscal_data_movimento.Replace("\0", "").Trim() == "" ? "0" : fiscal_data_movimento) <= 0 || lbDataMovimentoConectorCF.Text == "00/00/0000")
                    {

                        txtVisorMsgConectorCF.Text = "DIA NÃO INICIADO...!";
                        lbQttyConectorCF.Text = "0,000";
                        lbPrecoCalculadoItensConectorCF.Text = "0,00";
                        lbPrecoUnitarioConectorCF.Text = "0,00";
                        call_pdv = 1;
                        resetLabel();
                        resetVariable();
                        txtVisorMsgConectorCF.Text = "MENU - CONECTORPDV";
                        lblVisorEntradaDadosConectorCF.Text = "ENTRADA DE DADOS";
                        txtEntradaDadosConectorCF.Clear();
                        conector_acao_carregaMenu();
                    }
                    else
                    {
                        if (pedido == "0")
                        {
                            int virgula = txtEntradaDadosConectorCF.Text.IndexOf(",");
                            int asteri = txtEntradaDadosConectorCF.Text.IndexOf("*");
                            if (txtEntradaDadosConectorCF.Text.IndexOf(",") == 1)
                            {
                                if (txtEntradaDadosConectorCF.Text.IndexOf("*") == -1)
                                {
                                    return;
                                }
                            }

                            if (virgula > -1 && asteri > -1)
                            {
                                if (virgula > asteri)
                                {
                                    return;
                                    txtVisorMsgConectorCF.Text = "OPERAÇÃO INVÁLIDA";
                                }
                            }

                            if (txtEntradaDadosConectorCF.Text != "" && double.Parse(Right(txtEntradaDadosConectorCF.Text, (txtEntradaDadosConectorCF.Text.Length - (index + 1)))) > 0)
                            {
                                if (call_funcao != 1)
                                {
                                    index = txtEntradaDadosConectorCF.Text.IndexOf("*");
                                    //if (index == -1) { resetLabel(); }
                                    resetLabel();
                                }
                                conector_produto(txtEntradaDadosConectorCF.Text = Right(txtEntradaDadosConectorCF.Text, (txtEntradaDadosConectorCF.Text.Length - (index + 1))), alwaysVariables.Store, ref registro);
                                double test = -1;
                                test = conector_last_cupom();
                                /*try
                                {
                                    if (Convert.ToDouble(fiscal_Cupom.Replace("\0", "").Trim()) > 0)
                                    {
                                        test = Convert.ToDouble(fiscal_Cupom.Replace("\0", "").Trim());
                                    }
                                    else
                                    {
                                        test = conector_last_cupom();
                                    }
                                }
                                catch (Exception)
                                {
                                    functionECF.conectorECF_NumeroCupom(alwaysVariables.ModeloEcf, ref fiscal_Cupom, ref fiscal_MSG, ref fiscal_retorno, alwaysVariables.ECF_Ligada);
                                    test = Convert.ToDouble(fiscal_Cupom.Replace("\0", "").Trim());
                                }*/

                                Boolean valida = true;
                                if (registro == 0)
                                {
                                    functionECF.conectorECF_GrandeTotal(alwaysVariables.ModeloEcf, ref fiscal_GT, ref fiscal_MSG, ref fiscal_retorno, alwaysVariables.ECF_Ligada);
                                    //fiscal_retorno = conectorECF.Bematech_FI_GrandeTotal(ref fiscal_GT);
                                    if ((fiscal_flag == 0 || fiscal_flag == 32 || fiscal_flag == 36))
                                    {
                                        if (1 == 1 || arranqueTotal == 0 || cryptografia.conectorPDV_aut_grandTotal(fiscal_GT) == true) //Flavio
                                        {
                                            txtVisorMsgConectorCF.Text = "CUPOM FISCAL - ABERTO";
                                            //functionECF.conectorECF_AbreCupom(alwaysVariables.ModeloEcf, "", ref fiscal_MSG, ref fiscal_retorno, alwaysVariables.ECF_Ligada);
                                            functionECF.conectorECF_AbreCupomMFD(alwaysVariables.ModeloEcf, "", "", "", ref fiscal_MSG, ref fiscal_retorno, alwaysVariables.ECF_Ligada);
                                            if (fiscal_retorno != 1)
                                            {
                                                msg = new msgInfo(1, "CARO USUÁRIO! ERRO ECF, ABERTURA DE CUPOM RECUSADA, VERIFIQUE O STATUS DA IMPRESSORA FISCAL...!"); msg.ShowDialog();
                                                return;   
                                            }
                                            this.backgroundConectorCupom.CancelAsync();
                                            if (backgroundConectorCupom.IsBusy != true)
                                            {
                                                // Start the asynchronous operation.
                                                backgroundConectorCupom.RunWorkerAsync(); 
                                                arranque = 0;
                                            }
                                            else
                                            {
                                                arranque = 0;
                                            }
                                            //fiscal_retorno = conectorECF.Bematech_FI_AbreCupom("");
                                            if (functionECF.conectorECF_Analisa_RetornoImpressora(alwaysVariables.ModeloEcf, ref ACK, ref ST1, ref ST2, ref ST3, ref fiscal_MSG) == true)
                                            {
                                                functionECF.conectorECF_NumeroCupom(alwaysVariables.ModeloEcf, ref fiscal_Cupom, ref fiscal_MSG, ref fiscal_retorno, alwaysVariables.ECF_Ligada);
                                                //fiscal_retorno = conectorECF.Bematech_FI_NumeroCupom(ref fiscal_Cupom);
                                                //Trecho insert novo cupom
                                                if (fiscal_Cupom.Trim() != "" && Convert.ToDouble(fiscal_Cupom.Trim()) > 0)
                                                {
                                                    txtTitleCupomFiscalConectorCF.Text = "CUPOM FISCAL.: " + fiscal_Cupom;
                                                    if (test != Convert.ToDouble(fiscal_Cupom.Replace(",", ".").Trim()))
                                                    {
                                                        if (fiscal_retorno == 1)
                                                        {
                                                            conectorPDV_inc_cupom_cabecalho(fiscal_Cupom.Replace("\0", "").Trim(), fiscal_numero_caixa.Replace("\0", "").Trim(), null, lbOperadorConectorCF.Text, null, null, null, null, null, DateTime.Now, null, 0, null, 0, null, null, null, null, null, null, null, pedido,"1");
                                                            if (auxConsistencia == 0)
                                                            {
                                                                sequenciaItem = "0".PadLeft(3, '0');
                                                            }
                                                        }
                                                        else { txtVisorMsgConectorCF.Text = fiscal_MSG; }
                                                        if (fiscal_MSG != "" && fiscal_retorno != 1)
                                                        {
                                                            txtVisorMsgConectorCF.Text = fiscal_MSG;
                                                        }
                                                        ltbDetalhesConectorCF.Clear();
                                                        ltbDetalhesConectorCF.Text = " ITEM  CÓDIGO  DESCRIÇÃO QTD  UN VL UNIT(R$) ST VL ITEM(R$)" + "\r\n" +
                                                                                     "===========================================================";
                                                        valida = true;
                                                    }
                                                    else
                                                    {

                                                        if (fiscal_retorno == 1)
                                                        {
                                                            txtVisorMsgConectorCF.Text = "CAIXA ABERTO";
                                                            msg = new msgInfo(1, "ERRO ECF VERIFIQUE...!" + "ER-"+ "11960"); msg.ShowDialog();
                                                            resetLabel();
                                                            resetVariable();
                                                            txtEntradaDadosConectorCF.Clear();
                                                            txtEntradaDadosConectorCF.Select();
                                                            valida = false;
                                                        }
                                                    }
                                                }
                                                else
                                                {
                                                    txtVisorMsgConectorCF.Text = "ERRO DE COMUNICAÇÃO";
                                                    resetLabel();
                                                    resetVariable();
                                                    txtEntradaDadosConectorCF.Clear();
                                                    txtEntradaDadosConectorCF.Select();
                                                    valida = false;
                                                    msg = new msgInfo(1, "CARO USUÁRIO! ERRO ECF, CUPOM RECUSADO, VERIFIQUE O STATUS DA IMPRESSORA FISCAL...!"); msg.ShowDialog();
                                                    return;
                                                }
                                            }
                                            else
                                            {
                                                conector_retorno_ack();
                                                txtEntradaDadosConectorCF.Clear();
                                                txtEntradaDadosConectorCF.Select();
                                                resetLabel();
                                                resetVariable();
                                                txtEntradaDadosConectorCF.Clear();
                                                txtEntradaDadosConectorCF.Select();
                                                valida = false;
                                                msg = new msgInfo(1, "CARO USUÁRIO! ERRO ECF, ABERTURA DE CUPOM RECUSADA, VERIFIQUE O STATUS DA IMPRESSORA FISCAL...!"); msg.ShowDialog();
                                                return;
                                            }
                                        }
                                        else
                                        {
                                            //valida = alwaysVariables.Gt_Valido;
                                            valida = false;
                                            msg = new msgInfo(1, "GRANDE TOTAL INVÁLIDO..!"); msg.ShowDialog();
                                            txtVisorMsgConectorCF.Text = "ITEM NÃO REGISTRADO";
                                            resetLabel();
                                            txtEntradaDadosConectorCF.Clear();
                                            txtEntradaDadosConectorCF.Select();
                                        }
                                    }
                                    else if (fiscal_flag == 33 || fiscal_flag == 1 || fiscal_flag == 36)
                                    {
                                        txtVisorMsgConectorCF.Text = "CUPOM FISCAL";
                                        valida = true;
                                    }
                                    if (Convert.ToDecimal(produto_valor_unitario.Replace(",", ".") == "" ? "0" : produto_valor_unitario.Replace(",", ".")) > 0 && valida == true)
                                    {
                                        if (produto_tipo_quantidade == "I")
                                        {
                                            produto_qtty = Math.Round(Decimal.Parse(produto_qtty), 0).ToString();
                                        }
                                        else if (produto_tipo_quantidade == "F")
                                        {
                                            if (Convert.ToDecimal(lbQttyConectorCF.Text.Replace(",", ".")) == 0)
                                            {
                                                produto_qtty = lbQttyConectorCF.Text;
                                            }
                                            else
                                            {
                                                produto_qtty = String.Format("{0:F3}", Decimal.Parse(produto_qtty.Replace(",", "."))).Replace(".", ",");
                                            }

                                        }
                                        if ((Convert.ToDecimal(produto_qtty.Replace(",", ".")) > 0 && produto_qtty != "") && functionECF.conectorECF_Analisa_RetornoImpressora(alwaysVariables.ModeloEcf, ref ACK, ref ST1, ref ST2, ref ST3, ref fiscal_MSG))
                                        {
                                            fiscal_MSG = "";
                                            //fiscal_retorno = conectorECF.Bematech_FI_UsaUnidadeMedida(produto_unidade);
                                            functionECF.conectorECF_VendeItem(alwaysVariables.ModeloEcf, produto_barra, produto_descricao, produto_tributacao_mq, produto_tipo_quantidade, produto_qtty.Replace(".", ","), 2, Math.Round(Decimal.Parse(produto_valor_unitario), 2).ToString().Replace(".", ","), "%", "0", ref fiscal_MSG, ref fiscal_retorno, alwaysVariables.ECF_Ligada);
                                            //fiscal_retorno = conectorECF.Bematech_FI_VendeItem(produto_barra, produto_descricao, produto_tributacao_mq, produto_tipo_quantidade, produto_qtty.Replace(".", ","), 2, Math.Round(Decimal.Parse(produto_valor_unitario), 2).ToString().Replace(".", ","), "%", "0");
                                            if (fiscal_retorno == -3)
                                            {
                                                msg = new msgInfo(1, "Alíquota não programada !"); msg.ShowDialog();
                                            }else if(fiscal_MSG != "")
                                            {
                                                txtVisorMsgConectorCF.Text = fiscal_MSG;
                                            }
                                            //fiscal_retorno = conectorECF.Bematech_FI_VendeItemDepartamento(produto_barra, produto_descricao, produto_tributacao_mq, Math.Round(Decimal.Parse(produto_valor_unitario), 2).ToString().Replace(".", ","), produto_qtty.Replace(".", ","),"0","0",);

                                            if (fiscal_retorno == 1 && functionECF.conectorECF_Analisa_RetornoImpressora(alwaysVariables.ModeloEcf, ref ACK, ref ST1, ref ST2, ref ST3, ref fiscal_MSG))
                                            {
                                                if (backgroundConectorGrandeTotal.IsBusy != true)
                                                {
                                                    // Start the asynchronous operation.
                                                    backgroundConectorGrandeTotal.RunWorkerAsync();
                                                }
                                                arranqueTotal = 1;
                                                /*if (File.Exists(folderMFDGrand + "\\grandFullPDV" + ".enc"))
                                                {//Atualiza Grande Total
                                                    fiscal_GT_Crypt = new string('\x20', 20);
                                                    File.Delete(folderMFDGrand + "\\grandFullPDV" + ".enc");
                                                    functionECF.conectorECF_GrandeTotal_Crypt(alwaysVariables.ModeloEcf, ref fiscal_GT_Crypt, ref fiscal_MSG, ref fiscal_retorno, alwaysVariables.ECF_Ligada);
                                                    cryptografia.conectorPDV_serie(alwaysVariables.PAF_total + "\\grandFullPDV" + ".txt", "0");
                                                    File.Delete(alwaysVariables.PAF_total + "\\grandFullPDV" + ".txt");
                                                } */
                                            }
                                            else
                                            {
                                                if (fiscal_retorno == -2)
                                                {
                                                    msg = new msgInfo(1, fiscal_MSG + " Produto rejeitado...!"); msg.ShowDialog();
                                                    return;
                                                }
                                                conector_retorno_ack();
                                                resetLabel();
                                                string fiscal_SubTotal = new string('\x20', 14);
                                                functionECF.conectorECF_SubTotal(alwaysVariables.ModeloEcf, ref fiscal_SubTotal, ref fiscal_MSG, ref fiscal_retorno, alwaysVariables.ECF_Ligada);
                                                string sub = fiscal_SubTotal.Insert(12, ".");
                                                if (fiscal_flag == 35 && sub.Trim() != "" && Convert.ToDecimal(sub) > 0)
                                                {
                                                    functionECF.conectorECF_TerminaFechamentoCupom(alwaysVariables.ModeloEcf, msgFinalCupom.Replace("\0", ""), ref fiscal_MSG, ref fiscal_retorno, alwaysVariables.ECF_Ligada);
                                                    pedido = "0";
                                                    resetLabel();
                                                    resetVariable();
                                                    ltbDetalhesConectorCF.Clear();
                                                    ltbDetalhesConectorCF.Text = " ITEM  CÓDIGO  DESCRIÇÃO QTD  UN VL UNIT(R$) ST VL ITEM(R$)" + "\r\n" +
                                                                                 "===========================================================";
                                                    rtbVisualizacaoDadosNf.Clear();
                                                    rtbVisualizacaoDadosNf.Text = " ITEM  CÓDIGO  DESCRIÇÃO QTD  UN VL UNIT(R$) ST VL ITEM(R$)" + "\r\n" +
                                                                                                                                                                         "===========================================================";
                                                }
                                                txtEntradaDadosConectorCF.Clear();
                                                txtEntradaDadosConectorCF.Select();
                                            }
                                        }
                                        else
                                        {
                                            txtVisorMsgConectorCF.Text = "QUANTIDADE INVÁLIDA...!";
                                            conector_retorno_ack();
                                        }

                                        if (fiscal_retorno == 1 && 
                                            functionECF.conectorECF_Analisa_RetornoImpressora(alwaysVariables.ModeloEcf, ref ACK, ref ST1, ref ST2, ref ST3, ref fiscal_MSG) == true)
                                        {
                                            sequenciaItem = (Int32.Parse(sequenciaItem) + 1).ToString().PadLeft(3, '0');
                                            string itens = "0";
                                            if (txtEntradaDadosConectorCF.Text == produto_barra)
                                            {
                                                itens = produto_barra;
                                            }
                                            else
                                            {
                                                itens = produto_chave;
                                            }
                                            ltbDetalhesConectorCF.Text += sequenciaItem + "    "
                                                                       + itens + "    "//produto_barra.PadLeft(12, '0') + "    "
                                                                       + produto_descricao + "    "
                                                                       + (produto_pesavel == "0" ? produto_qtty : "    ") + "    "
                                                                       + produto_unidade + "    "
                                                                       + (produto_pesavel == "0" ? produto_qtty + produto_unidade : String.Format("{0:F3}", Decimal.Parse(produto_qtty.Replace(",", ".")), 3).ToString().Replace(".", ",") + produto_unidade + " X " + produto_valor_unitario.Replace(".", ",")) + "    "
                                                                       + Math.Round(Decimal.Parse(produto_valor_unitario.Replace(",", ".")), 2).ToString().Replace(".", ",") + "      "
                                                                       + produto_tributacao + "    "
                                                                       + Math.Round((Decimal.Parse(produto_qtty.Replace(",", ".")) * Decimal.Parse(produto_valor_unitario)), 2).ToString().Replace(".", ",") + "\r\n";
                                            ltbDetalhesConectorCF.Text += "___________________________________________________________" + "\r\n";
                                            ltbDetalhesConectorCF.Select(ltbDetalhesConectorCF.Text.Length, 0);  
                                            ltbDetalhesConectorCF.ScrollToCaret();


                                            //Insert o item 'cupom detalhes'
                                            conectorPDV_inc_cupom_detalhes(fiscal_Cupom.Replace("\0", "").Trim(), fiscal_numero_caixa.Replace("\0", "").Trim(), produto_chave, produto_barra, produto_descricao, produto_qtty.Replace(".", ","), Math.Round(Decimal.Parse(produto_valor_unitario.Replace(",", ".")), 2).ToString().Replace(".", ","), "0", (Math.Round(Decimal.Parse(produto_valor_unitario.Replace(",", ".")), 2) * Math.Round(Decimal.Parse(produto_qtty.Replace(",", ".")), 3)).ToString(), lbOperadorConectorCF.Text /*rever*/, produto_tipo_quantidade, produto_unidade, "0,00", null, null, produto_tributacao, produto_price_custo.Replace(",", "."), "0.00", "0.00", "0", produto_chave, produto_trunca, produto_ippt);
                                            
                                            txtTitleCupomFiscalConectorCF.Text = "CUPOM FISCAL.: " + fiscal_Cupom;
                                            conector_find_subFull("1");
                                            //conectorPDV_inc_cupom_detalhes(fiscal_Cupom.Replace("\0", "").Trim(), fiscal_numero_caixa.Replace("\0", "").Trim(), produto_chave, produto_barra, produto_descricao, produto_qtty.Replace(".", ","), Math.Round(Decimal.Parse(produto_valor_unitario.Replace(",", ".")), 2).ToString().Replace(".", ","), "0", (Math.Round(Decimal.Parse(produto_valor_unitario.Replace(",", ".")), 2) * Math.Round(Decimal.Parse(produto_qtty.Replace(",", ".")), 3)).ToString(), lbOperadorConectorCF.Text /*rever*/, produto_tipo_quantidade, produto_unidade, "0,00", null, null, produto_tributacao, produto_price_custo.Replace(",", "."), "0.00", "0.00", "0", produto_chave, produto_trunca, produto_ippt);
                                        }
                                        else
                                        {

                                            txtVisorMsgConectorCF.Text = "ITEM NÃO REGISTRADO..!";
                                            resetLabel();
                                            txtEntradaDadosConectorCF.Clear();
                                            txtEntradaDadosConectorCF.Select();
                                        }
                                        txtEntradaDadosConectorCF.Clear();
                                    }
                                    else
                                    {
                                        if (alwaysVariables.Gt_Valido == true)
                                        {
                                            txtEntradaDadosConectorCF.Clear();
                                            if (txtVisorMsgConectorCF.Text != "--- ERRO FATAL CUPOM CANCELADO ---")
                                            {
                                                txtVisorMsgConectorCF.Text = "ITEM INVÁLIDO - PREÇO ZERADO";
                                            }
                                        }
                                        txtEntradaDadosConectorCF.Select();
                                        valida = false;
                                    }
                                }
                            }
                            else
                            {
                                //txtVisorMsgConectorCF.Text = "ITEM INVÁLIDO - PRODUTO NÃO CADASTRADO";
                                txtEntradaDadosConectorCF.Select();
                            }
                        }
                        else
                        {
                            msg = new msgInfo(1, "NEGOCIAÇÃO REALIZADA PELO VENDEDOR NÃO PODE SER MODIFICADA..!"); msg.ShowDialog();
                            txtEntradaDadosConectorCF.Clear();
                            txtEntradaDadosConectorCF.Select();
                        }
                    }
                }
                else
                {
                    txtEntradaDadosConectorCF.Clear();
                }
            }
        }
        private void conectorPDV_acion_sped()//MG.001
        {
            if (sped_di == null)
            {
                if (auxConsistencia == 0)
                {
                    try
                    {
                        sped_di = txtEntradaDadosConectorCF.Text;
                        sped_di = sped_di.Insert(2, "/");
                        sped_di = sped_di.Insert(5, "/");
                    }
                    catch (Exception)
                    {

                    }
                    txtEntradaDadosConectorCF.Clear();
                    //this.lblVisorEntradaDadosConectorCF.Location = new System.Drawing.Point(157, 511);
                    lblVisorEntradaDadosConectorCF.Text = "INFORME A DATA FINAL - ddMMyyyy";
                    txtEntradaDadosConectorCF.CausesValidation = false;
                    txtEntradaDadosConectorCF.Select();
                }
                else
                {
                    lblVisorEntradaDadosConectorCF.Text = "INFORME A DATA INICIAL - ddMMyyyy";
                    auxConsistencia = 0;
                    sped_di = null;
                }
            }
            else
                if (sped_df == null && txtEntradaDadosConectorCF.Text.Length == 8)
                {
                    if (txtEntradaDadosConectorCF.Text != "")
                    {
                        sped_df = txtEntradaDadosConectorCF.Text;
                        sped_df = sped_df.Insert(2, "/");
                        sped_df = sped_df.Insert(5, "/");
                        txtEntradaDadosConectorCF.Clear();
                        //this.lblVisorEntradaDadosConectorCF.Location = new System.Drawing.Point(157, 511);
                        lblVisorEntradaDadosConectorCF.Text = "PERFIL 'A'  OU  'B'";
                        txtEntradaDadosConectorCF.CausesValidation = false;
                        txtEntradaDadosConectorCF.Select();
                    }
                    else
                    {
                        sped_df = null;
                    }
                }
                else if (sped_df == null && txtEntradaDadosConectorCF.Text.Length == 8)
                {
                    if (txtEntradaDadosConectorCF.Text != "")
                    {
                        sped_perfil = txtEntradaDadosConectorCF.Text;
                        txtEntradaDadosConectorCF.Clear();
                        //this.lblVisorEntradaDadosConectorCF.Location = new System.Drawing.Point(157, 511);
                        lblVisorEntradaDadosConectorCF.Text = "FUNCIONARIO CONTADOR RESPONSAVEL";
                        txtEntradaDadosConectorCF.CausesValidation = false;
                        txtEntradaDadosConectorCF.Select();
                    }
                    else
                    {
                        sped_perfil = null;
                    }
                }
                else if (sped_perfil == null)
                {
                    if (txtEntradaDadosConectorCF.Text != "")
                    {
                        sped_perfil = txtEntradaDadosConectorCF.Text;
                        txtEntradaDadosConectorCF.Clear();
                        //this.lblVisorEntradaDadosConectorCF.Location = new System.Drawing.Point(157, 511);
                        lblVisorEntradaDadosConectorCF.Text = "FINALIDADE 0 - ORIGINAL || 1 - SUBSTITUTO";
                        txtEntradaDadosConectorCF.CausesValidation = false;
                        txtEntradaDadosConectorCF.Select();
                    }
                    else
                    {
                        sped_perfil = null;
                    }
                }
                else if (sped_finalidade == null)
                {
                    if (txtEntradaDadosConectorCF.Text != "")
                    {
                        sped_finalidade = txtEntradaDadosConectorCF.Text;
                        txtEntradaDadosConectorCF.Clear();
                        //this.lblVisorEntradaDadosConectorCF.Location = new System.Drawing.Point(157, 511);
                        lblVisorEntradaDadosConectorCF.Text = "ATIVIDADE 0 - INDUSTRIA || 1 - OUTROS";
                        txtEntradaDadosConectorCF.CausesValidation = false;
                        txtEntradaDadosConectorCF.Select();
                    }
                    else
                    {
                        sped_finalidade = null;
                    }
                }
                else if (sped_atividade == null)
                {
                    if (txtEntradaDadosConectorCF.Text != "")
                    {
                        sped_atividade = txtEntradaDadosConectorCF.Text;
                        txtEntradaDadosConectorCF.Clear();
                        //this.lblVisorEntradaDadosConectorCF.Location = new System.Drawing.Point(157, 511);
                        lblVisorEntradaDadosConectorCF.Text = "FUNCIONARIO CONTADOR";
                        txtEntradaDadosConectorCF.CausesValidation = false;
                        txtEntradaDadosConectorCF.Select();
                    }
                    else
                    {
                        sped_atividade = null;
                    }
                }
                else if (sped_funcionario == null)
                {
                    if (txtEntradaDadosConectorCF.Text != "")
                    {
                        sped_funcionario = txtEntradaDadosConectorCF.Text;
                        txtEntradaDadosConectorCF.Clear();
                        //this.lblVisorEntradaDadosConectorCF.Location = new System.Drawing.Point(157, 511);
                        lblVisorEntradaDadosConectorCF.Text = "[ ENTER ] - CONFIRMA GERAÇÃO EFD";
                        txtEntradaDadosConectorCF.CausesValidation = false;
                        txtEntradaDadosConectorCF.Select();
                    }
                    else
                    {
                        sped_funcionario = null;
                    }
                }
                else if (sped_perfil != null && sped_funcionario != null && sped_finalidade != null && sped_atividade != null && sped_di != null && sped_df != null)
                {
                    if (sped.iniciaSpedFiscal(folderSped, ref sped_retorno) == true)
                    {
                        if (sped_retorno != "")
                        {
                            /* Homologacaoif (sped_perfil.Replace("\n", "").Replace("\0", "").Replace("\r", "").Trim() == "B" || sped_perfil.Replace("\n", "").Replace("\0", "").Replace("\r", "").Trim() == "b")
                            {
                                //Perfil B
                                sped_vetor = new string[39] { "0000", "0001", "0005", "0100", "0190", "0200", "0205", "0990", "C001", "C100", "C170", "C190", "C320", "C321", "C400", "C405", "C420", "C425", "C490", "C990", "D001", "D990", "E001", "E100", "E110", "E116", "E990", "G001", "G990", "H001", "H010", "H990", "1001", "1010", "1990", "9001", "9900", "9990", "9999" };
                            }
                            else
                            {
                                //Perfil A
                                sped_vetor = new string[39] { "0000", "0001", "0005", "0100", "0190", "0200", "0205", "0990", "C001", "C100", "C170", "C190", "C350", "C370", "C390", "C400", "C405", "C420", "C460", "C470", "C490", "C990", "D001", "D990", "E001", "E100", "E116", "E990", "G001", "G990", "H001", "H990", "1001", "1010", "1990", "9001", "9900", "9990", "9999" };
                            }*/
                            if (sped.geraSpedFiscal(true, sped_retorno, sped_vetor, String.Format("{0:yyyyMMdd}", Convert.ToDateTime(sped_di)), String.Format("{0:yyyyMMdd}", Convert.ToDateTime(sped_df)), alwaysVariables.Store, sped_finalidade, sped_funcionario, String.Format("{0:yyyy-MM-dd}", DateTime.Now), sped_perfil, sped_atividade, 0, 0, 1, 0, 1, 0, 0, 0, 1, "01") == true)
                            {
                                string registroEAD = new string('\x20', 256);

                                functionECF.conectorECF_GenerateEAD(alwaysVariables.ModeloEcf, @"C:\conector\MFD\Download.MF", "BE011B465E262EE8FE5AC862A0EDFDC2AA61FDB4C8B14D1C86C8258835DB57B18E065EF0FA533A894C79E6A172EB52ACD81A47967263FBA133B558796B500E3B82011B6A2228A91EA04A125E16F2CE5C2E7DD13A32EE39B386F5493AA35AC248582C7309B5F75A4105045DC39C5C2696797280467457663D1D79A00B52A609EB", "E88EA74E25FAFBF91E28456B39AA0208F9A669D2214A676B9CB87E62FB5F414EFFB8213A7FDB731F8C06BE286E57FE7CB9D2AFC7CF3DA082F6E982F3C72B21F7D128564C824F3C96B3ED26BAD26534FC88646A6C9AAD43B83AF56F243D514B98FD9CF1A1C3A155F0460E8CF95E66A4F1FFC773C60405AD321C5898BE5C1B1AAD", ref registroEAD, fiscal_retorno, ref fiscal_MSG);

                                StreamWriter sw1 = new StreamWriter(sped_retorno, true, Encoding.ASCII);

                                if (registroEAD != "")
                                {
                                    sw1.Write("EAD" + registroEAD);
                                }
                                sw1.Close();
                                msgInfo msg = new msgInfo(1, "Caro Usuário: Arquivo gerado, caminho: " + sped_retorno); msg.ShowDialog();
                            }
                        }
                        else
                        {
                            msgInfo msg = new msgInfo(1, "Erro na geração do arquivo, verifique...! "); msg.ShowDialog();
                        }
                    }
                    txtEntradaDadosConectorCF.CausesValidation = true;
                    txtEntradaDadosConectorCF.Clear();
                    txtEntradaDadosConectorCF.Select();
                }
        }
        private void conectorPDV_acion_sintegra()
        {
            if (input_find == null)
            {
                if (auxConsistencia == 0)
                {
                    input_find = txtEntradaDadosConectorCF.Text;
                    txtEntradaDadosConectorCF.Clear();
                    //this.lblVisorEntradaDadosConectorCF.Location = new System.Drawing.Point(157, 511);
                    lblVisorEntradaDadosConectorCF.Text = "INFORME A DATA INICIAL - ddMMyyyy";
                    txtEntradaDadosConectorCF.CausesValidation = false;
                    txtEntradaDadosConectorCF.Select();
                }
                else
                {
                    auxConsistencia = 0;
                    input_find = null;
                }
            }
            else
                if (input_di == null && txtEntradaDadosConectorCF.Text.Length == 8)
                {
                    if (txtEntradaDadosConectorCF.Text != "")
                    {
                        input_di = txtEntradaDadosConectorCF.Text;
                        input_di = input_di.Insert(2, "/");
                        input_di = input_di.Insert(5, "/");
                        txtEntradaDadosConectorCF.Clear();
                        //this.lblVisorEntradaDadosConectorCF.Location = new System.Drawing.Point(157, 511);
                        lblVisorEntradaDadosConectorCF.Text = "INFORME A DATA FINAL - ddMMyyyy";
                        txtEntradaDadosConectorCF.CausesValidation = false;
                        txtEntradaDadosConectorCF.Select();
                    }
                    else
                    {
                        input_di = null;
                    }
                }
                else if (input_df == null && txtEntradaDadosConectorCF.Text.Length == 8)
                {
                    if (txtEntradaDadosConectorCF.Text != "")
                    {
                        try
                        {
                            input_df = txtEntradaDadosConectorCF.Text;
                            input_df = input_df.Insert(2, "/");
                            input_df = input_df.Insert(5, "/");
                        }
                        catch (Exception)
                        {

                            input_df = null;
                        }

                        txtEntradaDadosConectorCF.Clear();
                        //this.lblVisorEntradaDadosConectorCF.Location = new System.Drawing.Point(157, 511);
                        lblVisorEntradaDadosConectorCF.Text = "[ ENTER ] - CONFIRMA A GERAÇÃO DO SINTEGRA";
                        txtEntradaDadosConectorCF.CausesValidation = false;
                        txtEntradaDadosConectorCF.Select();
                        auxConsistencia = 0;
                    }
                    else
                    {
                        input_df = null;
                    }
                }
                else
                    if (auxConsistencia == 0 && input_find != null && input_di != null && input_df != null)
                    {
                        //string[] vetor = new string[50] { "10", "11", "#", "#", "#", "#", "#", "#", "60M", "60A", "60D", "60I", "60R", "61", "75", "#", "#", "90", "#", "#", "#", "#", "#", "#", "#", "#", "#", "#", "#", "#", "#", "#", "#", "#", "#", "#", "#", "#", "#", "#", "#", "#", "#", "#", "#", "#", "#", "#", "#", "#" };
                        string[] vetor = new string[50] { "10", "11", "#", "50", "#", "53", "54", "#", "60M", "60A", "60D", "60I", "60R", "61", "61R", "75", "#", "90", "#", "#", "#", "#", "#", "#", "#", "#", "#", "#", "#", "#", "#", "#", "#", "#", "#", "#", "#", "#", "#", "#", "#", "#", "#", "#", "#", "#", "#", "#", "#", "#" };

                        if (File.Exists(caminho))
                        {
                            if (caminho != "")
                            {
                                if (call.geraSintegra(true, caminho, vetor, String.Format("{0:yyyy-MM-dd}", Convert.ToDateTime(input_di)), String.Format("{0:yyyy-MM-dd}", Convert.ToDateTime(input_df)), alwaysVariables.Store, "0", fiscal_modelo, fiscal_numero_serie.Replace("\0", "").Trim(), fiscal_numero_caixa.Replace("\0", "").Trim()) == true)
                                {
                                    string registroEAD = new string('\x20', 256);
                                    //conectorECF.generateEAD(call.retorno, alwaysVariables.KeysPublica, alwaysVariables.KeysPrivate, ref registroEAD, fiscal_retorno);
                                    functionECF.conectorECF_GenerateEAD(alwaysVariables.ModeloEcf, call.retorno, alwaysVariables.KeysPublica, alwaysVariables.KeysPrivate, ref registroEAD, fiscal_retorno, ref fiscal_MSG);
                                    StreamWriter sw1 = new StreamWriter(caminho, true, Encoding.ASCII);

                                    if (registroEAD != "")
                                    {
                                        sw1.Write("EAD" + registroEAD);
                                    }
                                    sw1.Close();
                                    msgInfo msg = new msgInfo(1, "Caro Usuário: Arquivo gerado, caminho: " + caminho); msg.ShowDialog();
                                    lblVisorEntradaDadosConectorCF.Text = "ENTRADA DE DADOS";
                                    txtVisorMsgConectorCF.Text = "ARQ. GERADO COM SUCESSO...!";
                                    /**** Alt.: Flavio 'As informações devem ficar no banco de dados' if (File.Exists("C:\\conector\\MFD\\Download.MFD"))
                                    {
                                        string test = "C:\\conector\\MFD\\EFD" + String.Format("{0:ddMMyyyy-hhmmss}", DateTime.Now) + ".txt";
                                        //fiscal_retorno = conectorECF.Bematech_FI_GeraRegistrosSpedMFD("C:\\conector\\MFD\\Download.MFD", test, String.Format("{0:dd/MM/yyyy}", Convert.ToDateTime(input_di)), String.Format("{0:dd/MM/yyyy}", Convert.ToDateTime(input_df)), "T", "5102", " ", "00,00", "00,00");
                                                                    
                                        fiscal_retorno = conectorECF.Bematech_FI_GeraRegistrosSpedCompleto("C:\\conector\\MFD\\Download.MFD", test, String.Format("{0:dd/MM/yyyy}", Convert.ToDateTime(input_di)), String.Format("{0:dd/MM/yyyy}", Convert.ToDateTime(input_df)), "B", "5102", " ", "00,00", "00,00", alwaysVariables.RazaoStore, "3104007");
                                        conectorECF.Analisa_iRetorno(fiscal_retorno, ref fiscal_MSG);
                                        conectorECF.generateEAD(test, alwaysVariables.KeysPublica, alwaysVariables.KeysPrivate, ref registroEAD, fiscal_retorno);
                                        msgInfo msg0 = new msgInfo(1, "Caro Usuário: Arquivo EFD gerado, caminho: " + test); msg0.ShowDialog();
                                    }
                                    else
                                    {
                                        msgInfo msg1 = new msgInfo(1, "Caro Usuário: EFD não gerado, falta download do MFD."); msg1.ShowDialog();
                                    }*/
                                    conector_reset_MFD();
                                    txtEntradaDadosConectorCF.CausesValidation = true;
                                    txtEntradaDadosConectorCF.Clear();
                                    txtEntradaDadosConectorCF.Select();

                                }
                            }
                            else
                            {
                                msg = new msgInfo("CARO USÚARIO: Erro na geração do arquivo, verifique...!"); msg.ShowDialog();
                            }
                        }
                        else
                        {
                            msg = new msgInfo("CARO USÚARIO: Caminho inválido, verifique...!"); msg.ShowDialog();
                        }
                    }
        }
        private void conectorPDV_calc_prestacao(string typeFinalizadora, string idHistory)
        {
            flagSemaforo = 0;
            if (txtValorMontanteConectorCF.ReadOnly != true)
            {
                if (auxStatusParcela != "1")
                {
                    if (Convert.ToDecimal(txtValorMontanteConectorCF.Text) > 0)
                    {
                        auxIdFinalizadora = typeFinalizadora;
                        auxTypeHistory = idHistory;
                        //conector_alt_parcela();
                        conectorPDV_inc_historicoCrediario("BAIXA PARCELA", String.Format("{0:F2}",txtValorMontanteConectorCF.Text), flagSemaforo);
                        if (flagSemaforo == 0)
                        {
                            if (somatorio == Convert.ToDecimal(txtTotalDevidoConectorCF.Text.Replace(",",".")))
                            {
                                cmbSituacaoContratoConectorCF.Text = "1 | LIQUIDADO";
                                conectorPDV_update_parcela("1");
                                btnConfirmaConectorCF.Text = "[ F10 ] - PARCELA LIQUIDADA  [ AUTENTICA ]";
                            }
                            else
                            {
                                cmbSituacaoContratoConectorCF.Text = "2 | PARCIAL";
                                conectorPDV_update_parcela("2");
                                btnConfirmaConectorCF.Text = "[ F10 ] - CONFIRMA  [ AUTENTICA ]";
                            }
                        }
                    }
                    else
                    {
                        msgInfo msg = new msgInfo("Caro Cliente - " + "Valor nulo ou igual a ZERO pode não registrado."); msg.ShowDialog();
                    }
                }
                else
                {
                    msgInfo msg = new msgInfo("OBSERVAÇÃO - " + "Parcela liquidada, não há mais nada a fazer deseja confirma-lá [AUTENTICA].");
                    if (msg.ShowDialog(this) == DialogResult.Cancel)
                    {
                        conectorPDV_alt_parcela();
                        returnDefaultPDV();
                    }
                }
                txtValorPagoConectorCF.Select();
            }
            else if (MessageBox.Show("Total [ F2 ] não foi acionado, deseja realizar o recebimento?", "Observação", MessageBoxButtons.YesNo, MessageBoxIcon.Question) == System.Windows.Forms.DialogResult.Yes)
            {
                txtValorMontanteConectorCF.ReadOnly = false;
                txtValorMontanteConectorCF.Select();
                auxIdFinalizadora = typeFinalizadora;
                auxTypeHistory = idHistory;
            }
            else
            {
                txtValorPrestacaoConectorCF.Select();
            }
        }
        public void conectorPDV_update_status_reservaTemp(string flagPedido, string flagStore, string flagStatus, string flagFinal)
        {
                auxConsistencia = 0;
                try
                {
                    title = banco.abreConexao();
                    banco.singleTransaction("update pedido_temp set status=?flagStatus, final=?flagFinal where idPedido = ?pedido and idLoja=?loja");
                    banco.addParametro("?pedido", flagPedido);
                    banco.addParametro("?loja", flagStore);
                    banco.addParametro("?flagStatus", flagStatus);
                    banco.addParametro("?flagFinal", flagFinal);
                    banco.procedimentoRead();
                    banco.fechaRead();
                }
                catch (Exception erro)
                {
                    msgInfo msg = new msgInfo("Caro Cliente - " + erro.Message); msg.ShowDialog();
                    auxConsistencia = 1;
                }
                finally
                {
                    banco.fechaConexao(); if (title != "") { this.txtTitleCupomFiscalConectorCF.Invoke((MethodInvoker)delegate { txtTitleCupomFiscalConectorCF.Text = title; }); }
                    if (auxConsistencia == 0)
                    {
                        conector_reset_listas();
                        resetFinanceiro();
                        this.pnlTotalConectorCF.Visible = false;
                        lblVisorEntradaDadosConectorCF.Text = "ENTRADA DE DADOS";
                        reserva_number = pedido;
                        pedido = "0";
                        this.lblStatusNfce.ForeColor = System.Drawing.Color.Red;
                        lblStatusNfce.Text = "FECHADA";
                        txtTitleNFce.Clear();
                        txtDescricaoNf.Clear();
                        txtVisorNfce.Text = "CAIXA LIVRE";
                        txtSubTotalNfce.Text = "0,00";
                        vetorReservaFinanceiro = null;
                        vetorReservaFinanceiro = new string[12] { "#", "#", "#", "#", "#", "#", "#", "#", "#", "#", "#", "#" };
                        txtDescricaoNf.Enabled = true;
                        txtEntradaDadosNF.ReadOnly = true;
                        txtEntradaDadosNF.Clear();
                        txtEntradaDadosNF.Enabled = true;
                        auxIdCliente = "";
                        if (alwaysVariables.ModoOperacao == 1)
                        {
                            txtEntradaDadosConectorCF.Select();
                        }
                        else
                        {
                            txtEntradaDadosNF.Select();
                        }//Faz a saida do financeiro
                        call_pdv = 3;
                        ProcessTabKey(true);
                        call_pdv = 12;
                        call_funcao = 0;
                        sequenciaItem = "0".PadLeft(3, '0');
                        sequenciaItemAle = "0".PadLeft(3, '0');
                        last_valor_item = "";
                        last_qtty_item = "";
                        typeDescAcre = 0;
                        txtEntradaDadosNF.CausesValidation = true;
                        txtEntradaDadosNF.Select();
                        txtVisorNfce.Text = "NFC-e";
                        rtbVisualizacaoDadosNf.Clear();
                        rtbVisualizacaoDadosNf.Text = " ITEM  CÓDIGO  DESCRIÇÃO QTD  UN VL UNIT(R$) ST VL ITEM(R$)" + "\r\n" +
                                                                                                                                                 "===========================================================";
                        resetLabel();
                        resetVariable();
                        call_funcao = 0;
                        lbQttyConectorCF.Text = "0,000";
                    }
                }
        }

        private void conectorPDV_index(string index)
        {
            try
            {
                string test = "ALTER TABLE pedido_log AUTO_INCREMENT = " + index;
                auxConsistencia = 0;
                title = banco.abreConexao();
                banco.singleTransaction(test);
                if (index != "" && index != "0")
                {
                    banco.procedimentoText();
                }
            }
            catch (Exception erro)
            {
                auxConsistencia = 1;
            }
            finally
            {
                banco.fechaConexao(); if (title != "") { this.txtTitleCupomFiscalConectorCF.Invoke((MethodInvoker)delegate { txtTitleCupomFiscalConectorCF.Text = title; }); }
                if (auxConsistencia == 0)
                {
                }
            }

            try
            {
                string test = "ALTER TABLE pedido_temp AUTO_INCREMENT = " + index;
                auxConsistencia = 0;
                title = banco.abreConexao();
                banco.singleTransaction(test);
                banco.procedimentoText();
            }
            catch (Exception erro)
            {
                auxConsistencia = 1;
            }
            finally
            {
                banco.fechaConexao(); if (title != "") { this.txtTitleCupomFiscalConectorCF.Invoke((MethodInvoker)delegate { txtTitleCupomFiscalConectorCF.Text = title; }); }
                if (auxConsistencia == 0)
                {
                }
            }
        }
        private string conectorPDV_soma_a2(string finaliza)
        {
            string retorno = "0";
            try
            {
                auxConsistencia = 0;
                countField = 0;
                countRows = 0;
                title = banco.abreConexao();
                banco.startTransaction("conectorPDV_PAFECF_Movimento");
                banco.addParametro("tipo", "somaA2");
                banco.addParametro("di", String.Format("{0:yyyyMMdd}", DateTime.Now));
                banco.addParametro("df", String.Format("{0:yyyyMMdd}", DateTime.Now));
                banco.addParametro("store", alwaysVariables.Store);
                banco.addParametro("cx", fiscal_numero_serie);
                banco.addParametro("find", finaliza);
                banco.addParametro("seq", "0");
                banco.procedimentoRead();
                if (banco.retornaRead().Read() == true)
                {
                    //retorno = Math.Round(Convert.ToDecimal(banco.retornaRead().GetString(0)) * 100).ToString();
                    retorno = banco.retornaRead().GetString(0);
                }
                else
                {
                    retorno = "0";
                }

            }
            catch (Exception erro) { msgInfo msg = new msgInfo("Caro Cliente - " + erro.Message); msg.ShowDialog(); auxConsistencia = 1; }
            finally
            {
                if (auxConsistencia == 1)
                {
                    retorno = "0";
                }
                banco.fechaConexao(); if (title != "") { this.txtTitleCupomFiscalConectorCF.Invoke((MethodInvoker)delegate { txtTitleCupomFiscalConectorCF.Text = title; }); }
            }
            return retorno;
        }
        private int conector_main_PDVECF(string store, DateTime input_di, DateTime input_df, string numero_caixa, int countDate, int arq, int unico)
        {
            string[,] recarga; //Matriz Bidimencionada
            int sinal = -1;
            //conectorPDV_gera_crypt_estoque();
            string strFile = "conectorFilePAFECF" + String.Format("{0:ddMMyyyyHHmmss}", DateTime.Now) + ".txt";
            DateTime valida =  input_di.AddDays(countDate);
            DateTime valida1 = input_di.AddDays(countDate);

            if (fiscal_Cupom.Trim() == "")
            {
                fiscal_Cupom = "0";
            }
            if (lbINumeroSerieConectorCF.Text.Trim() != "" || fiscal_numero_serie != "")
            {
                strFile = folderEletronico + "\\" + alwaysVariables.Identificacao_Ecf + fiscal_numero_serie.Substring(6, 14) + String.Format("{0:ddMMyyyy}", DateTime.Now) + ".txt";
            }
            else
            {
                msgInfo msg = new msgInfo(1,"Caro Cliente - FALHA DE COMUNICAÇÃO COM ECF"); msg.ShowDialog();
                strFile = folderEletronico + "\\" + alwaysVariables.Identificacao_Ecf + fiscal_numero_serie.Substring(6, 14) + String.Format("{0:ddMMyyyy}", DateTime.Now) + ".txt";
            }

            ataque =0;

            if (arq == 0)
            {
                if (File.Exists(strFile))
                {
                    File.Delete(strFile);
                }
                file = new StreamWriter(strFile, true, Encoding.ASCII);
            }

           //file.Write(conectorPDV_PAFECF_Movimento("U1", di, df, fiscal_store, fiscal_numero_serie,fiscal_Cupom.Replace("\0","").Trim(), "0"));
            if (valida <= input_df)
            {
                int parada = 0;
                try
                {
                    parada =Convert.ToInt32(conectorPDV_U2());
                    auxConsistencia = 0;
                    countField = 0;
                    countRows = 0;
                    title = banco.abreConexao();
                    banco.startTransaction("conectorPDV_PAFECF_Movimento");
                    banco.addParametro("tipo", "U1");
                    banco.addParametro("di", String.Format("{0:yyyyMMdd}", input_di));
                    banco.addParametro("df", String.Format("{0:yyyyMMdd}", input_df));
                    banco.addParametro("store", store.Replace("\0", "").Trim() == "" ? alwaysVariables.Store : store.Replace("\0", "").Trim());
                    banco.addParametro("cx", fiscal_numero_serie);
                    banco.addParametro("find", fiscal_Cupom.Replace("\0","").Trim());
                    banco.addParametro("seq", "0");
                    if (unico == 0)
                    {
                        banco.procedimentoSet();
                    }
                    else if (valida <= input_df)
                    {
                        sinal = 0;
                        auxConsistencia = 1;
                    }

                }
                catch (Exception erro) { msgInfo msg = new msgInfo("Caro Cliente - " + erro.Message); msg.ShowDialog(); auxConsistencia = 1; }
                finally
                {
                    if (auxConsistencia == 0)
                    {
                        countField = banco.retornaSet().Tables[0].Columns.Count;
                        countRows = banco.retornaSet().Tables[0].DefaultView.Count;
                        if (countRows > 0)
                        {
                            recarga = new string[countRows, countField];
                            for (int i = 0; i < countRows; i++)//Linha
                            {
                                for (int j = 0; j < countField; j++) //Coluna
                                {
                                    recarga[i, j] = Convert.ToString(banco.retornaSet().Tables[0].Rows[i][j]);
                                }
                                if (parada == 0)
                                {
                                    file.Write(export.registro_tipo_u1("U1", recarga[i, 0], recarga[i, 1], recarga[i, 2], recarga[i, 3]) + "\r\n");
                                }
                                else
                                {
                                    int count = 0;
                                    count = 50 - recarga[i, 3].Length;
                                    string[] test;
                                    test = new string[count];
                                    string prob = "";
                                    for (int f = 0; f < count; f++)
                                    {
                                        prob += test[i] + "?";
                                    }
                                    string libera = export.registro_tipo_u1("U1", recarga[i, 0], recarga[i, 1], recarga[i, 2], recarga[i, 3] + prob);
                                    file.Write(libera.Replace(" ", "?") + "\r\n");
                                }
                            }
                        }
                        else
                        {

                        }
                    }
                    banco.fechaConexao(); if (title != "") { this.txtTitleCupomFiscalConectorCF.Invoke((MethodInvoker)delegate { txtTitleCupomFiscalConectorCF.Text = title; }); }
                    if (auxConsistencia == 0)
                    {
                        sinal = 0;
                    }
                }
            }
            else
            {
                sinal = -1;
            }
           if (sinal == 0)
           {
               try
               {
                   auxConsistencia = 0;
                   countField = 0;
                   countRows = 0;
                   title = banco.abreConexao();
                   banco.startTransaction("conectorPDV_PAFECF_Movimento");
                   banco.addParametro("tipo", "A2");
                   banco.addParametro("di", String.Format("{0:yyyyMMdd}", input_di));
                   banco.addParametro("df", String.Format("{0:yyyyMMdd}", input_df));
                   banco.addParametro("store", store.Replace("\0", "").Trim() == "" ? alwaysVariables.Store : store.Replace("\0", "").Trim());
                   banco.addParametro("cx", fiscal_numero_serie);
                   banco.addParametro("find", fiscal_Cupom.Replace("\0","").Trim());
                   banco.addParametro("seq", "0");
                   banco.procedimentoSet();

               }
               catch (Exception erro) { msgInfo msg = new msgInfo("Caro Cliente - " + erro.Message); msg.ShowDialog(); auxConsistencia = 1;  }
               finally
               {
                   if (auxConsistencia == 0)
                   {
                       countField = banco.retornaSet().Tables[0].Columns.Count;
                       countRows = banco.retornaSet().Tables[0].DefaultView.Count;
                       if (countRows > 0)
                       {
                           recarga = new string[countRows, countField];
                           for (int i = 0; i < countRows; i++)//Linha
                           {
                               for (int j = 0; j < countField; j++) //Coluna
                               {
                                   recarga[i, j] = Convert.ToString(banco.retornaSet().Tables[0].Rows[i][j]);

                                   if (j == 3)
                                   {
                                       str_valida_new = key.GetMd5Sum((export.registro_tipo_a2("A2", recarga[i, 0], recarga[i, 1], recarga[i, 2], recarga[i, 3])));
                                   }
                                   else if(j==4)
                                   {
                                       str_valida_old = Convert.ToString(banco.retornaSet().Tables[0].Rows[i][j]);
                                   }
                               }
                               file.Write(export.registro_tipo_a2("A2", recarga[i, 0], recarga[i, 1], recarga[i, 2], recarga[i, 3]) + "\r\n");
                               
                               /*if (str_valida_new == str_valida_old)
                               {
                                   file.Write(export.registro_tipo_a2("A2", recarga[i, 0], recarga[i, 1], recarga[i, 2], recarga[i, 3]) + "\r\n");
                               }
                               else
                               {
                                   file.Write(export.registro_tipo_a2("A2", recarga[i, 0], recarga[i, 1].PadRight(25 - recarga[i, 2].Length, '?'), recarga[i, 2], recarga[i, 3]) + "\r\n");
                               }*/
                           }
                       }
                       else
                       {

                       }
                   }
                   banco.fechaConexao(); if (title != "") { this.txtTitleCupomFiscalConectorCF.Invoke((MethodInvoker)delegate { txtTitleCupomFiscalConectorCF.Text = title; }); }
                   if (auxConsistencia == 0)
                   {
                       sinal = 0;
                   }
                   else { sinal = 1;  }
               }
           }
           //P2
           if (sinal == 0)
           {
               try
               {
                   auxConsistencia = 0;
                   title = banco.abreConexao();
                   banco.startTransaction("conectorPDV_PAFECF_Tabela");
                   banco.addParametro("varType", "P2");
                   banco.addParametro("store", alwaysVariables.Store);
                   banco.procedimentoSet();

               }
               catch (Exception erro) { auxConsistencia = 1; }
               finally
               {
                   if (auxConsistencia == 0)
                   {
                       countField = banco.retornaSet().Tables[0].Columns.Count;
                       countRows = banco.retornaSet().Tables[0].DefaultView.Count;
                       if (countRows > 0)
                       {
                           recarga = new string[countRows, countField];
                           for (int i = 0; i < countRows; i++)//Linha
                           {
                               for (int j = 0; j < countField; j++) //Coluna
                               {
                                   recarga[i, j] = Convert.ToString(banco.retornaSet().Tables[0].Rows[i][j]);
                                   if (j <= 8)
                                   {
                                       recarga[i, j] = Convert.ToString(banco.retornaSet().Tables[0].Rows[i][j]);
                                       if (j == 8)
                                       {
                                           str_valida_new = key.GetMd5Sum(export.registro_tipo_p2("P2", recarga[i, 0], recarga[i, 1], recarga[i, 2], recarga[i, 3], recarga[i, 4], recarga[i, 5], recarga[i, 6], recarga[i, 7], recarga[i, 8]));
                                       }
                                   }
                                   else
                                   {
                                       str_valida_old = recarga[i, 9];
                                   }
                               }
                               if (str_valida_new == str_valida_old)
                               {
                                   file.Write(export.registro_tipo_p2("P2", recarga[i, 0], recarga[i, 1], recarga[i, 2], recarga[i, 3], recarga[i, 4], recarga[i, 5], recarga[i, 6], recarga[i, 7], recarga[i, 8]) + "\r\n");
                               }
                               else
                               {
                                   file.Write(export.registro_tipo_p2("P2", recarga[i, 0], recarga[i, 1], recarga[i, 2], recarga[i, 3].PadRight(6,'?'), recarga[i, 4], recarga[i, 5], recarga[i, 6], recarga[i, 7], recarga[i, 8]) + "\r\n");
                                   //file.Write(export.registro_tipo_d02("D2", fiscal_CGC, fiscal_numero_serie, fiscal_letramf_adicional, fiscal_tipo_ecf, fiscal_marca, fiscal_modelo, "?", "?", "?", "?", "?", "?", "?", "?", "?") + "\r\n");
                               }
                           }
                           /*banco.fechaConexao(); if (title != "") { this.txtTitleCupomFiscalConectorCF.Invoke((MethodInvoker)delegate { txtTitleCupomFiscalConectorCF.Text = title; }); }
                                
                           for (int w = 0; w < recarga.GetUpperBound(0); w++)//Linha
                           {   
                               conector_update_lineMD5_P2(recarga[w, 1], key.GetMd5Sum(export.registro_tipo_p2(vetor[m], recarga[w, 0], recarga[w, 1], recarga[w, 2], recarga[w, 3], recarga[w, 4], recarga[w, 5], recarga[w, 6], recarga[w, 7], recarga[w, 8])));
                           }*/
                       }
                   }
                   banco.fechaConexao(); if (title != "") { this.txtTitleCupomFiscalConectorCF.Invoke((MethodInvoker)delegate { txtTitleCupomFiscalConectorCF.Text = title; }); }
                   if (auxConsistencia == 0)
                   {
                       sinal = 0;
                   }
                   else { sinal = 1; }
               }
           }
           if (sinal == 0)
           {
               try
               {
                   auxConsistencia = 0;
                   countField = 0;
                   countRows = 0;
                   title = banco.abreConexao();
                   banco.startTransaction("conectorPDV_PAFECF_Estoque");
                   banco.addParametro("tipo", "E2");
                   banco.addParametro("store", fiscal_store.Replace("\0","").Trim());
                   banco.addParametro("ecf", fiscal_numero_serie);
                   banco.addParametro("di", String.Format("{0:yyyyMMdd}", Convert.ToDateTime(DateTime.Now)));
                   banco.procedimentoSet();

               }
               catch (Exception erro) { msgInfo msg = new msgInfo(1, "Caro Cliente - " + erro.Message); msg.ShowDialog(); auxConsistencia = 1;  }
               finally
               {
                   if (auxConsistencia == 0)
                   {
                       countField = banco.retornaSet().Tables[0].Columns.Count;
                       countRows = banco.retornaSet().Tables[0].DefaultView.Count;
                       if (countRows > 0)
                       {
                           recarga = new string[countRows, countField];
                           for (int i = 0; i < countRows; i++)//Linha
                           {
                               for (int j = 0; j < countField; j++) //Coluna
                               {
                                   recarga[i, j] = Convert.ToString(banco.retornaSet().Tables[0].Rows[i][j]);
                                   if (j == 6)
                                   {

                                       str_valida_new = key.GetMd5Sum(export.registro_tipo_e2("E2", recarga[i, 0], recarga[i, 1], recarga[i, 2], recarga[i, 3], recarga[i, 4], recarga[i, 5]));

                                   }
                                   else if(j == 7)
                                   {
                                       str_valida_old = Convert.ToString(banco.retornaSet().Tables[0].Rows[i][j]);
                                   }
                               }
                               
                               if (str_valida_new == str_valida_old )
                               {
                                   file.Write(export.registro_tipo_e2("E2", recarga[i, 0], recarga[i, 1], recarga[i, 2], recarga[i, 3], recarga[i, 4], recarga[i, 5]) + "\r\n");
                               }
                               else
                               {
                                   file.Write(export.registro_tipo_e2("E2", recarga[i, 0], recarga[i, 1], recarga[i, 2], recarga[i, 3].PadRight(6, '?'), recarga[i, 4], recarga[i, 5]) + "\r\n");
                               }
                           }
                       }
                   }
                   banco.fechaConexao(); if (title != "") { this.txtTitleCupomFiscalConectorCF.Invoke((MethodInvoker)delegate { txtTitleCupomFiscalConectorCF.Text = title; }); }
                   if (auxConsistencia == 0)
                   {
                       sinal = 0;
                   }
                   else { sinal = 1; }
               }
           }
           if (sinal == 0 && unico == 0)
           {
               try
               {
                   auxConsistencia = 0;
                   countField = 0;
                   countRows = 0;
                   title = banco.abreConexao();
                   banco.startTransaction("conectorPDV_PAFECF_Estoque");
                   banco.addParametro("tipo", "E3");
                   banco.addParametro("store", fiscal_store.Replace("\0","").Trim());
                   banco.addParametro("ecf", fiscal_numero_serie);
                   banco.addParametro("di", String.Format("{0:yyyyMMdd}", Convert.ToDateTime(input_df)));
                   if (unico == 0)
                   {
                       banco.procedimentoSet();
                   }
                   else if (valida <= input_df)
                   {
                       sinal = 0;
                   }

               }
               catch (Exception erro) { msgInfo msg = new msgInfo("Caro Cliente - " + erro.Message); msg.ShowDialog(); auxConsistencia = 1;  }
               finally
               {
                   if (auxConsistencia == 0)
                   {
                       countField = banco.retornaSet().Tables[0].Columns.Count;
                       countRows = banco.retornaSet().Tables[0].DefaultView.Count;
                       if (countRows > 0)
                       {
                           recarga = new string[countRows, countField];
                           for (int i = 0; i < countRows; i++)//Linha
                           {
                               for (int j = 0; j < countField; j++) //Coluna
                               {
                                   recarga[i, j] = Convert.ToString(banco.retornaSet().Tables[0].Rows[i][j]);
                                   if (j == 7)
                                   {
                                       str_valida_new = key.GetMd5Sum((export.registro_tipo_e3("E3", recarga[i, 1], recarga[i, 2], recarga[i, 3].Replace("\0", "").Trim(), recarga[i, 4].Trim(), recarga[i, 5].Replace("\0", "").Trim(), recarga[i, 6], recarga[i, 7])));
                                   }
                                   else if (j == 8)
                                   {
                                       str_valida_old = Convert.ToString(banco.retornaSet().Tables[0].Rows[i][j]);
                                   }
                               }
                               if (recarga[i, 0] == "0")
                               {
                                   file.Write("E3" + "\r\n");
                               }
                               else
                               {
                                   if (str_valida_old == str_valida_new)
                                   {
                                       file.Write(export.registro_tipo_e3("E3", recarga[i, 1], recarga[i, 2], recarga[i, 3].Replace("\0", "").Trim(), recarga[i, 4].Trim(), recarga[i, 5].Replace("\0", "").Trim(), recarga[i, 6], recarga[i, 7]) + "\r\n");
                                   }
                                   else
                                   {
                                       file.Write(export.registro_tipo_e3("E3", recarga[i, 1], recarga[i, 2], recarga[i, 3].Replace("\0", "").Trim(), recarga[i, 4].Trim(), recarga[i, 5].Replace("\0", "").Trim().PadRight(20, '?'), recarga[i, 6], recarga[i, 7]) + "\r\n");
                                   }
                               }
                           }
                       }
                       else
                       {
                       }
                   }
                   banco.fechaConexao(); if (title != "") { this.txtTitleCupomFiscalConectorCF.Invoke((MethodInvoker)delegate { txtTitleCupomFiscalConectorCF.Text = title; }); }
                   if (auxConsistencia == 0)
                   {
                       sinal = 0;
                   }
                   else { sinal = 1; }
               }
           }
           if (sinal == 0)
           {
               try
               {
                   
                   auxConsistencia = 0;
                   countField = 0;
                   countRows = 0;
                   title = banco.abreConexao();
                   auxConsistencia = 0;
                   banco.startTransaction("conectorPDV_PAFECF_DAV");
                   banco.addParametro("tipo", "D02");
                   banco.addParametro("di", String.Format("{0:yyyyMMdd}", input_di)); //String.Format("{0:yyyyMMdd}", Convert.ToDateTime(input_di)));
                   banco.addParametro("df", String.Format("{0:yyyyMMdd}", input_df));  //String.Format("{0:yyyyMMdd}", Convert.ToDateTime(input_di)));
                   banco.addParametro("store", store.Replace("\0","").Trim());
                   banco.addParametro("reserva", "0");
                   banco.addParametro("prod", "0");
                   banco.addParametro("seq", "0");
                   banco.procedimentoSet();
               }
               catch (Exception erro) { msgInfo msg = new msgInfo("Caro Cliente - " + erro.Message); msg.ShowDialog(); auxConsistencia = 1;  }
               finally
               {
                   if (auxConsistencia == 0)
                   {
                       countField = banco.retornaSet().Tables[0].Columns.Count;
                       countRows = banco.retornaSet().Tables[0].DefaultView.Count;
                       if (countRows > 0)
                       {
                           recarga = new string[countRows, countField];
                           for (int i = 0; i < countRows; i++)//Linha
                           {
                               for (int j = 0; j < countField; j++) //Coluna
                               {
                                   recarga[i, j] = Convert.ToString(banco.retornaSet().Tables[0].Rows[i][j]);
                                   
                                       if (j == 14)
                                       {
                                           str_valida_new = key.GetMd5Sum((export.registro_tipo_d02("D2", recarga[i, 0], recarga[i, 1], recarga[i, 2], recarga[i, 3], recarga[i, 4], recarga[i, 5], recarga[i, 6], recarga[i, 7], recarga[i, 8], recarga[i, 9], recarga[i, 10], recarga[i, 11], recarga[i, 12], recarga[i, 13], recarga[i, 14])));   
                                       }
                                       else if (j == 15)
                                       {
                                           str_valida_old = Convert.ToString(banco.retornaSet().Tables[0].Rows[i][j]);
                                       }
                               }
                               
                               if (str_valida_new == str_valida_old)
                               {
                                   file.Write(export.registro_tipo_d02("D2", recarga[i, 0], recarga[i, 1], recarga[i, 2], recarga[i, 3], recarga[i, 4], recarga[i, 5], recarga[i, 6], recarga[i, 7], recarga[i, 8], recarga[i, 9], recarga[i, 10], recarga[i, 11], recarga[i, 12], recarga[i, 13], recarga[i, 14]) + "\r\n");
                               }
                               else
                               {
                                   file.Write(export.registro_tipo_d02("D2", recarga[i, 0], recarga[i, 1], recarga[i, 2], recarga[i, 3], recarga[i, 4], recarga[i, 5].Trim().PadRight(20, '?'), recarga[i, 6], recarga[i, 7], recarga[i, 8], recarga[i, 9], recarga[i, 10], recarga[i, 11], recarga[i, 12], recarga[i, 13], recarga[i, 14]) + "\r\n");
                               }
                           }
                       }
                       else
                       {
                       }
                   }
                   banco.fechaConexao(); if (title != "") { this.txtTitleCupomFiscalConectorCF.Invoke((MethodInvoker)delegate { txtTitleCupomFiscalConectorCF.Text = title; }); }
                   if (auxConsistencia == 0)
                   {
                       sinal = 0;
                   }
                   else { sinal = 1; }
               }
           }
           if (sinal == 0)
           {
               try
               {
                   auxConsistencia = 0;
                   countField = 0;
                   countRows = 0;
                   title = banco.abreConexao();
                   auxConsistencia = 0;
                   banco.startTransaction("conectorPDV_PAFECF_DAV");
                   banco.addParametro("tipo", "D03");
                   banco.addParametro("di", String.Format("{0:yyyyMMdd}", input_di)); //String.Format("{0:yyyyMMdd}", Convert.ToDateTime(input_di)));
                   banco.addParametro("df", String.Format("{0:yyyyMMdd}", input_df));  //String.Format("{0:yyyyMMdd}", Convert.ToDateTime(input_di)));
                   banco.addParametro("store", store.Replace("\0","").Trim());
                   banco.addParametro("reserva", "0");
                   banco.addParametro("prod", "0");
                   banco.addParametro("seq", "0");
                   banco.procedimentoSet();

               }
               catch (Exception erro) { msgInfo msg = new msgInfo("Caro Cliente - " + erro.Message); msg.ShowDialog(); auxConsistencia = 1;  }
               finally
               {
                   if (auxConsistencia == 0)
                   {
                       countField = banco.retornaSet().Tables[0].Columns.Count;
                       countRows = banco.retornaSet().Tables[0].DefaultView.Count;
                       if (countRows > 0)
                       {
                           recarga = new string[countRows, countField];
                           for (int i = 0; i < countRows; i++)//Linha
                           {
                               for (int j = 0; j < countField; j++) //Coluna
                               {
                                   recarga[i, j] = Convert.ToString(banco.retornaSet().Tables[0].Rows[i][j]);
                                   if (j == 15)
                                   {
                                       str_valida_new = key.GetMd5Sum((export.registro_tipo_d03("D3", recarga[i, 0], recarga[i, 1], recarga[i, 2], recarga[i, 3], recarga[i, 4], recarga[i, 5], recarga[i, 6], recarga[i, 7], recarga[i, 8], recarga[i, 9], recarga[i, 10], recarga[i, 11], recarga[i, 12], recarga[i, 13], recarga[i, 14], recarga[i, 15])));
                                   }
                                   else if (j == 16)
                                   {
                                       str_valida_old = Convert.ToString(banco.retornaSet().Tables[0].Rows[i][j]);
                                   }
                               }
                               //file.Write(export.registro_tipo_d03("D3", recarga[i, 0], recarga[i, 1], recarga[i, 2], recarga[i, 3], recarga[i, 4], recarga[i, 5], recarga[i, 6], recarga[i, 7], recarga[i, 8], recarga[i, 9], recarga[i, 10], recarga[i, 11], recarga[i, 12], recarga[i, 13], recarga[i, 14], recarga[i, 15]) + "\r\n");
                               if (str_valida_new == str_valida_old)
                               {
                                   file.Write(export.registro_tipo_d03("D3", recarga[i, 0], recarga[i, 1], recarga[i, 2], recarga[i, 3], recarga[i, 4], recarga[i, 5], recarga[i, 6], recarga[i, 7], recarga[i, 8], recarga[i, 9], recarga[i, 10], recarga[i, 11], recarga[i, 12], recarga[i, 13], recarga[i, 14], recarga[i, 15]) + "\r\n");
                               }
                               else
                               {
                                   file.Write(export.registro_tipo_d03("D3", recarga[i, 0], recarga[i, 1], recarga[i, 2], recarga[i, 3], recarga[i, 4].Trim().PadRight(100, '?'), recarga[i, 5], recarga[i, 6], recarga[i, 7], recarga[i, 8], recarga[i, 9], recarga[i, 10], recarga[i, 11], recarga[i, 12], recarga[i, 13], recarga[i, 14], recarga[i, 15]) + "\r\n");
                               }
                           }
                       }
                       else
                       {
                       }
                   }
                   banco.fechaConexao(); if (title != "") { this.txtTitleCupomFiscalConectorCF.Invoke((MethodInvoker)delegate { txtTitleCupomFiscalConectorCF.Text = title; }); }
                   if (auxConsistencia == 0)
                   {
                       sinal = 0;
                   }
                   else { sinal = 1; }
               }
           }
            
           if (sinal == 0)
           {
               try
               {
                   auxConsistencia = 0;
                   countField = 0;
                   countRows = 0;
                   title = banco.abreConexao();
                   auxConsistencia = 0;
                   banco.startTransaction("conectorPDV_PAFECF_DAV");
                   banco.addParametro("tipo", "D04");
                   banco.addParametro("di", String.Format("{0:yyyyMMdd}", input_di)); //String.Format("{0:yyyyMMdd}", Convert.ToDateTime(input_di)));
                   banco.addParametro("df", String.Format("{0:yyyyMMdd}", input_df));  //String.Format("{0:yyyyMMdd}", Convert.ToDateTime(input_di)));
                   banco.addParametro("store", store.Replace("\0","").Trim());
                   banco.addParametro("reserva", "0");
                   banco.addParametro("prod", "0");
                   banco.addParametro("seq", "0");
                   banco.procedimentoSet();

               }
               catch (Exception erro) { msgInfo msg = new msgInfo("Caro Cliente - " + erro.Message); msg.ShowDialog(); auxConsistencia = 1;  }
               finally
               {
                   if (auxConsistencia == 0)
                   {
                       countField = banco.retornaSet().Tables[0].Columns.Count;
                       countRows = banco.retornaSet().Tables[0].DefaultView.Count;
                       if (countRows > 0)
                       {
                           recarga = new string[countRows, countField];
                           for (int i = 0; i < countRows; i++)//Linha
                           {
                               for (int j = 0; j < countField; j++) //Coluna
                               {
                                   recarga[i, j]= Convert.ToString(banco.retornaSet().Tables[0].Rows[i][j]);
                                   if (j == 16)
                                   {
                                       str_valida_new = key.GetMd5Sum((export.registro_tipo_d04("D4", recarga[i, 0], recarga[i, 1], recarga[i, 2], recarga[i, 3], recarga[i, 4], recarga[i, 5], recarga[i, 6], recarga[i, 7], recarga[i, 8], recarga[i, 9], recarga[i, 10], recarga[i, 11], recarga[i, 12], recarga[i, 13], recarga[i, 14], recarga[i, 15], recarga[i, 16])));
                                   }
                                   else if (j == 17)
                                   {
                                       str_valida_old = Convert.ToString(banco.retornaSet().Tables[0].Rows[i][j]);
                                   }
                               }
                               //file.Write(export.registro_tipo_d04("D4", recarga[i, 0], recarga[i, 1], recarga[i, 2], recarga[i, 3], recarga[i, 4], recarga[i, 5], recarga[i, 6], recarga[i, 7], recarga[i, 8], recarga[i, 9], recarga[i, 10], recarga[i, 11], recarga[i, 12], recarga[i, 13], recarga[i, 14], recarga[i, 15], recarga[i, 16]) + "\r\n");
                               if (str_valida_new == str_valida_old)
                               {
                                   file.Write(export.registro_tipo_d04("D4", recarga[i, 0], recarga[i, 1], recarga[i, 2], recarga[i, 3], recarga[i, 4], recarga[i, 5], recarga[i, 6], recarga[i, 7], recarga[i, 8], recarga[i, 9], recarga[i, 10], recarga[i, 11], recarga[i, 12], recarga[i, 13], recarga[i, 14], recarga[i, 15], recarga[i, 16]) + "\r\n");
                               }
                               else
                               {
                                   file.Write(export.registro_tipo_d04("D4", recarga[i, 0], recarga[i, 1], recarga[i, 2], recarga[i, 3], recarga[i, 4].PadRight(100,'?'), recarga[i, 5], recarga[i, 6], recarga[i, 7], recarga[i, 8], recarga[i, 9], recarga[i, 10], recarga[i, 11], recarga[i, 12], recarga[i, 13], recarga[i, 14], recarga[i, 15], recarga[i, 16]) + "\r\n");
                               }
                           }
                       }
                       else
                       {
                       }
                   }
                   banco.fechaConexao(); if (title != "") { this.txtTitleCupomFiscalConectorCF.Invoke((MethodInvoker)delegate { txtTitleCupomFiscalConectorCF.Text = title; }); }
                   if (auxConsistencia == 0)
                   {
                       sinal = 0;
                   }else{sinal = 1;}

               }
              // file.Write(export.registro_tipo_d04("D4", recarga[i, 0], recarga[i, 1], recarga[i, 2], recarga[i, 3], recarga[i, 4], recarga[i, 5], recarga[i, 6], recarga[i, 7], recarga[i, 8], recarga[i, 9], recarga[i, 10], recarga[i, 11], recarga[i, 12], recarga[i, 13], recarga[i, 14], recarga[i, 15], recarga[i, 16]) + "\r\n");
           }
           if (sinal == 0)
           {
               try
               {
                   auxConsistencia = 0;
                   countField = 0;
                   countRows = 0;
                   title = banco.abreConexao();
                   banco.startTransaction("conectorPDV_PAFECF_Movimento");
                   banco.addParametro("tipo", "H2");
                   banco.addParametro("di", String.Format("{0:yyyyMMdd}", input_di));
                   banco.addParametro("df", String.Format("{0:yyyyMMdd}", input_df));
                   banco.addParametro("store", store.Replace("\0","").Trim());
                   banco.addParametro("cx", fiscal_numero_serie);
                   banco.addParametro("find", "0");
                   banco.addParametro("seq", "0");
                   banco.procedimentoSet();   
               }
               catch (Exception erro) { msgInfo msg = new msgInfo("Caro Cliente - " + erro.Message); msg.ShowDialog(); auxConsistencia = 1;  }
               finally
               {
                   if (auxConsistencia == 0)
                   {
                       countField = banco.retornaSet().Tables[0].Columns.Count;
                       countRows = banco.retornaSet().Tables[0].DefaultView.Count;
                       if (countRows > 0)
                       {
                           recarga = new string[countRows, countField];
                           for (int i = 0; i < countRows; i++)//Linha
                           {
                               for (int j = 0; j < countField; j++) //Coluna
                               {
                                   recarga[i, j] = Convert.ToString(banco.retornaSet().Tables[0].Rows[i][j]);
                               }
                               file.Write(export.registro_tipo_h2("H2", recarga[i, 0], recarga[i, 1], recarga[i, 2], recarga[i, 3], recarga[i, 4], recarga[i, 5], recarga[i, 6], recarga[i, 7], recarga[i, 8], recarga[i, 9], recarga[i, 10], recarga[i, 11], recarga[i, 12]) + "\r\n");
                               //file.Write(export.registro_tipo_h2("H2", recarga[i, 0], recarga[i, 1], recarga[i, 2], recarga[i, 3], recarga[i, 4], recarga[i, 5], recarga[i, 6], recarga[i, 7], recarga[i, 8], recarga[i, 9], recarga[i, 10], recarga[i, 11]) + "\r\n");
                           }
                       }
                       else
                       {

                       }
                   }
                   banco.fechaConexao(); if (title != "") { this.txtTitleCupomFiscalConectorCF.Invoke((MethodInvoker)delegate { txtTitleCupomFiscalConectorCF.Text = title; }); }
                   if (auxConsistencia == 0)
                   {
                       sinal = 0;
                   }
                   else { sinal = 1; }
               }
           }
           if (sinal == 0)
           {
               try
               {
                   auxConsistencia = 0;
                   countField = 0;
                   countRows = 0;
                   title = banco.abreConexao();
                   banco.startTransaction("conectorPDV_PAFECF_Movimento");
                   banco.addParametro("tipo", "R01");
                   banco.addParametro("di", String.Format("{0:yyyyMMdd}", input_di));
                   banco.addParametro("df", String.Format("{0:yyyyMMdd}", input_df));
                   banco.addParametro("store", store.Replace("\0","").Trim());
                   banco.addParametro("cx", fiscal_numero_serie);
                   banco.addParametro("find", fiscal_Cupom.Replace("\0","").Trim());
                   banco.addParametro("seq", "0");
                   banco.procedimentoSet();

               }
               catch (Exception erro) { msgInfo msg = new msgInfo("Caro Cliente - " + erro.Message); msg.ShowDialog(); auxConsistencia = 1;  }
               finally
               {
                   if (auxConsistencia == 0)
                   {
                       countField = banco.retornaSet().Tables[0].Columns.Count;
                       countRows = banco.retornaSet().Tables[0].DefaultView.Count;
                       if (countRows > 0)
                       {
                           recarga = new string[countRows, countField];
                           for (int i = 0; i < countRows; i++)//Linha
                           {
                               for (int j = 0; j < countField; j++) //Coluna
                               {
                                   recarga[i, j] = Convert.ToString(banco.retornaSet().Tables[0].Rows[i][j]);
                                   if (j == 18)
                                   {
                                       str_valida_new = key.GetMd5Sum((export.registro_tipo_r01("R01", recarga[i, 0],
                                    recarga[i, 1],
                                    recarga[i, 2],
                                    recarga[i, 3],
                                    recarga[i, 4],
                                    recarga[i, 5],
                                    recarga[i, 6],
                                    recarga[i, 7],
                                    recarga[i, 8],
                                    recarga[i, 9],
                                    recarga[i, 10],
                                    recarga[i, 11],
                                    recarga[i, 12],
                                    recarga[i, 13],
                                    recarga[i, 14],
                                    recarga[i, 15],
                                    recarga[i, 16],
                                    recarga[i, 17], "", "", recarga[i, 18])));
                                   }
                                   else if (j == 19)
                                   {
                                       str_valida_old =  Convert.ToString(banco.retornaSet().Tables[0].Rows[i][j]);
                                   }
                               }
                               if (recarga[i, 21] == "0")
                               {
                                   file.Write(export.registro_tipo_r01("R01", recarga[i, 0],
                                       "",
                                       "",
                                       "",
                                       "",
                                       "",
                                       "",
                                       "",
                                       "",
                                       "",
                                       "",
                                       recarga[i, 11],
                                       recarga[i, 12],
                                       recarga[i, 13],
                                       recarga[i, 14],
                                       recarga[i, 15],
                                       recarga[i, 16],
                                       recarga[i, 17], "","", recarga[i, 18]) + "\r\n");
                               }
                               else
                               {
                                   if (str_valida_new == str_valida_old)
                                   {

                                       file.Write(export.registro_tipo_r01("R01", recarga[i, 0],
                                       recarga[i, 1],
                                       recarga[i, 2],
                                       recarga[i, 3],
                                       recarga[i, 4],
                                       recarga[i, 5],
                                       recarga[i, 6],
                                       recarga[i, 7],
                                       recarga[i, 8],
                                       recarga[i, 9],
                                       recarga[i, 10],
                                       recarga[i, 11],
                                       recarga[i, 12],
                                       recarga[i, 13],
                                       recarga[i, 14],
                                       recarga[i, 15],
                                       recarga[i, 16],
                                       recarga[i, 17], String.Format("{0:yyyyMMdd}", valida), String.Format("{0:yyyyMMdd}", valida1), recarga[i, 18]) + "\r\n");
                                   }
                                   else
                                   {
                                       file.Write(export.registro_tipo_r01("R01", recarga[i, 0],
                                       recarga[i, 1],
                                       recarga[i, 2],
                                       recarga[i, 3],
                                       recarga[i, 4].PadRight(20, '?'),
                                       recarga[i, 5],
                                       recarga[i, 6],
                                       recarga[i, 7],
                                       recarga[i, 8],
                                       recarga[i, 9],
                                       recarga[i, 10],
                                       recarga[i, 11],
                                       recarga[i, 12],
                                       recarga[i, 13],
                                       recarga[i, 14], recarga[i, 15], recarga[i, 16], recarga[i, 17], String.Format("{0:yyyyMMdd}", valida), String.Format("{0:yyyyMMdd}", valida1), recarga[i, 18]) + "\r\n");
                                   }
                               }
                           }
                       }
                       else
                       {

                       }
                   }
                   banco.fechaConexao(); if (title != "") { this.txtTitleCupomFiscalConectorCF.Invoke((MethodInvoker)delegate { txtTitleCupomFiscalConectorCF.Text = title; }); }
                   if (auxConsistencia == 0)
                   {
                       sinal = 0;
                   }
                   else { sinal = 1; }
               }
           }

           if (sinal == 0)
           {
               try
               {
                   auxConsistencia = 0;
                   countField = 0;
                   countRows = 0;
                   title = banco.abreConexao();
                   banco.startTransaction("conectorPDV_PAFECF_Movimento");
                   banco.addParametro("tipo", "R02");
                   banco.addParametro("di", String.Format("{0:yyyyMMdd}", input_di));
                   banco.addParametro("df", String.Format("{0:yyyyMMdd}", input_df));
                   banco.addParametro("store", store.Replace("\0","").Trim());
                   banco.addParametro("cx", fiscal_numero_caixa.Replace("\0","").Trim());
                   banco.addParametro("find", "0");
                   banco.addParametro("seq", "0");
                   banco.procedimentoSet();

               }
               catch (Exception erro) { msgInfo msg = new msgInfo("Caro Cliente - " + erro.Message); msg.ShowDialog(); auxConsistencia = 1;  }
               finally
               {
                   if (auxConsistencia == 0)
                   {
                       countField = banco.retornaSet().Tables[0].Columns.Count;
                       countRows = banco.retornaSet().Tables[0].DefaultView.Count;
                       if (countRows > 0)
                       {
                           recarga = new string[countRows, countField];
                           for (int i = 0; i < countRows; i++)//Linha
                           {
                               for (int j = 0; j < countField; j++) //Coluna
                               {
                                       recarga[i, j] = Convert.ToString(banco.retornaSet().Tables[0].Rows[i][j]);
                                       if (j == 13)
                                       {
                                           str_valida_new = key.GetMd5Sum((export.registro_tipo_r02("R02", recarga[i, 04].Replace("\0", "").Trim(), recarga[i, 05].Replace("\0", "").Trim(), recarga[i, 6].Replace("\0", "").Trim(), recarga[i, 3], recarga[i, 7], recarga[i, 8], recarga[i, 9], recarga[i, 2], recarga[i, 10], recarga[i, 11], recarga[i, 12], recarga[i, 13])));
                                                                                                   
                                       }
                                       else if (j == 14)
                                       {
                                           str_valida_old = Convert.ToString(banco.retornaSet().Tables[0].Rows[i][j]);
                                       }
                               }
                               //file.Write(export.registro_tipo_r02("R02", recarga[i, 04].Replace("\0", "").Trim(), recarga[i, 05].Replace("\0", "").Trim(), recarga[i, 6].Replace("\0", "").Trim(), recarga[i, 3], recarga[i, 7], recarga[i, 8], recarga[i, 9], recarga[i, 2], recarga[i, 10], recarga[i, 11], recarga[i, 12], recarga[i, 13]) + "\r\n");
                               if (str_valida_old == str_valida_new)
                               {
                                   file.Write(export.registro_tipo_r02("R02", recarga[i, 04].Replace("\0", "").Trim(), recarga[i, 05].Replace("\0", "").Trim(), recarga[i, 6].Replace("\0", "").Trim(), recarga[i, 3], recarga[i, 7], recarga[i, 8], recarga[i, 9], recarga[i, 2], recarga[i, 10], recarga[i, 11], recarga[i, 12], recarga[i, 13]) + "\r\n");
                               }
                               else
                               {
                                   file.Write(export.registro_tipo_r02("R02", recarga[i, 04].Replace("\0", "").Trim(), recarga[i, 05].Replace("\0", "").Trim(), recarga[i, 6].Replace("\0", "").Trim().PadRight(20, '?'), recarga[i, 3], recarga[i, 7], recarga[i, 8], recarga[i, 9], recarga[i, 2], recarga[i, 10], recarga[i, 11], recarga[i, 12], recarga[i, 13]) + "\r\n");
                               }
                           }
                       }
                       else
                       {

                       }
                   }
                   banco.fechaConexao(); if (title != "") { this.txtTitleCupomFiscalConectorCF.Invoke((MethodInvoker)delegate { txtTitleCupomFiscalConectorCF.Text = title; }); }
                   if (auxConsistencia == 0)
                   {
                       sinal = 0;
                   }
                   else { sinal = 1; }
               }
           }
           if (sinal == 0)
           {
               try
               {
                   auxConsistencia = 0;
                   countField = 0;
                   countRows = 0;
                   title = banco.abreConexao();
                   banco.startTransaction("conectorPDV_PAFECF_Movimento");
                   banco.addParametro("tipo", "R03");
                   banco.addParametro("di", String.Format("{0:yyyyMMdd}", input_di));
                   banco.addParametro("df", String.Format("{0:yyyyMMdd}", input_df));
                   banco.addParametro("store", store.Replace("\0","").Trim());
                   banco.addParametro("cx", fiscal_numero_caixa.Replace("\0","").Trim());
                   banco.addParametro("find", "0");
                   banco.addParametro("seq", "0");
                   banco.procedimentoSet();

               }
               catch (Exception erro) { msgInfo msg = new msgInfo("Caro Cliente - " + erro.Message); msg.ShowDialog(); auxConsistencia = 1;  }
               finally
               {
                   if (auxConsistencia == 0)
                   {
                       countField = banco.retornaSet().Tables[0].Columns.Count;
                       countRows = banco.retornaSet().Tables[0].DefaultView.Count;
                       if (countRows > 0)
                       {
                           recarga = new string[countRows, countField];
                           for (int i = 0; i < countRows; i++)//Linha
                           {
                               for (int j = 0; j < countField; j++) //Coluna
                               {
                                   recarga[i, j] = Convert.ToString(banco.retornaSet().Tables[0].Rows[i][j]);
                                   if (j == 6)
                                   {
                                       str_valida_new = key.GetMd5Sum((export.registro_tipo_r03("R03", recarga[i, 0].Replace("\0", "").Trim(), recarga[i, 1].Replace("\0", "").Trim(), recarga[i, 2].Replace("\0", "").Trim(), recarga[i, 3], recarga[i, 4], recarga[i, 5], recarga[i, 6])));
                                       
                                   }
                                   else if (j == 7)
                                   {
                                       str_valida_old = Convert.ToString(banco.retornaSet().Tables[0].Rows[i][j]);
                                   }
                               }
                               if (str_valida_new == str_valida_old)
                               {
                                   file.Write(export.registro_tipo_r03("R03", recarga[i, 0].Replace("\0", "").Trim(), recarga[i, 1].Replace("\0", "").Trim(), recarga[i, 2].Replace("\0", "").Trim(), recarga[i, 3], recarga[i, 4], recarga[i, 5], recarga[i, 6]) + "\r\n");
                               }
                               else
                               {
                                   file.Write(export.registro_tipo_r03("R03", recarga[i, 0].Replace("\0", "").Trim(), recarga[i, 1].Replace("\0", "").Trim(), recarga[i, 2].Replace("\0", "").Trim().PadRight(20, '?'), recarga[i, 3], recarga[i, 4], recarga[i, 5], recarga[i, 6]) + "\r\n");
                               }
                           }
                       }
                       else
                       {

                       }
                   }
                   banco.fechaConexao(); if (title != "") { this.txtTitleCupomFiscalConectorCF.Invoke((MethodInvoker)delegate { txtTitleCupomFiscalConectorCF.Text = title; }); }
                   if (auxConsistencia == 0)
                   {
                       sinal = 0;
                   }
                   else
                   {
                       sinal = 1;
                   }
               }
           }
           //file.Write(conectorPDV_PAFECF_Movimento("R04", di, df, fiscal_store, fiscal_numero_serie, fiscal_Cupom.Replace("\0","").Trim(), "0"));
           if (sinal == 0)
           {
               try
               {
                   auxConsistencia = 0;
                   countField = 0;
                   countRows = 0;
                   title = banco.abreConexao();
                   banco.startTransaction("conectorPDV_PAFECF_Movimento");
                   banco.addParametro("tipo", "R04");
                   banco.addParametro("di", String.Format("{0:yyyyMMdd}", input_di));
                   banco.addParametro("df", String.Format("{0:yyyyMMdd}", input_df));
                   banco.addParametro("store", store.Replace("\0","").Trim());
                   banco.addParametro("cx", fiscal_numero_caixa.Replace("\0","").Trim());
                   banco.addParametro("find", "0");
                   banco.addParametro("seq", "0");
                   banco.procedimentoSet();

               }
               catch (Exception erro) { msgInfo msg = new msgInfo("Caro Cliente - " + erro.Message); msg.ShowDialog(); auxConsistencia = 1;  }
               finally
               {
                   if (auxConsistencia == 0)
                   {
                       countField = banco.retornaSet().Tables[0].Columns.Count;
                       countRows = banco.retornaSet().Tables[0].DefaultView.Count;
                       if (countRows > 0)
                       {
                           recarga = new string[countRows, countField];
                           for (int i = 0; i < countRows; i++)//Linha
                           {
                               for (int j = 0; j < countField; j++) //Coluna
                               {
                                       recarga[i, j] = Convert.ToString(banco.retornaSet().Tables[0].Rows[i][j]);
                                       if (j == 17)
                                       {
                                           str_valida_new = key.GetMd5Sum((export.registro_tipo_r04("R04", recarga[i, 16].Replace("\0", "").Trim(),
                                               recarga[i, 17].Replace("\0", "").Trim(),
                                               recarga[i, 15].Replace("\0", "").Trim(),
                                               recarga[i, 14],
                                               recarga[i, 0],
                                               recarga[i, 1],
                                               recarga[i, 2],
                                               recarga[i, 3],
                                               recarga[i, 4],
                                               recarga[i, 5],
                                               recarga[i, 6],
                                               recarga[i, 7],
                                               recarga[i, 8],
                                               recarga[i, 9],
                                               recarga[i, 10],
                                               recarga[i, 11],
                                               recarga[i, 12],
                                               recarga[i, 13])));
                                       }
                                       else if (j == 18)
                                       {
                                           str_valida_old = Convert.ToString(banco.retornaSet().Tables[0].Rows[i][j]);
                                       }
                               }
                               
                               if (str_valida_old == str_valida_new)
                               {
                                   file.Write(export.registro_tipo_r04("R04", recarga[i, 16].Replace("\0", "").Trim(),
                                               recarga[i, 17].Replace("\0", "").Trim(),
                                               recarga[i, 15].Replace("\0", "").Trim(),
                                               recarga[i, 14],
                                               recarga[i, 0],
                                               recarga[i, 1],
                                               recarga[i, 2],
                                               recarga[i, 3],
                                               recarga[i, 4],
                                               recarga[i, 5],
                                               recarga[i, 6],
                                               recarga[i, 7],
                                               recarga[i, 8],
                                               recarga[i, 9],
                                               recarga[i, 10],
                                               recarga[i, 11],
                                               recarga[i, 12],
                                               recarga[i, 13]) + "\r\n");
                               }
                               else
                               {
                                   file.Write(export.registro_tipo_r04("R04", recarga[i, 16].Replace("\0", "").Trim(),
                                               recarga[i, 17].Replace("\0", "").Trim(),
                                               recarga[i, 15].Replace("\0", "").Trim().PadRight(20, '?'),
                                               recarga[i, 14],
                                               recarga[i, 0],
                                               recarga[i, 1],
                                               recarga[i, 2],
                                               recarga[i, 3],
                                               recarga[i, 4],
                                               recarga[i, 5],
                                               recarga[i, 6],
                                               recarga[i, 7],
                                               recarga[i, 8],
                                               recarga[i, 9],
                                               recarga[i, 10],
                                               recarga[i, 11],
                                               recarga[i, 12],
                                               recarga[i, 13]) + "\r\n");
                               }
                           }
                       }
                       else
                       {

                       }
                   }
                   banco.fechaConexao(); if (title != "") { this.txtTitleCupomFiscalConectorCF.Invoke((MethodInvoker)delegate { txtTitleCupomFiscalConectorCF.Text = title; }); }
                   if (auxConsistencia == 0)
                   {
                       sinal = 0;
                   }
                   else
                   {
                       sinal = 1;
                   }
               }
               
           }
           
           if (sinal == 0)
           {
               try
               {
                   auxConsistencia = 0;
                   countField = 0;
                   countRows = 0;
                   title = banco.abreConexao();
                   banco.startTransaction("conectorPDV_PAFECF_Movimento");
                   banco.addParametro("tipo", "R05");
                   banco.addParametro("di", String.Format("{0:yyyyMMdd}", input_di));
                   banco.addParametro("df", String.Format("{0:yyyyMMdd}", input_df));
                   banco.addParametro("store", store.Replace("\0","").Trim());
                   banco.addParametro("cx", fiscal_numero_caixa.Replace("\0","").Trim());
                   banco.addParametro("find", "0");
                   banco.addParametro("seq", "0");
                   banco.procedimentoSet();

               }
               catch (Exception erro) { msgInfo msg = new msgInfo("Caro Cliente - " + erro.Message); msg.ShowDialog(); auxConsistencia = 1;  }
               finally
               {
                   if (auxConsistencia == 0)
                   {
                       countField = banco.retornaSet().Tables[0].Columns.Count;
                       countRows = banco.retornaSet().Tables[0].DefaultView.Count;
                       if (countRows > 0)
                       {
                           recarga = new string[countRows, countField];
                           for (int i = 0; i < countRows; i++)//Linha
                           {
                               for (int j = 0; j < countField; j++) //Coluna
                               {
                                   recarga[i, j] = Convert.ToString(banco.retornaSet().Tables[0].Rows[i][j]);
                                   if (j == 23)
                                   {
                                       str_valida_new = key.GetMd5Sum((export.registro_tipo_r05("R05",
                                           recarga[i, 0].Replace("\0", "").Trim(),
                                           recarga[i, 1].Replace("\0", "").Trim(),
                                           recarga[i, 2].Replace("\0", "").Trim(),
                                           recarga[i, 3],
                                           recarga[i, 4],
                                           recarga[i, 5],
                                           recarga[i, 6],
                                           recarga[i, 7],
                                           recarga[i, 8],
                                           recarga[i, 9],
                                           recarga[i, 10],
                                           recarga[i, 11],
                                           recarga[i, 12],
                                           recarga[i, 13],
                                           recarga[i, 14],
                                           recarga[i, 15],
                                           recarga[i, 16],
                                           recarga[i, 17],
                                           recarga[i, 18],
                                           recarga[i, 19],
                                           recarga[i, 20], recarga[i, 21], recarga[i, 22], recarga[i, 23])));
                                   }
                                   else
                                   {
                                       str_valida_old = recarga[i, 24];
                                   }
                                   
                               }

                               if (str_valida_new == str_valida_old)
                               {
                                   file.Write(export.registro_tipo_r05("R05",
                                                   recarga[i, 0].Replace("\0", "").Trim(),
                                                   recarga[i, 1].Replace("\0", "").Trim(),
                                                   recarga[i, 2].Replace("\0", "").Trim(),
                                                   recarga[i, 3],
                                                   recarga[i, 4],
                                                   recarga[i, 5],
                                                   recarga[i, 6],
                                                   recarga[i, 7],
                                                   recarga[i, 8],
                                                   recarga[i, 9],
                                                   recarga[i, 10],
                                                   recarga[i, 11],
                                                   recarga[i, 12],
                                                   recarga[i, 13],
                                                   recarga[i, 14],
                                                   recarga[i, 15],
                                                   recarga[i, 16],
                                                   recarga[i, 17],
                                                   recarga[i, 18],
                                                   recarga[i, 19],
                                                   recarga[i, 20], recarga[i, 21], recarga[i, 22], recarga[i, 23]) + "\r\n");
                               }
                               else
                               {
                                   file.Write(export.registro_tipo_r05("R05",
                                                   recarga[i, 0].Replace("\0", "").Trim(),
                                                   recarga[i, 1].Replace("\0", "").Trim(),
                                                   recarga[i, 2].Replace("\0", "").Trim().PadRight(20, '?'),
                                                   recarga[i, 3],
                                                   recarga[i, 4],
                                                   recarga[i, 5],
                                                   recarga[i, 6],
                                                   recarga[i, 7],
                                                   recarga[i, 8],
                                                   recarga[i, 9],
                                                   recarga[i, 10],
                                                   recarga[i, 11],
                                                   recarga[i, 12],
                                                   recarga[i, 13],
                                                   recarga[i, 14],
                                                   recarga[i, 15],
                                                   recarga[i, 16],
                                                   recarga[i, 17],
                                                   recarga[i, 18],
                                                   recarga[i, 19],
                                                   recarga[i, 20], recarga[i, 21], recarga[i, 22], recarga[i, 23]) + "\r\n");
                               }
                           }
                       }
                       else
                       {

                       }
                   }
                   banco.fechaConexao(); if (title != "") { this.txtTitleCupomFiscalConectorCF.Invoke((MethodInvoker)delegate { txtTitleCupomFiscalConectorCF.Text = title; }); }
                   if (auxConsistencia == 0)
                   {
                       sinal = 0;
                   }
                   else
                   {
                       sinal = 1;
                   }
               }
           }
           if (sinal == 0)
           {
               try
               {
                   auxConsistencia = 0;
                   countField = 0;
                   countRows = 0;
                   title = banco.abreConexao();
                   banco.startTransaction("conectorPDV_PAFECF_Movimento");
                   banco.addParametro("tipo", "R06");
                   banco.addParametro("di", String.Format("{0:yyyyMMdd}", input_di));
                   banco.addParametro("df", String.Format("{0:yyyyMMdd}", input_df));
                   banco.addParametro("store", store.Replace("\0","").Trim());
                   banco.addParametro("cx", fiscal_numero_caixa.Replace("\0","").Trim());
                   banco.addParametro("find", "0");
                   banco.addParametro("seq", "0");
                   banco.procedimentoSet();

               }
               catch (Exception erro) { msgInfo msg = new msgInfo("Caro Cliente - " + erro.Message); msg.ShowDialog(); auxConsistencia = 1;  }
               finally
               {
                   if (auxConsistencia == 0)
                   {
                       countField = banco.retornaSet().Tables[0].Columns.Count;
                       countRows = banco.retornaSet().Tables[0].DefaultView.Count;
                       if (countRows > 0)
                       {
                           recarga = new string[countRows, countField];
                           for (int i = 0; i < countRows; i++)//Linha
                           {
                               for (int j = 0; j < countField; j++) //Coluna
                               {
                                   recarga[i, j] = Convert.ToString(banco.retornaSet().Tables[0].Rows[i][j]);
                                   
                                       if (j == 10)
                                       {
                                           str_valida_new = key.GetMd5Sum((export.registro_tipo_r06("R06",
                                               recarga[i, 0].Replace("\0", "").Trim(), 
                                               recarga[i, 1].Replace("\0", "").Trim(),
                                               recarga[i, 2].Replace("\0", "").Trim(), 
                                               recarga[i, 3],
                                               recarga[i, 4], 
                                               recarga[i, 5], 
                                               recarga[i, 6], 
                                               recarga[i, 7], 
                                               recarga[i, 8], 
                                               recarga[i, 9], 
                                               recarga[i, 10])));
                                       }
                                       else
                                       {
                                           str_valida_old = recarga[i, 11];
                                       }
                               }
                               
                               //file.Write(export.registro_tipo_r06("R06", fiscal_numero_serie, fiscal_letramf_adicional.Replace("\0","").Trim(), fiscal_modelo.Replace("\0","").Trim(), banco_operado, recarga[i, 0], recarga[i, 1], recarga[i, 2], recarga[i, 3], recarga[i, 4], recarga[i, 5], recarga[i, 6]) + "\r\n");
                               if (str_valida_new == str_valida_old)
                               {
                                   file.Write(export.registro_tipo_r06("R06",
                                               recarga[i, 0].Replace("\0", "").Trim(),
                                               recarga[i, 1].Replace("\0", "").Trim(),
                                               recarga[i, 2].Replace("\0", "").Trim(),
                                               recarga[i, 3],
                                               recarga[i, 4],
                                               recarga[i, 5],
                                               recarga[i, 6],
                                               recarga[i, 7],
                                               recarga[i, 8],
                                               recarga[i, 9],
                                               recarga[i, 10]) + "\r\n");
                               }
                               else
                               {
                                   file.Write(export.registro_tipo_r06("R06",
                                               recarga[i, 0].Replace("\0", "").Trim(),
                                               recarga[i, 1].Replace("\0", "").Trim(),
                                               recarga[i, 2].Replace("\0", "").Trim().PadRight(20, '?'),
                                               recarga[i, 3],
                                               recarga[i, 4],
                                               recarga[i, 5],
                                               recarga[i, 6],
                                               recarga[i, 7],
                                               recarga[i, 8],
                                               recarga[i, 9],
                                               recarga[i, 10]) + "\r\n");
                               }
                           }
                       }
                       else
                       {

                       }
                   }
                   banco.fechaConexao(); if (title != "") { this.txtTitleCupomFiscalConectorCF.Invoke((MethodInvoker)delegate { txtTitleCupomFiscalConectorCF.Text = title; }); }
               }
           }
           if (sinal == 0)
           {
               try
               {
                   auxConsistencia = 0;
                   countField = 0;
                   countRows = 0;
                   title = banco.abreConexao();
                   banco.startTransaction("conectorPDV_PAFECF_Movimento");
                   banco.addParametro("tipo", "R07");
                   banco.addParametro("di", String.Format("{0:yyyyMMdd}", input_di));
                   banco.addParametro("df", String.Format("{0:yyyyMMdd}", input_df));
                   banco.addParametro("store", store.Replace("\0","").Trim());
                   banco.addParametro("cx", fiscal_numero_serie.Replace("\0","").Trim());
                   banco.addParametro("find", "0");
                   banco.addParametro("seq", "0");
                   banco.procedimentoSet();

               }
               catch (Exception erro) { msgInfo msg = new msgInfo("Caro Cliente - " + erro.Message); msg.ShowDialog(); auxConsistencia = 1;  }
               finally
               {
                   if (auxConsistencia == 0)
                   {
                       countField = banco.retornaSet().Tables[0].Columns.Count;
                       countRows = banco.retornaSet().Tables[0].DefaultView.Count;
                       if (countRows > 0)
                       {
                           recarga = new string[countRows, countField];
                           for (int i = 0; i < countRows; i++)//Linha
                           {
                               for (int j = 0; j < countField; j++) //Coluna
                               {
                                   recarga[i, j] = Convert.ToString(banco.retornaSet().Tables[0].Rows[i][j]);
                                       if (j == 10)
                                       {
                                           str_valida_new = key.GetMd5Sum((export.registro_tipo_r07("R07",
                                               recarga[i, 0].Replace("\0", "").Trim(),
                                               recarga[i, 1].Replace("\0", "").Trim(),
                                               recarga[i, 2].Replace("\0", "").Trim(),
                                               recarga[i, 3],
                                               recarga[i, 4],
                                               recarga[i, 5],
                                               recarga[i, 6],
                                               recarga[i, 7],
                                               recarga[i, 8],
                                               recarga[i, 9],
                                               recarga[i, 10])));
                                       }
                                       else
                                       {
                                           str_valida_old = recarga[i, 11];
                                       }
                               }

                              // if (str_valida_new == str_valida_old)
                               //{
                                   file.Write(export.registro_tipo_r07("R07",
                                               recarga[i, 0].Replace("\0", "").Trim(),
                                               recarga[i, 1].Replace("\0", "").Trim(),
                                               recarga[i, 2].Replace("\0", "").Trim(),
                                               recarga[i, 3],
                                               recarga[i, 4],
                                               recarga[i, 5],
                                               recarga[i, 6],
                                               recarga[i, 7],
                                               recarga[i, 8],
                                               recarga[i, 9],
                                               recarga[i, 10]) + "\r\n");
                              /* }
                               else
                               {
                                   file.Write(export.registro_tipo_r07("R07",
                                               recarga[i, 0].Replace("\0", "").Trim(),
                                               recarga[i, 1].Replace("\0", "").Trim(),
                                               recarga[i, 2].Replace("\0", "").Trim().PadRight(20, '?'),
                                               recarga[i, 3],
                                               recarga[i, 4],
                                               recarga[i, 5],
                                               recarga[i, 6],
                                               recarga[i, 7],
                                               recarga[i, 8],
                                               recarga[i, 9],
                                               recarga[i, 10]) + "\r\n");
                               }*/
                               
                           }
                       }
                       else
                       {

                       }
                   }
                   banco.fechaConexao(); if (title != "") { this.txtTitleCupomFiscalConectorCF.Invoke((MethodInvoker)delegate { txtTitleCupomFiscalConectorCF.Text = title; }); }
                   if (auxConsistencia == 0)
                   {
                       sinal = 0;
                   }
                   else
                   {
                       sinal = 1;
                   }
               }
           }
           /*if (valida <= input_df)
           {
               countDate = countDate + 1;
               conector_main_PDVECF(fiscal_store.Replace("\0","").Trim(), input_di, input_df, fiscal_numero_serie, countDate,-1 , -1);
           }*/
            
            file.Close();

            if (File.Exists(strFile) && auxConsistencia == 0)
            {
                string registroEAD = new string('\x20', 256);
                functionECF.conectorECF_GenerateEAD(alwaysVariables.ModeloEcf, strFile, alwaysVariables.KeysPublica, alwaysVariables.KeysPrivate, ref registroEAD, fiscal_retorno, ref fiscal_MSG);
                StreamWriter sw1 = new StreamWriter(strFile, true, Encoding.ASCII);

                if (registroEAD != "")
                {
                    sw1.Write("EAD" + registroEAD);
                }
                sw1.Close();
                msgInfo msg = new msgInfo(1, "Caro Usuário: Arquivo gerado, caminho: " + strFile); msg.ShowDialog();
                auxConsistencia = 1;
            }

            lblVisorEntradaDadosConectorCF.Text = "ENTRADA DE DADOS";

            return sinal;

        }

        #region
        private string optionClientechave;
        private string optionClienteNomeRazao;
        private string optionClienteCpfCnpj;
        private string optionClienteDocumentoIdentidadeIe;
        private string optionClienteNascimentoAbertura;
        private string optionClienteChaveSexo;
        private string optionClienteSexo;
        private string optionClienteChaveCivil;
        private string optionClienteCivil;
        private string optionClienteChaveLoja;
        private string optionClienteStatus;
        private string optionClienteEmpresa; //Razao Empresa
        private string optionClienteFantasia;
        private string optionClienteUf;
        private string optionClienteIdTipoFornecedor;
        private string optionClienteIdtipoPessoa;
        private string optionClienteIdUsuario;
        private string optionClienteIdAtividade;
        private string optionClienteObs;
        private string optionClienteDataEmissao;
        private string optionClienteDataAlteracao;
        private string optionClienteChaveEstado;
        private string optionClienteIeProdutor;
        private string optionClienteCodigoMunicipio;
        private string optionClientePais;
        private string optionClientePaisDescricao;
        private string optionClienteMail;
        //########################################Parametro configuração endereço######################
        private string auxIdEndereco;
        private string optionUfEstado;
        private string optionBairroCliente;
        private string optionCityCliente;
        private string optionNumberCliente;
        private string optionComplementoCliente;
        private string optionLogradouroCliente;
        private string optionCepCliente;
        private string optionIdCepCliente;
        private string optionCodigUfCliente;
        private string optionCodigMunicipioCliente;
        //########################################END configuração endereço######################
        public void conector_carrega_address()
        {
            auxConsistencia = 0;
            countRows = 0;
            try
            {
                title = banco.abreConexao();
                banco.startTransaction("conectorPDV_find_address");
                banco.addParametro("find_cliente", auxIdCliente);
                banco.addParametro("find_seq", "1");
                banco.procedimentoSet();

            }
            catch (Exception erro)
            {
                msg = new msgInfo(1, "Erro não identificado, entre contato como revendedor! " + erro.Message); msg.ShowDialog();
                auxConsistencia = 1;
            }
            finally
            {
                if (auxConsistencia == 0)
                {
                    countRows = banco.retornaSet().Tables[0].DefaultView.Count;
                    if (countRows > 0)
                    {
                        //Carrega as variaveis para realização do comando update
                        auxIdEndereco = Convert.ToString(banco.retornaSet().Tables[0].Rows[0][6]);
                        optionUfEstado = Convert.ToString(banco.retornaSet().Tables[0].Rows[0][3]);
                        optionBairroCliente = Convert.ToString(banco.retornaSet().Tables[0].Rows[0][0]);
                        optionCityCliente = Convert.ToString(banco.retornaSet().Tables[0].Rows[0][2]);
                        optionNumberCliente = Convert.ToString(banco.retornaSet().Tables[0].Rows[0][4]);
                        optionComplementoCliente = Convert.ToString(banco.retornaSet().Tables[0].Rows[0][1]);
                        optionLogradouroCliente = Convert.ToString(banco.retornaSet().Tables[0].Rows[0][10]);
                        optionCepCliente = Convert.ToString(banco.retornaSet().Tables[0].Rows[0][5]);
                        optionIdCepCliente = Convert.ToString(banco.retornaSet().Tables[0].Rows[0][11]);
                        optionCodigUfCliente = Convert.ToString(banco.retornaSet().Tables[0].Rows[0][12]);
                        optionCodigMunicipioCliente = Convert.ToString(banco.retornaSet().Tables[0].Rows[0][13]);
                    }
                }
                banco.fechaConexao(); if (title != "") { this.txtTitleCupomFiscalConectorCF.Invoke((MethodInvoker)delegate { txtTitleCupomFiscalConectorCF.Text = title; }); }
                if (auxConsistencia == 0)
                {
                }
            }
        }
        public void conector_carrega_cliente(string idCliente)
        {
            conector_carrega_address();
            int semaforo;
            semaforo = 0; //fecha o sinal
            try
            {
                auxConsistencia = 0;
                title = banco.abreConexao();
                banco.startTransaction("conectorPDV_find_cliente_nfce");
                banco.addParametro("tipo", "13");
                banco.addParametro("find_cliente", auxIdCliente);
                banco.addParametro("tipo_cliente", auxTipoPessoa);
                banco.addParametro("find_atividade", "1");
                banco.procedimentoRead();
                if (banco.retornaRead().Read() == true)
                {
                    optionClientechave = banco.retornaRead().GetString(0);
                    optionClienteNomeRazao = banco.retornaRead().GetString(1);
                    optionClienteCpfCnpj = banco.retornaRead().GetString(2);
                    optionClienteDocumentoIdentidadeIe = banco.retornaRead().GetString(3);
                    optionClienteNascimentoAbertura = banco.retornaRead().GetString(4);
                    optionClienteChaveSexo = banco.retornaRead().GetString(5);
                    optionClienteSexo = banco.retornaRead().GetString(6);
                    optionClienteChaveCivil = banco.retornaRead().GetString(7);
                    optionClienteCivil = banco.retornaRead().GetString(8);
                    optionClienteChaveLoja = banco.retornaRead().GetString(9);
                    optionClienteStatus = banco.retornaRead().GetString(10);
                    optionClienteEmpresa = banco.retornaRead().GetString(11); //Razao Empresa
                    optionClienteFantasia = banco.retornaRead().GetString(12);
                    optionClienteUf = banco.retornaRead().GetString(13);
                    optionClienteIdTipoFornecedor = banco.retornaRead().GetString(14);
                    optionClienteIdtipoPessoa = banco.retornaRead().GetString(15);
                    optionClienteIdUsuario = banco.retornaRead().GetString(16);
                    optionClienteIdAtividade = banco.retornaRead().GetString(17);
                    optionClienteObs = banco.retornaRead().GetString(18);
                    optionClienteDataEmissao = banco.retornaRead().GetString(19);
                    optionClienteDataAlteracao = banco.retornaRead().GetString(20);
                    optionClienteChaveEstado = banco.retornaRead().GetString(21);
                    optionClienteIeProdutor = banco.retornaRead().GetString(22);
                    optionClienteCodigoMunicipio = banco.retornaRead().GetString(55);
                    optionClientePais = banco.retornaRead().GetString(60);
                    optionClientePaisDescricao = banco.retornaRead().GetString(59);
                    optionClienteMail = banco.retornaRead().GetString(61);
                }
                banco.fechaRead();
            }
            catch (Exception erro)
            {
                msg = new msgInfo(1, "Erro não identificado, entre contato como revendedor! " + erro.Message); msg.ShowDialog();
                auxConsistencia = 1;
            }
            finally
            {
                banco.fechaConexao(); if (title != "") { this.txtTitleCupomFiscalConectorCF.Invoke((MethodInvoker)delegate { txtTitleCupomFiscalConectorCF.Text = title; }); }
                if (auxConsistencia == 0)
                {
                    listaIdentificacaoDestinatarioNfe.Add(identificacaoDestinatarioNfe);
                    if (alwaysVariables.TipoAmbiente == "h")
                    {
                        listaIdentificacaoDestinatarioNfe[0].dest_xNome = "NF-E EMITIDA EM AMBIENTE DE HOMOLOGACAO - SEM VALOR FISCAL";//optionClienteNomeRazao;
                    }
                    else
                    {
                        listaIdentificacaoDestinatarioNfe[0].dest_xNome = optionClienteNomeRazao;
                    }
                    listaIdentificacaoDestinatarioNfe[0].dest_enderDest_xLgr = optionLogradouroCliente;
                    listaIdentificacaoDestinatarioNfe[0].dest_enderDest_nro = optionNumberCliente;
                    listaIdentificacaoDestinatarioNfe[0].dest_enderDest_xCpl = optionComplementoCliente;
                    listaIdentificacaoDestinatarioNfe[0].dest_enderDest_xBairro = optionBairroCliente;
                    listaIdentificacaoDestinatarioNfe[0].dest_enderDest_cMun = optionCodigMunicipioCliente;
                    listaIdentificacaoDestinatarioNfe[0].dest_enderDest_xMun = optionCityCliente;
                    listaIdentificacaoDestinatarioNfe[0].dest_enderDest_UF = optionUfEstado;
                    listaIdentificacaoDestinatarioNfe[0].dest_enderDest_CEP = optionCepCliente;
                    listaIdentificacaoDestinatarioNfe[0].dest_enderDest_xPais = optionClientePaisDescricao; //Id Pais
                    listaIdentificacaoDestinatarioNfe[0].dest_enderDest_cPais = optionClientePais; //Descricao pais
                    if (optionClienteCpfCnpj.Length >= 14)
                    {
                        listaIdentificacaoDestinatarioNfe[0].dest_CNPJ = optionClienteCpfCnpj;
                    }
                    else
                    {
                        listaIdentificacaoDestinatarioNfe[0].dest_CPF = optionClienteCpfCnpj;
                    }
                    if (optionClienteIdTipoFornecedor == "2" || optionClienteIdTipoFornecedor == "3")
                    {
                        listaIdentificacaoDestinatarioNfe[0].dest_enderDest_indIEDest = "1";
                        listaIdentificacaoDestinatarioNfe[0].dest_enderDest_IE = optionClienteDocumentoIdentidadeIe;
                    }
                    else if (optionClienteIdTipoFornecedor == "3")
                    {
                        if (optionClienteIeProdutor != "")
                        {
                            listaIdentificacaoDestinatarioNfe[0].dest_enderDest_indIEDest = "1";
                            listaIdentificacaoDestinatarioNfe[0].dest_enderDest_IE = optionClienteIeProdutor;
                        }
                        else
                        {
                            listaIdentificacaoDestinatarioNfe[0].dest_enderDest_indIEDest = "9";
                            listaIdentificacaoDestinatarioNfe[0].dest_enderDest_IE = optionClienteIeProdutor;
                        }
                    }
                    else if (optionClienteIdTipoFornecedor == "1")
                    {
                        listaIdentificacaoDestinatarioNfe[0].dest_enderDest_indIEDest = "2";
                        listaIdentificacaoDestinatarioNfe[0].dest_enderDest_IE = "ISENTO";
                    }
                    else
                    {
                        listaIdentificacaoDestinatarioNfe[0].dest_enderDest_indIEDest = "9";
                    }
                    //SUFRAME
                    listaIdentificacaoDestinatarioNfe[0].dest_enderDest_ISUF = "";
                    //Inscricao Municipal
                    listaIdentificacaoDestinatarioNfe[0].dest_enderDest_IM = "";
                    listaIdentificacaoDestinatarioNfe[0].dest_enderDest_email = optionClienteMail;

                }
            }

        }
        #endregion

        #region
        protected void conectorPDV_find_itemNfSaidaTotais(string tipo, int geracao)
        {
            string mask, text, tamanho;
            mask = "000000000";
            text = "";
            tamanho = "0";
            auxConsistencia = 0;
            try
            {
                title = banco.abreConexao();
                banco.startTransaction("conectorPDV_find_itemNfSaida");
                banco.addParametro("tipo", tipo);
                banco.addParametro("find_loja", alwaysVariables.Store);
                banco.addParametro("find", auxChaveNota);
                banco.addParametro("seq", "0");
                banco.procedimentoRead();
                if (banco.retornaRead().Read() == true)
                {
                    if (geracao == 1)
                    {
                        listaTotalNFe.Add(totalNFe);
                        listaTotalNFe[0].total_ICMSTot_vBC = banco.retornaRead().GetString(5);
                        listaTotalNFe[0].total_ICMSTot_vICMS = banco.retornaRead().GetString(6);
                        //alwaysVariables.chaveNfce + "nVersao" + listaIdentificacaoNfe[0].ide_tpAmb + auxCPFCNPJ + listaIdentificacaoNfe[0].ide_dhEmi + listaTotalNFe[0].total_ICMSTot_vNF + listaTotalNFe[0].total_ICMSTot_vICMS+;
                        listaTotalNFe[0].total_ICMSTot_vICMSDeson = "0.00";
                        listaTotalNFe[0].total_ICMSTot_vBCST = banco.retornaRead().GetString(7);
                        listaTotalNFe[0].total_ICMSTot_vST = banco.retornaRead().GetString(8);
                        listaTotalNFe[0].total_ICMSTot_vProd = banco.retornaRead().GetString(11);
                        listaTotalNFe[0].total_ICMSTot_vFrete = banco.retornaRead().GetString(17);
                        listaTotalNFe[0].total_ICMSTot_vSeg = "0";
                        listaTotalNFe[0].total_ICMSTot_vDesc = banco.retornaRead().GetString(3);
                        listaTotalNFe[0].total_ICMSTot_vII = "0,00";
                        listaTotalNFe[0].total_ICMSTot_vIPI = banco.retornaRead().GetString(12);
                        listaTotalNFe[0].total_ICMSTot_vPIS = banco.retornaRead().GetString(20);
                        listaTotalNFe[0].total_ICMSTot_vCOFINS = banco.retornaRead().GetString(19);
                        listaTotalNFe[0].total_ICMSTot_vOutro = banco.retornaRead().GetString(4);
                        listaTotalNFe[0].total_ICMSTot_vNF = banco.retornaRead().GetString(10);
                        //listaTotalNFe[0].total_ICMSTot_vTotTrib = banco.retornaRead().GetString(6);
                        auxTotalNFce = banco.retornaRead().GetString(10);
                        //lbCalculoImpostoValorTotalProdutoNotaFiscal.Text = banco.retornaRead().GetString(11);
                        auxQttyItensNFce = banco.retornaRead().GetString(0);
                        //lbCalculoImpostoValorIcmsSubstituicaoNotaFiscal.Text = banco.retornaRead().GetString(8);
                        //lbCalculoImpostoValorBaseIcmsSubstituicaoNotaFiscal.Text = banco.retornaRead().GetString(7);
                        //lbCalculoImpostoValorIcmsNotaFiscal.Text = banco.retornaRead().GetString(6);
                        //lbCalculoImpostoBaseCalculoNotaFiscal.Text = banco.retornaRead().GetString(5);
                        //lbCalculoImpostoDespesasAcessoriasNotaFiscal.Text = banco.retornaRead().GetString(4);
                        //lbCalculoImpostoDescontoNotaFiscal.Text = banco.retornaRead().GetString(3);
                        //lbTransportePesoLiquidoNotaFiscal.Text = banco.retornaRead().GetString(2);
                        //lbTransporteQuantidadeNotaFiscal.Text = banco.retornaRead().GetString(0);
                        //text = banco.retornaRead().GetString(15);
                        //txtSerieNotaFiscal.Text = banco.retornaRead().GetString(16);
                        //tamanho = (mask.Length - text.Length).ToString();
                        //mskNumberNotaFiscal.Text = (mask.Substring(0, Convert.ToInt32(tamanho)) + text);
                        //lbCalculoImpostoValorFreteNotaFiscal.Text = banco.retornaRead().GetString(17);
                        //txtCFOPNotaFiscal.Text = banco.retornaRead().GetString(18);
                        auxDescFinalizadoraNFce = banco.retornaRead().GetString(21);
                        auxTotalTributosNFce = banco.retornaRead().GetString(24);

                    }
                    else if (geracao == 2)
                    {
                        listaIdentificacaoNfe.Add(identificacaoNfe);
                        listaIdentificacaoNfe[0].ide_cUF = banco.retornaRead().GetString(12);
                        listaIdentificacaoNfe[0].ide_cNF = null;
                        listaIdentificacaoNfe[0].ide_natOp = banco.retornaRead().GetString(39);
                        listaIdentificacaoNfe[0].ide_indPag = banco.retornaRead().GetString(26);
                        listaIdentificacaoNfe[0].ide_mod = banco.retornaRead().GetString(27);
                        if (banco.retornaRead().GetString(9) == "")
                        {
                            listaIdentificacaoNfe[0].ide_serie = Convert.ToDouble(auxSerieNota).ToString();
                        }
                        else
                        {
                            listaIdentificacaoNfe[0].ide_serie = Convert.ToDouble(banco.retornaRead().GetString(9)).ToString();
                        }
                        if ((banco.retornaRead().GetString(8) == "" || Convert.ToDouble(banco.retornaRead().GetString(8)) == 0) || auxNumeroNota != null)
                        {
                            listaIdentificacaoNfe[0].ide_nNF = auxNumeroNota; 
                        }
                        else
                        {
                            listaIdentificacaoNfe[0].ide_nNF = banco.retornaRead().GetString(8);
                        }
                        listaIdentificacaoNfe[0].ide_dhEmi = String.Format("{0:yyyy-MM-dd HH:mm:ss}", DateTime.Now);//AAAA-MM-DDThh:mm:ssTZD
                        listaIdentificacaoNfe[0].ide_dhSaiEnt = String.Format("{0:yyyy-MM-dd HH:mm:ss}", DateTime.Now);
                        listaIdentificacaoNfe[0].ide_tpNF = banco.retornaRead().GetString(28);
                        listaIdentificacaoNfe[0].ide_idDest = banco.retornaRead().GetString(29);
                        listaIdentificacaoNfe[0].ide_cMunFG = banco.retornaRead().GetString(30);
                        listaIdentificacaoNfe[0].ide_tpImp = banco.retornaRead().GetString(31);//nfce"4";
                        listaIdentificacaoNfe[0].ide_tpEmis = banco.retornaRead().GetString(32);
                        listaIdentificacaoNfe[0].ide_cDV = null;
                        listaIdentificacaoNfe[0].ide_tpAmb = alwaysVariables.ModoNFce;
                        /*if (alwaysVariables.TipoAmbiente == "h")
                        {
                            //listaIdentificacaoNfe[0].ide_tpAmb = banco.retornaRead().GetString(33);
                            listaIdentificacaoNfe[0].ide_tpAmb = "2";
                        }
                        else
                        {
                            listaIdentificacaoNfe[0].ide_tpAmb = "1";
                        }*/
                        listaIdentificacaoNfe[0].ide_finNFe = "1";//= banco.retornaRead().GetString(34); ;
                        listaIdentificacaoNfe[0].ide_indFinal = "1";//= banco.retornaRead().GetString(35);
                        listaIdentificacaoNfe[0].ide_indPres = "1";//= banco.retornaRead().GetString(36);
                        listaIdentificacaoNfe[0].ide_procEmi = banco.retornaRead().GetString(37);
                        listaIdentificacaoNfe[0].ide_verProc = banco.retornaRead().GetString(38);
                        listaIdentificacaoNfe[0].ide_dhCont = null;
                        listaIdentificacaoNfe[0].ide_xJust = null;
                    }
                    else if (geracao == 3)
                    {

                    }
                }
                banco.fechaRead();
            }
            catch (Exception erro)
            {
                MessageBox.Show(erro.Message, "Caro Usúario", MessageBoxButtons.OK, MessageBoxIcon.Information);
                auxConsistencia = 1;
            }
            finally
            {
                banco.fechaConexao(); if (title != "") { this.txtTitleCupomFiscalConectorCF.Invoke((MethodInvoker)delegate { txtTitleCupomFiscalConectorCF.Text = title; }); }
                if (auxConsistencia == 0)
                {
                    if (geracao == 1)
                    {
                        conectorPDV_PAFECF_tributos(auxChaveNota, alwaysVariables.Store, alwaysVariables.Terminal, "4", -1);
                    }
                }
            }
        }
        #endregion

        #region
        protected void conectorPDV_find_itemNfSaida(string tipo, string auxIdNf)
        {
            countField = 0;
            countRows = 0;
            auxConsistencia = 0;
            try
            {
                title = banco.abreConexao();
                banco.startTransaction("conectorPDV_find_itemNfSaida");
                banco.addParametro("tipo", tipo);
                banco.addParametro("find_loja", alwaysVariables.Store);
                banco.addParametro("find", auxIdNf);
                banco.addParametro("seq", "0");
                banco.procedimentoSet();
            }
            catch (Exception erro)
            {
                msg = new msgInfo(1,"Erro não identificado, entre contato como revendedor! " + erro.Message); msg.ShowDialog();
            }
            finally
            {
                if (auxConsistencia == 0)
                {
                    if (tipo == "7")
                    {
                        reserva_number = banco.retornaSet().Tables[0].Rows[0][0].ToString();
                    }
                    if (tipo == "1")
                    {
                        //insere linha nula
                        countField = banco.retornaSet().Tables[0].Columns.Count;
                        countRows = banco.retornaSet().Tables[0].DefaultView.Count;
                        if (countRows > 0)
                        {
                            int countTrib = 0;
                            int countSt = 0;

                            for (i = 0; i < countRows; i++)
                            {
                                iCMSNormalST = new dadosICMSNormalST(null, null, null, null, null, null, null, null, null, null, null, null,
null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null,
null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null,
null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null,
null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null,
null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null,
null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null);
                                tributosIncidentesProdutoServico = new dadosTributosIncidentesProdutoServico(null);
                                listaTributosIncidentesProdutoServico.Add(tributosIncidentesProdutoServico);
                                listaTributosIncidentesProdutoServico[i].imposto_vTotTrib = Convert.ToString(banco.retornaSet().Tables[0].Rows[i][27]);
                                listaICMSNormalST.Add(iCMSNormalST);
                                listaImpostoProdutosIndustrializados.Add(impostoProdutosIndustrializados);
                                listaImpostoImportacao.Add(impostoImportacao);

                                conector_zera_pisCofins();
                                listaPis.Add(pis);
                                listaCofins.Add(cofins);
                                listaPisST.Add(pisST);
                                listaCofinsST.Add(cofinsST);
                                listaImpostoProdutosIndustrializados.Add(impostoProdutosIndustrializados);

                                //listaImpostoProdutosIndustrializados[i].IPI_cEnq = "999";
                                //listaImpostoProdutosIndustrializados[i].IPI_IPINT_CST = "53";

                                if (Convert.ToString(banco.retornaSet().Tables[0].Rows[i][4]) == "000")
                                {
                                    listaICMSNormalST[i].ICMS_ICMS00_orig = Convert.ToString(banco.retornaSet().Tables[0].Rows[i][15]);
                                    listaICMSNormalST[i].ICMS_ICMS00_CST = "00";
                                    listaICMSNormalST[i].ICMS_ICMS00_modBC = "3"; //0 - Margem, 1 Pauta, 2 Tabela, 3 Valor Da Operação
                                    listaICMSNormalST[i].ICMS_ICMS00_vBC = Convert.ToString(banco.retornaSet().Tables[0].Rows[i][10]);
                                    listaICMSNormalST[i].ICMS_ICMS00_pICMS = Convert.ToString(banco.retornaSet().Tables[0].Rows[i][13]);
                                    listaICMSNormalST[i].ICMS_ICMS00_vICMS = Convert.ToString(banco.retornaSet().Tables[0].Rows[i][11]);

                                    listaPis[i].PIS_PISAliq_CST = banco.retornaSet().Tables[0].Rows[i][21].ToString();
                                    listaPis[i].PIS_PISAliq_vBC = banco.retornaSet().Tables[0].Rows[i][22].ToString();
                                    listaPis[i].PIS_PISAliq_pPIS = alwaysVariables.alquitoPis;
                                    listaPis[i].PIS_PISAliq_vPIS = banco.retornaSet().Tables[0].Rows[i][23].ToString();

                                    listaCofins[i].COFINS_COFINSAliq_CST = banco.retornaSet().Tables[0].Rows[i][24].ToString();
                                    listaCofins[i].COFINS_COFINSAliq_vBC = banco.retornaSet().Tables[0].Rows[i][25].ToString();
                                    listaCofins[i].COFINS_COFINSAliq_pCOFINS = alwaysVariables.alquitoCofins;
                                    listaCofins[i].COFINS_COFINSAliq_vCOFINS = banco.retornaSet().Tables[0].Rows[i][26].ToString();

                                    countTrib++;
                                }
                                else if (Convert.ToString(banco.retornaSet().Tables[0].Rows[i][4]) == "010")
                                {
                                    listaICMSNormalST[i].ICMS_ICMS10_orig = Convert.ToString(banco.retornaSet().Tables[0].Rows[i][15]);
                                    listaICMSNormalST[i].ICMS_ICMS10_CST = "10";
                                    listaICMSNormalST[i].ICMS_ICMS10_modBC = "3"; //0 - Margem, 1 Pauta, 2 Tabela, 3 Valor Da Operação
                                    listaICMSNormalST[i].ICMS_ICMS10_vBC = Convert.ToString(banco.retornaSet().Tables[0].Rows[i][10]);
                                    listaICMSNormalST[i].ICMS_ICMS10_pICMS = Convert.ToString(banco.retornaSet().Tables[0].Rows[i][13]);
                                    listaICMSNormalST[i].ICMS_ICMS10_vICMS = Convert.ToString(banco.retornaSet().Tables[0].Rows[i][11]);
                                    listaICMSNormalST[i].ICMS_ICMS10_modBCST = "0"; //0 - Margem, 1 Pauta, 2 Tabela, 3 Valor Da Operação
                                    listaICMSNormalST[i].ICMS_ICMS10_pMVAST = null;
                                    listaICMSNormalST[i].ICMS_ICMS10_pRedBCST = Convert.ToString(banco.retornaSet().Tables[0].Rows[i][16]);
                                    listaICMSNormalST[i].ICMS_ICMS10_vBCST = Convert.ToString(banco.retornaSet().Tables[0].Rows[i][17]);
                                    listaICMSNormalST[i].ICMS_ICMS10_pICMSST = Convert.ToString(banco.retornaSet().Tables[0].Rows[i][18]);
                                    listaICMSNormalST[i].ICMS_ICMS10_vICMSST = Convert.ToString(banco.retornaSet().Tables[0].Rows[i][19]);

                                    listaPisST[countSt].PISST_vBC = banco.retornaSet().Tables[0].Rows[i][22].ToString();
                                    listaPisST[countSt].PISST_pPIS = alwaysVariables.alquitoPis;
                                    listaPisST[countSt].PISST_vPIS = banco.retornaSet().Tables[0].Rows[i][23].ToString();

                                    listaCofinsST[countSt].COFINSST_vBC = banco.retornaSet().Tables[0].Rows[i][25].ToString();
                                    listaCofinsST[countSt].COFINSST_pCOFINS = alwaysVariables.alquitoCofins;
                                    listaCofinsST[countSt].COFINSST_vCOFINS = banco.retornaSet().Tables[0].Rows[i][26].ToString();
                                }
                                else if (Convert.ToString(banco.retornaSet().Tables[0].Rows[i][4]) == "020")
                                {
                                    listaICMSNormalST[i].ICMS_ICMS20_orig = Convert.ToString(banco.retornaSet().Tables[0].Rows[i][15]);
                                    listaICMSNormalST[i].ICMS_ICMS20_CST = "20";
                                    listaICMSNormalST[i].ICMS_ICMS20_modBC = "3"; //0 - Margem, 1 Pauta, 2 Tabela, 3 Valor Da Operação
                                    listaICMSNormalST[i].ICMS_ICMS20_pRedBC = Convert.ToString(banco.retornaSet().Tables[0].Rows[i][20]);
                                    listaICMSNormalST[i].ICMS_ICMS20_vBC = Convert.ToString(banco.retornaSet().Tables[0].Rows[i][10]);
                                    listaICMSNormalST[i].ICMS_ICMS20_pICMS = Convert.ToString(banco.retornaSet().Tables[0].Rows[i][13]);
                                    listaICMSNormalST[i].ICMS_ICMS20_vICMS = Convert.ToString(banco.retornaSet().Tables[0].Rows[i][11]);
                                    listaICMSNormalST[i].ICMS_ICMS20_vICMSDeson = "0.00";
                                    listaICMSNormalST[i].ICMS_ICMS20_motDesICMS = null;

                                    listaPis[countTrib].PIS_PISAliq_CST = banco.retornaSet().Tables[0].Rows[i][21].ToString();
                                    listaPis[countTrib].PIS_PISAliq_vBC = banco.retornaSet().Tables[0].Rows[i][22].ToString();
                                    listaPis[countTrib].PIS_PISAliq_pPIS = alwaysVariables.alquitoPis;
                                    listaPis[countTrib].PIS_PISAliq_vPIS = banco.retornaSet().Tables[0].Rows[i][23].ToString();

                                    listaCofins[countTrib].COFINS_COFINSAliq_CST = banco.retornaSet().Tables[0].Rows[i][24].ToString();
                                    listaCofins[countTrib].COFINS_COFINSAliq_vBC = banco.retornaSet().Tables[0].Rows[i][25].ToString();
                                    listaCofins[countTrib].COFINS_COFINSAliq_pCOFINS = alwaysVariables.alquitoCofins;
                                    listaCofins[countTrib].COFINS_COFINSAliq_vCOFINS = banco.retornaSet().Tables[0].Rows[i][26].ToString();

                                    countTrib++;
                                }
                                else if (Convert.ToString(banco.retornaSet().Tables[0].Rows[i][4]) == "030")
                                {
                                    listaICMSNormalST[i].ICMS_ICMS30_orig = Convert.ToString(banco.retornaSet().Tables[0].Rows[i][15]);
                                    listaICMSNormalST[i].ICMS_ICMS70_modBCST = "0"; //0 - Margem, 1 Pauta, 2 Tabela, 3 Valor Da Operação
                                    listaICMSNormalST[i].ICMS_ICMS30_pMVAST = null;
                                    listaICMSNormalST[i].ICMS_ICMS30_pRedBCST = Convert.ToString(banco.retornaSet().Tables[0].Rows[i][16]);
                                    listaICMSNormalST[i].ICMS_ICMS30_vBCST = Convert.ToString(banco.retornaSet().Tables[0].Rows[i][17]);
                                    listaICMSNormalST[i].ICMS_ICMS30_pICMSST = Convert.ToString(banco.retornaSet().Tables[0].Rows[i][18]);
                                    listaICMSNormalST[i].ICMS_ICMS30_vICMSST = Convert.ToString(banco.retornaSet().Tables[0].Rows[i][19]);
                                    listaICMSNormalST[i].ICMS_ICMS30_vICMSDeson = "0.00";
                                    listaICMSNormalST[i].ICMS_ICMS30_motDesICMS = null;

                                    listaPis[countTrib].PIS_PISNT_CST = banco.retornaSet().Tables[0].Rows[i][21].ToString();


                                    listaCofins[countTrib].COFINS_COFINSNT_CST = banco.retornaSet().Tables[0].Rows[i][24].ToString();
                                    countTrib++;
                                }
                                else if (Convert.ToString(banco.retornaSet().Tables[0].Rows[i][4]) == "040" || Convert.ToString(banco.retornaSet().Tables[0].Rows[i][4]) == "041" || Convert.ToString(banco.retornaSet().Tables[0].Rows[i][4]) == "050")
                                {
                                    listaICMSNormalST[i].ICMS_ICMS40_orig = Convert.ToString(banco.retornaSet().Tables[0].Rows[i][15]);
                                    listaICMSNormalST[i].ICMS_ICMS40_CST = Convert.ToString(banco.retornaSet().Tables[0].Rows[i][0]).Substring(1, 2); //40, 41 ou 50
                                    listaICMSNormalST[i].ICMS_ICMS40_vICMSDeson = "0.00";
                                    listaICMSNormalST[i].ICMS_ICMS40_motDesICMS = null;

                                    listaPis[countTrib].PIS_PISNT_CST = banco.retornaSet().Tables[0].Rows[i][21].ToString();


                                    listaCofins[countTrib].COFINS_COFINSNT_CST = banco.retornaSet().Tables[0].Rows[i][24].ToString();
                                    countTrib++;
                                }
                                else if (Convert.ToString(banco.retornaSet().Tables[0].Rows[i][4]) == "051")
                                {
                                    listaICMSNormalST[i].ICMS_ICMS51_orig = Convert.ToString(banco.retornaSet().Tables[0].Rows[i][15]);
                                    listaICMSNormalST[i].ICMS_ICMS51_CST = "51";
                                    listaICMSNormalST[i].ICMS_ICMS51_modBC = "3"; //0 - Margem, 1 Pauta, 2 Tabela, 3 Valor Da Operação
                                    listaICMSNormalST[i].ICMS_ICMS51_pRedBC = Convert.ToString(banco.retornaSet().Tables[0].Rows[i][20]);
                                    listaICMSNormalST[i].ICMS_ICMS51_vBC = Convert.ToString(banco.retornaSet().Tables[0].Rows[i][10]);
                                    listaICMSNormalST[i].ICMS_ICMS51_pICMS = Convert.ToString(banco.retornaSet().Tables[0].Rows[i][13]);
                                    listaICMSNormalST[i].ICMS_ICMS51_pDif = null;
                                    listaICMSNormalST[i].ICMS_ICMS51_vICMSOp = null;
                                    listaICMSNormalST[i].ICMS_ICMS51_pDif = null;
                                    listaICMSNormalST[i].ICMS_ICMS51_vICMSDif = null;
                                    listaICMSNormalST[i].ICMS_ICMS51_vICMS = null;

                                    listaPis[countTrib].PIS_PISNT_CST = banco.retornaSet().Tables[0].Rows[i][21].ToString();


                                    listaCofins[countTrib].COFINS_COFINSNT_CST = banco.retornaSet().Tables[0].Rows[i][24].ToString();

                                    countTrib++;
                                }
                                else if (Convert.ToString(banco.retornaSet().Tables[0].Rows[i][4]) == "060")
                                {
                                    listaICMSNormalST[i].ICMS_ICMS60_orig = Convert.ToString(banco.retornaSet().Tables[0].Rows[i][15]);
                                    listaICMSNormalST[i].ICMS_ICMS60_CST = "60";

                                    listaPis[i].PIS_PISNT_CST = banco.retornaSet().Tables[0].Rows[i][21].ToString();
                                    listaCofins[i].COFINS_COFINSNT_CST = banco.retornaSet().Tables[0].Rows[i][24].ToString();

                                }
                                else if (Convert.ToString(banco.retornaSet().Tables[0].Rows[i][4]) == "070")
                                {
                                    listaICMSNormalST[i].ICMS_ICMS70_orig = Convert.ToString(banco.retornaSet().Tables[0].Rows[i][15]);
                                    listaICMSNormalST[i].ICMS_ICMS70_CST = "70";
                                    listaICMSNormalST[i].ICMS_ICMS70_modBC = "3"; //0 - Margem, 1 Pauta, 2 Tabela, 3 Valor Da Operação
                                    listaICMSNormalST[i].ICMS_ICMS70_pRedBC = Convert.ToString(banco.retornaSet().Tables[0].Rows[i][20]);
                                    listaICMSNormalST[i].ICMS_ICMS70_vBC = Convert.ToString(banco.retornaSet().Tables[0].Rows[i][10]);
                                    listaICMSNormalST[i].ICMS_ICMS70_pICMS = Convert.ToString(banco.retornaSet().Tables[0].Rows[i][13]);
                                    listaICMSNormalST[i].ICMS_ICMS70_vICMS = Convert.ToString(banco.retornaSet().Tables[0].Rows[i][11]);
                                    listaICMSNormalST[i].ICMS_ICMS70_modBCST = "0"; //0 - Margem, 1 Pauta, 2 Tabela, 3 Valor Da Operação
                                    listaICMSNormalST[i].ICMS_ICMS70_pMVAST = null;
                                    listaICMSNormalST[i].ICMS_ICMS70_pRedBCST = Convert.ToString(banco.retornaSet().Tables[0].Rows[i][16]);
                                    listaICMSNormalST[i].ICMS_ICMS70_vBCST = Convert.ToString(banco.retornaSet().Tables[0].Rows[i][17]);
                                    listaICMSNormalST[i].ICMS_ICMS70_pICMSST = Convert.ToString(banco.retornaSet().Tables[0].Rows[i][18]);
                                    listaICMSNormalST[i].ICMS_ICMS70_vICMSST = Convert.ToString(banco.retornaSet().Tables[0].Rows[i][19]);
                                    listaICMSNormalST[i].ICMS_ICMS70_vICMSDeson = "0.00";
                                    listaICMSNormalST[i].ICMS_ICMS70_motDesICMS = null;

                                    listaPisST[countSt].PISST_qBCProd = banco.retornaSet().Tables[0].Rows[i][22].ToString();
                                    listaPisST[countSt].PISST_pPIS = alwaysVariables.alquitoPis;
                                    listaPisST[countSt].PISST_vPIS = banco.retornaSet().Tables[0].Rows[i][23].ToString();

                                    listaCofinsST[countSt].COFINSST_vBC = banco.retornaSet().Tables[0].Rows[i][25].ToString();
                                    listaCofinsST[countSt].COFINSST_pCOFINS = alwaysVariables.alquitoCofins;
                                    listaCofinsST[countSt].COFINSST_vCOFINS = banco.retornaSet().Tables[0].Rows[i][26].ToString();
                                }
                                else if (Convert.ToString(banco.retornaSet().Tables[0].Rows[i][4]) == "090")
                                {
                                    listaICMSNormalST[i].ICMS_ICMS90_orig = Convert.ToString(banco.retornaSet().Tables[0].Rows[i][15]);
                                    listaICMSNormalST[i].ICMS_ICMS90_CST = "90";
                                    listaICMSNormalST[i].ICMS_ICMS90_modBC = "3"; //0 - Margem, 1 Pauta, 2 Tabela, 3 Valor Da Operação
                                    listaICMSNormalST[i].ICMS_ICMS90_vBC = Convert.ToString(banco.retornaSet().Tables[0].Rows[i][10]);
                                    listaICMSNormalST[i].ICMS_ICMS90_pRedBC = Convert.ToString(banco.retornaSet().Tables[0].Rows[i][20]);
                                    listaICMSNormalST[i].ICMS_ICMS90_pICMS = Convert.ToString(banco.retornaSet().Tables[0].Rows[i][13]);
                                    listaICMSNormalST[i].ICMS_ICMS90_vICMS = Convert.ToString(banco.retornaSet().Tables[0].Rows[i][11]);
                                    listaICMSNormalST[i].ICMS_ICMS90_modBCST = "0"; //0 - Margem, 1 Pauta, 2 Tabela, 3 Valor Da Operação
                                    listaICMSNormalST[i].ICMS_ICMS90_pMVAST = null;
                                    listaICMSNormalST[i].ICMS_ICMS90_pRedBCST = Convert.ToString(banco.retornaSet().Tables[0].Rows[i][16]);
                                    listaICMSNormalST[i].ICMS_ICMS90_vBCST = Convert.ToString(banco.retornaSet().Tables[0].Rows[i][17]);
                                    listaICMSNormalST[i].ICMS_ICMS90_pICMSST = Convert.ToString(banco.retornaSet().Tables[0].Rows[i][18]);
                                    listaICMSNormalST[i].ICMS_ICMS90_vICMSST = Convert.ToString(banco.retornaSet().Tables[0].Rows[i][19]);
                                    listaICMSNormalST[i].ICMS_ICMS90_vICMSDeson = "0.00";
                                    listaICMSNormalST[i].ICMS_ICMS90_motDesICMS = null;
                                }
                                else if (Convert.ToString(banco.retornaSet().Tables[0].Rows[i][4]) == "010" || Convert.ToString(banco.retornaSet().Tables[0].Rows[i][4]) == "090")
                                {
                                    listaICMSNormalST[i].ICMS_ICMSPart_orig = Convert.ToString(banco.retornaSet().Tables[0].Rows[i][15]);
                                    listaICMSNormalST[i].ICMS_ICMSPart_CST = Convert.ToString(banco.retornaSet().Tables[0].Rows[i][0]).Substring(1, 2); // 10 ou 90
                                    listaICMSNormalST[i].ICMS_ICMSPart_modBC = "3"; //0 - Margem, 1 Pauta, 2 Tabela, 3 Valor Da Operação
                                    listaICMSNormalST[i].ICMS_ICMSPart_vBC = Convert.ToString(banco.retornaSet().Tables[0].Rows[i][10]);
                                    listaICMSNormalST[i].ICMS_ICMSPart_pRedBC = Convert.ToString(banco.retornaSet().Tables[0].Rows[i][20]);
                                    listaICMSNormalST[i].ICMS_ICMSPart_pICMS = Convert.ToString(banco.retornaSet().Tables[0].Rows[i][13]);
                                    listaICMSNormalST[i].ICMS_ICMSPart_vICMS = Convert.ToString(banco.retornaSet().Tables[0].Rows[i][11]);
                                    listaICMSNormalST[i].ICMS_ICMSPart_modBCST = "0"; //0 - Margem, 1 Pauta, 2 Tabela, 3 Valor Da Operação
                                    listaICMSNormalST[i].ICMS_ICMSPart_pMVAST = null;
                                    listaICMSNormalST[i].ICMS_ICMSPart_pRedBCST = Convert.ToString(banco.retornaSet().Tables[0].Rows[i][16]);
                                    listaICMSNormalST[i].ICMS_ICMSPart_vBCST = Convert.ToString(banco.retornaSet().Tables[0].Rows[i][17]);
                                    listaICMSNormalST[i].ICMS_ICMSPart_pICMSST = Convert.ToString(banco.retornaSet().Tables[0].Rows[i][18]);
                                    listaICMSNormalST[i].ICMS_ICMSPart_vICMSST = Convert.ToString(banco.retornaSet().Tables[0].Rows[i][19]);
                                    listaICMSNormalST[i].ICMS_ICMSPart_pBCOp = Convert.ToString(banco.retornaSet().Tables[0].Rows[i][18]); //Rever
                                    listaICMSNormalST[i].ICMS_ICMSPart_UFST = "MG";//REVER

                                    listaPisST[countSt].PISST_qBCProd = banco.retornaSet().Tables[0].Rows[i][22].ToString();
                                    listaPisST[countSt].PISST_pPIS = alwaysVariables.alquitoPis;
                                    listaPisST[countSt].PISST_vPIS = banco.retornaSet().Tables[0].Rows[i][23].ToString();

                                    listaCofinsST[countSt].COFINSST_vBC = banco.retornaSet().Tables[0].Rows[i][25].ToString();
                                    listaCofinsST[countSt].COFINSST_pCOFINS = alwaysVariables.alquitoCofins;
                                    listaCofinsST[countSt].COFINSST_vCOFINS = banco.retornaSet().Tables[0].Rows[i][26].ToString();


                                }
                                else if (Convert.ToString(banco.retornaSet().Tables[0].Rows[i][4]) == "010" || Convert.ToString(banco.retornaSet().Tables[0].Rows[i][4]) == "090")
                                {
                                    listaICMSNormalST[i].ICMS_ICMSST_orig = Convert.ToString(banco.retornaSet().Tables[0].Rows[i][15]);
                                    listaICMSNormalST[i].ICMS_ICMSST_CST = Convert.ToString(banco.retornaSet().Tables[0].Rows[i][0]);  // 10 ou 90
                                    listaICMSNormalST[i].ICMS_ICMSST_vBCSTRet = Convert.ToString(banco.retornaSet().Tables[0].Rows[i][0]);
                                    listaICMSNormalST[i].ICMS_ICMSST_vICMSSTRet = Convert.ToString(banco.retornaSet().Tables[0].Rows[i][0]);
                                    listaICMSNormalST[i].ICMS_ICMSST_vBCSTDest = Convert.ToString(banco.retornaSet().Tables[0].Rows[i][0]);
                                    listaICMSNormalST[i].ICMS_ICMSST_vICMSSTDest = Convert.ToString(banco.retornaSet().Tables[0].Rows[i][0]);

                                    listaPisST[countSt].PISST_qBCProd = banco.retornaSet().Tables[0].Rows[i][22].ToString();
                                    listaPisST[countSt].PISST_pPIS = alwaysVariables.alquitoPis;
                                    listaPisST[countSt].PISST_vPIS = banco.retornaSet().Tables[0].Rows[i][23].ToString();

                                    listaCofinsST[countSt].COFINSST_vBC = banco.retornaSet().Tables[0].Rows[i][25].ToString();
                                    listaCofinsST[countSt].COFINSST_pCOFINS = alwaysVariables.alquitoCofins;
                                    listaCofinsST[countSt].COFINSST_vCOFINS = banco.retornaSet().Tables[0].Rows[i][26].ToString();
                                }
                            }//Imposto
                        }
                    }
                    else if (tipo == "5")
                    {
                        //dadosTributosIncidentesProdutoServico tributosIncidentesProdutoServico = new dadosTributosIncidentesProdutoServico(null);
                        countField = banco.retornaSet().Tables[0].Columns.Count;
                        countRows = banco.retornaSet().Tables[0].DefaultView.Count;
                        if (countRows > 0)
                        {
                            for (i = 0; i < countRows; i++)
                            {
                                dadosProdutosServicosNfe prodServNfe = new dadosProdutosServicosNfe(null, null, null, null, null, null, null, null, null, null,
                                    null, null, null, null, null, null, null, null, null, null);
                                dadosDetalhamentoProdutosNfe detProdNfe = new dadosDetalhamentoProdutosNfe(null, null);
                                listaProdutosServicosNfe.Add(prodServNfe);
                                listaDetalhamentoProdutosNfe.Add(detProdNfe);
                                listaProdutosServicosNfe[i].prod_cProd = Convert.ToString(banco.retornaSet().Tables[0].Rows[i][0]);
                                int qtd = Convert.ToString(banco.retornaSet().Tables[0].Rows[i][1]).Length;
                                if (qtd == 0 || qtd == 8 || qtd == 12 || qtd == 13 || qtd == 14)
                                {
                                    listaProdutosServicosNfe[i].prod_cEAN = Convert.ToString(banco.retornaSet().Tables[0].Rows[i][1]);
                                }
                                else
                                {
                                    listaProdutosServicosNfe[i].prod_cEAN = null;
                                }
                                listaProdutosServicosNfe[i].prod_xProd = Convert.ToString(banco.retornaSet().Tables[0].Rows[i][2]);
                                listaProdutosServicosNfe[i].prod_NCM = Convert.ToString(banco.retornaSet().Tables[0].Rows[i][3]);
                                listaProdutosServicosNfe[i].prod_EXTIPI = Convert.ToString(banco.retornaSet().Tables[0].Rows[i][4]);
                                listaProdutosServicosNfe[i].prod_CFOP = Convert.ToString(banco.retornaSet().Tables[0].Rows[i][5]);
                                listaProdutosServicosNfe[i].prod_uCom = Convert.ToString(banco.retornaSet().Tables[0].Rows[i][6]);
                                listaProdutosServicosNfe[i].prod_qCom = Convert.ToString(banco.retornaSet().Tables[0].Rows[i][7]);
                                listaProdutosServicosNfe[i].prod_vUnCom = Convert.ToString(banco.retornaSet().Tables[0].Rows[i][8]);
                                listaProdutosServicosNfe[i].prod_vProd = Convert.ToString(banco.retornaSet().Tables[0].Rows[i][9]);
                                listaProdutosServicosNfe[i].prod_cEANTrib = null; //Convert.ToString(banco.retornaSet().Tables[0].Rows[i][10]);
                                listaProdutosServicosNfe[i].prod_uTrib = Convert.ToString(banco.retornaSet().Tables[0].Rows[i][13]);
                                listaProdutosServicosNfe[i].prod_qTrib = Convert.ToString(banco.retornaSet().Tables[0].Rows[i][14]);
                                listaProdutosServicosNfe[i].prod_vUnTrib = Convert.ToString(banco.retornaSet().Tables[0].Rows[i][15]);
                                if (Convert.ToDecimal(banco.retornaSet().Tables[0].Rows[i][16]) == 0)
                                {
                                    listaProdutosServicosNfe[i].prod_vFrete = null;
                                }
                                else { listaProdutosServicosNfe[i].prod_vFrete = Convert.ToString(banco.retornaSet().Tables[0].Rows[i][16]); }
                                if (Convert.ToDecimal(banco.retornaSet().Tables[0].Rows[i][17]) == 0)
                                {
                                    listaProdutosServicosNfe[i].prod_vSeg = null;
                                }
                                else { listaProdutosServicosNfe[i].prod_vSeg = Convert.ToString(banco.retornaSet().Tables[0].Rows[i][17]); }
                                if (Convert.ToDecimal(banco.retornaSet().Tables[0].Rows[i][18]) == 0)
                                {
                                    listaProdutosServicosNfe[i].prod_vDesc = null;
                                }
                                else { listaProdutosServicosNfe[i].prod_vDesc = Convert.ToString(banco.retornaSet().Tables[0].Rows[i][18]); }
                                if (Convert.ToDecimal(banco.retornaSet().Tables[0].Rows[i][19]) == 0)
                                {
                                    listaProdutosServicosNfe[i].prod_vOutro = null;
                                }
                                else { listaProdutosServicosNfe[i].prod_vOutro = Convert.ToString(banco.retornaSet().Tables[0].Rows[i][19]); }
                                
                                listaProdutosServicosNfe[i].prod_indTot = Convert.ToString(banco.retornaSet().Tables[0].Rows[i][20]);
                                listaDetalhamentoProdutosNfe[i].det_nItem = Convert.ToString(banco.retornaSet().Tables[0].Rows[i][21]);
                                listaDetalhamentoProdutosNfe[i].flagNumeroNota = 0;
                                
                                /*Export Item Nf*/
                                workObject.modoPdv(true); //Para rotina loop
                                strCupom = "";
                                instrucao.setVetorCupom();
                                strCupom = instrucao.getNfceItem(alwaysVariables.UserName, alwaysVariables.Senha, alwaysVariables.Store, auxIdNf, Convert.ToString(banco.retornaSet().Tables[0].Rows[i][22]), String.Format("{0:yyyyMMdd}", DateTime.Now), Convert.ToString(banco.retornaSet().Tables[0].Rows[i][21]));
                                instrucao.carregaInstrucaoMovimentoVenda(instrucao._nfceItem, strCupom, 0);
                                instrucao.compactScript(instrucao._nfceItem, "nfceItem");
                                workObject.modoPdv(false); //Libera rotina loop
                            }
                        }
                    }
                }
                banco.fechaConexao(); if (title != "") { this.txtTitleCupomFiscalConectorCF.Invoke((MethodInvoker)delegate { txtTitleCupomFiscalConectorCF.Text = title; }); }
            }
        }
        #endregion

        #region
        private string optionLojaRazao;
        private string optionLojaFantasia;
        private string optionLojaCgc;
        private string optionLojaIe;
        private string optionLojaIeMunicipio;
        private string optionLojaType;
        private string optionLojaCodigoEstado;
        private string optionLojaLojaUf;
        private string optionLojaCodigoMunicipio;
        private string optionLojaTypeLoja;
        private string optionLojaaliquotaPis;
        private string optionLojaAliquotaCofins;
        private string optionLojaControlaEstoque;
        private string optionLojaTypeCalculo;
        private string optionLojaEmpresaTroca;
        private string optionLojaAliquotaInss;
        private string optionLojaAliquotaIss;
        private string optionLojaMatriz;
        private string optionLojaDeposito;
        private string optionLojaSerieNota;
        private string optionLojaNumeroNota;
        private string optionLojaAtualizaCusto;
        private string optionLojaStatus;
        private string optionLojaRamo;
        private string optionLojaBairro;
        private string optionLojaComplemento;
        private string optionLojaMunicipio;
        private string optionLojaEstado;
        private string optionLojaNumber;
        private string optionLojaCEP;
        private string optionLojaCodEnd;
        private string optionLojaSeq;
        private string optionLojaIdBairro;
        private string optionLojaTipoEndereco;
        private string optionLojaLogradouro;
        private string optionLojaIdPais;
        private string optionLojaCodigoUf;

        public void conector_carrega_loja(string loja)
        {
            try
            {
                auxConsistencia = 0;
                title = banco.abreConexao();
                banco.startTransaction("conector_find_loja");
                banco.addParametro("tipo", "1");
                banco.addParametro("find_loja", loja);
                banco.procedimentoRead();
                if (banco.retornaRead().Read() == true)
                {
                    optionLojaRazao = banco.retornaRead().GetString(1);
                    optionLojaFantasia = banco.retornaRead().GetString(2);
                    optionLojaCgc = banco.retornaRead().GetString(3);
                    optionLojaIe = banco.retornaRead().GetString(4);
                    optionLojaIeMunicipio = banco.retornaRead().GetString(5);
                    optionLojaType = banco.retornaRead().GetString(6);
                    optionLojaCodigoEstado = banco.retornaRead().GetString(7);
                    optionLojaLojaUf = banco.retornaRead().GetString(8);
                    optionLojaCodigoMunicipio = banco.retornaRead().GetString(9);
                    optionLojaTypeLoja = banco.retornaRead().GetString(10);
                    optionLojaaliquotaPis = banco.retornaRead().GetString(11);
                    optionLojaAliquotaCofins = banco.retornaRead().GetString(12);
                    optionLojaControlaEstoque = banco.retornaRead().GetString(13);
                    optionLojaTypeCalculo = banco.retornaRead().GetString(14);
                    optionLojaEmpresaTroca = banco.retornaRead().GetString(15);
                    optionLojaAliquotaInss = banco.retornaRead().GetString(16);
                    optionLojaAliquotaIss = banco.retornaRead().GetString(17);
                    optionLojaMatriz = banco.retornaRead().GetString(18);
                    optionLojaDeposito = banco.retornaRead().GetString(19);
                    optionLojaSerieNota = banco.retornaRead().GetString(20);
                    optionLojaNumeroNota = banco.retornaRead().GetString(21);
                    optionLojaAtualizaCusto = banco.retornaRead().GetString(22);
                    optionLojaStatus = banco.retornaRead().GetString(23);
                    optionLojaRamo = banco.retornaRead().GetString(24);
                    optionLojaBairro = banco.retornaRead().GetString(25);
                    optionLojaComplemento = banco.retornaRead().GetString(26);
                    optionLojaMunicipio = banco.retornaRead().GetString(27);
                    optionLojaEstado = banco.retornaRead().GetString(28);
                    optionLojaNumber = banco.retornaRead().GetString(29);
                    optionLojaCEP = banco.retornaRead().GetString(30);
                    optionLojaCodEnd = banco.retornaRead().GetString(31);
                    optionLojaSeq = banco.retornaRead().GetString(32);
                    optionLojaIdBairro = banco.retornaRead().GetString(33);
                    optionLojaTipoEndereco = banco.retornaRead().GetString(34);
                    optionLojaLogradouro = banco.retornaRead().GetString(35);
                    optionLojaIdPais = banco.retornaRead().GetString(36);
                    optionLojaCodigoUf = banco.retornaRead().GetString(39);
                }
                banco.fechaRead();
            }
            catch (Exception erro)
            {
                msg = new msgInfo(1, "Erro não identificado, entre contato como revendedor! " + erro.Message); msg.ShowDialog();
                auxConsistencia = 1;
            }
            finally
            {
                banco.fechaConexao(); if (title != "") { this.txtTitleCupomFiscalConectorCF.Invoke((MethodInvoker)delegate { txtTitleCupomFiscalConectorCF.Text = title; }); }
                if (auxConsistencia == 0)
                {
                    listaIdentificacaoEmitenteNfe.Add(identificacaoEmitenteNfe);
                    listaIdentificacaoEmitenteNfe[0].emit_xNome = optionLojaRazao;
                    listaIdentificacaoEmitenteNfe[0].emit_xFant = optionLojaFantasia;
                    listaIdentificacaoEmitenteNfe[0].emit_enderEmi_xBairro = optionLojaBairro;
                    listaIdentificacaoEmitenteNfe[0].emit_enderEmi_xLgr = optionLojaLogradouro;
                    listaIdentificacaoEmitenteNfe[0].emit_enderEmi_nro = optionLojaNumber;
                    listaIdentificacaoEmitenteNfe[0].emit_enderEmi_xCpl = optionLojaComplemento;
                    listaIdentificacaoEmitenteNfe[0].emit_enderEmi_xMun = optionLojaMunicipio;
                    listaIdentificacaoEmitenteNfe[0].emit_enderEmi_cMun = optionLojaCodigoMunicipio;
                    listaIdentificacaoEmitenteNfe[0].emit_enderEmi_UF = optionLojaLojaUf;
                    listaIdentificacaoEmitenteNfe[0].emit_CNPJ = optionLojaCgc;
                    listaIdentificacaoEmitenteNfe[0].emit_enderEmi_CEP = optionLojaCEP;
                    listaIdentificacaoEmitenteNfe[0].emit_enderEmi_IE = optionLojaIe;
                    listaIdentificacaoEmitenteNfe[0].emit_enderEmi_IM = optionLojaIeMunicipio;
                    string crt = optionLojaRamo;
                    /*                        dadosIdentificacaoEmitenteNfe identificacaoEmitenteNfe = new dadosIdentificacaoEmitenteNfe(null,
                                                null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null);*/
                    switch (optionLojaRamo)
                    {
                        case "s":
                            crt = "1";
                            break;
                        case "h":
                            crt = "2";
                            break;
                        case "r":
                            crt = "3";
                            break;
                    }
                    listaIdentificacaoEmitenteNfe[0].emit_enderEmi_fone = "03436626779";//optionTelefone; Flavio
                    listaIdentificacaoEmitenteNfe[0].emit_enderEmi_CRT = crt;
                    listaIdentificacaoEmitenteNfe[0].emit_enderEmi_CNAE = null;
                }
            }
        }

        #endregion
        void conector_via_cliente(int loop)
        {
            for (int w = 0; w < loop; w++)
            {
               // fiscal_retorno = conectorECF.Bematech_FI_UsaComprovanteNaoFiscalVinculado("OPERADOR DE CAIXA : " + lbOperadorConectorCF.Text + "\n" + "LOJA [AUTENTICACAO] - " + alwaysVariables.Store + "\n");
                if (loop == 2 && w == 0)
                {
                    functionECF.conectorECF_RelatorioGerencial(alwaysVariables.ModeloEcf, "       V I A    E S T A B E L E C I M E N T O     " + "\n" + "OPERADOR DE CAIXA : " + lbOperadorConectorCF.Text + "\n" + "LOJA [AUTENTICACAO] - " + alwaysVariables.Store + "\n", ref fiscal_MSG, ref fiscal_retorno, alwaysVariables.ECF_Ligada);
                    //fiscal_retorno = conectorECF.Bematech_FI_RelatorioGerencial("       V I A    E S T A B E L E C I M E N T O     " + "\n" + "OPERADOR DE CAIXA : " + lbOperadorConectorCF.Text + "\n" + "LOJA [AUTENTICACAO] - " + alwaysVariables.Store + "\n");
                }
                else
                {
                    functionECF.conectorECF_RelatorioGerencial(alwaysVariables.ModeloEcf, "    R E C I B O  -  V I A   D O  C L I E N T E    " + "\n" + "OPERADOR DE CAIXA : " + lbOperadorConectorCF.Text + "\n" + "LOJA [AUTENTICACAO] - " + alwaysVariables.Store + "\n", ref fiscal_MSG, ref fiscal_retorno, alwaysVariables.ECF_Ligada);
                    //fiscal_retorno = conectorECF.Bematech_FI_RelatorioGerencial("    R E C I B O  -  V I A   D O  C L I E N T E    " + "\n" + "OPERADOR DE CAIXA : " + lbOperadorConectorCF.Text + "\n" + "LOJA [AUTENTICACAO] - " + alwaysVariables.Store + "\n");
                }
                
                countField = 0;
                countRows = 0;
                auxConsistencia = 0;
                input_troco = "0,00";

                try
                {
                    if (w == 0)
                    {
                        title = banco.abreConexao();
                        banco.startTransaction("conectorPDV_aut_crediario");
                        banco.addParametro("carne", txtNumeroContratoConectorCF.Text);
                        banco.addParametro("nr_parcela", txtParcelaConectorCF.Text);
                        banco.addParametro("pgto", String.Format("{0:yyyyMMdd}", DateTime.Now));
                        banco.procedimentoSet();
                        banco.procedimentoRead();
                        if (banco.retornaRead().Read() == true)
                        {
                            auxRecebimentoStore = (banco.retornaRead().GetString(2));
                            auxRecebimentoCarne = (banco.retornaRead().GetString(3));
                            auxRecebimentoPgto = (banco.retornaRead().GetString(4));
                            auxRecebimentoParcela = (banco.retornaRead().GetString(5));
                            auxRecebimentoValorPgto = (banco.retornaRead().GetString(6));
                            auxRecebimentoParcela = (banco.retornaRead().GetString(7));
                        }
                    }
                }
                catch (Exception erro)
                {
                    auxConsistencia = 1;
                    //throw new Exception("ERRO BANCO DE DADOS: " + erro.Message.ToString());
                }
                finally
                {
                    if (auxConsistencia == 0)
                    {
                        functionECF.conectorECF_UsaComprovanteNaoFiscalVinculado(alwaysVariables.ModeloEcf, "COMPROVANTE DE PAGAMENTO ", ref fiscal_MSG, ref fiscal_retorno, alwaysVariables.ECF_Ligada);
                        functionECF.conectorECF_UsaComprovanteNaoFiscalVinculado(alwaysVariables.ModeloEcf, "================================================ ", ref fiscal_MSG, ref fiscal_retorno, alwaysVariables.ECF_Ligada);
                        functionECF.conectorECF_UsaComprovanteNaoFiscalVinculado(alwaysVariables.ModeloEcf, "COD DO CLIENTE.....: " + auxIdCliente, ref fiscal_MSG, ref fiscal_retorno, alwaysVariables.ECF_Ligada);
                        functionECF.conectorECF_UsaComprovanteNaoFiscalVinculado(alwaysVariables.ModeloEcf, "LOJA.....COMPRA....:" + auxRecebimentoStore, ref fiscal_MSG, ref fiscal_retorno, alwaysVariables.ECF_Ligada);
                        functionECF.conectorECF_UsaComprovanteNaoFiscalVinculado(alwaysVariables.ModeloEcf, "CONTRATO...........: " + auxRecebimentoCarne, ref fiscal_MSG, ref fiscal_retorno, alwaysVariables.ECF_Ligada);
                        functionECF.conectorECF_UsaComprovanteNaoFiscalVinculado(alwaysVariables.ModeloEcf, "PARCELAMENTO.......: " + auxRecebimentoParcelamento + "  PARCELA  - " + auxRecebimentoParcela, ref fiscal_MSG, ref fiscal_retorno, alwaysVariables.ECF_Ligada);
                        functionECF.conectorECF_UsaComprovanteNaoFiscalVinculado(alwaysVariables.ModeloEcf, "CPF/CNPJ...........: " + auxCPFCNPJ, ref fiscal_MSG, ref fiscal_retorno, alwaysVariables.ECF_Ligada);
                        functionECF.conectorECF_UsaComprovanteNaoFiscalVinculado(alwaysVariables.ModeloEcf, "NOME/RAZAO.........: " + auxNomeRazao, ref fiscal_MSG, ref fiscal_retorno, alwaysVariables.ECF_Ligada);
                        functionECF.conectorECF_UsaComprovanteNaoFiscalVinculado(alwaysVariables.ModeloEcf, "ENDERECO...........: " + auxLogradouro, ref fiscal_MSG, ref fiscal_retorno, alwaysVariables.ECF_Ligada);
                        functionECF.conectorECF_UsaComprovanteNaoFiscalVinculado(alwaysVariables.ModeloEcf, "================================================ ", ref fiscal_MSG, ref fiscal_retorno, alwaysVariables.ECF_Ligada);
                        functionECF.conectorECF_UsaComprovanteNaoFiscalVinculado(alwaysVariables.ModeloEcf, "------ F O R M A  D E  P A G A M E N T O ------- ", ref fiscal_MSG, ref fiscal_retorno, alwaysVariables.ECF_Ligada);
                        functionECF.conectorECF_UsaComprovanteNaoFiscalVinculado(alwaysVariables.ModeloEcf, "------------------------------------------------ ", ref fiscal_MSG, ref fiscal_retorno, alwaysVariables.ECF_Ligada);
                        
                        
                        /*fiscal_retorno = conectorECF.Bematech_FI_UsaComprovanteNaoFiscalVinculado("COMPROVANTE DE PAGAMENTO ");
                        fiscal_retorno = conectorECF.Bematech_FI_UsaComprovanteNaoFiscalVinculado("================================================ ");
                        fiscal_retorno = conectorECF.Bematech_FI_UsaComprovanteNaoFiscalVinculado("COD DO CLIENTE.....: " + auxIdCliente);
                        fiscal_retorno = conectorECF.Bematech_FI_UsaComprovanteNaoFiscalVinculado("LOJA.....COMPRA....:" + auxRecebimentoStore);
                        fiscal_retorno = conectorECF.Bematech_FI_UsaComprovanteNaoFiscalVinculado("CONTRATO...........: " + auxRecebimentoCarne);
                        fiscal_retorno = conectorECF.Bematech_FI_UsaComprovanteNaoFiscalVinculado("PARCELAMENTO.......: " + auxRecebimentoParcelamento + "  PARCELA  - " + auxRecebimentoParcela);
                        fiscal_retorno = conectorECF.Bematech_FI_UsaComprovanteNaoFiscalVinculado("CPF/CNPJ...........: " + auxCPFCNPJ );
                        fiscal_retorno = conectorECF.Bematech_FI_UsaComprovanteNaoFiscalVinculado("NOME/RAZAO.........: " + auxNomeRazao);
                        fiscal_retorno = conectorECF.Bematech_FI_UsaComprovanteNaoFiscalVinculado("ENDERECO...........: " + auxLogradouro);
                        fiscal_retorno = conectorECF.Bematech_FI_UsaComprovanteNaoFiscalVinculado("================================================ ");
                        fiscal_retorno = conectorECF.Bematech_FI_UsaComprovanteNaoFiscalVinculado("------ F O R M A  D E  P A G A M E N T O ------- ");
                        fiscal_retorno = conectorECF.Bematech_FI_UsaComprovanteNaoFiscalVinculado("------------------------------------------------ ");*/
                        countField = banco.retornaSet().Tables[0].Columns.Count;
                        countRows = banco.retornaSet().Tables[0].DefaultView.Count;
                        if (countRows > 0)
                        {
                            for (i = 0; i < countRows; i++)
                            {
                                switch (Convert.ToInt32((banco.retornaSet().Tables[0].Rows[i][0])))
                                {
                                    case 1:
                                        if ((Convert.ToDecimal(banco.retornaSet().Tables[0].Rows[i][6].ToString().Replace(",", "."))) <= 0)
                                        {
                                            input_troco = banco.retornaSet().Tables[0].Rows[i][6].ToString().Replace(".", ",");
                                        }
                                        else
                                        {
                                            functionECF.conectorECF_UsaComprovanteNaoFiscalVinculado(alwaysVariables.ModeloEcf, "01 DINHEIRO        =       R$ " + String.Format("{0:F2}", banco.retornaSet().Tables[0].Rows[i][6]).Replace(".", ","), ref fiscal_MSG, ref fiscal_retorno, alwaysVariables.ECF_Ligada);
                                            //fiscal_retorno = conectorECF.Bematech_FI_UsaComprovanteNaoFiscalVinculado("01 DINHEIRO        =       R$ " + String.Format("{0:F2}", banco.retornaSet().Tables[0].Rows[i][6]).Replace(".", ","));
                                        }

                                        break;
                                    case 2:
                                        functionECF.conectorECF_UsaComprovanteNaoFiscalVinculado(alwaysVariables.ModeloEcf, "02 CHEQUE        =       R$ " + String.Format("{0:F2}", banco.retornaSet().Tables[0].Rows[i][6]).Replace(".", ","), ref fiscal_MSG, ref fiscal_retorno, alwaysVariables.ECF_Ligada);
                                        //fiscal_retorno = conectorECF.Bematech_FI_UsaComprovanteNaoFiscalVinculado("02 CHEQUE        =       R$ " + String.Format("{0:F2}", banco.retornaSet().Tables[0].Rows[i][6]).Replace(".", ","));
                                        break;
                                    case 3:
                                        functionECF.conectorECF_UsaComprovanteNaoFiscalVinculado(alwaysVariables.ModeloEcf, "03 CREDIARIO     =       R$ " + String.Format("{0:F2}", banco.retornaSet().Tables[0].Rows[i][6]).Replace(".", ","), ref fiscal_MSG, ref fiscal_retorno, alwaysVariables.ECF_Ligada);
                                        //fiscal_retorno = conectorECF.Bematech_FI_UsaComprovanteNaoFiscalVinculado("03 CREDIARIO     =       R$ " + String.Format("{0:F2}", banco.retornaSet().Tables[0].Rows[i][6]).Replace(".", ","));
                                        break;
                                    case 6:
                                        functionECF.conectorECF_UsaComprovanteNaoFiscalVinculado(alwaysVariables.ModeloEcf, "04 CARTAO        =       R$ " + String.Format("{0:F2}", banco.retornaSet().Tables[0].Rows[i][6]).Replace(".", ","), ref fiscal_MSG, ref fiscal_retorno, alwaysVariables.ECF_Ligada);
                                        //fiscal_retorno = conectorECF.Bematech_FI_UsaComprovanteNaoFiscalVinculado("04 CARTAO        =       R$ " + String.Format("{0:F2}", banco.retornaSet().Tables[0].Rows[i][6]).Replace(".", ","));
                                        break;
                                    case 10:
                                        functionECF.conectorECF_UsaComprovanteNaoFiscalVinculado(alwaysVariables.ModeloEcf, "10 VALE          =       R$ " + String.Format("{0:F2}", banco.retornaSet().Tables[0].Rows[i][6]).Replace(".", ","), ref fiscal_MSG, ref fiscal_retorno, alwaysVariables.ECF_Ligada);
                                        //fiscal_retorno = conectorECF.Bematech_FI_UsaComprovanteNaoFiscalVinculado("10 VALE          =       R$ " + String.Format("{0:F2}", banco.retornaSet().Tables[0].Rows[i][6]).Replace(".", ","));
                                        break;
                                }
                                //dgvPesquisaGrupo.DataSource = banco.retornaSet().Tables[0].DefaultView;
                            }
                        }
                    }
                }

                functionECF.conectorECF_UsaComprovanteNaoFiscalVinculado(alwaysVariables.ModeloEcf, "------------------------------------------------", ref fiscal_MSG, ref fiscal_retorno, alwaysVariables.ECF_Ligada);
                functionECF.conectorECF_UsaComprovanteNaoFiscalVinculado(alwaysVariables.ModeloEcf, "----------  T O T A L I Z A D O R E S  ---------", ref fiscal_MSG, ref fiscal_retorno, alwaysVariables.ECF_Ligada);
                functionECF.conectorECF_UsaComprovanteNaoFiscalVinculado(alwaysVariables.ModeloEcf, "------------------------------------------------", ref fiscal_MSG, ref fiscal_retorno, alwaysVariables.ECF_Ligada);
                functionECF.conectorECF_UsaComprovanteNaoFiscalVinculado(alwaysVariables.ModeloEcf, "SUB-TOTAL            =         R$ " + String.Format("{0:F2}", banco.retornaSet().Tables[0].Rows[0][8]).Replace(".", ","), ref fiscal_MSG, ref fiscal_retorno, alwaysVariables.ECF_Ligada);
                functionECF.conectorECF_UsaComprovanteNaoFiscalVinculado(alwaysVariables.ModeloEcf, "DESCONTO             =         R$ " + txtValorDescontoConectorCF.Text.Replace(".", ","), ref fiscal_MSG, ref fiscal_retorno, alwaysVariables.ECF_Ligada);
                functionECF.conectorECF_UsaComprovanteNaoFiscalVinculado(alwaysVariables.ModeloEcf, "ACRESCIMO            =         R$ " + "0,00", ref fiscal_MSG, ref fiscal_retorno, alwaysVariables.ECF_Ligada);
                functionECF.conectorECF_UsaComprovanteNaoFiscalVinculado(alwaysVariables.ModeloEcf, "TROCO                =         R$ " + txtValorTrocoConectorCF.Text.Replace(".", ","), ref fiscal_MSG, ref fiscal_retorno, alwaysVariables.ECF_Ligada);
                functionECF.conectorECF_UsaComprovanteNaoFiscalVinculado(alwaysVariables.ModeloEcf, "------------------------------------------------  ", ref fiscal_MSG, ref fiscal_retorno, alwaysVariables.ECF_Ligada);
                functionECF.conectorECF_UsaComprovanteNaoFiscalVinculado(alwaysVariables.ModeloEcf, "VALOR PAGO           =         R$ " + String.Format("{0:F2}", banco.retornaSet().Tables[0].Rows[0][9]).Replace(".", ","), ref fiscal_MSG, ref fiscal_retorno, alwaysVariables.ECF_Ligada);

                /*fiscal_retorno = conectorECF.Bematech_FI_UsaComprovanteNaoFiscalVinculado("------------------------------------------------");
                fiscal_retorno = conectorECF.Bematech_FI_UsaComprovanteNaoFiscalVinculado("----------  T O T A L I Z A D O R E S  ---------");
                fiscal_retorno = conectorECF.Bematech_FI_UsaComprovanteNaoFiscalVinculado("------------------------------------------------");
                fiscal_retorno = conectorECF.Bematech_FI_UsaComprovanteNaoFiscalVinculado("SUB-TOTAL            =         R$ " + String.Format("{0:F2}", banco.retornaSet().Tables[0].Rows[0][8]).Replace(".", ","));
                fiscal_retorno = conectorECF.Bematech_FI_UsaComprovanteNaoFiscalVinculado("DESCONTO             =         R$ " + txtValorDescontoConectorCF.Text.Replace(".", ","));
                fiscal_retorno = conectorECF.Bematech_FI_UsaComprovanteNaoFiscalVinculado("ACRESCIMO            =         R$ " + "0,00");
                fiscal_retorno = conectorECF.Bematech_FI_UsaComprovanteNaoFiscalVinculado("TROCO                =         R$ " + txtValorTrocoConectorCF.Text.Replace(".", ","));
                fiscal_retorno = conectorECF.Bematech_FI_UsaComprovanteNaoFiscalVinculado("------------------------------------------------  ");
                fiscal_retorno = conectorECF.Bematech_FI_UsaComprovanteNaoFiscalVinculado("VALOR PAGO           =         R$ " + String.Format("{0:F2}", banco.retornaSet().Tables[0].Rows[0][9]).Replace(".", ","));*/
                if (w > 0)
                {
                    functionECF.conectorECF_UsaComprovanteNaoFiscalVinculado(alwaysVariables.ModeloEcf, "================================================  ", ref fiscal_MSG, ref fiscal_retorno, alwaysVariables.ECF_Ligada);
                    functionECF.conectorECF_UsaComprovanteNaoFiscalVinculado(alwaysVariables.ModeloEcf, "================== R E C O R T E ===============  ", ref fiscal_MSG, ref fiscal_retorno, alwaysVariables.ECF_Ligada);
                    functionECF.conectorECF_UsaComprovanteNaoFiscalVinculado(alwaysVariables.ModeloEcf, "======================================2a V.I.A==  ", ref fiscal_MSG, ref fiscal_retorno, alwaysVariables.ECF_Ligada);
                    /*fiscal_retorno = conectorECF.Bematech_FI_UsaComprovanteNaoFiscalVinculado("================================================  ");
                    fiscal_retorno = conectorECF.Bematech_FI_UsaComprovanteNaoFiscalVinculado("================== R E C O R T E ===============  ");
                    fiscal_retorno = conectorECF.Bematech_FI_UsaComprovanteNaoFiscalVinculado("======================================2a V.I.A==  ");*/
                }
                //conectorECF.Analisa_iRetorno(fiscal_retorno, ref fiscal_MSG);
            }
            banco.fechaConexao(); if (title != "") { this.txtTitleCupomFiscalConectorCF.Invoke((MethodInvoker)delegate { txtTitleCupomFiscalConectorCF.Text = title; }); }
            if (auxConsistencia == 0)
            {
                //functionECF.conectorECF_AcionaGuilhotinaMFD(alwaysVariables.ModeloEcf, 1 , ref fiscal_MSG, ref fiscal_retorno, alwaysVariables.ECF_Ligada);
                //fiscal_retorno = conectorECF.Bematech_FI_AcionaGuilhotinaCV0909(1);
                //fiscal_retorno = conectorECF.Bematech_FI_AcionaGuilhotinaMFD(1);
                functionECF.conectorECF_FechaRelatorioGerencial(alwaysVariables.ModeloEcf, ref fiscal_MSG, ref fiscal_retorno, alwaysVariables.ECF_Ligada);
                //fiscal_retorno = conectorECF.Bematech_FI_FechaRelatorioGerencial();
                if (fiscal_retorno == 1)
                {
                    //conectorPDV_inc_cupom_relatorio("CC", null);
                    
                    if (backgroundConectorRelatorioCCartao.IsBusy != true)
                    {
                        // Start the asynchronous operation.
                        backgroundConectorRelatorioCCartao.RunWorkerAsync();
                    }
                    arranqueRelatorioCC = 1;
                }
                auxCPFCNPJ = auxNomeRazao = auxLogradouro = "";
            }
            else
            {
                msg = new msgInfo("ERRO FATAL O EXECUTE O DESFAZIMENTO DO PRESTAÇÃO...!"); msg.ShowDialog();
                functionECF.conectorECF_CancelaRecebimentoNaoFiscalMFD(alwaysVariables.ModeloEcf, auxCPFCNPJ, auxNomeRazao, auxLogradouro, ref fiscal_MSG, ref fiscal_retorno, alwaysVariables.ECF_Ligada);
                //conectorECF.Bematech_FI_CancelaRecebimentoNaoFiscalMFD(auxCPFCNPJ, auxNomeRazao, auxLogradouro);
                //conectorECF.Analisa_iRetorno(fiscal_retorno, ref fiscal_MSG);
                vetorRecebimento = new string[12] { "#", "#", "#", "#", "#", "#", "#", "#", "#", "#", "#", "#" };
            }
        }
        void zeraListas()
        {
            listaIdentificacaoNfe = new List<dadosIdentificacaoNfe>();
            listaDocumentoFiscalDiferenciado = new List<dadosDocumentoFiscalDiferenciado>();
            //listaIdentificacaoEmitenteNfe = new List<dadosIdentificacaoEmitenteNfe>();
            listaIdentificacaoDestinatarioNfe = new List<dadosIdentificacaoDestinatárioNfe>();
            listaIdentificacaoLocalRetirada = new List<dadosIdentificacaoLocalRetirada>();
            listaIdentificacaoLocalEntrega = new List<dadosIdentificacaoLocalEntrega>();
            listaAutorizacaoObterXml = new List<dadosAutorizacaoObterXml>();
            listaDetalhamentoProdutosNfe = new List<dadosDetalhamentoProdutosNfe>();
            listaProdutosServicosNfe = new List<dadosProdutosServicosNfe>();
            listaProdutosServicosDeclaracaoImportacao = new List<dadosProdutosServicosDeclaracaoImportacao>();
            listaProdutosServicosGrupoExportacao = new List<dadosProdutosServicosGrupoExportacao>();
            listaProdutosServicosPedidoCompra = new List<dadosProdutosServicosPedidoCompra>();
            listaProdutosServicosGrupoDiversos = new List<dadosProdutosServicosGrupoDiversos>();
            listaDetalhamentoEspecificoVeiculosNovos = new List<dadosDetalhamentoEspecificoVeiculosNovos>();
            listaDetalhamentoEspecificoMedicamentoMateriasPrimasFarmaceuticas = new List<dadosDetalhamentoEspecificoMedicamentoMateriasPrimasFarmaceuticas>();
            listaDetalhamentoEspecificoArmamentos = new List<dadosDetalhamentoEspecificoArmamentos>();
            listaDetalhamentoEspecificoCombustiveis = new List<dadosDetalhamentoEspecificoCombustiveis>();
            listaDetalhamentoEspecificoOperacaoPapelImune = new List<dadosDetalhamentoEspecificoOperacaoPapelImune>();
            listaTributosIncidentesProdutoServico = new List<dadosTributosIncidentesProdutoServico>();
            listaICMSNormalST = new List<dadosICMSNormalST>();
            listaImpostoProdutosIndustrializados = new List<dadosImpostoProdutosIndustrializados>();
            listaImpostoImportacao = new List<dadosImpostoImportacao>();
            listaPis = new List<dadosPis>();
            listaPisST = new List<dadosPisST>();
            listaCofins = new List<dadosCofins>();
            listaCofinsST = new List<dadosCofinsST>();
            listaISSQN = new List<dadosISSQN>();
            listaTributosDevolvidos = new List<dadosTributosDevolvidos>();
            listaInformacoesAdicionais = new List<dadosInformacoesAdicionais>();
            listaTotalNFe = new List<dadosTotalNFe>();
            listaTotalNFeISSQN = new List<dadosTotalNFeISSQN>();
            listaTotalNFeRetencaoTributos = new List<dadosTotalNFeRetencaoTributos>();
            listaInformacoesTransporteNFe = new List<dadosInformacoesTransporteNFe>();
            listaDadosCobranca = new List<dadosDadosCobranca>();
            listaFormasPagamento = new List<dadosFormasPagamento>();
            listaInformacoesAdicionaisNFe = new List<dadosInformacoesAdicionaisNFe>();
            listaInformacoesComercioExterior = new List<dadosInformacoesComercioExterior>();
            listaInformacoesCompras = new List<dadosInformacoesCompras>();
            listaInformacoesRegistroAquisicaoCana = new List<dadosInformacoesRegistroAquisicaoCana>();
            listaAssinatura = new List<dadosAssinatura>();
        }
        void returnDefaultPDV()
        {
            vetorRecebimento = new string[12] { "#", "#", "#", "#", "#", "#", "#", "#", "#", "#", "#", "#" };

            btnConfirmaConectorCF.Text = "[ F10 ] - CONFIRMA  [ AUTENTICA ]";
            lbNumeroClienteConectorCF.Text = "";
            lbNomeConectorCF.Text = "";
            lbNomeUsuarioConectorCF.Text = "";
            lbMensagemConectorCF.Text = "";
            //##########Cabeçalho
            if (Convert.ToDouble(alwaysVariables.Store) > 0)
            {
                txtLojaConectorCF.Text = alwaysVariables.Store;
            }
            else
            {
                txtLojaConectorCF.Text = "0";
            }
            txtNumeroContratoConectorCF.Text = "000000000000000000000";
            txtParcelaConectorCF.Text = "0";
            //##########END Cabeçalho
            //##########Periodo
            dtpEmissaoConectorCF.Value = DateTime.Now;
            dtpPagamentoConectorCF.Value = DateTime.Now;
            txtDiasAtrasoConectorCF.Text = "0";
            //##########End Periodo
            //##########Corpo Prestação
            txtValorPrestacaoConectorCF.Text = "0,00";
            txtArmotizadoConectorCF.Text = "0,00";
            txtAcrescimoConectorCF.Text = "0,00";
            txtValorReajustadoConectorCF.Text = "0,00";
            txtComissaoCobradorConectorCF.Text = "0,00";
            txtTotalDevidoConectorCF.Text = "0,00";
            txtCodigoCobradorConectorCF.Text = "0";
            txtCodigoAvalistaConectorCF.Text = "0";
            txtHistoricoConectorCF.Clear();
            txtValorDescontoConectorCF.Text = "0,00";
            txtValorPagoConectorCF.Text = "0,00";
            txtRestanteConectorCF.Text = "0,00";
            txtValorTrocoConectorCF.Text = "0,00";
            txtNumeroUsuarioConectorCF.Text = "";
            txtSenhaLiberacaoDescontoConectorCF.Clear();
            cmbSituacaoContratoConectorCF.Text = "0 | ABERTO";
            //##########END Corpo Prestação
            txtValorMontanteConectorCF.Text = "0,00";
            txtNumeroContratoConectorCF.Select();
            txtValorMontanteConectorCF.ReadOnly = true;
            //##############Zera variaveis
            if (ataque == 0)
            {
                somatorio = 0;
                auxIdLoja = "";
                auxIdCliente = "";
                auxIdFinalizadora = "1";
                flagDiscount = "0,00";
                flagIdFuncionario = "0";
                flagFuncao = "0";
                flagDescricaoFuncionario = "";
                flagDescricaoFuncao = "";
                auxStatusParcela = "0";
                auxConsistencia = 0;
            }
            txtNumeroContratoConectorCF.ReadOnly = false;
            txtParcelaConectorCF.ReadOnly = false;
            conector_reset_recebimento();
            //##############end Zera variaveis
        }
        void conectorPDV_grade_calculo(decimal value)
        {
            bool calcMora, calcSingle, dayMora, daySingle;
            decimal jurosMora, jurosSingle;
            jurosMora = 0;
            jurosSingle = 0;
            if (alwaysVariables.CarenciaSingleMora == 0) { dayMora = true; } else { if (alwaysVariables.CarenciaSingleMora >= Convert.ToDouble(txtDiasAtrasoConectorCF.Text)) { dayMora = false; } else { dayMora = true; } }
            if (alwaysVariables.CarenciaSingleDay == 0) { daySingle = true; } else { if (alwaysVariables.CarenciaSingleDay >= Convert.ToDouble(txtDiasAtrasoConectorCF.Text)) { daySingle = false; } else { daySingle = true; } }
            if (alwaysVariables.IndiceAtrasoMora == 0) { calcMora = false; } else { calcMora = true; }
            if (alwaysVariables.IndiceSingleday == 0) { calcSingle = false; } else { calcSingle = true; }
            if (Convert.ToDouble(txtDiasAtrasoConectorCF.Text) >= (alwaysVariables.dayQuitacaoAfter * -1))
            {
                if (Convert.ToDouble(txtDiasAtrasoConectorCF.Text) <= (alwaysVariables.dayQuitacaoBefore))
                {
                    if (calcMora == true)
                    {
                        if (dayMora == true)
                        {
                            jurosMora = calculo.conector_calc_mora(value, alwaysVariables.IndiceAtrasoMora);
                            txtAcrescimoConectorCF.Text = String.Format("{0:F2}", calculo.conector_sum_acrescimo());
                        }
                    }

                    if (calcSingle == true)
                    {
                        if (daySingle == true)
                        {
                            jurosSingle = calculo.conector_calc_single(value, alwaysVariables.IndiceSingleday, Convert.ToInt32(txtDiasAtrasoConectorCF.Text));
                            txtAcrescimoConectorCF.Text = String.Format("{0:F2}", calculo.conector_sum_acrescimo());
                        }
                    }
                    txtValorReajustadoConectorCF.Text = String.Format("{0:F2}", calculo.conector_sum_reajustado(value));
                    txtTotalDevidoConectorCF.Text = txtValorReajustadoConectorCF.Text;
                }
                else
                {
                    msgInfo msg = new msgInfo("Caro Cliente - " + "Prazo maximo para o pagamento estourado, deve-se renegociar."); msg.ShowDialog();
                    returnDefaultPDV();
                }
            }
            else
            {
                msgInfo msg = new msgInfo("Caro Cliente - " + "Prazo minimo para o recebimento da parcela não satisfeito!"); msg.ShowDialog();
                returnDefaultPDV();
            }

        }
        //###########################################################END Controle de Objetos###################################################################

        //###########################################################Procedimento de Banco#####################################################################
        #region //Instrução Paf Ecf

        private string conectorPDV_PAFECF_Movimento(string tipo, string input_di, string input_df, string store, string terminal, string numero, string seq)
        {
            string[,] recarga; //Matriz Bidimencionada
            string retorno = "";

            try
            {
                auxConsistencia = 0;
                countField = 0;
                countRows = 0;
                title = banco.abreConexao();
                banco.startTransaction("conectorPDV_PAFECF_Movimento");
                banco.addParametro("tipo", tipo);
                banco.addParametro("di", input_di);
                banco.addParametro("df", input_df);
                banco.addParametro("store", store);
                banco.addParametro("cx", terminal);
                banco.addParametro("find", numero.Replace("\0","").Trim());
                banco.addParametro("seq", seq);
                banco.procedimentoSet();

            }
            catch (Exception erro) { msgInfo msg = new msgInfo("Caro Cliente - " + erro.Message); msg.ShowDialog(); auxConsistencia = 1; retorno = ""; }
            finally
            {
                if (auxConsistencia == 0)
                {
                    countField = banco.retornaSet().Tables[0].Columns.Count;
                    countRows = banco.retornaSet().Tables[0].DefaultView.Count;
                    if (countRows > 0)
                    {
                        recarga = new string[countRows, countField];
                        for (int i = 0; i < countRows; i++)//Linha
                        {
                            for (int j = 0; j < countField; j++) //Coluna
                            {
                                recarga[i, j] = Convert.ToString(banco.retornaSet().Tables[0].Rows[i][j]);
                            }
                            switch (tipo)
                            {
                                case "A2":
                                    retorno = export.registro_tipo_a2("A2", recarga[i, 0], recarga[i, 1], recarga[i, 2], recarga[i, 3]) + "\r\n";
                                            //export.registro_tipo_a2("A2", recarga[i, 0], recarga[i, 1], recarga[i, 2], recarga[i, 3])
                                    break;
                                case "H2":
                                    retorno = export.registro_tipo_h2("H2", recarga[i, 0], recarga[i, 1], recarga[i, 2], recarga[i, 3], recarga[i, 4], recarga[i, 5], recarga[i, 6], recarga[i, 7], recarga[i, 8], recarga[i, 9], recarga[i, 10], recarga[i, 11], recarga[i, 12]) + "\r\n";
                                    //retorno = export.registro_tipo_h2("H2", recarga[i, 0], recarga[i, 1], recarga[i, 2], recarga[i, 3], recarga[i, 4], recarga[i, 5], recarga[i, 6], recarga[i, 7], recarga[i, 8], recarga[i, 9], recarga[i, 10], recarga[i, 11]) + "\r\n";
                                    break;
                                case "R01":
                                    //retorno = export.registro_tipo_r01("R01", fiscal_numero_serie, fiscal_letramf_adicional.Replace("\0","").Trim(), fiscal_tipo_ecf, fiscal_marca, fiscal_modelo.Replace("\0","").Trim(), fiscal_VersaoFirmware, String.Format("{0:yyyyMMdd}", Convert.ToDateTime(fiscal_dtsoft_basico)), String.Format("{0:hhmmss}", Convert.ToDateTime(fiscal_dtsoft_basico)), fiscal_numero_caixa.Replace("\0","").Trim(), recarga[i, 0], recarga[i, 1], alwaysVariables.PAF_CNPJ, alwaysVariables.PAF_IE, alwaysVariables.PAF_IM, alwaysVariables.PAF_RAZAO, alwaysVariables.PAF_NumeroAplicativo, alwaysVariables.PAF_Versao, alwaysVariables.MD5_Main, input_di, input_df, alwaysVariables.PAF_Versao_Spec) + "\r\n";
                                    retorno = export.registro_tipo_r01("R01", recarga[i, 0],
                                    recarga[i, 1],
                                    recarga[i, 2],
                                    recarga[i, 3],
                                    recarga[i, 4],
                                    recarga[i, 5],
                                    recarga[i, 6],
                                    recarga[i, 7],
                                    recarga[i, 8],
                                    recarga[i, 9],
                                    recarga[i, 10],
                                    recarga[i, 11],
                                    recarga[i, 12],
                                    recarga[i, 13],
                                    recarga[i, 14],
                                    recarga[i, 15],
                                    recarga[i, 16],
                                    recarga[i, 17], "", "", recarga[i, 18]) + "\r\n";
                                    break;
                                case "R02":
                                    //retorno = export.registro_tipo_r02("R02", fiscal_numero_serie, fiscal_letramf_adicional.Replace("\0","").Trim(), fiscal_modelo.Replace("\0","").Trim(), recarga[i, 3], recarga[i, 7], recarga[i, 8], recarga[i, 9], recarga[i, 2], recarga[i, 10], recarga[i, 11], recarga[i, 12], recarga[i, 13]) + "\r\n";
                                    retorno = export.registro_tipo_r02("R02", recarga[i, 04].Replace("\0", "").Trim(), recarga[i, 05].Replace("\0", "").Trim(), recarga[i, 6].Replace("\0", "").Trim(), recarga[i, 3], recarga[i, 7], recarga[i, 8], recarga[i, 9], recarga[i, 2], recarga[i, 10], recarga[i, 11], recarga[i, 12], recarga[i, 13]) + "\r\n";
                                    break;
                                case "R03":
                                    //retorno = export.registro_tipo_r03("R03", fiscal_numero_serie, fiscal_letramf_adicional.Replace("\0","").Trim(), fiscal_modelo.Replace("\0","").Trim(), recarga[i, 3], recarga[i, 4], recarga[i, 5], recarga[i, 6]) + "\r\n";
                                    retorno = export.registro_tipo_r03("R03", recarga[i, 0].Replace("\0", "").Trim(), recarga[i, 1].Replace("\0", "").Trim(), recarga[i, 2].Replace("\0", "").Trim(), recarga[i, 3], recarga[i, 4], recarga[i, 5], recarga[i, 6]) + "\r\n";
                                    break;
                                case "R04":
                                    //retorno = export.registro_tipo_r04("R04", fiscal_numero_serie, fiscal_letramf_adicional.Replace("\0","").Trim(), fiscal_modelo.Replace("\0","").Trim(), lbOperadorConectorCF.Text, recarga[i, 0], recarga[i, 1], recarga[i, 2], recarga[i, 3], recarga[i, 4], recarga[i, 5], recarga[i, 6], recarga[i, 7], recarga[i, 8], recarga[i, 9], recarga[i, 10], recarga[i, 11], recarga[i, 12], recarga[i, 13]) + "\r\n";
                                    retorno = export.registro_tipo_r04("R04", recarga[i, 16].Replace("\0", "").Trim(),
                                               recarga[i, 17].Replace("\0", "").Trim(),
                                               recarga[i, 15].Replace("\0", "").Trim(),
                                               recarga[i, 14],
                                               recarga[i, 0],
                                               recarga[i, 1],
                                               recarga[i, 2],
                                               recarga[i, 3],
                                               recarga[i, 4],
                                               recarga[i, 5],
                                               recarga[i, 6],
                                               recarga[i, 7],
                                               recarga[i, 8],
                                               recarga[i, 9],
                                               recarga[i, 10],
                                               recarga[i, 11],
                                               recarga[i, 12],
                                               recarga[i, 13]) + "\r\n";
                                    break;
                                case "R05":
                                    //retorno = export.registro_tipo_r05("R05", fiscal_numero_serie, fiscal_letramf_adicional.Replace("\0","").Trim(), fiscal_modelo.Replace("\0","").Trim(), lbOperadorConectorCF.Text, recarga[i, 1], recarga[i, 0], recarga[i, 2], recarga[i, 3], recarga[i, 5], recarga[i, 6], recarga[i, 7], recarga[i, 8], recarga[i, 9], recarga[i, 10], recarga[i, 11], recarga[i, 12], recarga[i, 13], recarga[i, 14], recarga[i, 15], recarga[i, 16], recarga[i, 17], recarga[i, 18], "3", "2") + "\r\n";
                                    retorno = export.registro_tipo_r05("R05",
                                           recarga[i, 0].Replace("\0", "").Trim(),
                                           recarga[i, 1].Replace("\0", "").Trim(),
                                           recarga[i, 2].Replace("\0", "").Trim(),
                                           recarga[i, 3],
                                           recarga[i, 4],
                                           recarga[i, 5],
                                           recarga[i, 6],
                                           recarga[i, 7],
                                           recarga[i, 8],
                                           recarga[i, 9],
                                           recarga[i, 10],
                                           recarga[i, 11],
                                           recarga[i, 12],
                                           recarga[i, 13],
                                           recarga[i, 14],
                                           recarga[i, 15],
                                           recarga[i, 16],
                                           recarga[i, 17],
                                           recarga[i, 18],
                                           recarga[i, 19],
                                           recarga[i, 20], recarga[i, 21], recarga[i, 22], recarga[i, 23]) + "\r\n";
                                    break;
                                case "R06":
                                    //retorno = export.registro_tipo_r06("R06", fiscal_numero_serie, fiscal_letramf_adicional.Replace("\0","").Trim(), fiscal_modelo.Replace("\0","").Trim(), lbOperadorConectorCF.Text, recarga[i, 0], recarga[i, 1], recarga[i, 2], recarga[i, 3], recarga[i, 4], recarga[i, 5], recarga[i, 6]) + "\r\n";
                                    retorno = export.registro_tipo_r06("R06",
                                               recarga[i, 0].Replace("\0", "").Trim(),
                                               recarga[i, 1].Replace("\0", "").Trim(),
                                               recarga[i, 2].Replace("\0", "").Trim(),
                                               recarga[i, 3],
                                               recarga[i, 4],
                                               recarga[i, 5],
                                               recarga[i, 6],
                                               recarga[i, 7],
                                               recarga[i, 8],
                                               recarga[i, 9],
                                               recarga[i, 10]) + "\r\n";
                                    break;
                                case "R07":
                                    //retorno = export.registro_tipo_r07("R07", fiscal_numero_serie, fiscal_letramf_adicional.Replace("\0","").Trim(), fiscal_modelo.Replace("\0","").Trim(), lbOperadorConectorCF.Text, recarga[i, 0], recarga[i, 1], recarga[i, 2], recarga[i, 3], recarga[i, 4], recarga[i, 5], recarga[i, 6]) + "\r\n";
                                    retorno = export.registro_tipo_r07("R07",
                                               recarga[i, 0].Replace("\0", "").Trim(),
                                               recarga[i, 1].Replace("\0", "").Trim(),
                                               recarga[i, 2].Replace("\0", "").Trim(),
                                               recarga[i, 3],
                                               recarga[i, 4],
                                               recarga[i, 5],
                                               recarga[i, 6],
                                               recarga[i, 7],
                                               recarga[i, 8],
                                               recarga[i, 9],
                                               recarga[i, 10]) + "\r\n";
                                    break;
                                case "RA7":
                                    retorno = export.registro_tipo_rA7(recarga[i, 0]) + "\r\n";
                                    break;
                                case "U1":
                                    retorno = export.registro_tipo_a2("U1", recarga[i, 0], recarga[i, 1], recarga[i, 2], recarga[i, 4]) + "\r\n";
                                    break;
                                default:
                                    retorno = "";
                                    break;
                            }
                        }
                    }
                    else
                    {
                        retorno = "";
                    }
                }
                banco.fechaConexao(); if (title != "") { this.txtTitleCupomFiscalConectorCF.Invoke((MethodInvoker)delegate { txtTitleCupomFiscalConectorCF.Text = title; }); }
            }
            return retorno;
        }

        private void conectorPDV_PAFECF_exe(string tipo, string numero, int sinal, string item, string seq)
        {
            string[,] recarga1 = new string[0,0]; //Matriz Bidimencionada
            string[,] recarga; //Matriz Bidimencionada
            string retorno = "";
            int rows = 0;
            int field = 0;
            try
            {
                auxConsistencia = 0;
                countField = 0;
                countRows = 0;
                title = banco.abreConexao();
                if (banco.statusSchema() == 1)
                {
                    this.lbStatusBancoConectorCF.Invoke((MethodInvoker)delegate { lbStatusBancoConectorCF.Text = "ON LINE"; });
                    this.lbStatusBancoConectorCF.Invoke((MethodInvoker)delegate { this.lbStatusBancoConectorCF.ForeColor = System.Drawing.Color.Cyan; });
                }
                else
                {
                    this.lbStatusBancoConectorCF.Invoke((MethodInvoker)delegate { lbStatusBancoConectorCF.Text = "OFF LINE"; });
                    this.lbStatusBancoConectorCF.Invoke((MethodInvoker)delegate { this.lbStatusBancoConectorCF.ForeColor = System.Drawing.Color.Red; });
                }
                banco.startTransaction("conectorPDV_PAFECF_exe");
                banco.addParametro("tipo", sinal.ToString());
                banco.addParametro("varNum", numero.Replace("\0", "").Trim());
                banco.addParametro("item", item.Replace("\0", "").Trim());
                banco.addParametro("seq", seq.Replace("\0", "").Trim());
                if (item.Replace("\0", "").Trim() != "")
                {
                    banco.procedimentoSet();
                }
                else
                {
                    auxConsistencia = 1;
                }

            }
            catch (Exception erro) { msgInfo msg = new msgInfo("Caro Cliente - " + erro.Message); msg.ShowDialog(); auxConsistencia = 1; retorno = ""; }
            finally
            {
                if (auxConsistencia == 0)
                {
                    field = banco.retornaSet().Tables[0].Columns.Count;
                    rows = banco.retornaSet().Tables[0].DefaultView.Count;
                    
                    vetorR07 = null;
                    vetorRA7 = null;
                    if (rows > 0)
                    {
                        recarga1 = new string[rows, field];
                        
                        for (int i = 0; i < rows; i++)//Linha
                        {
                            for (int j = 0; j < field; j++) //Coluna
                            {
                                recarga1[i, j] = Convert.ToString(banco.retornaSet().Tables[0].Rows[i][j]);
                            }
                        }
                    }
                }
                banco.fechaConexao(); if (title != "") { this.txtTitleCupomFiscalConectorCF.Invoke((MethodInvoker)delegate { txtTitleCupomFiscalConectorCF.Text = title; }); }
                if (rows > 0 && auxConsistencia == 0)
                {
                    recarga = new string[rows, field];
                    recarga = recarga1;
                    vetorR07 = new string[rows];
                    vetorRA7 = new string[rows];

                    for (int i = 0; i < rows; i++)//Linha
                    {
                        switch (tipo)
                        {
                            case "R04":
                                //retorno = alwaysVariables.MD5_Main = key.GetMd5Sum((export.registro_tipo_r04("R04", fiscal_numero_serie.Replace("\0", "").Trim(), fiscal_letramf_adicional.Replace("\0", "").Trim(), fiscal_modelo.Replace("\0", "").Trim(), lbOperadorConectorCF.Text, recarga[i, 0], recarga[i, 1], recarga[i, 2], recarga[i, 3], recarga[i, 4], recarga[i, 5], recarga[i, 6], recarga[i, 7], recarga[i, 8], recarga[i, 9], recarga[i, 10], recarga[i, 11], recarga[i, 12], recarga[i, 13]) + "\r\n"));
                                conector_update_lineMD5_r04(recarga[i, 0].Replace("\0", "").Trim(), recarga[i, 2].Replace("\0", "").Trim(), conectorPDV_PAFECF_indicador("R04", recarga[i, 3].Replace("\0", "").Trim(), recarga[i, 1].Replace("\0", "").Trim(), recarga[i, 2].Replace("\0", "").Trim(), recarga[i, 0].Replace("\0", "").Trim(), "0"));
                                break;
                            case "R05":
                                //retorno = alwaysVariables.MD5_Main = key.GetMd5Sum((export.registro_tipo_r05("R05", fiscal_numero_serie.Replace("\0", "").Trim(), fiscal_letramf_adicional.Replace("\0", "").Trim(), fiscal_modelo.Replace("\0", "").Trim(), lbOperadorConectorCF.Text, recarga[i, 1], recarga[i, 0], recarga[i, 2], recarga[i, 3], recarga[i, 5], recarga[i, 6], recarga[i, 7], recarga[i, 8], recarga[i, 9], recarga[i, 10], recarga[i, 11], recarga[i, 12], recarga[i, 13], recarga[i, 14], recarga[i, 15], recarga[i, 16], recarga[i, 17], recarga[i, 18], "3", "2") + "\r\n"));
                                conector_update_lineMD5_r05(recarga[i, 0].Replace("\0", "").Trim(), recarga[i, 5].Replace("\0", "").Trim(), recarga[i, 4].Replace("\0", "").Trim(), recarga[i, 2].Replace("\0", "").Trim(), conectorPDV_PAFECF_indicador("R05", recarga[i, 3].Replace("\0", "").Trim(), recarga[i, 1].Replace("\0", "").Trim(), recarga[i, 2].Replace("\0", "").Trim(), recarga[i, 0].Replace("\0", "").Trim(), recarga[i, 4].Replace("\0", "").Trim()));
                                break;
                            case "R07":
                                //retorno = alwaysVariables.MD5_Main = key.GetMd5Sum((export.registro_tipo_r07("R07", fiscal_numero_serie.Replace("\0", "").Trim(), fiscal_letramf_adicional.Replace("\0", "").Trim(), fiscal_modelo.Replace("\0", "").Trim(), banco_operado, recarga[i, 0], recarga[i, 1], recarga[i, 2], recarga[i, 3], recarga[i, 4], recarga[i, 5], recarga[i, 6]) + "\r\n"));
                                string sf = conectorPDV_PAFECF_indicador("R07", recarga[i, 3].Replace("\0", "").Trim(), recarga[i, 1], recarga[i, 2].Replace("\0", "").Trim(), recarga[i, 0].Replace("\0", "").Trim(), recarga[i, 4].Replace("\0", "").Trim());
                                    for (int w = 0; w < vetorR07.Length; w++)
                                    {
                                        conector_update_lineMD5_r07_fiscal(recarga[i, 0], recarga[i, 5], recarga[i, 4], recarga[i, 2], vetorR07[w], vetorRA7[w]);
                                    }
                                //conector_update_lineMD5_r07_fiscal(recarga[i, 0], recarga[i, 5], recarga[i, 4], recarga[i, 2], conectorPDV_PAFECF_indicador("R07", recarga[i, 3].Replace("\0", "").Trim(), recarga[i, 1], recarga[i, 2].Replace("\0", "").Trim(), recarga[i, 0].Replace("\0", "").Trim(), recarga[i, 4].Replace("\0", "").Trim()), conectorPDV_PAFECF_indicador("RA7", recarga[i, 3].Replace("\0", "").Trim(), recarga[i, 1].Replace("\0", "").Trim(), recarga[i, 2].Replace("\0", "").Trim(), recarga[i, 0].Replace("\0", "").Trim(), recarga[i, 4].Replace("\0", "").Trim()));
                                break;
                            default:
                                break;
                        }
                    }
                }
                sinal = sinal + 1;
                if (sinal < 4)
                {
                    switch (sinal)
                    {
                        case 1:
                            tipo = "R04";
                            break;
                        case 2:
                            tipo = "R07";
                            break;
                        case 3:
                            tipo = "R05";
                            break;
                    }
                    conectorPDV_PAFECF_exe(tipo,numero,sinal,"0","0");
                }
            }
        }
        protected void conectorPDV_inc_reserva(string operador, string terminal, string parametro, string metodo, string users, string client)
        {
            auxConsistencia = 0;
            try
            {
                title = banco.abreConexao();
                banco.startTransaction("conectorPDV_inc_reservaTemp");
                banco.addParametro("inc_idloja", alwaysVariables.Store);
                banco.addParametro("inc_idfuncionario", operador);
                banco.addParametro("inc_idcliente", client == "" ? "0" : client);
                banco.addParametro("inc_pdv", terminal);
                banco.addParametro("inc_idparamentro", parametro);
                banco.addParametro("inc_idmetodo", metodo);
                banco.addParametro("inc_status", "1"); //Incluido sem produto
                banco.addParametro("inc_usuario", users);
                banco.addParametro("inc_emissao", String.Format("{0:yyyyMMdd}", DateTime.Now));
                banco.addParametro("inc_expiracao", String.Format("{0:yyyyMMdd}", DateTime.Now));
                banco.addParametro("inc_geraEntrega",  "0");
                banco.addParametro("inc_geraMontagem", "0");
                banco.addParametro("inc_sinal", "verde");
                banco.addParametro("inc_entrada",String.Format("{0:yyyyMMdd}", DateTime.Now));
                banco.addParametro("inc_flagFormaFinalizacao", "D");
                banco.procedimentoRead();
                    if(banco.retornaRead().Read() == true)
                    {
                        pedido = banco.retornaRead().GetString(0);
                        flagDav = banco.retornaRead().GetString(1);
                    }
                
            }
            catch (Exception erro)
            {
                msgInfo msg = new msgInfo(1,erro.Message); msg.ShowDialog();
                auxConsistencia = 1;
            }
            finally
            {
                banco.fechaConexao(); if (title != "") { this.txtTitleCupomFiscalConectorCF.Invoke((MethodInvoker)delegate { txtTitleCupomFiscalConectorCF.Text = title; }); }
                if (auxConsistencia == 0)
                {
                    if (Convert.ToDouble(pedido) > 0)
                    {
                        this.lblStatusNfce.ForeColor = System.Drawing.Color.Green;
                        lblStatusNfce.Text = "ABERTO";
                        txtVisorNfce.Text = "NFC-e ABERTA";
                        lblChaveNfce.Text = "";
                        lblMsgRetornoSefaz.Text = "NFCe NÃO EMITIDA";
                        resetLabel();
                        resetFinanceiro();
                        txtEntradaDadosNF.ReadOnly = false;
                        txtEntradaDadosNF.Select();
                    }
                }
            }
        }

        private void conector_find_codBarra(string barra)
        {
            try
            {
                title = banco.abreConexao();
                banco.startTransaction("conectorPDV_find_codBarra");
                banco.addParametro("tipo", "3");
                banco.addParametro("find", barra);
                banco.procedimentoRead();
                if (banco.retornaRead().Read() == true)
                {
                    newBarraItemPedido = banco.retornaRead().GetString(0);
                    auxMultiplicador = banco.retornaRead().GetString(1);
                    auxUnItemPedido = banco.retornaRead().GetString(2);
                    auxIdUnItemPedido = banco.retornaRead().GetString(7);
                    newIdBarraItemPedido = banco.retornaRead().GetString(8);
                }
                banco.fechaRead();
            }
            catch (Exception erro)
            {
                msg = new msgInfo(1, "Erro não identificado, entre contato como revendedor"); msg.ShowDialog();
                auxConsistencia = 1;                
            }
            finally
            {
                banco.fechaConexao(); if (title != "") { this.txtTitleCupomFiscalConectorCF.Invoke((MethodInvoker)delegate { txtTitleCupomFiscalConectorCF.Text = title; }); }
            }
        }
        private void conectorPDV_find_produto(string produto, string store) //Pesquisa e inseri o produto no automatico. "conector_inc_pedidoItens"
        {//Consulta para reserva_temp
            produto = produto.Replace("\n", "").Replace("\r", "").Trim();
            index = produto.IndexOf("*");
            conector_find_codBarra(produto = Right(produto, (produto.Length - (index + 1))));
            auxConsistencia = 0;
            try
            {
                title = banco.abreConexao();
                banco.startTransaction("conectorPDV_find_produto");
                banco.addParametro("tipo", "4");
                banco.addParametro("find", produto);//produto = Right(produto, (produto.Length - (index + 1))));
                banco.addParametro("findIdLoja", store);
                banco.addParametro("findIdSetor", "0");
                banco.addParametro("findIdGrupo", "0");
                banco.addParametro("findIdCategoria", "0");
                banco.addParametro("findIdFornecedor", "0");
                banco.addParametro("findNumeroNota", "0");
                banco.addParametro("findDataInicial", "19000101");
                banco.addParametro("findDataFinal", "19000101");
                banco.procedimentoRead();
                if (banco.retornaRead().Read() == true)
                {
                    newItemPedido = banco.retornaRead().GetString(0);
                    newDescricaoItemPedido = banco.retornaRead().GetString(1);
                    newPriceVenda = banco.retornaRead().GetString(4);
                    newEstoqueDisponivelItemPedido = banco.retornaRead().GetString(7);
                    newEstoqueItemPedido = banco.retornaRead().GetString(6);
                    newReservaItemPedido = banco.retornaRead().GetString(5);
                    /*newTipoCodigo = banco.retornaRead().GetString(8);
                    flagPromocao = banco.retornaRead().GetString(12);
                    optionValidadePromocao = banco.retornaRead().GetString(13);
                    optionIdFinalizadoraPromocao = banco.retornaRead().GetString(15);
                    optionTodosProdutosPromocao = banco.retornaRead().GetString(16);*/
                    newPriceFabrica = banco.retornaRead().GetString(17);
                    newCustoBruto = banco.retornaRead().GetString(18);
                    newCustoLiquido = banco.retornaRead().GetString(9);
                    newCustoBruto = banco.retornaRead().GetString(19);
                    newCustoMedio = banco.retornaRead().GetString(20);
                    newCustoTransferencia = banco.retornaRead().GetString(21);
                    newIdPistCofins = banco.retornaRead().GetString(23);
                    auxCstIpiSaidaProduto = banco.retornaRead().GetString(24);

                }
                banco.fechaRead();
            }
            catch (Exception erro)
            {
                msgInfo msg = new msgInfo(1,erro.Message); msg.ShowDialog();
                auxConsistencia = 1;
            }
            finally
            {
                banco.fechaConexao(); if (title != "") { this.txtTitleCupomFiscalConectorCF.Invoke((MethodInvoker)delegate { txtTitleCupomFiscalConectorCF.Text = title; }); }
                if (auxConsistencia == 0)
                {
                    if (Convert.ToDecimal(newPriceVenda == "" ? "0" : newPriceVenda) <= 0)
                    {
                        msgInfo msg = new msgInfo(1,"Produto sem preço, ou não precificado, verifique junto ao administrativo."); msg.ShowDialog();
                        txtDescricaoNf.Clear();
                        lblQttyNfec.Text = "0,000";
                        lblPrecoUnitarioNfec.Text = "";
                        lblTotalNfec.Text = "0,00";
                        txtEntradaDadosNF.Clear();
                        txtEntradaDadosNF.Select();
                    }
                    else
                    {
                        if (flagSemaforo == 0)
                        {
                            conectorPDV_grava_pedidoItens(pedido, alwaysVariables.Store, newItemPedido, "10", "1", lblQttyNfec.Text.Replace(",", "."), lblPrecoUnitarioNfec.Text.Replace(",", "."), lblPrecoUnitarioNfec.Text.Replace(",", "."), "0", lblTotalNfec.Text, newIdBarraItemPedido, newBarraItemPedido,newIdBarraItemPedido);
                            //flagSemaforo = 1;
                        }
                    }

                    if (auxCstIpiSaidaProduto != "")
                    {
                        if (auxCstIpiSaidaProduto != "")
                        {
                            auxConsistencia = 0;
                            try
                            {
                                title = banco.abreConexao();
                                banco.startTransaction("conectorPDV_find_complementoFiscal");
                                banco.addParametro("tipo", "1");
                                banco.addParametro("find", auxCstIpiSaidaProduto);
                                banco.procedimentoRead();
                                if (banco.retornaRead().Read() == true)
                                {
                                }
                                banco.fechaRead();
                            }
                            catch (Exception erro)
                            {
                                MessageBox.Show(erro.Message, "Caro Usuário"); auxConsistencia = 1;
                            }
                            finally
                            {
                                banco.fechaConexao(); if (title != "") { this.txtTitleCupomFiscalConectorCF.Invoke((MethodInvoker)delegate { txtTitleCupomFiscalConectorCF.Text = title; }); }
                                if (auxConsistencia == 0)
                                {
                                }

                            }
                        }

                    }
                }
            }

        }

        protected void conectorPDV_gera_nfItemTwo(string nr_reserva, string typeNota, string chave)
        {
            Int16 valida = 0;
            auxConsistencia = 0;
            try
            {
                title = banco.abreConexao();
                banco.startTransaction("conectorPDV_gera_nfItemTwo");
                banco.addParametro("pedido", nr_reserva);
                banco.addParametro("typeNota", typeNota);
                banco.addParametro("chave", chave);
                banco.procedimentoRead();
                if (banco.retornaRead().Read() == true)
                {
                    auxChaveNota = banco.retornaRead().GetString(0);
                    valida = 1;
                }
                banco.fechaRead();
            }
            catch (Exception erro)
            {
                msg = new msgInfo(1, "CARO USUARIO, ERRO => "+ erro.Message + " ERRO NÃO GERAÇÃO DA NOTA...!"); msg.ShowDialog();
                auxConsistencia = 1;
            }
            finally
            {
                banco.fechaConexao(); if (title != "") { this.txtTitleCupomFiscalConectorCF.Invoke((MethodInvoker)delegate { txtTitleCupomFiscalConectorCF.Text = title; }); }
                if (auxConsistencia == 0)
                {
                    msg = new msgInfo(1, "CARREGANDO VARIAVEIS NFCe...!"); msg.ShowDialog();
                    conector_carrega_cliente(auxIdCliente);
                    conectorPDV_find_itemNfSaida("5", auxChaveNota);
                    conectorPDV_find_itemNfSaida("1", auxChaveNota);
                    conectorPDV_find_itemNfSaida("2", auxChaveNota);
                    conectorPDV_find_itemNfSaida("3", auxChaveNota);
                    conectorPDV_find_itemNfSaida("7", pedido);
                    conectorPDV_find_itemNfSaidaTotais("3", 1);
                    listaInformacoesTransporteNFe.Add(informacoesTransporteNFe);
                    listaInformacoesTransporteNFe[0].transp_modFrete = "9";
                    conectorPDV_find_itemNfSaidaTotais("6", 2);
                    conectorPDV_find_dav(2, flagDav);
                    //conector_update_lineMD5_d03_descricaoItem(id, alwaysVariables.Store, conectorPDV_PAFECF_indicador_DAV_NFCe("A", id, String.Format("{0:yyyyMMdd}", DateTime.Now), alwaysVariables.Store, prd, Convert.ToDouble(newseq).ToString()), prd, Convert.ToDouble(newseq).ToString());
                }
            }
        }

        private void conectorPDV_grava_pedidoItens(string id, string store, string prd, string funcionario, string seq, string qtty, string priceLiquido, string priceVendido, string valorDiscount, string TotalItemPedido, string idBarraItemPedido, string BarraItemPedido, string IdUnItemPedido)
        {

            conector_produto(prd, alwaysVariables.Store, pedido, ref registro);

            //procedimento banco update
            if (flagSemaforo == 1)
            {
                auxConsistencia = 0;
                try
                {
                    title = banco.abreConexao();
                    banco.startTransaction("conectorPDV_alt_pedidoItens");
                    banco.addParametro("newidpedido", id);
                    banco.addParametro("newidloja", store);
                    banco.addParametro("newidProduto", prd);
                    banco.addParametro("newidfuncionario", funcionario);
                    banco.addParametro("newseq", seq);
                    banco.addParametro("newsituacao", "0"); //provisorio
                    banco.addParametro("newquantidade", qtty);
                    banco.addParametro("newpriceLiquido", priceLiquido);
                    banco.addParametro("newprice", priceVendido);
                    banco.addParametro("newvalorDiscount", valorDiscount);
                    banco.addParametro("newpriceFull", TotalItemPedido);
                    banco.addParametro("newidEan", idBarraItemPedido);
                    banco.addParametro("newcodigoBarra", BarraItemPedido);
                    banco.addParametro("newidunidadeMedida", IdUnItemPedido);
                    banco.procedimentoRead();
                    banco.fechaRead();
                }
                catch (Exception erro)
                {
                    msgInfo msg = new msgInfo(erro.Message); msg.ShowDialog();
                    auxConsistencia = 1;
                    //alteraIconesIncluir();
                }
                finally
                {
                    banco.fechaConexao(); if (title != "") { this.txtTitleCupomFiscalConectorCF.Invoke((MethodInvoker)delegate { txtTitleCupomFiscalConectorCF.Text = title; }); }
                    if (auxConsistencia == 0)
                    {
                        //flagSemaforo = 1;
                    }
                }
                //##########Item update end
            }
            else
            {
                //procedimento banco insert
                try
                {
                    title = banco.abreConexao();
                    banco.startTransaction("conectorPDV_inc_pedidoItens");
                    banco.addParametro("inc_idpedido", id);
                    banco.addParametro("inc_idloja", store);
                    banco.addParametro("inc_idProduto", prd);
                    banco.addParametro("inc_idfuncionario", funcionario);
                    banco.addParametro("inc_situacao", "0"); //provisorio
                    banco.addParametro("inc_quantidade", produto_qtty.Replace(",", "."));
                    banco.addParametro("inc_priceLiquido", produto_price_custo.Replace(",", "."));
                    banco.addParametro("inc_price", Math.Round(Decimal.Parse(produto_valor_unitario.Replace(",", ".")), 2).ToString().Replace(",", "."));
                    banco.addParametro("inc_valorDiscount", "0");
                    banco.addParametro("inc_priceFull", (Math.Round(Decimal.Parse(produto_valor_unitario.Replace(",", ".")), 2) * Math.Round(Decimal.Parse(produto_qtty.Replace(",", ".")), 3)).ToString());
                    banco.addParametro("inc_idEan", newIdBarraItemPedido);
                    banco.addParametro("inc_codigoBarra", newBarraItemPedido);
                    banco.addParametro("inc_idunidadeMedida", auxIdUnItemPedido);
                    banco.addParametro("inc_promocao", "N");
                    banco.procedimentoRead();
                    if (banco.retornaRead().Read() == true)
                    {
                        newseq = banco.retornaRead().GetString(0);
                    }
                    banco.fechaRead();
                }
                catch (Exception erro)
                {
                    if (erro.Message.ToString() == "#23000Column 'idProduto' cannot be null")
                    {
                        msgInfo msg = new msgInfo(1,"Produto não cadastrado, ou não existe. " + erro.Message); msg.ShowDialog();
                    }
                    else
                    {
                        msgInfo msg = new msgInfo(1,erro.Message); msg.ShowDialog();
                    }

                    auxConsistencia = 1;
                    //alteraIconesIncluir();
                }
                finally
                {
                    banco.fechaConexao(); if (title != "") { this.txtTitleCupomFiscalConectorCF.Invoke((MethodInvoker)delegate { txtTitleCupomFiscalConectorCF.Text = title; }); }
                    if (auxConsistencia == 0)
                    {
                        /*rtbVisualizacaoDadosNf.Text = " ITEM  CÓDIGO  DESCRIÇÃO QTD  UN VL UNIT(R$) ST VL ITEM(R$)" + "\r\n" +
                                                                                                                                                 "=============================================================";*/
                        //newseq = (Int32.Parse(newseq) + 1).ToString().PadLeft(3, '0');
                        rtbVisualizacaoDadosNf.Text += newseq + "    "
                                                                    + produto_barra + "    "//produto_barra.PadLeft(12, '0') + "    "
                                                                    + produto_descricao + "    "
                                                                    + (produto_pesavel == "0" ? produto_qtty : "    ") + "    "
                                                                    + produto_unidade + "    "
                                                                    + (produto_pesavel == "0" ? produto_qtty + produto_unidade : String.Format("{0:F3}", Decimal.Parse(produto_qtty.Replace(",", ".")), 3).ToString().Replace(".", ",") + produto_unidade + " X " + produto_price_venda.Replace(".", ",")) + "    "
                                                                    + Math.Round(Decimal.Parse(produto_valor_unitario.Replace(",", ".")), 2).ToString().Replace(".", ",") + "      "
                                                                    + produto_tributacao + "    "
                                                                    + Math.Round((Decimal.Parse(produto_qtty.Replace(",", ".")) * Decimal.Parse(produto_valor_unitario)), 2).ToString().Replace(".", ",") + "\r\n";
                        flagSemaforo = 0;

                        //conector_update_lineMD5_d03_descricaoItem(id, alwaysVariables.Store, conectorPDV_PAFECF_indicador_DAV_NFCe("A", id, String.Format("{0:yyyyMMdd}", DateTime.Now), alwaysVariables.Store, prd, Convert.ToDouble(newseq).ToString()), prd, Convert.ToDouble(newseq).ToString());

                        resetLabel();
                        string old = pedido;
                        resetVariable();
                        pedido = old;
                        conector_find_subFull("2");
                        lblQttyNfec.Text = "0,000";
                        lblPrecoUnitarioNfec.Text = "0,00";
                        lblTotalNfec.Text = "0,00";
                        txtEntradaDadosNF.Clear();
                        txtEntradaDadosNF.Select();
                    }
                }
                //##########Item insert end

            }
        }

        private string conectorPDV_PAFECF_indicador(string tipo, string input_di, string store, string terminal, string numero, string seq)
        {
            string[,] recarga; //Matriz Bidimencionada
            string retorno = "";
            if (numero.Replace("\0", "").Trim() == "" )
            {
                functionECF.conectorECF_NumeroCupom(alwaysVariables.ModeloEcf, ref numero, ref fiscal_MSG, ref fiscal_retorno, alwaysVariables.ECF_Ligada);
            }

            if (input_di.Length < 8)
            {
                input_di = String.Format("{0:yyyyMMdd}", Convert.ToDateTime(input_di.Substring(0, 2) + "/" + input_di.Substring(2, 2) + "/" + String.Format("{0:ddMMyyyy}", DateTime.Now).Substring(4, 2) + input_di.Substring(4, 2)));
                
            }

            try
            {
                auxConsistencia = 0;
                countField = 0;
                countRows = 0;
                if (rmais.statusSchema() == 1)
                {
                    return "";
                }
                title = rmais.abreConexao();
                rmais.startTransaction("conectorPDV_PAFECF_Movimento");
                rmais.addParametro("tipo", tipo);
                rmais.addParametro("di", input_di);
                rmais.addParametro("df", input_di);
                rmais.addParametro("store", store);
                rmais.addParametro("cx", terminal);
                rmais.addParametro("find", numero.Replace("\0","").Trim());
                rmais.addParametro("seq", Convert.ToInt32(seq == "" ? "0": seq).ToString());
                if ("0000-00-00" != input_di)
                {
                    rmais.procedimentoSet();
                }
                else
                {
                    auxConsistencia = 1;
                }

            }
            catch (Exception erro) { msgInfo msg = new msgInfo(1,"Caro Cliente - " + erro.Message); msg.ShowDialog(); auxConsistencia = 1; retorno = ""; }
            finally
            {
                if (auxConsistencia == 0)
                {
                    countField = rmais.retornaSet().Tables[0].Columns.Count;
                    countRows = rmais.retornaSet().Tables[0].DefaultView.Count;
                    vetorR07 = new string[countRows];
                    vetorRA7 = new string[countRows];
                    if (countRows > 0)
                    {
                        recarga = new string[countRows, countField];
                        for (int i = 0; i < countRows; i++)//Linha
                        {
                            for (int j = 0; j < countField; j++) //Coluna
                            {
                                recarga[i, j] = Convert.ToString(rmais.retornaSet().Tables[0].Rows[i][j]);
                            }
                            switch (tipo)
                            {
                                case "A2":
                                    //retorno = key.GetMd5Sum((export.registro_tipo_a2("A2", recarga[i, 0], recarga[i, 1], recarga[i, 2], recarga[i, 3])));
                                    retorno = key.GetMd5Sum((export.registro_tipo_a2("A2", recarga[i, 0], recarga[i, 1], recarga[i, 2], recarga[i, 3])));
                                    break;
                                case "H2":
                                    retorno = key.GetMd5Sum((export.registro_tipo_h2("H2", recarga[i, 0], recarga[i, 1], recarga[i, 2], recarga[i, 3], recarga[i, 4], recarga[i, 5], recarga[i, 6], recarga[i, 7], recarga[i, 8], recarga[i, 9], recarga[i, 10], recarga[i, 11], recarga[i, 12])));
                                    //retorno = key.GetMd5Sum((export.registro_tipo_h2("H2", recarga[i, 0], recarga[i, 1], recarga[i, 2], recarga[i, 3], recarga[i, 4], recarga[i, 5], recarga[i, 6], recarga[i, 7], recarga[i, 8], recarga[i, 9], recarga[i, 10], recarga[i, 11])));
                                    break;
                                case "R01":
                                    retorno = key.GetMd5Sum((export.registro_tipo_r01("R01", recarga[i, 0],
                                    recarga[i, 1],
                                    recarga[i, 2],
                                    recarga[i, 3],
                                    recarga[i, 4],
                                    recarga[i, 5],
                                    recarga[i, 6],
                                    recarga[i, 7],
                                    recarga[i, 8],
                                    recarga[i, 9],
                                    recarga[i, 10],
                                    recarga[i, 11],
                                    recarga[i, 12],
                                    recarga[i, 13],
                                    recarga[i, 14],
                                    recarga[i, 15],
                                    recarga[i, 16],
                                    recarga[i, 17], "", "", recarga[i, 18])));
                                    break;
                                case "R02":
                                    retorno = key.GetMd5Sum((export.registro_tipo_r02("R02", recarga[i, 04].Replace("\0", "").Trim(), recarga[i, 05].Replace("\0", "").Trim(), recarga[i, 6].Replace("\0", "").Trim(), recarga[i, 3], recarga[i, 7], recarga[i, 8], recarga[i, 9], recarga[i, 2], recarga[i, 10], recarga[i, 11], recarga[i, 12], recarga[i, 13])));
                                    break;
                                case "R03":
                                    //retorno = key.GetMd5Sum((export.registro_tipo_r03("R03", fiscal_numero_serie.Replace("\0", "").Trim(), fiscal_letramf_adicional.Replace("\0", "").Trim(), fiscal_modelo.Replace("\0", "").Trim(), recarga[i, 3], recarga[i, 4], recarga[i, 5], recarga[i, 6])));
                                    retorno = key.GetMd5Sum((export.registro_tipo_r03("R03", recarga[i, 0].Replace("\0", "").Trim(), recarga[i, 1].Replace("\0", "").Trim(), recarga[i, 2].Replace("\0", "").Trim(), recarga[i, 3], recarga[i, 4], recarga[i, 5], recarga[i, 6])));
                                    break;
                                case "R04":
                                    retorno = key.GetMd5Sum((export.registro_tipo_r04("R04", recarga[i, 16].Replace("\0", "").Trim(),
                                               recarga[i, 17].Replace("\0", "").Trim(),
                                               recarga[i, 15].Replace("\0", "").Trim(),
                                               recarga[i, 14],
                                               recarga[i, 0],
                                               recarga[i, 1],
                                               recarga[i, 2],
                                               recarga[i, 3],
                                               recarga[i, 4],
                                               recarga[i, 5],
                                               recarga[i, 6],
                                               recarga[i, 7],
                                               recarga[i, 8],
                                               recarga[i, 9],
                                               recarga[i, 10],
                                               recarga[i, 11],
                                               recarga[i, 12],
                                               recarga[i, 13])));
                                    break;
                                case "R05":
                                    //retorno = key.GetMd5Sum((export.registro_tipo_r05("R05", fiscal_numero_serie.Replace("\0", "").Trim(), fiscal_letramf_adicional.Replace("\0", "").Trim(), fiscal_modelo.Replace("\0", "").Trim(), rmais_operado, recarga[i, 1], recarga[i, 0], recarga[i, 2], recarga[i, 3], recarga[i, 5], recarga[i, 6], recarga[i, 7], recarga[i, 8], recarga[i, 9], recarga[i, 10], recarga[i, 11], recarga[i, 12], recarga[i, 13], recarga[i, 14], recarga[i, 15], recarga[i, 16], recarga[i, 17], recarga[i, 18], "3", "2")));
                                    retorno = key.GetMd5Sum((export.registro_tipo_r05("R05",
                                           recarga[i, 0].Replace("\0", "").Trim(),
                                           recarga[i, 1].Replace("\0", "").Trim(),
                                           recarga[i, 2].Replace("\0", "").Trim(),
                                           recarga[i, 3],
                                           recarga[i, 4],
                                           recarga[i, 5],
                                           recarga[i, 6],
                                           recarga[i, 7],
                                           recarga[i, 8],
                                           recarga[i, 9],
                                           recarga[i, 10],
                                           recarga[i, 11],
                                           recarga[i, 12],
                                           recarga[i, 13],
                                           recarga[i, 14],
                                           recarga[i, 15],
                                           recarga[i, 16],
                                           recarga[i, 17],
                                           recarga[i, 18],
                                           recarga[i, 19],
                                           recarga[i, 20], recarga[i, 21], recarga[i, 22], recarga[i, 23])));
                                    break;
                                case "R06":
                                    //retorno = key.GetMd5Sum((export.registro_tipo_r06("R06", fiscal_numero_serie.Replace("\0", "").Trim(), fiscal_letramf_adicional.Replace("\0", "").Trim(), fiscal_modelo.Replace("\0", "").Trim(), rmais_operado, recarga[i, 0], recarga[i, 1], recarga[i, 2], recarga[i, 3], recarga[i, 4], recarga[i, 5], recarga[i, 6])));
                                    retorno = key.GetMd5Sum((export.registro_tipo_r06("R06",
                                               recarga[i, 0].Replace("\0", "").Trim(),
                                               recarga[i, 1].Replace("\0", "").Trim(),
                                               recarga[i, 2].Replace("\0", "").Trim(),
                                               recarga[i, 3],
                                               recarga[i, 4],
                                               recarga[i, 5],
                                               recarga[i, 6],
                                               recarga[i, 7],
                                               recarga[i, 8],
                                               recarga[i, 9],
                                               recarga[i, 10])));
                                    break;
                                case "R07":
                                    //vetorR07[i] = retorno = key.GetMd5Sum((export.registro_tipo_r07("R07", fiscal_numero_serie.Replace("\0", "").Trim(), fiscal_letramf_adicional.Replace("\0", "").Trim(), fiscal_modelo.Replace("\0", "").Trim(), rmais_operado, recarga[i, 0], recarga[i, 1], recarga[i, 2], recarga[i, 3], recarga[i, 4], recarga[i, 5], recarga[i, 6])));
                                    //vetorRA7[i] = key.GetMd5Sum((export.registro_tipo_rA7(recarga[i, 3])));
                                    vetorR07[i] = retorno = key.GetMd5Sum((export.registro_tipo_r07("R07",
                                               recarga[i, 0].Replace("\0", "").Trim(),
                                               recarga[i, 1].Replace("\0", "").Trim(),
                                               recarga[i, 2].Replace("\0", "").Trim(),
                                               recarga[i, 3],
                                               recarga[i, 4],
                                               recarga[i, 5],
                                               recarga[i, 6],
                                               recarga[i, 7],
                                               recarga[i, 8],
                                               recarga[i, 9],
                                               recarga[i, 10])));
                                    vetorRA7[i] = key.GetMd5Sum((export.registro_tipo_rA7(recarga[i, 3])));
                                    break;
                                case "RA7":
                                    retorno = key.GetMd5Sum((export.registro_tipo_rA7(recarga[i, 0])));
                                    break;
                                case "RA8":
                                    retorno = key.GetMd5Sum((export.registro_tipo_rA7(recarga[i, 0])));
                                    break;
                                default:
                                    retorno = "";
                                    break;
                            }
                        }
                    }
                    else
                    {
                        retorno = "";
                    }
                }
                rmais.fechaConexao();
                if (title != "") 
                {
                    this.txtTitleCupomFiscalConectorCF.Invoke((MethodInvoker)delegate { this.txtTitleCupomFiscalConectorCF.Invoke((MethodInvoker)delegate { txtTitleCupomFiscalConectorCF.Text = title; }); }); 
                }
            }
            return retorno;
        }

        private void conectorPDV_find_dav(short tipo, string find)
        {
            string[,] recarga;
            string a, b, c;
            a = b = c = "";
            try
            {
                auxConsistencia = 0;
                countField = 0;
                countRows = 0;
                title = banco.abreConexao();
                banco.startTransaction("conectorPDV_find_dav");
                banco.addParametro("tipo", tipo.ToString());
                banco.addParametro("find", find);
                if (tipo == 1)
                {
                    banco.procedimentoRead();
                    if (banco.retornaRead().Read() == true)
                    {
                        a = banco.retornaRead().GetString(0).Replace(",", ".");
                        b = banco.retornaRead().GetString(1).Replace(",", ".");
                        c = banco.retornaRead().GetString(2).Replace(",", ".");
                    }
                }
                else
                {
                    banco.procedimentoSet();
                }
            }
            catch (Exception erro) { msgInfo msg = new msgInfo(1, "Caro Cliente - " + erro.Message); msg.ShowDialog(); auxConsistencia = 1;}
            finally
            {
                if (auxConsistencia == 0)
                {
                    if (tipo == 2)
                    {
                      countField = banco.retornaSet().Tables[0].Columns.Count;
                      countRows = banco.retornaSet().Tables[0].DefaultView.Count;
                        if (countRows > 0)
                        {
                            recarga = new string[countRows, countField];
                            for (int i = 0; i < countRows; i++)//Linha
                            {
                                for (int j = 0; j < countField; j++) //Coluna
                                {
                                    recarga[i, j] = Convert.ToString(banco.retornaSet().Tables[0].Rows[i][j]);
                                }
                            }
                            banco.fechaConexao(); if (title != "") { this.txtTitleCupomFiscalConectorCF.Invoke((MethodInvoker)delegate { txtTitleCupomFiscalConectorCF.Text = title; }); }
                            for (int w = 0; w < recarga.GetUpperBound(0) + 1; w++)//Linha
                            {
                                conector_update_lineMD5_d03_descricaoItem(recarga[w, 0], alwaysVariables.Store, conectorPDV_PAFECF_indicador_DAV_NFCe("A", recarga[w, 0], String.Format("{0:yyyyMMdd}", DateTime.Now), alwaysVariables.Store, recarga[w, 3], recarga[w, 4]), recarga[w, 3], recarga[w, 4]);
                            }
                        }
                    }
                }
                banco.fechaConexao();
                if (auxConsistencia == 0 && tipo == 1)
                {
                    if (a != "")
                    {
                        conector_update_lineMD5_d02_dav(a, alwaysVariables.Store, conectorPDV_PAFECF_indicador_DAV_NFCe("D02", a, String.Format("{0:yyyyMMdd}", Convert.ToDateTime(DateTime.Now)), alwaysVariables.Store, "0", "0"));
                        conectorPDV_find_dav(2, find);
                    }
                }
            }
            conectorPDV_update_coo_reserva(fiscal_Cupom_coo.Replace("\0","").Trim(), a);
        }

        public void conectorPDV_update_coo_reserva(string coo, string ped)
        {
            auxConsistencia = 0;
            try
            {
                title = banco.abreConexao();
                banco.singleTransaction("update pedido set numeroCupom=?coo /*, flagCaixa=1*/ where idPedido = ?pedido and idLoja=?loja");
                banco.addParametro("?coo", coo);
                banco.addParametro("?pedido", ped);
                banco.addParametro("?loja", alwaysVariables.Store);
                banco.procedimentoRead();
            }
            catch (Exception erro)
            {
                msg = new msgInfo(1, erro.Message); msg.ShowDialog(); auxConsistencia = 1;
                auxConsistencia = 1;
            }
            finally
            {
                banco.fechaConexao(); if (title != "") { this.txtTitleCupomFiscalConectorCF.Invoke((MethodInvoker)delegate { txtTitleCupomFiscalConectorCF.Text = title; }); }
                if (auxConsistencia == 0)
                {

                }
            }
        }

        public void conectorPDV_find_detalhes(string type, string crz, string data)
        {
            if ((data.Trim() != "" && data != "000000"))
            {
                string[,] recarga; //Matriz Bidimencionada
                switch (type)
                {
                    case "R02":
                        try
                        {
                            auxConsistencia = 0;
                            countField = 0;
                            countRows = 0;
                            title = banco.abreConexao();
                            banco.startTransaction("conectorPDV_PAFECF_Movimento");
                            banco.addParametro("tipo", "R02");
                            banco.addParametro("di", data);
                            banco.addParametro("df", data);
                            banco.addParametro("store", alwaysVariables.Store);
                            banco.addParametro("cx", fiscal_numero_caixa.Replace("\0", "").Trim());
                            banco.addParametro("find", "0");
                            banco.addParametro("seq", "0");
                            banco.procedimentoSet();

                        }
                        catch (Exception erro) { msgInfo msg = new msgInfo("Caro Cliente - " + erro.Message); msg.ShowDialog(); auxConsistencia = 1; }
                        finally
                        {
                            if (auxConsistencia == 0)
                            {
                                countField = banco.retornaSet().Tables[0].Columns.Count;
                                countRows = banco.retornaSet().Tables[0].DefaultView.Count;
                                if (countRows > 0)
                                {
                                    recarga = new string[countRows, countField];
                                    for (int i = 0; i < countRows; i++)//Linha
                                    {
                                        for (int j = 0; j < countField; j++) //Coluna
                                        {
                                            if (j < 14)
                                            {
                                                recarga[i, j] = Convert.ToString(banco.retornaSet().Tables[0].Rows[i][j]);
                                            }
                                            else if (j == 14)
                                            {
                                                recarga[i, j] = key.GetMd5Sum((export.registro_tipo_r02("R02", recarga[i, 04].Replace("\0", "").Trim(), recarga[i, 05].Replace("\0", "").Trim(), recarga[i, 6].Replace("\0", "").Trim(), recarga[i, 3], recarga[i, 7], recarga[i, 8], recarga[i, 9], recarga[i, 2], recarga[i, 10], recarga[i, 11], recarga[i, 12], recarga[i, 13])));
                                            }
                                            else if (j == 21)
                                            {
                                                recarga[i, j] = Convert.ToString(banco.retornaSet().Tables[0].Rows[i][j]);
                                            }
                                        }
                                    }
                                    banco.fechaConexao(); if (title != "") { this.txtTitleCupomFiscalConectorCF.Invoke((MethodInvoker)delegate { txtTitleCupomFiscalConectorCF.Text = title; }); }
                                    for (int w = 0; w < recarga.GetLength(0) + 1; w++) //Coluna
                                    {

                                        try
                                        {
                                            auxConsistencia = 0;
                                            title = banco.abreConexao();
                                            banco.singleTransaction("update conectorpdv.ecf_r02 set r15=?cripto where chave=?r21");
                                            banco.addParametro("?cripto", recarga[w, 14]);
                                            banco.addParametro("?r21", recarga[w, 21]);
                                            banco.procedimentoRead();
                                        }
                                        catch (Exception erro)
                                        {
                                            auxConsistencia = 1;
                                        }
                                        finally
                                        {
                                            banco.fechaConexao(); if (title != "") { this.txtTitleCupomFiscalConectorCF.Invoke((MethodInvoker)delegate { txtTitleCupomFiscalConectorCF.Text = title; }); }
                                            if (auxConsistencia == 0)
                                            {
                                            }
                                        }
                                    }
                                }
                                else
                                {

                                }
                            }
                            banco.fechaConexao(); if (title != "") { this.txtTitleCupomFiscalConectorCF.Invoke((MethodInvoker)delegate { txtTitleCupomFiscalConectorCF.Text = title; }); }

                        }
                        break;
                    case "R03":
                        try
                        {
                            auxConsistencia = 0;
                            countField = 0;
                            countRows = 0;
                            title = banco.abreConexao();
                            banco.startTransaction("conectorPDV_PAFECF_Movimento");
                            banco.addParametro("tipo", "R03");
                            banco.addParametro("di", data);
                            banco.addParametro("df", data);
                            banco.addParametro("store", alwaysVariables.Store);
                            banco.addParametro("cx", fiscal_numero_caixa.Replace("\0", "").Trim());
                            banco.addParametro("find", "0");
                            banco.addParametro("seq", "0");
                            banco.procedimentoSet();

                        }
                        catch (Exception erro) { msgInfo msg = new msgInfo("Caro Cliente - " + erro.Message); msg.ShowDialog(); auxConsistencia = 1; }
                        finally
                        {
                            if (auxConsistencia == 0)
                            {
                                countField = banco.retornaSet().Tables[0].Columns.Count;
                                countRows = banco.retornaSet().Tables[0].DefaultView.Count;
                                if (countRows > 0)
                                {
                                    recarga = new string[countRows, countField];
                                    for (int i = 0; i < countRows; i++)//Linha
                                    {
                                        for (int j = 0; j < countField; j++) //Coluna
                                        {
                                            if (j < 7)
                                            {
                                                recarga[i, j] = Convert.ToString(banco.retornaSet().Tables[0].Rows[i][j]);
                                            }
                                            else if (j == 7)
                                            {
                                                recarga[i, j] = key.GetMd5Sum((export.registro_tipo_r03("R03", recarga[i, 0].Replace("\0", "").Trim(), recarga[i, 1].Replace("\0", "").Trim(), recarga[i, 2].Replace("\0", "").Trim(), recarga[i, 3], recarga[i, 4], recarga[i, 5], recarga[i, 6])));
                                            }
                                            else if (j == 14)
                                            {
                                                recarga[i, j] = Convert.ToString(banco.retornaSet().Tables[0].Rows[i][j]);
                                            }
                                        }
                                    }
                                    banco.fechaConexao(); if (title != "") { this.txtTitleCupomFiscalConectorCF.Invoke((MethodInvoker)delegate { txtTitleCupomFiscalConectorCF.Text = title; }); }
                                    for (int w = 0; w < recarga.GetLength(0) + 1; w++) //Coluna
                                    {

                                        try
                                        {
                                            auxConsistencia = 0;
                                            title = banco.abreConexao();
                                            banco.singleTransaction("update conectorpdv.ecf_r03 set r08=?cripto where chave=?r14");
                                            banco.addParametro("?cripto", recarga[w, 7]);
                                            banco.addParametro("?r14", recarga[w, 14]);
                                            banco.procedimentoRead();
                                        }
                                        catch (Exception erro)
                                        {
                                            auxConsistencia = 1;
                                        }
                                        finally
                                        {
                                            banco.fechaConexao(); if (title != "") { this.txtTitleCupomFiscalConectorCF.Invoke((MethodInvoker)delegate { txtTitleCupomFiscalConectorCF.Text = title; }); }
                                            if (auxConsistencia == 0)
                                            {
                                            }
                                        }
                                    }
                                }
                                else
                                {

                                }
                            }
                            banco.fechaConexao(); if (title != "") { this.txtTitleCupomFiscalConectorCF.Invoke((MethodInvoker)delegate { txtTitleCupomFiscalConectorCF.Text = title; }); }

                        }
                        break;
                }
            }
        }

        public void conectorPDV_carrega_registroD(int tipo, string dav)
        {
            try
            {
                auxConsistencia = 0;
                title = banco.abreConexao();
                banco.startTransaction("conectorPDV_carrega_registroD");
                banco.addParametro("tipo", tipo.ToString());
                banco.addParametro("di", String.Format("{0:yyyyMMdd}", DateTime.Now));
                banco.addParametro("df", String.Format("{0:yyyyMMdd}", DateTime.Now));
                banco.addParametro("chave", dav);
                banco.procedimentoRead();
                banco.fechaRead();

            }
            catch (Exception erro)
            {
                msgInfo msg = new msgInfo("Caro Cliente - " + erro.Message); msg.ShowDialog();
                auxConsistencia = 1;
            }
            finally
            {
                banco.fechaConexao(); if (title != "") { this.txtTitleCupomFiscalConectorCF.Invoke((MethodInvoker)delegate { txtTitleCupomFiscalConectorCF.Text = title; }); }
                if (auxConsistencia == 0)
                {

                }
            }
            tipo = tipo + 1;
            if (tipo < 4)
            {
                conectorPDV_carrega_registroD(tipo, dav);
            }
            else
            {
                conectorPDV_gera_crypt_dav("D02", flagDav, "0", "0");
                conectorPDV_gera_crypt_dav("D03", flagDav, "0", "0");
                conectorPDV_gera_crypt_dav("D04", flagDav, "0", "0");
            }
        }

        private string conectorPDV_PAFECF_DAV_final(string tipo, string reserva, string input_di, string input_df, string store, string prod, string seq)
        {
            string[,] recarga; //Matriz Bidimencionada
            string retorno = "";

            try
            {
                auxConsistencia = 0;
                countField = 0;
                countRows = 0;
                title = banco.abreConexao();
                auxConsistencia = 0;
                banco.startTransaction("conectorPDV_PAFECF_DAV");
                banco.addParametro("tipo", tipo);
                banco.addParametro("di", input_di); //String.Format("{0:yyyyMMdd}", Convert.ToDateTime(input_di)));
                banco.addParametro("df", input_df);  //String.Format("{0:yyyyMMdd}", Convert.ToDateTime(input_di)));
                banco.addParametro("store", store);
                banco.addParametro("reserva", reserva);
                banco.addParametro("prod", prod);
                banco.addParametro("seq", seq);
                banco.procedimentoSet();

            }
            catch (Exception erro) { msgInfo msg = new msgInfo("Caro Cliente - " + erro.Message); msg.ShowDialog(); auxConsistencia = 1; retorno = ""; }
            finally
            {
                if (auxConsistencia == 0)
                {
                    countField = banco.retornaSet().Tables[0].Columns.Count;
                    countRows = banco.retornaSet().Tables[0].DefaultView.Count;
                    if (countRows > 0)
                    {
                        recarga = new string[countRows, countField];
                        for (int i = 0; i < countRows; i++)//Linha
                        {
                            for (int j = 0; j < countField; j++) //Coluna
                            {
                                recarga[i, j] = Convert.ToString(banco.retornaSet().Tables[0].Rows[i][j]);
                            }
                            switch (tipo)
                            {
                                case "D01":
                                    retorno = export.registro_tipo_d01("D1", recarga[i, 0], recarga[i, 1], recarga[i, 2], recarga[i, 3]) + "\r\n";
                                    break;
                                case "D2":
                                    //retorno = export.registro_tipo_d02("D2", fiscal_CGC, fiscal_numero_serie, fiscal_letramf_adicional, fiscal_tipo_ecf, fiscal_marca, fiscal_modelo, recarga[i, 0], recarga[i, 1], recarga[i, 2], recarga[i, 3], recarga[i, 4], recarga[i, 5], recarga[i, 6], recarga[i, 7], recarga[i, 8]) + "\r\n";
                                    retorno = export.registro_tipo_d02("D2", recarga[i, 0], recarga[i, 1], recarga[i, 2], recarga[i, 3], recarga[i, 4], recarga[i, 5], recarga[i, 6], recarga[i, 7], recarga[i, 8], recarga[i, 9], recarga[i, 10], recarga[i, 11], recarga[i, 12], recarga[i, 13], recarga[i, 14]) + "\r\n";
                                    break;
                                case "D03":
                                    //retorno = export.registro_tipo_d03("D3", recarga[i, 0], recarga[i, 1], recarga[i, 2], recarga[i, 3], recarga[i, 4], recarga[i, 5], recarga[i, 6], recarga[i, 7], recarga[i, 8], recarga[i, 9], recarga[i, 10], recarga[i, 11], recarga[i, 12], recarga[i, 13], recarga[i, 14], recarga[i, 15]) + "\r\n";
                                    retorno = export.registro_tipo_d03("D3", recarga[i, 0], recarga[i, 1], recarga[i, 2], recarga[i, 3], recarga[i, 4], recarga[i, 5], recarga[i, 6], recarga[i, 7], recarga[i, 8], recarga[i, 9], recarga[i, 10], recarga[i, 11], recarga[i, 12], recarga[i, 13], recarga[i, 14], recarga[i, 15]) + "\r\n";
                                    break;
                                case "D04":
                                    //retorno = export.registro_tipo_d04("D4", recarga[i, 0], recarga[i, 1], recarga[i, 2], recarga[i, 3], recarga[i, 4], recarga[i, 5], recarga[i, 6], recarga[i, 7], recarga[i, 8], recarga[i, 9], recarga[i, 10], recarga[i, 11], recarga[i, 12], recarga[i, 13], recarga[i, 14], recarga[i, 15], recarga[i, 16]) + "\r\n";
                                    retorno = export.registro_tipo_d04("D4", recarga[i, 0], recarga[i, 1], recarga[i, 2], recarga[i, 3], recarga[i, 4], recarga[i, 5], recarga[i, 6], recarga[i, 7], recarga[i, 8], recarga[i, 9], recarga[i, 10], recarga[i, 11], recarga[i, 12], recarga[i, 13], recarga[i, 14], recarga[i, 15], recarga[i, 16]) + "\r\n";
                                    break;
                                case "A":
                                    retorno = export.registro_tipo_d03_item(recarga[i, 0]);
                                    break;
                                default:
                                    retorno = "";
                                    break;
                            }
                        }
                    }
                    else
                    {
                        retorno = "";
                    }
                }
                banco.fechaConexao(); if (title != "") { this.txtTitleCupomFiscalConectorCF.Invoke((MethodInvoker)delegate { txtTitleCupomFiscalConectorCF.Text = title; }); }
            }
            return retorno;
        }
        private string conectorPDV_PAFECF_indicador_DAV(string tipo, string reserva, string input_di, string store, string prod, string seq)
        {
            string[,] recarga; //Matriz Bidimencionada
            string retorno = "";

            try
            {
                auxConsistencia = 0;
                countField = 0;
                countRows = 0;
                title = banco.abreConexao();
                auxConsistencia = 0;
                banco.startTransaction("conectorPDV_PAFECF_DAV");
                banco.addParametro("tipo", tipo);
                banco.addParametro("di", input_di); //String.Format("{0:yyyyMMdd}", Convert.ToDateTime(input_di)));
                banco.addParametro("df", input_di);  //String.Format("{0:yyyyMMdd}", Convert.ToDateTime(input_di)));
                banco.addParametro("store", store);
                banco.addParametro("reserva", reserva);
                banco.addParametro("prod", prod);
                banco.addParametro("seq", seq);
                banco.procedimentoSet();

            }
            catch (Exception erro) { msgInfo msg = new msgInfo("Caro Cliente - " + erro.Message); msg.ShowDialog(); auxConsistencia = 1; retorno = ""; }
            finally
            {
                if (auxConsistencia == 0)
                {
                    countField = banco.retornaSet().Tables[0].Columns.Count;
                    countRows = banco.retornaSet().Tables[0].DefaultView.Count;
                    if (countRows > 0)
                    {
                        recarga = new string[countRows, countField];
                        for (int i = 0; i < countRows; i++)//Linha
                        {
                            for (int j = 0; j < countField; j++) //Coluna
                            {
                                recarga[i, j] = Convert.ToString(banco.retornaSet().Tables[0].Rows[i][j]);
                            }
                            switch (tipo)
                            {
                                case "D02":
                                    if (alwaysVariables.ModoOperacao == 1)
                                    {
                                        //retorno = key.GetMd5Sum((export.registro_tipo_d02("D2", fiscal_CGC, fiscal_numero_serie, fiscal_letramf_adicional, fiscal_tipo_ecf, fiscal_marca, fiscal_modelo, recarga[i, 0], recarga[i, 1], recarga[i, 2], recarga[i, 3], recarga[i, 4], recarga[i, 5], recarga[i, 6], recarga[i, 7], recarga[i, 8])));
                                        retorno = key.GetMd5Sum((export.registro_tipo_d02("D2", recarga[i, 0], recarga[i, 1], recarga[i, 2], recarga[i, 3], recarga[i, 4], recarga[i, 5], recarga[i, 6], recarga[i, 7], recarga[i, 8], recarga[i, 9], recarga[i, 10], recarga[i, 11], recarga[i, 12], recarga[i, 13], recarga[i, 14])));
                                    }
                                    else//Modo Nfce
                                    {
                                        functionECF.conectorECF_NumeroCupom(alwaysVariables.ModeloEcf, ref fiscal_Cupom_coo, ref fiscal_MSG, ref fiscal_retorno, alwaysVariables.ECF_Ligada);
                                        retorno = key.GetMd5Sum((export.registro_tipo_d02("D2", fiscal_CGC, fiscal_numero_serie, fiscal_letramf_adicional, fiscal_tipo_ecf, fiscal_marca, fiscal_modelo, fiscal_Cupom_coo, recarga[i, 1], recarga[i, 2], "DANFE-NFCe", recarga[i, 4], "0", recarga[i, 6], recarga[i, 7], recarga[i, 8])));
                                        //retorno = key.GetMd5Sum((export.registro_tipo_d02("D02", fiscal_CGC, fiscal_numero_serie, fiscal_letramf_adicional, fiscal_tipo_ecf, fiscal_marca, fiscal_modelo, recarga[i, 0], recarga[i, 1], recarga[i, 2], recarga[i, 3], recarga[i, 4], recarga[i, 5], recarga[i, 6], recarga[i, 7], recarga[i, 8])));
                                    }
                                    break;
                                case "A":
                                    retorno = key.GetMd5Sum((export.registro_tipo_d03_item(recarga[i, 0])));
                                    break;
                                default:
                                    retorno = "";
                                    break;
                            }
                        }
                    }
                    else
                    {
                        retorno = "";
                    }
                }
                banco.fechaConexao(); if (title != "") { this.txtTitleCupomFiscalConectorCF.Invoke((MethodInvoker)delegate { txtTitleCupomFiscalConectorCF.Text = title; }); }
            }
            return retorno;
        }

        private string conectorPDV_PAFECF_indicador_DAV_NFCe(string tipo, string reserva, string input_di, string store, string prod, string seq)
        {
            string[,] recarga; //Matriz Bidimencionada
            string retorno = "";

            try
            {
                auxConsistencia = 0;
                countField = 0;
                countRows = 0;
                title = banco.abreConexao();
                auxConsistencia = 0;
                banco.startTransaction("conectorPDV_PAFECF_DAV_NFCe");
                banco.addParametro("tipo", tipo);
                banco.addParametro("di", input_di); //String.Format("{0:yyyyMMdd}", Convert.ToDateTime(input_di)));
                banco.addParametro("df", input_di);  //String.Format("{0:yyyyMMdd}", Convert.ToDateTime(input_di)));
                banco.addParametro("store", store);
                banco.addParametro("reserva", reserva);
                banco.addParametro("prod", prod);
                banco.addParametro("seq", seq);
                banco.procedimentoSet();

            }
            catch (Exception erro) { msgInfo msg = new msgInfo("Caro Cliente - " + erro.Message); msg.ShowDialog(); auxConsistencia = 1; retorno = ""; }
            finally
            {
                if (auxConsistencia == 0)
                {
                    countField = banco.retornaSet().Tables[0].Columns.Count;
                    countRows = banco.retornaSet().Tables[0].DefaultView.Count;
                    if (countRows > 0)
                    {
                        recarga = new string[countRows, countField];
                        for (int i = 0; i < countRows; i++)//Linha
                        {
                            for (int j = 0; j < countField; j++) //Coluna
                            {
                                recarga[i, j] = Convert.ToString(banco.retornaSet().Tables[0].Rows[i][j]);
                            }
                            switch (tipo)
                            {
                                case "D02":
                                    //retorno = key.GetMd5Sum((export.registro_tipo_d02("D2", fiscal_CGC, fiscal_numero_serie, fiscal_letramf_adicional, fiscal_tipo_ecf, fiscal_marca, fiscal_modelo, recarga[i, 0], recarga[i, 1], recarga[i, 2], recarga[i, 3], recarga[i, 4], recarga[i, 5], recarga[i, 6], recarga[i, 7], recarga[i, 8]) + "\r\n"));
                                    retorno = key.GetMd5Sum((export.registro_tipo_d02("D2", recarga[i, 0], recarga[i, 1], recarga[i, 2], recarga[i, 3], recarga[i, 4], recarga[i, 5], recarga[i, 6], recarga[i, 7], recarga[i, 8], recarga[i, 9], recarga[i, 10], recarga[i, 11], recarga[i, 12], recarga[i, 13], recarga[i, 14]) + "\r\n"));
                                    break;
                                case "A":
                                    retorno = key.GetMd5Sum((export.registro_tipo_d03_item(recarga[i, 0].Trim())));
                                    break;
                                default:
                                    retorno = "";
                                    break;
                            }
                        }
                    }
                    else
                    {
                        retorno = "";
                    }
                }
                banco.fechaConexao(); if (title != "") { this.txtTitleCupomFiscalConectorCF.Invoke((MethodInvoker)delegate { txtTitleCupomFiscalConectorCF.Text = title; }); }
            }
            return retorno;
        }
        private string conectorPDV_PAFECF_Estoque(string tipo, string ecf)
        {
            string[,] recarga; //Matriz Bidimencionada
            string retorno = "";

            try
            {
                auxConsistencia = 0;
                countField = 0;
                countRows = 0;
                title = banco.abreConexao();
                banco.startTransaction("conectorPDV_PAFECF_Estoque");
                banco.addParametro("tipo", tipo);
                banco.addParametro("store", fiscal_store.Replace("\0","").Trim());
                banco.addParametro("ecf", ecf);
                banco.addParametro("di", String.Format("{0:yyyyMMdd}", Convert.ToDateTime(DateTime.Now)));
                banco.procedimentoSet();

            }
            catch (Exception erro) { msgInfo msg = new msgInfo("Caro Cliente - " + erro.Message); msg.ShowDialog(); auxConsistencia = 1; retorno = ""; }
            finally
            {
                if (auxConsistencia == 0)
                {
                    countField = banco.retornaSet().Tables[0].Columns.Count;
                    countRows = banco.retornaSet().Tables[0].DefaultView.Count;
                    if (countRows > 0)
                    {
                        recarga = new string[countRows, countField];
                        for (int i = 0; i < countRows; i++)//Linha
                        {
                            for (int j = 0; j < countField; j++) //Coluna
                            {
                                recarga[i, j] = Convert.ToString(banco.retornaSet().Tables[0].Rows[i][j]);
                            }
                            switch (tipo)
                            {
                                case "E1":
                                    retorno = export.registro_tipo_e1("E1", recarga[i, 0], recarga[i, 1], recarga[i, 2], recarga[i, 3]) + "\r\n";
                                    break;
                                case "E2":
                                    retorno = export.registro_tipo_e2("E2", recarga[i, 0], recarga[i, 1], recarga[i, 2], recarga[i, 3], recarga[i, 4], recarga[i, 5]) + "\r\n";
                                    break;
                                case "E3":
                                    if (fiscal_data_movimento.Trim() != "" && Convert.ToDouble(fiscal_data_movimento.Trim() == "" ? "0" : fiscal_data_movimento.Trim()) > 0)
                                    {
                                        string test = String.Format("{0:yyyyMMdd}", Convert.ToDateTime(fiscal_data_movimento.Substring(2, 2) + "/" + fiscal_data_movimento.Substring(0, 2) + "/" + String.Format("{0:ddMMyyyy}", DateTime.Now).Substring(4, 2) + fiscal_data_printer.Substring(4, 2)));
                                        //retorno = export.registro_tipo_e3("E3",fiscal_numero_serie, fiscal_letramf_adicional, fiscal_tipo_ecf.Replace("\0","").Trim(), fiscal_marca.Replace("\0","").Trim(), fiscal_modelo, test, String.Format("{0:hhmmss}", DateTime.Now) + "\r\n");
                                        retorno = export.registro_tipo_e3("E3", recarga[i, 1], recarga[i, 2], recarga[i, 3].Replace("\0", "").Trim(), recarga[i, 4], recarga[i, 5].Replace("\0", "").Trim(), recarga[i, 6], recarga[i, 7] + "\r\n");
                                    }
                                    break;
                                case "E9":
                                    retorno = export.registro_tipo_e9("E9", recarga[i, 0], recarga[i, 1], recarga[i, 2]) + "\r\n";
                                    break;
                                default:
                                    retorno = "";
                                    break;
                            }
                        }
                    }
                    else
                    {
                        retorno = "";
                    }
                }
                banco.fechaConexao(); if (title != "") { this.txtTitleCupomFiscalConectorCF.Invoke((MethodInvoker)delegate { txtTitleCupomFiscalConectorCF.Text = title; }); }
            }
            return retorno;
        }
        private string conectorPDV_PAFECF_indicadorE(string tipo, string ecf)
        {
            string[,] recarga; //Matriz Bidimencionada
            string retorno = "";

            try
            {
                auxConsistencia = 0;
                countField = 0;
                countRows = 0;
                title = banco.abreConexao();
                banco.startTransaction("conectorPDV_PAFECF_Estoque");
                banco.addParametro("tipo", tipo);
                banco.addParametro("store", fiscal_store.Replace("\0","").Trim());
                banco.addParametro("ecf", ecf);
                banco.addParametro("di", String.Format("{0:yyyyMMdd}", Convert.ToDateTime(DateTime.Now)));
                if (ecf.Trim() != "")
                {
                    banco.procedimentoSet();
                }
                else
                {
                    auxConsistencia = 1;
                }

            }
            catch (Exception erro) { msgInfo msg = new msgInfo("Caro Cliente - " + erro.Message); msg.ShowDialog(); auxConsistencia = 1; retorno = ""; }
            finally
            {
                if (auxConsistencia == 0)
                {
                    countField = banco.retornaSet().Tables[0].Columns.Count;
                    countRows = banco.retornaSet().Tables[0].DefaultView.Count;
                    if (countRows > 0)
                    {
                        recarga = new string[countRows, countField];
                        for (int i = 0; i < countRows; i++)//Linha
                        {
                            for (int j = 0; j < countField; j++) //Coluna
                            {
                                recarga[i, j] = Convert.ToString(banco.retornaSet().Tables[0].Rows[i][j]);
                            }
                            switch (tipo)
                            {
                                case "E3":
                                    if (Convert.ToDouble(fiscal_data_movimento.Trim() == "" ? "0" : fiscal_data_movimento.Trim()) > 0)
                                    {
                                        string test = String.Format("{0:yyyyMMdd}", Convert.ToDateTime(fiscal_data_movimento.Substring(2, 2) + "/" + fiscal_data_movimento.Substring(0, 2) + "/" + String.Format("{0:ddMMyyyy}", DateTime.Now).Substring(4, 2) + fiscal_data_printer.Substring(4, 2)));
                                        //retorno = alwaysVariables.MD5_Main = key.GetMd5Sum((export.registro_tipo_e3("E3", fiscal_numero_serie, fiscal_letramf_adicional, fiscal_tipo_ecf, fiscal_marca, fiscal_modelo, test, String.Format("{0:hhmmss}", DateTime.Now) + "\r\n")));
                                        //retorno = key.GetMd5Sum((export.registro_tipo_e3("E3", fiscal_numero_serie, fiscal_letramf_adicional, fiscal_tipo_ecf, fiscal_marca, fiscal_modelo, test, String.Format("{0:hhmmss}", DateTime.Now) + "\r\n")));
                                        retorno = key.GetMd5Sum((export.registro_tipo_e3("E3", recarga[i, 1], recarga[i, 2], recarga[i, 3].Replace("\0", "").Trim(), recarga[i, 4], recarga[i, 5].Replace("\0", "").Trim(), recarga[i, 6], recarga[i, 7]) + "\r\n"));
                                    }
                                    break;
                                default:
                                    retorno = "";
                                    break;
                            }
                        }
                    }
                    else
                    {
                        retorno = "";
                    }
                }
                banco.fechaConexao(); if (title != "") { this.txtTitleCupomFiscalConectorCF.Invoke((MethodInvoker)delegate { txtTitleCupomFiscalConectorCF.Text = title; }); }
            }
            return retorno;
        }

        #endregion

        private void conectorPDV_find_consultaProduto(string aux)
        {
            dgvPesquisaProduto.Rows.Clear();
            countField = 0;
            countRows = 0;
            auxConsistencia = 0;
            try
            {
                title = banco.abreConexao();
                banco.startTransaction("conectorPDV_find_produto");
                banco.addParametro("tipo", Convert.ToString(aux));
                banco.addParametro("find", txtPesquisaProduto.Text);
                banco.addParametro("findIdLoja", alwaysVariables.Store);
                banco.addParametro("findIdSetor", 0.ToString());//auxIdSetor);
                banco.addParametro("findIdGrupo",  0.ToString());//auxIdGrupo);
                banco.addParametro("findIdCategoria",  0.ToString());//auxIdCategoria);
                banco.addParametro("findIdFornecedor", 0.ToString());//auxIdFornecedor);
                banco.addParametro("findNumeroNota", "0");
                banco.addParametro("findDataInicial", "19000101");
                banco.addParametro("findDataFinal", "19000101");
                banco.procedimentoSet();
            }
            catch (Exception erro)
            {
                msg = new msgInfo(1, "Erro não identificado, entre contato como revendedor! " + erro.Message); msg.ShowDialog();
                auxConsistencia = 1;
            }
            finally
            {
                if (auxConsistencia == 0)
                {
                    countField = banco.retornaSet().Tables[0].Columns.Count;
                    countRows = banco.retornaSet().Tables[0].DefaultView.Count;
                    if (countRows > 0)
                    {
                        dgvPesquisaProduto.AllowUserToAddRows = false;
                        for (int i = 0; i < countRows; i++)
                        {
                            dgvPesquisaProduto.Rows.Add();
                            for (int j = 0; j < countField; j++)
                            {
                                dgvPesquisaProduto.Rows[i].Cells[j].Value = Convert.ToString(banco.retornaSet().Tables[0].Rows[i][j]);
                            }
                            //dgvPesquisaSetor.DataSource = banco.retornaSet().Tables[0].DefaultView;
                        }
                    }
                    else
                    {
                        if (txtPesquisaProduto.Text != "" && txtPesquisaProduto.Text.Length > 12 && txtPesquisaProduto.Text.Substring(0, 1) == "3")//Ean 13 
                        {
                            if (txtPesquisaProduto.Text.Substring(0, 1) == "3")//Nacionalidade Brasil
                            {//3000000105597
                                banco.fechaConexao();
                                System.Text.StringBuilder sbjoin1 = new System.Text.StringBuilder(txtPesquisaProduto.Text);
                                conectorEan13 ean13 = new conectorEan13();
                                string test = ean13.extraiPrdConector(sbjoin1);
                                txtPesquisaProduto.Text = test;
                                conectorPDV_find_consultaProduto(aux);
                            }
                            else
                            {
                                MessageBox.Show("Codigo de barra inconsistente.", "Caro Usúario", MessageBoxButtons.OK, MessageBoxIcon.Information);
                                auxConsistencia = 1;
                            }
                        }
                        else
                        {
                            if (dgvPesquisaProduto.RowCount < 1)
                            {
                                dgvPesquisaProduto.Rows.Add();
                            }
                        }
                    }
                }
                else
                {
                    if (dgvPesquisaProduto.RowCount < 1)
                    {
                        dgvPesquisaProduto.Rows.Add();
                    }
                }
                dgvPesquisaProduto.Select();
                banco.fechaConexao(); if (title != "") { this.txtTitleCupomFiscalConectorCF.Invoke((MethodInvoker)delegate { txtTitleCupomFiscalConectorCF.Text = title; }); }
            }
        }


        private void conectorPDV_find_Produto(string aux, string prod)
        {
            try
            {
                title = banco.abreConexao();
                banco.startTransaction("conectorPDV_find_produto");
                banco.addParametro("tipo", Convert.ToString(aux));
                banco.addParametro("find", prod);
                banco.addParametro("findIdLoja", alwaysVariables.Store);
                banco.addParametro("findIdSetor", 0.ToString());//auxIdSetor);
                banco.addParametro("findIdGrupo", 0.ToString());//auxIdGrupo);
                banco.addParametro("findIdCategoria", 0.ToString());//auxIdCategoria);
                banco.addParametro("findIdFornecedor", 0.ToString());//auxIdFornecedor);
                banco.addParametro("findNumeroNota", "0");
                banco.addParametro("findDataInicial", "19000101");
                banco.addParametro("findDataFinal", "19000101");
                banco.procedimentoRead();
                if (banco.retornaRead().Read() == true)
                {
                    produto_descricao = banco.retornaRead().GetString(2);
                    produto_unidade = banco.retornaRead().GetString(18);
                    produto_valor_unitario = banco.retornaRead().GetString(20);
                    produto_qtty = "1000";
                }
                else
                {
                    msgInfo msg = new msgInfo("Caro Cliente - " + " Itens não localizado."); msg.ShowDialog(); auxConsistencia = 1;
                    produto_descricao = "";
                    produto_unidade = "";
                    produto_valor_unitario = "";
                    produto_qtty = "";
                    txtItensNFDEmitida.Clear();
                    txtItensNFDEmitida.Select();
                }
            }
            catch (Exception erro)
            { 
                    msgInfo msg = new msgInfo("Caro Cliente - " + erro.Message); msg.ShowDialog(); auxConsistencia = 1;
            }
            finally
            {
                banco.fechaConexao(); if (title != "") { this.txtTitleCupomFiscalConectorCF.Invoke((MethodInvoker)delegate { txtTitleCupomFiscalConectorCF.Text = title; }); }
                if (auxConsistencia == 0)
                {
                    
                }
            }
        }

        public decimal conector_verifica_acrescimo_item(string seq, string store, string produto, string data, string pv, string coo)
        {
            auxConsistencia = 0;
            decimal result = -1;
            try
            {
                title = banco.abreConexao();
                banco.singleTransaction("SELECT acrescimo from cupom_detalhes where datavenda =?data and (produto=?produto or ?produto=0) and numeroCupom=?coo and loja=?store and terminal=?pv and sequencia=?seq");
                banco.addParametro("?seq", seq);
                banco.addParametro("?store", store);
                banco.addParametro("?produto", produto);
                banco.addParametro("?data", data);
                banco.addParametro("?pv", pv);
                banco.addParametro("?coo", coo);
                banco.procedimentoRead();
                if (banco.retornaRead().Read() == true)
                {
                    result = Convert.ToDecimal(banco.retornaRead().GetString(0).Replace(",", "."));
                }
            }
            catch (Exception erro)
            {
                auxConsistencia = 1;
                msgInfo msg = new msgInfo("Caro Cliente - " + erro.Message); msg.ShowDialog(); auxConsistencia = 1;
            }
            finally
            {
                banco.fechaConexao(); if (title != "") { this.txtTitleCupomFiscalConectorCF.Invoke((MethodInvoker)delegate { txtTitleCupomFiscalConectorCF.Text = title; }); }
                if (auxConsistencia == 1)
                {
                    result = -1;
                }
            }
            return result;
        }

        public decimal conector_verifica_desconto_item(string seq, string store, string produto, string data, string pv, string coo)
        {
            auxConsistencia = 0;
            decimal result = -1;
            try
            {
                title = banco.abreConexao();
                banco.singleTransaction("SELECT desconto from cupom_detalhes where datavenda =?data and (produto=?produto or ?produto=0) and numeroCupom=?coo and loja=?store and terminal=?pv and sequencia=?seq");
                banco.addParametro("?seq", seq);
                banco.addParametro("?store", store);
                banco.addParametro("?produto", produto);
                banco.addParametro("?data", data);
                banco.addParametro("?pv", pv);
                banco.addParametro("?coo", coo);
                banco.procedimentoRead();
                if (banco.retornaRead().Read() == true)
                {
                    result = Convert.ToDecimal(banco.retornaRead().GetString(0).Replace(",", "."));
                }
            }
            catch (Exception erro)
            {
                auxConsistencia = 1;
                msgInfo msg = new msgInfo("Caro Cliente - " + erro.Message); msg.ShowDialog(); auxConsistencia = 1;
            }
            finally
            {
                banco.fechaConexao(); if (title != "") { this.txtTitleCupomFiscalConectorCF.Invoke((MethodInvoker)delegate { txtTitleCupomFiscalConectorCF.Text = title; }); }
                if (auxConsistencia == 1)
                {
                    result = -1;
                }
            }
            return result;
        }


        public void conectorPDV_INC_detalhe_reducao_aliquota(string store, string numero, string movimento, string crz, string aliquota, string tipo, string reducao, string valor)
        {
            try
            {
                auxConsistencia = 0;
                title = banco.abreConexao();
                banco.startTransaction("conectorPDV_INC_detalhe_reducao_aliquota");
                banco.addParametro("inc_idloja", store);
                banco.addParametro("inc_numeroCaixa", numero.Replace("\0","").Trim());
                banco.addParametro("inc_movimento", String.Format("{0:yyyyMMdd}", Convert.ToDateTime(movimento)));
                banco.addParametro("inc_crz", crz.Replace("\0","").Trim());
                banco.addParametro("inc_aliquota", aliquota);
                banco.addParametro("inc_tipo", tipo);
                banco.addParametro("inc_base", valor.Replace(",","."));
                banco.addParametro("inc_reducao", reducao);
                if (tipo == "i" || tipo == "f")
                {
                    valor = "0";
                }
                banco.addParametro("inc_valor", valor.Replace(",", ".").Trim());
                banco.procedimentoRead();
            }
            catch (Exception erro)
            {
                msg = new msgInfo(1, "Erro não identificado, entre contato como revendedor! " + erro.Message); msg.ShowDialog();
                auxConsistencia = 1; }
            finally
            {
                banco.fechaConexao(); if (title != "") { this.txtTitleCupomFiscalConectorCF.Invoke((MethodInvoker)delegate { txtTitleCupomFiscalConectorCF.Text = title; }); }
                if (auxConsistencia == 0)
                {

                }
            }
        }

        protected void conector_del_reservaNotValida(string id)
        {
            try
            {
                auxConsistencia = 0;
                title = banco.abreConexao();
                banco.startTransaction("conector_del_reservaNotValida");
                banco.addParametro("findId", id);
                banco.addParametro("findIdLoja", alwaysVariables.Store);
                banco.procedimentoRead();
                banco.fechaRead();
            }
            catch (Exception erro)
            {
                msg = new msgInfo(1, "Erro não identificado, entre contato como revendedor! " + erro.Message); msg.ShowDialog();
                auxConsistencia = 1;
            }
            finally
            {
                banco.fechaConexao(); if (title != "") { this.txtTitleCupomFiscalConectorCF.Invoke((MethodInvoker)delegate { txtTitleCupomFiscalConectorCF.Text = title; }); }
                if (auxConsistencia == 0)
                {
                }
            }
        }
        public void conectorPDV_find_credenciadora()
        {
            try
            {
                auxConsistencia = 0;
                title = banco.abreConexao();
                banco.startTransaction("conectorPDV_find_credenciadora");
                banco.procedimentoRead();
                if (banco.retornaRead().Read() == true)
                {
                    alwaysVariables.CardCnpj = banco.retornaRead().GetString(2);
                    alwaysVariables.CardTitle = banco.retornaRead().GetString(3);

                }
            }
            catch (Exception erro)
            {
                msg = new msgInfo(1, "Erro não identificado, entre contato como revendedor! " + erro.Message); msg.ShowDialog();
                auxConsistencia = 1;
            }
            finally
            {
                banco.fechaConexao(); if (title != "") { this.txtTitleCupomFiscalConectorCF.Invoke((MethodInvoker)delegate { txtTitleCupomFiscalConectorCF.Text = title; }); }
                if (auxConsistencia == 0)
                {

                }
            }
        }
        public void conectorPDV_inc_detalhe_reducao(string store, string numero, string crz, string letra, string modelo, string operador, string valorAcumulado, string totalizador, int count)
        {
            try
            {
                auxConsistencia = 0;
                title = banco.abreConexao();
                banco.startTransaction("conectorPDV_inc_detalhe_reducao");
                banco.addParametro("inc_idloja", store);
                banco.addParametro("inc_numeroCaixa", numero.Replace("\0","").Trim());
                banco.addParametro("inc_crz", crz.Replace("\0","").Trim());
                banco.addParametro("inc_mf_letra", letra.Replace("\0","").Trim());
                banco.addParametro("inc_modelo", modelo.Replace("\0",""));
                banco.addParametro("inc_operador", operador);
                if (Convert.ToDecimal(valorAcumulado.Replace(",", ".")) == 0)
                {
                    banco.addParametro("inc_valorAcumulado", "0");
                }
                else
                {
                    banco.addParametro("inc_valorAcumulado", valorAcumulado.Replace(",", "."));
                }
                banco.addParametro("inc_totalizador", totalizador);
                banco.procedimentoRead();
            }
            catch (Exception erro)
            {
                msg = new msgInfo(1, "Erro não identificado, entre contato como revendedor! " + erro.Message); msg.ShowDialog();
                auxConsistencia = 1;
            }
            finally
            {
                banco.fechaConexao(); if (title != "") { this.txtTitleCupomFiscalConectorCF.Invoke((MethodInvoker)delegate { txtTitleCupomFiscalConectorCF.Text = title; }); }
                if (auxConsistencia == 0)
                {
                    if (Convert.ToDecimal(valorAcumulado.Replace(",", ".")) > 0)
                    {
                        workObject.modoPdv(true); //Para rotina loop
                        string test = String.Format("{0:yyyyMMdd}", Convert.ToDateTime(fiscal_data_movimento.Substring(2, 2) + "/" + fiscal_data_movimento.Substring(0, 2) + "/" + String.Format("{0:ddMMyyyy}", DateTime.Now).Substring(4, 2) + fiscal_data_printer.Substring(4, 2)));
                        strCupom = "";
                        instrucao.setVetorCupom();
                        strCupom = instrucao.getMapaRegistro(alwaysVariables.UserName, alwaysVariables.Senha, Convert.ToDouble(fiscal_store.Replace("\0", "").Trim() == "" ? alwaysVariables.Store : store.Replace("\0", "").Trim()) > 0 ? fiscal_store.Replace("\0", "").Trim() : alwaysVariables.Store, crz.Replace("\0", "").Trim(), String.Format("{0:yyyyMMdd}", DateTime.Now), numero.Replace("\0", "").Trim(), count.ToString());
                        instrucao.carregaInstrucaoMovimentoVenda(instrucao._movimentoResumo, strCupom, 0);
                        conector_update_lineMD5_r03_reducao_detalhes(crz.Replace("\0","").Trim(), totalizador, numero.Replace("\0","").Trim(), conectorPDV_PAFECF_indicador("R03", test, fiscal_store.Replace("\0","").Trim(), fiscal_numero_caixa.Replace("\0","").Trim(), crz.Replace("\0","").Trim(), "0"));
                        instrucao.compactScript(instrucao._movimentoResumo, "mapa_resumo");
                        workObject.modoPdv(false); //Libera rotina loop
                    }
                }
            }
        }

        public void conectorPDV_INC_detalhe_reducao_aliquota(string store, string numero, string movimento, string crz, string aliquota, string tipo, string reducao, string valor, int count)
        {
            try
            {
                auxConsistencia = 0;
                title = banco.abreConexao();
                banco.startTransaction("conectorPDV_INC_detalhe_reducao_aliquota");
                banco.addParametro("inc_idloja", store);
                banco.addParametro("inc_numeroCaixa", numero.Replace("\0","").Trim());
                banco.addParametro("inc_movimento", String.Format("{0:yyyyMMdd}", Convert.ToDateTime(movimento)));
                banco.addParametro("inc_crz", crz.Replace("\0","").Trim());
                banco.addParametro("inc_aliquota", aliquota);
                banco.addParametro("inc_tipo", tipo);
                banco.addParametro("inc_reducao", reducao);
                banco.addParametro("inc_valor", valor);
                if (tipo == "i" || tipo == "s")
                {
                    valor = "0";
                }
                banco.addParametro("inc_base", valor);
                banco.procedimentoRead();
            }
            catch (Exception erro)
            {
                msg = new msgInfo(1, "Erro não identificado, entre contato como revendedor! " + erro.Message); msg.ShowDialog();
                auxConsistencia = 1;
            }
            finally
            {
                banco.fechaConexao(); if (title != "") { this.txtTitleCupomFiscalConectorCF.Invoke((MethodInvoker)delegate { txtTitleCupomFiscalConectorCF.Text = title; }); }
                if (auxConsistencia == 0)
                {
                    workObject.modoPdv(true); //Para rotina loop
                    strCupom = "";
                    instrucao.setVetorCupom();
                    strCupom = instrucao.getAliquota(alwaysVariables.UserName, alwaysVariables.Senha, Convert.ToDouble(fiscal_store.Replace("\0", "").Trim()) > 0 ? fiscal_store.Replace("\0", "").Trim() : alwaysVariables.Store, crz.Replace("\0","").Trim(), String.Format("{0:yyyyMMdd}", Convert.ToDateTime(movimento)), numero.Replace("\0","").Trim(), count.ToString());
                    instrucao.carregaInstrucaoMovimentoVenda(instrucao._aliquotas, strCupom,0);
                    instrucao.compactScript(instrucao._aliquotas, "aliquota");
                    workObject.modoPdv(false); //Libera rotina loop
                }
            }
        }
        public decimal conector_verifica_totalSangria(string finaliza, string func)
        {
            auxConsistencia = 0;
            decimal result = -1;
            try
            {
                title = banco.abreConexao();
                banco.singleTransaction("select valor-sangria, max(sequencia) from movimentoCaixa where dataMovimento=?dat and funcionario=?func and tipoCall=0 and finalizadora=?finaliza");
                banco.addParametro("?finaliza", finaliza);
                banco.addParametro("?func", func);
                banco.addParametro("?dat", String.Format("{0:yyyyMMdd}", Convert.ToDateTime(fiscal_data_movimento.Substring(0, 2) + "/" + fiscal_data_movimento.Substring(2, 2) + "/" + String.Format("{0:ddMMyyyy}", DateTime.Now).Substring(4, 2) + fiscal_data_printer.Substring(4, 2))));
                banco.procedimentoRead();
                if (banco.retornaRead().Read() == true)
                {
                    result = Convert.ToDecimal(banco.retornaRead().GetString(0));
                    banco_sequencia = banco.retornaRead().GetString(1);
                }
            }
            catch (Exception e)
            {
                auxConsistencia = 1;
                msgInfo msg = new msgInfo("Caro Cliente - " + e.Message); msg.ShowDialog(); auxConsistencia = 1;
            }
            finally
            {
                banco.fechaConexao(); if (title != "") { this.txtTitleCupomFiscalConectorCF.Invoke((MethodInvoker)delegate { txtTitleCupomFiscalConectorCF.Text = title; }); }
                if (auxConsistencia == 1)
                {
                    result = -1;
                }
            }
            return result;
        }
        public int conector_verifica_exits_contrato(string cred, string par, string store)
        {
            auxConsistencia = 0;
            int result = -1;
            int status = -1;
            try
            {
                title = banco.abreConexao();
                banco.singleTransaction("select count(*),coalesce(status,0),coalesce(idParcela,0) from parcela where idLoja =?store and idCrediario=?crediario and nr_parcela=?Par");
                banco.addParametro("?crediario", cred);
                banco.addParametro("?Par",par);
                banco.addParametro("?store", store);
                banco.procedimentoRead();
                if (banco.retornaRead().Read() == true)
                {
                    result = Convert.ToInt32(banco.retornaRead().GetString(0));
                    status = Convert.ToInt32(banco.retornaRead().GetString(1));
                }
            }
            catch (Exception erro)
            {
                auxConsistencia = 1;
                msgInfo msg = new msgInfo("Caro Cliente - " + erro.Message); msg.ShowDialog(); auxConsistencia = 1;
            }
            finally
            {
                banco.fechaConexao(); if (title != "") { this.txtTitleCupomFiscalConectorCF.Invoke((MethodInvoker)delegate { txtTitleCupomFiscalConectorCF.Text = title; }); }
                if (auxConsistencia == 1)
                {
                    result = -1;
                }
                else
                {
                    switch (result)
                    {
                        case 0:
                            msgInfo msg = new msgInfo("CARO USUÁRIO - ESTA PARCELA NÃO POSSUI REGISTRO LOCAL! UMA CONSULTA VIA SERVIÇO WEB OCORRERÁ EM BREVE PARA ATUALIZAR A BASE LOCAL...!"); msg.ShowDialog();
                            returnDefaultPDV();
                            break;
                        case 1:
                            if (status == 1)
                            {
                                msgInfo msg1 = new msgInfo("CARO USUÁRIO - PARCELA LIQUIDA NÃO PODE SER QUITADA NOVAMENTE!"); msg1.ShowDialog();
                                result = -1;
                                returnDefaultPDV();
                            }
                            else if (status == 5)
                            {
                                msgInfo msg2 = new msgInfo("CARO USUÁRIO - PARCELA CANCELADA NÃO PODE SER CARREGADA...!"); msg2.ShowDialog();
                                result = 1;
                                returnDefaultPDV();
                            }
                            break;
                    }
                }
            }
            return result;
        }

        public string conector_max_reserva()
        {
            auxConsistencia = 0;
            string result = "0";
            try
            {
                title = banco.abreConexao();
                banco.singleTransaction("select ifnull(AUTO_INCREMENT,0) from information_schema.TABLES where TABLE_SCHEMA='conectorPDV' and TABLE_NAME='pedido'");
                banco.procedimentoRead();
                if (banco.retornaRead().Read() == true)
                {
                    result = banco.retornaRead().GetString(0);
                }
            }
            catch (Exception erro)
            {
                auxConsistencia = 1;
                msgInfo msg = new msgInfo(1, "Caro Cliente - " + erro.Message); msg.ShowDialog(); auxConsistencia = 1;
                return "0";
            }
            finally
            {
                banco.fechaConexao(); if (title != "") { this.txtTitleCupomFiscalConectorCF.Invoke((MethodInvoker)delegate { txtTitleCupomFiscalConectorCF.Text = title; }); }
                if (auxConsistencia == 0 && Convert.ToDouble(result) > 0)
                {
                    try
                    {
                        string test = "ALTER TABLE pedido_temp AUTO_INCREMENT = " + result;
                        auxConsistencia = 0;
                        title = banco.abreConexao();
                        banco.singleTransaction(test);
                        banco.procedimentoText();
                    }
                    catch (Exception erro)
                    {
                        auxConsistencia = 1;
                    }
                    finally
                    {
                        banco.fechaConexao(); if (title != "") { this.txtTitleCupomFiscalConectorCF.Invoke((MethodInvoker)delegate { txtTitleCupomFiscalConectorCF.Text = title; }); }
                        if (auxConsistencia == 0)
                        {
                        }
                    }
                }
            }
            return result;
        }

        public string conector_result_opnf(string store, string data, string cx)
        {
            auxConsistencia = 0;
            string result = "0";
            try
            {
                title = banco.abreConexao();
                banco.singleTransaction("select sum(sangria+abertura+fundo_caixa) as opnf from movimentoCaixa where loja=?store and terminal=?cx and dataMovimento=?data;");
                banco.addParametro("?store", store);
                banco.addParametro("?data", data);
                banco.addParametro("?cx", cx);
                banco.procedimentoRead();
                if (banco.retornaRead().Read() == true)
                {
                    result = banco.retornaRead().GetString(0);
                }
            }
            catch (Exception erro)
            {
                auxConsistencia = 1;
                msgInfo msg = new msgInfo(1, "Caro Cliente - " + erro.Message); msg.ShowDialog(); auxConsistencia = 1;
                return "0";
            }
            finally
            {
                banco.fechaConexao(); if (title != "") { this.txtTitleCupomFiscalConectorCF.Invoke((MethodInvoker)delegate { txtTitleCupomFiscalConectorCF.Text = title; }); }
                if (auxConsistencia == 1)
                {
                    
                }
            }
            return result;
        }
        public int conector_verifica_exits_financeiro(string number, string store, string pdv)
        {
            auxConsistencia = 0;
            int result = -1;
            try
            {
                title = banco.abreConexao();
                banco.singleTransaction("SELECT count(*) FROM conectorpdv.cupom_movimento where dataVenda=?dat and numeroCupom=?number and loja=?store and terminal=?terminal");
                banco.addParametro("?number", Convert.ToDouble(number.Replace("\0","").Trim()).ToString());
                banco.addParametro("?store", store.Replace("\0", "").Trim() == "" ? alwaysVariables.Store : store.Replace("\0", "").Trim());
                banco.addParametro("?terminal", pdv.Replace("\0", "").Trim());
                banco.addParametro("?dat", String.Format("{0:yyyyMMdd}", Convert.ToDateTime(fiscal_data_movimento.Substring(0, 2) + "/" + fiscal_data_movimento.Substring(2, 2) + "/" + String.Format("{0:ddMMyyyy}", DateTime.Now).Substring(4, 2) + fiscal_data_printer.Substring(4, 2))));
                banco.procedimentoRead();
                if (banco.retornaRead().Read() == true)
                {
                    result = Convert.ToInt32(banco.retornaRead().GetString(0));
                }
            }
            catch (Exception erro)
            {
                auxConsistencia = 1;
                msgInfo msg = new msgInfo("Caro Cliente - " + erro.Message); msg.ShowDialog(); auxConsistencia = 1;
            }
            finally
            {
                banco.fechaConexao(); if (title != "") { this.txtTitleCupomFiscalConectorCF.Invoke((MethodInvoker)delegate { txtTitleCupomFiscalConectorCF.Text = title; }); }
                if (auxConsistencia == 1)
                {
                    result = -1;
                }
            }
            return result;
        }

        public int conector_verifica_crz_cro(ref string crz, ref string cro)
        {
            auxConsistencia = 0;
            int result = -1;
            try
            {
                if (banco.statusSchema() == 1)
                {
                    return 1;
                }
                title = banco.abreConexao();
                //banco.singleTransaction("SELECT max(crz), max(cro) FROM conectorpdv.detalhe_reducao");
                banco.singleTransaction("SELECT ifnull(max(crz),0), ifnull(max(cro),1) from movimentoDia");//Flavio
                banco.procedimentoRead();
                if (banco.retornaRead().Read() == true)
                {
                    crz = banco.retornaRead().GetString(0);
                    cro = banco.retornaRead().GetString(1);
                }
            }
            catch (Exception erro)
            {
                auxConsistencia = 1;
                if (arranque == 0)
                {
                    msgInfo msg = new msgInfo("Caro Cliente - " + erro.Message); msg.ShowDialog(); auxConsistencia = 1;
                }
                else
                {
                    conector_verifica_crz_cro(ref crz, ref cro);
                }
            }
            finally
            {
                banco.fechaConexao(); if (title != "") { this.txtTitleCupomFiscalConectorCF.Invoke((MethodInvoker)delegate { txtTitleCupomFiscalConectorCF.Text = title; }); }
                if (auxConsistencia == 1)
                {
                    result = -1;
                }
            }
            return result;
        }
        public int conector_verifica_venda_bruta(ref string venda)
        {
            auxConsistencia = 0;
            int result = -1;

            try
            {
                if (rmais.statusSchema() == 0)
                {
                    title = rmais.abreConexao();
                    rmais.singleTransaction("SELECT coalesce(ROUND((max(ifnull(grandeTotalEnd,0))*100)),0) FROM conectorpdv.fechamentocaixa");
                    rmais.procedimentoRead();
                    if (rmais.retornaRead().Read() == true)
                    {
                        venda = rmais.retornaRead().GetString(0);

                    }
                }
                else
                {
                    return -1;
                }
            }
            catch (Exception erro)
            {
                auxConsistencia = 1;
                //msgInfo msg = new msgInfo(1, "Caro Cliente - " + erro.Message); msg.ShowDialog(); auxConsistencia = 1;
            }
            finally
            {
                rmais.fechaConexao(); if (title != "") { this.txtTitleCupomFiscalConectorCF.Invoke((MethodInvoker)delegate { txtTitleCupomFiscalConectorCF.Text = title; }); }
                if (auxConsistencia == 1)
                {
                    result = -1;
                }
            }
            return result;
        }
        public string conector_verifica_last_movimento()
        {
            auxConsistencia = 0;
            string result = "00000000";
            try
            {
                title = banco.abreConexao();
                banco.singleTransaction("SELECT ifnull(date_format(max(movimento),'%d%m%Y'),0) FROM conectorPDV.detalhe_reducao_aliquota where movimento <= now()");
                banco.procedimentoRead();
                if (banco.retornaRead().Read() == true)
                {
                    result = banco.retornaRead().GetString(0).ToString();
                }
            }
            catch (Exception erro)
            {
                auxConsistencia = 1;
                msgInfo msg = new msgInfo("Caro Cliente - " + erro.Message); msg.ShowDialog(); auxConsistencia = 1;
            }
            finally
            {
                banco.fechaConexao(); if (title != "") { this.txtTitleCupomFiscalConectorCF.Invoke((MethodInvoker)delegate { txtTitleCupomFiscalConectorCF.Text = title; }); }
                if (auxConsistencia == 1)
                {
                    result = "00000000";
                }
            }
            return result;
        }

        public int conector_verifica_exits_metodo(string met)
        {
            auxConsistencia = 0;
            int result = -1;
            try
            {
                title = banco.abreConexao();
                banco.singleTransaction("select idMetodo,idFinalizadora,nroparcelas,descricao from metodo where idMetodo=?met");
                banco.addParametro("?met", met);
                banco.procedimentoRead();
                if (banco.retornaRead().Read() == true )
                {
                    if (Convert.ToString(banco.retornaRead().GetString(1)) == "3")
                    {
                        result = Convert.ToInt32(banco.retornaRead().GetString(0));
                        reserva_metodo = Convert.ToString(banco.retornaRead().GetString(0));
                        reserva_finalizadora = Convert.ToString(banco.retornaRead().GetString(1));
                        reserva_parcelas = Convert.ToString(banco.retornaRead().GetString(2));
                        reserva_desc_metodo = Convert.ToString(banco.retornaRead().GetString(3));
                    }
                    else
                    {
                        result = -1;
                    }
                }
                else
                {
                    result = -1;
                }
            }
            catch (Exception erro)
            {
                //throw new Exception("ERRO BANCO DE DADOS: " + e.Message.ToString());
                msgInfo msg = new msgInfo("Caro Cliente - " + erro.Message); msg.ShowDialog(); auxConsistencia = 1;
            }
            finally
            {
                banco.fechaConexao(); if (title != "") { this.txtTitleCupomFiscalConectorCF.Invoke((MethodInvoker)delegate { txtTitleCupomFiscalConectorCF.Text = title; }); }
                if (auxConsistencia == 1)
                {
                    result = -1;
                }
            }
            return result;
        }

        public int conector_verifica_count_financeiro(string number, string store, string pdv, string forma)
        
        {
            auxConsistencia = 0;
            int result = -1;
            try
            {
                title = banco.abreConexao();
                banco.singleTransaction("SELECT count(*) FROM conectorpdv.cupom_movimento where dataVenda=?dat and numeroCupom=?number and loja=?store and terminal=?terminal and finalizadora=?formPgto");
                banco.addParametro("?number", Convert.ToDouble(number.Replace("\0","").Trim()).ToString());
                banco.addParametro("?store", store.Replace("\0","").Trim());
                banco.addParametro("?terminal", pdv.Replace("\0", "").Trim());
                banco.addParametro("?dat", String.Format("{0:yyyyMMdd}", Convert.ToDateTime(fiscal_data_movimento.Substring(0, 2) + "/" + fiscal_data_movimento.Substring(2, 2) + "/" + String.Format("{0:ddMMyyyy}", DateTime.Now).Substring(4, 2) + fiscal_data_printer.Substring(4, 2))));
                banco.addParametro("?formPgto", forma);
                banco.procedimentoRead();
                if (banco.retornaRead().Read() == true)
                {
                    result = Convert.ToInt32(banco.retornaRead().GetString(0));
                }
            }
            catch (Exception e)
            {
                auxConsistencia = 1;
                msgInfo msg = new msgInfo("Caro Cliente - " + e.Message); msg.ShowDialog(); auxConsistencia = 1;
            }
            finally
            {
                banco.fechaConexao(); if (title != "") { this.txtTitleCupomFiscalConectorCF.Invoke((MethodInvoker)delegate { txtTitleCupomFiscalConectorCF.Text = title; }); }
                if (auxConsistencia == 1)
                {
                    result = -1;
                }
            }
            return result;
        }
        public int conector_verifica_exits_itemAleatorio(string number, string store, string pdv, string barra, string valueItem)
        {
            auxConsistencia = 0;
            string texto = "";

            texto = "SELECT ifnull(max(sequencia),0), truncate(ifnull(quantidade,0),2), truncate(ifnull(priceVenda,0),2)";
            texto += " FROM conectorpdv.cupom_detalhes ";
            texto += " where ";
            texto += "  numeroCupom=?number and ";
            texto += "  loja=?store and ";
            texto += "  terminal=?pdv and ";
            texto += "  dataVenda=?dat and  ";
            texto += "  barra=?barra and ";
            texto += "  (truncate((quantidade*priceVenda),2) = ?valueItem) and statusProduto=0  and desconto = 0";

            int result = -1;
            try
            {
                title = banco.abreConexao();
                banco.singleTransaction(texto);
                banco.addParametro("?number", Convert.ToDouble(number.Replace("\0","").Trim()).ToString());
                banco.addParametro("?store", store.Replace("\0", "").Trim() == "" ? alwaysVariables.Store : store.Replace("\0", "").Trim());
                banco.addParametro("?pdv", pdv.Replace("\0","").Trim());
                banco.addParametro("?dat", String.Format("{0:yyyyMMdd}", Convert.ToDateTime(fiscal_data_movimento.Substring(0, 2) + "/" + fiscal_data_movimento.Substring(2, 2) + "/" + String.Format("{0:ddMMyyyy}", DateTime.Now).Substring(4, 2) + fiscal_data_printer.Substring(4, 2))));
                banco.addParametro("?barra", barra);
                banco.addParametro("?valueItem", valueItem.Replace(",", "."));
                banco.procedimentoRead();
                if (banco.retornaRead().Read() == true)
                {
                    result = Convert.ToInt32(banco.retornaRead().GetString(0));
                    produto_qtty = banco.retornaRead().GetString(1);
                    produto_valor_unitario = Convert.ToString(banco.retornaRead().GetString(2));
                }
            }
            catch (Exception e)
            {
                auxConsistencia = 1;
                msgInfo msg = new msgInfo("Caro Cliente - " + e.Message); msg.ShowDialog(); auxConsistencia = 1;
            }
            finally
            {
                banco.fechaConexao(); if (title != "") { this.txtTitleCupomFiscalConectorCF.Invoke((MethodInvoker)delegate { txtTitleCupomFiscalConectorCF.Text = title; }); }
                if (auxConsistencia == 1)
                {
                    result = -1;
                }
            }
            return result;
        }

        public int conector_verifica_exits_sequencia(string number, string store, string pdv, string item_cupom, Int16 tipo)
        {
            auxConsistencia = 0;
            int result = -1;
            try
            {
                title = banco.abreConexao();
                if (tipo == 1)
                {
                    banco.singleTransaction("SELECT count(*), ifnull(total,0), ifnull(produto,0) FROM conectorpdv.cupom_detalhes where numeroCupom=?number and loja=?store and terminal=?pdv and dataVenda=?dat and statusProduto=0  and acrescimo = 0 and sequencia=?sequencia");
                }
                else
                {
                    banco.singleTransaction("SELECT count(*), ifnull(total,0), ifnull(produto,0) FROM conectorpdv.cupom_detalhes where numeroCupom=?number and loja=?store and terminal=?pdv and dataVenda=?dat and statusProduto=0  and desconto = 0 and sequencia=?sequencia");
                }
                banco.addParametro("?number", Convert.ToDouble(number.Replace("\0", "").Trim()).ToString());
                banco.addParametro("?store", store.Replace("\0", "").Trim() == "" ? alwaysVariables.Store : store.Replace("\0", "").Trim());
                banco.addParametro("?pdv", pdv.Replace("\0", "").Trim());
                banco.addParametro("?sequencia", item_cupom);
                if (Convert.ToDouble(fiscal_data_movimento.Replace("\0", "").Trim() == "" ? "0" : fiscal_data_movimento) > 0)
                {
                    banco.addParametro("?dat", String.Format("{0:yyyyMMdd}", Convert.ToDateTime(fiscal_data_movimento.Substring(0, 2) + "/" + fiscal_data_movimento.Substring(2, 2) + "/" + String.Format("{0:ddMMyyyy}", DateTime.Now).Substring(4, 2) + fiscal_data_printer.Substring(4, 2))));
                    banco.procedimentoRead();
                    if (banco.retornaRead().Read() == true)
                    {
                        result = Convert.ToInt32(banco.retornaRead().GetString(0));
                        acresDesc = banco.retornaRead().GetString(1);
                        produto_barra = banco.retornaRead().GetString(2);
                    }
                }
                else
                {
                    auxConsistencia = 1;
                }
            }
            catch (Exception e)
            {
                auxConsistencia = 1;
                msgInfo msg = new msgInfo("Caro Cliente - " + e.Message); msg.ShowDialog(); auxConsistencia = 1;
            }
            finally
            {
                banco.fechaConexao(); if (title != "") { this.txtTitleCupomFiscalConectorCF.Invoke((MethodInvoker)delegate { txtTitleCupomFiscalConectorCF.Text = title; }); }
                if (auxConsistencia == 1)
                {
                    result = -1;
                }
            }
            return result;
        }
        public int conector_verifica_exits_itens(string number, string store, string pdv)
        {
            auxConsistencia = 0;
            int result = -1;
            try
            {
                if (banco.statusSchema() == 1)
                {
                    return result;
                }
                title = banco.abreConexao();
                banco.singleTransaction("SELECT count(*) FROM conectorpdv.cupom_detalhes where numeroCupom=?number and loja=?store and terminal=?pdv and dataVenda=?dat and statusProduto=0  and desconto = 0");
                banco.addParametro("?number", Convert.ToDouble(number.Replace("\0","").Trim()).ToString());
                banco.addParametro("?store", store.Replace("\0","").Trim());
                banco.addParametro("?pdv", pdv.Replace("\0", "").Trim());
                if (Convert.ToDouble(fiscal_data_movimento.Replace("\0", "").Trim() == "" ? "0" : fiscal_data_movimento) > 0)
                {
                    banco.addParametro("?dat", String.Format("{0:yyyyMMdd}", Convert.ToDateTime(fiscal_data_movimento.Substring(0, 2) + "/" + fiscal_data_movimento.Substring(2, 2) + "/" + String.Format("{0:ddMMyyyy}", DateTime.Now).Substring(4, 2) + fiscal_data_printer.Substring(4, 2))));
                    banco.procedimentoRead();
                    if (banco.retornaRead().Read() == true)
                    {
                        result = Convert.ToInt32(banco.retornaRead().GetString(0));
                    }
                }
                else
                {
                    auxConsistencia = 1;
                }
            }
            catch (Exception e)
            {
                auxConsistencia = 1;
                if (arranque == 0)
                {
                    msgInfo msg = new msgInfo(1, "Caro Cliente - " + e.Message); msg.ShowDialog();
                }
            }
            finally
            {
                banco.fechaConexao(); if (title != "") { this.txtTitleCupomFiscalConectorCF.Invoke((MethodInvoker)delegate { txtTitleCupomFiscalConectorCF.Text = title; }); }
                if (auxConsistencia == 1)
                {
                    result = -1;
                }
            }
            return result;
        }
        public int conector_verifica_exits_itens_nfce(string id, string store)
        {
            auxConsistencia = 0;
            int result = -1;
            try
            {
                title = banco.abreConexao();
                banco.singleTransaction("SELECT count(*) FROM conectorpdv.pedidoItens_temp where idPedido=?number and idloja=?store and situacao=0  and valorDiscount = 0");
                banco.addParametro("?number", Convert.ToDouble(id.Replace("\0", "").Trim()).ToString());
                banco.addParametro("?store", store.Replace("\0", "").Trim());
                banco.procedimentoRead();
                if (banco.retornaRead().Read() == true)
                {
                    result = Convert.ToInt32(banco.retornaRead().GetString(0));
                }
            }
            catch (Exception e)
            {
                auxConsistencia = 1;
                msgInfo msg = new msgInfo("Caro Cliente - " + e.Message); msg.ShowDialog(); auxConsistencia = 1;
            }
            finally
            {
                banco.fechaConexao(); if (title != "") { this.txtTitleCupomFiscalConectorCF.Invoke((MethodInvoker)delegate { txtTitleCupomFiscalConectorCF.Text = title; }); }
                if (auxConsistencia == 1)
                {
                    result = -1;
                }
            }
            return result;
        }
        public void conector_update_autparcela(string parcela, string store, string id, string crediario)
        {
            try
            {
                auxConsistencia = 0;
                title = banco.abreConexao();
                banco.singleTransaction("update historicocrediario set autenticacao=1 where parcela_idParcela=?id and parcela_idCrediario=?idCrediario and parcela_nr_parcela=?parcela and parcela_idLoja=?store");
                banco.addParametro("?id", id);
                banco.addParametro("?idCrediario", crediario);
                banco.addParametro("?parcela", parcela);
                banco.addParametro("?store", store.Replace("\0","").Trim());
                banco.procedimentoRead();
            }
            catch (Exception erro)
            {
                msgInfo msg = new msgInfo("Caro Cliente - " + erro.Message); msg.ShowDialog(); auxConsistencia = 1;
            }
            finally
            {
                banco.fechaConexao(); if (title != "") { this.txtTitleCupomFiscalConectorCF.Invoke((MethodInvoker)delegate { txtTitleCupomFiscalConectorCF.Text = title; }); }
                if (auxConsistencia == 0)
                {

                }
            }
        }

        public void conector_update_notaFiscal(string numero, string serie, string id, string chave, string store, string protocolo, string motivo, string versao, string dataHora, string msg01, string msg02, string msg03)
        {
            try
            {
                auxConsistencia = 0;
                title = banco.abreConexao();
                banco.singleTransaction("update nf set statusNf=1, geraDanfe='s' ,alteracao=?dataHora , saida=?dataHora, dataHoraRecbNfe=?dataHora, nr_nota=?numero, serie=?serie, chave_nfe=?chave, protocolo=?protocolo, motivo=?motivo, versaoNfe=?versao where nf.nf=?id and loja=?store");
                banco.addParametro("?numero", numero);
                banco.addParametro("?serie", serie);
                banco.addParametro("?id", id);
                banco.addParametro("?chave", chave);
                banco.addParametro("?store", store.Replace("\0", "").Trim() == "" ? alwaysVariables.Store : store.Replace("\0", "").Trim());
                banco.addParametro("?protocolo", protocolo);
                banco.addParametro("?motivo", motivo);
                banco.addParametro("?versao", versao);
                banco.addParametro("?dataHora", dataHora);
                banco.addParametro("?msg01", msg01);
                banco.addParametro("?msg02", msg02);
                banco.addParametro("?msg03", msg03);
                banco.procedimentoRead();
            }
            catch (Exception erro)
            {
                msgInfo msg = new msgInfo("Caro Cliente - " + erro.Message); msg.ShowDialog(); auxConsistencia = 1;
            }
            finally
            {
                banco.fechaConexao(); if (title != "") { this.txtTitleCupomFiscalConectorCF.Invoke((MethodInvoker)delegate { txtTitleCupomFiscalConectorCF.Text = title; }); }
                if (auxConsistencia == 0)
                {
                    /*Export Cabecalho Nf*/
                    workObject.modoPdv(true); //Para rotina loop
                    instrucao.setVetorCupom();
                    strCupom = instrucao.getNfce(alwaysVariables.UserName, alwaysVariables.Senha, alwaysVariables.Store, id, String.Format("{0:yyyyMMdd}", DateTime.Now), auxLoteNota);
                    instrucao.carregaInstrucaoMovimentoVenda(instrucao._nfe, strCupom, 0);
                    instrucao.compactScript(instrucao._nfe, "nfce");
                    lblChaveNfce.Text = chave;
                    lblMsgRetornoSefaz.Text = motivo;
                    msgInfo msg = new msgInfo(1,"DADOS GRAVADOS COM SUCESSO...!"); msg.ShowDialog(); auxConsistencia = 1;//Retorno a completar exportacao script
                    if (fiscal_numero_serie != "" && (alwaysVariables.CodigoMsg.Trim() == "104" || alwaysVariables.CodigoMsg.Trim() == "100"))
                    {
                        imprimirNfce(auxNumeroNota, auxSerieNota, String.Format("{0:yyyy-MM-dd HH:mm:ss}", DateTime.Now));
                    }
                    workObject.modoPdv(false); //Libera rotina loop

                }
            }
        }
        public void conector_update_notaFiscal(string store, string chave, string nr_impressao, string impresso)
        {
            try
            {
                auxConsistencia = 0;
                title = banco.abreConexao();
                banco.singleTransaction("update nf set impresso=?impresso, nr_impressao=?nr_impressao where nf.nf=?chave and loja=?store");
                banco.addParametro("?chave", chave);
                banco.addParametro("?store", store.Replace("\0", "").Trim() == "" ? alwaysVariables.Store : store.Replace("\0", "").Trim());
                banco.addParametro("?nr_impressao", nr_impressao);
                banco.addParametro("?impresso", impresso);
                banco.procedimentoRead();
            }
            catch (Exception erro)
            {
                msgInfo msg = new msgInfo("Caro Cliente - " + erro.Message); msg.ShowDialog(); auxConsistencia = 1;
            }
            finally
            {
                banco.fechaConexao(); if (title != "") { this.txtTitleCupomFiscalConectorCF.Invoke((MethodInvoker)delegate { txtTitleCupomFiscalConectorCF.Text = title; }); }
                if (auxConsistencia == 0)
                {
                    msgInfo msg = new msgInfo(1, "DADOS GRAVADOS COM SUCESSO...!"); msg.ShowDialog(); auxConsistencia = 1;//Retorno a completar exportacao script
                    if (fiscal_numero_serie != "")
                    {
                        
                    }

                }
            }
        }
        public void conector_load_financeiro(string number, string store, string pdv)
        {
            auxConsistencia = 0;
            countField = 0;
            countRows = 0;
            try
            {
                title = banco.abreConexao();
                banco.singleTransaction("SELECT finalizadora,valor, troco FROM conectorpdv.cupom_movimento where dataVenda=?dat and numeroCupom=?number and loja=?store and terminal=?terminal");
                banco.addParametro("?dat", String.Format("{0:yyyyMMdd}", Convert.ToDateTime(fiscal_data_printer.Substring(0, 2) + "/" + fiscal_data_printer.Substring(2, 2) + "/" + String.Format("{0:ddMMyyyy}", DateTime.Now).Substring(4, 2) + fiscal_data_printer.Substring(4, 2))));
                banco.addParametro("?number", Convert.ToDouble(number.Replace("\0", "").Trim()).ToString());
                banco.addParametro("?store", store.Replace("\0", "").Trim());
                banco.addParametro("?terminal", pdv.Replace("\0", "").Trim());
                banco.procedimentoSet();
            }
            catch (Exception e)
            {
                auxConsistencia = 1;
                msgInfo msg = new msgInfo("Caro Cliente - " + e.Message); msg.ShowDialog(); auxConsistencia = 1;
            }
            finally
            {
                if (auxConsistencia == 0)
                {
                    vetorTotal = new string[12] { "#", "#", "#", "#", "#", "#", "#", "#", "#", "#", "#", "#" }; //Primeiro posição abre modo finalizadora ECF, posição 1;10 finalizadora,ultima posicao encerra modo finalizadora ECF.
                    countField = banco.retornaSet().Tables[0].Columns.Count;
                    countRows = banco.retornaSet().Tables[0].DefaultView.Count;
                    if (countRows > 0)
                    {
                        vetorFinanceiro = new string[countRows, countField];

                        for (i = 0; i < countRows; i++)//Linha
                        {
                            for (int j = 0; j < countField; j++)
                            {
                                vetorFinanceiro[i, j] = Convert.ToString(banco.retornaSet().Tables[0].Rows[i][j]);
                            }
                        }
                        banco.fechaConexao(); if (title != "") { this.txtTitleCupomFiscalConectorCF.Invoke((MethodInvoker)delegate { txtTitleCupomFiscalConectorCF.Text = title; }); }
                        for (i = 0; i < countRows; i++)//Linha
                        {
                            for (int j = 0; j < countField; j++)
                            {
                                switch (vetorFinanceiro[i, 0])
                                {
                                    case "1":
                                        vetorTotal[1] = String.Format("{0:F2}", Convert.ToDecimal(vetorFinanceiro[i, 1].Replace(",", "."))).Replace(".", ",");
                                        txtDinheiroConectorCF.Text = String.Format("{0:F2}", Convert.ToDecimal(vetorFinanceiro[i, 1].Replace(",", "."))).Replace(".", ",");
                                        conector_finalizadora_dinheiro();
                                        finalizadoraTroco = 1;
                                        break;
                                    case "2":
                                        vetorTotal[2] = String.Format("{0:F2}", Convert.ToDecimal(vetorFinanceiro[i, 1].Replace(",", "."))).Replace(".", ",");
                                        txtChequeConectorCF.Text = String.Format("{0:F2}", Convert.ToDecimal(vetorFinanceiro[i, 1].Replace(",", "."))).Replace(".", ",");
                                        conector_finalizadora_cheque();
                                        finalizadoraTroco = 2;
                                        break;
                                    case "3":
                                        vetorTotal[3] = String.Format("{0:F2}", Convert.ToDecimal(vetorFinanceiro[i, 1].Replace(",", "."))).Replace(".", ",");
                                        txtCrediarioConectorCF.Text = String.Format("{0:F2}", Convert.ToDecimal(vetorFinanceiro[i, 1].Replace(",", "."))).Replace(".", ",");
                                        conector_finalizadora_crediario();
                                        finalizadoraTroco = 3;
                                        break;
                                    case "4":
                                        vetorTotal[4] = String.Format("{0:F2}", Convert.ToDecimal(vetorFinanceiro[i, 1].Replace(",", "."))).Replace(".", ",");
                                        txtConvenioConectorCF.Text = String.Format("{0:F2}", Convert.ToDecimal(vetorFinanceiro[i, 1].Replace(",", "."))).Replace(".", ",");
                                        conector_finalizadora_convenio();
                                        finalizadoraTroco = 4;
                                        break;
                                    case "5":
                                        vetorTotal[5] = String.Format("{0:F2}", Convert.ToDecimal(vetorFinanceiro[i, 1].Replace(",", "."))).Replace(".", ",");
                                        txtCartaoCreditoConectorCF.Text = String.Format("{0:F2}", Convert.ToDecimal(vetorFinanceiro[i, 1].Replace(",", "."))).Replace(".", ",");
                                        conector_finalizadora_cartaoCredito("1","1");
                                        finalizadoraTroco = 5;
                                        break;
                                    case "6":
                                        vetorTotal[6] = String.Format("{0:F2}", Convert.ToDecimal(vetorFinanceiro[i, 1].Replace(",", "."))).Replace(".", ",");
                                        txtCartaoDebitoConectorCF.Text = String.Format("{0:F2}", Convert.ToDecimal(vetorFinanceiro[i, 1].Replace(",", "."))).Replace(".", ",");
                                        conector_finalizadora_cartaoDebito();
                                        finalizadoraTroco = 6;
                                        break;
                                    case "7":
                                        vetorTotal[7] = String.Format("{0:F2}", Convert.ToDecimal(vetorFinanceiro[i, 1].Replace(",", "."))).Replace(".", ",");
                                        txtBoletoConectorCF.Text = String.Format("{0:F2}", Convert.ToDecimal(vetorFinanceiro[i, 1].Replace(",", "."))).Replace(".", ",");
                                        conector_finalizadora_boleto();
                                        finalizadoraTroco = 7;
                                        break;
                                    case "8":
                                        vetorTotal[8] = String.Format("{0:F2}", Convert.ToDecimal(vetorFinanceiro[i, 1].Replace(",", "."))).Replace(".", ",");
                                        txtDuplicataConectorCF.Text = String.Format("{0:F2}", Convert.ToDecimal(vetorFinanceiro[i, 1].Replace(",", "."))).Replace(".", ",");
                                        conector_finalizadora_duplicata();
                                        finalizadoraTroco = 8;
                                        break;
                                    case "9":
                                        vetorTotal[9] = String.Format("{0:F2}", Convert.ToDecimal(vetorFinanceiro[i, 1].Replace(",", "."))).Replace(".", ",");
                                        txtRecebimentoConectorCF.Text = String.Format("{0:F2}", Convert.ToDecimal(vetorFinanceiro[i, 1].Replace(",", "."))).Replace(".", ",");
                                        conector_finalizadora_recebimento();
                                        finalizadoraTroco = 9;
                                        break;
                                    case "10":
                                        vetorTotal[10] = String.Format("{0:F2}", Convert.ToDecimal(vetorFinanceiro[i, 1].Replace(",", "."))).Replace(".", ",");
                                        txtValeConectorCF.Text = String.Format("{0:F2}", Convert.ToDecimal(vetorFinanceiro[i, 1].Replace(",", "."))).Replace(".", ",");
                                        conector_finalizadora_vale();
                                        finalizadoraTroco = 10;
                                        break;
                                }
                            }
                        }
                    }
                }
                banco.fechaConexao(); if (title != "") { this.txtTitleCupomFiscalConectorCF.Invoke((MethodInvoker)delegate { txtTitleCupomFiscalConectorCF.Text = title; }); }
                if (auxConsistencia == 0)
                {
                    conector_load_subTotais(fiscal_Cupom.Replace("\0", "").Trim(), fiscal_store.Replace("\0", "").Trim() == "" ? alwaysVariables.Store : store.Replace("\0", "").Trim(), fiscal_numero_caixa.Replace("\0", "").Trim());
                }
            }
        }
        public void conector_load_subTotais(string number, string store, string pdv)
        {
         
            string texto;

            texto = "    SELECT ifnull(round(tab.desconto,2),0) as desconto1, ";
            texto += "           ifnull(round((select sum(d.total) ";
            texto += "                                       FROM conectorpdv.cupom_detalhes d ";
            texto += "                                                where d.dataVenda=?dat  and ";
            texto += "                                                      d.numeroCupom=?number and ";
            texto += "                                                      d.loja=?store and ";
            texto += "                                                      d.terminal=?terminal and ";
            texto += "                                                      d.statusProduto=0),2),0) as TotalItem, ";
            texto += "            ifnull(round(tab.acrescimo,2),0) as acrescimo, ";
            texto += "            if(tab.desconto=0,round((sum((tab1.quantidade*tab1.priceVenda)) - tab1.valorDesconto),2),round((sum((tab1.quantidade*tab1.priceVenda)) - round(sum((tab1.quantidade*tab1.priceVenda)*tab.desconto)/100,2)),2)) as total, ";
            // texto += "            round((ifnull(sum(((tab1.quantidade*tab1.priceVenda)-tab1.ValorDesconto)+tab1.ValorAcrescimo),0)/*-ifnull(tab1.valorDesconto,0)+ifnull(tab1.valorAcrescimo,0)*/)-ifnull(tab.desconto,0)+ifnull(tab.acrescimo,0),2) total, ";
            texto += "            ifnull(round(tab2.valor,2),0.00) as bruto, ";
            texto += "            if(round(ifnull(round(ifnull((tab2.valor),0.00),2),0.00) - ";
            texto += "            round((sum((tab1.quantidade*tab1.priceVenda)+tab1.valorDesconto+tab1.ValorAcrescimo))-ifnull(tab.desconto,0.00)+ifnull(tab.acrescimo,0.00),2),2) <= 0, 0.00, ";
            texto += "            round(ifnull(round(ifnull((tab2.valor),0.00),2),0.00) - round((sum((tab1.quantidade*tab1.priceVenda)+tab1.valorDesconto+tab1.ValorAcrescimo))-ifnull(tab.desconto,0.00)+ifnull(tab.acrescimo,0.00),2),2)) as troco,";
            texto += "            if(tab.desconto=0,round((sum((tab1.quantidade*tab1.priceVenda)) - tab1.valorDesconto),2),round((sum((tab1.quantidade*tab1.priceVenda)) - round(sum((tab1.quantidade*tab1.priceVenda)*tab.desconto)/100,2)),2)) as restante ";
            /*texto += "            round(if(ifnull(round(sum(ifnull(tab2.valor,0.00)),2),0.00) > round((ifnull(sum(((tab1.quantidade*tab1.priceVenda)-tab1.ValorDesconto)+tab1.ValorAcrescimo),0)-ifnull(tab1.valorDesconto,0)+ifnull(tab1.valorAcrescimo,0))-ifnull(tab.desconto,0.00)+ifnull(tab.acrescimo,0.00),2),0.00, ";
            texto += "            if(ifnull(round((tab2.valor),2),0.00) < round((ifnull(sum(((tab1.quantidade*tab1.priceVenda)-tab1.ValorDesconto)+tab1.ValorAcrescimo),0)-ifnull(tab1.valorDesconto,0.00)+ifnull(tab1.valorAcrescimo,0.00))-ifnull(tab.desconto,0.00)+ifnull(tab.acrescimo,0.00),2), ";
            //texto += "            truncate(((ifnull(sum(((tab1.quantidade*tab1.priceVenda)-tab1.ValorDesconto)+tab1.ValorAcrescimo),0)/*-ifnull(tab1.valorDesconto,0.00)+ifnull(tab1.valorAcrescimo,0.00))*///Flavio-ifnull(tab.desconto,0.00)+ifnull(tab.acrescimo,0.00)) - ifnull(round((tab2.valor),2),0.00),2),0.00)),2) as restante ";*/
            texto += "                              FROM conectorpdv.cupom_cabecalho tab ";
            texto += "                                  inner join conectorpdv.cupom_detalhes tab1 on(tab.numeroCupom = tab1.numeroCupom and tab.loja=tab1.loja and tab.terminal=tab1.terminal and tab.dataVenda=tab1.dataVenda) ";
            texto += "                                  left join (";
            texto += "                                  select ifnull(sum(d.valor),0.00) as valor, ifnull(d.numeroCupom,0.00) as numeroCupom, ifnull(d.loja,0.00) as loja, ifnull(d.terminal,0.00) as terminal, ifnull(d.dataVenda,0.00) as dataVenda";
            texto += "                                                                      FROM conectorpdv.cupom_movimento d ";
            texto += "                                                                               where d.dataVenda=?dat  and ";
            texto += "                                                                                      d.numeroCupom=?number and ";
            texto += "                                                                                      d.loja=?store and ";
            texto += "                                                                                      d.terminal=?terminal) as ";
            texto += "                                  tab2 on (tab.numeroCupom = tab2.numeroCupom and tab.loja=tab2.loja and tab.terminal=tab2.terminal and tab.dataVenda=tab2.dataVenda) ";
            texto += "                                  where tab.dataVenda=?dat and tab.numeroCupom=?number and tab.loja=?store and tab.terminal=?terminal and tab1.statusProduto=0 group by 1  ";

            auxConsistencia = 0;
            try
            {
                title = banco.abreConexao();
                banco.singleTransaction(texto);
                banco.addParametro("?dat", String.Format("{0:yyyy-MM-dd}", Convert.ToDateTime(fiscal_data_printer.Substring(0, 2) + "/" + fiscal_data_printer.Substring(2, 2) + "/" + String.Format("{0:ddMMyyyy}", DateTime.Now).Substring(4, 2) + fiscal_data_printer.Substring(4, 2))));
                banco.addParametro("?number", Convert.ToDouble(number.Replace("\0","").Trim()).ToString());
                banco.addParametro("?store", store.Replace("\0","").Trim());
                banco.addParametro("?terminal", pdv.Replace("\0", "").Trim());
                banco.procedimentoRead();
                if (banco.retornaRead().Read() == true)
                {
                    valuesAcresDesc = Convert.ToString(banco.retornaRead().GetString(0)).Replace("." , ",");
                    lblTotalMoneyConectorCF.Text = Convert.ToString(banco.retornaRead().GetString(3)).Replace(".", ",");
                    lblRestanteMoneyConectorCF.Text = (Convert.ToDecimal(Convert.ToString(banco.retornaRead().GetString(3))) - Convert.ToDecimal(Convert.ToString(banco.retornaRead().GetString(4)))).ToString().Replace(".", ","); ;
                    lblMoneyTrocoConectorCF.Text = Convert.ToString(banco.retornaRead().GetString(5)).Replace(".", ",");
                    lblRecebidoMoneyConectorCF.Text = (Convert.ToDecimal(Convert.ToString(banco.retornaRead().GetString(4))) - Convert.ToDecimal(Convert.ToString(banco.retornaRead().GetString(5)))).ToString().Replace(".", ",");
                    if (Convert.ToDecimal(banco.retornaRead().GetString(0)) > 0)
                    {
                        typeDescAcre = 1;
                    }
                    else if (Convert.ToDecimal(banco.retornaRead().GetString(2)) > 0)
                    {
                        typeDescAcre = 2;
                    }
                    else
                    {
                        typeDescAcre = 0;
                    }
                }
            }
            catch (Exception e)
            {
                auxConsistencia = 1;
                msgInfo msg = new msgInfo("Caro Cliente - " + e.Message); msg.ShowDialog(); auxConsistencia = 1;
            }
            finally
            {
                if (auxConsistencia == 0)
                {

                }
                banco.fechaConexao(); if (title != "") { this.txtTitleCupomFiscalConectorCF.Invoke((MethodInvoker)delegate { txtTitleCupomFiscalConectorCF.Text = title; }); }
            }
        }
        public void conector_update_troco(string valor, string finaliza, string number, string store, string pdv, string valorAtual)
        {
            auxConsistencia = 0;
            try
            {
                title = banco.abreConexao();
                banco.singleTransaction("update conectorpdv.cupom_movimento set valor=?valorAtual-?troco, troco=?troco where numeroCupom=?number and loja=?store and terminal=?pdv and dataVenda=?Dat and finalizadora=?finalizadora");
                banco.addParametro("?troco", valor.Replace(",", ".").Trim());
                banco.addParametro("?number", number.Replace("\0","").Trim());
                banco.addParametro("?store", store.Replace("\0","").Trim());
                banco.addParametro("?pdv", pdv.Replace("\0", "").Trim());
                banco.addParametro("?valorAtual", valorAtual.Replace(",", "."));
                banco.addParametro("?finalizadora", finaliza);
                banco.addParametro("?Dat",String.Format("{0:yyyyMMdd}", Convert.ToDateTime(fiscal_data_movimento.Substring(0, 2) + "/" + fiscal_data_movimento.Substring(2, 2) + "/" + String.Format("{0:ddMMyyyy}", DateTime.Now).Substring(4, 2) + fiscal_data_printer.Substring(4, 2))));
                banco.procedimentoRead();
                if (banco.retornaRead().Read() == true)
                {
                }
            }
            catch (Exception e)
            {
                auxConsistencia = 1;
                msgInfo msg = new msgInfo("Caro Cliente - " + e.Message); msg.ShowDialog(); auxConsistencia = 1;
            }
            finally
            {
                banco.fechaConexao(); if (title != "") { this.txtTitleCupomFiscalConectorCF.Invoke((MethodInvoker)delegate { txtTitleCupomFiscalConectorCF.Text = title; }); }
                if (auxConsistencia == 1)
                {
                }
            }
        }
        public void conector_desconto_item(string number, string store, string pdv, string seq, string discount)
        {
            auxConsistencia = 0;
            try
            {
                title = banco.abreConexao();
                banco.singleTransaction("update conectorPdv.cupom_detalhes set desconto=?discount where numeroCupom=?number and loja=?store and terminal=?pdv and dataVenda=?dat and sequencia=?seq");
                banco.addParametro("?number", number.Replace("\0","").Trim());
                banco.addParametro("?store", store.Replace("\0","").Trim());
                banco.addParametro("?pdv", pdv.Replace("\0","").Trim());
                banco.addParametro("?dat", String.Format("{0:yyyyMMdd}", Convert.ToDateTime(fiscal_data_movimento.Substring(0, 2) + "/" + fiscal_data_movimento.Substring(2, 2) + "/" + String.Format("{0:ddMMyyyy}", DateTime.Now).Substring(4, 2) + fiscal_data_printer.Substring(4, 2))));
                banco.addParametro("?seq", seq.Replace("\0","").Trim());
                banco.addParametro("?discount", discount.Replace(",","."));
                banco.procedimentoRead();
                if (banco.retornaRead().Read() == true)
                {
                }
            }
            catch (Exception e)
            {
                auxConsistencia = 1;
                msgInfo msg = new msgInfo("Caro Cliente - " + e.Message); msg.ShowDialog(); auxConsistencia = 1;
            }
            finally
            {
                banco.fechaConexao(); if (title != "") { this.txtTitleCupomFiscalConectorCF.Invoke((MethodInvoker)delegate { txtTitleCupomFiscalConectorCF.Text = title; }); }
                if (auxConsistencia == 0)
                {
                    if (fiscal_data_movimento.Trim() != "" && ( Convert.ToDouble(fiscal_data_movimento.Trim() == "" ? "0" : fiscal_data_movimento.Trim()) > 0))
                    {
                        string test = String.Format("{0:yyyyMMdd}", Convert.ToDateTime(fiscal_data_movimento.Substring(2, 2) + "/" + fiscal_data_movimento.Substring(0, 2) + "/" + String.Format("{0:ddMMyyyy}", DateTime.Now).Substring(4, 2) + fiscal_data_printer.Substring(4, 2)));
                        workObject.modoPdv(true); //Para rotina loop
                        strCupom = "";
                        instrucao.setVetorCupom();
                        strCupom = instrucao.getCupomDetalhes(alwaysVariables.UserName, alwaysVariables.Senha, Convert.ToDouble(fiscal_store.Replace("\0", "").Trim()) > 0 ? fiscal_store.Replace("\0", "").Trim() : alwaysVariables.Store, fiscal_Cupom.Replace("\0", "").Trim(), String.Format("{0:yyyyMMdd}", DateTime.Now), fiscal_numero_caixa.Replace("\0", "").Trim(), seq);
                        instrucao.carregaInstrucaoMovimentoVenda(instrucao._detalhes, strCupom, 1);
                        conector_update_lineMD5_r05(fiscal_Cupom.Replace("\0", "").Trim(), last_item_chave, sequenciaItem, fiscal_numero_caixa.Replace("\0", "").Trim(), conectorPDV_PAFECF_indicador("R05", test, fiscal_store.Replace("\0", "").Trim(), fiscal_numero_caixa.Replace("\0", "").Trim(), fiscal_Cupom.Replace("\0", "").Trim(), sequenciaItem));
                        instrucao.compactScript(instrucao._detalhes, "detalhes");
                        conector_find_subFull("1");
                        workObject.modoPdv(false); //Libera rotina loop
                    }

                    conectorPDV_PAFECF_exe("R04", fiscal_Cupom.Replace(",", "").Trim(), 5, last_item_barra.Replace("\0", "").Trim(), sequenciaItem);
                    conectorPDV_PAFECF_exe("R05", fiscal_Cupom.Replace(",", "").Trim(), 4, last_item_barra.Replace("\0", "").Trim(), sequenciaItem);
                }
            }
        }

        public void conector_desconto_item_nfce(string id, string store, string seq, string discount)
        {
            auxConsistencia = 0;
            try
            {
                title = banco.abreConexao();
                banco.singleTransaction("update conectorPdv.pedidoItens_temp set valorDiscount=?discount where idPedido=?id and sequencial=?seq");
                banco.addParametro("?id", id.Replace("\0", "").Trim());
                banco.addParametro("?store", store.Replace("\0", "").Trim() == "" ? alwaysVariables.Store : store.Replace("\0", "").Trim());
                banco.addParametro("?seq",(Convert.ToInt32(seq) - 1).ToString());
                banco.addParametro("?discount", discount.Replace(",", "."));
                banco.procedimentoRead();
                if (banco.retornaRead().Read() == true)
                {
                }
            }
            catch (Exception e)
            {
                auxConsistencia = 1;
                msgInfo msg = new msgInfo(1,"Caro Cliente - " + e.Message); msg.ShowDialog(); auxConsistencia = 1;
            }
            finally
            {
                banco.fechaConexao(); if (title != "") { this.txtTitleCupomFiscalConectorCF.Invoke((MethodInvoker)delegate { txtTitleCupomFiscalConectorCF.Text = title; }); }
                if (auxConsistencia == 0)
                {
                    call_pdv = 12;
                    call_funcao = 0;
                    txtVisorNfce.Text = "NFC-e";
                    this.rtbVisualizacaoDadosNf.ForeColor = System.Drawing.Color.Yellow;
                    //string bof = String.Format("{0:F2}", (Convert.ToDecimal(txtEntradaDadosConectorCF.Text.Replace(",", ".")))) + "% (R$ " + String.Format("{0:F2}", ((Convert.ToDecimal(txtEntradaDadosConectorCF.Text.Replace(",", ".")) * (Convert.ToDecimal(last_valor_item == null ? "0" : last_valor_item.Replace(",", ".").Replace(",", ".")) * Convert.ToDecimal(last_qtty_item))) / 100));
                    rtbVisualizacaoDadosNf.Text += "                                     DESCONTO ITEM => " + (Convert.ToInt32(seq) - 1).ToString() + "   " + String.Format("{0:F2}", (Convert.ToDecimal(txtEntradaDadosConectorCF.Text.Replace(",", ".")))) + "% (R$ " + String.Format("{0:F2}", ((Convert.ToDecimal(txtEntradaDadosConectorCF.Text.Replace(",", ".")) * (Convert.ToDecimal(last_valor_item.Replace(",", ".")) * Convert.ToDecimal(last_qtty_item))) / 100)).Replace(".", ",") + ")" + "\r\n";
                    this.rtbVisualizacaoDadosNf.ForeColor = System.Drawing.Color.White;
                    resetLabel();
                    txtEntradaDadosNF.Clear();
                    txtDescricaoNf.Clear();
                    conector_find_subFull("2");
                    txtEntradaDadosNF.CausesValidation = true;
                    txtEntradaDadosNF.Select();
                }
            }
        }

        public void conector_cancela_item_nfce(string id, string store, string seq)
        {
            auxConsistencia = 0;
            try
            {
                title = banco.abreConexao();
                banco.singleTransaction("update conectorPdv.pedidoItens_temp set situacao=1 where idPedido=?id and sequencial=?seq");
                banco.addParametro("?id", id.Replace("\0", "").Trim());
                banco.addParametro("?store", store.Replace("\0", "").Trim() == "" ? alwaysVariables.Store : store.Replace("\0", "").Trim());
                banco.addParametro("?seq", (Convert.ToInt32(seq) - 1).ToString());
                banco.procedimentoRead();
                if (banco.retornaRead().Read() == true)
                {
                }
            }
            catch (Exception e)
            {
                auxConsistencia = 1;
                msgInfo msg = new msgInfo(1, "Caro Cliente - " + e.Message); msg.ShowDialog(); auxConsistencia = 1;
            }
            finally
            {
                banco.fechaConexao(); if (title != "") { this.txtTitleCupomFiscalConectorCF.Invoke((MethodInvoker)delegate { txtTitleCupomFiscalConectorCF.Text = title; }); }
                if (auxConsistencia == 0)
                {
                    call_pdv = 12;
                    call_funcao = 0;
                    txtVisorNfce.Text = "NFC-e";
                    rtbVisualizacaoDadosNf.Text += sequenciaItem + "    "
                                                        + last_item_barra + "    "//produto_barra.PadLeft(12, '0') + "    "
                                                        + last_item_descricao + "    " + " [CANCELADO]" + "    "
                                                        + (last_item_pesavel == "0" ? last_item_qtty : "    ") + "    "
                                                        + last_item_unidade + "    "
                                                        + (last_item_pesavel == "0" ? last_item_qtty + last_item_unidade : String.Format("{0:F3}", Decimal.Parse(last_item_qtty.Replace(",", ".")), 3).ToString().Replace(".", ",") + last_item_unidade + " X " + last_item_price_venda.Replace(".", ",")) + "    "
                                                        + Math.Round(Decimal.Parse(last_item_valor_unitario.Replace(",", ".")), 2).ToString().Replace(".", ",") + "      "
                                                        + last_item_tributacao + "    "
                                                        + Math.Round((Decimal.Parse(last_item_qtty.Replace(",", ".")) * Decimal.Parse(last_item_valor_unitario)), 2).ToString().Replace(".", ",") + "\r\n";
                    this.rtbVisualizacaoDadosNf.ForeColor = System.Drawing.Color.White;
                    resetLabel();
                    txtEntradaDadosNF.Clear();
                    txtDescricaoNf.Clear();
                    conector_find_subFull("2");
                    txtEntradaDadosNF.CausesValidation = true;
                    txtEntradaDadosNF.Select();
                }
            }
        }
        public void conector_acrescimo_item(string number, string store, string pdv, string seq, string acrescimo)
        {
            auxConsistencia = 0;
            try
            {
                title = banco.abreConexao();
                banco.singleTransaction("update conectorPdv.cupom_detalhes set acrescimo=?acrescimo where numeroCupom=?number and loja=?store and terminal=?pdv and dataVenda=?dat and sequencia=?seq");
                banco.addParametro("?number", number.Replace(",",".").Trim());
                banco.addParametro("?store", store.Replace(",", ".").Trim());
                banco.addParametro("?pdv", pdv.Replace(",", ".").Trim());
                banco.addParametro("?dat", String.Format("{0:yyyyMMdd}", Convert.ToDateTime(fiscal_data_movimento.Substring(0, 2) + "/" + fiscal_data_movimento.Substring(2, 2) + "/" + String.Format("{0:ddMMyyyy}", DateTime.Now).Substring(4, 2) + fiscal_data_printer.Substring(4, 2))));
                banco.addParametro("?seq", seq);
                banco.addParametro("?acrescimo", acrescimo.Replace(",","."));
                banco.procedimentoRead();
                if (banco.retornaRead().Read() == true)
                {
                }
            }
            catch (Exception e)
            {
                auxConsistencia = 1;
                msgInfo msg = new msgInfo("Caro Cliente - " + e.Message); msg.ShowDialog(); auxConsistencia = 1;
            }
            finally
            {
                banco.fechaConexao(); if (title != "") { this.txtTitleCupomFiscalConectorCF.Invoke((MethodInvoker)delegate { txtTitleCupomFiscalConectorCF.Text = title; }); }
                if (auxConsistencia == 0)
                {
                    if (fiscal_data_movimento.Trim() != "" && (Convert.ToDouble(fiscal_data_movimento.Trim() == "" ? "0" : fiscal_data_movimento.Trim()) > 0))
                    {
                        string test = String.Format("{0:yyyyMMdd}", Convert.ToDateTime(fiscal_data_movimento.Substring(2, 2) + "/" + fiscal_data_movimento.Substring(0, 2) + "/" + String.Format("{0:ddMMyyyy}", DateTime.Now).Substring(4, 2) + fiscal_data_printer.Substring(4, 2)));
                        workObject.modoPdv(true); //Para rotina loop
                        strCupom = "";
                        instrucao.setVetorCupom();
                        strCupom = instrucao.getCupomDetalhes(alwaysVariables.UserName, alwaysVariables.Senha, Convert.ToDouble(fiscal_store.Replace("\0", "").Trim()) > 0 ? fiscal_store.Replace("\0", "").Trim() : alwaysVariables.Store, fiscal_Cupom.Replace("\0", "").Trim(), String.Format("{0:yyyyMMdd}", DateTime.Now), fiscal_numero_caixa.Replace("\0", "").Trim(), seq);
                        instrucao.carregaInstrucaoMovimentoVenda(instrucao._detalhes, strCupom, 1);
                        conector_update_lineMD5_r05(fiscal_Cupom.Replace("\0", "").Trim(), last_item_chave, sequenciaItem, fiscal_numero_caixa.Replace("\0", "").Trim(), conectorPDV_PAFECF_indicador("R05", test, fiscal_store.Replace("\0", "").Trim(), fiscal_numero_caixa.Replace("\0", "").Trim(), fiscal_Cupom.Replace("\0", "").Trim(), sequenciaItem));
                        instrucao.compactScript(instrucao._detalhes, "detalhes");
                        conector_find_subFull("1");
                        workObject.modoPdv(false); //Libera rotina loop
                    }

                    conectorPDV_PAFECF_exe("R04", fiscal_Cupom.Replace(",", "").Trim(), 5, last_item_barra.Replace("\0", "").Trim(), sequenciaItem);
                    conectorPDV_PAFECF_exe("R05", fiscal_Cupom.Replace(",", "").Trim(), 4, last_item_barra.Replace("\0", "").Trim(), sequenciaItem);
                }
            }
        }

        public void conector_desconto_subTotal(string number, string store, string pdv, string discount)
        {
            auxConsistencia = 0;
            try
            {
                title = banco.abreConexao();
                //banco.singleTransaction("update conectorPdv.cupom_cabecalho set desconto=?discount, totalBruto=(totalBruto - ?discount) where numeroCupom=?number and loja=?store and terminal=?pdv and dataVenda=?dat");
                banco.singleTransaction("update conectorPdv.cupom_cabecalho set desconto=?discount where numeroCupom=?number and loja=?store and terminal=?pdv and dataVenda=?dat");
                banco.addParametro("?number", number.Replace("\0","").Trim());
                banco.addParametro("?store", store.Replace("\0","").Trim());
                banco.addParametro("?pdv", pdv.Replace("\0", "").Trim());
                banco.addParametro("?dat", String.Format("{0:yyyyMMdd}", Convert.ToDateTime(fiscal_data_movimento.Substring(0, 2) + "/" + fiscal_data_movimento.Substring(2, 2) + "/" + String.Format("{0:ddMMyyyy}", DateTime.Now).Substring(4, 2) + fiscal_data_printer.Substring(4, 2))));
                banco.addParametro("?discount", discount);
                banco.procedimentoRead();
                if (banco.retornaRead().Read() == true)
                {
                }
            }
            catch (Exception e)
            {
                auxConsistencia = 1;
                msgInfo msg = new msgInfo("Caro Cliente - " + e.Message); msg.ShowDialog(); auxConsistencia = 1;
            }
            finally
            {
                banco.fechaConexao(); if (title != "") { this.txtTitleCupomFiscalConectorCF.Invoke((MethodInvoker)delegate { txtTitleCupomFiscalConectorCF.Text = title; }); }
                if (auxConsistencia == 0)
                {
                    ativa_discount = 0;
                }
            }
        }
        public void conector_acrescimo_subTotal(string number, string store, string pdv, string acrescimo)
        {
            auxConsistencia = 0;
            try
            {
                title = banco.abreConexao();
                banco.singleTransaction("update conectorPdv.cupom_cabecalho set acrescimo=?acrescimo, totalBruto=(totalBruto + ?acrescimo) where numeroCupom=?number and loja=?store and terminal=?pdv and dataVenda=?dat");
                banco.addParametro("?number", number.Replace("\0","").Trim());
                banco.addParametro("?store", store.Replace("\0","").Trim());
                banco.addParametro("?pdv", pdv.Replace("\0", "").Trim());
                banco.addParametro("?dat", String.Format("{0:yyyyMMdd}", Convert.ToDateTime(fiscal_data_movimento.Substring(0, 2) + "/" + fiscal_data_movimento.Substring(2, 2) + "/" + String.Format("{0:ddMMyyyy}", DateTime.Now).Substring(4, 2) + fiscal_data_printer.Substring(4, 2))));
                banco.addParametro("?acrescimo", acrescimo);
                banco.procedimentoRead();
                if (banco.retornaRead().Read() == true)
                {
                }
            }
            catch (Exception e)
            {
                auxConsistencia = 1;
                msgInfo msg = new msgInfo("Caro Cliente - " + e.Message); msg.ShowDialog(); auxConsistencia = 1;
            }
            finally
            {
                banco.fechaConexao(); if (title != "") { this.txtTitleCupomFiscalConectorCF.Invoke((MethodInvoker)delegate { txtTitleCupomFiscalConectorCF.Text = title; }); }
                if (auxConsistencia == 0)
                {
                    ativa_acrescimo = 0;
                }
            }
        }
        public double conector_last_cupom()
        {
            auxConsistencia = 0;
            double result = -1;
            try
            {
                title = banco.abreConexao();
                banco.singleTransaction("select coalesce(max(numeroCupom),0) from cupom_cabecalho");
                //banco.addParametro("?nrCupom", numeroCupom);
                banco.procedimentoRead();
                if (banco.retornaRead().Read() == true)
                {
                    result = Convert.ToDouble(banco.retornaRead().GetString(0));
                }
            }
            catch (Exception e)
            {
                auxConsistencia = 1;
                msgInfo msg = new msgInfo("Caro Cliente - " + e.Message); msg.ShowDialog(); auxConsistencia = 1;
            }
            finally
            {
                banco.fechaConexao(); if (title != "") { this.txtTitleCupomFiscalConectorCF.Invoke((MethodInvoker)delegate { txtTitleCupomFiscalConectorCF.Text = title; }); }
                if (auxConsistencia == 0)
                {
                    result = -1;
                }
            }
            return result;
        }
        public int conector_verifica_exits_pepleoLocal(string pepleo)
        {
            auxConsistencia = 0;
            int result = -1;
            try
            {
                title = banco.abreConexao();
                banco.singleTransaction("select count(*) as exits from conectorPDV.cliente where idCliente=?pepleo limit 1");
                banco.addParametro("?pepleo", pepleo);
                banco.procedimentoRead();
                if (banco.retornaRead().Read() == true)
                {
                    result = Convert.ToInt32(banco.retornaRead().GetString(0));
                }
            }
            catch (Exception e)
            {
                auxConsistencia = 1;
                msgInfo msg = new msgInfo("Caro Cliente - " + e.Message); msg.ShowDialog(); auxConsistencia = 1;
            }
            finally
            {
                banco.fechaConexao(); if (title != "") { this.txtTitleCupomFiscalConectorCF.Invoke((MethodInvoker)delegate { txtTitleCupomFiscalConectorCF.Text = title; }); }
                if (auxConsistencia == 1)
                {
                    result = -1;
                }
            }
            return result;
        }
        public int conector_load_pedidoFinanceiro(string id)
        {
            auxConsistencia = 0;
            int result = -1;
            try
            {
                title = banco.abreConexao();
                banco.singleTransaction("select idFinalizadora,referencia from conectorPDV.pedidoFinanceiro where idPedido=?id");
                banco.addParametro("?id", id);
                banco.procedimentoSet();

            }
            catch (Exception e)
            {
                auxConsistencia = 1;
                msgInfo msg = new msgInfo("Caro Cliente - " + e.Message); msg.ShowDialog(); auxConsistencia = 1;
            }
            finally
            {
                if (auxConsistencia == 0)
                {
                    countField = banco.retornaSet().Tables[0].Columns.Count;
                    countRows = banco.retornaSet().Tables[0].DefaultView.Count;
                    if (countRows > 0)
                    {
                        for (i = 0; i < countRows; i++)
                        {
                            switch (Convert.ToInt32(banco.retornaSet().Tables[0].Rows[i][0]))
                            {
                                case 1:
                                    break;
                                case 2:
                                    txtChequeConectorCF.Text = String.Format("{0:F2}", banco.retornaSet().Tables[0].Rows[i][1]).Replace(".", ",").Trim();
                                    break;
                                case 3:
                                    txtCrediarioConectorCF.Text = String.Format("{0:F2}", banco.retornaSet().Tables[0].Rows[i][1]).Replace(".", ",").Trim();
                                    break;
                                case 4:
                                    txtConvenioConectorCF.Text = String.Format("{0:F2}", banco.retornaSet().Tables[0].Rows[i][1]).Replace(".", ",").Trim();
                                    break;
                                case 5:
                                    txtCartaoCreditoConectorCF.Text = String.Format("{0:F2}", banco.retornaSet().Tables[0].Rows[i][1]).Replace(".", ",").Trim();
                                    break;
                                case 6:
                                    txtCartaoDebitoConectorCF.Text = String.Format("{0:F2}", banco.retornaSet().Tables[0].Rows[i][1]).Replace(".", ",").Trim();
                                    break;
                                case 7:
                                    txtBoletoConectorCF.Text = String.Format("{0:F2}", banco.retornaSet().Tables[0].Rows[i][1]).Replace(".", ",").Trim();
                                    break;
                                case 8:
                                    txtDuplicataConectorCF.Text = String.Format("{0:F2}", banco.retornaSet().Tables[0].Rows[i][1]).Replace(".", ",").Trim();
                                    break;
                                case 9:
                                    txtRecebimentoConectorCF.Text = String.Format("{0:F2}", banco.retornaSet().Tables[0].Rows[i][1]).Replace(".", ",").Trim();
                                    break;
                                case 10:
                                    txtValeConectorCF.Text = String.Format("{0:F2}", banco.retornaSet().Tables[0].Rows[i][1]).Replace(".", ",").Trim();
                                    break;
                            }
                            vetorReservaFinanceiro[Convert.ToInt32(banco.retornaSet().Tables[0].Rows[i][0])] = String.Format("{0:F2}", banco.retornaSet().Tables[0].Rows[i][1]).Replace(".", ",").Trim();
                        }
                    }
                }

                banco.fechaConexao(); if (title != "") { this.txtTitleCupomFiscalConectorCF.Invoke((MethodInvoker)delegate { txtTitleCupomFiscalConectorCF.Text = title; }); }
                if (auxConsistencia == 1)
                {
                    result = -1;
                }
            }
            return result;
        }
        public string conector_verifica_exits_pedido(string Nr)
        {
            auxConsistencia = 0;
            string result = "0";
            try
            {
                title = banco.abreConexao();
                banco.singleTransaction("select count(*), ifnull(pedido,0) from  cupom_cabecalho where numeroCupom=?Nr");
                banco.addParametro("?Nr", Nr);
                banco.procedimentoRead();
                if (banco.retornaRead().Read() == true)
                {
                    result = banco.retornaRead().GetString(1).ToString();
                }
            }
            catch (Exception e)
            {
                auxConsistencia = 1;
                msgInfo msg = new msgInfo("Caro Cliente - " + e.Message); msg.ShowDialog(); auxConsistencia = 1;
            }
            finally
            {
                banco.fechaConexao(); if (title != "") { this.txtTitleCupomFiscalConectorCF.Invoke((MethodInvoker)delegate { txtTitleCupomFiscalConectorCF.Text = title; }); }
                if (auxConsistencia == 1)
                {
                    result = "0";
                }
            }
            return result;
        }

        public string conectorPDV_U2()
        {
            auxConsistencia = 0;
            string result = "0";
            try
            {
                title = banco.abreConexao();
                banco.startTransaction("conectorPDV_U2");
                banco.procedimentoRead();
                if (banco.retornaRead().Read() == true)
                {
                    result = banco.retornaRead().GetString(0).ToString();
                }
            }
            catch (Exception e)
            {
                auxConsistencia = 1;
                msgInfo msg = new msgInfo("Caro Cliente - " + e.Message); msg.ShowDialog(); auxConsistencia = 1;
            }
            finally
            {
                banco.fechaConexao(); if (title != "") { this.txtTitleCupomFiscalConectorCF.Invoke((MethodInvoker)delegate { txtTitleCupomFiscalConectorCF.Text = title; }); }
                if (auxConsistencia == 1)
                {
                    result = "0";
                }
            }
            return result;
        }

        public string conectorPDV_clear_log_pedido()
        {
            auxConsistencia = 0;
            string result = "0";
            try
            {
                title = banco.abreConexao();
                banco.startTransaction("conectorPDV_clear_log_pedido");
                banco.procedimentoRead();
                if (banco.retornaRead().Read() == true)
                {
                    result = banco.retornaRead().GetString(0).ToString();
                }
            }
            catch (Exception e)
            {
                auxConsistencia = 1;
                msgInfo msg = new msgInfo("Caro Cliente - " + e.Message); msg.ShowDialog(); auxConsistencia = 1;
            }
            finally
            {
                banco.fechaConexao(); if (title != "") { this.txtTitleCupomFiscalConectorCF.Invoke((MethodInvoker)delegate { txtTitleCupomFiscalConectorCF.Text = title; }); }
                if (auxConsistencia == 1)
                {
                    result = "0";
                }
            }
            return result;
        }

        public void conectorPDV_inc_cartao(string coo, string parcelamento, string parcela)
        {
            auxConsistencia = 0;
            try
            {
                if (parcelamento == "")
                {
                    parcelamento = "1";
                }
                if (proc.statusSchema() == 1)
                {
                    return;
                }
                title = proc.abreConexao();
                proc.startTransaction("conectorPDV_inc_cartao");
                proc.addParametro("inc_idAdministradora", alwaysVariables.Adm);// rever situacao tef dedicado / receberá o default system
                proc.addParametro("inc_idloja", alwaysVariables.Store);
                proc.addParametro("inc_inclusao", String.Format("{0:yyyyMMdd}", DateTime.Now));
                proc.addParametro("inc_cupom", coo);
                proc.addParametro("inc_pedido", "0");
                proc.addParametro("inc_terminal", alwaysVariables.Terminal);
                proc.addParametro("inc_emissao", String.Format("{0:yyyyMMdd}", DateTime.Now));
                proc.addParametro("inc_pagamento", "00000000");
                proc.addParametro("inc_status", "0");
                proc.addParametro("inc_observacao", alwaysVariables.UtilizaTef == "0" ? "Transação fiscal POS N.o => " + fiscal_Cupom.Replace("\0", "").Trim() + ".": null);
                proc.addParametro("inc_parcela", parcela);
                proc.addParametro("inc_qttyParcela", parcelamento);
                proc.addParametro("inc_typeCartao", auxTypeCartao);
                proc.addParametro("inc_bandeira", null);
                proc.addParametro("inc_valor", (somatorio / Convert.ToInt32(parcelamento)).ToString());
                proc.addParametro("inc_networkCard", auxMaquineta);
                proc.addParametro("inc_origem", "c");
                proc.addParametro("inc_batimento", "n");
                proc.addParametro("inc_idFuncionario", banco_operado);
                proc.procedimentoRead();
                if (proc.retornaRead().Read() == true)
                {

                }
            }
            catch (Exception erro)
            { msgInfo msg = new msgInfo("Caro Cliente - " + erro.Message); msg.ShowDialog(); auxConsistencia = 1; }
            finally
            {
                proc.fechaConexao(); if (title != "") { this.txtTitleCupomFiscalConectorCF.Invoke((MethodInvoker)delegate { txtTitleCupomFiscalConectorCF.Text = title; }); }
                if (auxConsistencia == 0)
                {
                    arranqueCartao = 1;
                    if (backgroundConectorCartao.IsBusy != true)
                    {
                        // Start the asynchronous operation.
                        backgroundConectorCartao.RunWorkerAsync();
                    } 
                }

            }
        }

        public void conector_inc_cupom_detalhes_movimento_coo(string coo,string terminal, string dataVenda, string finalizadora, string meio, string vinculo, string ccf, string users, string pgto, string serie_ecf)
        {
            auxConsistencia = 0;
            try
            {
                if (proc.statusSchema() == 1)
                {
                    return;
                }
                title = proc.abreConexao();
                proc.startTransaction("conectorPDV_inc_cupom_detalhes_movimento_coo");
                proc.addParametro("inc_numero_coo", coo.Replace("\0", "").Trim());
                proc.addParametro("inc_idloja", Convert.ToDouble(fiscal_store.Replace("\0", "").Trim()) > 0 ? fiscal_store.Replace("\0", ".").Trim() : alwaysVariables.Store);
                proc.addParametro("inc_idterminal", terminal);
                proc.addParametro("inc_dataVenda", dataVenda);
                proc.addParametro("inc_finalizadora", finalizadora);
                proc.addParametro("inc_meio_pgto", meio);
                proc.addParametro("inc_cupom_vinculo", vinculo.Replace("\0", "").Trim());
                proc.addParametro("inc_ccf", ccf.Replace("\0", "").Trim());
                proc.addParametro("inc_operador", users);
                proc.addParametro("inc_valor_pago", pgto.Replace(",", "."));
                proc.addParametro("inc_numero_serie_ecf", serie_ecf.Replace("\0", "").Trim());
                proc.procedimentoRead();
                if (proc.retornaRead().Read() == true)
                {

                }
            }
            catch (Exception erro)
            {
                auxConsistencia = 1;
                if (title != "IMPOSSÍVEL ESTABELECER CONEXÃO")
                {
                    proc.fechaConexao();
                    conector_inc_cupom_detalhes_movimento_coo(coo, terminal, dataVenda, finalizadora, meio, vinculo, ccf, users, pgto, serie_ecf);
                }
                else
                {
                    msgInfo msg = new msgInfo("Caro Cliente - " + erro.Message); msg.ShowDialog();
                }
            }
            finally
            {
                proc.fechaConexao(); if (title != "") { this.txtTitleCupomFiscalConectorCF.Invoke((MethodInvoker)delegate { txtTitleCupomFiscalConectorCF.Text = title; }); }
                if (auxConsistencia == 0)
                {
                    /* Renegado devido ao meio de pagamento ter sido usado ===> if (finalizadora == "3" || finalizadora == "5" || finalizadora == "6")
                    {
                        conectorPDV_inc_cupom_relatorio("RG");
                    }*/
                }

            }
        }

        public void conectorPDV_update_parcela(string sinal)
        {
            try
            {
                auxConsistencia = 0;
                title = banco.abreConexao();
                banco.singleTransaction("update conectorPDV.parcela set status=?var where  idCrediario = ?contrato and idLoja = ?store and idParcela=?varPar and nr_parcela=?varNr");
                banco.addParametro("?var", sinal);
                banco.addParametro("?contrato", txtNumeroContratoConectorCF.Text);
                banco.addParametro("?store", txtLojaConectorCF.Text);
                banco.addParametro("?varPar", auxIdParcela);
                banco.addParametro("?varNr", txtParcelaConectorCF.Text);
                banco.procedimentoRead();
            }
            catch (Exception erro)
            {
                msgInfo msg = new msgInfo("Caro Cliente - " + erro.Message); msg.ShowDialog(); auxConsistencia = 1;
            }
            finally
            {
                banco.fechaConexao(); if (title != "") { this.txtTitleCupomFiscalConectorCF.Invoke((MethodInvoker)delegate { txtTitleCupomFiscalConectorCF.Text = title; }); }
                if (auxConsistencia == 0 && sinal == "1")
                {
                    conectorPDV_alt_parcela();
                }
            }
        }

        public void conectorPDV_update_contador(string count)
        {
            try
            {
                auxConsistencia = 0;
                title = banco.abreConexao();
                banco.singleTransaction("update conectorpdv.fechamentocaixa set contadorFinal=?count where dataMovimento=?data and loja=?store and terminal=?terminal and funcionario=?Func and sequencia=?seq");
                banco.addParametro("?count", count.Replace("\0", "").Trim());
                banco.addParametro("?data", fiscal_data_movimento == "000000" ? String.Format("{0:yyyyMMdd}",DateTime.Now) : String.Format("{0:yyyyMMdd}", Convert.ToDateTime(fiscal_data_movimento.Substring(0, 2) + "/" + fiscal_data_movimento.Substring(2, 2) + "/" + String.Format("{0:ddMMyyyy}", DateTime.Now).Substring(4, 2) + fiscal_data_printer.Substring(4, 2))));
                banco.addParametro("?store", fiscal_store.Replace("\0", "").Trim() );
                banco.addParametro("?terminal", fiscal_numero_caixa.Replace("\0", "").Trim());
                banco.addParametro("?Func", lbOperadorConectorCF.Text);
                banco.addParametro("?seq", banco_sequencia);
                if (fiscal_data_movimento.Trim() != "" && Convert.ToDouble(fiscal_data_movimento.Replace("\0", "").Trim() == "" ? "0" : fiscal_data_movimento) > 0)
                {
                    banco.procedimentoRead();   
                }
            }
            catch (Exception erro)
            {
                msgInfo msg = new msgInfo("Caro Cliente - " + erro.Message); msg.ShowDialog(); auxConsistencia = 1;
            }
            finally
            {
                banco.fechaConexao(); if (title != "") { this.txtTitleCupomFiscalConectorCF.Invoke((MethodInvoker)delegate { txtTitleCupomFiscalConectorCF.Text = title; }); }
            }
        }

        public void conectorPDV_exe_parcela()
        {
            int ok = 0;
            int verificaBaixa = 0;
            try
            {
                title = banco.abreConexao();
                banco.startTransaction("conectorPDV_exe_parcela");
                banco.addParametro("tipo", "3");
                banco.addParametro("store", txtLojaConectorCF.Text);
                banco.addParametro("contrato", txtNumeroContratoConectorCF.Text);
                banco.addParametro("prestacao", txtParcelaConectorCF.Text);
                banco.addParametro("pessoa", "0");
                banco.procedimentoRead();
                if (banco.retornaRead().Read() == true)
                {
                    if (banco.retornaRead().GetString(11).ToString() == "0" || banco.retornaRead().GetString(11).ToString() == "2")
                    {
                        dtpEmissaoConectorCF.Value = Convert.ToDateTime(banco.retornaRead().GetString(2));
                        txtDiasAtrasoConectorCF.Text = banco.retornaRead().GetString(6);
                        txtValorPrestacaoConectorCF.Text = String.Format("{0:F2}", banco.retornaRead().GetString(4));
                        auxRecebimentoParcelamento = txtParcelaConectorCF.Text = banco.retornaRead().GetString(3);
                        lbNomeConectorCF.Text = banco.retornaRead().GetString(9);
                        lbNumeroClienteConectorCF.Text = banco.retornaRead().GetString(8);
                        auxIdCliente = banco.retornaRead().GetString(8);
                        txtArmotizadoConectorCF.Text = banco.retornaRead().GetString(10);
                        verificaBaixa = Convert.ToInt32(banco.retornaRead().GetString(12));
                        auxIdParcela = banco.retornaRead().GetString(13);
                        if (Convert.ToDecimal(banco.retornaRead().GetString(10)) > 0)
                        {
                            cmbSituacaoContratoConectorCF.Text = "2 | PARCIAL";
                        }
                        ok = 1;
                    }
                    else
                    {
                        ok = 0;
                    }
                }
            }
            catch (Exception erro)
            { msgInfo msg = new msgInfo("Caro Cliente - " + erro.Message); msg.ShowDialog(); }
            finally
            {
                banco.fechaConexao(); if (title != "") { this.txtTitleCupomFiscalConectorCF.Invoke((MethodInvoker)delegate { txtTitleCupomFiscalConectorCF.Text = title; }); }
                if (ok == 0)
                {
                    msgInfo msg = new msgInfo("Caro Cliente - " + "Contrato inválido para o recebimento, ou não existe."); msg.ShowDialog();
                    returnDefaultPDV();
                    if (ataque == 1)
                    {
                        conector_stop_thread();
                        this.DialogResult = DialogResult.Cancel;
                        this.Dispose();
                    }
                }
                else if (ok == 1)
                {
                    if (verificaBaixa == 1)
                    {
                        conectorPDV_grade_calculo(Convert.ToDecimal(txtValorPrestacaoConectorCF.Text) - Convert.ToDecimal(txtArmotizadoConectorCF.Text));
                        txtLojaConectorCF.ReadOnly = true;
                        txtNumeroContratoConectorCF.ReadOnly = true;
                        txtParcelaConectorCF.ReadOnly = true;
                    }
                    else
                    {
                        msgInfo msg = new msgInfo("Caro Cliente - " + "Existe parcela anterior não baixada, impossível prosseguir."); msg.ShowDialog();
                        returnDefaultPDV();
                        if (ataque == 1)
                        {
                            conector_stop_thread();
                            this.DialogResult = DialogResult.Cancel;
                            this.Dispose();
                        }
                    }
                }
            }
        }
        public void verifica_passwd_crediario(string newPasswd, string hash)
        {
            int retorno = 0;
            decimal fator = 0;
            try
            {
                title = banco.abreConexao();
                //banco.singleTransaction("select count(tab.idFuncionario), tab.idFuncionario, tab.apelido, tab1.idFuncao, tab1.descricao, tab.idLoja, tab.discount from funcionario tab, funcao tab1 where AES_DECRYPT(tab.passwd,?passwd)=?str and tab.idFuncionario=?cara and tab.idFuncao = tab1.idFuncao group by 2,3,4");
                banco.singleTransaction("select count(tab.idFuncionario), tab.idFuncionario, tab.apelido, tab1.idFuncao, tab1.descricao, tab.idLoja, tab1.discount from conectorPDV.funcionario tab, conectorPDV.funcao tab1 where AES_DECRYPT(tab.passwd,?passwd)=?str and tab.idFuncao = tab1.idFuncao group by 2,3,4");
                banco.addParametro("?str", newPasswd);
                banco.addParametro("?passwd", hash);
                banco.procedimentoRead();
                if (banco.retornaRead().Read() == true)
                {
                    retorno = Convert.ToInt32(banco.retornaRead().GetString(0));
                    flagIdFuncionario = banco.retornaRead().GetString(1);
                    flagDescricaoFuncionario = banco.retornaRead().GetString(2);
                    flagFuncao = banco.retornaRead().GetString(3);
                    flagDescricaoFuncao = banco.retornaRead().GetString(4);
                    defaultLoja = banco.retornaRead().GetString(5);
                    flagDiscount = banco.retornaRead().GetString(6);
                }
                else
                {
                    retorno = 0;
                    flagIdFuncionario = "0";
                    flagDescricaoFuncionario = "";
                    flagFuncao = "";
                    flagDescricaoFuncao = "";
                    defaultLoja = "0";
                    flagDiscount = "0,00";
                }
            }
            catch (Exception erro)
            {
                msgInfo msg = new msgInfo("Caro Cliente - " + erro.Message); msg.ShowDialog();
            }
            finally
            {
                banco.fechaConexao(); if (title != "") { this.txtTitleCupomFiscalConectorCF.Invoke((MethodInvoker)delegate { txtTitleCupomFiscalConectorCF.Text = title; }); }
                if (retorno == 0)
                {
                    lbNomeUsuarioConectorCF.Text = "DESCONHECIDO";
                    lbMensagemConectorCF.Text = "DESCONTO NEGADO";
                    msgInfo msg = new msgInfo("Caro Cliente - " + "Funcionário não autorizado para aplicar desconto no recebimento de prestação, favor procurar o administrativo."); msg.ShowDialog();
                    txtSenhaLiberacaoDescontoConectorCF.Clear();
                    txtNumeroUsuarioConectorCF.Clear();
                    txtSenhaLiberacaoDescontoConectorCF.ReadOnly = true;
                    txtNumeroUsuarioConectorCF.ReadOnly = true;
                    btnTotalConectorCF.Select();
                    lbNomeUsuarioConectorCF.Text = "";
                    lbMensagemConectorCF.Text = "";
                }
                else
                {
                    if (Convert.ToDouble(txtDiasAtrasoConectorCF.Text) > 0)
                    { }
                    if (flagFuncao == "3" || flagFuncao == "4" || flagFuncao == "5")
                    {
                        txtNumeroUsuarioConectorCF.Text = flagIdFuncionario;
                        lbNomeUsuarioConectorCF.Text = flagDescricaoFuncionario;
                        fator = calculo.conector_margem_discount(Convert.ToDecimal(txtValorDescontoConectorCF.Text), Convert.ToDecimal(txtValorPrestacaoConectorCF.Text), Convert.ToDecimal(txtAcrescimoConectorCF.Text));
                        if (alwaysVariables.DescontoMaximoPrestacao >= fator)
                        {
                            lbMensagemConectorCF.Text = flagDescricaoFuncao + " : PERMITIDO";
                            txtValorDescontoConectorCF.ReadOnly = false;
                            //Alterando desconto sobre acrescimo
                            txtTotalDevidoConectorCF.Text = calculo.conector_sum_reajustado(Convert.ToDecimal(txtValorPrestacaoConectorCF.Text), Convert.ToDecimal(txtValorDescontoConectorCF.Text)).ToString();
                            txtTotalDevidoConectorCF.Select();
                        }
                        else
                        {
                            lbMensagemConectorCF.Text = "DESCONTO NEGADO";
                            lbMensagemConectorCF.ForeColor = Color.Red;
                            txtHistoricoConectorCF.Select();
                        }

                    }
                    else
                    {
                        txtSenhaLiberacaoDescontoConectorCF.Clear();
                        txtNumeroUsuarioConectorCF.Text = flagIdFuncionario;
                        lbNomeUsuarioConectorCF.Text = flagDescricaoFuncionario;
                        lbMensagemConectorCF.Text = "FUNÇÃO: " + flagDescricaoFuncao + ": DESCONTO NÃO PERMITIDO.";
                        btnTotalConectorCF.Select();
                        flagDiscount = "0,00";
                    }
                    txtSenhaLiberacaoDescontoConectorCF.ReadOnly = true;
                }
            }
        }
        public void conectorPDV_alt_parcela()
        {
            auxConsistencia = 0;
            if (somatorio == Convert.ToDecimal(txtTotalDevidoConectorCF.Text))
            {
                auxStatusParcela = "1";
            }
            else
            {
                auxStatusParcela = "2";
            }
            try
            {
                title = banco.abreConexao();
                banco.startTransaction("conectorPDV_alt_parcela");
                banco.addParametro("newidcrediario", txtNumeroContratoConectorCF.Text);
                banco.addParametro("newnr_parcela", txtParcelaConectorCF.Text);
                banco.addParametro("newPagamento", String.Format("{0:yyyyMMdd}", dtpPagamentoConectorCF.Value));
                banco.addParametro("newstatus", auxStatusParcela);
                banco.addParametro("newobservacao", txtHistoricoConectorCF.Text);
                banco.addParametro("newvalorPago", txtValorPagoConectorCF.Text);
                banco.addParametro("newacrescimo", txtAcrescimoConectorCF.Text);
                banco.addParametro("newdesconto", txtValorDescontoConectorCF.Text);
                if (Convert.ToDecimal(txtRestanteConectorCF.Text) > 0)
                {
                    banco.procedimentoRead();
                }
            }
            catch (Exception erro)
            {
                msgInfo msg = new msgInfo("Caro Cliente - " + erro.Message); msg.ShowDialog();
                auxConsistencia = 1;
            }
            finally
            {
                banco.fechaConexao(); if (title != "") { this.txtTitleCupomFiscalConectorCF.Invoke((MethodInvoker)delegate { txtTitleCupomFiscalConectorCF.Text = title; }); }
                if (auxConsistencia == 0)
                {
                }
            }
        }
        public void conectorPDV_inc_notad(string nota, string client)
        {
            auxConsistencia = 0;
            
            try
            {
                title = banco.abreConexao();
                banco.startTransaction("conectorPDV_inc_notad");
                banco.addParametro("inc_idnotad", nota);
                banco.addParametro("inc_serie", "D");
                banco.addParametro("inc_idloja", fiscal_store.Replace("\0","").Trim());
                banco.addParametro("inc_emissao", String.Format("{0:yyyyMMdd}", DateTime.Now));
                banco.addParametro("inc_operador", banco_operado);
                banco.addParametro("inc_terminal", fiscal_numero_caixa.Replace("\0","").Trim());
                banco.addParametro("inc_cliente", client);
                banco.addParametro("inc_cfop", "5102");
                banco.addParametro("inc_situacao", "00");
                banco.addParametro("inc_modelo", "02");
                banco.procedimentoRead();
            }
            catch (Exception erro)
            {
                msgInfo msg = new msgInfo("Caro Cliente - Nota existe no sistema. Verifique o mensagem: " + erro.Message); msg.ShowDialog();
                auxConsistencia = 1;
            }
            finally
            {
                banco.fechaConexao(); if (title != "") { this.txtTitleCupomFiscalConectorCF.Invoke((MethodInvoker)delegate { txtTitleCupomFiscalConectorCF.Text = title; }); }
                if (auxConsistencia == 0)
                {
                    txtQuantidadeNFDEmitida.ReadOnly = false;
                    txtItensConectorCF.ReadOnly = false;
                }
                else
                {
                    lblNoClienteConectorCF.Text = "0";
                    txtNumeroNotaNFDEmitida.Clear();
                    txtNumeroNotaNFDEmitida.Select();
                }
            }
        }

        public void conectorPDV_inc_notad_item(string nota, string prod, string descricao, string qt, string valor, string valortotal, string un)
        {
            auxConsistencia = 0;

            try
            {
                title = banco.abreConexao();
                banco.startTransaction("conectorPDV_inc_notad_item");
                banco.addParametro("inc_idproduto", prod);
                banco.addParametro("inc_idnotad", nota);
                banco.addParametro("inc_serie", "D");
                banco.addParametro("inc_idloja", fiscal_store.Replace("\0", "").Trim() == "" ? alwaysVariables.Store : fiscal_store.Replace("\0", "").Trim());
                banco.addParametro("inc_descricao", descricao);
                banco.addParametro("inc_unidade", un);
                banco.addParametro("inc_qt", qt);
                banco.addParametro("inc_valor", valor);
                banco.addParametro("inc_valorTotal", valortotal);
                banco.addParametro("inc_cfop", "5929");
                banco.procedimentoRead();
            }
            catch (Exception erro)
            {
                msgInfo msg = new msgInfo("Caro Cliente - " + erro.Message); msg.ShowDialog();
                auxConsistencia = 1;
            }
            finally
            {
                banco.fechaConexao(); if (title != "") { this.txtTitleCupomFiscalConectorCF.Invoke((MethodInvoker)delegate { txtTitleCupomFiscalConectorCF.Text = title; }); }
                if (auxConsistencia == 0)
                {
                    txtNumeroNotaNFDEmitida.ReadOnly = true;
                }
            }
        }
        public void conectorPDV_inc_historicoCrediario(string motivo, string value, int semaforo)
        {
            /*IMPLEMENTAÇÃO VETORRECEBIMENTO*/
            //string oldSomatorio = "0.00";
            auxConsistencia = semaforo;
            functionECF.conectorECF_fiscal_flag(alwaysVariables.ModeloEcf, ref fiscal_flag, ref fiscal_MSG, ref fiscal_retorno, alwaysVariables.ECF_Ligada);

            if (fiscal_flag == 0 || fiscal_flag == 1 || fiscal_flag == 32)
            {
                auxConsistencia = semaforo;

                if (auxTypeHistory != "12" && auxTypeHistory != "20")
                {
                    if ((Convert.ToDecimal(value)) > ((Convert.ToDecimal(txtTotalDevidoConectorCF.Text.Replace(",", "."))) - Convert.ToDecimal(txtValorPagoConectorCF.Text.Replace(",", "."))))
                    {
                        txtValorTrocoConectorCF.Text = calculo.conector_troco(Convert.ToDecimal(txtTotalDevidoConectorCF.Text.Replace(",", ".")), (somatorio + Convert.ToDecimal(value))).ToString();
                        if (Convert.ToDecimal(txtValorTrocoConectorCF.Text.Replace(",", ".")) > 0)
                        {
                            somatorio = (somatorio + Convert.ToDecimal(value)) - Convert.ToDecimal(txtValorTrocoConectorCF.Text.Replace(",", "."));
                        }
                    }
                    else
                    {
                        somatorio = somatorio + Convert.ToDecimal(value);
                    }
                    functionECF.conectorECF_NumeroCupom(alwaysVariables.ModeloEcf, ref fiscal_Cupom_coo, ref fiscal_MSG, ref fiscal_retorno, alwaysVariables.ECF_Ligada);
                    //fiscal_retorno = conectorECF.Bematech_FI_NumeroCupom(ref fiscal_Cupom_coo);
                    //conectorECF.Analisa_iRetorno(fiscal_retorno, ref fiscal_MSG);
                    switch (auxIdFinalizadora)
                    {
                        case "1":
                            vetorRecebimento[1] = "1";
                            break;
                        case "2":
                            vetorRecebimento[2] = "2";
                            chequeRecebimento cheque = new chequeRecebimento(auxIdCliente, String.Format("{0:F2}",Convert.ToDecimal(txtValorMontanteConectorCF.Text.Replace(",", "."))), 0, alwaysVariables.Store.ToString(), "3", 0); // rever funcionario
                            if (cheque.ShowDialog(this) == DialogResult.OK)
                            {
                                flagSemaforo = 0;
                            }
                            else
                            {
                                auxConsistencia = 1;
                                msgInfo msg = new msgInfo("Caro Cliente - " + "Valor R$ " + txtValorMontanteConectorCF.Text + " não foi recebido, favor confirmar."); msg.ShowDialog();
                                somatorio = somatorio - Convert.ToDecimal(value);
                                txtValorMontanteConectorCF.Text = "0,00";
                                txtValorMontanteConectorCF.Select();
                            }
                            if (auxConsistencia == 0)
                            {
                                //vetorRecebimento
                            }
                            break;
                        case "5":
                            vetorRecebimento[5] = "5";
                            conectorPDV_inc_cartao(fiscal_Cupom_coo.Replace("\0", "").Trim(), "1", "1");
                            break;
                        case "6":
                            vetorRecebimento[6] = "6";
                            conectorPDV_inc_cartao(fiscal_Cupom_coo.Replace("\0","").Trim(),"1","1");
                            break;
                        case "10":
                            vetorRecebimento[10] = "10";
                            break;
                    }
                }
                if (auxConsistencia == 0)
                {
                    try
                    {
                        title = banco.abreConexao();
                        banco.startTransaction("conectorPDV_inc_historicoCrediario");
                        banco.addParametro("inc_parcela_idparcela", auxIdParcela);
                        banco.addParametro("inc_parcela_idcrediario", txtNumeroContratoConectorCF.Text);
                        banco.addParametro("inc_parcela_idloja", txtLojaConectorCF.Text);
                        banco.addParametro("inc_parcela_nr_parcela", txtParcelaConectorCF.Text);
                        banco.addParametro("inc_motivo", motivo);
                        banco.addParametro("inc_data", String.Format("{0:yyyyMMdd}", dtpPagamentoConectorCF.Value));
                        banco.addParametro("inc_finalizadora", auxIdFinalizadora);
                        banco.addParametro("inc_valor", auxTypeHistory == "12" ? (Convert.ToDecimal(txtValorTrocoConectorCF.Text) * -1).ToString() : auxTypeHistory == "20" ? (Convert.ToDecimal(value)).ToString() : somatorio > Convert.ToDecimal(value) ? (Convert.ToDecimal(txtValorTrocoConectorCF.Text) * -1) <= 0 ? (Convert.ToDecimal(value) + (Convert.ToDecimal(txtValorTrocoConectorCF.Text) * -1)).ToString() : value.ToString() : somatorio.ToString());
                        banco.addParametro("inc_usuario", lbOperadorConectorCF.Text);
                        banco.addParametro("inc_typeHistorico", auxTypeHistory);
                        banco.addParametro("inc_numeroCupom", fiscal_Cupom.Replace("\0", "").Trim());
                        banco.addParametro("inc_terminal", fiscal_numero_caixa.Replace("\0","").Trim());
                        banco.procedimentoRead();
                        if (banco.retornaRead().Read() == true)
                        {
                            txtValorPagoConectorCF.Text = somatorio.ToString();
                            txtRestanteConectorCF.Text = String.Format("{0:F2}", calculo.conector_restante(Convert.ToDecimal(txtTotalDevidoConectorCF.Text), Convert.ToDecimal(txtValorPagoConectorCF.Text)).ToString());
                            if (auxTypeHistory != "12")
                            {
                                if (alwaysVariables.Autentica == "1")
                                {
                                    if (Convert.ToDecimal(txtValorPagoConectorCF.Text.Replace(",", ".")) > 0)
                                    {
                                        //flag_recebimento = conectorECF.Bematech_FI_AbreRecebimentoNaoFiscalMFD(auxCPFCNPJ, auxNomeRazao, auxLogradouro);
                                        functionECF.conectorECF_AbreRecebimentoNaoFiscalMFD(alwaysVariables.ModeloEcf, auxCPFCNPJ, auxNomeRazao, auxLogradouro, ref fiscal_MSG, ref flag_recebimento, alwaysVariables.ECF_Ligada);
                                        functionECF.conectorECF_Analisa_RetornoImpressora(alwaysVariables.ModeloEcf, ref ACK, ref ST1, ref ST2, ref ST3, ref fiscal_MSG);
                                        switch (auxIdFinalizadora)
                                        {
                                            case "1"://Dinheiro
                                                functionECF.conectorECF_RecebimentoNaoFiscal(alwaysVariables.ModeloEcf, "03", auxTypeHistory == "12" ? (Convert.ToDecimal(txtValorTrocoConectorCF.Text) * -1).ToString() : auxTypeHistory == "20" ? (Convert.ToDecimal(value)).ToString() : somatorio > Convert.ToDecimal(value) ? (Convert.ToDecimal(txtValorTrocoConectorCF.Text) * -1) <= 0 ? (Convert.ToDecimal(value) + (Convert.ToDecimal(txtValorTrocoConectorCF.Text) * -1)).ToString() : value.ToString() : somatorio.ToString(), "Dinheiro", ref fiscal_MSG, ref flag_recebimento, alwaysVariables.ECF_Ligada);
                                                //flag_recebimento = conectorECF.Bematech_FI_RecebimentoNaoFiscal("03", auxTypeHistory == "12" ? (Convert.ToDecimal(txtValorTrocoConectorCF.Text) * -1).ToString() : auxTypeHistory == "20" ? (Convert.ToDecimal(value)).ToString() : somatorio > Convert.ToDecimal(value) ? (Convert.ToDecimal(txtValorTrocoConectorCF.Text) * -1) <= 0 ? (Convert.ToDecimal(value) + (Convert.ToDecimal(txtValorTrocoConectorCF.Text) * -1)).ToString() : value.ToString() : somatorio.ToString(),"Dinheiro");
                                                break;
                                            case "2"://Cheque
                                                functionECF.conectorECF_RecebimentoNaoFiscal(alwaysVariables.ModeloEcf, "04", auxTypeHistory == "12" ? (Convert.ToDecimal(txtValorTrocoConectorCF.Text) * -1).ToString() : auxTypeHistory == "20" ? (Convert.ToDecimal(value)).ToString() : somatorio > Convert.ToDecimal(value) ? (Convert.ToDecimal(txtValorTrocoConectorCF.Text) * -1) <= 0 ? (Convert.ToDecimal(value) + (Convert.ToDecimal(txtValorTrocoConectorCF.Text) * -1)).ToString() : value.ToString() : somatorio.ToString(), "Cheque", ref fiscal_MSG, ref flag_recebimento, alwaysVariables.ECF_Ligada);
                                                //flag_recebimento = conectorECF.Bematech_FI_RecebimentoNaoFiscal("04", auxTypeHistory == "12" ? (Convert.ToDecimal(txtValorTrocoConectorCF.Text) * -1).ToString() : auxTypeHistory == "20" ? (Convert.ToDecimal(value)).ToString() : somatorio > Convert.ToDecimal(value) ? (Convert.ToDecimal(txtValorTrocoConectorCF.Text) * -1) <= 0 ? (Convert.ToDecimal(value) + (Convert.ToDecimal(txtValorTrocoConectorCF.Text) * -1)).ToString() : value.ToString() : somatorio.ToString(), "Cheque");
                                                break;
                                            case "3"://Crediario
                                                functionECF.conectorECF_RecebimentoNaoFiscal(alwaysVariables.ModeloEcf, "05", auxTypeHistory == "12" ? (Convert.ToDecimal(txtValorTrocoConectorCF.Text) * -1).ToString() : auxTypeHistory == "20" ? (Convert.ToDecimal(value)).ToString() : somatorio > Convert.ToDecimal(value) ? (Convert.ToDecimal(txtValorTrocoConectorCF.Text) * -1) <= 0 ? (Convert.ToDecimal(value) + (Convert.ToDecimal(txtValorTrocoConectorCF.Text) * -1)).ToString() : value.ToString() : somatorio.ToString(), "Crediario", ref fiscal_MSG, ref flag_recebimento, alwaysVariables.ECF_Ligada);
                                                //flag_recebimento = conectorECF.Bematech_FI_RecebimentoNaoFiscal("05", auxTypeHistory == "12" ? (Convert.ToDecimal(txtValorTrocoConectorCF.Text) * -1).ToString() : auxTypeHistory == "20" ? (Convert.ToDecimal(value)).ToString() : somatorio > Convert.ToDecimal(value) ? (Convert.ToDecimal(txtValorTrocoConectorCF.Text) * -1) <= 0 ? (Convert.ToDecimal(value) + (Convert.ToDecimal(txtValorTrocoConectorCF.Text) * -1)).ToString() : value.ToString() : somatorio.ToString(), "Crediario");
                                                break;
                                            case "5"://Cartao
                                                functionECF.conectorECF_RecebimentoNaoFiscal(alwaysVariables.ModeloEcf, "07", auxTypeHistory == "12" ? (Convert.ToDecimal(txtValorTrocoConectorCF.Text) * -1).ToString() : auxTypeHistory == "20" ? (Convert.ToDecimal(value)).ToString() : somatorio > Convert.ToDecimal(value) ? (Convert.ToDecimal(txtValorTrocoConectorCF.Text) * -1) <= 0 ? (Convert.ToDecimal(value) + (Convert.ToDecimal(txtValorTrocoConectorCF.Text) * -1)).ToString() : value.ToString() : somatorio.ToString(), "Cartao Credito", ref fiscal_MSG, ref flag_recebimento, alwaysVariables.ECF_Ligada);
                                                //flag_recebimento = conectorECF.Bematech_FI_RecebimentoNaoFiscal("07", auxTypeHistory == "12" ? (Convert.ToDecimal(txtValorTrocoConectorCF.Text) * -1).ToString() : auxTypeHistory == "20" ? (Convert.ToDecimal(value)).ToString() : somatorio > Convert.ToDecimal(value) ? (Convert.ToDecimal(txtValorTrocoConectorCF.Text) * -1) <= 0 ? (Convert.ToDecimal(value) + (Convert.ToDecimal(txtValorTrocoConectorCF.Text) * -1)).ToString() : value.ToString() : somatorio.ToString(), "Cartao Credito");
                                                break;
                                            case "6"://Cartao
                                                functionECF.conectorECF_RecebimentoNaoFiscal(alwaysVariables.ModeloEcf, "07", auxTypeHistory == "12" ? (Convert.ToDecimal(txtValorTrocoConectorCF.Text) * -1).ToString() : auxTypeHistory == "20" ? (Convert.ToDecimal(value)).ToString() : somatorio > Convert.ToDecimal(value) ? (Convert.ToDecimal(txtValorTrocoConectorCF.Text) * -1) <= 0 ? (Convert.ToDecimal(value) + (Convert.ToDecimal(txtValorTrocoConectorCF.Text) * -1)).ToString() : value.ToString() : somatorio.ToString(), "Cartao Debito", ref fiscal_MSG, ref flag_recebimento, alwaysVariables.ECF_Ligada);
                                                //flag_recebimento = conectorECF.Bematech_FI_RecebimentoNaoFiscal("07", auxTypeHistory == "12" ? (Convert.ToDecimal(txtValorTrocoConectorCF.Text) * -1).ToString() : auxTypeHistory == "20" ? (Convert.ToDecimal(value)).ToString() : somatorio > Convert.ToDecimal(value) ? (Convert.ToDecimal(txtValorTrocoConectorCF.Text) * -1) <= 0 ? (Convert.ToDecimal(value) + (Convert.ToDecimal(txtValorTrocoConectorCF.Text) * -1)).ToString() : value.ToString() : somatorio.ToString(), "Cartao Debito");
                                                break;
                                            case "10"://Vale
                                                functionECF.conectorECF_RecebimentoNaoFiscal(alwaysVariables.ModeloEcf, "12", auxTypeHistory == "12" ? (Convert.ToDecimal(txtValorTrocoConectorCF.Text) * -1).ToString() : auxTypeHistory == "20" ? (Convert.ToDecimal(value)).ToString() : somatorio > Convert.ToDecimal(value) ? (Convert.ToDecimal(txtValorTrocoConectorCF.Text) * -1) <= 0 ? (Convert.ToDecimal(value) + (Convert.ToDecimal(txtValorTrocoConectorCF.Text) * -1)).ToString() : value.ToString() : somatorio.ToString(), "Vale", ref fiscal_MSG, ref flag_recebimento, alwaysVariables.ECF_Ligada);
                                                //flag_recebimento = conectorECF.Bematech_FI_RecebimentoNaoFiscal("12", auxTypeHistory == "12" ? (Convert.ToDecimal(txtValorTrocoConectorCF.Text) * -1).ToString() : auxTypeHistory == "20" ? (Convert.ToDecimal(value)).ToString() : somatorio > Convert.ToDecimal(value) ? (Convert.ToDecimal(txtValorTrocoConectorCF.Text) * -1) <= 0 ? (Convert.ToDecimal(value) + (Convert.ToDecimal(txtValorTrocoConectorCF.Text) * -1)).ToString() : value.ToString() : somatorio.ToString(), "Vale");
                                                break;
                                            default:
                                                break;
                                        }
                                        functionECF.conectorECF_Analisa_RetornoImpressora(alwaysVariables.ModeloEcf, ref ACK, ref ST1, ref ST2, ref ST3, ref fiscal_MSG);
                                    }
                                    //auxCPFCNPJ = auxNomeRazao = auxLogradouro = "";
                                }
                            }
                        }
                    }
                    catch (Exception erro)
                    {
                        msgInfo msg = new msgInfo("Caro Cliente - " + erro.Message); msg.ShowDialog();
                        msgInfo tt = new msgInfo(auxTypeHistory == "12" ? (Convert.ToDecimal(txtValorTrocoConectorCF.Text) * -1).ToString() : somatorio > Convert.ToDecimal(value) ? value.ToString().Replace(".", ",") : somatorio.ToString().Replace(".", ","));
                        auxConsistencia = 1;
                    }
                    finally
                    {
                        banco.fechaConexao(); if (title != "") { this.txtTitleCupomFiscalConectorCF.Invoke((MethodInvoker)delegate { txtTitleCupomFiscalConectorCF.Text = title; }); }
                        if (auxConsistencia == 0)
                        {
                            if (auxTypeHistory != "12")
                            {
                                conectorPDV_alt_fechamentoCaixa();
                                conectorPDV_inc_movimentocaixa(txtValorPagoConectorCF.Text, "0.00", "0.00", "0.00", input_troco, "0.00", 1.ToString(), "0.00", "0.00", "0.00", 1.ToString(), input_operador, "0,00", 6, "0,00");
                                if (flag_recebimento == 1)
                                {
                                    switch (auxIdFinalizadora)
                                    {
                                        case "1"://Dinheiro
                                            conectorPDV_inc_cupom_relatorio_meio_pgto("01", auxTypeHistory == "12" ? (Convert.ToDecimal(txtValorTrocoConectorCF.Text) * -1).ToString() : auxTypeHistory == "20" ? (Convert.ToDecimal(value)).ToString() : somatorio > Convert.ToDecimal(value) ? (Convert.ToDecimal(txtValorTrocoConectorCF.Text) * -1) <= 0 ? (Convert.ToDecimal(value) + (Convert.ToDecimal(txtValorTrocoConectorCF.Text) * -1)).ToString() : value.ToString() : somatorio.ToString(), "0", "N");
                                            break;
                                        case "2"://Cheque
                                            conectorPDV_inc_cupom_relatorio_meio_pgto("02", auxTypeHistory == "12" ? (Convert.ToDecimal(txtValorTrocoConectorCF.Text) * -1).ToString() : auxTypeHistory == "20" ? (Convert.ToDecimal(value)).ToString() : somatorio > Convert.ToDecimal(value) ? (Convert.ToDecimal(txtValorTrocoConectorCF.Text) * -1) <= 0 ? (Convert.ToDecimal(value) + (Convert.ToDecimal(txtValorTrocoConectorCF.Text) * -1)).ToString() : value.ToString() : somatorio.ToString(), "0", "N");
                                            break;
                                        case "3"://Crediario
                                            conectorPDV_inc_cupom_relatorio_meio_pgto("03", auxTypeHistory == "12" ? (Convert.ToDecimal(txtValorTrocoConectorCF.Text) * -1).ToString() : auxTypeHistory == "20" ? (Convert.ToDecimal(value)).ToString() : somatorio > Convert.ToDecimal(value) ? (Convert.ToDecimal(txtValorTrocoConectorCF.Text) * -1) <= 0 ? (Convert.ToDecimal(value) + (Convert.ToDecimal(txtValorTrocoConectorCF.Text) * -1)).ToString() : value.ToString() : somatorio.ToString(), "0", "N");
                                            break;
                                        case "5"://Cartao
                                            conectorPDV_inc_cupom_relatorio_meio_pgto("05", auxTypeHistory == "12" ? (Convert.ToDecimal(txtValorTrocoConectorCF.Text) * -1).ToString() : auxTypeHistory == "20" ? (Convert.ToDecimal(value)).ToString() : somatorio > Convert.ToDecimal(value) ? (Convert.ToDecimal(txtValorTrocoConectorCF.Text) * -1) <= 0 ? (Convert.ToDecimal(value) + (Convert.ToDecimal(txtValorTrocoConectorCF.Text) * -1)).ToString() : value.ToString() : somatorio.ToString(), "0", "N");
                                            break;
                                        case "6"://Cartao
                                            conectorPDV_inc_cupom_relatorio_meio_pgto("06", auxTypeHistory == "12" ? (Convert.ToDecimal(txtValorTrocoConectorCF.Text) * -1).ToString() : auxTypeHistory == "20" ? (Convert.ToDecimal(value)).ToString() : somatorio > Convert.ToDecimal(value) ? (Convert.ToDecimal(txtValorTrocoConectorCF.Text) * -1) <= 0 ? (Convert.ToDecimal(value) + (Convert.ToDecimal(txtValorTrocoConectorCF.Text) * -1)).ToString() : value.ToString() : somatorio.ToString(), "0", "N");
                                            break;
                                        case "10"://Vale
                                            conectorPDV_inc_cupom_relatorio_meio_pgto("07", auxTypeHistory == "12" ? (Convert.ToDecimal(txtValorTrocoConectorCF.Text) * -1).ToString() : auxTypeHistory == "20" ? (Convert.ToDecimal(value)).ToString() : somatorio > Convert.ToDecimal(value) ? (Convert.ToDecimal(txtValorTrocoConectorCF.Text) * -1) <= 0 ? (Convert.ToDecimal(value) + (Convert.ToDecimal(txtValorTrocoConectorCF.Text) * -1)).ToString() : value.ToString() : somatorio.ToString(), "0", "N");
                                            break;
                                        default:
                                            break;
                                    }
                                }
                            }
                            flagSemaforo = 0;
                            txtValorMontanteConectorCF.Text = "0,00";
                            txtValorMontanteConectorCF.Select();
                        }
                    }
                }
                else
                {
                    flagSemaforo = 1; // fecha o update parcela
                    //somatorio = Convert.ToDecimal(value);
                }
            }
        }
        //######################################################END Funcão do Crediario########################################################################

        public int verifica_passwd(string newPasswd, string hash, string pessoa)
        {
            int retorno = 0;
            auxConsistencia = 1;
            try
            {
                title = banco.abreConexao();
                banco.singleTransaction("select tab.idFuncao, tab.status, tab1.especifica, tab1.discount, tab.acessoFiscal, tab.acessoMenuFiscal from conectorPDV.funcionario tab, conectorPDV.funcao tab1 where tab.idFuncao=tab1.idFuncao and tab.idLoja=?store and AES_DECRYPT(tab.passwd,?passwd)=?str and tab.idFuncionario=?Pessoa");
                banco.addParametro("?str", newPasswd);
                banco.addParametro("?passwd", hash);
                banco.addParametro("?store", alwaysVariables.Store);
                banco.addParametro("?Pessoa", pessoa);
                banco.procedimentoRead();
                if (banco.retornaRead().Read() == true)
                {
                    retorno = 1;
                    operador_funcao = banco.retornaRead().GetString(0);
                    operador_status = Convert.ToInt32(banco.retornaRead().GetString(1));
                    operador_especifica = Convert.ToInt32(banco.retornaRead().GetString(2));
                    operador_desconto = banco.retornaRead().GetString(3);
                    acessoFiscal = Convert.ToInt32(banco.retornaRead().GetString(4));
                    acessoMenuFiscal = Convert.ToInt32(banco.retornaRead().GetString(5));
                    sangria_operador_retirada = pessoa;
                }
                else retorno = 0;
            }
            catch (Exception erro)
            {
                msg = new msgInfo(erro.Message); msg.ShowDialog(); auxConsistencia = 1;
            }
            finally
            {
                banco.fechaConexao(); if (title != "") { this.txtTitleCupomFiscalConectorCF.Invoke((MethodInvoker)delegate { txtTitleCupomFiscalConectorCF.Text = title; }); }
            }

            return retorno;
        }
        public void conectorPDV_find_operador()
        {
            try
            {
                auxConsistencia = 0;
                title = banco.abreConexao();
                if (banco.statusSchema() == 1)
                {
                    this.lbStatusBancoConectorCF.Invoke((MethodInvoker)delegate { lbStatusBancoConectorCF.Text = "ON LINE"; });
                    this.lbStatusBancoConectorCF.Invoke((MethodInvoker)delegate { this.lbStatusBancoConectorCF.ForeColor = System.Drawing.Color.Cyan; }); 
                }
                else
                {
                    this.lbStatusBancoConectorCF.Invoke((MethodInvoker)delegate { lbStatusBancoConectorCF.Text = "OFF LINE"; });
                    this.lbStatusBancoConectorCF.Invoke((MethodInvoker)delegate { this.lbStatusBancoConectorCF.ForeColor = System.Drawing.Color.Red; }); 
                }
                banco.startTransaction("conectorPDV_find_operador");
                banco.addParametro("store", alwaysVariables.Store);
                if (fiscal_data_movimento != "000000")
                {
                    banco.addParametro("find", String.Format("{0:yyyyMMdd}", Convert.ToDateTime(fiscal_data_movimento.Substring(0, 2) + "/" + fiscal_data_movimento.Substring(2, 2) + "/" + String.Format("{0:ddMMyyyy}", DateTime.Now).Substring(4, 2) + fiscal_data_printer.Substring(4, 2))));
                }
                banco.addParametro("pdv", fiscal_numero_caixa.Replace("\0", "").Trim());
                if (fiscal_data_movimento != "000000")
                {
                    banco.procedimentoRead();
                    if (banco.retornaRead().Read() == true)
                    {
                        banco_operado = banco.retornaRead().GetString(0);
                        banco_sequencia = banco.retornaRead().GetString(1);
                        banco_nome = banco.retornaRead().GetString(2);
                    }
                    else
                    {
                        banco_operado = "0";
                        banco_nome = "DESCONHECIDO";
                        banco_sequencia = "0";
                    }
                }
                else
                {
                    banco_operado = "0";
                    banco_nome = "DESCONHECIDO";
                    banco_sequencia = "0";
                }
            }
            catch (Exception erro)
            { msg = new msgInfo(erro.Message); msg.ShowDialog(); auxConsistencia = 1; }
            finally
            {
                banco.fechaConexao(); if (title != "") { this.txtTitleCupomFiscalConectorCF.Invoke((MethodInvoker)delegate { txtTitleCupomFiscalConectorCF.Text = title; }); }
                if (auxConsistencia == 0)
                {
                    if (call_pdv == 5)
                    {
                        if (alwaysVariables.ModoOperacao == 1)
                        {
                            txtEntradaDadosConectorCF.Select();
                        }
                        else
                        {
                            txtEntradaDadosNF.Select();
                        }      
                    }
                }
                
            }
        }

        public void conectorPDV_find_relation_pgto(Int16 tipo, DateTime di, DateTime df, Int16 seq, int countDate, string find)
        {
            DateTime valida = di.AddDays(countDate);
            DateTime valida1 = di.AddDays(countDate);
            try
            {
                ataque = 0;   //Condicao de Parada
                if (valida > df)
                {
                    ataque = 1;
                    valida = di;
                    valida1 = df;
                    tipo = 3;
                    seq = 0;
                }

                auxConsistencia = 0;
                title = banco.abreConexao();
                if (banco.statusSchema() == 1)
                {
                    this.lbStatusBancoConectorCF.Invoke((MethodInvoker)delegate { lbStatusBancoConectorCF.Text = "ON LINE"; });
                    this.lbStatusBancoConectorCF.Invoke((MethodInvoker)delegate { this.lbStatusBancoConectorCF.ForeColor = System.Drawing.Color.Cyan; });
                }
                else
                {
                    this.lbStatusBancoConectorCF.Invoke((MethodInvoker)delegate { lbStatusBancoConectorCF.Text = "OFF LINE"; });
                    this.lbStatusBancoConectorCF.Invoke((MethodInvoker)delegate { this.lbStatusBancoConectorCF.ForeColor = System.Drawing.Color.Red; });
                }
                banco.startTransaction("conectorPDV_find_relation_pgto");
                banco.addParametro("tipo", tipo.ToString());
                banco.addParametro("di", String.Format("{0:yyyyMMdd}", valida));
                banco.addParametro("df", String.Format("{0:yyyyMMdd}", input_df));
                if (seq == 0)
                {
                    banco.procedimentoRead();
                }
                else
                {
                    banco.procedimentoSet();
                }
                
            }
            catch (Exception erro)
            { msg = new msgInfo(erro.Message); msg.ShowDialog(); auxConsistencia = 1; }
            finally
            {
                if (auxConsistencia == 0)
                {
                    switch (tipo)
                    {
                        case 1:
                            countField = banco.retornaSet().Tables[0].Columns.Count;
                            countRows = banco.retornaSet().Tables[0].DefaultView.Count;
                            if (countRows > 0)
                            {
                                if (countDate == 0)
                                {
                                    //fiscal_retorno = conectorECF.Bematech_FI_AbreRelatorioMeiosPagamento(find);
                                    functionECF.conectorECF_AbreRelatorioMeiosPagamento(alwaysVariables.ModeloEcf, find, ref fiscal_MSG, ref fiscal_retorno, alwaysVariables.ECF_Ligada);
                                }
                                functionECF.conectorECF_RelatorioGerencial(alwaysVariables.ModeloEcf, "PERIODO SOLICITADO DE " + String.Format("{0:dd-MM-yyyy}", di) + "  A  " + String.Format("{0:dd-MM-yyyy}", df) + "\n", ref fiscal_MSG, ref fiscal_retorno, alwaysVariables.ECF_Ligada);
                                //fiscal_retorno = conectorECF.Bematech_FI_RelatorioGerencial("PERIODO SOLICITADO DE " + String.Format("{0:dd-MM-yyyy}", di) + "  A  " + String.Format("{0:dd-MM-yyyy}", df) + "\n");
                                for (i = 0; i < countRows; i++)
                                {
                                    functionECF.conectorECF_UsaComprovanteNaoFiscalVinculado(alwaysVariables.ModeloEcf, Convert.ToString(banco.retornaSet().Tables[0].Rows[i][0]) + " " + Convert.ToString(banco.retornaSet().Tables[0].Rows[i][1]) + " " + Convert.ToString(banco.retornaSet().Tables[0].Rows[i][2]) + " " + Convert.ToString(banco.retornaSet().Tables[0].Rows[i][3]) + " - " + Convert.ToString(banco.retornaSet().Tables[0].Rows[i][4]), ref fiscal_MSG, ref fiscal_retorno, alwaysVariables.ECF_Ligada);
                                    //fiscal_retorno = conectorECF.Bematech_FI_UsaComprovanteNaoFiscalVinculado(Convert.ToString(banco.retornaSet().Tables[0].Rows[i][0]) + " " + Convert.ToString(banco.retornaSet().Tables[0].Rows[i][1]) + " " + Convert.ToString(banco.retornaSet().Tables[0].Rows[i][2]) + " " + Convert.ToString(banco.retornaSet().Tables[0].Rows[i][3]) + " - " + Convert.ToString(banco.retornaSet().Tables[0].Rows[i][4]));
                                }
                            }
                            banco.fechaConexao(); if (title != "") { this.txtTitleCupomFiscalConectorCF.Invoke((MethodInvoker)delegate { txtTitleCupomFiscalConectorCF.Text = title; }); }
                            conectorPDV_find_relation_pgto(3, di, df, 0, countDate, find);
                            break;
                        case 3:
                            if (banco.retornaRead().Read() == true)
                            {
                                if (ataque == 0)
                                {
                                    functionECF.conectorECF_RelatorioGerencial(alwaysVariables.ModeloEcf, "SOMA DO DIA: R$ " + banco.retornaRead().GetString(0) + "\n", ref fiscal_MSG, ref fiscal_retorno, alwaysVariables.ECF_Ligada);
                                    //fiscal_retorno = conectorECF.Bematech_FI_RelatorioGerencial("SOMA DO DIA: R$ " + banco.retornaRead().GetString(0) + "\n");
                                }
                                else
                                {
                                    functionECF.conectorECF_RelatorioGerencial(alwaysVariables.ModeloEcf, "SUB TOTAL: R$ " + banco.retornaRead().GetString(0) + "\n", ref fiscal_MSG, ref fiscal_retorno, alwaysVariables.ECF_Ligada);
                                    //fiscal_retorno = conectorECF.Bematech_FI_RelatorioGerencial("SUB TOTAL: R$ " + banco.retornaRead().GetString(0) + "\n");
                                }
                            }
                            banco.fechaConexao(); if (title != "") { this.txtTitleCupomFiscalConectorCF.Invoke((MethodInvoker)delegate { txtTitleCupomFiscalConectorCF.Text = title; }); }
                            if (ataque == 0)
                            {
                                conectorPDV_find_relation_pgto(4, di, df, 1, countDate, find);
                            }

                            break;
                        case 4:
                            countField = banco.retornaSet().Tables[0].Columns.Count;
                            countRows = banco.retornaSet().Tables[0].DefaultView.Count;
                            if (countRows > 0)
                            {
                                for (i = 0; i < countRows; i++)
                                {
                                    functionECF.conectorECF_UsaComprovanteNaoFiscalVinculado(alwaysVariables.ModeloEcf, Convert.ToString(banco.retornaSet().Tables[0].Rows[i][0]) + " - " + Convert.ToString(banco.retornaSet().Tables[0].Rows[i][1]) + " - " + Convert.ToString(banco.retornaSet().Tables[0].Rows[i][2]), ref fiscal_MSG, ref fiscal_retorno, alwaysVariables.ECF_Ligada);
                                        //fiscal_retorno = conectorECF.Bematech_FI_UsaComprovanteNaoFiscalVinculado(Convert.ToString(banco.retornaSet().Tables[0].Rows[i][0]) + " - " + Convert.ToString(banco.retornaSet().Tables[0].Rows[i][1]) + " - " + Convert.ToString(banco.retornaSet().Tables[0].Rows[i][2]));
                                }
                            }
                            banco.fechaConexao(); if (title != "") { this.txtTitleCupomFiscalConectorCF.Invoke((MethodInvoker)delegate { txtTitleCupomFiscalConectorCF.Text = title; }); }
                            if (ataque == 0)
                            {
                                if (valida <= valida1)
                                {
                                    countDate = countDate + 1;
                                    conectorPDV_find_relation_pgto(1, di, df, 1, countDate, find);
                                }
                                else
                                {
                                    countDate = countDate + 1;
                                    conectorPDV_find_relation_pgto(3, di, df, 1, countDate, find);
                                }
                            }
                            break;
                    }
                }
                if (fiscal_retorno == 1)
                {
                    //functionECF.conectorECF_AcionaGuilhotinaMFD(alwaysVariables.ModeloEcf, 1 , ref fiscal_MSG, ref fiscal_retorno, alwaysVariables.ECF_Ligada);
                    functionECF.conectorECF_FechaRelatorioGerencial(alwaysVariables.ModeloEcf, ref fiscal_MSG, ref fiscal_retorno, alwaysVariables.ECF_Ligada);
                    //fiscal_retorno = conectorECF.Bematech_FI_FechaRelatorioGerencial();
                }
                
                banco.fechaConexao(); if (title != "") { this.txtTitleCupomFiscalConectorCF.Invoke((MethodInvoker)delegate { txtTitleCupomFiscalConectorCF.Text = title; }); }
            }
            if (fiscal_retorno == 1 && functionECF.conectorECF_Analisa_RetornoImpressora(alwaysVariables.ModeloEcf,ref ACK, ref ST1, ref ST2, ref ST3, ref fiscal_MSG))
            {
                conectorPDV_inc_cupom_relatorio("RG", null);
            }
        }

        public void conectorPDV_PAFECF_chave(string caminho, string md)
        {
            
                string[] vetor = new string[4] { "N1", "N2", "N3", "N9" };
                string[,] recarga; //Matriz Bidimencionada
                string write = caminho;
                if (File.Exists(caminho))
                {
                    File.Delete(caminho);
                }
                if (!File.Exists(caminho))
                {
                    StreamWriter sw = new StreamWriter(caminho, true, Encoding.ASCII);

                    //################################################################Instrução Banco
                    auxConsistencia = 0;
                    countField = 0;
                    countRows = 0;

                    for (int m = 0; m < vetor.Length; m++)
                    {
                        if (vetor[m] != "#")
                        {
                            try
                            {
                                auxConsistencia = 0;
                                title = banco.abreConexao();
                                banco.startTransaction("conectorPDV_PAFECF_info");
                                banco.addParametro("tipo", vetor[m]);
                                banco.procedimentoSet();

                            }
                            catch (Exception erro) { msgInfo msg = new msgInfo("Caro Cliente - " + erro.Message); msg.ShowDialog(); auxConsistencia = 1; }
                            finally
                            {
                                if (auxConsistencia == 0)
                                {
                                    countField = banco.retornaSet().Tables[0].Columns.Count;
                                    countRows = banco.retornaSet().Tables[0].DefaultView.Count;
                                    if (countRows > 0)
                                    {
                                        recarga = new string[countRows, countField];
                                        for (int i = 0; i < countRows; i++)//Linha
                                        {
                                            for (int j = 0; j < countField; j++) //Coluna
                                            {
                                                recarga[i, j] = Convert.ToString(banco.retornaSet().Tables[0].Rows[i][j]);
                                            }
                                            switch (vetor[m])
                                            {
                                                case "N1":
                                                    sw.Write(export.registro_tipo_n1(vetor[m], recarga[i, 0], recarga[i, 1], recarga[i, 2], recarga[i, 3].ToUpper()) + "\r\n");
                                                    break;
                                                case "N2":
                                                    sw.Write(export.registro_tipo_n2(vetor[m],recarga[i, 0], recarga[i, 1], recarga[i, 2]) + "\r\n");
                                                    break;
                                                case "N3":
                                                    sw.Write(export.registro_tipo_n3(vetor[m], vetorEXE[0], md.ToUpper()) + "\r\n");
                                                    sw.Write(export.registro_tipo_n3(vetor[m], vetorEXE[1], alwaysVariables.MD5_Main_32.ToUpper()) + "\r\n");
                                                    sw.Write(export.registro_tipo_n3(vetor[m], vetorEXE[2], alwaysVariables.MD5_Main_conectorECF.ToUpper()) + "\r\n");
                                                    sw.Write(export.registro_tipo_n3(vetor[m], vetorEXE[3], alwaysVariables.MD5_Main_conectorCrypt.ToUpper()) + "\r\n");
                                                    sw.Write(export.registro_tipo_n3(vetor[m], vetorEXE[4], alwaysVariables.MD5_Main_conectorInstrucao.ToUpper()) + "\r\n");
                                                    sw.Write(export.registro_tipo_n3(vetor[m], vetorEXE[5], alwaysVariables.MD5_Main_conectorTef.ToUpper()) + "\r\n");
                                                    sw.Write(export.registro_tipo_n3(vetor[m], vetorEXE[6], alwaysVariables.MD5_Main_conectorSintegra.ToUpper()) + "\r\n");
                                                    sw.Write(export.registro_tipo_n3(vetor[m], vetorEXE[7], alwaysVariables.MD5_Main_conectorSetting.ToUpper()) + "\r\n");
                                                    sw.Write(export.registro_tipo_n3(vetor[m], vetorEXE[8], alwaysVariables.MD5_Main_conectorBank.ToUpper()) + "\r\n");
                                                    sw.Write(export.registro_tipo_n3(vetor[m], vetorEXE[9], alwaysVariables.MD5_Main_conectorAmbient.ToUpper()) + "\r\n");
                                                    sw.Write(export.registro_tipo_n3(vetor[m], vetorEXE[10], alwaysVariables.MD5_Main_boletoFrs.ToUpper()) + "\r\n");
                                                    sw.Write(export.registro_tipo_n3(vetor[m], vetorEXE[12], alwaysVariables.MD5_Main_INTERFACEEPSON.ToUpper()) + "\r\n");
                                                    sw.Write(export.registro_tipo_n3(vetor[m], vetorEXE[13], alwaysVariables.MD5_Main_ELGIN.ToUpper()) + "\r\n");
                                                    sw.Write(export.registro_tipo_n3(vetor[m], vetorEXE[14], alwaysVariables.MD5_Main_SWEDA.ToUpper()) + "\r\n");
                                                    sw.Write(export.registro_tipo_n3(vetor[m], vetorEXE[15], alwaysVariables.MD5_Main_DARUMA.ToUpper()) + "\r\n");
                                                    sw.Write(export.registro_tipo_n3(vetor[m], vetorEXE[16], alwaysVariables.MD5_Main_mfd.ToUpper()) + "\r\n");
                                                    sw.Write(export.registro_tipo_n3(vetor[m], vetorEXE[17], alwaysVariables.MD5_Main_mfd3.ToUpper()) + "\r\n");
                                                    //sw.Write(export.registro_tipo_n3(vetor[m], vetorEXE[17], alwaysVariables.MD5_Main_sophus) + "\r\n");
                                                    if (alwaysVariables.MD5_Main_64.Trim() != "")
                                                    {
                                                        sw.Write(export.registro_tipo_n3(vetor[m].ToUpper(), vetorEXE[14].ToUpper(), alwaysVariables.MD5_Main_64.ToUpper()) + "\r\n");
                                                    }
                                                    break;
                                                case "N9":
                                                    sw.Write(export.registro_tipo_n9(vetor[m].ToUpper(), recarga[i, 0].ToUpper(), recarga[i, 1].ToUpper(), recarga[i, 2].ToUpper()) + "\r\n");
                                                    break;
                                            }
                                        }
                                    }
                                }
                                banco.fechaConexao(); if (title != "") { this.txtTitleCupomFiscalConectorCF.Invoke((MethodInvoker)delegate { txtTitleCupomFiscalConectorCF.Text = title; }); }
                            }
                        }
                    }
                    sw.Close();
                    if (auxConsistencia == 0)
                    {
                        string registroEAD = new string('\x20', 256);
                        //conectorECF.generateEAD(caminho, alwaysVariables.KeysPublica, alwaysVariables.KeysPrivate, ref registroEAD, fiscal_retorno);
                        
                        functionECF.conectorECF_GenerateEAD(alwaysVariables.ModeloEcf, caminho, alwaysVariables.KeysPublica, alwaysVariables.KeysPrivate, ref registroEAD, fiscal_retorno, ref fiscal_MSG);
                                                                                       
                        string test = key.retornoFileMD5(caminho);
                        if (File.Exists(@"C:\conector\MFD\arquivos\serial.txt"))
                        {
                            alwaysVariables.MD5_Main = key.retornoFileMD5(@"C:\conector\MFD\arquivos\serial.txt");   
                        }
                        conector_update_lineMD5_crypt(fiscal_Cupom, fiscal_numero_caixa, test);
                        caminho = folderEletronico + "\\" + "serial.txt";
                        string fiscal_md5 = new string('\x20', 33);
                        //fiscal_retorno = conectorECF.md5FromFile(caminho, ref fiscal_md5);
                        functionECF.conectorECF_md5FromFile(alwaysVariables.ModeloEcf, caminho, ref fiscal_md5, fiscal_retorno, ref fiscal_MSG);
                        if (fiscal_md5.Trim() != "")
                        {
                            alwaysVariables.MD5_Main = fiscal_md5;   
                        }
                        if (File.Exists(caminho))
                        {
                            File.Delete(caminho);
                        }
                        StreamWriter sw1 = new StreamWriter(folderEletronico + "\\" + "serial.txt", true, Encoding.ASCII);
                        sw1.Write(test);
                        sw1.Close();
                        cryptografia.encryptFile(folderEletronico + "\\", "serial", -1);

                        //fiscal_GT_Crypt = cryptografia.descryptFile(folderMFD + "\\grandFullPDV" + ".enc", "\\grandFullPDV").Substring(0, 19) + "  ";

                        lblVisorEntradaDadosConectorCF.Text = "ENTRADA DE DADOS";
                        msgInfo msg = new msgInfo(1, "Caro Usuário: Arquivo gerado, caminho: " + caminho); msg.ShowDialog();
                        txtVisorMsgConectorCF.Text = "ARQ. GERADO COM SUCESSO...!";
                        txtEntradaDadosConectorCF.CausesValidation = true;
                        txtEntradaDadosConectorCF.Clear();
                        if (alwaysVariables.ModoOperacao == 1)
                        {
                            txtEntradaDadosConectorCF.Select();
                        }
                        else
                        {
                            txtEntradaDadosNF.Select();
                        }

                        registroEAD = new string('\x20', 256);
                        functionECF.conectorECF_GenerateEAD(alwaysVariables.ModeloEcf, write, "BE011B465E262EE8FE5AC862A0EDFDC2AA61FDB4C8B14D1C86C8258835DB57B18E065EF0FA533A894C79E6A172EB52ACD81A47967263FBA133B558796B500E3B82011B6A2228A91EA04A125E16F2CE5C2E7DD13A32EE39B386F5493AA35AC248582C7309B5F75A4105045DC39C5C2696797280467457663D1D79A00B52A609EB", "E88EA74E25FAFBF91E28456B39AA0208F9A669D2214A676B9CB87E62FB5F414EFFB8213A7FDB731F8C06BE286E57FE7CB9D2AFC7CF3DA082F6E982F3C72B21F7D128564C824F3C96B3ED26BAD26534FC88646A6C9AAD43B83AF56F243D514B98FD9CF1A1C3A155F0460E8CF95E66A4F1FFC773C60405AD321C5898BE5C1B1AAD", ref registroEAD, fiscal_retorno, ref fiscal_MSG);
                        StreamWriter sw2 = new StreamWriter(write, true, Encoding.ASCII);

                        if (registroEAD != "")
                        {
                            sw2.Write("EAD" + registroEAD);
                            
                        }
                        sw2.Close();
                    }

                }
        }
        public void conectorPDV_PAFECF_DAV(string tipo, DateTime di, DateTime df)
        {
            try
            {
                auxConsistencia = 0;
                title = banco.abreConexao();
                if (banco.statusSchema() == 1)
                {
                    this.lbStatusBancoConectorCF.Invoke((MethodInvoker)delegate { lbStatusBancoConectorCF.Text = "ON LINE"; });
                    this.lbStatusBancoConectorCF.Invoke((MethodInvoker)delegate { this.lbStatusBancoConectorCF.ForeColor = System.Drawing.Color.Cyan; });
                }
                else
                {
                    this.lbStatusBancoConectorCF.Invoke((MethodInvoker)delegate { lbStatusBancoConectorCF.Text = "OFF LINE"; });
                    this.lbStatusBancoConectorCF.Invoke((MethodInvoker)delegate { this.lbStatusBancoConectorCF.ForeColor = System.Drawing.Color.Red; });
                }
                banco.startTransaction("conectorPDV_PAFECF_DAV");
                banco.addParametro("tipo", tipo);
                banco.addParametro("di", String.Format("{0:yyyyMMdd}", di));
                banco.addParametro("df", String.Format("{0:yyyyMMdd}", df));
                banco.addParametro("store", alwaysVariables.Store);
                banco.addParametro("reserva", "0");
                banco.addParametro("prod", "0");
                banco.addParametro("seq", "0");
                banco.procedimentoSet();
            }
            catch (Exception erro)
            { msg = new msgInfo(erro.Message); msg.ShowDialog(); auxConsistencia = 1; }
            finally
            {
                if (auxConsistencia == 0)
                {
                    countField = banco.retornaSet().Tables[0].Columns.Count;
                    countRows = banco.retornaSet().Tables[0].DefaultView.Count;
                    if (countRows > 0)
                    {
                        //fiscal_retorno = conectorECF.Bematech_FI_ AbreRelatorioMeiosPagamento("20");
                        functionECF.conectorECF_AbreRelatorioMeiosPagamento(alwaysVariables.ModeloEcf, "20", ref fiscal_MSG, ref flag_recebimento, alwaysVariables.ECF_Ligada);
                        for (i = 0; i < countRows; i++)
                        {
                            functionECF.conectorECF_UsaComprovanteNaoFiscalVinculado(alwaysVariables.ModeloEcf, Convert.ToString(banco.retornaSet().Tables[0].Rows[i][0]) + " " + Convert.ToString(banco.retornaSet().Tables[0].Rows[i][1]) + " " + Convert.ToString(banco.retornaSet().Tables[0].Rows[i][2]) + " " + Convert.ToString(banco.retornaSet().Tables[0].Rows[i][3]) + " " + Convert.ToString(banco.retornaSet().Tables[0].Rows[i][4]) + " " + Convert.ToString(banco.retornaSet().Tables[0].Rows[i][5]), ref fiscal_MSG, ref flag_recebimento, alwaysVariables.ECF_Ligada);
                            //fiscal_retorno = conectorECF.Bematech_FI_UsaComprovanteNaoFiscalVinculado(Convert.ToString(banco.retornaSet().Tables[0].Rows[i][0]) + " " + Convert.ToString(banco.retornaSet().Tables[0].Rows[i][1]) + " " + Convert.ToString(banco.retornaSet().Tables[0].Rows[i][2]) + " " + Convert.ToString(banco.retornaSet().Tables[0].Rows[i][3]) + " " + Convert.ToString(banco.retornaSet().Tables[0].Rows[i][4]) + " " + Convert.ToString(banco.retornaSet().Tables[0].Rows[i][5]));
                        }
                    }
                    banco.fechaConexao(); if (title != "") { this.txtTitleCupomFiscalConectorCF.Invoke((MethodInvoker)delegate { txtTitleCupomFiscalConectorCF.Text = title; }); }
                }
                if (fiscal_retorno == 1)
                {
                    functionECF.conectorECF_FechaRelatorioGerencial(alwaysVariables.ModeloEcf, ref fiscal_MSG, ref fiscal_retorno, alwaysVariables.ECF_Ligada);
                    //fiscal_retorno = conectorECF.Bematech_FI_FechaRelatorioGerencial();
                }

                banco.fechaConexao(); if (title != "") { this.txtTitleCupomFiscalConectorCF.Invoke((MethodInvoker)delegate { txtTitleCupomFiscalConectorCF.Text = title; }); }
            }
        }

        void conectorPDV_resumo_venda(bool ativa)
        {
            if (ativa == false)
            {
                txtVisorMsgConectorCF.Text = "CAIXA LIVRE";
                lblResumoDinheiro.Text = "0,00";
                lblResumoCheque.Text = "0,00";
                lblResumoCrediario.Text = "0,00";
                lblResumoConvenio.Text = "0,00";
                lblResumoCartaoCredito.Text = "0,00";
                lblResumoCartaoDebito.Text = "0,00";
                lblResumoBoleto.Text = "0,00";
                lblResumoDuplicata.Text = "0,00";
                lblResumoRecebimento.Text = "0,00";
                lblResumoVale.Text = "0,00";
                lblResumoDinheiro.Text = "0,00";
                lblResumoDinheiro.Text = "0,00";
                lblResumoCancelados.Text = "0,00";
                this.pnlResumoVendaConectorCF.Size = new System.Drawing.Size(1, 1);
                this.pnlResumoVendaConectorCF.Location = new System.Drawing.Point(746, 607);
                this.pnlResumoVendaConectorCF.Visible = false;
            }
            else
            {
                txtVisorMsgConectorCF.Text = "RESUMO DE VENDAS";
                this.pnlResumoVendaConectorCF.Size = new System.Drawing.Size(911, 526);
                this.pnlResumoVendaConectorCF.Location = new System.Drawing.Point(146, 92);
                this.pnlResumoVendaConectorCF.Visible = true;
                conectorPDV_report_venda("3","1");
            }
        }

        public void conectorPDV_report_venda(string tipo, string cases)
        {
            try
            {
                auxConsistencia = 0;
                title = banco.abreConexao();
                if (banco.statusSchema() == 1)
                {
                    this.lbStatusBancoConectorCF.Invoke((MethodInvoker)delegate { lbStatusBancoConectorCF.Text = "ON LINE"; });
                    this.lbStatusBancoConectorCF.Invoke((MethodInvoker)delegate { this.lbStatusBancoConectorCF.ForeColor = System.Drawing.Color.Cyan; });
                }
                else
                {
                    this.lbStatusBancoConectorCF.Invoke((MethodInvoker)delegate { lbStatusBancoConectorCF.Text = "OFF LINE"; });
                    this.lbStatusBancoConectorCF.Invoke((MethodInvoker)delegate { this.lbStatusBancoConectorCF.ForeColor = System.Drawing.Color.Red; });
                }
                banco.startTransaction("conectorPDV_report_venda");
                banco.addParametro("tipo", tipo);
                banco.addParametro("store", alwaysVariables.Store);
                banco.addParametro("di", String.Format("{0:yyyyMMdd}", Convert.ToDateTime(fiscal_data_movimento.Substring(0, 2) + "/" + fiscal_data_movimento.Substring(2, 2) + "/" + String.Format("{0:ddMMyyyy}", DateTime.Now).Substring(4, 2) + fiscal_data_printer.Substring(4, 2))));
                banco.addParametro("df", String.Format("{0:yyyyMMdd}", Convert.ToDateTime(fiscal_data_movimento.Substring(0, 2) + "/" + fiscal_data_movimento.Substring(2, 2) + "/" + String.Format("{0:ddMMyyyy}", DateTime.Now).Substring(4, 2) + fiscal_data_printer.Substring(4, 2))));
                banco.addParametro("op", banco_operado);
                banco.procedimentoSet();
            }
            catch (Exception erro)
            { msg = new msgInfo(erro.Message); msg.ShowDialog(); auxConsistencia = 1; }
            finally
            {
                if (cases == "1")//Visualização
                {
                    if (auxConsistencia == 0)
                    {
                        countField = banco.retornaSet().Tables[0].Columns.Count;
                        countRows = banco.retornaSet().Tables[0].DefaultView.Count;
                        if (countRows > 0)
                        {
                            for (i = 0; i < countRows; i++)
                            {
                                switch (Convert.ToString(banco.retornaSet().Tables[0].Rows[i][0]))
                                {
                                    case "1":
                                        lblResumoDinheiro.Text = Convert.ToString(banco.retornaSet().Tables[0].Rows[i][2]);
                                        break;
                                    case "2":
                                        lblResumoCheque.Text = Convert.ToString(banco.retornaSet().Tables[0].Rows[i][2]);
                                        break;
                                    case "3":
                                        lblResumoCrediario.Text = Convert.ToString(banco.retornaSet().Tables[0].Rows[i][2]);
                                        break;
                                    case "4":
                                        lblResumoConvenio.Text = Convert.ToString(banco.retornaSet().Tables[0].Rows[i][2]);
                                        break;
                                    case "5":
                                        lblResumoCartaoCredito.Text = Convert.ToString(banco.retornaSet().Tables[0].Rows[i][2]);
                                        break;
                                    case "6":
                                        lblResumoCartaoDebito.Text = Convert.ToString(banco.retornaSet().Tables[0].Rows[i][2]);
                                        break;
                                    case "7":
                                        lblResumoBoleto.Text = Convert.ToString(banco.retornaSet().Tables[0].Rows[i][2]);
                                        break;
                                    case "8":
                                        lblResumoDuplicata.Text = Convert.ToString(banco.retornaSet().Tables[0].Rows[i][2]);
                                        break;
                                    case "9":
                                        lblResumoRecebimento.Text = Convert.ToString(banco.retornaSet().Tables[0].Rows[i][2]);
                                        break;
                                    case "10":
                                        lblResumoVale.Text = Convert.ToString(banco.retornaSet().Tables[0].Rows[i][2]);
                                        break;
                                    case "11":
                                        //lblResumoCancelados.Text = Convert.ToString(banco.retornaSet().Tables[0].Rows[i][2]);
                                        break;
                                    case "12":
                                        if (lblResumoCancelados.Text != "" && Convert.ToString(lblResumoCancelados.Text.Replace(",", ".")) == "0")
                                        {
                                            lblResumoCancelados.Text = Convert.ToString(banco.retornaSet().Tables[0].Rows[i][2]);
                                        }
                                        break;
                                    case "0":
                                        lblResumoCancelados.Text = Convert.ToString(banco.retornaSet().Tables[0].Rows[i][2]);
                                        break;
                                }
                            }
                        }
                        banco.fechaConexao(); if (title != "") { this.txtTitleCupomFiscalConectorCF.Invoke((MethodInvoker)delegate { txtTitleCupomFiscalConectorCF.Text = title; }); }
                    }
                    banco.fechaConexao(); if (title != "") { this.txtTitleCupomFiscalConectorCF.Invoke((MethodInvoker)delegate { txtTitleCupomFiscalConectorCF.Text = title; }); }
                }
                else if (cases == "2")
                {
                    if (auxConsistencia == 0)
                    {
                        countField = banco.retornaSet().Tables[0].Columns.Count;
                        countRows = banco.retornaSet().Tables[0].DefaultView.Count;
                        if (countRows > 0)
                        {
                            functionECF.conectorECF_AbreRelatorioGerencial(alwaysVariables.ModeloEcf, "01", ref fiscal_MSG, ref fiscal_retorno, alwaysVariables.ECF_Ligada);
                            functionECF.conectorECF_RelatorioGerencial(alwaysVariables.ModeloEcf, "\n", ref fiscal_MSG, ref fiscal_retorno, alwaysVariables.ECF_Ligada);
                            functionECF.conectorECF_RelatorioGerencial(alwaysVariables.ModeloEcf, "            FECHAMENTO DE OPERADOR               ", ref fiscal_MSG, ref fiscal_retorno, alwaysVariables.ECF_Ligada);
                            functionECF.conectorECF_RelatorioGerencial(alwaysVariables.ModeloEcf, "_______________________________________________\n", ref fiscal_MSG, ref fiscal_retorno, alwaysVariables.ECF_Ligada);
                            functionECF.conectorECF_RelatorioGerencial(alwaysVariables.ModeloEcf, "OPERADOR.......: " + banco_operado, ref fiscal_MSG, ref fiscal_retorno, alwaysVariables.ECF_Ligada);
                            functionECF.conectorECF_RelatorioGerencial(alwaysVariables.ModeloEcf, "DATA MOVIMENTO.: " + fiscal_data_movimento.Substring(0, 2) + "/" + fiscal_data_movimento.Substring(2, 2) + "/" + String.Format("{0:ddMMyyyy}", DateTime.Now).Substring(4, 2) + fiscal_data_movimento.Substring(4, 2), ref fiscal_MSG, ref fiscal_retorno, alwaysVariables.ECF_Ligada);
                            functionECF.conectorECF_RelatorioGerencial(alwaysVariables.ModeloEcf, "_______________________________________________\n", ref fiscal_MSG, ref fiscal_retorno, alwaysVariables.ECF_Ligada);
                            functionECF.conectorECF_RelatorioGerencial(alwaysVariables.ModeloEcf, "                TOTALIZADORES                    ", ref fiscal_MSG, ref fiscal_retorno, alwaysVariables.ECF_Ligada);
                            functionECF.conectorECF_RelatorioGerencial(alwaysVariables.ModeloEcf, "\n", ref fiscal_MSG, ref fiscal_retorno, alwaysVariables.ECF_Ligada);
                            for (i = 0; i < countRows; i++)
                            {
                                switch (Convert.ToString(banco.retornaSet().Tables[0].Rows[i][0]))
                                {
                                    case "1":
                                        
                            functionECF.conectorECF_RelatorioGerencial(alwaysVariables.ModeloEcf, "Dinheiro................: " + Convert.ToString(banco.retornaSet().Tables[0].Rows[i][2]), ref fiscal_MSG, ref fiscal_retorno, alwaysVariables.ECF_Ligada);
                                        
                                        break;
                                    case "2":
                                        functionECF.conectorECF_RelatorioGerencial(alwaysVariables.ModeloEcf, "Cheque..................: " + Convert.ToString(banco.retornaSet().Tables[0].Rows[i][2]), ref fiscal_MSG, ref fiscal_retorno, alwaysVariables.ECF_Ligada);
                                        break;
                                    case "3":
                                        functionECF.conectorECF_RelatorioGerencial(alwaysVariables.ModeloEcf, "Crediario...............: "+ Convert.ToString(banco.retornaSet().Tables[0].Rows[i][2]), ref fiscal_MSG, ref fiscal_retorno, alwaysVariables.ECF_Ligada);
                                        break;
                                    case "4":
                                        functionECF.conectorECF_RelatorioGerencial(alwaysVariables.ModeloEcf, "Convênio................: " + Convert.ToString(banco.retornaSet().Tables[0].Rows[i][2]), ref fiscal_MSG, ref fiscal_retorno, alwaysVariables.ECF_Ligada);
                                        break;
                                    case "5":
                                        functionECF.conectorECF_RelatorioGerencial(alwaysVariables.ModeloEcf, "Cartão de Credito.......: " + Convert.ToString(banco.retornaSet().Tables[0].Rows[i][2]), ref fiscal_MSG, ref fiscal_retorno, alwaysVariables.ECF_Ligada);
                                        break;
                                    case "6":
                                        functionECF.conectorECF_RelatorioGerencial(alwaysVariables.ModeloEcf, "Cartão de Debito........: " + Convert.ToString(banco.retornaSet().Tables[0].Rows[i][2]), ref fiscal_MSG, ref fiscal_retorno, alwaysVariables.ECF_Ligada);
                                        break;
                                    case "7":
                                        functionECF.conectorECF_RelatorioGerencial(alwaysVariables.ModeloEcf, "Boletos.................: " + Convert.ToString(banco.retornaSet().Tables[0].Rows[i][2]), ref fiscal_MSG, ref fiscal_retorno, alwaysVariables.ECF_Ligada);
                                        break;
                                    case "8":
                                        functionECF.conectorECF_RelatorioGerencial(alwaysVariables.ModeloEcf, "Duplicata...............: "+Convert.ToString(banco.retornaSet().Tables[0].Rows[i][2]), ref fiscal_MSG, ref fiscal_retorno, alwaysVariables.ECF_Ligada);
                                        break;
                                    case "9":
                                        functionECF.conectorECF_RelatorioGerencial(alwaysVariables.ModeloEcf, "Recebimento.............: "+Convert.ToString(banco.retornaSet().Tables[0].Rows[i][2]), ref fiscal_MSG, ref fiscal_retorno, alwaysVariables.ECF_Ligada);
                                        break;
                                    case "10":
                                        functionECF.conectorECF_RelatorioGerencial(alwaysVariables.ModeloEcf, "Vale....................: "+Convert.ToString(banco.retornaSet().Tables[0].Rows[i][2]), ref fiscal_MSG, ref fiscal_retorno, alwaysVariables.ECF_Ligada);
                                        break;
                                    case "11":
                                        functionECF.conectorECF_RelatorioGerencial(alwaysVariables.ModeloEcf, "POS.....................: " + Convert.ToString(banco.retornaSet().Tables[0].Rows[i][2]), ref fiscal_MSG, ref fiscal_retorno, alwaysVariables.ECF_Ligada);
                                        break;
                                    case "12":
                                        functionECF.conectorECF_RelatorioGerencial(alwaysVariables.ModeloEcf, "Troca - Credito.........: " + Convert.ToString(banco.retornaSet().Tables[0].Rows[i][2]), ref fiscal_MSG, ref fiscal_retorno, alwaysVariables.ECF_Ligada);
                                        break;
                                }
                            }
                            
                            functionECF.conectorECF_RelatorioGerencial(alwaysVariables.ModeloEcf, "_______________________________________________", ref fiscal_MSG, ref fiscal_retorno, alwaysVariables.ECF_Ligada);
                            functionECF.conectorECF_RelatorioGerencial(alwaysVariables.ModeloEcf, "             SUPRIMENTO DE CAIXA               ", ref fiscal_MSG, ref fiscal_retorno, alwaysVariables.ECF_Ligada);
                            functionECF.conectorECF_RelatorioGerencial(alwaysVariables.ModeloEcf, "\n", ref fiscal_MSG, ref fiscal_retorno, alwaysVariables.ECF_Ligada);
                            functionECF.conectorECF_RelatorioGerencial(alwaysVariables.ModeloEcf, "Troco prestado..................: "+banco.retornaSet().Tables[0].Rows[0][6], ref fiscal_MSG, ref fiscal_retorno, alwaysVariables.ECF_Ligada);
                            functionECF.conectorECF_RelatorioGerencial(alwaysVariables.ModeloEcf, "Entrada de troco [Suprimento]...: "+banco.retornaSet().Tables[0].Rows[0][10], ref fiscal_MSG, ref fiscal_retorno, alwaysVariables.ECF_Ligada);
                            functionECF.conectorECF_RelatorioGerencial(alwaysVariables.ModeloEcf, "Sangrias........................: " + banco.retornaSet().Tables[0].Rows[0][16], ref fiscal_MSG, ref fiscal_retorno, alwaysVariables.ECF_Ligada);
                            functionECF.conectorECF_RelatorioGerencial(alwaysVariables.ModeloEcf, "_______________________________________________\n", ref fiscal_MSG, ref fiscal_retorno, alwaysVariables.ECF_Ligada);
                            functionECF.conectorECF_RelatorioGerencial(alwaysVariables.ModeloEcf, "                    TOTAIS                     ", ref fiscal_MSG, ref fiscal_retorno, alwaysVariables.ECF_Ligada);
                            functionECF.conectorECF_RelatorioGerencial(alwaysVariables.ModeloEcf, "\n", ref fiscal_MSG, ref fiscal_retorno, alwaysVariables.ECF_Ligada);
                            functionECF.conectorECF_RelatorioGerencial(alwaysVariables.ModeloEcf, "Acrescimo.......................: "+banco.retornaSet().Tables[0].Rows[0][9], ref fiscal_MSG, ref fiscal_retorno, alwaysVariables.ECF_Ligada);
                            functionECF.conectorECF_RelatorioGerencial(alwaysVariables.ModeloEcf, "Descontos.......................: "+banco.retornaSet().Tables[0].Rows[0][14], ref fiscal_MSG, ref fiscal_retorno, alwaysVariables.ECF_Ligada);
                            functionECF.conectorECF_RelatorioGerencial(alwaysVariables.ModeloEcf, "Cancelamento....................: " + banco.retornaSet().Tables[0].Rows[0][13], ref fiscal_MSG, ref fiscal_retorno, alwaysVariables.ECF_Ligada);
                            functionECF.conectorECF_RelatorioGerencial(alwaysVariables.ModeloEcf, "Venda Liquida...................: "+banco.retornaSet().Tables[0].Rows[0][4], ref fiscal_MSG, ref fiscal_retorno, alwaysVariables.ECF_Ligada);
                            functionECF.conectorECF_RelatorioGerencial(alwaysVariables.ModeloEcf, "Venda Bruta.....................: "+banco.retornaSet().Tables[0].Rows[0][12], ref fiscal_MSG, ref fiscal_retorno, alwaysVariables.ECF_Ligada);
                            functionECF.conectorECF_RelatorioGerencial(alwaysVariables.ModeloEcf, "\n", ref fiscal_MSG, ref fiscal_retorno, alwaysVariables.ECF_Ligada);
                            functionECF.conectorECF_RelatorioGerencial(alwaysVariables.ModeloEcf, "\n", ref fiscal_MSG, ref fiscal_retorno, alwaysVariables.ECF_Ligada);
                            functionECF.conectorECF_RelatorioGerencial(alwaysVariables.ModeloEcf, "_______________________________________________\n", ref fiscal_MSG, ref fiscal_retorno, alwaysVariables.ECF_Ligada);
                            functionECF.conectorECF_RelatorioGerencial(alwaysVariables.ModeloEcf, "          Assinatura do Conferente               ", ref fiscal_MSG, ref fiscal_retorno, alwaysVariables.ECF_Ligada);
                            functionECF.conectorECF_FechaRelatorioGerencial(alwaysVariables.ModeloEcf, ref fiscal_MSG, ref fiscal_retorno, alwaysVariables.ECF_Ligada);
                            functionECF.conectorECF_Analisa_RetornoImpressora(alwaysVariables.ModeloEcf, ref ACK, ref ST1, ref ST2, ref ST3, ref fiscal_MSG);
                            banco_operado = "0";
                            input_operador = "0";
                            banco_sequencia = "0";
                            lblOperadorNfce.Text = "0";
                            lbOperadorConectorCF.Text = "0";
                        }
                        banco.fechaConexao(); if (title != "") { this.txtTitleCupomFiscalConectorCF.Invoke((MethodInvoker)delegate { txtTitleCupomFiscalConectorCF.Text = title; }); }
                    }
                    banco.fechaConexao(); if (title != "") { this.txtTitleCupomFiscalConectorCF.Invoke((MethodInvoker)delegate { txtTitleCupomFiscalConectorCF.Text = title; }); }
                }
            }
        }
        public void conectorPDV_find_notad_itensD(string tipo, string nf, Int16 sinal)
        {
            if (sinal == 0)
            {
                dgvNotaDConectorCF.Rows.Clear();
            }
            try
            {
                auxConsistencia = 0;
                title = banco.abreConexao();
                if (banco.statusSchema() == 1)
                {
                    this.lbStatusBancoConectorCF.Invoke((MethodInvoker)delegate { lbStatusBancoConectorCF.Text = "ON LINE"; });
                    this.lbStatusBancoConectorCF.Invoke((MethodInvoker)delegate { this.lbStatusBancoConectorCF.ForeColor = System.Drawing.Color.Cyan; });
                }
                else
                {
                    this.lbStatusBancoConectorCF.Invoke((MethodInvoker)delegate { lbStatusBancoConectorCF.Text = "OFF LINE"; });
                    this.lbStatusBancoConectorCF.Invoke((MethodInvoker)delegate { this.lbStatusBancoConectorCF.ForeColor = System.Drawing.Color.Red; });
                }
                banco.startTransaction("conectorPDV_find_notad_item");
                banco.addParametro("tipo", tipo);
                banco.addParametro("nf", nf);
                if (nf != "")
                {
                    if (sinal == 0)
                    {
                        banco.procedimentoSet();
                    }
                    else
                    {
                        banco.procedimentoRead();
                    }
                }
                else
                {
                    auxConsistencia = 1;
                }
            }
            catch (Exception erro)
            { msg = new msgInfo(erro.Message); msg.ShowDialog(); auxConsistencia = 1; }
            finally
            {
                if (auxConsistencia == 0)
                {
                    if (sinal == 0)
                    {
                        countField = banco.retornaSet().Tables[0].Columns.Count;
                        countRows = banco.retornaSet().Tables[0].DefaultView.Count;
                        notaD = new string[countRows, countField];
                        if (countRows > 0)
                        {
                            countField = banco.retornaSet().Tables[0].Columns.Count;
                            countRows = banco.retornaSet().Tables[0].DefaultView.Count;
                            if (countRows > 0)
                            {
                                dgvNotaDConectorCF.AllowUserToAddRows = false;
                                for (int i = 0; i < countRows; i++)
                                {
                                    for (int j = 0; j < countField; j++) //Coluna
                                    {
                                        notaD[i, j] = Convert.ToString(banco.retornaSet().Tables[0].Rows[i][j]);
                                    }
                                    dgvNotaDConectorCF.Rows.Add();
                                    for (int j = 0; j < countField; j++)
                                    {
                                        dgvNotaDConectorCF.Rows[i].Cells[j].Value = Convert.ToString(banco.retornaSet().Tables[0].Rows[i][j]);
                                    }
                                }
                            }
                            else
                            {
                                if (dgvNotaDConectorCF.RowCount < 1)
                                {
                                    dgvNotaDConectorCF.Rows.Add();
                                }
                            }
                        }
                        else
                        {
                            if (dgvNotaDConectorCF.RowCount < 1)
                            {
                                dgvNotaDConectorCF.Rows.Add();
                            }
                        }
                    }
                    else
                    {
                        if (banco.retornaRead().Read() == true)
                        {
                            lblTotalNotaDConectorCF.Text = banco.retornaRead().GetString(0);
                        }
                    }
                }
                banco.fechaConexao(); if (title != "") { this.txtTitleCupomFiscalConectorCF.Invoke((MethodInvoker)delegate { txtTitleCupomFiscalConectorCF.Text = title; }); }
                if (sinal == 0)
                {
                    conectorPDV_find_notad_itensD("3", nf, -1);   
                }
            }
        }

        public string conectorPDV_find_itensD(string nf)
        {
            string retorno = "0";
            try
            {
                auxConsistencia = 0;
                title = banco.abreConexao();
                if (banco.statusSchema() == 1)
                {
                    this.lbStatusBancoConectorCF.Invoke((MethodInvoker)delegate { lbStatusBancoConectorCF.Text = "ON LINE"; });
                    this.lbStatusBancoConectorCF.Invoke((MethodInvoker)delegate { this.lbStatusBancoConectorCF.ForeColor = System.Drawing.Color.Cyan; });
                }
                else
                {
                    this.lbStatusBancoConectorCF.Invoke((MethodInvoker)delegate { lbStatusBancoConectorCF.Text = "OFF LINE"; });
                    this.lbStatusBancoConectorCF.Invoke((MethodInvoker)delegate { this.lbStatusBancoConectorCF.ForeColor = System.Drawing.Color.Red; });
                }
                banco.startTransaction("conectorPDV_find_notad_item");
                banco.addParametro("tipo", "1");
                banco.addParametro("nf", nf);
                banco.procedimentoRead();
                if (banco.retornaRead().Read() == true)
                {
                    retorno = banco.retornaRead().GetString(0);
                }
            }
            catch (Exception erro)
            { msg = new msgInfo(erro.Message); msg.ShowDialog(); auxConsistencia = 1; }
            finally
            {
                if (auxConsistencia == 0)
                {
                }

                banco.fechaConexao(); if (title != "") { this.txtTitleCupomFiscalConectorCF.Invoke((MethodInvoker)delegate { txtTitleCupomFiscalConectorCF.Text = title; }); }
            }
            return retorno;
        }
        public string conectorPDV_PAFECF_tributos(string coo, string store, string cx, string tipo, Int16 schema)
        {
            string valor = "0.00";
            string valor1 = "0.00";
            string retorno = "0,00";
            try
            {
                auxConsistencia = 0;
                title = banco.abreConexao();
                if (banco.statusSchema() == 1)
                {
                    this.lbStatusBancoConectorCF.Invoke((MethodInvoker)delegate { lbStatusBancoConectorCF.Text = "ON LINE"; });
                    this.lbStatusBancoConectorCF.Invoke((MethodInvoker)delegate { this.lbStatusBancoConectorCF.ForeColor = System.Drawing.Color.Cyan; });
                }
                else
                {
                    this.lbStatusBancoConectorCF.Invoke((MethodInvoker)delegate { lbStatusBancoConectorCF.Text = "OFF LINE"; });
                    this.lbStatusBancoConectorCF.Invoke((MethodInvoker)delegate { this.lbStatusBancoConectorCF.ForeColor = System.Drawing.Color.Red; });
                }
                banco.startTransaction("conectorPDV_PAFECF_tributos");
                banco.addParametro("coo", coo);
                banco.addParametro("store", alwaysVariables.Store);
                banco.addParametro("cx", cx);
                banco.addParametro("tipo", tipo);
                banco.procedimentoSet();
            }
            catch (Exception erro)
            { msg = new msgInfo(erro.Message); msg.ShowDialog(); auxConsistencia = 1; }
            finally
            {
                if (schema == 0) //Cupom fiscal
                {
                    if (auxConsistencia == 0)
                    {
                        valor = Convert.ToString(banco.retornaSet().Tables[0].Rows[0][0]);
                        valor1 = Convert.ToString(banco.retornaSet().Tables[0].Rows[0][1]);
                        retorno = "R$ " + valor + " de tributos federais \n";
                        retorno += "R$ " + valor1 + " de tributos estaduais. ";
                    }
                    else
                    {
                        retorno = "R$ 0,00 de tributos federais e";
                        retorno += "R$ 0,00 de tributos estaduais. \n";
                    }
                }
                else
                {
                    try
                    {

                        switch (tipo)
                        {
                            case "4":
                                listaTotalNFe[0].total_ICMSTot_vTotTrib = Convert.ToString(banco.retornaSet().Tables[0].Rows[0][2]);
                                break;
                            default:
                                listaTotalNFe[0].total_ICMSTot_vTotTrib = "0";
                                break;
                        }
                    }
                    catch (Exception)
                    {
                        listaTotalNFe[0].total_ICMSTot_vTotTrib = "0";
                    }
                }
                banco.fechaConexao(); if (title != "") { this.txtTitleCupomFiscalConectorCF.Invoke((MethodInvoker)delegate { txtTitleCupomFiscalConectorCF.Text = title; }); }
            }
            return retorno;
        }
        public string conectorPDV_PAFECF_tributos(string coo, string store, string cx, string tipo)
        {
            string retorno = "0,00";
            try
            {
                auxConsistencia = 0;
                title = banco.abreConexao();
                if (banco.statusSchema() == 1)
                {
                    this.lbStatusBancoConectorCF.Invoke((MethodInvoker)delegate { lbStatusBancoConectorCF.Text = "ON LINE"; });
                    this.lbStatusBancoConectorCF.Invoke((MethodInvoker)delegate { this.lbStatusBancoConectorCF.ForeColor = System.Drawing.Color.Cyan; });
                }
                else
                {
                    this.lbStatusBancoConectorCF.Invoke((MethodInvoker)delegate { lbStatusBancoConectorCF.Text = "OFF LINE"; });
                    this.lbStatusBancoConectorCF.Invoke((MethodInvoker)delegate { this.lbStatusBancoConectorCF.ForeColor = System.Drawing.Color.Red; });
                }
                banco.startTransaction("conectorPDV_PAFECF_tributos");
                banco.addParametro("coo", coo);
                banco.addParametro("store", store);
                banco.addParametro("cx", cx);
                banco.addParametro("tipo", tipo);
                banco.procedimentoSet();
            }
            catch (Exception erro)
            { msg = new msgInfo(erro.Message); msg.ShowDialog(); auxConsistencia = 1; }
            finally
            {
                if (auxConsistencia == 0)
                {
                    retorno = Convert.ToString(banco.retornaSet().Tables[0].Rows[0][0]);
                }
                banco.fechaConexao(); if (title != "") { this.txtTitleCupomFiscalConectorCF.Invoke((MethodInvoker)delegate { txtTitleCupomFiscalConectorCF.Text = title; }); }
            }
            return retorno;
        }
        public void conectorPDV_find_fechamentoOp(string tipo)
        {
            try
            {
                auxConsistencia = 0;
                title = banco.abreConexao();
                if (banco.statusSchema() == 1)
                {
                    this.lbStatusBancoConectorCF.Invoke((MethodInvoker)delegate { lbStatusBancoConectorCF.Text = "ON LINE"; });
                    this.lbStatusBancoConectorCF.Invoke((MethodInvoker)delegate { this.lbStatusBancoConectorCF.ForeColor = System.Drawing.Color.Cyan; });
                }
                else
                {
                    this.lbStatusBancoConectorCF.Invoke((MethodInvoker)delegate { lbStatusBancoConectorCF.Text = "OFF LINE"; });
                    this.lbStatusBancoConectorCF.Invoke((MethodInvoker)delegate { this.lbStatusBancoConectorCF.ForeColor = System.Drawing.Color.Red; });
                }
                banco.startTransaction("conectorPDV_find_fechamentoOp");
                banco.addParametro("tipo", tipo);
                banco.addParametro("store", alwaysVariables.Store);
                if (fiscal_data_movimento.Trim() != "" && fiscal_data_movimento != "000000")
                {
                    banco.addParametro("find", String.Format("{0:yyyyMMdd}", Convert.ToDateTime(fiscal_data_movimento.Substring(0, 2) + "/" + fiscal_data_movimento.Substring(2, 2) + "/" + String.Format("{0:ddMMyyyy}", DateTime.Now).Substring(4, 2) + fiscal_data_printer.Substring(4, 2))));
                }
                else if (fiscal_data_printer.Trim() != "" && fiscal_data_printer != "000000")
                {
                    banco.addParametro("find", String.Format("{0:yyyyMMdd}", Convert.ToDateTime(fiscal_data_printer.Substring(0, 2) + "/" + fiscal_data_printer.Substring(2, 2) + "/" + String.Format("{0:ddMMyyyy}", DateTime.Now).Substring(4, 2) + fiscal_data_printer.Substring(4, 2))));
                }
                else
                {
                    banco.addParametro("find", String.Format("{0:yyyyMMdd}", DateTime.Now));
                }
                banco.addParametro("pdv", fiscal_numero_caixa.Replace("\0", "").Trim());
                banco.addParametro("operador", banco_operado);
                banco.addParametro("seq", banco_sequencia);
                if (banco_sequencia != null)
                {
                    if (tipo == "2")
                    {
                        banco.procedimentoRead();
                        if (banco.retornaRead().Read() == true)
                        {
                            flagBruto = banco.retornaRead().GetString(0);
                            flagSangria = banco.retornaRead().GetString(1);
                            flagVale = banco.retornaRead().GetString(2);
                            flagFundo_Caixa = banco.retornaRead().GetString(3);
                            flagCancelado = banco.retornaRead().GetString(4);
                            flagJuros = banco.retornaRead().GetString(5);
                            flagDoacao = banco.retornaRead().GetString(6);
                            flagDevolucao = banco.retornaRead().GetString(7);
                            flagSeq = banco.retornaRead().GetString(8);
                            flagCanceladoFechamento = banco.retornaRead().GetString(9);
                            flagBrutoFechamento = banco.retornaRead().GetString(11);
                            flagDesconto = banco.retornaRead().GetString(10);
                            flagLiquido = banco.retornaRead().GetString(12);
                        }
                        else
                        {
                            resetVariableFechamento();
                        }
                    }
                    else
                    {
                        banco.procedimentoSet();
                        string aux = new string('\x20', 25);
                        if (auxConsistencia == 0)
                        {
                            countField = banco.retornaSet().Tables[0].Columns.Count;
                            countRows = banco.retornaSet().Tables[0].DefaultView.Count;
                            if (countRows > 0)
                            {
                                for (i = 0; i < countRows; i++)
                                {
                                    for (int j = 0; j < countField; j++)
                                    {
                                        if (j == 0)
                                        {
                                            aux = Convert.ToString(banco.retornaSet().Tables[0].Rows[i][j]);
                                        }
                                        else
                                        {
                                            aux = aux.PadRight(25, ' ') + Convert.ToString(banco.retornaSet().Tables[0].Rows[i][j]);
                                        }
                                    }
                                    functionECF.conectorECF_UsaComprovanteNaoFiscalVinculado(alwaysVariables.ModeloEcf, aux, ref fiscal_MSG, ref fiscal_retorno, alwaysVariables.ECF_Ligada);
                                    //fiscal_retorno = conectorECF.Bematech_FI_UsaComprovanteNaoFiscalVinculado(aux);
                                    aux = "";
                                }
                            }
                            else
                            {
                                banco_operado = "0";
                                this.lbOperadorConectorCF.Invoke((MethodInvoker)delegate { lbOperadorConectorCF.Text = "0"; });
                            }
                        }
                    }
                }
                else
                {
                    auxConsistencia = 1;
                }
            }
            catch (Exception erro)
            { msg = new msgInfo(erro.Message); msg.ShowDialog(); auxConsistencia = 1; }
            finally
            {
                banco.fechaConexao(); if (title != "") { this.txtTitleCupomFiscalConectorCF.Invoke((MethodInvoker)delegate { txtTitleCupomFiscalConectorCF.Text = title; }); }
                if (alwaysVariables.ModoOperacao == 1)
                {
                    this.txtEntradaDadosConectorCF.Invoke((MethodInvoker)delegate { txtEntradaDadosConectorCF.Select(); });
                    
                }
                else
                {
                    this.txtEntradaDadosNF.Invoke((MethodInvoker)delegate { txtEntradaDadosNF.Select(); });
                    
                }
            }
        }
        public void conector_find_subFull(string tipo)
        {
            try
            {
                auxConsistencia = 0;
                title = banco.abreConexao();
                if (banco.statusSchema() == 1)
                {
                    this.lbStatusBancoConectorCF.Invoke((MethodInvoker)delegate { lbStatusBancoConectorCF.Text = "ON LINE"; });
                    this.lbStatusBancoConectorCF.Invoke((MethodInvoker)delegate { this.lbStatusBancoConectorCF.ForeColor = System.Drawing.Color.Cyan; });
                }
                else
                {
                    this.lbStatusBancoConectorCF.Invoke((MethodInvoker)delegate { lbStatusBancoConectorCF.Text = "OFF LINE"; });
                    this.lbStatusBancoConectorCF.Invoke((MethodInvoker)delegate { this.lbStatusBancoConectorCF.ForeColor = System.Drawing.Color.Red; });
                }
                banco.startTransaction("conectorPDV_find_subFull");
                banco.addParametro("tipo", tipo);
                if (alwaysVariables.ModoOperacao == 1 && fiscal_data_movimento != "      ")
                {
                    banco.addParametro("find", String.Format("{0:yyyyMMdd}", fiscal_data_movimento == "000000" ? DateTime.Now : Convert.ToDateTime(fiscal_data_movimento.Substring(0, 2) + "/" + fiscal_data_movimento.Substring(2, 2) + "/" + String.Format("{0:ddMMyyyy}", DateTime.Now).Substring(4, 2) + fiscal_data_printer.Substring(4, 2))));
                }
                else
                {
                    banco.addParametro("find", String.Format("{0:yyyyMMdd}", DateTime.Now));
                }
                if (alwaysVariables.ModoOperacao == 1)
                {
                    banco.addParametro("cupom", fiscal_Cupom.Replace("\0", "").Trim());
                }
                else
                {
                    banco.addParametro("cupom", pedido);
                }
                banco.addParametro("store", alwaysVariables.Store);
                banco.addParametro("cx", fiscal_numero_caixa.Replace("\0", "").Trim());
                banco.procedimentoRead();
                if (banco.retornaRead().Read() == true)
                {
                    banco_sub_total = banco.retornaRead().GetString(0).Replace(",",".");
                }
                else
                {
                    banco_sub_total = "0,00";
                }
                banco.fechaRead();
            }
            catch (Exception erro)
            {
                if ("Referência de objeto não definida para uma instância de um objeto." != erro.Message) { msg = new msgInfo(1,erro.Message); msg.ShowDialog(); } auxConsistencia = 1;
            }
            finally
            {
                banco.fechaConexao(); if (title != "") { this.txtTitleCupomFiscalConectorCF.Invoke((MethodInvoker)delegate { txtTitleCupomFiscalConectorCF.Text = title; }); }
                if (auxConsistencia == 0)
                {
                    //this.txtSubTotalNfce.Text = this.lblRestanteMoneyConectorCF.Text = this.lblTotalMoneyConectorCF.Text = this.txtSubTotalConectorCF.Text = banco_sub_total.Replace(".", ",");
                    this.txtSubTotalConectorCF.Invoke((MethodInvoker)delegate { txtSubTotalConectorCF.Text = banco_sub_total.Replace(".", ","); });
                    this.txtSubTotalNfce.Invoke((MethodInvoker)delegate { this.txtSubTotalNfce.Text = banco_sub_total.Replace(".", ","); });
                    this.lblTotalMoneyConectorCF.Invoke((MethodInvoker)delegate { this.lblTotalMoneyConectorCF.Text = banco_sub_total.Replace(".", ","); });
                    this.lblRestanteMoneyConectorCF.Invoke((MethodInvoker)delegate { this.lblRestanteMoneyConectorCF.Text = banco_sub_total.Replace(".", ","); });
                }
                if (alwaysVariables.ModoOperacao == 1)
                {
                    this.txtEntradaDadosConectorCF.Invoke((MethodInvoker)delegate { this.txtEntradaDadosConectorCF.Select(); });
                    //txtEntradaDadosConectorCF.Select();
                }
                else
                {
                    this.txtEntradaDadosNF.Invoke((MethodInvoker)delegate { this.txtEntradaDadosNF.Select(); });
                    //txtEntradaDadosNF.Select();
                }
            }
        }
        public int conectorPDV_find_conv(string find, string doc, string conv)
        {
            int retorno = 0;
            try
            {
                auxConsistencia = 0;
                title = banco.abreConexao();
                if (banco.statusSchema() == 1)
                {
                    this.lbStatusBancoConectorCF.Invoke((MethodInvoker)delegate { lbStatusBancoConectorCF.Text = "ON LINE"; });
                    this.lbStatusBancoConectorCF.Invoke((MethodInvoker)delegate { this.lbStatusBancoConectorCF.ForeColor = System.Drawing.Color.Cyan; });
                }
                else
                {
                    this.lbStatusBancoConectorCF.Invoke((MethodInvoker)delegate { lbStatusBancoConectorCF.Text = "OFF LINE"; });
                    this.lbStatusBancoConectorCF.Invoke((MethodInvoker)delegate { this.lbStatusBancoConectorCF.ForeColor = System.Drawing.Color.Red; });
                }
                banco.startTransaction("conectorPDV_find_conv");
                banco.addParametro("find", find);
                banco.addParametro("cpf_cgc", doc);
                banco.addParametro("conv", conv);
                banco.procedimentoRead();
                if (banco.retornaRead().Read() == true)
                {
                    convenio_cliente = banco.retornaRead().GetString(0);
                    convenio_nome = banco.retornaRead().GetString(1);
                    convenio_limite = banco.retornaRead().GetString(3);
                    convenio_doc = banco.retornaRead().GetString(5);
                    convenio_status = banco.retornaRead().GetString(2);
                    convenio_prazo = banco.retornaRead().GetString(6);
                    convenio_vencimento = banco.retornaRead().GetString(7);
                    retorno = 1;
                }
                else
                {
                    convenio_cliente = null;
                    convenio_limite = null;
                    convenio_status = null;
                    txtVisorMsgConectorCF.Text = "CONVENIADO INVÁLIDO";
                    txtConvenioConectorCF.Text = "0,00";
                    btnDinheiroConectorCF.Select();
                    retorno = 0;
                }
            }
            catch (Exception erro)
            {
                msg = new msgInfo(erro.Message); msg.ShowDialog(); auxConsistencia = 1; retorno = 0;
            }
            finally
            {
                banco.fechaConexao(); if (title != "") { this.txtTitleCupomFiscalConectorCF.Invoke((MethodInvoker)delegate { txtTitleCupomFiscalConectorCF.Text = title; }); }
                if (auxConsistencia == 0)
                {
                    retorno = 1;
                }
                txtEntradaDadosConectorCF.Select();
            }
            return retorno;
        }
        public int conectorPDV_find_pessoa(string find, string doc)
        {
            int retorno = 0;
            try
            {
                auxConsistencia = 0;
                title = banco.abreConexao();
                if (banco.statusSchema() == 1)
                {
                    this.lbStatusBancoConectorCF.Invoke((MethodInvoker)delegate { lbStatusBancoConectorCF.Text = "ON LINE"; });
                    this.lbStatusBancoConectorCF.Invoke((MethodInvoker)delegate { this.lbStatusBancoConectorCF.ForeColor = System.Drawing.Color.Cyan; });
                }
                else
                {
                    this.lbStatusBancoConectorCF.Invoke((MethodInvoker)delegate { lbStatusBancoConectorCF.Text = "OFF LINE"; });
                    this.lbStatusBancoConectorCF.Invoke((MethodInvoker)delegate { this.lbStatusBancoConectorCF.ForeColor = System.Drawing.Color.Red; });
                }
                banco.startTransaction("conectorPDV_find_cliente");
                banco.addParametro("find", find);
                banco.addParametro("cpf_cgc", doc);
                banco.procedimentoRead();
                if (banco.retornaRead().Read() == true)
                {
                    
                    pessoa_cliente = banco.retornaRead().GetString(0);
                    pessoa_nome = banco.retornaRead().GetString(2);
                    //pessoa_limite = banco.retornaRead().GetString(3);
                    pessoa_status = banco.retornaRead().GetString(1);
                    input_cliente = banco.retornaRead().GetString(3);
                    pessoa_endereco = banco.retornaRead().GetString(4);
                    retorno = 1;
                }
                else
                {
                    pessoa_endereco = null;
                    pessoa_cliente = null;
                    pessoa_limite = null;
                    pessoa_status = null;
                    pessoa_nome = "CLIENTE NÃO CADASTRADO";
                    retorno = 0;
                }
            }
            catch (Exception erro)
            {
                msg = new msgInfo(erro.Message); msg.ShowDialog(); auxConsistencia = 1; retorno = 0;
            }
            finally
            {
                banco.fechaConexao(); if (title != "") { this.txtTitleCupomFiscalConectorCF.Invoke((MethodInvoker)delegate { txtTitleCupomFiscalConectorCF.Text = title; }); }
                if (auxConsistencia == 0)
                {
                    retorno = 1;
                }
                if (alwaysVariables.ModoOperacao == 1)
                {
                    txtEntradaDadosConectorCF.Select();
                }
                else
                {
                    txtEntradaDadosNF.Select();
                }
            }
            return retorno;
        }

        public int conectorPDV_find_cliente(string find, string doc)
        {
            int retorno = 1;
            try
            {
                auxConsistencia = 0;
                title = banco.abreConexao();
                if (banco.statusSchema() == 1)
                {
                    this.lbStatusBancoConectorCF.Invoke((MethodInvoker)delegate { lbStatusBancoConectorCF.Text = "ON LINE"; });
                    this.lbStatusBancoConectorCF.Invoke((MethodInvoker)delegate { this.lbStatusBancoConectorCF.ForeColor = System.Drawing.Color.Cyan; });
                }
                else
                {
                    this.lbStatusBancoConectorCF.Invoke((MethodInvoker)delegate { lbStatusBancoConectorCF.Text = "OFF LINE"; });
                    this.lbStatusBancoConectorCF.Invoke((MethodInvoker)delegate { this.lbStatusBancoConectorCF.ForeColor = System.Drawing.Color.Red; });
                }
                banco.startTransaction("conectorPDV_find_cliente");
                banco.addParametro("find", find);
                banco.addParametro("cpf_cgc", doc.Replace(".",""));
                banco.procedimentoRead();
                if (banco.retornaRead().Read() == true)
                {
                    input_cliente = banco.retornaRead().GetString(0);
                    retorno = Convert.ToInt16(banco.retornaRead().GetString(1));
                    pessoa_nome = txtVisorMsgConectorCF.Text = banco.retornaRead().GetString(2);
                    auxIdCliente = banco.retornaRead().GetString(3);
                    auxTipoPessoa = banco.retornaRead().GetString(4);
                    pessoa_endereco = banco.retornaRead().GetString(5);

                }
                else
                {
                    input_cliente = null;
                    retorno = 1;
                    auxConsistencia = 1;
                }
            }
            catch (Exception erro)
            {
                msg = new msgInfo(erro.Message); msg.ShowDialog(); auxConsistencia = 1; retorno = 1;
            }
            finally
            {
                banco.fechaConexao(); if (title != "") { this.txtTitleCupomFiscalConectorCF.Invoke((MethodInvoker)delegate { txtTitleCupomFiscalConectorCF.Text = title; }); }
                if (auxConsistencia == 0)
                {
                    retorno = 0;
                }
                if (alwaysVariables.ModoOperacao == 1)
                {
                    txtEntradaDadosConectorCF.Select();
                }
                else
                {
                    txtEntradaDadosNF.Select();
                }
            }
            return retorno;
        }
        public void conectorPDV_exe_cupomGenericoItem(string nr_cupom, string cx, string prod, string seq)
        {
            string total = "0";
            try
            {
                auxConsistencia = 0;
                title = banco.abreConexao();
                if (banco.statusSchema() == 1)
                {
                    this.lbStatusBancoConectorCF.Invoke((MethodInvoker)delegate { lbStatusBancoConectorCF.Text = "ON LINE"; });
                    this.lbStatusBancoConectorCF.Invoke((MethodInvoker)delegate { this.lbStatusBancoConectorCF.ForeColor = System.Drawing.Color.Cyan; });
                }
                else
                {
                    this.lbStatusBancoConectorCF.Invoke((MethodInvoker)delegate { lbStatusBancoConectorCF.Text = "OFF LINE"; });
                    this.lbStatusBancoConectorCF.Invoke((MethodInvoker)delegate { this.lbStatusBancoConectorCF.ForeColor = System.Drawing.Color.Red; });
                }
                banco.startTransaction("conectorPDV_exe_cupomGenericoItem");
                banco.addParametro("exe_numeroCupom", nr_cupom.Replace("\0", "").Trim());
                banco.addParametro("exe_loja", alwaysVariables.Store);
                banco.addParametro("exe_terminal", cx.Replace("\0", "").Trim());
                banco.addParametro("exe_produto", prod == "" ? "0" : prod);
                banco.addParametro("exe_dataVenda", String.Format("{0:yyyyMMdd}", Convert.ToDateTime(fiscal_data_movimento.Substring(0, 2) + "/" + fiscal_data_movimento.Substring(2, 2) + "/" + String.Format("{0:ddMMyyyy}", DateTime.Now).Substring(4, 2) + fiscal_data_printer.Substring(4, 2))));
                banco.addParametro("exe_seq", seq);
                banco.procedimentoRead();
                if (banco.retornaRead().Read() == true)
                {
                    total = banco.retornaRead().GetString(0);
                }
            }
            catch (Exception erro)
            {
                msg = new msgInfo(erro.Message); msg.ShowDialog(); auxConsistencia = 1;
            }
            finally
            {
                banco.fechaConexao(); if (title != "") { this.txtTitleCupomFiscalConectorCF.Invoke((MethodInvoker)delegate { txtTitleCupomFiscalConectorCF.Text = title; }); }
                if (auxConsistencia == 0)
                {
                    conector_find_subFull("1");
                    conector_reset_input();
                    conector_reset_discount();
                    conectorPDV_PAFECF_exe("R04", nr_cupom.Replace(",", "").Trim(), 5, prod.Replace("\0", "").Trim(), seq);
                    conectorPDV_PAFECF_exe("R05", nr_cupom.Replace(",", "").Trim(), 4, prod.Replace("\0", "").Trim(), seq);
                    conectorPDV_inc_movimentocaixa(total.Replace(",", "."), "0.00", "0.00", "0.00", "0.00", "0.00", "1", "0.00", "0.00", "0.00", "12", lbOperadorConectorCF.Text, "0.00", 0, "0,00");
                    resetLabel();
                    call_funcao = 0;
                }
                if (alwaysVariables.ModoOperacao == 1)
                {
                    txtEntradaDadosConectorCF.Select();
                }
                else
                {
                    txtEntradaDadosNF.Select();
                }
            }
        }
        public void conectorPDV_exe_cupomlastItem(string nr_cupom, string cx, string prod, string seq)
        {
            string total = "0";
            try
            {
                auxConsistencia = 0;
                title = banco.abreConexao();
                if (banco.statusSchema() == 1)
                {
                    this.lbStatusBancoConectorCF.Invoke((MethodInvoker)delegate { lbStatusBancoConectorCF.Text = "ON LINE"; });
                    this.lbStatusBancoConectorCF.Invoke((MethodInvoker)delegate { this.lbStatusBancoConectorCF.ForeColor = System.Drawing.Color.Cyan; });
                }
                else
                {
                    this.lbStatusBancoConectorCF.Invoke((MethodInvoker)delegate { lbStatusBancoConectorCF.Text = "OFF LINE"; });
                    this.lbStatusBancoConectorCF.Invoke((MethodInvoker)delegate { this.lbStatusBancoConectorCF.ForeColor = System.Drawing.Color.Red; });
                }
                banco.startTransaction("conectorPDV_exe_cupomlastItem");
                banco.addParametro("exe_numeroCupom", nr_cupom.Replace("\0", "").Trim());
                banco.addParametro("exe_loja", alwaysVariables.Store);
                banco.addParametro("exe_terminal", cx.Replace("\0", "").Trim());
                banco.addParametro("exe_produto", prod == "" ? "0" : prod);
                banco.addParametro("exe_dataVenda", String.Format("{0:yyyyMMdd}", Convert.ToDateTime(fiscal_data_movimento.Substring(0, 2) + "/" + fiscal_data_movimento.Substring(2, 2) + "/" + String.Format("{0:ddMMyyyy}", DateTime.Now).Substring(4, 2) + fiscal_data_printer.Substring(4, 2))));
                banco.addParametro("exe_users", alwaysVariables.Usuario);
                banco.procedimentoRead();
                if (banco.retornaRead().Read() == true)
                {
                    total = banco.retornaRead().GetString(0);
                }
            }
            catch (Exception erro)
            {
                msg = new msgInfo(erro.Message); msg.ShowDialog(); auxConsistencia = 1;
            }
            finally
            {
                banco.fechaConexao(); if (title != "") { this.txtTitleCupomFiscalConectorCF.Invoke((MethodInvoker)delegate { txtTitleCupomFiscalConectorCF.Text = title; }); }
                if (auxConsistencia == 0)
                {
                    workObject.modoPdv(true); //Para rotina loop
                    conector_find_subFull("1");
                    conector_reset_input();
                    conectorPDV_PAFECF_exe("R04", nr_cupom.Replace(",", "").Trim(), 5, prod.Replace("\0", "").Trim(), seq);
                    conectorPDV_PAFECF_exe("R05", nr_cupom.Replace(",", "").Trim(), 4, prod.Replace("\0", "").Trim(), seq);
                    strCupom = "";
                    instrucao.setVetorCupom();
                    strCupom = instrucao.getCupomDetalhesCT(alwaysVariables.UserName, alwaysVariables.Senha, Convert.ToDouble(fiscal_store.Replace("\0", "").Trim() == "" ? alwaysVariables.Store : fiscal_store.Replace("\0", "").Trim()) > 0 ? fiscal_store.Replace("\0", "").Trim() : alwaysVariables.Store, nr_cupom.Replace("\0", "").Trim(), String.Format("{0:yyyyMMdd}", DateTime.Now), cx.Replace("\0", "").Trim(), seq);
                    instrucao.carregaInstrucaoMovimentoVenda(instrucao._detalhesCT, strCupom, 1);
                    instrucao.compactScript(instrucao._detalhesCT, "detalhes");
                    conector_last_gt();
                    resetLabel();
                    conectorPDV_inc_movimentocaixa(total.Replace(",", "."), "0.00", "0.00", "0.00", "0.00", "0.00", "1", "0.00", "0.00", "0.00", "12", lbOperadorConectorCF.Text, "0.00", 0, "0,00");
                    workObject.modoPdv(false); //Libera rotina loop
                }
                if (alwaysVariables.ModoOperacao == 1)
                {
                    txtEntradaDadosConectorCF.Select();
                }
                else
                {
                    txtEntradaDadosNF.Select();
                }
            }
        }
        public void conectorPDV_exe_cupom(string nr_cupom, string cx, string prod)
        {
            string total = "0";
            try
            {
                auxConsistencia = 0;
                title = banco.abreConexao();
                if (banco.statusSchema() == 1)
                {
                    this.lbStatusBancoConectorCF.Invoke((MethodInvoker)delegate { lbStatusBancoConectorCF.Text = "ON LINE"; });
                    this.lbStatusBancoConectorCF.Invoke((MethodInvoker)delegate { this.lbStatusBancoConectorCF.ForeColor = System.Drawing.Color.Cyan; });
                }
                else
                {
                    this.lbStatusBancoConectorCF.Invoke((MethodInvoker)delegate { lbStatusBancoConectorCF.Text = "OFF LINE"; });
                    this.lbStatusBancoConectorCF.Invoke((MethodInvoker)delegate { this.lbStatusBancoConectorCF.ForeColor = System.Drawing.Color.Red; });
                }
                banco.startTransaction("conectorPDV_exe_cupom");
                banco.addParametro("exe_numeroCupom", nr_cupom.Replace("\0", "").Trim());
                banco.addParametro("exe_loja", alwaysVariables.Store);
                banco.addParametro("exe_terminal", cx.Replace("\0", "").Trim());
                banco.addParametro("exe_produto", prod == "" ? "0" : prod);
                banco.addParametro("exe_dataVenda", String.Format("{0:yyyyMMdd}", Convert.ToDateTime(fiscal_data_movimento.Substring(0, 2) + "/" + fiscal_data_movimento.Substring(2, 2) + "/" + String.Format("{0:ddMMyyyy}", DateTime.Now).Substring(4, 2) + fiscal_data_printer.Substring(4, 2))));
                banco.addParametro("exe_operador", lbOperadorConectorCF.Text);
                banco.procedimentoRead();
                if (banco.retornaRead().Read() == true)
                {
                    total = banco.retornaRead().GetString(0);
                }
            }
            catch (Exception erro)
            {
                msg = new msgInfo(erro.Message); msg.ShowDialog(); auxConsistencia = 1;
            }
            finally
            {
                banco.fechaConexao(); if (title != "") { this.txtTitleCupomFiscalConectorCF.Invoke((MethodInvoker)delegate { txtTitleCupomFiscalConectorCF.Text = title; }); }
                if (auxConsistencia == 0)
                {
                    workObject.modoPdv(true); //Para rotina loop
                    conector_find_subFull("1");
                    conectorPDV_PAFECF_exe("R04",nr_cupom.Replace(",","").Trim(),1,"0","0");
                    conectorPDV_load_cupom(nr_cupom.Replace(",", "").Trim(), fiscal_store.Replace(",", "").Trim(), fiscal_numero_caixa.Replace(",", "").Trim(), 1);
                    strCupom = "";
                    instrucao.setVetorCupom();
                    strCupom = instrucao.getCupomCabecalhoCT(alwaysVariables.UserName, alwaysVariables.Senha, Convert.ToDouble(fiscal_store.Replace("\0", "").Trim()) > 0 ? fiscal_store.Replace("\0", "").Trim() : alwaysVariables.Store, nr_cupom.Replace("\0", "").Trim(), String.Format("{0:yyyyMMdd}", DateTime.Now), lbOperadorConectorCF.Text, cx.Replace("\0", "").Trim());
                    instrucao.carregaInstrucaoMovimentoVenda(instrucao._cabecalhoCT, strCupom, 0);
                    instrucao.compactScript(instrucao._cabecalhoCT, "cabecalho");
                    conector_last_gt();
                    conectorPDV_inc_movimentocaixa(total.Replace(",", "."), "0.00", "0.00", "0.00", "0.00", "0.00", "1", "0.00", "0.00", "0.00", "12", lbOperadorConectorCF.Text, "0.00", 0, "0,00");
                    workObject.modoPdv(false); //Libera rotina loop
                }
                if (alwaysVariables.ModoOperacao == 1)
                {
                    txtEntradaDadosConectorCF.Select();
                }
                else
                {
                    txtEntradaDadosNF.Select();
                }
            }
        }

        protected void conectorPDV_alt_nfPgto(string idNf, string seq, string idFinalizadora, string card_cnpj, string card_band, string card_aut)
        {
            auxConsistencia = 0;
            try
            {
                title = banco.abreConexao();
                banco.startTransaction("conectorPDV_alt_nfPgto");
                banco.addParametro("newidNf", idNf);
                banco.addParametro("newsequencia", seq);
                banco.addParametro("newidfinalizadora", idFinalizadora);
                banco.addParametro("newcard_CNPJ", card_cnpj);
                banco.addParametro("newcard_bandeira", card_band);
                banco.addParametro("newcard_aut", card_aut);
                banco.procedimentoRead();
                banco.fechaRead();
            }
            catch (Exception erro)
            {
                auxConsistencia = 1;
            }
            finally
            {
                banco.fechaConexao(); if (title != "") { this.txtTitleCupomFiscalConectorCF.Invoke((MethodInvoker)delegate { txtTitleCupomFiscalConectorCF.Text = title; }); }
                if (auxConsistencia == 0)
                {
                    listaFormasPagamento[0].pag_card_CNPJ = card_cnpj;
                    listaFormasPagamento[0].pag_card_cAut = card_aut;
                    listaFormasPagamento[0].pag_card_tBand = card_band;
                }
            }
        }
        protected void conectorPDV_inc_nfPgto(string idNf, string seq, string idFinalizadora, string valor , string desc, string acres, string valorDesc, string valorAcres, string card_cnpj, string card_band, string card_aut, string operador, string met, string troco, int count)
        {
            auxConsistencia = 0;
            try
            {
                title = banco.abreConexao();
                banco.startTransaction("conectorPDV_inc_nfPgto");
                banco.addParametro("inc_idNf", idNf);
                banco.addParametro("inc_sequencia", seq);
                banco.addParametro("inc_idfinalizadora", idFinalizadora);
                banco.addParametro("inc_valor", valor.Trim() == "" ? "0" :valor);
                banco.addParametro("inc_desconto", desc.Trim() == "" ? "0" :desc);
                banco.addParametro("inc_acrescimo", acres.Trim() == "" ? "0" :acres);
                banco.addParametro("inc_valorDesconto", valorDesc.Trim() == "" ? "0" : valorDesc);
                banco.addParametro("inc_valorAcrescimo", valorAcres.Trim() == "" ? "0" :valorAcres);
                banco.addParametro("inc_troco", troco.Trim() == "" ? "0" :troco);
                banco.addParametro("inc_card_CNPJ", card_cnpj);
                banco.addParametro("inc_card_bandeira", card_band);
                banco.addParametro("inc_card_aut", card_aut);
                banco.addParametro("inc_funcionario", operador);
                banco.addParametro("inc_metodo", met == null ? "0" : met);
                banco.procedimentoRead();
                if (banco.retornaRead().Read() == true)
                {
                }
                banco.fechaRead();
            }
            catch (Exception erro)
            {
                msg = new msgInfo(erro.Message); msg.ShowDialog(); auxConsistencia = 1;
            }
            finally
            {
                banco.fechaConexao(); if (title != "") { this.txtTitleCupomFiscalConectorCF.Invoke((MethodInvoker)delegate { txtTitleCupomFiscalConectorCF.Text = title; }); }
                if (auxConsistencia == 0)
                {
                    
                    switch (idFinalizadora)
                    {
                        case "5":
                                listaFormasPagamento[count].pag_tPag = idFinalizadora.ToString();
                                listaFormasPagamento[count].pag_vPag = valor.Replace(",", ".");
                                listaFormasPagamento[count].numeroNotaFiscal = auxNumeroNota;
                                listaFormasPagamento[count].pag_card_CNPJ = card_cnpj;
                                listaFormasPagamento[count].pag_card_cAut = card_aut;
                                listaFormasPagamento[count].pag_card_tBand = card_band;
                            break;
                        case "6":
                                listaFormasPagamento[count].pag_tPag = idFinalizadora.ToString();
                                listaFormasPagamento[count].pag_vPag = valor.Replace(",", ".");
                                listaFormasPagamento[count].numeroNotaFiscal = auxNumeroNota;
                                listaFormasPagamento[count].pag_card_CNPJ = card_cnpj;
                                listaFormasPagamento[count].pag_card_cAut = card_aut;
                                listaFormasPagamento[count].pag_card_tBand = card_band;
                            break;
                        default:
                            listaFormasPagamento[count].pag_tPag = idFinalizadora.ToString();
                            listaFormasPagamento[count].pag_vPag = valor.Replace(",", ".");
                            listaFormasPagamento[count].numeroNotaFiscal = auxNumeroNota;
                            break;
                    }
                }
            }
        }
        public void conectorPDV_inc_movimentocaixa(string valor, string sangria, string abertura, string vale, string fundo, string juros, string situacao, string qtty, string doacao, string dev, string finaliza, string pessoa, string troco, int call, string desconto)
       { 
            try
            {
                auxConsistencia = 0;
                title = banco.abreConexao();
                if (banco.statusSchema() == 1)
                {
                    this.lbStatusBancoConectorCF.Invoke((MethodInvoker)delegate { lbStatusBancoConectorCF.Text = "ON LINE"; });
                    this.lbStatusBancoConectorCF.Invoke((MethodInvoker)delegate { this.lbStatusBancoConectorCF.ForeColor = System.Drawing.Color.Cyan; });
                }
                else
                {
                    this.lbStatusBancoConectorCF.Invoke((MethodInvoker)delegate { lbStatusBancoConectorCF.Text = "OFF LINE"; });
                    this.lbStatusBancoConectorCF.Invoke((MethodInvoker)delegate { this.lbStatusBancoConectorCF.ForeColor = System.Drawing.Color.Red; });
                }
                banco.startTransaction("conectorPDV_inc_movimentocaixa");
                banco.addParametro("inc_tipoCall", call.ToString());
                banco.addParametro("inc_dataMovimento", String.Format("{0:yyyyMMdd}", Convert.ToDateTime(fiscal_data_movimento.Substring(0, 2) + "/" + fiscal_data_movimento.Substring(2, 2) + "/" + String.Format("{0:ddMMyyyy}", DateTime.Now).Substring(4, 2) + fiscal_data_printer.Substring(4, 2))));
                banco.addParametro("inc_loja", Convert.ToDouble(fiscal_store.Replace("\0", "").Trim()) > 0 ? fiscal_store.Replace("\0", "").Trim() : alwaysVariables.Store);
                banco.addParametro("inc_terminal", fiscal_numero_caixa.Replace("\0", "").Trim());
                banco.addParametro("inc_finalizadora", finaliza);
                banco.addParametro("inc_funcionario", pessoa == null ? banco_operado : pessoa);
                //banco.addParametro("inc_hora", String.Format("{0:yyyyMMdd}", Convert.ToDateTime(fiscal_data_movimento.Substring(0, 2) + "/" + fiscal_data_movimento.Substring(2, 2) + "/" + String.Format("{0:ddMMyyyy}", DateTime.Now).Substring(4, 2) + fiscal_data_printer.Substring(4, 2))));
                banco.addParametro("inc_hora", String.Format("{0:yyyy-MM-dd HH%:mm%:ss}", DateTime.Now));
                banco.addParametro("inc_valor", valor.Replace(",","."));
                banco.addParametro("inc_troco", troco.Replace(",", "."));
                banco.addParametro("inc_sangria", sangria.Replace(",", "."));
                banco.addParametro("inc_abertura", abertura.Replace(",", "."));
                banco.addParametro("inc_vale", vale.Replace(",", "."));
                banco.addParametro("inc_fundo_caixa", fundo == null ? "0" : fundo.Replace(",", "."));
                banco.addParametro("inc_juros", juros.Replace(",", "."));
                banco.addParametro("inc_situacao", situacao);
                banco.addParametro("inc_quantidade", qtty.Replace(",", "."));
                banco.addParametro("inc_doacao", doacao.Replace(",", "."));
                banco.addParametro("inc_devolucao", dev.Replace(",", "."));
                banco.addParametro("inc_troco", troco.Replace(",", "."));
                banco.addParametro("inc_desconto", desconto.Replace(",", "."));
                banco.procedimentoRead();
            }
            catch (Exception erro)
            { msg = new msgInfo(erro.Message); msg.ShowDialog(); auxConsistencia = 1; }
            finally
            {
                banco.fechaConexao(); if (title != "") { this.txtTitleCupomFiscalConectorCF.Invoke((MethodInvoker)delegate { txtTitleCupomFiscalConectorCF.Text = title; }); }
                if (auxConsistencia == 0)
                {
                    conectorPDV_find_operador();
                }
                if (call_pdv != 5)
                {
                    if (alwaysVariables.ModoOperacao == 1)
                    {
                        txtEntradaDadosConectorCF.Select();
                    }
                    else
                    {
                        txtEntradaDadosNF.Select();
                    }
                }
            }
        }

        public void conectorPDV_inc_movimentodia(string store, string numerocaixa, string movimento, string operador, string serie, string nf_ad, string modelo, string crz, string coo, string cro, string emissao, string hora, string vb, string par_desc, string OPNF)
        {
            string returno = "sem erros";
            try
            {
                auxConsistencia = 0;
                title = banco.abreConexao();
                banco.startTransaction("conectorPDV_inc_movimentodia");
                banco.addParametro("inc_idloja", store);
                banco.addParametro("inc_numeroCaixa", numerocaixa.Replace("\0","").Trim());
                banco.addParametro("inc_movimento", movimento);
                banco.addParametro("inc_operador", operador);
                banco.addParametro("inc_numero_serie", serie.Replace("\0","").Trim());
                banco.addParametro("inc_mf_adicional", nf_ad.Replace("\0","").Trim());
                banco.addParametro("inc_modelo_ecf", modelo);
                banco.addParametro("inc_crz", crz.Replace("\0","").Trim());
                banco.addParametro("inc_coo", coo.Replace("\0","").Trim());
                banco.addParametro("inc_cro", cro.Replace("\0","").Trim());
                banco.addParametro("inc_dataEmissao", emissao);
                banco.addParametro("inc_horaEmissao", hora);
                banco.addParametro("inc_venda_bruta", vb.Replace("\0","").Trim());
                banco.addParametro("inc_par_desconto", par_desc);
                banco.procedimentoRead();
                //Conferir movimento
            }
            catch (Exception erro)
            {
                msg = new msgInfo(1, "Erro não identificado, entre contato como revendedor! " + erro.Message); msg.ShowDialog();
                auxConsistencia = 1;
            }
            finally
            {
                banco.fechaConexao(); if (title != "") { this.txtTitleCupomFiscalConectorCF.Invoke((MethodInvoker)delegate { txtTitleCupomFiscalConectorCF.Text = title; }); }
                if (auxConsistencia == 0)
                {
                    if (auxConsistencia == 0)
                    {
                        try
                        {
                            strCupom = "";
                            workObject.modoPdv(true); //Para rotina loop
                            instrucao.setVetorCupom();
                            strCupom = instrucao.getMapa(alwaysVariables.UserName, alwaysVariables.Senha, Convert.ToDouble(fiscal_store.Replace("\0", "").Trim()) > 0 ? fiscal_store.Replace("\0", "").Trim() : alwaysVariables.Store, coo.Replace("\0", "").Trim(), emissao, numerocaixa.Replace("\0", "").Trim(), crz.Replace("\0", "").Trim());
                            instrucao.carregaInstrucaoMovimentoVenda(instrucao._movimentoDia, strCupom, 0);

                            //conector_update_lineMD5_r02_reducao_z(coo.Replace("\0","").Trim(), fiscal_numero_caixa.Replace("\0","").Trim(), conectorPDV_PAFECF_indicador("R02", movimento, fiscal_store.Replace("\0","").Trim(), fiscal_numero_caixa.Replace("\0","").Trim(), coo.Replace("\0","").Trim(), "0"),movimento);
                            if (fiscal_last_reducao_dataMovimento.Trim() != "" && (fiscal_last_reducao_dataMovimento.Trim() != "" && fiscal_last_reducao_dataMovimento != "000000"))
                            {
                                conectorPDV_find_detalhes("R02", fiscal_last_reducao_crz, String.Format("{0:ddMMyyyy}", DateTime.Now).Substring(4, 2) + fiscal_last_reducao_dataMovimento.Substring(4, 2) + fiscal_last_reducao_dataMovimento.Substring(2, 2) + fiscal_last_reducao_dataMovimento.Substring(0, 2));
                            }
                            instrucao.compactScript(instrucao._movimentoDia, "mapa");
                            workObject.modoPdv(false); //Libera rotina loop
                        }
                        catch (Exception)
                        {
                        }
                    }

                    try
                    {
                        returno = "Inicio conectorPDV_inc_detalhe_reducao";
                        conectorPDV_inc_detalhe_reducao(alwaysVariables.Store, fiscal_numero_serie, crz.Replace("\0", "").Trim(), nf_ad.Replace("\0", "").Trim(), fiscal_modelo, operador, fiscal_last_reducao_Isento_ICMS, "I1", 1);
                        conectorPDV_inc_detalhe_reducao(alwaysVariables.Store, fiscal_numero_serie, crz.Replace("\0", "").Trim(), nf_ad.Replace("\0", "").Trim(), fiscal_modelo, operador, fiscal_last_reducao_naoIncide_ICMS, "N1", 2);
                        conectorPDV_inc_detalhe_reducao(alwaysVariables.Store, fiscal_numero_serie, crz.Replace("\0", "").Trim(), nf_ad.Replace("\0", "").Trim(), fiscal_modelo, operador, fiscal_last_reducao_St_ICMS, "F1", 3);
                        conectorPDV_inc_detalhe_reducao(alwaysVariables.Store, fiscal_numero_serie, crz.Replace("\0", "").Trim(), nf_ad.Replace("\0", "").Trim(), fiscal_modelo, operador, fiscal_last_reducao_Isento_ISSQN, "IS1", 4);
                        conectorPDV_inc_detalhe_reducao(alwaysVariables.Store, fiscal_numero_serie, crz.Replace("\0", "").Trim(), nf_ad.Replace("\0", "").Trim(), fiscal_modelo, operador, fiscal_last_reducao_naoIncide_ISSQN, "NS1", 5);
                        conectorPDV_inc_detalhe_reducao(alwaysVariables.Store, fiscal_numero_serie, crz.Replace("\0", "").Trim(), nf_ad.Replace("\0", "").Trim(), fiscal_modelo, operador, fiscal_last_reducao_St_ISSQN, "FS1", 6);
                        conectorPDV_inc_detalhe_reducao(alwaysVariables.Store, fiscal_numero_serie, crz.Replace("\0", "").Trim(), nf_ad.Replace("\0", "").Trim(), fiscal_modelo, operador, fiscal_last_reducao_desconto_ICMS, "DT", 7);
                        conectorPDV_inc_detalhe_reducao(alwaysVariables.Store, fiscal_numero_serie, crz.Replace("\0", "").Trim(), nf_ad.Replace("\0", "").Trim(), fiscal_modelo, operador, fiscal_last_reducao_desconto_ISSQN, "DS", 8);
                        conectorPDV_inc_detalhe_reducao(alwaysVariables.Store, fiscal_numero_serie, crz.Replace("\0", "").Trim(), nf_ad.Replace("\0", "").Trim(), fiscal_modelo, operador, fiscal_last_reducao_acrescimo_ICMS, "AT", 9);
                        conectorPDV_inc_detalhe_reducao(alwaysVariables.Store, fiscal_numero_serie, crz.Replace("\0", "").Trim(), nf_ad.Replace("\0", "").Trim(), fiscal_modelo, operador, fiscal_last_reducao_acrescimo_ISSQN, "AS", 10);
                        conectorPDV_inc_detalhe_reducao(alwaysVariables.Store, fiscal_numero_serie, crz.Replace("\0", "").Trim(), nf_ad.Replace("\0", "").Trim(), fiscal_modelo, operador, fiscal_last_reducao_cancelamento_ICMS, "CT", 11);
                        conectorPDV_inc_detalhe_reducao(alwaysVariables.Store, fiscal_numero_serie, crz.Replace("\0", "").Trim(), nf_ad.Replace("\0", "").Trim(), fiscal_modelo, operador, fiscal_last_reducao_cancelamento_ISSQN, "CS", 12);
                        returno = "Concluído conectorPDV_inc_detalhe_reducao";
                        if (OPNF != null && OPNF != "" && Convert.ToDecimal(OPNF) > 0)
                        {
                            returno = "Entrada OPNF - conectorPDV_inc_detalhe_reducao";
                            conectorPDV_inc_detalhe_reducao(alwaysVariables.Store, fiscal_numero_serie, crz.Replace("\0", "").Trim(), nf_ad.Replace("\0", "").Trim(), fiscal_modelo, operador, OPNF, "OPNF", 13);
                            returno = "SAIDA OPNF - conectorPDV_inc_detalhe_reducao";
                        }
                        for (int x = 0; x < 1; x++)
                        {
                            returno = "LOOP SEQUENCIA BEGIN - conectorPDV_inc_detalhe_reducao";
                            for (int l = 0; l < 15; l++)
                            {
                                if (vetorAliquotaLastZ != null)
                                {
                                    returno = "LOOP SEQUENCIA vetorAliquotaLastZ - conectorPDV_inc_detalhe_reducao";
                                    if (Convert.ToDecimal(vetorAliquotaLastZ[x, l].Replace(",", ".")) != 0)
                                    {
                                        returno = "LOOP IF Convert.ToDecimal(vetorAliquotaLastZ[x, l] - conectorPDV_inc_detalhe_reducao";
                                        conectorPDV_inc_detalhe_reducao(alwaysVariables.Store, fiscal_numero_serie, crz.Replace("\0", "").Trim(), nf_ad.Replace("\0", "").Trim(), fiscal_modelo, operador, vetorAliquotaLastZ[1, l].Replace(",", "."), (l + 1).ToString().PadLeft(2, '0') + "T" + vetorAliquotaLastZ[0, l].Replace(",", ""), 13 + l);
                                        conectorPDV_INC_detalhe_reducao_aliquota(alwaysVariables.Store, fiscal_numero_serie, fiscal_last_reducao_dataMovimento.Substring(0, 2) + "/" + fiscal_last_reducao_dataMovimento.Substring(2, 2) + "/" + String.Format("{0:ddMMyyyy}", DateTime.Now).Substring(4, 2) + fiscal_last_reducao_dataMovimento.Substring(4, 2), crz.Replace("\0", "").Trim(), vetorAliquotaLastZ[0, l].Replace(",", "."), "t", "0.00", vetorAliquotaLastZ[1, l].Replace(",", "."), l);
                                        returno = "LOOP IF Convert.ToDecimal(vetorAliquotaLastZ[x, l] END - conectorPDV_inc_detalhe_reducao";
                                    }
                                }
                            }
                        }
                        /* MODO ESTATICO ==> conectorPDV_inc_detalhe_reducao(alwaysVariables.Store, fiscal_numero_serie, crz.Replace("\0","").Trim(), nf_ad.Replace("\0","").Trim(), fiscal_modelo, operador, fiscal_last_reducao_T18, "01T1800");
                        conectorPDV_inc_detalhe_reducao(alwaysVariables.Store, fiscal_numero_serie, crz.Replace("\0","").Trim(), nf_ad.Replace("\0","").Trim(), fiscal_modelo, operador, fiscal_last_reducao_T12, "02T1200");
                        conectorPDV_inc_detalhe_reducao(alwaysVariables.Store, fiscal_numero_serie, crz.Replace("\0","").Trim(), nf_ad.Replace("\0","").Trim(), fiscal_modelo, operador, fiscal_last_reducao_T07, "03T0700");
                        conectorPDV_INC_detalhe_reducao_aliquota(alwaysVariables.Store, fiscal_numero_serie, fiscal_last_reducao_dataMovimento.Substring(0, 2) + "/" + fiscal_last_reducao_dataMovimento.Substring(2, 2) + "/" + String.Format("{0:ddMMyyyy}", DateTime.Now).Substring(4, 2) + fiscal_last_reducao_dataMovimento.Substring(4, 2), crz.Replace("\0","").Trim(), "18", "t", "0.00", fiscal_last_reducao_T18.Replace(",", "."));
                        conectorPDV_INC_detalhe_reducao_aliquota(alwaysVariables.Store, fiscal_numero_serie, fiscal_last_reducao_dataMovimento.Substring(0, 2) + "/" + fiscal_last_reducao_dataMovimento.Substring(2, 2) + "/" + String.Format("{0:ddMMyyyy}", DateTime.Now).Substring(4, 2) + fiscal_last_reducao_dataMovimento.Substring(4, 2), crz.Replace("\0","").Trim(), "12", "t", "0.00", fiscal_last_reducao_T12.Replace(",", "."));
                        conectorPDV_INC_detalhe_reducao_aliquota(alwaysVariables.Store, fiscal_numero_serie, fiscal_last_reducao_dataMovimento.Substring(0, 2) + "/" + fiscal_last_reducao_dataMovimento.Substring(2, 2) + "/" + String.Format("{0:ddMMyyyy}", DateTime.Now).Substring(4, 2) + fiscal_last_reducao_dataMovimento.Substring(4, 2), crz.Replace("\0","").Trim(), "7", "t", "0.00", fiscal_last_reducao_T07.Replace(",", "."));*/
                        returno = "END 01- conectorPDV_inc_detalhe_reducao";
                        conectorPDV_INC_detalhe_reducao_aliquota(alwaysVariables.Store, fiscal_numero_serie, fiscal_last_reducao_dataMovimento.Substring(0, 2) + "/" + fiscal_last_reducao_dataMovimento.Substring(2, 2) + "/" + String.Format("{0:ddMMyyyy}", DateTime.Now).Substring(4, 2) + fiscal_last_reducao_dataMovimento.Substring(4, 2), crz.Replace("\0", "").Trim(), "0", "s", "0.00", fiscal_last_reducao_St_ICMS.Replace(",", "."), 15);
                        conectorPDV_INC_detalhe_reducao_aliquota(alwaysVariables.Store, fiscal_numero_serie, fiscal_last_reducao_dataMovimento.Substring(0, 2) + "/" + fiscal_last_reducao_dataMovimento.Substring(2, 2) + "/" + String.Format("{0:ddMMyyyy}", DateTime.Now).Substring(4, 2) + fiscal_last_reducao_dataMovimento.Substring(4, 2), crz.Replace("\0", "").Trim(), "0", "i", "0.00", fiscal_last_reducao_Isento_ICMS.Replace(",", "."), 16);
                        returno = "END 02- conectorPDV_inc_detalhe_reducao";
                    }
                    catch (Exception erro)
                    {
                        msg = new msgInfo("LOG - REGISTRO DE INFORMAÇÕES PÓS REDUÇÃO Z FALHOU, VERIFIQUE A INFORMAÇÃO.: " + returno + " | " + erro.Message); msg.ShowDialog(); auxConsistencia = 1;
                    }
                }
            }
            if ((movimento.Trim() != "" && movimento != "000000"))
            {
                banco.fechaConexao(); if (title != "") { this.txtTitleCupomFiscalConectorCF.Invoke((MethodInvoker)delegate { txtTitleCupomFiscalConectorCF.Text = title; }); }
                conectorPDV_find_detalhes("R02", fiscal_last_reducao_crz, movimento);
                conectorPDV_find_detalhes("R03", fiscal_last_reducao_crz, movimento);
                arquivo_crz_cro(0);
            }
        }

        public void conectorPDV_inc_cupom_relatorio_meio_pgto(string finaliza, string valor, string valorEstorno, string indicador)
        {
            conectorPDV_find_finalizadora(finaliza);
            functionECF.conectorECF_NumeroCupom(alwaysVariables.ModeloEcf, ref fiscal_Cupom_coo, ref fiscal_MSG, ref fiscal_retorno, alwaysVariables.ECF_Ligada);
            //fiscal_retorno = conectorECF.Bematech_FI_NumeroCupom(ref fiscal_Cupom_coo);
            //conectorECF.Analisa_iRetorno(fiscal_retorno, ref fiscal_MSG);
            functionECF.conectorECF_ContadorCupomFiscal(alwaysVariables.ModeloEcf, ref fiscal_Cupom_ccf, ref fiscal_MSG, ref fiscal_retorno, alwaysVariables.ECF_Ligada);
            //fiscal_retorno = conectorECF.Bematech_FI_ContadorCupomFiscalMFD(ref fiscal_Cupom_ccf);
            //conectorECF.Analisa_iRetorno(fiscal_retorno, ref fiscal_MSG);
            functionECF.conectorECF_ContadorRelatoriosGerenciaisMFD(alwaysVariables.ModeloEcf, ref fiscal_Cupom_gng, ref fiscal_MSG, ref fiscal_retorno, alwaysVariables.ECF_Ligada);
            //fiscal_retorno = conectorECF.Bematech_FI_ContadorRelatoriosGerenciaisMFD(ref fiscal_Cupom_gng);
            //conectorECF.Analisa_iRetorno(fiscal_retorno, ref fiscal_MSG);
            functionECF.conectorECF_NumeroOperacoesNaoFiscais(alwaysVariables.ModeloEcf, ref fiscal_NumCuponsNaoFiscal, ref fiscal_MSG, ref fiscal_retorno, alwaysVariables.ECF_Ligada);
            fiscal_Cupom_gnf = fiscal_NumCuponsNaoFiscal;
            //conectorECF.Analisa_iRetorno(fiscal_retorno, ref fiscal_MSG);
            functionECF.conectorECF_ContadorComprovantesCreditoMFD(alwaysVariables.ModeloEcf, ref fiscal_Cupom_cdc, ref fiscal_MSG, ref fiscal_retorno, alwaysVariables.ECF_Ligada);
            //fiscal_retorno = conectorECF.Bematech_FI_ContadorComprovantesCreditoMFD(ref fiscal_Cupom_cdc);
            //conectorECF.Analisa_iRetorno(fiscal_retorno, ref fiscal_MSG);
            try
            {
                auxConsistencia = 0;
                string op = "";
                if (lbOperadorConectorCF.Text == "" || lbOperadorConectorCF.Text == "0")
                {
                    op = banco_operado;
                }
                else
                {
                    op = lbOperadorConectorCF.Text;
                }

                title = banco.abreConexao();
                if (banco.statusSchema() == 1)
                {
                    this.lbStatusBancoConectorCF.Invoke((MethodInvoker)delegate { lbStatusBancoConectorCF.Text = "ON LINE"; });
                    this.lbStatusBancoConectorCF.Invoke((MethodInvoker)delegate { this.lbStatusBancoConectorCF.ForeColor = System.Drawing.Color.Cyan; });
                }
                else
                {
                    this.lbStatusBancoConectorCF.Invoke((MethodInvoker)delegate { lbStatusBancoConectorCF.Text = "OFF LINE"; });
                    this.lbStatusBancoConectorCF.Invoke((MethodInvoker)delegate { this.lbStatusBancoConectorCF.ForeColor = System.Drawing.Color.Red; });
                }
                banco.startTransaction("conectorPDV_inc_cupom_relatorio_meio_pgto");
                banco.addParametro("inc_numeroCupom", fiscal_Cupom_coo.Replace("\0", "").Trim());
                //banco.addParametro("inc_idloja", Convert.ToDouble(fiscal_store.Replace("\0", "").Trim()) > 0 ? fiscal_store.Replace("\0", "").Trim() : alwaysVariables.Store);
                banco.addParametro("inc_idloja",  alwaysVariables.Store);
                banco.addParametro("inc_operador", op);
                banco.addParametro("inc_terminal", fiscal_numero_caixa.Replace("\0", "").Trim());
                banco.addParametro("inc_emissao", String.Format("{0:yyyyMMdd}", Convert.ToDateTime(fiscal_data_movimento.Substring(2, 2) + "/" + fiscal_data_movimento.Substring(0, 2) + "/" + String.Format("{0:ddMMyyyy}", DateTime.Now).Substring(4, 2) + fiscal_data_printer.Substring(4, 2))));
                banco.addParametro("inc_hora", String.Format("{0:yyyy-MM-dd HH%:mm%:ss}", DateTime.Now));
                banco.addParametro("inc_gnf", fiscal_Cupom_gnf.Replace("\0", "").Trim());
                banco.addParametro("inc_ccf", fiscal_Cupom_ccf.Replace("\0", "").Trim());
                banco.addParametro("inc_valor", valor.Replace(",","."));
                banco.addParametro("inc_valorEstorno", valorEstorno.Replace(",","."));
                banco.addParametro("inc_indicadorEstorno", indicador);
                banco.addParametro("inc_idfinalizadora", finaliza);
                if (valor != null)
                {
                    banco.procedimentoRead();   
                }
            }
            catch (Exception erro)
            { msg = new msgInfo(erro.Message); msg.ShowDialog(); auxConsistencia = 1; }
            finally
            {
                banco.fechaConexao(); if (title != "") { this.txtTitleCupomFiscalConectorCF.Invoke((MethodInvoker)delegate { txtTitleCupomFiscalConectorCF.Text = title; }); }
                if (auxConsistencia == 0)
                {
                    string test = String.Format("{0:yyyyMMdd}", Convert.ToDateTime(fiscal_data_movimento.Substring(2, 2) + "/" + fiscal_data_movimento.Substring(0, 2) + "/" + String.Format("{0:ddMMyyyy}", DateTime.Now).Substring(4, 2) + fiscal_data_printer.Substring(4, 2)));
                    conector_update_lineMD5_r07_nao_fiscal(fiscal_Cupom_coo.Replace("\0", "").Trim(), finaliza, fiscal_numero_caixa.Replace("\0", "").Trim(), conectorPDV_PAFECF_indicador("R07", test, fiscal_store.Replace("\0", "").Trim(), fiscal_numero_caixa.Replace("\0", "").Trim(), fiscal_Cupom_coo.Replace("\0", "").Trim(), "0"), fiscal_Cupom_ccf.Replace("\0", "").Trim());
                }
            }
        }

        /*public void conectorPDV_serie(string caminho, string ms)
        {
            StreamWriter sw = new StreamWriter(caminho, true, Encoding.ASCII);
            fiscal_retorno = conectorECF.Bematech_FI_NumeroSerieMFD(ref fiscal_numero_serie);
            fiscal_retorno = conectorECF.Bematech_FI_GrandeTotalCriptografado(ref fiscal_GT_Crypt);
            auxConsistencia = 0;
            countField = 0;
            countRows = 0;
            try
            {
                title = banco.abreConexao();
                banco.startTransaction("conectorPDV_serie");
                if (fiscal_retorno == 1)
                {
                    banco.procedimentoSet();
                }
                else
                {
                    auxConsistencia = fiscal_retorno;
                }


            }
            catch (Exception erro)
            {
                auxConsistencia = 1;
            }
            finally
            {
                countField = banco.retornaSet().Tables[0].Columns.Count;
                countRows = banco.retornaSet().Tables[0].DefaultView.Count;
                if (countRows > 0)
                {
                    matrizGrd = new string[countRows, countField];
                    for (int i = 0; i < countRows; i++)//Linha
                    {
                        for (int j = 0; j < countField; j++) //Coluna
                        {
                            matrizGrd[i, j] = Convert.ToString(banco.retornaSet().Tables[0].Rows[i][j]);
                        }
                        sw.Write(export.registro_serie(matrizGrd[i, 0], matrizGrd[i, 1], "0" + "\r\n"));
                    }
                }
                banco.fechaConexao(); if (title != "") { this.txtTitleCupomFiscalConectorCF.Invoke((MethodInvoker)delegate { txtTitleCupomFiscalConectorCF.Text = title; }); }
                if (auxConsistencia == 0)
                {
                    sw.Close();
                    mensagemLinha = new List<string>();
                    using (StreamReader texto = new StreamReader(caminho))
                    {
                        string mensagem = "";
                        while ((mensagem = texto.ReadLine()) != null)
                        {
                            if (mensagem.Substring(4, 20) == fiscal_numero_serie)
                            {
                                mensagem = mensagem.Substring(0, 24) + fiscal_GT_Crypt;
                                mensagemLinha.Add(mensagem);
                            }
                            else
                            {
                                mensagemLinha.Add(mensagem);
                            }
                        }

                        texto.Close();

                        if (File.Exists(folderMFDGrand + "\\grandFullPDV" + ".txt"))
                        {
                            File.Delete(folderMFDGrand + "\\grandFullPDV" + ".txt");
                        }
                        StreamWriter final = new StreamWriter(folderMFDGrand + "\\grandFullPDV" + ".txt", true, Encoding.Default);

                        for (int j = 0; j < mensagemLinha.Count; j++)
                        {
                            final.Write(export.registro_serie_unica(mensagemLinha[j] + "\r\n"));
                        }
                        final.Close();

                        cryptografia.encryptFile(alwaysVariables.PAF_total + "\\grandFullPDV" + ".txt", "grandFullPDV", 2);
                        if (ms == "1")
                        {
                            msgInfo msg = new msgInfo(1, "Caro Usuário: Arquivo gerado, caminho: " + folderMFDGrand + "\\grandFullPDV" + ".enc"); msg.ShowDialog();
                        }
                    }
                }
            }
            sw.Close();
        }*/
        public void conectorPDV_inc_convenioMovimento(string client, string store, string empresa, string vencimento, string valor, string prazo, string cupom, string operador, string terminal, string historico, string reserva)
        {
            auxConsistencia = 0;
            try
            {
                title = banco.abreConexao();
                banco.startTransaction("conectorPDV_inc_convenioMovimento");
                banco.addParametro("inc_idcliente", client);
                banco.addParametro("inc_idloja", store);
                banco.addParametro("inc_empresa", empresa);
                banco.addParametro("inc_emissao", String.Format("{0:yyyyMMdd}", DateTime.Now));
                banco.addParametro("inc_vencimento", String.Format("{0:yyyyMMdd}", vencimento));
                banco.addParametro("inc_valor", valor);
                banco.addParametro("inc_parcela", 1.ToString());
                banco.addParametro("inc_prazo", prazo);
                banco.addParametro("inc_cupom", cupom);
                banco.addParametro("inc_idFuncionario", operador);
                banco.addParametro("inc_terminal", terminal);
                banco.addParametro("inc_desconto", "0.000");
                banco.addParametro("inc_juros", "0.000");
                banco.addParametro("inc_observacao", historico);
                banco.addParametro("inc_qttyParcelas", "1");
                //banco.addParametro("inc_flagAlteracao", String.Format("{0:yyyyMMdd}", DateTime.Now));
                banco.addParametro("inc_pedido", reserva);
                banco.procedimentoRead();
                if (banco.retornaRead().Read() == true)
                {
                }
                banco.fechaRead();
            }
            catch (Exception erro)
            {
                msg = new msgInfo(1, "Erro não identificado, entre contato como revendedor! " + erro.Message); msg.ShowDialog();
                auxConsistencia = 1;
            }
            finally
            {
                banco.fechaConexao(); if (title != "") { this.txtTitleCupomFiscalConectorCF.Invoke((MethodInvoker)delegate { txtTitleCupomFiscalConectorCF.Text = title; }); }
                if (auxConsistencia == 0)
                {
                    workObject.modoPdv(true); //Para rotina loop
                    strCupom = "";
                    instrucao.setVetorCupom();
                    strCupom = instrucao.getConvenio(alwaysVariables.UserName, alwaysVariables.Senha, Convert.ToDouble(fiscal_store.Replace("\0", "").Trim()) > 0 ? fiscal_store.Replace("\0", "").Trim() : alwaysVariables.Store, fiscal_Cupom_coo.Replace("\0", "").Trim(), String.Format("{0:yyyyMMdd}", DateTime.Now), alwaysVariables.Terminal);
                    instrucao.carregaInstrucaoMovimentoVenda(instrucao._convenio, strCupom, 0);
                    instrucao.compactScript(instrucao._convenio, "convenio");
                    workObject.modoPdv(false); //Libera rotina loop
                }

            }
        }
        public void conectorPDV_inc_cheque(string bank, string store, string pessoa, string contaCorrente, string serie, string agencia, string prazo, DateTime vencimento, string numeroCheque, string valueCheque, string cupom, string terminal, string operador)
        {
            auxConsistencia = 0;
            string auxChave = "0";
            try
            {
                title = banco.abreConexao();
                banco.startTransaction("conectorPDV_inc_cheque");
                banco.addParametro("inc_banco", bank);
                banco.addParametro("inc_idloja", store);
                banco.addParametro("inc_idcliente", pessoa);
                banco.addParametro("inc_typeRecebimento", "p");
                banco.addParametro("inc_contaCorrente", contaCorrente);
                banco.addParametro("inc_serie", serie);
                banco.addParametro("inc_agencia", agencia);
                banco.addParametro("inc_typeCheque", "m");
                banco.addParametro("inc_prazo", prazo);
                banco.addParametro("inc_emissao", String.Format("{0:yyyyMMdd}", DateTime.Now));
                banco.addParametro("inc_vencimento", String.Format("{0:yyyyMMdd}", vencimento));
                banco.addParametro("inc_cityBanco", "");
                banco.addParametro("inc_numberCheque", numeroCheque);
                banco.addParametro("inc_valueCheque", valueCheque);
                banco.addParametro("inc_historico", "Venda Cupom Fiscal.: " + cupom + " Caixa.: " + terminal);
                banco.addParametro("inc_typeLancamento", "00");
                banco.addParametro("inc_pagamento", "");//informação de baixa ficarão como default
                banco.addParametro("inc_observacao", "");//informação de baixa ficarão como default
                banco.addParametro("inc_idUsuarioLiberacao", "0");//informação de baixa ficarão como default
                banco.addParametro("inc_motivoLiberacao", ""); //informação de baixa ficarão como default
                banco.addParametro("inc_cmc7", "");
                banco.addParametro("inc_idusuario", 1.ToString());
                //banco.addParametro("inc_alteracao", String.Format("{0:yyyyMMdd}", DateTime.Now));ss
                banco.addParametro("inc_reserva", "0");
                banco.addParametro("inc_origem", "m");
                banco.addParametro("inc_doc", fiscal_Cupom.Replace("\0","").Trim());
                banco.addParametro("inc_terminal", terminal);
                banco.addParametro("inc_funcionario", operador);
                banco.procedimentoRead();
                if (banco.retornaRead().Read() == true)
                {
                    //auxChave = banco.retornaRead().GetString(0);
                }
                banco.fechaRead();
            }
            catch (Exception erro)
            {
                msg = new msgInfo(erro.Message); msg.ShowDialog();
                auxConsistencia = 1;
            }
            finally
            {
                banco.fechaConexao(); if (title != "") { this.txtTitleCupomFiscalConectorCF.Invoke((MethodInvoker)delegate { txtTitleCupomFiscalConectorCF.Text = title; }); }
                    if (auxConsistencia == 0)
                    {
                        workObject.modoPdv(true); //Para rotina loop
                        strCupom = "";
                        instrucao.setVetorCupom();
                        strCupom = instrucao.getCheque(alwaysVariables.UserName, alwaysVariables.Senha, Convert.ToDouble(fiscal_store.Replace("\0", "").Trim()) > 0 ? fiscal_store.Replace("\0", "").Trim() : alwaysVariables.Store, fiscal_Cupom_coo.Replace("\0", "").Trim(), String.Format("{0:yyyyMMdd}", DateTime.Now), alwaysVariables.Terminal);
                        instrucao.carregaInstrucaoMovimentoVenda(instrucao._cheque, strCupom, 0);
                        instrucao.compactScript(instrucao._cheque, "cheque");
                        workObject.modoPdv(false); //Libera rotina loop
                    }
                /*else
                {
                    msg = new msgInfo("Este cheque já possui cadastro no sistema, favor conferir com o administrativo"); msg.ShowDialog();
                }*/

            }

        }

        public void conectorPDV_carrega_piscofins(string id)
        {
            string test = "0";
            string auxPreencheCombo = "";

            auxConsistencia = 0;
            countRows = 0;

            try
            {
                title = banco.abreConexao();
                banco.startTransaction("conectorPDV_find_piscofins");
                banco.addParametro("tipo", "9");
                banco.addParametro("find", id);
                banco.procedimentoRead();
                if (banco.retornaRead().Read() == true)
                {
                    auxCstPisRecebimentoProduto = banco.retornaRead().GetString(18);
                    auxCstCofinsRecebimentoProduto = banco.retornaRead().GetString(19);
                    auxCstPisEmissaoProduto = banco.retornaRead().GetString(20);
                    auxCstCofinsEmissaoProduto = banco.retornaRead().GetString(21);
                    //newInativaPisCofins = banco.retornaRead().GetString(0);
                    test = "1";
                }
                banco.fechaRead();
            }
            catch (Exception erro)
            {
                MessageBox.Show(erro.Message, "Caro Usuário"); auxConsistencia = 1;
            }
            finally
            {
                banco.fechaConexao(); if (title != "") { this.txtTitleCupomFiscalConectorCF.Invoke((MethodInvoker)delegate { txtTitleCupomFiscalConectorCF.Text = title; }); }

                if (auxConsistencia == 0)
                {
                    if (test == "1")
                    {
                        if (auxCstPisEmissaoProduto != "")
                        {
                            auxConsistencia = 0;
                            try
                            {
                                title = banco.abreConexao();                                
                                banco.startTransaction("conectorPDV_find_complementoFiscal");
                                banco.addParametro("tipo", "6");
                                banco.addParametro("find", auxCstPisEmissaoProduto);
                                banco.procedimentoRead();
                                if (banco.retornaRead().Read() == true)
                                {
                                    //listaPis[0].PIS_PISAliq_CST = banco.retornaRead().GetString(1);
                                }
                                banco.fechaRead();
                            }
                            catch (Exception erro)
                            {
                                MessageBox.Show(erro.Message, "Caro Usuário"); auxConsistencia = 1;
                            }
                            finally
                            {
                                banco.fechaConexao(); if (title != "") { this.txtTitleCupomFiscalConectorCF.Invoke((MethodInvoker)delegate { txtTitleCupomFiscalConectorCF.Text = title; }); }
                                if (auxConsistencia == 0)
                                {
                                    auxPreencheCombo = "";
                                }

                            }
                        }
                        if (auxCstCofinsEmissaoProduto != "")
                        {
                            try
                            {
                                auxConsistencia = 0;
                                title = banco.abreConexao();
                                banco.startTransaction("conectorPDV_find_complementoFiscal");
                                banco.addParametro("tipo", "9");
                                banco.addParametro("find", auxCstCofinsEmissaoProduto);
                                banco.procedimentoRead();
                                if (banco.retornaRead().Read() == true)
                                {
                                    //listaCofins[0].COFINS_COFINSAliq_CST = banco.retornaRead().GetString(1);
                                }
                                banco.fechaRead();
                            }
                            catch (Exception erro)
                            {
                                MessageBox.Show(erro.Message, "Caro Usuário"); auxConsistencia = 1;
                            }
                            finally
                            {

                                banco.fechaConexao(); if (title != "") { this.txtTitleCupomFiscalConectorCF.Invoke((MethodInvoker)delegate { txtTitleCupomFiscalConectorCF.Text = title; }); }
                                if (auxConsistencia == 0)
                                {
                                    auxPreencheCombo = "";
                                }
                            }
                        }
                    }
                }

            }
        }

        public void conectorPDV_inc_cupom_relatorio(string denominacao, string dav)
        {
            string op = "";
            if (lbOperadorConectorCF.Text == "" || lbOperadorConectorCF.Text == "0")
            {
                op = banco_operado;
            }
            else
            {
                op = lbOperadorConectorCF.Text;
            }
            functionECF.conectorECF_DataMovimento(alwaysVariables.ModeloEcf, ref fiscal_data_movimento, ref fiscal_MSG, ref fiscal_retorno, alwaysVariables.ECF_Ligada);
            functionECF.conectorECF_NumeroCupom(alwaysVariables.ModeloEcf, ref fiscal_Cupom_coo, ref fiscal_MSG, ref fiscal_retorno, alwaysVariables.ECF_Ligada);
            //fiscal_retorno = conectorECF.Bematech_FI_NumeroCupom(ref fiscal_Cupom_coo);
            functionECF.conectorECF_ContadorCupomFiscal(alwaysVariables.ModeloEcf, ref fiscal_Cupom_ccf, ref fiscal_MSG, ref fiscal_retorno, alwaysVariables.ECF_Ligada);
            //fiscal_retorno = conectorECF.Bematech_FI_ContadorCupomFiscalMFD(ref fiscal_Cupom_ccf);
            //conectorECF.Analisa_iRetorno(fiscal_retorno, ref fiscal_MSG);
            functionECF.conectorECF_ContadorRelatoriosGerenciaisMFD(alwaysVariables.ModeloEcf, ref fiscal_Cupom_gng, ref fiscal_MSG, ref fiscal_retorno, alwaysVariables.ECF_Ligada);
            //fiscal_retorno = conectorECF.Bematech_FI_ContadorRelatoriosGerenciaisMFD(ref fiscal_Cupom_gng);
            functionECF.conectorECF_NumeroOperacoesNaoFiscais(alwaysVariables.ModeloEcf, ref fiscal_NumCuponsNaoFiscal, ref fiscal_MSG, ref fiscal_retorno, alwaysVariables.ECF_Ligada);
            //fiscal_retorno = conectorECF.Bematech_FI_NumeroOperacoesNaoFiscais(ref fiscal_Cupom_gnf);
            fiscal_Cupom_gnf = fiscal_NumCuponsNaoFiscal;
            //fiscal_retorno = conectorECF.Bematech_FI_ContadorComprovantesCreditoMFD(ref fiscal_Cupom_cdc);
            functionECF.conectorECF_ContadorComprovantesCreditoMFD(alwaysVariables.ModeloEcf, ref fiscal_Cupom_cdc, ref fiscal_MSG, ref fiscal_retorno, alwaysVariables.ECF_Ligada);

            try
            {
                auxConsistencia = 0;
                if (rmais.statusSchema() == 1)
                {
                    return;
                }
                title = rmais.abreConexao();
                if (rmais.statusSchema() == 1)
                {
                    this.lbStatusBancoConectorCF.Invoke((MethodInvoker)delegate { lbStatusBancoConectorCF.Text = "ON LINE"; });
                    this.lbStatusBancoConectorCF.Invoke((MethodInvoker)delegate { this.lbStatusBancoConectorCF.ForeColor = System.Drawing.Color.Cyan; });
                }
                else
                {
                    this.lbStatusBancoConectorCF.Invoke((MethodInvoker)delegate { lbStatusBancoConectorCF.Text = "OFF LINE"; });
                    this.lbStatusBancoConectorCF.Invoke((MethodInvoker)delegate { this.lbStatusBancoConectorCF.ForeColor = System.Drawing.Color.Red; });
                }
                rmais.startTransaction("conectorPDV_inc_cupom_relatorio");
                rmais.addParametro("inc_numeroCupom", fiscal_Cupom_coo.Replace("\0", "").Trim());
                //rmais.addParametro("inc_idloja", Convert.ToDouble(fiscal_store.Replace("\0", "").Trim()) > 0 ? fiscal_store.Replace("\0", "").Trim() : alwaysVariables.Store);
                rmais.addParametro("inc_idloja",  alwaysVariables.Store);
                rmais.addParametro("inc_operador", op == "" ? lbOperadorConectorCF.Text == "" ? banco_operado : lbOperadorConectorCF.Text: op); //lbOperadorConectorCF.Text == "" ? Convert.ToDouble(lbOperadorConectorCF.Text == "" ? "0" : lbOperadorConectorCF.Text) == 0 ? banco_operado : lbOperadorConectorCF.Text : lbOperadorConectorCF.Text);
                rmais.addParametro("inc_terminal", fiscal_numero_caixa.Replace("\0", "").Trim());
                rmais.addParametro("inc_denominacao", denominacao);

                if (fiscal_data_movimento != "" && fiscal_data_movimento != "000000")
                {
                    rmais.addParametro("inc_emissao", String.Format("{0:yyyyMMdd}", Convert.ToDateTime(fiscal_data_movimento.Substring(0, 2) + "/" + fiscal_data_movimento.Substring(2, 2) + "/" + String.Format("{0:ddMMyyyy}", DateTime.Now).Substring(4, 2) + fiscal_data_printer.Substring(4, 2))));
                }

                else
                {
                    rmais.addParametro("inc_emissao", String.Format("{0:yyyyMMdd}", DateTime.Now));
                }
                rmais.addParametro("inc_hora", String.Format("{0:HH%:mm%:ss}", DateTime.Now));
                rmais.addParametro("inc_gnf", fiscal_Cupom_gnf.Replace("\0", "").Trim());
                rmais.addParametro("inc_cdc", fiscal_Cupom_cdc.Replace("\0", "").Trim());
                rmais.addParametro("inc_grg", fiscal_Cupom_gng.Replace("\0", "").Trim());
                rmais.addParametro("inc_dav", dav);
                if (banco_operado != "" && Convert.ToDouble(banco_operado) > 0)
                {
                    rmais.procedimentoRead();
                }
            }
            catch (Exception erro)
            { msg = new msgInfo(1, erro.Message); msg.ShowDialog(); auxConsistencia = 1; }
            finally
            {
                rmais.fechaConexao(); if (title != "") { this.txtTitleCupomFiscalConectorCF.Invoke((MethodInvoker)delegate { txtTitleCupomFiscalConectorCF.Text = title; }); }
                if (auxConsistencia == 0)
                {
                    if (fiscal_data_movimento.Trim() != "" && Convert.ToDouble(fiscal_data_movimento.Trim() == "" ? "0" : fiscal_data_movimento.Trim()) > 0)
                    {
                        string test = String.Format("{0:yyyyMMdd}", Convert.ToDateTime(fiscal_data_movimento.Substring(2, 2) + "/" + fiscal_data_movimento.Substring(0, 2) + "/" + String.Format("{0:ddMMyyyy}", DateTime.Now).Substring(4, 2) + fiscal_data_printer.Substring(4, 2)));
                        conector_update_lineMD5_r06_nao_fiscal(fiscal_Cupom_coo.Replace("\0","").Trim(), fiscal_numero_caixa.Replace("\0","").Trim(), conectorPDV_PAFECF_indicador("R06", test, fiscal_store.Replace("\0","").Trim(), fiscal_numero_caixa.Replace("\0","").Trim(), fiscal_Cupom_coo.Replace("\0","").Trim(), "0"));
                    }
                }
            }
        }

        public void conectorPDV_inc_fechamentoCaixa()
        {
            try
            {
                functionECF.conectorECF_GrandeTotal(alwaysVariables.ModeloEcf, ref fiscal_GT, ref fiscal_MSG, ref fiscal_retorno, alwaysVariables.ECF_Ligada);
                //fiscal_retorno = conectorECF.Bematech_FI_GrandeTotal(ref fiscal_GT);
                //conectorECF.Analisa_iRetorno(fiscal_retorno, ref fiscal_MSG);
                functionECF.conectorECF_NumeroReducoes(alwaysVariables.ModeloEcf, ref fiscal_NumReducoes, ref fiscal_MSG, ref fiscal_retorno, alwaysVariables.ECF_Ligada);
                //fiscal_retorno = conectorECF.Bematech_FI_NumeroReducoes(ref fiscal_NumReducoes);
                //conectorECF.Analisa_iRetorno(fiscal_retorno, ref fiscal_MSG);
                functionECF.conectorECF_NumeroCuponsCancelados(alwaysVariables.ModeloEcf, ref fiscal_NumCuponsCanc, ref fiscal_MSG, ref fiscal_retorno, alwaysVariables.ECF_Ligada);
                //fiscal_retorno = conectorECF.Bematech_FI_NumeroCuponsCancelados(ref fiscal_NumCuponsCanc);
                //conectorECF.Analisa_iRetorno(fiscal_retorno, ref fiscal_MSG);
                functionECF.conectorECF_NumeroCupom(alwaysVariables.ModeloEcf, ref fiscal_Cupom, ref fiscal_MSG, ref fiscal_retorno, alwaysVariables.ECF_Ligada);
                //fiscal_retorno = conectorECF.Bematech_FI_NumeroCupom(ref fiscal_Cupom);
                //conectorECF.Analisa_iRetorno(fiscal_retorno, ref fiscal_MSG);

                auxConsistencia = 0;
                title = banco.abreConexao();
                banco.startTransaction("conectorPDV_inc_fechamentoCaixa");
                banco.addParametro("inc_dataMovimento", String.Format("{0:yyyyMMdd}", Convert.ToDateTime(fiscal_data_movimento.Substring(0, 2) + "/" + fiscal_data_movimento.Substring(2, 2) + "/" + String.Format("{0:ddMMyyyy}", DateTime.Now).Substring(4, 2) + fiscal_data_printer.Substring(4, 2))));
                banco.addParametro("inc_loja", alwaysVariables.Store);
                banco.addParametro("inc_terminal", fiscal_numero_caixa.Replace("\0","").Trim());
                banco.addParametro("inc_funcionario", banco_operado == "0" ? input_operador : banco_operado);
                banco.addParametro("inc_grandeTotalBegin", (Convert.ToDecimal(fiscal_GT.Replace("\0", "").Trim()) / 100).ToString().Replace(",", "."));
                banco.addParametro("inc_contadorInicial", fiscal_Cupom.Replace("\0", "").Trim());
                banco.addParametro("inc_contadorReducao", fiscal_NumReducoes.Replace("\0", "").Trim());
                banco.addParametro("inc_contadorCancelados", fiscal_NumCuponsCanc.Replace("\0", "").Trim());
                banco.procedimentoRead();
                banco.fechaConexao(); if (title != "") { this.txtTitleCupomFiscalConectorCF.Invoke((MethodInvoker)delegate { txtTitleCupomFiscalConectorCF.Text = title; }); }

            }
            catch (Exception erro)
            { msg = new msgInfo(erro.Message); msg.ShowDialog(); auxConsistencia = 1; }
            finally
            {
                banco.fechaConexao();
                if (auxConsistencia == 0)
                {
                    functionECF.conectorECF_GrandeTotal(alwaysVariables.ModeloEcf, ref fiscal_GT, ref fiscal_MSG, ref fiscal_retorno, alwaysVariables.ECF_Ligada);
                    //fiscal_retorno = conectorECF.Bematech_FI_GrandeTotal(ref fiscal_GT);
                    conector_verifica_venda_bruta(ref fiscal_banco_venda);

                    workObject.modoPdv(true); //Para rotina loop
                    strCupom = "";
                    instrucao.setVetorCupom();
                    strCupom = instrucao.getFechamentoCaixa(alwaysVariables.UserName, alwaysVariables.Senha, Convert.ToDouble(fiscal_store.Replace("\0", "").Trim()) > 0 ? fiscal_store.Replace("\0", "").Trim() : alwaysVariables.Store, banco_operado, String.Format("{0:yyyyMMdd}", Convert.ToDateTime(alwaysVariables.XDataTime(lbDataMovimentoConectorCF.Text).ToString())), fiscal_numero_caixa.Replace("\0", "").Trim(), fiscal_Cupom_coo, 1.ToString());
                    instrucao.carregaInstrucaoMovimentoVenda(instrucao._fechamentoCaixa, strCupom, 0);
                    instrucao.compactScript(instrucao._fechamentoCaixa, "fechamentoCaixa");
                    workObject.modoPdv(false); //Libera rotina loo

                }
                if (alwaysVariables.ModoOperacao == 1)
                {
                    txtEntradaDadosConectorCF.Select();
                }
                else
                {
                    txtEntradaDadosNF.Select();
                }
            }
        }

        public void conectorPDV_inc_estoque_geracao(string fiscal_serie)
        {
            try
            {
                auxConsistencia = 0;
                title = banco.abreConexao();
                if (banco.statusSchema() == 1)
                {
                    this.lbStatusBancoConectorCF.Invoke((MethodInvoker)delegate { lbStatusBancoConectorCF.Text = "ON LINE"; });
                    this.lbStatusBancoConectorCF.Invoke((MethodInvoker)delegate { this.lbStatusBancoConectorCF.ForeColor = System.Drawing.Color.Cyan; });
                }
                else
                {
                    this.lbStatusBancoConectorCF.Invoke((MethodInvoker)delegate { lbStatusBancoConectorCF.Text = "OFF LINE"; });
                    this.lbStatusBancoConectorCF.Invoke((MethodInvoker)delegate { this.lbStatusBancoConectorCF.ForeColor = System.Drawing.Color.Red; });
                }
                banco.startTransaction("conectorPDV_inc_estoque_geracao");
                banco.addParametro("inc_numeroFabricacao", fiscal_serie);
                banco.addParametro("inc_mf_adicional", fiscal_letramf_adicional.Replace("\0","").Trim());
                banco.addParametro("inc_tipo", fiscal_tipo_ecf.Replace("\0", "").Trim()); //lbOperadorConectorCF.Text == "" ? Convert.ToDouble(lbOperadorConectorCF.Text == "" ? "0" : lbOperadorConectorCF.Text) == 0 ? banco_operado : lbOperadorConectorCF.Text : lbOperadorConectorCF.Text);
                banco.addParametro("inc_marca_ecf", fiscal_marca.Replace("\0", "").Trim());
                banco.addParametro("inc_modelo_ecf", fiscal_modelo.Replace("\0", "").Trim());
                if (fiscal_data_movimento != "" && fiscal_data_movimento != "000000")
                {
                    banco.addParametro("inc_emissao", String.Format("{0:yyyyMMdd}", Convert.ToDateTime(fiscal_data_movimento.Substring(2, 2) + "/" + fiscal_data_movimento.Substring(0, 2) + "/" + String.Format("{0:ddMMyyyy}", DateTime.Now).Substring(4, 2) + fiscal_data_printer.Substring(4, 2))));
                }
                else
                {
                    banco.addParametro("inc_emissao", String.Format("{0:yyyyMMdd}", DateTime.Now));
                }
                banco.addParametro("inc_hora", String.Format("{0:yyyy-MM-dd HH%:mm%:ss}", DateTime.Now));
                banco.procedimentoRead();
            }
            catch (Exception erro)
            { msg = new msgInfo(erro.Message); msg.ShowDialog(); auxConsistencia = 1; }
            finally
            {
                banco.fechaConexao();
                if (auxConsistencia == 0)
                {
                    //string test = String.Format("{0:yyyyMMdd}", Convert.ToDateTime(fiscal_data_movimento.Substring(2, 2) + "/" + fiscal_data_movimento.Substring(0, 2) + "/" + String.Format("{0:ddMMyyyy}", DateTime.Now).Substring(4, 2) + fiscal_data_printer.Substring(4, 2)));
                    conector_update_gera_estoque(fiscal_numero_serie.Replace("\0","").Trim(), conectorPDV_PAFECF_indicadorE("E3", fiscal_numero_serie));
                }
            }
        }

        public void conectorPDV_inc_cupom_detalhes(string nr_cupom, string cx, string prod, string barra, string descr, string qtty, string venda, string discount, string full, string vend, string tipoCodigo, string unidade, string valorDesconto, string metodo, string reserva, string tributos, string custo, string acrescimo, string valorAcrescimo, string statusProduto, string codProduto, string trunca, string ippt)
        {
            seq = "#";

            functionECF.conectorECF_ContadorCupomFiscal(alwaysVariables.ModeloEcf, ref fiscal_Cupom_ccf, ref fiscal_MSG, ref fiscal_retorno, alwaysVariables.ECF_Ligada);
            //fiscal_retorno = conectorECF.Bematech_FI_ContadorCupomFiscalMFD(ref fiscal_Cupom_ccf);
            //conectorECF.Analisa_iRetorno(fiscal_retorno, ref fiscal_MSG);


            try
            {
                auxConsistencia = 0;
                title = banco.abreConexao();
                if (banco.statusSchema() == 1)
                {
                    this.lbStatusBancoConectorCF.Invoke((MethodInvoker)delegate { lbStatusBancoConectorCF.Text = "ON LINE"; });
                    this.lbStatusBancoConectorCF.Invoke((MethodInvoker)delegate { this.lbStatusBancoConectorCF.ForeColor = System.Drawing.Color.Cyan; });
                }
                else
                {
                    this.lbStatusBancoConectorCF.Invoke((MethodInvoker)delegate { lbStatusBancoConectorCF.Text = "OFF LINE"; });
                    this.lbStatusBancoConectorCF.Invoke((MethodInvoker)delegate { this.lbStatusBancoConectorCF.ForeColor = System.Drawing.Color.Red; });
                }
                banco.startTransaction("conectorPDV_inc_cupom_detalhes");
                banco.addParametro("inc_numeroCupom", nr_cupom.Replace("\0", "").Trim());
                banco.addParametro("inc_loja", alwaysVariables.Store);
                banco.addParametro("inc_terminal", cx.Replace("\0", "").Trim());
                banco.addParametro("inc_dataVenda", String.Format("{0:yyyyMMdd}", Convert.ToDateTime(fiscal_data_movimento.Substring(0, 2) + "/" + fiscal_data_movimento.Substring(2, 2) + "/" + String.Format("{0:ddMMyyyy}", DateTime.Now).Substring(4, 2) + fiscal_data_printer.Substring(4, 2))));
                banco.addParametro("inc_produto", prod);
                banco.addParametro("inc_barra", barra);
                banco.addParametro("inc_descricaoProduto", descr);
                banco.addParametro("inc_quantidade", qtty.Replace(",", "."));
                banco.addParametro("inc_priceVenda", venda.Replace(",", "."));
                banco.addParametro("inc_desconto", discount.Replace(",", "."));
                banco.addParametro("inc_total", full.Replace(",", "."));
                banco.addParametro("inc_vendedor", vend);
                banco.addParametro("inc_usuarioCancelamento", null);
                banco.addParametro("inc_motivoCancelamento", null);
                banco.addParametro("inc_trunca", trunca);
                banco.addParametro("inc_icms", (((Math.Round(Decimal.Parse(produto_valor_unitario.Replace(",", ".")), 2) * Math.Round(Decimal.Parse(produto_qtty.Replace(",", ".")), 2)) * Convert.ToDecimal(produto_aliquota) / 100) / 100).ToString().Replace(",", "."));
                banco.addParametro("inc_tipoCodigo", produto_pesavel);
                banco.addParametro("inc_unidade", unidade);
                banco.addParametro("inc_valorDesconto", valorDesconto.Replace(",", "."));
                banco.addParametro("inc_priceCusto", custo.Replace(",", "."));
                banco.addParametro("inc_acrescimo", acrescimo.Replace(",", "."));
                banco.addParametro("inc_tributacao", tributos);
                banco.addParametro("inc_reserva", reserva);
                banco.addParametro("inc_metodo", metodo);
                banco.addParametro("inc_statusProduto", statusProduto);
                banco.addParametro("inc_codigoProduto", codProduto);
                banco.addParametro("inc_valorAcrescimo", valorAcrescimo.Replace(",", "."));
                banco.addParametro("inc_ippt", ippt);
                banco.addParametro("inc_ccf", fiscal_Cupom_ccf.Replace("\0", "").Trim());
                //banco.addParametro("inc_cripto", fiscal_md5_line);
                if (fiscal_retorno == 1)
                {
                    banco.procedimentoRead();
                    if (banco.retornaRead().Read() == true)
                    {
                        seq = Convert.ToString(banco.retornaRead().GetString(0));
                        validaDesc = true;
                    }
                }
                else
                {
                    txtVisorMsgConectorCF.Text = fiscal_MSG;
                    auxConsistencia = 1;
                }
                this.backgroundConectorCupom.CancelAsync();
            }
            catch (Exception erro)
            {
                msg = new msgInfo(1,erro.Message); msg.ShowDialog(); auxConsistencia = 1; ataque = 1;
            }
            finally
            {
                banco.fechaConexao(); if (title != "") { this.txtTitleCupomFiscalConectorCF.Invoke((MethodInvoker)delegate { txtTitleCupomFiscalConectorCF.Text = title; }); }
                if (auxConsistencia == 0)
                {
                    string test = String.Format("{0:yyyyMMdd}", Convert.ToDateTime(fiscal_data_movimento.Substring(2, 2) + "/" + fiscal_data_movimento.Substring(0, 2) + "/" + String.Format("{0:ddMMyyyy}", DateTime.Now).Substring(4, 2) + fiscal_data_printer.Substring(4, 2)));
                  if (fiscal_data_movimento.Trim() != "" && Convert.ToDouble(fiscal_data_movimento.Trim() == "" ? "0" : fiscal_data_movimento.Trim()) > 0)
                    {
                        arranque = 1;
                        
                        if (backgroundConectorCupom.IsBusy != true)
                        {
                            // Start the asynchronous operation.
                            backgroundConectorCupom.RunWorkerAsync();
                        }
                        //workObject.modoPdv(true); //Para rotina loop
                        //strCupom = "";
                        //instrucao.setVetorCupom();
                        //strCupom = instrucao.getCupomDetalhes(alwaysVariables.UserName, alwaysVariables.Senha, Convert.ToDouble(fiscal_store.Replace("\0", "").Trim()) > 0 ? fiscal_store.Replace("\0", "").Trim() : alwaysVariables.Store, nr_cupom.Replace("\0", "").Trim(), String.Format("{0:yyyyMMdd}", DateTime.Now), cx.Replace("\0", "").Trim(), seq);
                        //instrucao.carregaInstrucaoMovimentoVenda(instrucao._detalhes, strCupom, 1);
                        //conector_update_lineMD5_r05(fiscal_Cupom.Replace("\0","").Trim(), prod, sequenciaItem, fiscal_numero_caixa.Replace("\0","").Trim(), conectorPDV_PAFECF_indicador("R05", test, fiscal_store.Replace("\0","").Trim(), fiscal_numero_caixa.Replace("\0","").Trim(), fiscal_Cupom.Replace("\0","").Trim(), sequenciaItem));
                        //instrucao.compactScript(instrucao._detalhes, "detalhes");

                        conector_find_subFull("1");

                        //workObject.modoPdv(false); //Libera rotina loop
                    }
                }
                /*if (alwaysVariables.ModoOperacao == 1)
                {
                    txtEntradaDadosConectorCF.Select();
                }
                else
                {
                    txtEntradaDadosNF.Select();
                }*/
                resetVariable();//New
                workObject.modoPdv(true);
            }
        }

        public void conectorPDV_inc_cupom_cabecalho(string nr_cupom, string cx, string pepleo, string operador, string cpf_cgc, string convenio, string conveniado, string cardConector, string formRecebimento, DateTime dataVencimento, string encargos, int diasAtraso, string contrato, int parcela, string totalParcela, string geraEntrega, string lagradouro_entrega, string datetimefinalvenda, string notaFiscal, string serie, string retorno, string pedido, string seq)
        {
            functionECF.conectorECF_ContadorCupomFiscal(alwaysVariables.ModeloEcf, ref fiscal_Cupom_ccf, ref fiscal_MSG, ref fiscal_retorno, alwaysVariables.ECF_Ligada);
            //fiscal_retorno = conectorECF.Bematech_FI_ContadorCupomFiscalMFD(ref fiscal_Cupom_ccf);
            //conectorECF.Analisa_iRetorno(fiscal_retorno, ref fiscal_MSG);
            if (fiscal_data_printer.Trim() == "")
            {
                functionECF.conectorECF_DataHoraReducao(alwaysVariables.ModeloEcf, ref fiscal_data_printer, ref fiscal_hora_printer, ref fiscal_MSG, ref fiscal_retorno, alwaysVariables.ECF_Ligada);
            }
            //fiscal_retorno = conectorECF.Bematech_FI_DataHoraImpressora(ref fiscal_data_printer, ref fiscal_hora_printer);
            string test = String.Format("{0:yyyyMMdd}", Convert.ToDateTime(fiscal_data_movimento.Substring(2, 2) + "/" + fiscal_data_movimento.Substring(0, 2) + "/" + String.Format("{0:ddMMyyyy}", DateTime.Now).Substring(4, 2) + fiscal_data_printer.Substring(4, 2)));
            try
            {

                auxConsistencia = 0;
                if (fiscal_retorno == 1)
                {
                    title = banco.abreConexao();
                    if (banco.statusSchema() == 1)
                    {
                        this.lbStatusBancoConectorCF.Invoke((MethodInvoker)delegate { lbStatusBancoConectorCF.Text = "ON LINE"; });
                        this.lbStatusBancoConectorCF.Invoke((MethodInvoker)delegate { this.lbStatusBancoConectorCF.ForeColor = System.Drawing.Color.Cyan; });
                    }
                    else
                    {
                        this.lbStatusBancoConectorCF.Invoke((MethodInvoker)delegate { lbStatusBancoConectorCF.Text = "OFF LINE"; });
                        this.lbStatusBancoConectorCF.Invoke((MethodInvoker)delegate { this.lbStatusBancoConectorCF.ForeColor = System.Drawing.Color.Red; });
                    }
                    banco.startTransaction("conectorPDV_inc_cupom_cabecalho");
                    banco.addParametro("inc_numeroCupom", nr_cupom.Replace("\0", "").Trim());
                    //banco.addParametro("inc_loja", Convert.ToDouble(fiscal_store.Replace("\0", "").Trim()) > 0 ? fiscal_store.Replace("\0", "").Trim() : alwaysVariables.Store);
                    banco.addParametro("inc_loja",alwaysVariables.Store);
                    banco.addParametro("inc_terminal", cx.Replace("\0", "").Trim());
                    banco.addParametro("inc_dataVenda", test);
                    //banco.addParametro("inc_dataVenda", String.Format("{0:yyyy-MM-dd HH%:mm%:ss}", DateTime.Now));
                    banco.addParametro("inc_cliente", pepleo);
                                banco.addParametro("inc_hora", fiscal_hora_printer);
                    //banco.addParametro("inc_hora", String.Format("{0:yyyy-MM-dd HH%:mm%:ss}", DateTime.Now));
                    banco.addParametro("inc_acrescimo", "0.00");
                    banco.addParametro("inc_desconto", "0.00");
                    banco.addParametro("inc_cancelados", "0.00");
                    banco.addParametro("inc_totalLiquido", "0.00");
                    banco.addParametro("inc_totalBruto", "0.00");
                    banco.addParametro("inc_operador", operador == "0" ? banco_operado == "0" ? input_operador : banco_operado : operador);
                    banco.addParametro("inc_situacao", "1");//2 - cancelado 1 - aberto 0 - fechado
                    banco.addParametro("inc_documentoCPF_CNPJ", cpf_cgc);
                    banco.addParametro("inc_usuario_cancelamento", null);
                    banco.addParametro("inc_motivo_cancelamento", null);
                    banco.addParametro("inc_totalCancelado", "0.00");
                    banco.addParametro("inc_convenio", convenio);
                    banco.addParametro("inc_conveniado", conveniado);
                    banco.addParametro("inc_numero_cartao", cardConector);
                    banco.addParametro("inc_forma_recebimento", formRecebimento);
                    banco.addParametro("inc_dataVencimento", String.Format("{0:yyyyMMdd}", dataVencimento));
                    banco.addParametro("inc_encargos", encargos);
                    banco.addParametro("inc_diasAtraso", diasAtraso.ToString());
                    banco.addParametro("inc_contrato", contrato);
                    banco.addParametro("inc_parcela", parcela.ToString());
                    banco.addParametro("inc_totalParcela", totalParcela == null ? "0" : totalParcela.Replace(",","."));
                    banco.addParametro("inc_geraEntrega", geraEntrega);
                    banco.addParametro("inc_lagradouro_entrega", lagradouro_entrega);
                    banco.addParametro("inc_datetimefinalvenda", datetimefinalvenda);
                    banco.addParametro("inc_notaFiscal", notaFiscal);
                    banco.addParametro("inc_serie", serie);
                    banco.addParametro("inc_retorno", retorno);
                    banco.addParametro("inc_totalItens", "0.00");
                    banco.addParametro("inc_pedido", pedido);
                    banco.addParametro("inc_ccf", fiscal_Cupom_ccf.Replace("\0", "").Trim());
                    banco.procedimentoRead();
                }
                else
                {
                    txtVisorMsgConectorCF.Text = fiscal_MSG;
                    auxConsistencia = 1;
                }

            }
            catch (Exception erro)
            { 
                msg = new msgInfo(erro.Message); msg.ShowDialog(); auxConsistencia = 1;
                if (((fiscal_flag == 33 || fiscal_flag == 1 || fiscal_flag == 32) && (call_pdv == 0 && Convert.ToDouble(fiscal_banco_cro) > Convert.ToDouble(fiscal_reducao_cro)))
                                    || ((fiscal_flag == 33 || fiscal_flag == 1 || fiscal_flag == 32) && (call_pdv == 0 && Convert.ToDouble(fiscal_banco_crz) > Convert.ToDouble(fiscal_reducao_crz))))
                {
                    call_pdv = 1;
                    msg = new msgInfo("CARO USUÁRIO: CUPOM INCONSISTENTE, CABEÇALHO NÃO GRAVADO, O SISTEMA DETECTOU UMA OPERAÇÃO INLEGAL, COM ISSO SERÁ ENCERRADO...!"); msg.ShowDialog(); 
                    conector_acao_cancelaCupom();
                    this.Dispose();
                }
                

            }
            finally
            {
                banco.fechaConexao(); if (title != "") { this.txtTitleCupomFiscalConectorCF.Invoke((MethodInvoker)delegate { txtTitleCupomFiscalConectorCF.Text = title; }); }
                if (auxConsistencia == 0)
                {
                    arranqueCabeca = 1;
                    backgroundConectorCabecalho.RunWorkerAsync();
                    /*if (backgroundConectorCabecalho.IsBusy != true)
                    {
                        // Start the asynchronous operation.
                        backgroundConectorCabecalho.RunWorkerAsync();
                    } */
                    /*
                   workObject.modoPdv(true); //Para rotina loop
                   fiscal_flag = 1;
                   strCupom = "";
                   instrucao.setVetorCupom();
                   strCupom = instrucao.getCupomCabecalho(alwaysVariables.UserName, alwaysVariables.Senha, Convert.ToDouble(fiscal_store.Replace("\0", "").Trim()) > 0 ? fiscal_store.Replace("\0", "").Trim() : alwaysVariables.Store, nr_cupom.Replace("\0", "").Trim(), String.Format("{0:yyyyMMdd}", DateTime.Now), operador, cx.Replace("\0", "").Trim(), seq);
                   instrucao.carregaInstrucaoMovimentoVenda(instrucao._cabecalho,strCupom,0);
                   instrucao.compactScript(instrucao._cabecalho,"cabecalho");
                   conector_update_lineMD5_r04(fiscal_Cupom, fiscal_numero_caixa, conectorPDV_PAFECF_indicador("R04", test, fiscal_store.Replace("\0", "").Trim(), fiscal_numero_caixa.Replace("\0", "").Trim(), fiscal_Cupom.Replace("\0", "").Trim(), "0"));
                   workObject.modoPdv(false); //Libera rotina loop*/
                   
                }
                else if (fiscal_flag == 32 && auxConsistencia == 1)
                {
                    functionECF.conectorECF_CancelaCupom(alwaysVariables.ModeloEcf, ref fiscal_MSG, ref fiscal_retorno, alwaysVariables.ECF_Ligada);
                    //fiscal_retorno = conectorECF.Bematech_FI_CancelaCupom();
                    //conectorECF.Analisa_iRetorno(fiscal_retorno, ref fiscal_MSG);
                    if (fiscal_retorno != 1)
                    { txtVisorMsgConectorCF.Text = fiscal_MSG; }
                    else
                    {
                        if (call_pdv != 1)
                        {
                            pedido = "0";
                            resetLabel();
                            resetVariable();
                            ltbDetalhesConectorCF.Clear();
                            ltbDetalhesConectorCF.Text = " ITEM  CÓDIGO  DESCRIÇÃO QTD  UN VL UNIT(R$) ST VL ITEM(R$)" + "\r\n" +
                                                         "===========================================================";
                            txtVisorMsgConectorCF.Text = "--- ERRO FATAL CUPOM CANCELADO ---";
                        }
                        if (produto_barra != "")
                        {
                            conectorPDV_exe_cupom(fiscal_Cupom.Replace("\0",""), fiscal_numero_caixa, produto_barra);
                        }
                    }
                }
                if (alwaysVariables.ModoOperacao == 1)
                {
                    txtEntradaDadosConectorCF.Select();
                }
                else
                {
                    txtEntradaDadosNF.Select();
                }
            }
            workObject.modoPdv(true);
        }
        public void conectorPDV_inc_cupom_movimento(string nr_cupom, string cx, string formPgto, string valor, string convenio, string pepleoConvenio, string ag, string cc, string nr_cheque, string dataDep, string cnpj_cpf, string tipoCartao, string bank, string autorizador, string troco)
        {
            auxformPgto = formPgto;
            auxValor = valor;
            auxTroco = troco;
            conectorPDV_find_finalizadora(formPgto);
            functionECF.conectorECF_ContadorCupomFiscal(alwaysVariables.ModeloEcf, ref fiscal_Cupom_ccf, ref fiscal_MSG, ref fiscal_retorno, alwaysVariables.ECF_Ligada);
            //fiscal_retorno = conectorECF.Bematech_FI_ContadorCupomFiscalMFD(ref fiscal_Cupom_ccf);
            //conectorECF.Analisa_iRetorno(fiscal_retorno, ref fiscal_MSG);
            string seq = "#";
            try
            {
                auxConsistencia = 0;
                title = banco.abreConexao();
                if (banco.statusSchema() == 1)
                {
                    this.lbStatusBancoConectorCF.Invoke((MethodInvoker)delegate { lbStatusBancoConectorCF.Text = "ON LINE"; });
                    this.lbStatusBancoConectorCF.Invoke((MethodInvoker)delegate { this.lbStatusBancoConectorCF.ForeColor = System.Drawing.Color.Cyan; });
                }
                else
                {
                    this.lbStatusBancoConectorCF.Invoke((MethodInvoker)delegate { lbStatusBancoConectorCF.Text = "OFF LINE"; });
                    this.lbStatusBancoConectorCF.Invoke((MethodInvoker)delegate { this.lbStatusBancoConectorCF.ForeColor = System.Drawing.Color.Red; });
                }
                banco.startTransaction("conectorPDV_inc_cupom_movimento");
                banco.addParametro("inc_numeroCupom", nr_cupom.Replace("\0", "").Trim());
                banco.addParametro("inc_loja", alwaysVariables.Store);
                banco.addParametro("inc_terminal", cx.Replace("\0", "").Trim());
                banco.addParametro("inc_dataVenda", String.Format("{0:yyyy-MM-dd HH%:mm%:ss}", DateTime.Now));
                banco.addParametro("inc_finalizadora", formPgto);
                banco.addParametro("inc_valor", valor);
                banco.addParametro("inc_troco", troco);
                banco.addParametro("inc_juros", 0.ToString());//rever
                banco.addParametro("inc_autentica", 1.ToString());//rever
                banco.addParametro("inc_convenio", convenio);
                banco.addParametro("inc_conveniado", pepleoConvenio);
                banco.addParametro("inc_chequeDeposito", dataDep == null ? null : dataDep.Substring(4, 4) + "-" + dataDep.Substring(2, 2) + "-" + dataDep.Substring(0, 2));
                banco.addParametro("inc_chequeNumero", nr_cheque);
                banco.addParametro("inc_chequeConta", cc);
                banco.addParametro("inc_chequeAgencia", ag);
                banco.addParametro("inc_documentoCPF_CNPJ", cnpj_cpf);
                banco.addParametro("inc_numeroCartao", null);//rever
                banco.addParametro("inc_parcelamentoCartao", null);//rever
                banco.addParametro("inc_tipoCartao", tipoCartao);
                banco.addParametro("inc_usuario", autorizador);
                banco.addParametro("inc_banco", bank);
                banco.addParametro("inc_ccf", fiscal_Cupom_ccf);
                banco.addParametro("inc_descricaoFinalizadora", auxDescricaoFinalizadora);
                string doc = "1";
                if (modoPedido == 3)
                {
                    doc = "3";
                }
                banco.addParametro("inc_tipoDoc",doc);
                banco.procedimentoRead();
                if (banco.retornaRead().Read() == true)
                {
                    seq = Convert.ToString(banco.retornaRead().GetString(0));
                }
            }
            catch (Exception erro)
            { msg = new msgInfo(erro.Message); msg.ShowDialog(); auxConsistencia = 1; }
            finally
            {
                banco.fechaConexao(); if (title != "") { this.txtTitleCupomFiscalConectorCF.Invoke((MethodInvoker)delegate { txtTitleCupomFiscalConectorCF.Text = title; }); }
                if (auxConsistencia == 0)
                {
                    /*arranqueMov = 1;
                    // Start the asynchronous operation.
                    //backgroundConectorCupomMovimento.RunWorkerAsync();
                    if (backgroundConectorCupomMovimento.IsBusy != true)
                    {
                        // Start the asynchronous operation.
                        backgroundConectorCupomMovimento.RunWorkerAsync();
                    }

                    arranqueMov = 1;*/
                }
                if (alwaysVariables.ModoOperacao == 1)
                {
                    txtEntradaDadosConectorCF.Select();
                }
                else
                {
                    txtEntradaDadosNF.Select();
                }
            }
        }
        public void conectorPDV_finalizadora()//Atualiza finalizadora

        {string[,] recarga; //Matriz Bidimencionada

        try
        {
            countField = 0;
            countRows = 0;
            auxConsistencia = 0;
            title = banco.abreConexao();
            banco.singleTransaction("select * from tabela_resumo");
            banco.procedimentoSet();
        }
        catch (Exception erro)
        {
            auxConsistencia = 1;
        }
        finally
        {
            countField = banco.retornaSet().Tables[0].Columns.Count;
            countRows = banco.retornaSet().Tables[0].DefaultView.Count;
            recarga = new string[countRows, countField];
            if (auxConsistencia == 0)
            {
                if (countRows > 0)
                {
                    for (int i = 0; i < countRows; i++)//Linha
                    {
                        for (int j = 0; j < countField; j++)
                        {
                            recarga[i, j] = Convert.ToString(banco.retornaSet().Tables[0].Rows[i][j]);
                        }
                    }
                }
            }
            banco.fechaConexao(); if (title != "") { this.txtTitleCupomFiscalConectorCF.Invoke((MethodInvoker)delegate { txtTitleCupomFiscalConectorCF.Text = title; }); }

            for (int i = 0; i < recarga.Length; i++)//Linha
            {	//20150520
                conector_update_lineMD5_A2(alwaysVariables.Store, recarga[i, 2], recarga[i, 1], key.GetMd5Sum(export.registro_tipo_a2("A2", recarga[i, 1], recarga[i, 3], recarga[i, 2], recarga[i, 4])));
            }
        }
        }
        public int statusMovimento()
        {
            int retorno = 0;
            try
            {
                title = banco.abreConexao();
                banco.singleTransaction("select count(*) from `conectorpdv`.`movimentocaixa` where dataMovimento=?Var and situacao=1");
                banco.addParametro("?Var", String.Format("{0:ddMMyyyy}", DateTime.Now).Substring(4, 2) + fiscal_data_movimento.Substring(4, 2) + fiscal_data_movimento.Substring(2, 2) + fiscal_data_movimento.Substring(0, 2));
                //banco.addParametro("?op", op);
                banco.procedimentoRead();
                if (banco.retornaRead().Read() == true)
                {
                    retorno = Convert.ToInt32(banco.retornaRead().GetString(0));
                }
                else retorno = 0;
            }
            catch (Exception erro)
            {
                retorno = 0;
            }
            finally
            {
                banco.fechaConexao(); if (title != "") { this.txtTitleCupomFiscalConectorCF.Invoke((MethodInvoker)delegate { txtTitleCupomFiscalConectorCF.Text = title; }); }
            }
            return retorno;
        }
        public void identificacaoECF(string indice)
        {


            //functionECF.conectorECF_AbreRelatorioMeiosPagamento(alwaysVariables.ModeloEcf, indice, ref fiscal_MSG, ref fiscal_retorno, alwaysVariables.ECF_Ligada);
            functionECF.conectorECF_AbreRelatorioGerencial(alwaysVariables.ModeloEcf, indice, ref fiscal_MSG, ref fiscal_retorno, alwaysVariables.ECF_Ligada);
            //functionECF.conectorECF_RelatorioGerencial(alwaysVariables.ModeloEcf, "                IDENT. PAF-ECF                   \n", ref fiscal_MSG, ref fiscal_retorno, alwaysVariables.ECF_Ligada);
            //functionECF.conectorECF_RelatorioGerencial(alwaysVariables.ModeloEcf, "          IDENTIFICACAO DO PAF - ECF             \n", ref fiscal_MSG, ref fiscal_retorno, alwaysVariables.ECF_Ligada);
            functionECF.conectorECF_RelatorioGerencial(alwaysVariables.ModeloEcf, "\n", ref fiscal_MSG, ref fiscal_retorno, alwaysVariables.ECF_Ligada);
            functionECF.conectorECF_RelatorioGerencial(alwaysVariables.ModeloEcf, "       FAT AUTOMACAO E CONSULTORIA LTDA          \n", ref fiscal_MSG, ref fiscal_retorno, alwaysVariables.ECF_Ligada);
            functionECF.conectorECF_RelatorioGerencial(alwaysVariables.ModeloEcf, "      RUA: TIA NICA, 37 - VILA SAO PEDRO         \n", ref fiscal_MSG, ref fiscal_retorno, alwaysVariables.ECF_Ligada);
            functionECF.conectorECF_RelatorioGerencial(alwaysVariables.ModeloEcf, "CNPJ     :" + alwaysVariables.PAF_CNPJ + "\n", ref fiscal_MSG, ref fiscal_retorno, alwaysVariables.ECF_Ligada);
            functionECF.conectorECF_RelatorioGerencial(alwaysVariables.ModeloEcf, "IE       :" + alwaysVariables.PAF_IE + "\n", ref fiscal_MSG, ref fiscal_retorno, alwaysVariables.ECF_Ligada);
            functionECF.conectorECF_RelatorioGerencial(alwaysVariables.ModeloEcf, "IM       :" + alwaysVariables.PAF_IM + "\n", ref fiscal_MSG, ref fiscal_retorno, alwaysVariables.ECF_Ligada);
            functionECF.conectorECF_RelatorioGerencial(alwaysVariables.ModeloEcf, "FONE     :" + alwaysVariables.PAF_TELEFONE + "\n", ref fiscal_MSG, ref fiscal_retorno, alwaysVariables.ECF_Ligada);
            functionECF.conectorECF_RelatorioGerencial(alwaysVariables.ModeloEcf, "CONTATO  : " + alwaysVariables.PAF_Contato + "\n", ref fiscal_MSG, ref fiscal_retorno, alwaysVariables.ECF_Ligada);
            //MG.001 functionECF.conectorECF_RelatorioGerencial(alwaysVariables.ModeloEcf, "N. LAUDO : " + alwaysVariables.PAF_laudo + "\n", ref fiscal_MSG, ref fiscal_retorno, alwaysVariables.ECF_Ligada);
            functionECF.conectorECF_RelatorioGerencial(alwaysVariables.ModeloEcf, "NOME EXE : CONECTORPDV001.EXE \n", ref fiscal_MSG, ref fiscal_retorno, alwaysVariables.ECF_Ligada);
            if (alwaysVariables.flagHomologacao == "0")
            {
                functionECF.conectorECF_RelatorioGerencial(alwaysVariables.ModeloEcf, "MD-5: " + (alwaysVariables.flagHomologacao == "1" ? alwaysVariables.MD5_Main : alwaysVariables.MD5VALIDO.Trim()) + "\n", ref fiscal_MSG, ref fiscal_retorno, alwaysVariables.ECF_Ligada);
            }
            else { functionECF.conectorECF_RelatorioGerencial(alwaysVariables.ModeloEcf, "MD-5:" + alwaysVariables.MD5_Main_conectorEXE + "\n", ref fiscal_MSG, ref fiscal_retorno, alwaysVariables.ECF_Ligada); }
            //functionECF.conectorECF_RelatorioGerencial(alwaysVariables.ModeloEcf, "LISTA MD-5: " + (alwaysVariables.flagHomologacao == "1" ? alwaysVariables.MD5_Main : alwaysVariables.MD5VALIDO.Trim()), ref fiscal_MSG, ref fiscal_retorno, alwaysVariables.ECF_Ligada);  
            functionECF.conectorECF_RelatorioGerencial(alwaysVariables.ModeloEcf, "LISTA MD-5: " + alwaysVariables.MD5_Main, ref fiscal_MSG, ref fiscal_retorno, alwaysVariables.ECF_Ligada);  
            functionECF.conectorECF_RelatorioGerencial(alwaysVariables.ModeloEcf, "\n", ref fiscal_MSG, ref fiscal_retorno, alwaysVariables.ECF_Ligada);
            functionECF.conectorECF_RelatorioGerencial(alwaysVariables.ModeloEcf, "PRINCIPAIS ARQUIVOS" + "\n", ref fiscal_MSG, ref fiscal_retorno, alwaysVariables.ECF_Ligada);
            functionECF.conectorECF_RelatorioGerencial(alwaysVariables.ModeloEcf, "CONECTORPDV001.EXE" + "\n", ref fiscal_MSG, ref fiscal_retorno, alwaysVariables.ECF_Ligada);
            if (alwaysVariables.flagHomologacao == "0")
            {
                functionECF.conectorECF_RelatorioGerencial(alwaysVariables.ModeloEcf, "MD-5:" + (alwaysVariables.flagHomologacao == "1" ? alwaysVariables.MD5_Main : alwaysVariables.MD5VALIDO.Trim()), ref fiscal_MSG, ref fiscal_retorno, alwaysVariables.ECF_Ligada);
            }
            else { functionECF.conectorECF_RelatorioGerencial(alwaysVariables.ModeloEcf, "MD-5:" + alwaysVariables.MD5_Main_conectorEXE + "\n", ref fiscal_MSG, ref fiscal_retorno, alwaysVariables.ECF_Ligada); }
            //functionECF.conectorECF_RelatorioGerencial(alwaysVariables.ModeloEcf, "MD-5:" + alwaysVariables.MD5_Main_conectorEXE + "\n", ref fiscal_MSG, ref fiscal_retorno, alwaysVariables.ECF_Ligada);
            functionECF.conectorECF_RelatorioGerencial(alwaysVariables.ModeloEcf, "BEMATECH32.DLL" + "\n", ref fiscal_MSG, ref fiscal_retorno, alwaysVariables.ECF_Ligada);
            functionECF.conectorECF_RelatorioGerencial(alwaysVariables.ModeloEcf, "MD-5:" + alwaysVariables.MD5_Main_32 + "\n", ref fiscal_MSG, ref fiscal_retorno, alwaysVariables.ECF_Ligada);

            if (alwaysVariables.MD5_Main_64.Trim() != "")
            {
                functionECF.conectorECF_RelatorioGerencial(alwaysVariables.ModeloEcf, "BEMATECH64.DLL" + "\n", ref fiscal_MSG, ref fiscal_retorno, alwaysVariables.ECF_Ligada);
                functionECF.conectorECF_RelatorioGerencial(alwaysVariables.ModeloEcf, "MD-5:" + alwaysVariables.MD5_Main_64 + "\n", ref fiscal_MSG, ref fiscal_retorno, alwaysVariables.ECF_Ligada);
            }
            functionECF.conectorECF_RelatorioGerencial(alwaysVariables.ModeloEcf, "CONECTORECF.DLL" + "\n", ref fiscal_MSG, ref fiscal_retorno, alwaysVariables.ECF_Ligada);
            functionECF.conectorECF_RelatorioGerencial(alwaysVariables.ModeloEcf, "MD-5:" + alwaysVariables.MD5_Main_conectorECF + "\n", ref fiscal_MSG, ref fiscal_retorno, alwaysVariables.ECF_Ligada);
            functionECF.conectorECF_RelatorioGerencial(alwaysVariables.ModeloEcf, "CONECTORCRYPT.DLL" + "\n", ref fiscal_MSG, ref fiscal_retorno, alwaysVariables.ECF_Ligada);
            functionECF.conectorECF_RelatorioGerencial(alwaysVariables.ModeloEcf, "MD-5:" + alwaysVariables.MD5_Main_conectorCrypt + "\n", ref fiscal_MSG, ref fiscal_retorno, alwaysVariables.ECF_Ligada);
            functionECF.conectorECF_RelatorioGerencial(alwaysVariables.ModeloEcf, "CONECTORINSTRUCAO.DLL" + "\n", ref fiscal_MSG, ref fiscal_retorno, alwaysVariables.ECF_Ligada);
            functionECF.conectorECF_RelatorioGerencial(alwaysVariables.ModeloEcf, "MD-5:" + alwaysVariables.MD5_Main_conectorInstrucao + "\n", ref fiscal_MSG, ref fiscal_retorno, alwaysVariables.ECF_Ligada);
            functionECF.conectorECF_RelatorioGerencial(alwaysVariables.ModeloEcf, "CONECTORTEF.DLL" + "\n", ref fiscal_MSG, ref fiscal_retorno, alwaysVariables.ECF_Ligada);
            functionECF.conectorECF_RelatorioGerencial(alwaysVariables.ModeloEcf, "MD-5:" + alwaysVariables.MD5_Main_conectorTef + "\n", ref fiscal_MSG, ref fiscal_retorno, alwaysVariables.ECF_Ligada);
            functionECF.conectorECF_RelatorioGerencial(alwaysVariables.ModeloEcf, "CONECTORSINTEGRA.DLL" + "\n", ref fiscal_MSG, ref fiscal_retorno, alwaysVariables.ECF_Ligada);
            functionECF.conectorECF_RelatorioGerencial(alwaysVariables.ModeloEcf, "MD-5:" + alwaysVariables.MD5_Main_conectorSintegra + "\n", ref fiscal_MSG, ref fiscal_retorno, alwaysVariables.ECF_Ligada);
            functionECF.conectorECF_RelatorioGerencial(alwaysVariables.ModeloEcf, "CONECTORSETTING.DLL" + "\n", ref fiscal_MSG, ref fiscal_retorno, alwaysVariables.ECF_Ligada);
            functionECF.conectorECF_RelatorioGerencial(alwaysVariables.ModeloEcf, "MD-5:" + alwaysVariables.MD5_Main_conectorSetting + "\n", ref fiscal_MSG, ref fiscal_retorno, alwaysVariables.ECF_Ligada);
            functionECF.conectorECF_RelatorioGerencial(alwaysVariables.ModeloEcf, "CONECTORBANK.DLL" + "\n", ref fiscal_MSG, ref fiscal_retorno, alwaysVariables.ECF_Ligada);
            functionECF.conectorECF_RelatorioGerencial(alwaysVariables.ModeloEcf, "MD-5:" + alwaysVariables.MD5_Main_conectorBank + "\n", ref fiscal_MSG, ref fiscal_retorno, alwaysVariables.ECF_Ligada);
            functionECF.conectorECF_RelatorioGerencial(alwaysVariables.ModeloEcf, "CONECTORAMBIENT.DLL" + "\n", ref fiscal_MSG, ref fiscal_retorno, alwaysVariables.ECF_Ligada);
            functionECF.conectorECF_RelatorioGerencial(alwaysVariables.ModeloEcf, "MD-5:" + alwaysVariables.MD5_Main_conectorAmbient + "\n", ref fiscal_MSG, ref fiscal_retorno, alwaysVariables.ECF_Ligada);
            functionECF.conectorECF_RelatorioGerencial(alwaysVariables.ModeloEcf, "\n", ref fiscal_MSG, ref fiscal_retorno, alwaysVariables.ECF_Ligada);
            functionECF.conectorECF_RelatorioGerencial(alwaysVariables.ModeloEcf, "BOLETOFRS.DLL" + "\n", ref fiscal_MSG, ref fiscal_retorno, alwaysVariables.ECF_Ligada);
            functionECF.conectorECF_RelatorioGerencial(alwaysVariables.ModeloEcf, "MD-5:" + alwaysVariables.MD5_Main_boletoFrs + "\n", ref fiscal_MSG, ref fiscal_retorno, alwaysVariables.ECF_Ligada);
            functionECF.conectorECF_RelatorioGerencial(alwaysVariables.ModeloEcf, "INTERFACEEPSON.DLL" + "\n", ref fiscal_MSG, ref fiscal_retorno, alwaysVariables.ECF_Ligada);
            functionECF.conectorECF_RelatorioGerencial(alwaysVariables.ModeloEcf, "MD-5:" + alwaysVariables.MD5_Main_INTERFACEEPSON + "\n", ref fiscal_MSG, ref fiscal_retorno, alwaysVariables.ECF_Ligada);
            functionECF.conectorECF_RelatorioGerencial(alwaysVariables.ModeloEcf, "ELGIN.DLL" + "\n", ref fiscal_MSG, ref fiscal_retorno, alwaysVariables.ECF_Ligada);
            functionECF.conectorECF_RelatorioGerencial(alwaysVariables.ModeloEcf, "MD-5:" + alwaysVariables.MD5_Main_ELGIN + "\n", ref fiscal_MSG, ref fiscal_retorno, alwaysVariables.ECF_Ligada);
            functionECF.conectorECF_RelatorioGerencial(alwaysVariables.ModeloEcf, "CONVECF.DLL" + "\n", ref fiscal_MSG, ref fiscal_retorno, alwaysVariables.ECF_Ligada);
            functionECF.conectorECF_RelatorioGerencial(alwaysVariables.ModeloEcf, "MD-5:" + alwaysVariables.MD5_Main_SWEDA + "\n", ref fiscal_MSG, ref fiscal_retorno, alwaysVariables.ECF_Ligada);
            functionECF.conectorECF_RelatorioGerencial(alwaysVariables.ModeloEcf, "DARUMAFRAMEWORK.DLL" + "\n", ref fiscal_MSG, ref fiscal_retorno, alwaysVariables.ECF_Ligada);
            functionECF.conectorECF_RelatorioGerencial(alwaysVariables.ModeloEcf, "MD-5:" + alwaysVariables.MD5_Main_DARUMA + "\n", ref fiscal_MSG, ref fiscal_retorno, alwaysVariables.ECF_Ligada);
            functionECF.conectorECF_RelatorioGerencial(alwaysVariables.ModeloEcf, "BEMAMFD.DLL" + "\n", ref fiscal_MSG, ref fiscal_retorno, alwaysVariables.ECF_Ligada);
            functionECF.conectorECF_RelatorioGerencial(alwaysVariables.ModeloEcf, "MD-5:" + alwaysVariables.MD5_Main_mfd + "\n", ref fiscal_MSG, ref fiscal_retorno, alwaysVariables.ECF_Ligada);
            functionECF.conectorECF_RelatorioGerencial(alwaysVariables.ModeloEcf, "BEMAMFD3.DLL" + "\n", ref fiscal_MSG, ref fiscal_retorno, alwaysVariables.ECF_Ligada);
            functionECF.conectorECF_RelatorioGerencial(alwaysVariables.ModeloEcf, "MD-5:" + alwaysVariables.MD5_Main_mfd3 + "\n", ref fiscal_MSG, ref fiscal_retorno, alwaysVariables.ECF_Ligada);
            /*functionECF.conectorECF_RelatorioGerencial(alwaysVariables.ModeloEcf, "SOPHUS.DLL", ref fiscal_MSG, ref fiscal_retorno, alwaysVariables.ECF_Ligada);
            functionECF.conectorECF_RelatorioGerencial(alwaysVariables.ModeloEcf, "MD-5:" + alwaysVariables.MD5_Main_sophus, ref fiscal_MSG, ref fiscal_retorno, alwaysVariables.ECF_Ligada);*/
            functionECF.conectorECF_RelatorioGerencial(alwaysVariables.ModeloEcf, "VERSÃO DO PAF-ECF: 02.01" + "\n", ref fiscal_MSG, ref fiscal_retorno, alwaysVariables.ECF_Ligada);
            functionECF.conectorECF_RelatorioGerencial(alwaysVariables.ModeloEcf, "RELAÇÃO DE ECF AUTORIZADOS:" + "\n", ref fiscal_MSG, ref fiscal_retorno, alwaysVariables.ECF_Ligada);
            functionECF.conectorECF_RelatorioGerencial(alwaysVariables.ModeloEcf, alwaysVariables.Serie, ref fiscal_MSG, ref fiscal_retorno, alwaysVariables.ECF_Ligada);
            functionECF.conectorECF_FechaRelatorioGerencial(alwaysVariables.ModeloEcf, ref fiscal_MSG, ref fiscal_retorno, alwaysVariables.ECF_Ligada);
            functionECF.conectorECF_Analisa_RetornoImpressora(alwaysVariables.ModeloEcf, ref ACK, ref ST1, ref ST2, ref ST3, ref fiscal_MSG);

            
        }
        public void imprimirNfce(string nota, string serie, string emissao)
        {
            if (alwaysVariables.ECF_Ligada != -6)
            {
                functionECF.conectorECF_AbreRelatorioGerencial(alwaysVariables.ModeloEcf, "07", ref fiscal_MSG, ref fiscal_retorno, alwaysVariables.ECF_Ligada);
                functionECF.conectorECF_RelatorioGerencial(alwaysVariables.ModeloEcf, "        DANFE NFC-e Documento Auxiliar           ", ref fiscal_MSG, ref fiscal_retorno, alwaysVariables.ECF_Ligada);
                functionECF.conectorECF_RelatorioGerencial(alwaysVariables.ModeloEcf, "     da Nota Fiscal do Consumidor Eletrônica     ", ref fiscal_MSG, ref fiscal_retorno, alwaysVariables.ECF_Ligada);
                functionECF.conectorECF_RelatorioGerencial(alwaysVariables.ModeloEcf, "  Não permite aproveitamento de crédito de ICMS  ", ref fiscal_MSG, ref fiscal_retorno, alwaysVariables.ECF_Ligada);
                functionECF.conectorECF_RelatorioGerencial(alwaysVariables.ModeloEcf, "_______________________________________________", ref fiscal_MSG, ref fiscal_retorno, alwaysVariables.ECF_Ligada);
                functionECF.conectorECF_RelatorioGerencial(alwaysVariables.ModeloEcf, "Item. Cod. Descrição  Qtde. UN. Vl.Un. Vl.Total", ref fiscal_MSG, ref fiscal_retorno, alwaysVariables.ECF_Ligada);
                functionECF.conectorECF_RelatorioGerencial(alwaysVariables.ModeloEcf, "_______________________________________________", ref fiscal_MSG, ref fiscal_retorno, alwaysVariables.ECF_Ligada);
                auxConsistencia = 0;
                if (alwaysVariables.EstiloNfce == "1")
                {
                    try
                    {
                        banco.startTransaction("conectorPDV_item_nfce");
                        banco.addParametro("find", auxChaveNota);
                        banco.procedimentoSet();

                    }
                    catch (Exception erro) { msgInfo msg = new msgInfo("Caro Cliente - " + erro.Message); msg.ShowDialog(); auxConsistencia = 1; }
                    finally
                    {
                        if (auxConsistencia == 0)
                        {
                            countField = banco.retornaSet().Tables[0].Columns.Count;
                            countRows = banco.retornaSet().Tables[0].DefaultView.Count;
                            if (countRows > 0)
                            {
                                for (int i = 0; i < countRows; i++)//Linha
                                {
                                    functionECF.conectorECF_RelatorioGerencial(alwaysVariables.ModeloEcf, banco.retornaSet().Tables[0].Rows[i][0] + "  " + banco.retornaSet().Tables[0].Rows[i][1] + "  " + banco.retornaSet().Tables[0].Rows[i][2] + "  " + banco.retornaSet().Tables[0].Rows[i][3] + "  " + banco.retornaSet().Tables[0].Rows[i][4] + "  " + banco.retornaSet().Tables[0].Rows[i][5] + "  " + banco.retornaSet().Tables[0].Rows[i][6], ref fiscal_MSG, ref fiscal_retorno, alwaysVariables.ECF_Ligada);
                                }
                            }
                        }
                        banco.fechaConexao(); if (title != "") { this.txtTitleCupomFiscalConectorCF.Invoke((MethodInvoker)delegate { txtTitleCupomFiscalConectorCF.Text = title; }); }
                    }
                    functionECF.conectorECF_RelatorioGerencial(alwaysVariables.ModeloEcf, "_______________________________________________", ref fiscal_MSG, ref fiscal_retorno, alwaysVariables.ECF_Ligada);
                }
                functionECF.conectorECF_RelatorioGerencial(alwaysVariables.ModeloEcf, "Qtd. Total de Itens: " + auxQttyItensNFce.Replace(".", ","), ref fiscal_MSG, ref fiscal_retorno, alwaysVariables.ECF_Ligada);
                functionECF.conectorECF_RelatorioGerencial(alwaysVariables.ModeloEcf, "Valor Total R$     : " + auxTotalNFce.Replace(".", ","), ref fiscal_MSG, ref fiscal_retorno, alwaysVariables.ECF_Ligada);
                functionECF.conectorECF_RelatorioGerencial(alwaysVariables.ModeloEcf, "Forma Pagamento    : " + auxDescFinalizadoraNFce, ref fiscal_MSG, ref fiscal_retorno, alwaysVariables.ECF_Ligada);
                functionECF.conectorECF_RelatorioGerencial(alwaysVariables.ModeloEcf, "_______________________________________________", ref fiscal_MSG, ref fiscal_retorno, alwaysVariables.ECF_Ligada);
                functionECF.conectorECF_RelatorioGerencial(alwaysVariables.ModeloEcf, "Informação dos tributos totais incidentes(LEI FEDERAL 12.741/2012): R$: " + auxTotalTributosNFce.Replace(".", ","), ref fiscal_MSG, ref fiscal_retorno, alwaysVariables.ECF_Ligada);
                if (alwaysVariables.flagHomologacao == "1") { functionECF.conectorECF_RelatorioGerencial(alwaysVariables.ModeloEcf, "MD-5:" + alwaysVariables.MD5_Main + "\n", ref fiscal_MSG, ref fiscal_retorno, alwaysVariables.ECF_Ligada); } else { functionECF.conectorECF_RelatorioGerencial(alwaysVariables.ModeloEcf, "MD-5:" + alwaysVariables.MD5VALIDO + "\n", ref fiscal_MSG, ref fiscal_retorno, alwaysVariables.ECF_Ligada); }
                if (flagFormaFinalizacao == "D")
                {
                    functionECF.conectorECF_RelatorioGerencial(alwaysVariables.ModeloEcf, "DAV:" + flagDav.PadLeft(10, '0') + "\n", ref fiscal_MSG, ref fiscal_retorno, alwaysVariables.ECF_Ligada);
                }
                functionECF.conectorECF_RelatorioGerencial(alwaysVariables.ModeloEcf, "Obrigado, Volte sempre !!! R$: ", ref fiscal_MSG, ref fiscal_retorno, alwaysVariables.ECF_Ligada);
                functionECF.conectorECF_RelatorioGerencial(alwaysVariables.ModeloEcf, "_______________________________________________", ref fiscal_MSG, ref fiscal_retorno, alwaysVariables.ECF_Ligada);
                functionECF.conectorECF_RelatorioGerencial(alwaysVariables.ModeloEcf, "Emitida em ambiente de homologação", ref fiscal_MSG, ref fiscal_retorno, alwaysVariables.ECF_Ligada);
                functionECF.conectorECF_RelatorioGerencial(alwaysVariables.ModeloEcf, "Documento sem valor fiscal.", ref fiscal_MSG, ref fiscal_retorno, alwaysVariables.ECF_Ligada);
                functionECF.conectorECF_RelatorioGerencial(alwaysVariables.ModeloEcf, "Nr.: " + nota + " Série: " + serie + " Emissao: " + String.Format("{0:dd/MM/yyyy}", Convert.ToDateTime(emissao)), ref fiscal_MSG, ref fiscal_retorno, alwaysVariables.ECF_Ligada);
                functionECF.conectorECF_RelatorioGerencial(alwaysVariables.ModeloEcf, "Via Consumidor ", ref fiscal_MSG, ref fiscal_retorno, alwaysVariables.ECF_Ligada);
                functionECF.conectorECF_RelatorioGerencial(alwaysVariables.ModeloEcf, "Consulte pela chave de acesso em  ", ref fiscal_MSG, ref fiscal_retorno, alwaysVariables.ECF_Ligada);
                if (alwaysVariables.Entidade == "13" && alwaysVariables.ModoNFce == "2")//Unica base de Teste Homologacao
                {
                    functionECF.conectorECF_RelatorioGerencial(alwaysVariables.ModeloEcf, "http://homologacao.sefaz.am.gov.br/nfce/consultanfce", ref fiscal_MSG, ref fiscal_retorno, alwaysVariables.ECF_Ligada);
                }
                else
                {
                    functionECF.conectorECF_RelatorioGerencial(alwaysVariables.ModeloEcf, "http://www.nfe.fazenda.gov.br/portal/consulta.aspx?tipoConsulta=completa&tipoConteudo=XbSeqxE8pl8=", ref fiscal_MSG, ref fiscal_retorno, alwaysVariables.ECF_Ligada);
                }
                functionECF.conectorECF_RelatorioGerencial(alwaysVariables.ModeloEcf, "CHAVE DE ACESSO ", ref fiscal_MSG, ref fiscal_retorno, alwaysVariables.ECF_Ligada);
                functionECF.conectorECF_RelatorioGerencial(alwaysVariables.ModeloEcf, alwaysVariables.chaveNfce + "\n", ref fiscal_MSG, ref fiscal_retorno, alwaysVariables.ECF_Ligada);
                functionECF.conectorECF_RelatorioGerencial(alwaysVariables.ModeloEcf, "______________________________________________", ref fiscal_MSG, ref fiscal_retorno, alwaysVariables.ECF_Ligada);
                functionECF.conectorECF_RelatorioGerencial(alwaysVariables.ModeloEcf, "CPF/CNPJ.: " + auxCPFCNPJ + " - " + auxNomeRazao == null ? "CONSUMIDOR NÃO IDENTIFICADO \n" : "CPF/CNPJ.: " + auxCPFCNPJ + " - NOME/RAZAO: " + auxNomeRazao + "\n", ref fiscal_MSG, ref fiscal_retorno, alwaysVariables.ECF_Ligada);
                functionECF.conectorECF_RelatorioGerencial(alwaysVariables.ModeloEcf, "______________________________________________", ref fiscal_MSG, ref fiscal_retorno, alwaysVariables.ECF_Ligada);
                functionECF.conectorECF_RelatorioGerencial(alwaysVariables.ModeloEcf, auxLogradouro == null ? "LOGRADOURO NÃO IDENTIFICADO \n" : auxLogradouro, ref fiscal_MSG, ref fiscal_retorno, alwaysVariables.ECF_Ligada);
                functionECF.conectorECF_RelatorioGerencial(alwaysVariables.ModeloEcf, "______________________________________________", ref fiscal_MSG, ref fiscal_retorno, alwaysVariables.ECF_Ligada);
                functionECF.conectorECF_RelatorioGerencial(alwaysVariables.ModeloEcf, "Consulta via leitor de QR Code \n", ref fiscal_MSG, ref fiscal_retorno, alwaysVariables.ECF_Ligada);
                if (alwaysVariables.ModoNFce == "1")
                {
                    switch (alwaysVariables.Entidade)
                    {
                        case "12"://Acre
                            functionECF.conectorECF_RelatorioGerencial(alwaysVariables.ModeloEcf, "http://www.sefaznet.ac.gov.br/nfe?" + alwaysVariables.Link_Code_QR, ref fiscal_MSG, ref fiscal_retorno, alwaysVariables.ECF_Ligada);
                            alwaysVariables.Link_Danfe = "http://www.sefaznet.ac.gov.br/nfe?" + alwaysVariables.Link_Code_QR;
                            break;
                        case "13": //Amazonas
                            functionECF.conectorECF_RelatorioGerencial(alwaysVariables.ModeloEcf, "http://sistemas.sefaz.am.gov.br/nfceweb/consultarNFCe.jsp?" + alwaysVariables.Link_Code_QR, ref fiscal_MSG, ref fiscal_retorno, alwaysVariables.ECF_Ligada);
                            alwaysVariables.Link_Danfe = "http://sistemas.sefaz.am.gov.br/nfceweb/consultarNFCe.jsp?" + alwaysVariables.Link_Code_QR;
                            break;
                        case "21": //Maranhao
                            functionECF.conectorECF_RelatorioGerencial(alwaysVariables.ModeloEcf, "http://www.nfce.sefaz.ma.gov.br/portal/consultarNFCe.jsp?" + alwaysVariables.Link_Code_QR, ref fiscal_MSG, ref fiscal_retorno, alwaysVariables.ECF_Ligada);
                            alwaysVariables.Link_Danfe = "http://www.nfce.sefaz.ma.gov.br/portal/consultarNFCe.jsp?" + alwaysVariables.Link_Code_QR;
                            break;
                        case "51": //Mato Grosso
                            functionECF.conectorECF_RelatorioGerencial(alwaysVariables.ModeloEcf, "http://www.sefaz.mt.gov.br/nfce/consultanfce?" + alwaysVariables.Link_Code_QR, ref fiscal_MSG, ref fiscal_retorno, alwaysVariables.ECF_Ligada);
                            alwaysVariables.Link_Danfe = "http://www.sefaz.mt.gov.br/nfce/consultanfce?" + alwaysVariables.Link_Code_QR;
                            break;
                        case "22": //Piaui
                            functionECF.conectorECF_RelatorioGerencial(alwaysVariables.ModeloEcf, "http://webas.sefaz.pi.gov.br/nfceweb/consultarNFCe.jsf?" + alwaysVariables.Link_Code_QR, ref fiscal_MSG, ref fiscal_retorno, alwaysVariables.ECF_Ligada);
                            alwaysVariables.Link_Danfe = "http://webas.sefaz.pi.gov.br/nfceweb/consultarNFCe.jsf?" + alwaysVariables.Link_Code_QR;
                            break;
                        case "24": //Rio Grande do Norte
                            functionECF.conectorECF_RelatorioGerencial(alwaysVariables.ModeloEcf, "http://nfce.set.rn.gov.br/consultarNFCe.aspx?" + alwaysVariables.Link_Code_QR, ref fiscal_MSG, ref fiscal_retorno, alwaysVariables.ECF_Ligada);
                            alwaysVariables.Link_Danfe = "http://nfce.set.rn.gov.br/consultarNFCe.aspx?" + alwaysVariables.Link_Code_QR;
                            break;
                        case "43": //Rio Grande do Sul
                            functionECF.conectorECF_RelatorioGerencial(alwaysVariables.ModeloEcf, "https://www.sefaz.rs.gov.br/NFCE/NFCE-COM.aspx?" + alwaysVariables.Link_Code_QR, ref fiscal_MSG, ref fiscal_retorno, alwaysVariables.ECF_Ligada);
                            alwaysVariables.Link_Danfe = "https://www.sefaz.rs.gov.br/NFCE/NFCE-COM.aspx?" + alwaysVariables.Link_Code_QR;
                            break;
                        case "35": //Sao Paulo
                            functionECF.conectorECF_RelatorioGerencial(alwaysVariables.ModeloEcf, "https://www.nfce.fazenda.sp.gov.br/NFCeConsultaPublica/Paginas/ConsultaQRCode.aspx?" + alwaysVariables.Link_Code_QR, ref fiscal_MSG, ref fiscal_retorno, alwaysVariables.ECF_Ligada);
                            alwaysVariables.Link_Danfe = "https://www.sefaz.rs.gov.br/NFCE/NFCE-COM.aspx?" + alwaysVariables.Link_Code_QR;
                            break;
                        case "28": //Sergipe
                            functionECF.conectorECF_RelatorioGerencial(alwaysVariables.ModeloEcf, "http://www.nfe.se.gov.br/portal/consultarNFCe.jsp?" + alwaysVariables.Link_Code_QR, ref fiscal_MSG, ref fiscal_retorno, alwaysVariables.ECF_Ligada);
                            alwaysVariables.Link_Danfe = "https://www.sefaz.rs.gov.br/NFCE/NFCE-COM.aspx?" + alwaysVariables.Link_Code_QR;
                            break;
                    }
                }
                else
                {

                    switch (alwaysVariables.Entidade)
                    {
                        case "12"://Acre
                            functionECF.conectorECF_RelatorioGerencial(alwaysVariables.ModeloEcf, "http://hml.sefaznet.ac.gov.br/nfce?" + alwaysVariables.Link_Code_QR, ref fiscal_MSG, ref fiscal_retorno, alwaysVariables.ECF_Ligada);
                            break;
                        case "13": //Amazonas
                            functionECF.conectorECF_RelatorioGerencial(alwaysVariables.ModeloEcf, "http://homnfce.sefaz.am.gov.br/nfceweb/consultarNFCe.jsp?" + alwaysVariables.Link_Code_QR, ref fiscal_MSG, ref fiscal_retorno, alwaysVariables.ECF_Ligada);
                            alwaysVariables.Link_Danfe = "http://homnfce.sefaz.am.gov.br/nfceweb/consultarNFCe.jsp?" + alwaysVariables.Link_Code_QR;
                            break;
                        case "21": //Maranhao
                            functionECF.conectorECF_RelatorioGerencial(alwaysVariables.ModeloEcf, "http://www.hom.nfce.sefaz.ma.gov.br/portal/consultarNFCe.jsp?" + alwaysVariables.Link_Code_QR, ref fiscal_MSG, ref fiscal_retorno, alwaysVariables.ECF_Ligada);
                            alwaysVariables.Link_Danfe = "http://www.hom.nfce.sefaz.ma.gov.br/portal/consultarNFCe.jsp?" + alwaysVariables.Link_Code_QR;
                            break;
                        case "51"://Mato Grosso
                            functionECF.conectorECF_RelatorioGerencial(alwaysVariables.ModeloEcf, "http://homologacao.sefaz.mt.gov.br/nfce/consultanfce?" + alwaysVariables.Link_Code_QR, ref fiscal_MSG, ref fiscal_retorno, alwaysVariables.ECF_Ligada);
                            alwaysVariables.Link_Danfe = "http://homologacao.sefaz.mt.gov.br/nfce/consultanfce?" + alwaysVariables.Link_Code_QR;
                            break;
                        case "22": //Piaui
                            functionECF.conectorECF_RelatorioGerencial(alwaysVariables.ModeloEcf, "http://webas.sefaz.pi.gov.br/nfceweb-homologacao/consultarNFCe.jsf?" + alwaysVariables.Link_Code_QR, ref fiscal_MSG, ref fiscal_retorno, alwaysVariables.ECF_Ligada);
                            alwaysVariables.Link_Danfe = "https://www.sefaz.rs.gov.br/NFCE/NFCE-COM.aspx?" + alwaysVariables.Link_Code_QR;
                            break;
                        case "24": //Rio Grande do Norte 
                            functionECF.conectorECF_RelatorioGerencial(alwaysVariables.ModeloEcf, "http://nfce.set.rn.gov.br/consultarNFCe.aspx?" + alwaysVariables.Link_Code_QR, ref fiscal_MSG, ref fiscal_retorno, alwaysVariables.ECF_Ligada);
                            alwaysVariables.Link_Danfe = "https://www.sefaz.rs.gov.br/NFCE/NFCE-COM.aspx?" + alwaysVariables.Link_Code_QR;
                            break;
                        case "43": //Rio Grande do Sul 
                            functionECF.conectorECF_RelatorioGerencial(alwaysVariables.ModeloEcf, "https://www.sefaz.rs.gov.br/NFCE/NFCE-COM.aspx?" + alwaysVariables.Link_Code_QR, ref fiscal_MSG, ref fiscal_retorno, alwaysVariables.ECF_Ligada);
                            alwaysVariables.Link_Danfe = "https://www.sefaz.rs.gov.br/NFCE/NFCE-COM.aspx?" + alwaysVariables.Link_Code_QR;
                            break;
                        case "35": //São Paulo 
                            functionECF.conectorECF_RelatorioGerencial(alwaysVariables.ModeloEcf, "https://www.homologacao.nfce.fazenda.sp.gov.br/NFCeConsultaPublica/Paginas/ConsultaQRCode.aspx?" + alwaysVariables.Link_Code_QR, ref fiscal_MSG, ref fiscal_retorno, alwaysVariables.ECF_Ligada);
                            alwaysVariables.Link_Danfe = "https://www.sefaz.rs.gov.br/NFCE/NFCE-COM.aspx?" + alwaysVariables.Link_Code_QR;
                            break;
                        case "28": //Sergipe 
                            functionECF.conectorECF_RelatorioGerencial(alwaysVariables.ModeloEcf, "http://www.hom.nfe.se.gov.br/portal/consultarNFCe.jsp?" + alwaysVariables.Link_Code_QR, ref fiscal_MSG, ref fiscal_retorno, alwaysVariables.ECF_Ligada);
                            alwaysVariables.Link_Danfe = "https://www.sefaz.rs.gov.br/NFCE/NFCE-COM.aspx?" + alwaysVariables.Link_Code_QR;
                            break;
                    }
                }
                functionECF.conectorECF_RelatorioGerencial(alwaysVariables.ModeloEcf, "______________________________________________", ref fiscal_MSG, ref fiscal_retorno, alwaysVariables.ECF_Ligada);
                //functionECF.conectorECF_Imprimi_CODEQR(alwaysVariables.ModeloEcf, 1, 10, 0, 10, 1, "123ABC", ref fiscal_MSG, ref fiscal_retorno, alwaysVariables.ECF_Ligada);
                functionECF.conectorECF_RelatorioGerencial(alwaysVariables.ModeloEcf, "Protocolo de Autorização: " + alwaysVariables.ProtocoloNfce + "\n", ref fiscal_MSG, ref fiscal_retorno, alwaysVariables.ECF_Ligada);
                functionECF.conectorECF_FechaRelatorioGerencial(alwaysVariables.ModeloEcf, ref fiscal_MSG, ref fiscal_retorno, alwaysVariables.ECF_Ligada);

                functionECF.conectorECF_NumeroCupom(alwaysVariables.ModeloEcf, ref fiscal_Cupom_coo, ref fiscal_MSG, ref fiscal_retorno, alwaysVariables.ECF_Ligada);
                if (flagFormaFinalizacao == "D" && Convert.ToDouble(flagDav.Trim()) > 0)
                {
                    conectorPDV_inc_cupom_relatorio("RG", flagDav);
                    conectorPDV_carrega_registroD(1, Convert.ToDouble(flagDav.Trim()).ToString());
                }
            }
            conectorPDV_find_dav(1, reserva_number);

            conector_reset_variaveis_nfce();
            zeraListas();
            msgInfo help = new msgInfo(1, "[ F12 ] - EMITIR DANFE VIRTUAL - IMPRESSAO - [ F11 ] - SAIR");
            
            if (help.ShowDialog() == DialogResult.OK)
            {
                string test = "Host Unavailable";

                if (IsConnected() == true)
                {
                    if (alwaysVariables.Link_Danfe != "")
                    {
                        test = PingHost(alwaysVariables.Link_Danfe);
                        if (test == null)
                        {
                            test = "Host Unavailable";
                            msgInfo msg1 = new msgInfo(1, "Caro Operador - " + " CONEXÃO COM A SEFAZ FALHOU! IMPOSSIVEL CONTINUAR...!"); msg1.ShowDialog();

                        }
                        else
                        {
                            if (alwaysVariables.Link_Danfe != null)
                            {
                                ProcessStartInfo sInfo = new ProcessStartInfo(alwaysVariables.Link_Danfe);
                                Process.Start(sInfo);
                                alwaysVariables.Link_Danfe = "";
                                alwaysVariables.Link_Code_QR = "";
                            }
                            else
                            {
                                msgInfo msg2 = new msgInfo(1, "Caro Operador - " + " NENHUMA NOTA PROCESSADA."); msg2.ShowDialog();
                            }
                        }
                    }
                    else
                    {
                        msgInfo msg3 = new msgInfo(1, "Caro Operador - " + " NOTA FISCAL DO CONSUMIDOR, BLOQUEADA PARA EMISSAO DE DANFES, PROSSIGA A VENDA."); msg3.ShowDialog();
                    }

                }
                else
                {
                    msgInfo msg4 = new msgInfo(1, "Caro Operador - " + " CONEXÃO COM A INTERNET FALHOU! IMPOSSIVEL CONEXAO COM A SEFAZ...!"); msg4.ShowDialog();
                }
            }

        }
        public void recuperaCard(string coo, string cx, string store)
        {
            string test = "00000000";
            if (fiscal_last_reducao_dataMovimento.Trim() != "" && fiscal_last_reducao_dataMovimento != "000000")
            {
                test = String.Format("{0:yyyyMMdd}", Convert.ToDateTime(fiscal_last_reducao_dataMovimento.Substring(0, 2) + "/" + fiscal_last_reducao_dataMovimento.Substring(2, 2) + "/" + String.Format("{0:ddMMyyyy}", DateTime.Now).Substring(4, 2) + fiscal_data_printer.Substring(4, 2)));
            }
            else
            {
                test = String.Format("{0:yyyyMMdd}", Convert.ToDateTime(fiscal_data_movimento.Substring(0, 2) + "/" + fiscal_data_movimento.Substring(2, 2) + "/" + String.Format("{0:ddMMyyyy}", DateTime.Now).Substring(4, 2) + fiscal_data_printer.Substring(4, 2)));
            }
            
            try
            {
                countField = 0;
                countRows = 0;
                auxConsistencia = 0;
                title = banco.abreConexao();
                banco.singleTransaction("select typeCartao, sum(valor) from cartao  where cupom=?coo and idLoja=?store and terminal=?cx and emissao=?emissao group by typeCartao");
                banco.addParametro("?coo", coo.Replace("\0","").Trim());
                banco.addParametro("?store", store.Replace("\0","").Trim());
                banco.addParametro("?cx", cx.Replace("\0","").Trim());
                banco.addParametro("?emissao", test);
                banco.procedimentoSet();
            }
            catch (Exception erro)
            {
                auxConsistencia = 1;
            }
            finally
            {
                if (auxConsistencia == 0)
                {
                    countField = banco.retornaSet().Tables[0].Columns.Count;
                    countRows = banco.retornaSet().Tables[0].DefaultView.Count;
                    if (countRows > 0)
                    {
                        for (int i = 0; i < countRows; i++)//Linha
                        {
                            switch (Convert.ToString(banco.retornaSet().Tables[0].Rows[i][0]))
                            {
                                case "2":
                                    txtCartaoCreditoConectorCF.Text = Convert.ToDecimal((txtCartaoCreditoConectorCF.Text.Replace(",",".") + Convert.ToString(banco.retornaSet().Tables[0].Rows[i][1]))).ToString(); //Credito
                                    break;
                                case "4":
                                    txtCartaoCreditoConectorCF.Text = Convert.ToDecimal((txtCartaoCreditoConectorCF.Text.Replace(",",".") + Convert.ToString(banco.retornaSet().Tables[0].Rows[i][1]))).ToString(); //Credito Par. Emissao
                                    break;
                                case "1":
                                    txtCartaoDebitoConectorCF.Text = Convert.ToDecimal((txtCartaoDebitoConectorCF.Text.Replace(",",".") + Convert.ToString(banco.retornaSet().Tables[0].Rows[i][1]))).ToString(); //Debito
                                    break;
                                case "3": // VOUCHE
                                    txtCartaoCreditoConectorCF.Text = Convert.ToDecimal((txtCartaoCreditoConectorCF.Text.Replace(",",".") + Convert.ToString(banco.retornaSet().Tables[0].Rows[i][1]))).ToString();
                                    break;
                                default:
                                    break;
                            }
                        }
                    }
                }
                banco.fechaConexao(); if (title != "") { this.txtTitleCupomFiscalConectorCF.Invoke((MethodInvoker)delegate { txtTitleCupomFiscalConectorCF.Text = title; }); }
            }
        }
        public void statusPDV()
        {
            int retorno = 0;
            try
            {
                title = banco.abreConexao();
                banco.singleTransaction("select count(*) from `conectorpdv`.`movimentocaixa` where dataMovimento=?Var and situacao=1");
                banco.addParametro("?Var", String.Format("{0:ddMMyyyy}", DateTime.Now).Substring(4, 2) + fiscal_data_movimento.Substring(4, 2) + fiscal_data_movimento.Substring(2, 2) + fiscal_data_movimento.Substring(0, 2));
                //banco.addParametro("?op", op);
                banco.procedimentoRead();
                if (banco.retornaRead().Read() == true)
                {
                    retorno = Convert.ToInt32(banco.retornaRead().GetString(0));
                }
                else retorno = 0;
            }
            catch (Exception erro)
            {
                retorno = 0;
            }
            finally
            {
                banco.fechaConexao(); if (title != "") { this.txtTitleCupomFiscalConectorCF.Invoke((MethodInvoker)delegate { txtTitleCupomFiscalConectorCF.Text = title; }); }
            }
        }
        public int conector_convenio(string var)
        {
            int retorno = 0;
            try
            {
                title = banco.abreConexao();
                banco.singleTransaction("select * from convenio where idConvenio=?Var");
                banco.addParametro("?Var", var);
                banco.procedimentoRead();
                if (banco.retornaRead().Read() == true)
                {
                    retorno = Convert.ToInt32(banco.retornaRead().GetString(0));
                    convenio_razao = Convert.ToString(banco.retornaRead().GetString(1));
                }
                else retorno = 0;
            }
            catch (Exception erro)
            {
                retorno = 0;
            }
            finally
            {
                banco.fechaConexao(); if (title != "") { this.txtTitleCupomFiscalConectorCF.Invoke((MethodInvoker)delegate { txtTitleCupomFiscalConectorCF.Text = title; }); }
            }
            return retorno;
        }
        public int conector_pessoa(string var)
        {
            int retorno = 0;
            try
            {
                title = banco.abreConexao();
                banco.singleTransaction("select idLoja from cliente where idLoja=?Var");
                banco.addParametro("?Var", var);
                banco.procedimentoRead();
                if (banco.retornaRead().Read() == true)
                {
                    retorno = Convert.ToInt32(banco.retornaRead().GetString(0));
                }
                else retorno = 0;
            }
            catch (Exception erro)
            {
                retorno = 0;
            }
            finally
            {
                banco.fechaConexao(); if (title != "") { this.txtTitleCupomFiscalConectorCF.Invoke((MethodInvoker)delegate { txtTitleCupomFiscalConectorCF.Text = title; }); }
            }
            return retorno;
        }
        public int saida_operador(string op)
        {
            int retorno = 0;
            try
            {
                auxConsistencia = 0;
                title = banco.abreConexao();
                banco.singleTransaction("update `conectorpdv`.`movimentocaixa` set situacao=0 where dataMovimento=?Var and situacao=1 and funcionario=?op and tipoCall=0");
                banco.addParametro("?Var", String.Format("{0:ddMMyyyy}", DateTime.Now).Substring(4, 2) + fiscal_data_movimento.Substring(4, 2) + fiscal_data_movimento.Substring(2, 2) + fiscal_data_movimento.Substring(0, 2));
                banco.addParametro("?op", op);
                banco.procedimentoRead();
            }
            catch (Exception erro)
            {
                retorno = 0;
                auxConsistencia = 1;
            }
            finally
            {
                banco.fechaConexao(); if (title != "") { this.txtTitleCupomFiscalConectorCF.Invoke((MethodInvoker)delegate { txtTitleCupomFiscalConectorCF.Text = title; }); }
                if (auxConsistencia == 0)
                {
                    retorno = 1;
                    if (fiscal_Cupom_coo.Trim() != "" && lbDataMovimentoConectorCF.Text != "00/00/0000")
                    {
                        functionECF.conectorECF_GrandeTotal(alwaysVariables.ModeloEcf, ref fiscal_GT, ref fiscal_MSG, ref fiscal_retorno, alwaysVariables.ECF_Ligada);
                        //fiscal_retorno = conectorECF.Bematech_FI_GrandeTotal(ref fiscal_GT);
                        conector_verifica_venda_bruta(ref fiscal_banco_venda);
                        workObject.modoPdv(true); //Para rotina loop
                        strCupom = "";
                        instrucao.setVetorCupom();
                        strCupom = instrucao.getFechamentoCaixa(alwaysVariables.UserName, alwaysVariables.Senha, Convert.ToDouble(fiscal_store.Replace("\0", "").Trim()) > 0 ? fiscal_store.Replace("\0", "").Trim() : alwaysVariables.Store, banco_operado, String.Format("{0:yyyyMMdd}", Convert.ToDateTime(alwaysVariables.XDataTime(lbDataMovimentoConectorCF.Text).ToString())), fiscal_numero_caixa.Replace("\0","").Trim(), fiscal_Cupom_coo, 1.ToString());
                        instrucao.carregaInstrucaoMovimentoVenda(instrucao._fechamentoCaixa, strCupom,0);
                        instrucao.compactScript(instrucao._fechamentoCaixa, "fechamentoCaixa");
                        workObject.modoPdv(false); //Libera rotina loop
                    }
                }
            }
            return retorno;
        }
        public int conector_update_gera_estoque(string numero_serie, string estoque)
        {
            int retorno = 0;
            try
            {
                auxConsistencia = 0;
                title = banco.abreConexao();
                banco.singleTransaction("update `conectorpdv`.`estoque_geracao` set cripto=?cripto where  numeroFabricacao=?numero");
                banco.addParametro("?cripto", estoque);
                banco.addParametro("?numero", numero_serie);
                banco.procedimentoRead();
            }
            catch (Exception erro)
            {
                retorno = 0;
                auxConsistencia = 1;
            }
            finally
            {
                banco.fechaConexao(); if (title != "") { this.txtTitleCupomFiscalConectorCF.Invoke((MethodInvoker)delegate { txtTitleCupomFiscalConectorCF.Text = title; }); }
                if (auxConsistencia == 0)
                {
                    retorno = 1;
                }
            }
            return retorno;
        }
        public int conector_update_lineMD5_A2(string store, string fina, string dataVenda, string cripto)
        {
            int retorno = 0;
            try
            {
                auxConsistencia = 0;
                title = banco.abreConexao();
                //banco.singleTransaction("update `conectorpdv`.`tabela_resumo` set cript=?cripto where  finalizadora=?fina and loja=?store and dataVenda=?dataVenda");
                banco.singleTransaction("update `conectorpdv`.`ecf_a2` set a07=?cripto where  a03=?fina and a01=?store and a02=?dataVenda");
                banco.addParametro("?cripto", cripto);
                banco.addParametro("?store", store);
                banco.addParametro("?fina", fina);
                banco.addParametro("?dataVenda", dataVenda);
                banco.procedimentoRead();
            }
            catch (Exception erro)
            {
                retorno = 0;
                auxConsistencia = 1;
            }
            finally
            {
                banco.fechaConexao(); if (title != "") { this.txtTitleCupomFiscalConectorCF.Invoke((MethodInvoker)delegate { txtTitleCupomFiscalConectorCF.Text = title; }); }
                if (auxConsistencia == 0)
                {
                    retorno = 1;

                }
            }
            return retorno;
        }
        public int conector_update_lineMD5_r05(string cupom, string prod, string sequencia, string cx, string detalhes)
        {
            int retorno = 0;
            try
            {
                auxConsistencia = 0;
                if (proc.statusSchema() == 1)
                {
                    return -1;
                }
                title = proc.abreConexao();
                proc.singleTransaction("update `conectorpdv`.`cupom_detalhes` set cripto=?cripto where  numeroCupom=?cupom and terminal=?cx and loja=?store and produto=?prod and sequencia=?sequencia");
                proc.addParametro("?Var", String.Format("{0:ddMMyyyy}", DateTime.Now).Substring(4, 2) + fiscal_data_movimento.Substring(4, 2) + fiscal_data_movimento.Substring(2, 2) + fiscal_data_movimento.Substring(0, 2));
                proc.addParametro("?cripto", detalhes);
                proc.addParametro("?cupom", cupom.Replace("\0","").Trim());
                proc.addParametro("?store", fiscal_store.Replace("\0","").Trim());
                proc.addParametro("?sequencia", sequencia);
                proc.addParametro("?cx", cx);
                proc.addParametro("?prod", prod);
                proc.procedimentoRead();
            }
            catch (Exception erro)
            {
                retorno = 0;
                auxConsistencia = 1;
            }
            finally
            {
                proc.fechaConexao(); if (title != "") { this.txtTitleCupomFiscalConectorCF.Invoke((MethodInvoker)delegate { txtTitleCupomFiscalConectorCF.Text = title; }); }
                if (auxConsistencia == 0)
                {
                    retorno = 1;
                    if (fiscal_Cupom_coo != "      ")
                    {
                    }
                }
            }
            return retorno;
        }

        public void conectorPDV_gera_crypt_dav(string type, string ped, string prod, string seq)
        {
            string[,] recarga; //Matriz Bidimencionada
            try
            {
                auxConsistencia = 0;
                countField = 0;
                countRows = 0;
                title = produto.abreConexao();
                auxConsistencia = 0;
                produto.startTransaction("conectorPDV_PAFECF_DAV");
                produto.addParametro("tipo", type);
                produto.addParametro("di", String.Format("{0:yyyyMMdd}", DateTime.Now)); //String.Format("{0:yyyyMMdd}", Convert.ToDateTime(input_di)));
                produto.addParametro("df", String.Format("{0:yyyyMMdd}", DateTime.Now));  //String.Format("{0:yyyyMMdd}", Convert.ToDateTime(input_di)));
                produto.addParametro("store", alwaysVariables.Store);
                produto.addParametro("reserva", ped);
                produto.addParametro("prod", prod);
                produto.addParametro("seq", seq);
                produto.procedimentoSet();

            }
            catch (Exception erro) { msgInfo msg = new msgInfo("Caro Cliente - " + erro.Message); msg.ShowDialog(); auxConsistencia = 1; }
            finally
            {
                if (auxConsistencia == 0)
                {
                    countField = produto.retornaSet().Tables[0].Columns.Count;
                    countRows = produto.retornaSet().Tables[0].DefaultView.Count;
                    if (countRows > 0)
                    {
                        recarga = new string[countRows, countField];
                        switch (type)
                        {
                            case "D03":

                                for (int i = 0; i < countRows; i++)//Linha
                                {
                                    for (int j = 0; j < countField; j++) //Coluna
                                    {

                                        if (j < 16)
                                        {
                                            recarga[i, j] = Convert.ToString(produto.retornaSet().Tables[0].Rows[i][j]);
                                        }
                                        else if (j == 16)
                                        {
                                            recarga[i, j] = key.GetMd5Sum((export.registro_tipo_d03("D3", recarga[i, 0], recarga[i, 1], recarga[i, 2], recarga[i, 3], recarga[i, 4], recarga[i, 5], recarga[i, 6], recarga[i, 7], recarga[i, 8], recarga[i, 9], recarga[i, 10], recarga[i, 11], recarga[i, 12], recarga[i, 13], recarga[i, 14], recarga[i, 15])));
                                        }
                                    }

                                }
                                produto.fechaConexao(); if (title != "") { this.txtTitleCupomFiscalConectorCF.Invoke((MethodInvoker)delegate { txtTitleCupomFiscalConectorCF.Text = title; }); }

                                for (int w = 0; w < recarga.GetLength(0) + 1; w++) //Coluna
                                {

                                    try
                                    {
                                        auxConsistencia = 0;
                                        title = produto.abreConexao();
                                        produto.singleTransaction("update conectorpdv.dav03 set d17=?cripto where d01=?d01 and d02=?d02 and d03=?d03 and d04=?d04");
                                        produto.addParametro("?cripto", recarga[w, 16]);
                                        produto.addParametro("?d01", recarga[w, 0]);
                                        produto.addParametro("?d02", recarga[w, 1]);
                                        produto.addParametro("?d03", recarga[w, 2]);
                                        produto.addParametro("?d04", recarga[w, 3]);
                                        produto.procedimentoRead();
                                    }
                                    catch (Exception erro)
                                    {
                                        auxConsistencia = 1;
                                    }
                                    finally
                                    {
                                        produto.fechaConexao(); if (title != "") { this.txtTitleCupomFiscalConectorCF.Invoke((MethodInvoker)delegate { txtTitleCupomFiscalConectorCF.Text = title; }); }
                                        if (auxConsistencia == 0)
                                        {
                                        }
                                    }
                                } 
                                break;

                            case "D04":
                                
                                for (int i = 0; i < countRows; i++)//Linha
                                {
                                    for (int j = 0; j < countField; j++) //Coluna
                                    {

                                        if (j < 17)
                                        {
                                            recarga[i, j] = Convert.ToString(produto.retornaSet().Tables[0].Rows[i][j]);
                                        }
                                        else if (j == 17)
                                        {
                                            recarga[i, j] = key.GetMd5Sum((export.registro_tipo_d04("D4", recarga[i, 0], recarga[i, 1], recarga[i, 2], recarga[i, 3], recarga[i, 4], recarga[i, 5], recarga[i, 6], recarga[i, 7], recarga[i, 8], recarga[i, 9], recarga[i, 10], recarga[i, 11], recarga[i, 12], recarga[i, 13], recarga[i, 14], recarga[i, 15], recarga[i, 16])));
                                        }
                                        else if (j == 18)
                                        {
                                            recarga[i, j] = Convert.ToString(produto.retornaSet().Tables[0].Rows[i][j]);
                                        }
                                    }

                                }
                                produto.fechaConexao(); if (title != "") { this.txtTitleCupomFiscalConectorCF.Invoke((MethodInvoker)delegate { txtTitleCupomFiscalConectorCF.Text = title; }); }

                                for (int w = 0; w < recarga.GetLength(0) + 1; w++) //Coluna
                                {

                                    try
                                    {
                                        auxConsistencia = 0;
                                        title = produto.abreConexao();
                                        produto.singleTransaction("update conectorpdv.dav04 set d18=?cripto where chave=?chave");
                                        produto.addParametro("?cripto", recarga[w, 17]);
                                        produto.addParametro("?chave", recarga[w, 18]);
                                        produto.procedimentoRead();
                                    }
                                    catch (Exception erro)
                                    {
                                        auxConsistencia = 1;
                                    }
                                    finally
                                    {
                                        produto.fechaConexao(); if (title != "") { this.txtTitleCupomFiscalConectorCF.Invoke((MethodInvoker)delegate { txtTitleCupomFiscalConectorCF.Text = title; }); }
                                        if (auxConsistencia == 0)
                                        {
                                        }
                                    }
                                }
                                break;
                            case "D02":

                                for (int i = 0; i < countRows; i++)//Linha
                                {
                                    for (int j = 0; j < countField; j++) //Coluna
                                    {

                                        if (j < 15)
                                        {
                                            recarga[i, j] = Convert.ToString(produto.retornaSet().Tables[0].Rows[i][j]);
                                        }
                                        else if (j == 15)
                                        {
                                            recarga[i, j] = key.GetMd5Sum((export.registro_tipo_d02("D2", recarga[i, 0], recarga[i, 1], recarga[i, 2], recarga[i, 3], recarga[i, 4], recarga[i, 5], recarga[i, 6], recarga[i, 7], recarga[i, 8], recarga[i, 9], recarga[i, 10], recarga[i, 11], recarga[i, 12], recarga[i, 13], recarga[i, 14])));
                                        }
                                        else if (j == 17)
                                        {
                                            recarga[i, j] = Convert.ToString(produto.retornaSet().Tables[0].Rows[i][j]);
                                        }
                                    }

                                }
                                produto.fechaConexao(); if (title != "") { this.txtTitleCupomFiscalConectorCF.Invoke((MethodInvoker)delegate { txtTitleCupomFiscalConectorCF.Text = title; }); }

                                for (int w = 0; w < recarga.GetLength(0) + 1; w++) //Coluna
                                {

                                    try
                                    {
                                        auxConsistencia = 0;
                                        title = produto.abreConexao();
                                        produto.singleTransaction("update conectorpdv.dav02 set d16=?cripto where chave=?chave");
                                        produto.addParametro("?cripto", recarga[w, 15]);
                                        produto.addParametro("?chave", recarga[w, 17]);
                                        produto.procedimentoRead();
                                    }
                                    catch (Exception erro)
                                    {
                                        auxConsistencia = 1;
                                    }
                                    finally
                                    {
                                        produto.fechaConexao(); if (title != "") { this.txtTitleCupomFiscalConectorCF.Invoke((MethodInvoker)delegate { txtTitleCupomFiscalConectorCF.Text = title; }); }
                                        if (auxConsistencia == 0)
                                        {
                                        }
                                    }
                                }
                                break;
                        }
                    }
                    else
                    {
                    }
                }
                produto.fechaConexao(); if (title != "") { this.txtTitleCupomFiscalConectorCF.Invoke((MethodInvoker)delegate { txtTitleCupomFiscalConectorCF.Text = title; }); }
            }
            /*string[,] recarga; //Matriz Bidimencionada
            try
            {
                auxConsistencia = 0;
                countField = 0;
                countRows = 0;
                title = banco.abreConexao();
                auxConsistencia = 0;
                banco.startTransaction("conectorPDV_PAFECF_DAV");
                banco.addParametro("tipo", "D03");
                banco.addParametro("di", "20150531");//String.Format("{0:yyyyMMdd}", DateTime.Now)); //String.Format("{0:yyyyMMdd}", Convert.ToDateTime(input_di)));
                banco.addParametro("df", String.Format("{0:yyyyMMdd}", DateTime.Now));  //String.Format("{0:yyyyMMdd}", Convert.ToDateTime(input_di)));
                banco.addParametro("store", alwaysVariables.Store);
                banco.addParametro("reserva", "0");
                banco.addParametro("prod", "0");
                banco.addParametro("seq", "0");
                banco.procedimentoSet();

            }
            catch (Exception erro) { msgInfo msg = new msgInfo("Caro Cliente - " + erro.Message); msg.ShowDialog(); auxConsistencia = 1; }
            finally
            {
                if (auxConsistencia == 0)
                {
                    countField = banco.retornaSet().Tables[0].Columns.Count;
                    countRows = banco.retornaSet().Tables[0].DefaultView.Count;
                    if (countRows > 0)
                    {
                        recarga = new string[countRows, countField];
                        for (int i = 0; i < countRows; i++)//Linha
                        {
                            for (int j = 0; j < countField; j++) //Coluna
                            {
                                recarga[i, j] = Convert.ToString(banco.retornaSet().Tables[0].Rows[i][j]);
                            }

                        }
                        banco.fechaConexao(); if (title != "") { this.txtTitleCupomFiscalConectorCF.Invoke((MethodInvoker)delegate { txtTitleCupomFiscalConectorCF.Text = title; }); }
                        for (int w = 0; w < recarga.GetUpperBound(0) + 1; w++) //Coluna
                        {
                            //conector_update_lineMD5_E2(recarga[w, 1], key.GetMd5Sum(export.registro_tipo_e2("E2", recarga[w, 0], recarga[w, 1], recarga[w, 2], recarga[w, 3], recarga[w, 4], recarga[w, 5])));
                            conector_update_lineMD5_d03_descricaoItem(recarga[w, 0], alwaysVariables.Store, conectorPDV_PAFECF_indicador_DAV("A", recarga[w, 0], "20150531", alwaysVariables.Store, recarga[w, 3], recarga[w, 2]), recarga[w, 3], recarga[w, 2]);
                        }
                    }
                    else
                    {
                    }
                }
                banco.fechaConexao(); if (title != "") { this.txtTitleCupomFiscalConectorCF.Invoke((MethodInvoker)delegate { txtTitleCupomFiscalConectorCF.Text = title; }); }
            }*/
        }
	    public void conectorPDV_gera_crypt_estoque(string tipo)
        {
            string[,] recarga; //Matriz Bidimencionada
            try
            {
                auxConsistencia = 0;
                countField = 0;
                countRows = 0;
                title = produto.abreConexao();
                produto.startTransaction("conectorPDV_PAFECF_Estoque");
                produto.addParametro("tipo", tipo);
                produto.addParametro("store", fiscal_store.Replace("\0", "").Trim() == "" ? alwaysVariables.Store : fiscal_store.Replace("\0", "").Trim());
                produto.addParametro("ecf", fiscal_numero_serie.Replace("\0", "").Trim());
                //string bof = fiscal_store.Replace("\0", "").Trim() == "" ? alwaysVariables.Store : fiscal_store.Replace("\0", "").Trim();
                produto.addParametro("di", String.Format("{0:yyyyMMdd}", Convert.ToDateTime(DateTime.Now)));
                produto.procedimentoSet();

            }
            catch (Exception erro) { msgInfo msg = new msgInfo("Caro Cliente - " + erro.Message); //msg.ShowDialog(); 
                auxConsistencia = 1; }
            finally
            {
                if (auxConsistencia == 0)
                {
                    switch (tipo)
                    {
                        case "E2":

                            countField = produto.retornaSet().Tables[0].Columns.Count;
                            countRows = produto.retornaSet().Tables[0].DefaultView.Count;
                            if (countRows > 0)
                            {
                                recarga = new string[countRows, countField];
                                for (int i = 0; i < countRows; i++)//Linha
                                {
                                    for (int j = 0; j < countField; j++) //Coluna
                                    {
                                        recarga[i, j] = Convert.ToString(produto.retornaSet().Tables[0].Rows[i][j]);
                                    }

                                }
                                produto.fechaConexao(); if (title != "") { this.txtTitleCupomFiscalConectorCF.Invoke((MethodInvoker)delegate { txtTitleCupomFiscalConectorCF.Text = title; }); }
                                for (int w = 0; w < recarga.GetLength(0); w++) //Coluna
                                {
                                    conector_update_lineMD5_E2(recarga[w, 1], key.GetMd5Sum(export.registro_tipo_e2("E2", recarga[w, 0], recarga[w, 1], recarga[w, 2], recarga[w, 3], recarga[w, 4], recarga[w, 5])));
                                }
                            }
                            else
                            {
                            }
                            break;

                        case "E3":

                            countField = produto.retornaSet().Tables[0].Columns.Count;
                            countRows = produto.retornaSet().Tables[0].DefaultView.Count;
                            if (countRows > 0)
                            {
                                recarga = new string[countRows, countField];
                                for (int i = 0; i < countRows; i++)//Linha
                                {
                                    for (int j = 0; j < countField; j++) //Coluna
                                    {
                                        recarga[i, j] = Convert.ToString(produto.retornaSet().Tables[0].Rows[i][j]);
                                    }

                                }
                                produto.fechaConexao(); if (title != "") { this.txtTitleCupomFiscalConectorCF.Invoke((MethodInvoker)delegate { txtTitleCupomFiscalConectorCF.Text = title; }); }
                                for (int w = 0; w < recarga.GetLength(0); w++) //Coluna
                                {
                                    conector_update_lineMD5_E3(recarga[w, 6], key.GetMd5Sum(export.registro_tipo_e3("E3", recarga[w, 1], recarga[w, 2], recarga[w, 3].Replace("\0", "").Trim(), recarga[w, 4].Trim(), recarga[w, 5].Replace("\0", "").Trim(), recarga[w, 6], recarga[w, 7])));
                                }
                            }
                            else
                            {
                            }
                            break;
                    }
                }
                produto.fechaConexao(); if (title != "") { this.txtTitleCupomFiscalConectorCF.Invoke((MethodInvoker)delegate { txtTitleCupomFiscalConectorCF.Text = title; }); }
            }
        }
        public void conectorPDV_gera_crypt_produto()
        {
            string[] vetor = new string[1] { "P2" };
            string[,] recarga; //Matriz Bidimencionada
            for (int m = 0; m < vetor.Length; m++)
            {
                if (vetor[m] != "#")
                {
                    try
                    {
                        auxConsistencia = 0;
                        title = produto.abreConexao();
                        produto.startTransaction("conectorPDV_PAFECF_Tabela");
                        produto.addParametro("varType", vetor[m]);
                        produto.addParametro("store", alwaysVariables.Store);
                        produto.procedimentoSet();

                    }
                    catch (Exception erro) { auxConsistencia = 1; }
                    finally
                    {
                        if (auxConsistencia == 0)
                        {
                            countField = produto.retornaSet().Tables[0].Columns.Count;
                            countRows = produto.retornaSet().Tables[0].DefaultView.Count;
                            if (countRows > 0)
                            {
                                recarga = new string[countRows, countField];
                                for (int i = 0; i < countRows; i++)//Linha
                                {
                                    for (int j = 0; j < countField; j++) //Coluna
                                    {
                                        recarga[i, j] = Convert.ToString(produto.retornaSet().Tables[0].Rows[i][j]);
                                    }
                                }
                                produto.fechaConexao(); if (title != "") { this.txtTitleCupomFiscalConectorCF.Invoke((MethodInvoker)delegate { txtTitleCupomFiscalConectorCF.Text = title; }); }
                                
                                for (int w = 0; w < recarga.GetLength(0); w++)//Linha
                                {
                                                                            //key.GetMd5Sum(export.registro_tipo_p2("P2", recarga[i, 0], recarga[i, 1], recarga[i, 2], recarga[i, 3], recarga[i, 4], recarga[i, 5], recarga[i, 6], recarga[i, 7], recarga[i, 8]));
                                    conector_update_lineMD5_P2(recarga[w, 1], key.GetMd5Sum(export.registro_tipo_p2("P2", recarga[w, 0], recarga[w, 1], recarga[w, 2], recarga[w, 3], recarga[w, 4], recarga[w, 5], recarga[w, 6], recarga[w, 7], recarga[w, 8])));
                                }
                            }
                        }
                        produto.fechaConexao();
                    }
                }
            }

        }

        public int conector_update_lineMD5_P2(string codigo, string cripto)
        {
            int retorno = 0;
            try
            {
                auxConsistencia = 0;
                title = produto.abreConexao();
                //produto.singleTransaction("update `conectorpdv`.`tabela_produto` set cripto=?cripto where  codigo=?codigo");
                produto.singleTransaction("update ecf_p2 set p10=?cripto where p02=?codigo");
                produto.addParametro("?cripto", cripto);
                produto.addParametro("?codigo", codigo);
                produto.procedimentoRead();
            }
            catch (Exception erro)
            {
                retorno = 0;
                auxConsistencia = 1;
            }
            finally
            {
                produto.fechaConexao(); if (title != "") { this.txtTitleCupomFiscalConectorCF.Invoke((MethodInvoker)delegate { txtTitleCupomFiscalConectorCF.Text = title; }); }
                if (auxConsistencia == 0)
                {
                    retorno = 1;
                }
            }
            return retorno;
        }

        public int conector_update_lineMD5_E2(string codigo, string cripto)
        {
            int retorno = 0;
            try
            {
                auxConsistencia = 0;
                title = banco.abreConexao();
                //banco.singleTransaction("update `conectorpdv`.`tabela_estoque` set crypt=?cripto where  idProduto=?codigo");
                banco.singleTransaction("UPDATE `conectorpdv`.`ecf_e2`  set `ecf_e2`.`e08`=?cripto where e02=?codigo");
                banco.addParametro("?cripto", cripto);
                banco.addParametro("?codigo", codigo);
                banco.procedimentoRead();
            }
            catch (Exception erro)
            {
                retorno = 0;
                auxConsistencia = 1;
            }
            finally
            {
                banco.fechaConexao(); if (title != "") { this.txtTitleCupomFiscalConectorCF.Invoke((MethodInvoker)delegate { txtTitleCupomFiscalConectorCF.Text = title; }); }
                if (auxConsistencia == 0)
                {
                    retorno = 1;
                }
            }
            return retorno;
        }

        public int conector_update_lineMD5_E3(string dat, string cripto)
        {
            int retorno = 0;
            try
            {
                auxConsistencia = 0;
                title = produto.abreConexao();
                //produto.singleTransaction("update `conectorpdv`.`tabela_estoque` set crypt=?cripto where  idProduto=?codigo");
                produto.singleTransaction("UPDATE `conectorpdv`.`ecf_e3`  set `ecf_e3`.`e09`=?cripto where e06=?codigo");
                produto.addParametro("?cripto", cripto);
                produto.addParametro("?codigo", dat);
                produto.procedimentoRead();
            }
            catch (Exception erro)
            {
                retorno = 0;
                auxConsistencia = 1;
            }
            finally
            {
                produto.fechaConexao(); if (title != "") { this.txtTitleCupomFiscalConectorCF.Invoke((MethodInvoker)delegate { txtTitleCupomFiscalConectorCF.Text = title; }); }
                if (auxConsistencia == 0)
                {
                    retorno = 1;
                }
            }
            return retorno;
        }

        public int conector_update_lineMD5_r07_nao_fiscal(string cupom, string finaliza, string cx, string movimento, string ccf)
        {
            functionECF.conectorECF_NumeroCupom(alwaysVariables.ModeloEcf, ref fiscal_Cupom, ref fiscal_MSG, ref fiscal_retorno, alwaysVariables.ECF_Ligada);
            //fiscal_retorno = conectorECF.Bematech_FI_NumeroCupom(ref fiscal_Cupom);
            string test = String.Format("{0:yyyyMMdd}", Convert.ToDateTime(fiscal_data_movimento.Substring(2, 2) + "/" + fiscal_data_movimento.Substring(0, 2) + "/" + String.Format("{0:ddMMyyyy}", DateTime.Now).Substring(4, 2) + fiscal_data_printer.Substring(4, 2)));
            string anexo = conectorPDV_PAFECF_indicador("RA8", test, fiscal_store.Replace("\0","").Trim(), fiscal_numero_caixa.Replace("\0","").Trim(), fiscal_Cupom.Replace("\0","").Trim(), ccf);
            int retorno = 0;
            try
            {
                auxConsistencia = 0;
                title = banco.abreConexao();
                banco.singleTransaction("update `conectorpdv`.`cupom_relatorio_meio_pgto` set cripto=?cripto, md5_finalizadora=?anexo where  numeroCupom=?cupom and terminal=?cx and idloja=?store and idfinalizadora=?finaliza and emissao=?Var");
                banco.addParametro("?Var", String.Format("{0:ddMMyyyy}", DateTime.Now).Substring(4, 2) + fiscal_data_movimento.Substring(4, 2) + fiscal_data_movimento.Substring(2, 2) + fiscal_data_movimento.Substring(0, 2));
                banco.addParametro("?cripto", movimento);
                banco.addParametro("?cupom", cupom.Replace("\0","").Trim());
                banco.addParametro("?store", fiscal_store.Replace("\0","").Trim());
                banco.addParametro("?cx", cx);
                banco.addParametro("?finaliza", finaliza);
                banco.addParametro("?anexo", anexo);
                banco.procedimentoRead();
            }
            catch (Exception erro)
            {
                retorno = 0;
                auxConsistencia = 1;
            }
            finally
            {
                banco.fechaConexao(); if (title != "") { this.txtTitleCupomFiscalConectorCF.Invoke((MethodInvoker)delegate { txtTitleCupomFiscalConectorCF.Text = title; }); }
                if (auxConsistencia == 0)
                {
                    retorno = 1;
                    if (fiscal_Cupom_coo != "      ")
                    {
                    }
                }
            }
            return retorno;
        }

        public int conector_update_lineMD5_r02_reducao_z(string cupom, string cx, string reducao, string lastDate)
        {
            int retorno = 0;
            try
            {
                auxConsistencia = 0;
                title = banco.abreConexao();
                banco.singleTransaction("update `conectorpdv`.`movimentoDia` set cripto=?cripto where  coo=?cupom and numeroCaixa=?cx and idloja=?store and movimento=?Var");
                banco.addParametro("?Var", lastDate);
                /*if (fiscal_data_movimento.Trim() != "" && fiscal_data_movimento != "000000")
                {
                    banco.addParametro("?Var", String.Format("{0:ddMMyyyy}", DateTime.Now).Substring(4, 2) + fiscal_data_movimento.Substring(4, 2) + fiscal_data_movimento.Substring(2, 2) + fiscal_data_movimento.Substring(0, 2));
                }
                else if (fiscal_last_reducao_dataMovimento.Trim() != "" && fiscal_last_reducao_dataMovimento != "000000")
                {
                    banco.addParametro("?Var",String.Format("{0:ddMMyyyy}", DateTime.Now).Substring(4, 2) + fiscal_last_reducao_dataMovimento.Substring(4, 2) + fiscal_last_reducao_dataMovimento.Substring(2, 2) + fiscal_last_reducao_dataMovimento.Substring(0, 2));
                }*/
                banco.addParametro("?cripto", reducao);
                banco.addParametro("?cupom", cupom.Replace("\0","").Trim());
                banco.addParametro("?store", fiscal_store.Replace("\0","").Trim());
                banco.addParametro("?cx", cx);
                if ((lastDate.Trim() != "" && lastDate != "000000"))
                {
                    banco.procedimentoRead();
                }
                else
                {
                    auxConsistencia = 1;
                }
            }
            catch (Exception erro)
            {
                retorno = 0;
                auxConsistencia = 1;
            }
            finally
            {
                banco.fechaConexao(); if (title != "") { this.txtTitleCupomFiscalConectorCF.Invoke((MethodInvoker)delegate { txtTitleCupomFiscalConectorCF.Text = title; }); }
                if (auxConsistencia == 0)
                {
                    retorno = 1;
                    if (fiscal_Cupom_coo != "      ")
                    {
                    }
                }
            }
            return retorno;
        }

        public int conector_update_lineMD5_r03_reducao_detalhes(string cupom, string totaliza, string cx, string reducao)
        {
            int retorno = 0;
            try
            {
                auxConsistencia = 0;
                title = banco.abreConexao();
                banco.singleTransaction("update `conectorpdv`.`detalhe_reducao` set cripto=?cripto where  crz=?cupom and numeroCaixa=?cx and idloja=?store and totalizador=?totaliza");
                banco.addParametro("?cripto", reducao);
                banco.addParametro("?cupom", cupom.Replace("\0","").Trim());
                banco.addParametro("?store", fiscal_store.Replace("\0","").Trim());
                banco.addParametro("?cx", cx);
                banco.addParametro("?totaliza", totaliza);
                banco.procedimentoRead();
            }
            catch (Exception erro)
            {
                retorno = 0;
                auxConsistencia = 1;
            }
            finally
            {
                banco.fechaConexao(); if (title != "") { this.txtTitleCupomFiscalConectorCF.Invoke((MethodInvoker)delegate { txtTitleCupomFiscalConectorCF.Text = title; }); }
                if (auxConsistencia == 0)
                {
                    retorno = 1;
                    if (fiscal_Cupom_coo != "      ")
                    {
                    }
                }
            }
            return retorno;
        }

        public void conectorPDV_inc_identificacao_desconto(string cnpj, string serie, string mf, string tipo, string marca, string modelo, string coo, string ccf, string valor, string emissao, string cpf, string title)
        {
            try
            {
                auxConsistencia = 0;
                title = proc.abreConexao();
                proc.startTransaction("conectorPDV_inc_identificacao_desconto");
                proc.addParametro("inc_cnpj", cnpj);
                proc.addParametro("inc_serie", serie.Replace("\0","").Trim());
                proc.addParametro("inc_mf_adicional", mf.Replace("\0","").Trim());
                proc.addParametro("inc_tipo_ecf", tipo.Replace("\0","").Trim());
                proc.addParametro("inc_marca_ecf", marca.Replace("\0","").Trim());
                proc.addParametro("inc_modelo_ecf", modelo.Replace("\0","").Trim());
                proc.addParametro("inc_coo", coo.Replace("\0","").Trim());
                proc.addParametro("inc_ccf", ccf.Replace("\0","").Trim());
                proc.addParametro("inc_valor_troco", valor.Replace("\0","").Trim());
                proc.addParametro("inc_emissao", emissao.Replace("\0","").Trim());
                proc.addParametro("inc_cpf", cpf);
                proc.addParametro("inc_numero_titulo", title);
                proc.addParametro("inc_cnpj_recedora", alwaysVariables.CNPJ);
                if (cpf != null && cpf != "")
                {
                    proc.procedimentoRead();
                }
                else
                {
                    auxConsistencia = 1;
                }
            }
            catch (Exception erro)
            { msg = new msgInfo(1,"Caro Usúario: " + erro.Message); msg.ShowDialog(); auxConsistencia = 1;}
            finally
            {
                proc.fechaConexao(); if (title != "") { this.txtTitleCupomFiscalConectorCF.Invoke((MethodInvoker)delegate { txtTitleCupomFiscalConectorCF.Text = title; }); }
                if (auxConsistencia == 0)
                {
                    string test = "00000000";
                    if (fiscal_last_reducao_dataMovimento.Trim() != "" && fiscal_last_reducao_dataMovimento != "000000")
                    {
                        test = String.Format("{0:yyyyMMdd}", Convert.ToDateTime(fiscal_last_reducao_dataMovimento.Substring(0, 2) + "/" + fiscal_last_reducao_dataMovimento.Substring(2, 2) + "/" + String.Format("{0:ddMMyyyy}", DateTime.Now).Substring(4, 2) + fiscal_data_printer.Substring(4, 2)));
                    }
                    else
                    {
                        test = String.Format("{0:yyyyMMdd}", Convert.ToDateTime(fiscal_data_movimento.Substring(0, 2) + "/" + fiscal_data_movimento.Substring(2, 2) + "/" + String.Format("{0:ddMMyyyy}", DateTime.Now).Substring(4, 2) + fiscal_data_printer.Substring(4, 2)));
                    }
                    conector_update_lineMD5_h2_desconto(coo.Replace("\0","").Trim(), serie.Replace("\0","").Trim(), ccf.Replace("\0","").Trim(), conectorPDV_PAFECF_indicador("H2",test, fiscal_store.Replace("\0","").Trim(), serie.Replace("\0","").Trim(), coo.Replace("\0","").Trim(), ccf.Replace("\0","").Trim()));
                }
            }
        }
        public int conector_update_lineMD5_h2_desconto(string cupom, string serie, string ccf, string msg)
        {
            int retorno = 0;
            try
            {
                auxConsistencia = 0;
                title = proc.abreConexao();
                proc.singleTransaction("update `conectorpdv`.`identificacao_title_desconto` set cripto=?cripto where  ccf=?ccf and serie=?serie and coo=?coo");
                proc.addParametro("?cripto", msg);
                proc.addParametro("?ccf", ccf.Replace("\0","").Trim());
                proc.addParametro("?coo", cupom.Replace("\0","").Trim());
                proc.addParametro("?serie", serie);
                banco.procedimentoRead();
            }
            catch (Exception erro)
            {
                retorno = 0;
                auxConsistencia = 1;
            }
            finally
            {
                banco.fechaConexao(); if (title != "") { this.txtTitleCupomFiscalConectorCF.Invoke((MethodInvoker)delegate { txtTitleCupomFiscalConectorCF.Text = title; }); }
                if (auxConsistencia == 0)
                {
                    retorno = 1;
                    if (fiscal_Cupom_coo != "      ")
                    {
                    }
                }
            }
            return retorno;
        }

        public int conector_update_lineMD5_d02_dav(string reserva, string store, string dav)
        {
            int retorno = 0;
            try
            {
                auxConsistencia = 0;
                title = banco.abreConexao();
                banco.singleTransaction("update `conectorpdv`.`pedido` set cripto=?cripto where  idpedido=?reserva and idloja=?store");
                banco.addParametro("?cripto", dav);
                banco.addParametro("?reserva", reserva);
                banco.addParametro("?store", store);
                banco.procedimentoRead();
            }
            catch (Exception erro)
            {
                retorno = 0;
                auxConsistencia = 1;
            }
            finally
            {
                banco.fechaConexao(); if (title != "") { this.txtTitleCupomFiscalConectorCF.Invoke((MethodInvoker)delegate { txtTitleCupomFiscalConectorCF.Text = title; }); }
                if (auxConsistencia == 0)
                {
                    retorno = 1;
                }
            }
            return retorno;
        }

        public int conector_update_lineMD5_d03_descricaoItem(string reserva, string store, string dav, string prod, string seq)
        {
            int retorno = 0;
            try
            {
                auxConsistencia = 0;
                title = banco.abreConexao();
                banco.singleTransaction("update `conectorpdv`.`pedidoItensRelacionamento` set cripto=?cripto where  idpedido=?reserva and idloja=?store and idProduto=?prod and sequencial=?seq");
                banco.addParametro("?cripto", dav);
                banco.addParametro("?reserva", reserva);
                banco.addParametro("?store", store);
                banco.addParametro("?prod", prod);
                banco.addParametro("?seq", seq);
                banco.procedimentoRead();
            }
            catch (Exception erro)
            {
                retorno = 0;
                auxConsistencia = 1;
            }
            finally
            {
                banco.fechaConexao(); if (title != "") { this.txtTitleCupomFiscalConectorCF.Invoke((MethodInvoker)delegate { txtTitleCupomFiscalConectorCF.Text = title; }); }
                if (auxConsistencia == 0)
                {
                    retorno = 1;
                }
            }
            return retorno;
        }

        public int conector_update_lineMD5_r06_nao_fiscal(string cupom, string cx, string naofiscal)
        {
            int retorno = 0;
            try
            {
                auxConsistencia = 0;
                title = proc.abreConexao();
                proc.singleTransaction("update `conectorpdv`.`cupom_relatorio` set cripto=?cripto where  numeroCupom=?cupom and terminal=?cx and idloja=?store and emissao=?Var");
                proc.addParametro("?Var", String.Format("{0:ddMMyyyy}", DateTime.Now).Substring(4, 2) + fiscal_data_movimento.Substring(4, 2) + fiscal_data_movimento.Substring(2, 2) + fiscal_data_movimento.Substring(0, 2));
                proc.addParametro("?cripto", naofiscal);
                proc.addParametro("?cupom", cupom.Replace("\0","").Trim());
                proc.addParametro("?store", fiscal_store.Replace("\0","").Trim());
                proc.addParametro("?cx", cx);
                proc.procedimentoRead();
            }
            catch (Exception erro)
            {
                retorno = 0;
                auxConsistencia = 1;
            }
            finally
            {
                proc.fechaConexao(); if (title != "") { this.txtTitleCupomFiscalConectorCF.Invoke((MethodInvoker)delegate { txtTitleCupomFiscalConectorCF.Text = title; }); }
                if (auxConsistencia == 0)
                {
                    retorno = 1;
                    if (fiscal_Cupom_coo != "      ")
                    {
                    }
                }
            }
            return retorno;
        }

        public int conector_update_lineMD5_crypt(string cupom, string cx, string fiscal)//Confere o file de inicialização do ECF no dia de movimento
        {
            int retorno = 0;
            try
            {
                auxConsistencia = 0;
                title = banco.abreConexao();
                banco.singleTransaction("update `conectorpdv`.`fechamentocaixa` set cripto=?cripto where  contadorInicial=?cupom and terminal=?cx and loja=?store and dataMovimento=?Var");
                banco.addParametro("?Var", String.Format("{0:ddMMyyyy}", DateTime.Now).Substring(4, 2) + fiscal_data_movimento.Substring(4, 2) + fiscal_data_movimento.Substring(2, 2) + fiscal_data_movimento.Substring(0, 2));
                banco.addParametro("?cripto", fiscal);
                banco.addParametro("?cupom", cupom.Replace("\0","").Trim());
                banco.addParametro("?store", fiscal_store.Replace("\0","").Trim());
                banco.addParametro("?cx", cx);
                banco.procedimentoRead();
            }
            catch (Exception erro)
            {
                retorno = 0;
                auxConsistencia = 1;
            }
            finally
            {
                banco.fechaConexao(); if (title != "") { this.txtTitleCupomFiscalConectorCF.Invoke((MethodInvoker)delegate { txtTitleCupomFiscalConectorCF.Text = title; }); }
                if (auxConsistencia == 0)
                {
                    retorno = 1;
                    if (fiscal_Cupom_coo != "      ")
                    {
                    }
                }
            }
            return retorno;
        }
        public int conector_update_lineMD5_r01_fiscal(string serie, string crypt)
        {
            int retorno = 0;
            try
            {
                auxConsistencia = 0;
                title = banco.abreConexao();
                banco.singleTransaction("update ecf_r01 set r20=?cripto where r01=?serie");
                banco.addParametro("?cripto", crypt);
                banco.addParametro("?serie", serie.Replace("\0", "").Trim());
                banco.procedimentoRead();
            }
            catch (Exception erro)
            {
                retorno = 0;
                auxConsistencia = 1;
            }
            finally
            {
                banco.fechaConexao(); if (title != "") { this.txtTitleCupomFiscalConectorCF.Invoke((MethodInvoker)delegate { txtTitleCupomFiscalConectorCF.Text = title; }); }
                if (auxConsistencia == 0)
                {
                    
                }
            }
            return retorno;
        }
        public int conector_update_lineMD5_r07_fiscal(string cupom, string finaliza, string sequencia, string cx, string movimento, string anexo)
        {
            int retorno = 0;
            try
            {
                auxConsistencia = 0;
                title = proc.abreConexao();
                proc.singleTransaction("update `conectorpdv`.`cupom_movimento` set cripto=?cripto, md5_finalizadora=?anexo where  numeroCupom=?cupom and terminal=?cx and loja=?store and finalizadora=?finaliza and sequencia=?sequencia");
                proc.addParametro("?Var", String.Format("{0:ddMMyyyy}", DateTime.Now).Substring(4, 2) + fiscal_data_movimento.Substring(4, 2) + fiscal_data_movimento.Substring(2, 2) + fiscal_data_movimento.Substring(0, 2));
                proc.addParametro("?cripto", movimento);
                proc.addParametro("?cupom", cupom.Replace("\0","").Trim());
                proc.addParametro("?store", fiscal_store.Replace("\0","").Trim());
                proc.addParametro("?sequencia", sequencia);
                proc.addParametro("?cx", cx);
                proc.addParametro("?finaliza", finaliza);
                proc.addParametro("?anexo", anexo);
                proc.procedimentoRead();
            }
            catch (Exception erro)
            {
                retorno = 0;
                auxConsistencia = 1;
            }
            finally
            {
                proc.fechaConexao(); if (title != "") { this.txtTitleCupomFiscalConectorCF.Invoke((MethodInvoker)delegate { txtTitleCupomFiscalConectorCF.Text = title; }); }
                if (auxConsistencia == 0)
                {
                    retorno = 1;
                    if (fiscal_Cupom_coo != "      ")
                    {
                    }
                }
            }
            return retorno;
        }



        public int conector_update_lineMD5_r04(string cupom, string cx, string str)
        {
            int retorno = 0;
            try
            {
                auxConsistencia = 0;
                title = rmais.abreConexao();
                rmais.singleTransaction("update `conectorpdv`.`cupom_cabecalho` set cripto=?cripto where  numeroCupom=?cupom and terminal=?cx and loja=?store and dataVenda=?Var");
                rmais.addParametro("?Var", String.Format("{0:ddMMyyyy}", DateTime.Now).Substring(4, 2) + fiscal_data_movimento.Substring(4, 2) + fiscal_data_movimento.Substring(2, 2) + fiscal_data_movimento.Substring(0, 2));
                rmais.addParametro("?cripto", str);
                rmais.addParametro("?cupom", cupom.Replace("\0","").Trim());
                rmais.addParametro("?store", fiscal_store.Replace("\0","").Trim());
                rmais.addParametro("?sequencia", "0");
                rmais.addParametro("?cx", cx);
                rmais.addParametro("?prod", "0");
                rmais.procedimentoRead();
            }
            catch (Exception erro)
            {
                retorno = 0;
                auxConsistencia = 1;
            }
            finally
            {
                rmais.fechaConexao(); if (title != "") { this.txtTitleCupomFiscalConectorCF.Invoke((MethodInvoker)delegate { txtTitleCupomFiscalConectorCF.Text = title; }); }
                if (auxConsistencia == 0)
                {
                    retorno = 1;
                    if (fiscal_Cupom_coo != "      ")
                    {
                    }
                }
            }
            return retorno;
        }

        public void conector_altera_sangria(string seq, string store, string finaliza, string sangria, Int16 fator)
        {
            try
            {
                title = banco.abreConexao();
                if (fator == 1)
                {
                    banco.singleTransaction("update  fechamentoCaixa set totalsangrias=ifnull(totalsangrias,0)+?sangria where dataMovimento=?dataMovimento and loja=?store and terminal=?terminal and sequencia=?seq and funcionario=?funcionario");
                }
                else
                {
                    banco.singleTransaction("update  movimentoCaixa set sangria=sangria+?sangria where dataMovimento=?dataMovimento and loja=?store and terminal=?terminal and sequencia=?seq and funcionario=?funcionario and finalizadora=?finaliza and tipoCall=0");
                }
                banco.addParametro("?dataMovimento", String.Format("{0:yyyyMMdd}", Convert.ToDateTime(fiscal_data_movimento.Substring(0, 2) + "/" + fiscal_data_movimento.Substring(2, 2) + "/" + String.Format("{0:ddMMyyyy}", DateTime.Now).Substring(4, 2) + fiscal_data_printer.Substring(4, 2)))); //String.Format("{0:yyyyMMdd}", DateTime.Now)); //String.Format("{0:yyyyMMdd}", Convert.ToDateTime(alwaysVariables.XDataTime(lbDataMovimentoConectorCF.Text).ToString()))););
                banco.addParametro("?store", store.Replace("\0", "").Trim());
                banco.addParametro("?sangria", sangria);
                banco.addParametro("?seq", seq);
                banco.addParametro("?funcionario", sangria_operador_servico);
                banco.addParametro("?terminal", fiscal_numero_caixa.Replace("\0", "").Trim());
                banco.addParametro("?finaliza", finaliza);
                banco.procedimentoText();
            }
            catch (Exception erro)
            {
                msg = new msgInfo(1,erro.Message); msg.ShowDialog(); auxConsistencia = 1;
            }
            finally
            {
                banco.fechaConexao(); if (title != "") { this.txtTitleCupomFiscalConectorCF.Invoke((MethodInvoker)delegate { txtTitleCupomFiscalConectorCF.Text = title; }); }
                if (fator == 1)
                {
                    conector_altera_sangria(banco_sequencia, fiscal_store.Replace("\0", "").Trim() == "" ? alwaysVariables.Store : fiscal_store, sangria_finalizadora, sangria, 0);
                    txtVisorMsgConectorCF.Text = "SANGRIA FINALIZADA COM SUCESSO...!";
                    functionECF.conectorECF_RelatorioGerencial(alwaysVariables.ModeloEcf, "================================================ \n" + "             SANGRIA DE VALORES   \n" + "================================================ \n" + DateTime.Now.ToString() + "\n" + "================================================ \n", ref fiscal_MSG, ref fiscal_retorno, alwaysVariables.ECF_Ligada);
                    functionECF.conectorECF_RelatorioGerencial(alwaysVariables.ModeloEcf, "================================================ \n" + "           RECIBO DE CONFERENCIA   \n" + "================================================ \n" + DateTime.Now.ToString() + "\n" + "================================================ \n", ref fiscal_MSG, ref fiscal_retorno, alwaysVariables.ECF_Ligada);
                    //fiscal_retorno = conectorECF.Bematech_FI_RelatorioGerencial("================================================ \n" + "             SANGRIA DE VALORES   \n" + "================================================ \n" + DateTime.Now.ToString() + "\n" + "================================================ \n");
                    //fiscal_retorno = conectorECF.Bematech_FI_RelatorioGerencial("================================================ \n" + "           RECIBO DE CONFERENCIA   \n" + "================================================ \n" + DateTime.Now.ToString() + "\n" + "================================================ \n");
                    functionECF.conectorECF_UsaComprovanteNaoFiscalVinculado(alwaysVariables.ModeloEcf, "OPERADOR TRABALHO  : " + sangria_operador_servico + "          LOJA - " + alwaysVariables.Store, ref fiscal_MSG, ref fiscal_retorno, alwaysVariables.ECF_Ligada);
                    functionECF.conectorECF_UsaComprovanteNaoFiscalVinculado(alwaysVariables.ModeloEcf, "OPERADOR SACADOR   : " + sangria_operador_retirada + "          LOJA - " + alwaysVariables.Store + "\n", ref fiscal_MSG, ref fiscal_retorno, alwaysVariables.ECF_Ligada);
                    functionECF.conectorECF_UsaComprovanteNaoFiscalVinculado(alwaysVariables.ModeloEcf, "VALOR FINALIZADORA : " + sangria_valor_servico, ref fiscal_MSG, ref fiscal_retorno, alwaysVariables.ECF_Ligada);
                    functionECF.conectorECF_UsaComprovanteNaoFiscalVinculado(alwaysVariables.ModeloEcf, "VALOR SACADO       : " + sangria_valor_retirada + "\n", ref fiscal_MSG, ref fiscal_retorno, alwaysVariables.ECF_Ligada);
                    functionECF.conectorECF_UsaComprovanteNaoFiscalVinculado(alwaysVariables.ModeloEcf, "------------------------------------------------ ", ref fiscal_MSG, ref fiscal_retorno, alwaysVariables.ECF_Ligada);

                    /*fiscal_retorno = conectorECF.Bematech_FI_UsaComprovanteNaoFiscalVinculado("OPERADOR TRABALHO  : " + sangria_operador_servico + "          LOJA - " + alwaysVariables.Store );
                    fiscal_retorno = conectorECF.Bematech_FI_UsaComprovanteNaoFiscalVinculado("OPERADOR SACADOR   : " + sangria_operador_retirada + "          LOJA - " + alwaysVariables.Store + "\n");
                    fiscal_retorno = conectorECF.Bematech_FI_UsaComprovanteNaoFiscalVinculado("VALOR FINALIZADORA : " + sangria_valor_servico );
                    fiscal_retorno = conectorECF.Bematech_FI_UsaComprovanteNaoFiscalVinculado("VALOR SACADO       : " + sangria_valor_retirada + "\n");
                    fiscal_retorno = conectorECF.Bematech_FI_UsaComprovanteNaoFiscalVinculado("------------------------------------------------ ");*/
                    conectorPDV_find_finalizadora(sangria_finalizadora);

                    functionECF.conectorECF_UsaComprovanteNaoFiscalVinculado(alwaysVariables.ModeloEcf, "CODIGO FINALIZADORA RETIRADA  : " + sangria_finalizadora + "  " + auxDescricaoFinalizadora + "\n", ref fiscal_MSG, ref fiscal_retorno, alwaysVariables.ECF_Ligada);
                    functionECF.conectorECF_UsaComprovanteNaoFiscalVinculado(alwaysVariables.ModeloEcf, "ASSINATURA SACADOR ______________________________ ", ref fiscal_MSG, ref fiscal_retorno, alwaysVariables.ECF_Ligada);
                    functionECF.conectorECF_UsaComprovanteNaoFiscalVinculado(alwaysVariables.ModeloEcf, "================================================ \n", ref fiscal_MSG, ref fiscal_retorno, alwaysVariables.ECF_Ligada);

                    /*fiscal_retorno = conectorECF.Bematech_FI_UsaComprovanteNaoFiscalVinculado("CODIGO FINALIZADORA RETIRADA  : " + sangria_finalizadora + "  " + auxDescricaoFinalizadora + "\n");
                    fiscal_retorno = conectorECF.Bematech_FI_UsaComprovanteNaoFiscalVinculado("ASSINATURA SACADOR ______________________________ ");
                    fiscal_retorno = conectorECF.Bematech_FI_UsaComprovanteNaoFiscalVinculado("================================================ \n");*/
                    functionECF.conectorECF_FechaRelatorioGerencial(alwaysVariables.ModeloEcf, ref fiscal_MSG, ref fiscal_retorno, alwaysVariables.ECF_Ligada);
                    //fiscal_retorno = conectorECF.Bematech_FI_FechaRelatorioGerencial();
                    if (fiscal_retorno == 1 && functionECF.conectorECF_Analisa_RetornoImpressora(alwaysVariables.ModeloEcf,ref ACK, ref ST1, ref ST2, ref ST3, ref fiscal_MSG))
                    {
                        conectorPDV_inc_cupom_relatorio("RG", null); 
                    }
                    else
                    {
                        txtVisorMsgConectorCF.Text = functionECF.conectorECF_Erros(alwaysVariables.ModeloEcf);
                    }
                    txtVisorMsgConectorCF.Select();
                    txtEntradaDadosConectorCF.Clear();
                    if (alwaysVariables.ModoOperacao == 1)
                    {
                        txtEntradaDadosConectorCF.Select();
                    }
                    else
                    {
                        txtEntradaDadosNF.Select();
                    }
                }
            }
        }

        public int conectorPDV_alt_fechamentoCaixa()
        {
            try
            {
                functionECF.conectorECF_GrandeTotal(alwaysVariables.ModeloEcf, ref fiscal_GT, ref fiscal_MSG, ref fiscal_retorno, alwaysVariables.ECF_Ligada);
                //fiscal_retorno = conectorECF.Bematech_FI_GrandeTotal(ref fiscal_GT);
                //conectorECF.Analisa_iRetorno(fiscal_retorno, ref fiscal_MSG);
                functionECF.conectorECF_NumeroReducoes(alwaysVariables.ModeloEcf, ref fiscal_NumReducoes, ref fiscal_MSG, ref fiscal_retorno, alwaysVariables.ECF_Ligada);
                //fiscal_retorno = conectorECF.Bematech_FI_NumeroReducoes(ref fiscal_NumReducoes);
                //conectorECF.Analisa_iRetorno(fiscal_retorno, ref fiscal_MSG);
                functionECF.conectorECF_NumeroCuponsCancelados(alwaysVariables.ModeloEcf, ref fiscal_NumCuponsCanc, ref fiscal_MSG, ref fiscal_retorno, alwaysVariables.ECF_Ligada);
                //fiscal_retorno = conectorECF.Bematech_FI_NumeroCuponsCancelados(ref fiscal_NumCuponsCanc);
                //conectorECF.Analisa_iRetorno(fiscal_retorno, ref fiscal_MSG);
                functionECF.conectorECF_NumeroCupom(alwaysVariables.ModeloEcf, ref fiscal_Cupom, ref fiscal_MSG, ref fiscal_retorno, alwaysVariables.ECF_Ligada);
                //fiscal_retorno = conectorECF.Bematech_FI_NumeroCupom(ref fiscal_Cupom);
                //conectorECF.Analisa_iRetorno(fiscal_retorno, ref fiscal_MSG);
                functionECF.conectorECF_NumeroOperacoesNaoFiscais(alwaysVariables.ModeloEcf, ref fiscal_NumCuponsNaoFiscal, ref fiscal_MSG, ref fiscal_retorno, alwaysVariables.ECF_Ligada);
                fiscal_Cupom_gnf = fiscal_NumCuponsNaoFiscal;
                //fiscal_retorno = conectorECF.Bematech_FI_NumeroOperacoesNaoFiscais(ref fiscal_NumCuponsNaoFiscal);
                //conectorECF.Analisa_iRetorno(fiscal_retorno, ref fiscal_MSG);

                string money = new string('\x20', 15);
                string cheq = new string('\x20', 15);
                string cred = new string('\x20', 15);
                string vale = new string('\x20', 15);
                string card01 = new string('\x20', 15);
                string card02 = new string('\x20', 15);

                functionECF.conectorECF_ValorTotalizadorNaoFiscal(alwaysVariables.ModeloEcf, "RECEB DINHEIRO", ref money, ref fiscal_MSG, ref fiscal_retorno, alwaysVariables.ECF_Ligada);
                functionECF.conectorECF_ValorTotalizadorNaoFiscal(alwaysVariables.ModeloEcf, "RECEB CHEQUE", ref cheq, ref fiscal_MSG, ref fiscal_retorno, alwaysVariables.ECF_Ligada);
                functionECF.conectorECF_ValorTotalizadorNaoFiscal(alwaysVariables.ModeloEcf, "RECEB CREDIARIO", ref cred, ref fiscal_MSG, ref fiscal_retorno, alwaysVariables.ECF_Ligada);
                functionECF.conectorECF_ValorTotalizadorNaoFiscal(alwaysVariables.ModeloEcf, "RECEB CARTAO", ref card01, ref fiscal_MSG, ref fiscal_retorno, alwaysVariables.ECF_Ligada);
                functionECF.conectorECF_ValorTotalizadorNaoFiscal(alwaysVariables.ModeloEcf, "RECEB CARTAO", ref card02, ref fiscal_MSG, ref fiscal_retorno, alwaysVariables.ECF_Ligada);
                functionECF.conectorECF_ValorTotalizadorNaoFiscal(alwaysVariables.ModeloEcf, "RECEB VALE", ref vale, ref fiscal_MSG, ref fiscal_retorno, alwaysVariables.ECF_Ligada);

                        /*fiscal_retorno = conectorECF.Bematech_FI_ValorTotalizadorNaoFiscal("RECEB DINHEIRO", ref money);
                        fiscal_retorno = conectorECF.Bematech_FI_ValorTotalizadorNaoFiscal("RECEB CHEQUE", ref cheq);
                        fiscal_retorno = conectorECF.Bematech_FI_ValorTotalizadorNaoFiscal("RECEB CREDIARIO", ref cred);
                        fiscal_retorno = conectorECF.Bematech_FI_ValorTotalizadorNaoFiscal("RECEB CARTAO", ref card01);
                        fiscal_retorno = conectorECF.Bematech_FI_ValorTotalizadorNaoFiscal("RECEB CARTAO", ref card02);
                        fiscal_retorno = conectorECF.Bematech_FI_ValorTotalizadorNaoFiscal("RECEB VALE", ref vale);*/

                        money = money.Insert(12, ".");
                        money = money.Trim('0');

                        cheq = cheq.Insert(12, ".");
                        cheq = cheq.Trim('0');

                        cred = cred.Insert(12, ".");
                        cred = cred.Trim('0');

                        card01 = card01.Insert(12, ".");
                        card01 = card01.Trim('0');

                        card02 = card02.Insert(12, ".");
                        card02 = card02.Trim('0');

                        vale = vale.Insert(12, ".");
                        vale = vale.Trim('0');

                        try
                        {
                            fiscal_TotalNaoFiscal = (Convert.ToDecimal(money.Replace("\0", "").Trim()) + Convert.ToDecimal(cheq.Replace("\0", "").Trim()) + Convert.ToDecimal(cred.Replace("\0", "").Trim()) + Convert.ToDecimal(card01.Replace("\0", "").Trim()) + Convert.ToDecimal(card02.Replace("\0", "").Trim()) + Convert.ToDecimal(vale.Replace("\0", "").Trim())).ToString();
                        }
                        catch (Exception)
                        {
                            fiscal_TotalNaoFiscal = "0";
                        }

                title = banco.abreConexao();
                if (banco.statusSchema() == 1)
                {
                    this.lbStatusBancoConectorCF.Invoke((MethodInvoker)delegate { lbStatusBancoConectorCF.Text = "ON LINE"; });
                    this.lbStatusBancoConectorCF.Invoke((MethodInvoker)delegate { this.lbStatusBancoConectorCF.ForeColor = System.Drawing.Color.Cyan; });
                }
                else
                {
                    this.lbStatusBancoConectorCF.Invoke((MethodInvoker)delegate { lbStatusBancoConectorCF.Text = "OFF LINE"; });
                    this.lbStatusBancoConectorCF.Invoke((MethodInvoker)delegate { this.lbStatusBancoConectorCF.ForeColor = System.Drawing.Color.Red; });
                }
                banco.startTransaction("conectorPDV_alt_fechamentoCaixa");
                if (fiscal_data_movimento.Trim() != "" && fiscal_data_movimento != "000000")
                {
                    banco.addParametro("newdataMovimento", String.Format("{0:yyyyMMdd}", Convert.ToDateTime(fiscal_data_movimento.Substring(0, 2) + "/" + fiscal_data_movimento.Substring(2, 2) + "/" + String.Format("{0:ddMMyyyy}", DateTime.Now).Substring(4, 2) + fiscal_data_printer.Substring(4, 2)))); //String.Format("{0:yyyyMMdd}", DateTime.Now)); //String.Format("{0:yyyyMMdd}", Convert.ToDateTime(alwaysVariables.XDataTime(lbDataMovimentoConectorCF.Text).ToString()))););
                }
                else
                {
                    banco.addParametro("newdataMovimento", String.Format("{0:yyyyMMdd}", Convert.ToDateTime(fiscal_last_reducao_dataMovimento.Substring(0, 2) + "/" + fiscal_last_reducao_dataMovimento.Substring(2, 2) + "/" + String.Format("{0:ddMMyyyy}", DateTime.Now).Substring(4, 2) + fiscal_data_printer.Substring(4, 2)))); //String.Format("{0:yyyyMMdd}", DateTime.Now)); //String.Format("{0:yyyyMMdd}", Convert.ToDateTime(alwaysVariables.XDataTime(lbDataMovimentoConectorCF.Text).ToString()))););
                }
                banco.addParametro("newloja", alwaysVariables.Store);
                banco.addParametro("newterminal", fiscal_numero_caixa.Replace("\0", "").Trim());
                banco.addParametro("newfuncionario", banco_operado);
                banco.addParametro("newdataHoraSaida", String.Format("{0:yyyyMMdd}", DateTime.Now));
                banco.addParametro("newgrandeTotalEnd", (Convert.ToDecimal(fiscal_GT.Replace("\0", "").Trim())/100).ToString());
                banco.addParametro("newcontadorFinal", fiscal_Cupom.Replace("\0", "").Trim());

                banco.addParametro("newcancelado", (Convert.ToDecimal(fiscal_ValorCancelamentos.Replace("\0", "").Trim()) / 100).ToString());
                banco.addParametro("newdesconto", (Convert.ToDecimal(fiscal_ValorDescontos.Replace("\0", "").Trim()) / 100).ToString());
                banco.addParametro("newnumeroCupom", fiscal_Cupom.Replace("\0", "").Trim());
                banco.addParametro("newcontadorReducao", fiscal_NumReducoes.Replace("\0", "").Trim());
                banco.addParametro("newcontadorCancelados", fiscal_NumCuponsCanc.Replace("\0", "").Trim());
                banco.addParametro("newcontadorNaoFiscal", fiscal_NumCuponsNaoFiscal.Replace("\0", "").Trim());
                banco.addParametro("newtotalNotaFiscal", (Convert.ToDecimal(fiscal_TotalNaoFiscal.Replace("\0", "").Trim()) / 100).ToString());
                banco.addParametro("newtotalSangrias", (Convert.ToDecimal(fiscal_totalSangrias.Replace("\0", "").Trim() == "" ? "0" : fiscal_totalSangrias.Replace("\0", "").Trim()) / 100).ToString());
                banco.procedimentoRead();
                if (banco.retornaRead().Read() == true)
                {
                    auxConsistencia = 0;
                }
            }
            catch (Exception erro)
            { msg = new msgInfo(1,erro.Message); msg.ShowDialog(); auxConsistencia = 1; }
            finally
            {
                banco.fechaConexao(); if (title != "") { this.txtTitleCupomFiscalConectorCF.Invoke((MethodInvoker)delegate { txtTitleCupomFiscalConectorCF.Text = title; }); }
                if (call_pdv == 5)
                {
                    if (alwaysVariables.ModoOperacao == 1)
                    {
                        functionECF.conectorECF_GrandeTotal(alwaysVariables.ModeloEcf, ref fiscal_GT, ref fiscal_MSG, ref fiscal_retorno, alwaysVariables.ECF_Ligada);
                        //fiscal_retorno = conectorECF.Bematech_FI_GrandeTotal(ref fiscal_GT);
                        conector_verifica_venda_bruta(ref fiscal_banco_venda);
                        txtEntradaDadosConectorCF.Select();
                    }
                    else
                    {
                        txtEntradaDadosNF.Select();
                    }
                }
            }
            return auxConsistencia;
        }
        public void conector_acao_controleMenu()
        {
            conector_reset_input();
            this.lblVisorEntradaDadosConectorCF.Location = new System.Drawing.Point(235, 511);
            functionECF.conectorECF_fiscal_flag(alwaysVariables.ModeloEcf, ref fiscal_flag, ref fiscal_MSG, ref fiscal_retorno, alwaysVariables.ECF_Ligada);
            if (((fiscal_flag == 33 || fiscal_flag == 1 || fiscal_flag == 37) && call_pdv == 0 && Convert.ToDouble(fiscal_banco_cro) == Convert.ToDouble(fiscal_reducao_cro) && Convert.ToDouble(fiscal_banco_crz) == Convert.ToDouble(fiscal_reducao_crz)) ||
                ((fiscal_flag == 33 || fiscal_flag == 1 || fiscal_flag == 37) && call_pdv == 5 && Convert.ToDecimal(txtValorPagoConectorCF.Text.Replace(",", ".")) > 0) && Convert.ToDouble(fiscal_banco_cro) == Convert.ToDouble(fiscal_reducao_cro) && Convert.ToDouble(fiscal_banco_crz) == Convert.ToDouble(fiscal_reducao_crz))
            {
                msg = new msgInfo(1,"[COMANDO NEGADO] - VERIFIQUE O STATUS DA IMPRESSORA FISCAL."); msg.ShowDialog();
                if (call_funcao == 1)
                {
                    validaDesc = true;
                    call_funcao = 0;
                    sequenciaItemAle = "    ";
                    resetVariable();
                    resetLabel();
                    valuesAcresDesc = "    ";
                    if (call_pdv == 0)
                    {
                        txtVisorMsgConectorCF.Text = "CUPOM FISCAL";
                    }
                    else
                    {
                        txtVisorMsgConectorCF.Text = "MENU";
                    }
                    if (alwaysVariables.ModoOperacao == 1)
                    {
                        txtEntradaDadosConectorCF.Select();
                    }
                    else
                    {
                        txtEntradaDadosNF.Select();
                    }

                }
                else
                {
                    call_funcao = 0;
                }
            }
            else if (Convert.ToDecimal(txtValorPagoConectorCF.Text.Replace(",", ".")) > 0 && fiscal_flag == 0)
            {
                msg = new msgInfo(1,"[COMANDO NEGADO] - FORMA DE PAGAMENTO INICIADA, VERIFIQUE O STATUS DA IMPRESSORA FISCAL."); msg.ShowDialog();
            }
            else if (alwaysVariables.ECF_Ligada != -6 && (Convert.ToDouble(fiscal_banco_crz) > Convert.ToDouble(fiscal_reducao_crz)) && call_pdv == 0)
            {
                call_pdv = 1;
                conector_acao_cancelaCupom();
                conector_acao_carregaMenu();
                txtEntradaDadosConectorCF.Clear();
                lblVisorEntradaDadosConectorCF.Text = "ENTRADA DE DADOS";
                txtVisorMsgConectorCF.Text = "MENU - CONECTORPDV";
                pnlAutorizacaoPDVConectorCF.Visible = true;
                this.pnlAutorizacaoPDVConectorCF.Location = new System.Drawing.Point(0, 92);
                this.pnlAutorizacaoPDVConectorCF.Size = new System.Drawing.Size(649, 233);
                txtEntradaDadosConectorCF.CausesValidation = false;
                txtAutorizacaoUsuarioConectorCF.CausesValidation = false;
                txtAutorizacaoUsuarioConectorCF.Select();
                txtAutorizacaoUsuarioConectorCF.CausesValidation = true;
                txtEntradaDadosConectorCF.CausesValidation = true;
            }
            else
            {
                if (pnlResumoVendaConectorCF.Visible == true)
                {
                    conectorPDV_resumo_venda(false);
                    txtEntradaDadosConectorCF.ReadOnly = false;
                    txtEntradaDadosConectorCF.Clear();
                    //txtEntradaDadosConectorCF.CausesValidation = false;
                    txtEntradaDadosConectorCF.CausesValidation = true;
                    txtEntradaDadosConectorCF.Select();
                }
                else
                {


                    call_finalizadora = null;
                    typeDescAcre = 0;
                    this.txtEntradaDadosConectorCF.Font = new System.Drawing.Font("Microsoft Sans Serif", 38F, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
                    txtAutorizacaoUsuarioConectorCF.CausesValidation = true;
                    this.lblVisorEntradaDadosConectorCF.Location = new System.Drawing.Point(284, 511);
                    this.txtEntradaDadosConectorCF.Font = new System.Drawing.Font("Microsoft Sans Serif", 38F, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
                    call_funcao = 0;
                    conector_reset_discount();

                    if (call_funcao == 6)
                    {
                        call_funcao = 0;
                        txtVisorMsgConectorCF.Text = "MENU - CONECTORPDV";
                        this.lblVisorEntradaDadosConectorCF.Location = new System.Drawing.Point(284, 511);
                        lblVisorEntradaDadosConectorCF.Text = "ENTRADA DE DADOS";
                        txtDescricaoItemConectorCF.Enabled = true;
                        txtEntradaDadosConectorCF.ReadOnly = false;
                        txtEntradaDadosConectorCF.Clear();
                        txtEntradaDadosConectorCF.CausesValidation = true;
                        if (alwaysVariables.ModoOperacao == 1)
                        {
                            txtEntradaDadosConectorCF.Select();
                        }
                        else
                        {
                            txtEntradaDadosNF.Select();
                        }
                    }
                    else if (pnlTotalConectorCF.Visible == false)
                    {
                        vetorTotal = null;
                        fechaMoneyObj(true);
                        if (call_pdv == 7)
                        {
                            if (fiscal_flag == 33 || fiscal_flag == 37)
                            {
                                resetLabel();
                                call_pdv = 0;
                                txtEntradaDadosConectorCF.Clear();
                                if (alwaysVariables.ModoOperacao == 1)
                                {
                                    txtEntradaDadosConectorCF.Select();
                                }
                                else
                                {
                                    txtEntradaDadosNF.Select();
                                }
                                txtVisorMsgConectorCF.Text = "CUPOM FISCAL ABERTO";
                            }
                        }
                        else if (call_pdv == 10)
                        {
                            call_pdv = 0;
                            conectorPDV_interface_notaFiscalD(false);
                            txtVisorMsgConectorCF.Text = "CAIXA ABERTO";
                            lblVisorEntradaDadosConectorCF.Text = "ENTRADA DE DADOS";
                            pnlNotaDConectorCF.Visible = false;
                            txtEntradaDadosConectorCF.CausesValidation = true;
                            if (alwaysVariables.ModoOperacao == 1)
                            {
                                txtEntradaDadosConectorCF.Select();
                            }
                            else
                            {
                                txtEntradaDadosNF.Select();
                            }
                        }
                        else if (call_pdv == 6)
                        {
                            txtNumeroReservaConectorCF.Clear();
                            txtNumeroReservaConectorCF.Text = "";
                            call_pdv = 0;
                            objFinanceiro(false);
                            txtVisorMsgConectorCF.Text = "CAIXA ABERTO";
                            lblVisorEntradaDadosConectorCF.Text = "ENTRADA DE DADOS";
                            pnlReservaConectorCF.Visible = false;
                            if (alwaysVariables.ModoOperacao == 1)
                            {
                                txtEntradaDadosConectorCF.Select();
                            }
                            else
                            {
                                txtEntradaDadosNF.Select();
                            }
                        }
                        else if (call_pdv == 5)
                        {
                            conector_interface_crediario(true);
                            fechaMoneyObj(true);
                            call_pdv = 0;
                            txtAutorizacaoUsuarioConectorCF.Select();
                            txtVisorMsgConectorCF.Text = "PDV - BLOQUEADO";
                            lblVisorEntradaDadosConectorCF.Text = "ENTRADA DE DADOS";

                        }
                        else if (call_pdv == 4)
                        {
                            call_pdv = 0;
                            conector_reset_input();
                            txtEntradaDadosConectorCF.Clear();
                            txtVisorMsgConectorCF.Text = "CAIXA ABERTO";
                            lblVisorEntradaDadosConectorCF.Text = "ENTRADA DE DADOS";
                            txtEntradaDadosConectorCF.CausesValidation = true;
                            txtEntradaDadosConectorCF.ReadOnly = false;
                            if (alwaysVariables.ModoOperacao == 1)
                            {
                                if (alwaysVariables.ModoOperacao == 1)
                                {
                                    txtEntradaDadosConectorCF.Select();
                                }
                                else
                                {
                                    txtEntradaDadosNF.Select();
                                }
                            }
                            else
                            {
                                txtEntradaDadosNF.Select();
                            }
                        }
                        else if (call_pdv == 0) //Entra no menu
                        {
                            call_funcao = 0;
                            if (call_funcao == 1)
                            {
                                pnlAutorizacaoPDVConectorCF.Visible = false;
                                txtEntradaDadosConectorCF.ReadOnly = false;
                                call_funcao = 0;
                                sequenciaItemAle = "    ";
                                resetVariable();
                                resetLabel();
                                valuesAcresDesc = "    ";
                                if (alwaysVariables.ModoOperacao == 1)
                                {
                                    txtEntradaDadosConectorCF.Select();
                                }
                                else
                                {
                                    txtEntradaDadosNF.Select();
                                }
                            }
                            if (fiscal_flag != 33 && fiscal_flag != 1 && fiscal_flag != 37)
                            {
                                call_pdv = 1;
                                resetLabel();
                                resetVariable();
                                conector_reset_input();
                                conector_acao_carregaMenu();
                            }
                            else if (fiscal_flag == 35)
                            {
                                msg = new msgInfo(1, "PAGAMENTO INICIADO"); msg.ShowDialog();
                            }
                            else if (fiscal_flag == 33 || fiscal_flag == 37)
                            {
                                msg = new msgInfo(1, "CUPOM INICIADO, OU SEJA, ESTA ABERTO PARA O REGISTRO DE ITENS."); msg.ShowDialog();
                                txtVisorMsgConectorCF.Text = "PDV - BLOQUEADO";
                                lblVisorEntradaDadosConectorCF.Text = "ENTRADA DE DADOS";
                                txtEntradaDadosConectorCF.CausesValidation = false;
                                txtEntradaDadosConectorCF.ReadOnly = true;

                            }
                            else
                            {
                                txtVisorMsgConectorCF.Text = "MENU - CONECTORPDV";
                                resetLabel();
                                resetVariable();
                                conector_reset_input();
                                conector_acao_carregaMenu();
                                lblVisorEntradaDadosConectorCF.Text = "ENTRADA DE DADOS";
                                txtEntradaDadosConectorCF.Clear();
                            }

                            pnlAutorizacaoPDVConectorCF.Visible = true;
                            this.pnlAutorizacaoPDVConectorCF.Location = new System.Drawing.Point(0, 92);
                            this.pnlAutorizacaoPDVConectorCF.Size = new System.Drawing.Size(649, 233);
                            txtEntradaDadosConectorCF.CausesValidation = false;
                            txtAutorizacaoUsuarioConectorCF.CausesValidation = false;
                            txtAutorizacaoUsuarioConectorCF.Select();
                            txtAutorizacaoUsuarioConectorCF.CausesValidation = true;
                            txtEntradaDadosConectorCF.CausesValidation = true;
                        }
                        else if (call_pdv == 1)// && fiscal_flag != 33 && fiscal_flag != 1) //Retorna ao caixa
                        {
                            conector_reset_input();
                            if (fiscal_flag != 33 && fiscal_flag != 1)
                            {
                                if (((Convert.ToInt32(banco_operado) <= 0) || (Convert.ToDouble(fiscal_data_movimento.Replace("\0", "").Trim() == "" ? "0" : fiscal_data_movimento) <= 0))) //|| (Convert.ToInt32(lbOperadorConectorCF.Text == "" ? "0":lbOperadorConectorCF.Text) <= 0))
                                {
                                    call_pdv = 1;
                                    txtEntradaDadosConectorCF.Clear();
                                    lblVisorEntradaDadosConectorCF.Text = "ENTRADA DE DADOS";
                                    txtVisorMsgConectorCF.Text = "MENU - CONECTORPDV";
                                }
                                else
                                {
                                    call_pdv = 0;
                                    conector_reset_input();
                                    txtEntradaDadosConectorCF.Clear();
                                    txtVisorMsgConectorCF.Text = "PDV - BLOQUEADO";
                                    lblVisorEntradaDadosConectorCF.Text = "ENTRADA DE DADOS";
                                    txtEntradaDadosConectorCF.CausesValidation = false;
                                    txtEntradaDadosConectorCF.ReadOnly = true;
                                    txtAutorizacaoUsuarioConectorCF.Select();
                                }
                                pnlAutorizacaoPDVConectorCF.Visible = true;
                                this.pnlAutorizacaoPDVConectorCF.Location = new System.Drawing.Point(0, 92);
                                this.pnlAutorizacaoPDVConectorCF.Size = new System.Drawing.Size(649, 233);
                                txtEntradaDadosConectorCF.CausesValidation = false;
                                txtAutorizacaoUsuarioConectorCF.CausesValidation = false;
                                txtAutorizacaoUsuarioConectorCF.Select();
                                txtAutorizacaoUsuarioConectorCF.CausesValidation = true;
                                txtEntradaDadosConectorCF.CausesValidation = true;
                            }
                            else
                            {
                                if (((fiscal_flag == 33 || fiscal_flag == 1 || fiscal_flag == 32) && (call_pdv == 0 && Convert.ToDouble(fiscal_banco_cro) > Convert.ToDouble(fiscal_reducao_cro)))
                                    || ((fiscal_flag == 33 || fiscal_flag == 1 || fiscal_flag == 32) && (call_pdv == 0 && Convert.ToDouble(fiscal_banco_crz) > Convert.ToDouble(fiscal_reducao_crz))))
                                {
                                    call_pdv = 1;
                                    conector_acao_cancelaCupom();
                                    txtEntradaDadosConectorCF.Clear();
                                    lblVisorEntradaDadosConectorCF.Text = "ENTRADA DE DADOS";
                                    txtVisorMsgConectorCF.Text = "MENU - CONECTORPDV";
                                    pnlAutorizacaoPDVConectorCF.Visible = true;
                                    this.pnlAutorizacaoPDVConectorCF.Location = new System.Drawing.Point(0, 92);
                                    this.pnlAutorizacaoPDVConectorCF.Size = new System.Drawing.Size(649, 233);
                                    txtEntradaDadosConectorCF.CausesValidation = false;
                                    txtAutorizacaoUsuarioConectorCF.CausesValidation = false;
                                    txtAutorizacaoUsuarioConectorCF.Select();
                                    txtAutorizacaoUsuarioConectorCF.CausesValidation = true;
                                    txtEntradaDadosConectorCF.CausesValidation = true;

                                }
                                if (fiscal_flag == 33 || fiscal_flag == 1)//Cancelamento do ultimo cupom liberado/Cupom atual aberto
                                {
                                    conectorPDV_load_cupom(fiscal_Cupom, alwaysVariables.Store, fiscal_numero_caixa, 0);
                                    call_pdv = 0;
                                }
                                else if (fiscal_flag == 35)//Cancelamento do ultimo cupom liberado/Cupom atual aberto/Pagamento Iniciado
                                {
                                    pnlTotalConectorCF.Visible = true;
                                    resetLabel();

                                    conectorPDV_load_cupom(fiscal_Cupom, alwaysVariables.Store, fiscal_numero_caixa, 0);
                                    call_pdv = 0;
                                }
                            }
                            //Contruir find
                        }
                        else if (call_pdv == 8)
                        {
                            if (ataque == 0)
                            {
                                conector_reset_input();
                                txtEntradaDadosConectorCF.Clear();
                                conector_interface_menuFiscal(false);
                                txtVisorMsgConectorCF.Text = "CAIXA ABERTO";
                                lblVisorEntradaDadosConectorCF.Text = "ENTRADA DE DADOS";
                                call_pdv = 0;
                                call_funcao = 0;
                                txtEntradaDadosConectorCF.CausesValidation = true;
                                txtEntradaDadosConectorCF.ReadOnly = false;
                                if (alwaysVariables.ModoOperacao == 1)
                                {
                                    txtEntradaDadosConectorCF.Select();
                                }
                                else
                                {
                                    txtEntradaDadosNF.Select();
                                }
                            }
                            else
                            {
                                conector_interface_menuFiscal(false);
                                txtVisorMsgConectorCF.Text = "MENU CONECTORPDV";
                                lblVisorEntradaDadosConectorCF.Text = "ENTRADA DE DADOS";
                                resetLabel();
                                resetVariable();
                                conector_reset_input();
                                conector_acao_carregaMenu();
                                call_pdv = 1;
                                call_funcao = 0;
                                txtEntradaDadosConectorCF.CausesValidation = true;
                                txtEntradaDadosConectorCF.ReadOnly = false;
                                if (alwaysVariables.ModoOperacao == 1)
                                {
                                    txtEntradaDadosConectorCF.Select();
                                }
                                else
                                {
                                    txtEntradaDadosNF.Select();
                                }

                            }
                        }
                        else if (call_pdv == 9)
                        {
                            call_pdv = call_produto;
                            ProcessTabKey(true);
                            this.pnlConsultaProduto.Size = new System.Drawing.Size(1, 1);
                            this.pnlConsultaProduto.Location = new System.Drawing.Point(1268, 608);
                            this.pnlConsultaProduto.Visible = false;
                            lblVisorEntradaDadosConectorCF.Text = "ENTRADA DE DADOS";
                            txtDescricaoItemConectorCF.Enabled = true;
                            txtEntradaDadosConectorCF.Enabled = true;
                            txtEntradaDadosConectorCF.ReadOnly = false;
                            txtEntradaDadosConectorCF.Clear();
                            //txtEntradaDadosConectorCF.CausesValidation = false;
                            txtEntradaDadosConectorCF.CausesValidation = true;
                            if (alwaysVariables.ModoOperacao == 1)
                            {
                                txtEntradaDadosConectorCF.Select();
                            }
                            else
                            {
                                txtEntradaDadosNF.Select();
                            }
                            /* Verifica status da ECF */
                            functionECF.conectorECF_fiscal_flag(alwaysVariables.ModeloEcf, ref fiscal_flag, ref fiscal_MSG, ref fiscal_retorno, alwaysVariables.ECF_Ligada);

                            if (fiscal_flag == 33 || fiscal_flag == 1)
                            {
                                txtVisorMsgConectorCF.Text = "CUPOM FISCAL ABERTO";
                            }
                            else if (fiscal_flag == 32)
                            {
                                txtVisorMsgConectorCF.Text = "CAIXA ABERTO";
                            }
                            else if (fiscal_flag == 0 && Convert.ToInt64(fiscal_data_movimento) > 0 && Convert.ToInt16(lbOperadorConectorCF.Text) > 0)
                            {
                                txtVisorMsgConectorCF.Text = "CAIXA ABERTO";
                            }
                            else if (fiscal_flag == 35)
                            {
                                txtVisorMsgConectorCF.Text = "PAGAMENTO INICIADO";
                            }
                        }
                    }
                    else
                    {
                        fechaMoneyObj(false);
                        resetFinanceiro();
                        call_pdv = 0;
                        btnFinalizadoraDinheiroConectorCF.Select();
                        ProcessTabKey(true);
                        this.pnlTotalConectorCF.Size = new System.Drawing.Size(1, 1);
                        this.pnlTotalConectorCF.Location = new System.Drawing.Point(746, 607);
                        this.pnlTotalConectorCF.Visible = false;
                        lblVisorEntradaDadosConectorCF.Text = "ENTRADA DE DADOS";
                        txtDescricaoItemConectorCF.Enabled = true;
                        txtEntradaDadosConectorCF.Enabled = true;
                        txtEntradaDadosConectorCF.ReadOnly = false;
                        txtEntradaDadosConectorCF.Clear();
                        //txtEntradaDadosConectorCF.CausesValidation = false;
                        txtEntradaDadosConectorCF.CausesValidation = true;
                        if (alwaysVariables.ModoOperacao == 1)
                        {
                            txtEntradaDadosConectorCF.Select();
                        }
                        else
                        {
                            txtEntradaDadosNF.Select();
                        }
                        /* Verifica status da ECF */
                        functionECF.conectorECF_fiscal_flag(alwaysVariables.ModeloEcf, ref fiscal_flag, ref fiscal_MSG, ref fiscal_retorno, alwaysVariables.ECF_Ligada);

                        if (fiscal_flag == 33 || fiscal_flag == 1 || fiscal_flag == 37)
                        {
                            txtVisorMsgConectorCF.Text = "CUPOM FISCAL ABERTO";
                        }
                        else if (fiscal_flag == 32 || fiscal_flag == 36)
                        {
                            txtVisorMsgConectorCF.Text = "CAIXA ABERTO";
                        }
                        else if (fiscal_flag == 0 && Convert.ToInt64(fiscal_data_movimento) > 0 && Convert.ToInt16(lbOperadorConectorCF.Text) > 0)
                        {
                            txtVisorMsgConectorCF.Text = "CAIXA ABERTO";
                        }
                        else if (fiscal_flag == 35)
                        {
                            txtVisorMsgConectorCF.Text = "PAGAMENTO INICIADO";
                        }
                    }
                }
            }
        }
        public void conector_acao_cancelaCupom()
        {
            functionECF.conectorECF_NumeroCupom(alwaysVariables.ModeloEcf, ref fiscal_Cupom, ref fiscal_MSG, ref fiscal_retorno, alwaysVariables.ECF_Ligada);
            //fiscal_retorno = conectorECF.Bematech_FI_NumeroCupom(ref fiscal_Cupom);
            //conectorECF.Analisa_iRetorno(fiscal_retorno, ref fiscal_MSG);
            functionECF.conectorECF_fiscal_flag(alwaysVariables.ModeloEcf, ref fiscal_flag, ref fiscal_MSG, ref fiscal_retorno, alwaysVariables.ECF_Ligada);
            if ((conector_numero_cupom(fiscal_Cupom.Replace("\0", "").Trim()) > 0) || fiscal_flag == 33 || fiscal_flag == 35 || fiscal_flag == 39 || fiscal_flag == 37)
            {
                if (fiscal_flag == 32)
                {
                    functionECF.conectorECF_CancelaCupom(alwaysVariables.ModeloEcf, ref fiscal_MSG, ref fiscal_retorno, alwaysVariables.ECF_Ligada);
                    //fiscal_retorno = conectorECF.Bematech_FI_CancelaCupom();
                    if (functionECF.conectorECF_Analisa_RetornoImpressora(alwaysVariables.ModeloEcf,ref ACK, ref ST1, ref ST2, ref ST3, ref fiscal_MSG))
                    {
                        pedido = "0";
                        resetLabel();
                        resetVariable();
                        ltbDetalhesConectorCF.Clear();
                        ltbDetalhesConectorCF.Text = " ITEM  CÓDIGO  DESCRIÇÃO QTD  UN VL UNIT(R$) ST VL ITEM(R$)" + "\r\n" +
                                                     "===========================================================";
                        conectorPDV_exe_cupom(fiscal_Cupom, fiscal_numero_caixa, produto_barra);
                        if (auxConsistencia == 0)
                        {
                            File.Delete(@"C:\conector\transmissao\semaforo.txt");
                            txtVisorMsgConectorCF.Text = "CUPOM FISCAL CANCELADO";
                            txtSubTotalConectorCF.Text = "0,00";
                        }
                    }
                    else
                    { txtVisorMsgConectorCF.Text = functionECF.conectorECF_Erros(alwaysVariables.ModeloEcf); }
                    
                    
                }
                else if (fiscal_flag == 33 || fiscal_flag == 35 || fiscal_flag == 39 || fiscal_flag == 37)
                {
                    //fiscal_retorno = conectorECF.Bematech_FI_CancelaCupom();
                    functionECF.conectorECF_CancelaCupom(alwaysVariables.ModeloEcf, ref fiscal_MSG, ref fiscal_retorno, alwaysVariables.ECF_Ligada);
                    if (functionECF.conectorECF_Analisa_RetornoImpressora(alwaysVariables.ModeloEcf,ref ACK, ref ST1, ref ST2, ref ST3, ref fiscal_MSG))
                    {
                        pedido = "0";
                        functionECF.conectorECF_fiscal_flag(alwaysVariables.ModeloEcf, ref fiscal_flag, ref fiscal_MSG, ref fiscal_retorno, alwaysVariables.ECF_Ligada);
                        conectorPDV_exe_cupom(fiscal_Cupom, fiscal_numero_caixa, produto_barra);
                        resetLabel();
                        resetVariable();
                        ltbDetalhesConectorCF.Clear();
                        ltbDetalhesConectorCF.Text = " ITEM  CÓDIGO  DESCRIÇÃO QTD  UN VL UNIT(R$) ST VL ITEM(R$)" + "\r\n" +
                                                     "===========================================================";
                        instrucao.carregaListaReparo();//Reprocesso
                        File.Delete(@"C:\conector\transmissao\semaforo.txt");
                        if (auxConsistencia == 0)
                        {
                            txtEntradaDadosConectorCF.Clear();
                            txtVisorMsgConectorCF.Text = "CUPOM FISCAL CANCELADO";
                            txtSubTotalConectorCF.Text = "0,00";
                        }
                    }
                    else
                    {
                        txtVisorMsgConectorCF.Text = functionECF.conectorECF_Erros(alwaysVariables.ModeloEcf);
                    }
                }
                else
                {
                    msg = new msgInfo(1,"ULTIMO DOCUMENTO NÃO É UM CUPOM FISCAL OU JÁ FOI UM DOCUMENTO CANCELADO - IMPOSSÍVEL EXECUTAR ESSA FUNÇÃO"); msg.ShowDialog();
                }
            }
            else
            {
                msg = new msgInfo(1,"ULTIMO DOCUMENTO NÃO É UM CUPOM FISCAL OU JÁ FOI UM DOCUMENTO CANCELADO - IMPOSSÍVEL EXECUTAR ESSA FUNÇÃO"); msg.ShowDialog();
            }
            lblVisorEntradaDadosConectorCF.Text = "ENTRADA DE DADOS";
            if (alwaysVariables.ModoOperacao == 1)
            {
                txtEntradaDadosConectorCF.Select();
            }
            else
            {
                txtEntradaDadosNF.Select();
            }
        }
        public void conector_acao_carregaMenu()
        {
            ltbDetalhesConectorCF.Clear();
            countRows = 0;
            auxConsistencia = 0;
            try
            {
                title = banco.abreConexao();
                if (banco.statusSchema() == 1)
                {
                    this.lbStatusBancoConectorCF.Invoke((MethodInvoker)delegate { lbStatusBancoConectorCF.Text = "ON LINE"; });
                    this.lbStatusBancoConectorCF.Invoke((MethodInvoker)delegate { this.lbStatusBancoConectorCF.ForeColor = System.Drawing.Color.Cyan; });
                }
                else
                {
                    this.lbStatusBancoConectorCF.Invoke((MethodInvoker)delegate { lbStatusBancoConectorCF.Text = "OFF LINE"; });
                    this.lbStatusBancoConectorCF.Invoke((MethodInvoker)delegate { this.lbStatusBancoConectorCF.ForeColor = System.Drawing.Color.Red; });
                }
                banco.startTransaction("acao_pdv_carregaBegin");
                banco.procedimentoSet();
            }
            catch (Exception erro)
            { msg = new msgInfo(1,erro.Message); msg.ShowDialog(); auxConsistencia = 1; }
            finally
            {
                if (auxConsistencia == 0)
                {
                    countRows = banco.retornaSet().Tables[0].DefaultView.Count;
                    if (countRows > 0)
                    {
                        for (i = 0; i < countRows; i++)
                        {
                            ltbDetalhesConectorCF.Text += banco.retornaSet().Tables[0].Rows[i][0] + "\r\n".ToUpper();
                            //ltbDetalhesConectorCF.Text += "___________________________________________________________" + "\r\n";
                            //ltbDetalhesConectorCF.Select(ltbDetalhesConectorCF.Text.Length, 0);
                            //ltbDetalhesConectorCF.ScrollToCaret();
                        }
                    }
                }
                banco.fechaConexao(); if (title != "") { this.txtTitleCupomFiscalConectorCF.Invoke((MethodInvoker)delegate { txtTitleCupomFiscalConectorCF.Text = title; }); }
                if (auxConsistencia == 0)
                {
                    txtSubTotalConectorCF.Text = "0,00";
                    txtEntradaDadosConectorCF.CausesValidation = false;
                    if (workBalanca != null)
                    {
                        workBalanca.RequestStop(true);
                    }
                    if (alwaysVariables.ModoOperacao == 1)
                    {
                        txtEntradaDadosConectorCF.Select();
                    }
                    else
                    {
                        txtEntradaDadosNF.Select();
                    }
                    txtEntradaDadosConectorCF.CausesValidation = true;
                    txtTitleCupomFiscalConectorCF.Text = "MENU";
                    txtVisorMsgConectorCF.Text = "MENU - CONECTORPDV";
                }
            }
        }
        public int conector_funcionario(string id)
        {
            int retorno = 0;
            try
            {
                title = banco.abreConexao();
                banco.singleTransaction("select idfuncionario, nome, passwd from conectorpdv.funcionario where idLoja=?VarStore and status=0 and idfuncionario=?Var");
                banco.addParametro("?VarStore", alwaysVariables.Store);
                banco.addParametro("?Var", id);
                banco.procedimentoRead();
                if (banco.retornaRead().Read() == true)
                {
                    banco_operado = banco.retornaRead().GetString(0);
                    retorno = 1;
                }
            }
            catch (Exception erro)
            {
                retorno = 0;
            }
            finally
            {
                banco.fechaConexao(); if (title != "") { this.txtTitleCupomFiscalConectorCF.Invoke((MethodInvoker)delegate { txtTitleCupomFiscalConectorCF.Text = title; }); }
            }
            return retorno;
        }

        public int conector_numero_cupom(string id)
        {
            int retorno = 0;
            try
            {
                title = banco.abreConexao();
                banco.singleTransaction("SELECT count(*) FROM conectorpdv.cupom_cabecalho where numeroCupom=?Var");
                banco.addParametro("?Var", id.Replace("\0","").Trim());
                banco.procedimentoRead();
                if (banco.retornaRead().Read() == true)
                {
                    retorno = Convert.ToInt32(banco.retornaRead().GetString(0));
                }
                else
                {
                    retorno = 0;
                }
            }
            catch (Exception erro)
            {
                retorno = 0;
            }
            finally
            {
                banco.fechaConexao(); if (title != "") { this.txtTitleCupomFiscalConectorCF.Invoke((MethodInvoker)delegate { txtTitleCupomFiscalConectorCF.Text = title; }); }
            }
            return retorno;
        }
        
        public int conector_last_funcionario(string pdv, string store, string mov)
        {
            int retorno = 0;
            try
            {
                title = banco.abreConexao();
                banco.singleTransaction("SELECT funcionario, max(sequencia) FROM conectorpdv.fechamentoCaixa where dataMovimento=?Mov and loja=?Store and terminal=?PDV group by 1 desc;");
                banco.addParametro("?Store", store.Replace("\0", "").Trim());
                banco.addParametro("?PDV", pdv.Replace("\0", "").Trim());
                banco.addParametro("?Mov", String.Format("{0:yyyyMMdd}", Convert.ToDateTime(fiscal_data_movimento.Substring(0, 2) + "/" + fiscal_data_movimento.Substring(2, 2) + "/" + String.Format("{0:ddMMyyyy}", DateTime.Now).Substring(4, 2) + fiscal_data_printer.Substring(4, 2)))); //String.Format("{0:yyyyMMdd}", DateTime.Now)); //String.Format("{0:yyyyMMdd}", Convert.ToDateTime(alwaysVariables.XDataTime(lbDataMovimentoConectorCF.Text).ToString())));
                banco.procedimentoRead();
                if (banco.retornaRead().Read() == true)
                {
                    banco_operado = banco.retornaRead().GetString(0);
                    retorno = -1;
                }
            }
            catch (Exception erro)
            {
                retorno = 0;
            }
            finally
            {
                banco.fechaConexao(); if (title != "") { this.txtTitleCupomFiscalConectorCF.Invoke((MethodInvoker)delegate { txtTitleCupomFiscalConectorCF.Text = title; }); }
            }
            return retorno;
        }

        #region
        public void conector_produto(string barra, string store, string id, ref int test)
        {
            auxConsistencia = 0;
            try
            {
                title = banco.abreConexao();
                if (banco.statusSchema() == 1)
                {
                    this.lbStatusBancoConectorCF.Invoke((MethodInvoker)delegate { lbStatusBancoConectorCF.Text = "ON LINE"; });
                    this.lbStatusBancoConectorCF.Invoke((MethodInvoker)delegate { this.lbStatusBancoConectorCF.ForeColor = System.Drawing.Color.Cyan; });
                }
                else
                {
                    this.lbStatusBancoConectorCF.Invoke((MethodInvoker)delegate { lbStatusBancoConectorCF.Text = "OFF LINE"; });
                    this.lbStatusBancoConectorCF.Invoke((MethodInvoker)delegate { this.lbStatusBancoConectorCF.ForeColor = System.Drawing.Color.Red; });
                }
                banco.startTransaction("acao_pdv");
                banco.addParametro("nivel", "1");
                banco.addParametro("store", store);
                banco.addParametro("barras", barra);
                banco.procedimentoRead();
                if (banco.retornaRead().Read() == true)
                {
                    produto_chave = banco.retornaRead().GetString(0);
                    produto_barra = banco.retornaRead().GetString(1);
                    produto_tributacao = banco.retornaRead().GetString(3);
                    produto_descricao = banco.retornaRead().GetString(4);
                    produto_unidade = banco.retornaRead().GetString(5);
                    produto_price_venda = banco.retornaRead().GetString(9);
                    produto_price_custo = banco.retornaRead().GetString(10);
                    produto_pesavel = banco.retornaRead().GetString(11);
                    produto_tributacao_mq = banco.retornaRead().GetString(24);
                    produto_tipo_quantidade = banco.retornaRead().GetString(23);
                    produto_aliquota = banco.retornaRead().GetString(25);
                    produto_valor_unitario = banco.retornaRead().GetString(9);
                    produto_desconto = banco.retornaRead().GetString(16);
                    produto_trunca = banco.retornaRead().GetString(27);
                    produto_ippt = banco.retornaRead().GetString(26);

                    if ((Convert.ToDecimal(lblQttyNfec.Text.Replace(",", ".") == "" ? "0" : lblQttyNfec.Text.Replace(",", ".")) == 0 || lbQttyConectorCF.Text == "") && produto_pesavel == "0")
                    {
                        //produto_qtty = Math.Round(Decimal.Parse(banco.retornaRead().GetString(12)), 3).ToString().Replace(".", ",").Trim();
                        produto_qtty = Math.Round(Decimal.Parse(banco.retornaRead().GetString(12).Replace(",", ".")), 0).ToString();
                    }
                    else
                    {/*Multiplivel*/
                            if (produto_unidade == "KG" && alwaysVariables.UtilizaBalanca == "1")
                            {
                                if (produto_pesavel == "0")
                                {
                                    produto_qtty = Math.Round(Decimal.Parse(lblQttyNfec.Text.Replace(",", ".")), 0).ToString();
                                }
                                else
                                {
                                    /*Trecho Balança*/
                                    string retorno = alwaysVariables.PortBalanca;

                                    if (workBalanca.RetornoPeso() != "" && workBalanca.RetornoPeso() != "0,000")
                                    {
                                        lbQttyConectorCF.Text = Convert.ToDecimal(workBalanca.RetornoPeso()).ToString().Replace(".", ",");
                                    }

                                    if (retorno == "")
                                    {
                                        if (Convert.ToDecimal(lblQttyNfec.Text.Replace(",", ".") == "" ? "0" : lblQttyNfec.Text.Replace(",", ".")) == 0)
                                        {
                                            msg = new msgInfo(1, "FALHA BALANÇA! ACESSO A PORTA " + alwaysVariables.PortBalanca.ToString() + " NEGADO"); msg.ShowDialog();
                                            produto_qtty = Math.Round(Decimal.Parse(banco.retornaRead().GetString(12).Replace(",", ".")), 0).ToString();
                                        }
                                        else
                                        {
                                            produto_qtty = lblQttyNfec.Text;
                                        }
                                    }
                                    else
                                    {
                                        produto_qtty = retorno;
                                    }


                                }
                            }
                            else
                            {
                                if (Convert.ToDecimal(lblQttyNfec.Text.Replace(",", ".") == "" ? "0" : lblQttyNfec.Text.Replace(",", ".")) == 0)
                                {
                                    produto_qtty = Math.Round(Decimal.Parse(banco.retornaRead().GetString(12).Replace(",", ".")), 0).ToString();
                                }
                                else
                                {
                                    produto_qtty = lblQttyNfec.Text.Replace(",", ".");
                                }
                            }
                    }

                    test = 0;

                }
                else
                {
                    if (alwaysVariables.ModoOperacao == 1)
                    {
                        txtVisorMsgConectorCF.Text = "PROBLEMAS DE CADASTRADO";
                        txtDescricaoItemConectorCF.Text = "PRODUTO NÃO CADASTRADO";
                        lbPrecoCalculadoItensConectorCF.Text = "0,00";
                        lbPrecoUnitarioConectorCF.Text = "0,00";
                        txtEntradaDadosConectorCF.Clear();
                        lbQttyConectorCF.Text = "0,000";
                        msg = new msgInfo(1, "PRODUTO NÃO CADASTRADO."); msg.ShowDialog();
                    }
                    else
                    {
                        txtVisorNfce.Text = "PROBLEMAS DE CADASTRADO";
                        txtDescricaoNf.Text = "PRODUTO NÃO CADASTRADO";
                        lblPrecoUnitarioNfec.Text = "0,00";
                        lblTotalNfec.Text = "0,00";
                        txtEntradaDadosNF.Clear();
                        lblQttyNfec.Text = "0,000";
                        msg = new msgInfo(1, "PRODUTO NÃO CADASTRADO."); msg.ShowDialog();
                    }
                    test = 1;
                }
            }
            catch (Exception erro)
            {
                txtDescricaoItemConectorCF.Text = "PRODUTO NÃO CADASTRADO"; auxConsistencia = 1; test = auxConsistencia;
                msg = new msgInfo(1, "PRODUTO NÃO CADASTRADO."); msg.ShowDialog();
            }
            finally
            {
                banco.fechaConexao(); if (title != "") { this.txtTitleCupomFiscalConectorCF.Invoke((MethodInvoker)delegate { txtTitleCupomFiscalConectorCF.Text = title; }); }
                if (auxConsistencia == 0)
                {
                    if (fiscal_flag == 37 || fiscal_flag == 36 || fiscal_flag == 0 || fiscal_flag == 32 || fiscal_flag == 33 || fiscal_flag == 1)
                    {
                        /*Uso nas funções F5 - Acrescimo Item & F7 Desconto Item*/
                        last_item_barra = produto_barra;
                        last_item_chave = produto_chave;
                        last_item_descricao = produto_descricao;
                        last_item_tributacao_mq = produto_tributacao_mq;
                        last_item_tipo_quantidade = produto_tipo_quantidade;
                        last_item_pesavel = produto_pesavel;
                        last_item_qtty = produto_qtty;
                        last_item_casa_decimal = 2;
                        last_item_valor_unitario = produto_valor_unitario;
                        last_item_tipo_desconto = produto_tipo_desconto;
                        last_item_desconto = produto_desconto;
                        last_item_unidade = produto_unidade;
                        last_item_price_venda = produto_price_venda;
                        last_item_tributacao = produto_tributacao;
                        last_valor_item = produto_valor_unitario;
                        last_qtty_item = produto_qtty;
                        sequenciaItemAle = "0".PadLeft(3, '0');
                        /*End uso funções reset parciais...!*/
                    }

                    if (test == 0)
                    {
                        if (alwaysVariables.ModoOperacao == 1)
                        {
                            txtDescricaoItemConectorCF.Text = "[" + produto_unidade + "] - " + produto_descricao;
                            lbPrecoCalculadoItensConectorCF.Text = Math.Round((Decimal.Parse(produto_qtty.Replace(",", ".")) * Decimal.Parse(produto_valor_unitario.Replace(",", "."))), 2).ToString().Replace(".", ",");
                            lbPrecoUnitarioConectorCF.Text = Math.Round(Convert.ToDecimal(produto_valor_unitario.Replace(",", ".")), 2).ToString().Replace(".", ",").Trim();
                            lbQttyConectorCF.Text = String.Format("{0:F3}", Convert.ToDecimal(produto_qtty.Replace(",", "."))).Replace(".", ",");
                        }
                        else
                        {
                            txtDescricaoNf.Text = "[" + produto_unidade + "] - " + produto_descricao;
                            lblTotalNfec.Text = Math.Round((Decimal.Parse(produto_qtty.Replace(",", ".")) * Decimal.Parse(produto_valor_unitario.Replace(",", "."))), 2).ToString().Replace(".", ",");
                            lblPrecoUnitarioNfec.Text = Math.Round(Convert.ToDecimal(produto_valor_unitario.Replace(",", ".")), 2).ToString().Replace(".", ",").Trim();
                            lblQttyNfec.Text = String.Format("{0:F3}", Convert.ToDecimal(produto_qtty.Replace(",", "."))).Replace(".", ",");
                        }
                    }
                    else
                    {
                        if (fiscal_flag == 0 || fiscal_flag == 32)
                        {
                            txtSubTotalConectorCF.Clear();
                            lblTotalMoneyConectorCF.Text = txtSubTotalConectorCF.Text = "0,00";
                        }
                        else
                        {
                            conector_find_subFull("1");
                        }
                    }
                }
            }
        }
        #endregion

        public void conector_produto(string barra, string store, ref int test)
        {
            auxConsistencia = 0;
            resetVariable();
            if (barra.Substring(0, 1) == "3")//Nacionalidade Brasil
            {//3000000105597
                System.Text.StringBuilder sbjoin1 = new System.Text.StringBuilder(barra);
                conectorEan13 ean13 = new conectorEan13();
                string test1 = ean13.extraiPrdConector(sbjoin1);
                barra = test1;
            }
            if (barra.Length == 13)
            {
                if (conector_codigo_balanca(txtEntradaDadosConectorCF.Text, ref produto_barra, ref produto_price_venda))
                {
                    barra = produto_barra;
                    produto_price_venda  = (Convert.ToDouble(produto_price_venda) / 100).ToString().Replace(",", ".");
                }
            }
            try
            {
                title = banco.abreConexao();
                if (banco.statusSchema() == 1)
                {
                    this.lbStatusBancoConectorCF.Invoke((MethodInvoker)delegate { lbStatusBancoConectorCF.Text = "ON LINE"; });
                    this.lbStatusBancoConectorCF.Invoke((MethodInvoker)delegate { this.lbStatusBancoConectorCF.ForeColor = System.Drawing.Color.Cyan; });
                }
                else
                {
                    this.lbStatusBancoConectorCF.Invoke((MethodInvoker)delegate { lbStatusBancoConectorCF.Text = "OFF LINE"; });
                    this.lbStatusBancoConectorCF.Invoke((MethodInvoker)delegate { this.lbStatusBancoConectorCF.ForeColor = System.Drawing.Color.Red; });
                }
                banco.startTransaction("acao_pdv");
                banco.addParametro("nivel", "1");
                banco.addParametro("store", store);
                banco.addParametro("barras", barra);
                banco.procedimentoRead();
                if (banco.retornaRead().Read() == true)
                {
                    produto_chave = banco.retornaRead().GetString(0);
                    produto_barra = banco.retornaRead().GetString(1);
                    produto_tributacao = banco.retornaRead().GetString(3);
                    produto_descricao = banco.retornaRead().GetString(4);
                    produto_unidade = banco.retornaRead().GetString(5);
                    produto_price_custo = banco.retornaRead().GetString(10);
                    produto_pesavel = banco.retornaRead().GetString(11);
                    produto_tributacao_mq = banco.retornaRead().GetString(24);
                    produto_tipo_quantidade = banco.retornaRead().GetString(23);
                    produto_aliquota = banco.retornaRead().GetString(25);
                    produto_desconto = banco.retornaRead().GetString(16);
                    produto_trunca = banco.retornaRead().GetString(27);
                    produto_ippt = banco.retornaRead().GetString(26);
                    if (produto_price_venda != "")
                    {
                        if (Convert.ToDecimal(produto_price_custo) < 0)
                        {
                            produto_price_custo = banco.retornaRead().GetString(9);
                        }
                    }
                    else
                    {
                        produto_price_venda  = banco.retornaRead().GetString(9);
                    }
                    produto_valor_unitario = banco.retornaRead().GetString(9);
                    if (txtEntradaDadosConectorCF.Text.Length <= 13)
                    {
                        if (Convert.ToDouble(pedido) > 0 || pedido == "")
                        {
                            produto_qtty = reserva_qtty_itens;
                            produto_valor_unitario = reserva_valor_un;
                        }
                        else
                        {
                            if (Convert.ToDouble(pedido) <= 0 || pedido == "")
                            {
                                if ((Convert.ToDecimal(lbQttyConectorCF.Text.Replace(",", ".") == "" ? "0" : lbQttyConectorCF.Text.Replace(",", ".")) == 0 || lbQttyConectorCF.Text == "") && produto_pesavel == "0")
                                {
                                    //produto_qtty = Math.Round(Decimal.Parse(banco.retornaRead().GetString(12)), 3).ToString().Replace(".", ",").Trim();
                                    produto_qtty = Math.Round(Decimal.Parse(banco.retornaRead().GetString(12).Replace(",", ".")), 0).ToString();
                                }
                                else
                                {/*Multiplivel*/
                                    if (alwaysVariables.ModoOperacao == 1)
                                    {
                                        if (produto_unidade == "KG" && alwaysVariables.UtilizaBalanca == "1" )
                                        {
                                            if (produto_pesavel == "0")
                                            {
                                                produto_qtty = Math.Round(Decimal.Parse(lbQttyConectorCF.Text.Replace(",", ".")), 0).ToString();
                                            }
                                            else
                                            {
                                                /*Trecho Balança*/
                                                string retorno = alwaysVariables.PortBalanca;

                                                if (workBalanca.RetornoPeso() != "" && workBalanca.RetornoPeso() != "0,000")
                                                {
                                                    lbQttyConectorCF.Text = Convert.ToDecimal(workBalanca.RetornoPeso()).ToString().Replace(".",",");
                                                }

                                                if (retorno == "")
                                                {
                                                    if (Convert.ToDecimal(lbQttyConectorCF.Text.Replace(",", ".") == "" ? "0" : lbQttyConectorCF.Text.Replace(",", ".")) == 0)
                                                    {
                                                        msg = new msgInfo(1, "FALHA BALANÇA! ACESSO A PORTA " + alwaysVariables.PortBalanca.ToString() + " NEGADO"); msg.ShowDialog();
                                                        produto_qtty = Math.Round(Decimal.Parse(banco.retornaRead().GetString(12).Replace(",", ".")), 0).ToString();
                                                    }
                                                    else
                                                    {
                                                        produto_qtty = lbQttyConectorCF.Text;
                                                    }
                                                }
                                                else
                                                {
                                                    
                                                    if (Convert.ToDecimal(lbQttyConectorCF.Text.Replace(",", ".") == "" ? "0" : lbQttyConectorCF.Text.Replace(",", ".")) == 0)
                                                    {
                                                        produto_qtty = Math.Round(Decimal.Parse(banco.retornaRead().GetString(12).Replace(",", ".")), 0).ToString();
                                                    }
                                                    else
                                                    {
                                                        produto_qtty = lbQttyConectorCF.Text;
                                                    }
                                                }


                                            }
                                        }
                                        else
                                        {
                                            if (Convert.ToDecimal(lbQttyConectorCF.Text.Replace(",", ".") == "" ? "0" : lbQttyConectorCF.Text.Replace(",", ".")) == 0)
                                            {
                                                produto_qtty = Math.Round(Decimal.Parse(banco.retornaRead().GetString(12).Replace(",", ".")), 0).ToString();
                                            }
                                            else
                                            {
                                                produto_qtty = lbQttyConectorCF.Text.Replace(",", ".");
                                            }
                                        }
                                    }
                                    else
                                    {
                                        //Modo Nfc
                                        if (produto_unidade == "KG")
                                        {
                                            if (produto_pesavel == "0")
                                            {
                                                produto_qtty = Math.Round(Decimal.Parse(lblQttyNfec.Text.Replace(",", ".")), 0).ToString();
                                            }
                                            else
                                            {
                                                /*Trecho Balança*/
                                                string retorno =alwaysVariables.PortBalanca;

                                                if (retorno == "")
                                                {
                                                    if (Convert.ToDecimal(lblQttyNfec.Text.Replace(",", ".") == "" ? "0" : lblQttyNfec.Text.Replace(",", ".")) == 0)
                                                    {
                                                        msg = new msgInfo(1, "FALHA BALANÇA! ACESSO A PORTA " + alwaysVariables.PortBalanca.ToString() + " NEGADO"); msg.ShowDialog();
                                                        produto_qtty = Math.Round(Decimal.Parse(banco.retornaRead().GetString(12).Replace(",", ".")), 0).ToString();
                                                    }
                                                    else
                                                    {
                                                        produto_qtty = lblQttyNfec.Text;
                                                    }
                                                }
                                                else
                                                {
                                                    if (Convert.ToDecimal(lbQttyConectorCF.Text.Replace(",", ".") == "" ? "0" : lbQttyConectorCF.Text.Replace(",", ".")) == 0)
                                                    {
                                                        produto_qtty = Math.Round(Decimal.Parse(banco.retornaRead().GetString(12).Replace(",", ".")), 0).ToString();
                                                    }
                                                    else
                                                    {
                                                        produto_qtty = lbQttyConectorCF.Text;
                                                    }
                                                }


                                            }
                                        }
                                        else
                                        {
                                            if (Convert.ToDecimal(lblQttyNfec.Text.Replace(",", ".") == "" ? "0" : lblQttyNfec.Text.Replace(",", ".")) == 0)
                                            {
                                                produto_qtty = Math.Round(Decimal.Parse(banco.retornaRead().GetString(12).Replace(",", ".")), 0).ToString();
                                            }
                                            else
                                            {
                                                produto_qtty = lblQttyNfec.Text.Replace(",", ".");
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                    else
                    {
                        produto_qtty = Math.Round(Convert.ToDecimal(produto_price_venda.Replace(",", ".")) / Convert.ToDecimal(produto_valor_unitario), 3).ToString();
                        
                    }
                    test = 0;

                }
                else
                {
                    if (alwaysVariables.ModoOperacao == 1)
                    {
                        txtVisorMsgConectorCF.Text = "PROBLEMAS DE CADASTRADO";
                        txtDescricaoItemConectorCF.Text = "PRODUTO NÃO CADASTRADO";
                        lbPrecoCalculadoItensConectorCF.Text = "0,00";
                        lbPrecoUnitarioConectorCF.Text = "0,00";
                        txtEntradaDadosConectorCF.Clear();
                        lbQttyConectorCF.Text = "0,000";
                        msg = new msgInfo(1, "PRODUTO NÃO CADASTRADO."); msg.ShowDialog();
                    }
                    else
                    {
                        txtVisorNfce.Text = "PROBLEMAS DE CADASTRADO";
                        txtDescricaoNf.Text = "PRODUTO NÃO CADASTRADO";
                        lblPrecoUnitarioNfec.Text = "0,00";
                        lblTotalNfec.Text = "0,00";
                        txtEntradaDadosNF.Clear();
                        lblQttyNfec.Text = "0,000";
                        msg = new msgInfo(1, "PRODUTO NÃO CADASTRADO."); msg.ShowDialog();
                    }
                    test = 1;
                }
            }
            catch (Exception erro)
            {
                txtDescricaoItemConectorCF.Text = "PRODUTO NÃO CADASTRADO"; auxConsistencia = 1; test = auxConsistencia;
                msg = new msgInfo(1,"PRODUTO NÃO CADASTRADO."); msg.ShowDialog();
            }
            finally
            {
                banco.fechaConexao(); if (title != "") { this.txtTitleCupomFiscalConectorCF.Invoke((MethodInvoker)delegate { txtTitleCupomFiscalConectorCF.Text = title; }); }
                if (auxConsistencia == 0)
                {
                    if (fiscal_flag == 0 || fiscal_flag == 32 || fiscal_flag == 33 || fiscal_flag == 1 || fiscal_flag == 37 || fiscal_flag == 36)
                    {
                        /*Uso nas funções F5 - Acrescimo Item & F7 Desconto Item*/
                        last_item_barra = produto_barra;
                        last_item_chave = produto_chave;
                        last_item_descricao = produto_descricao;
                        last_item_tributacao_mq = produto_tributacao_mq;
                        last_item_tipo_quantidade = produto_tipo_quantidade;
                        last_item_pesavel = produto_pesavel;
                        last_item_qtty = produto_qtty;
                        last_item_casa_decimal = 2;
                        last_item_valor_unitario = produto_valor_unitario;
                        last_item_tipo_desconto = produto_tipo_desconto;
                        last_item_desconto = produto_desconto;
                        last_item_unidade = produto_unidade;
                        last_item_price_venda = produto_price_venda;
                        last_item_tributacao = produto_tributacao;    
                        last_valor_item = produto_valor_unitario;
                        last_qtty_item = produto_qtty;
                        sequenciaItemAle = "0".PadLeft(3, '0');
                        /*End uso funções reset parciais...!*/
                    }

                    if (test == 0)
                    {
                        if (alwaysVariables.ModoOperacao == 1)
                        {
                            txtDescricaoItemConectorCF.Text = "[" + produto_unidade + "] - " + produto_descricao;
                            lbPrecoCalculadoItensConectorCF.Text = Math.Round((Decimal.Parse(produto_qtty.Replace(",", ".")) * Decimal.Parse(produto_valor_unitario.Replace(",", "."))), 2).ToString().Replace(".", ",");
                            lbPrecoUnitarioConectorCF.Text = Math.Round(Convert.ToDecimal(produto_valor_unitario.Replace(",", ".")), 2).ToString().Replace(".", ",").Trim();
                            lbQttyConectorCF.Text = String.Format("{0:F3}", Convert.ToDecimal(produto_qtty.Replace(",", "."))).Replace(".", ",");
                        }
                        else
                        {
                            txtDescricaoNf.Text = "[" + produto_unidade + "] - " + produto_descricao;
                            lblTotalNfec.Text = Math.Round((Decimal.Parse(produto_qtty.Replace(",", ".")) * Decimal.Parse(produto_valor_unitario.Replace(",", "."))), 2).ToString().Replace(".", ",");
                            lblPrecoUnitarioNfec.Text = Math.Round(Convert.ToDecimal(produto_valor_unitario.Replace(",", ".")), 2).ToString().Replace(".", ",").Trim();
                            lblQttyNfec.Text = String.Format("{0:F3}", Convert.ToDecimal(produto_qtty.Replace(",", "."))).Replace(".", ",");
                        }
                    }
                    else
                    {
                        if (fiscal_flag == 0 || fiscal_flag == 32)
                        {
                            txtSubTotalConectorCF.Clear();
                            lblTotalMoneyConectorCF.Text = txtSubTotalConectorCF.Text = "0,00";
                        }
                        else
                        {
                            conector_find_subFull("1");
                        }
                    }
                }
            }
        }
        public void conectorPDV_pross_cupom(string cupom, string store, string cx, string find, string seq, string  prd)
        {
            string[,] recarga; //Matriz Bidimencionada
            int rows = 0;
            auxConsistencia = 0;
            if (fiscal_Cupom.Replace("\0", "").Trim() == "")
            {
                //functionECF.conectorECF_NumeroCupom(alwaysVariables.ModeloEcf, ref fiscal_cupom, ref fiscal_MSG, ref fiscal_retorno, alwaysVariables.ECF_Ligada);
                functionECF.conectorECF_NumeroCupom(alwaysVariables.ModeloEcf, ref fiscal_Cupom_coo, ref fiscal_MSG, ref fiscal_retorno, alwaysVariables.ECF_Ligada);
                fiscal_Cupom = fiscal_Cupom_coo;
            }
            try
            {
                title = proc.abreConexao();
                if (proc.statusSchema() == 1)
                {
                    this.lbStatusBancoConectorCF.Invoke((MethodInvoker)delegate { lbStatusBancoConectorCF.Text = "ON LINE"; });
                    this.lbStatusBancoConectorCF.Invoke((MethodInvoker)delegate { this.lbStatusBancoConectorCF.ForeColor = System.Drawing.Color.Cyan; });
                }
                else
                {
                    this.lbStatusBancoConectorCF.Invoke((MethodInvoker)delegate { lbStatusBancoConectorCF.Text = "OFF LINE"; });
                    this.lbStatusBancoConectorCF.Invoke((MethodInvoker)delegate { this.lbStatusBancoConectorCF.ForeColor = System.Drawing.Color.Red; });
                }
                proc.startTransaction("conectorPDV_pross_cupom");
                proc.addParametro("tipo", "1");
                proc.addParametro("cupom", cupom.Replace("\0", "").Trim());
                proc.addParametro("store", store.Replace("\0", "").Trim());
                proc.addParametro("cx", cx.Replace("\0", "").Trim());
                //proc.addParametro("dt", String.Format("{0:yyyyMMdd}", Convert.ToDateTime(fiscal_data_printer.Substring(0, 2) + "/" + fiscal_data_printer.Substring(2, 2) + "/" + String.Format("{0:ddMMyyyy}", DateTime.Now).Substring(4, 2) + fiscal_data_printer.Substring(4, 2)))); //String.Format("{0:yyyyMMdd}", DateTime.Now)); //String.Format("{0:yyyyMMdd}", Convert.ToDateTime(alwaysVariables.XDataTime(lbDataMovimentoConectorCF.Text).ToString())));
                proc.addParametro("dt", String.Format("{0:yyyyMMdd}", Convert.ToDateTime(fiscal_data_movimento.Substring(0, 2) + "/" + fiscal_data_movimento.Substring(2, 2) + "/" + String.Format("{0:ddMMyyyy}", DateTime.Now).Substring(4, 2) + fiscal_data_printer.Substring(4, 2)))); //String.Format("{0:yyyyMMdd}", DateTime.Now)); //String.Format("{0:yyyyMMdd}", Convert.ToDateTime(alwaysVariables.XDataTime(lbDataMovimentoConectorCF.Text).ToString())));
                proc.addParametro("find", find.Replace("\0", "").Trim());
                proc.addParametro("seq", seq.Replace("\0", "").Trim());
                proc.addParametro("prd", prd.Replace("\0", "").Trim());
                if (cupom.Replace("\0", "").Trim() != "")
                {
                    proc.procedimentoSet();
                }
                else
                {
                    auxConsistencia = 1;
                }
            }
            catch (Exception erro)
            {
                msgInfo msg = new msgInfo(1, "Caro Cliente - " + erro.Message); msg.ShowDialog(); auxConsistencia = 1;
            }
            finally
            {
                if (auxConsistencia == 0)
                {
                    countField = proc.retornaSet().Tables[0].Columns.Count;
                    rows = countRows = proc.retornaSet().Tables[0].DefaultView.Count;
                    recarga = new string[countRows, countField];
                    if (countRows > 0)
                    {
                        for (i = 0; i < countRows; i++)
                        {
                            for (int j = 0; j < countField; j++)
                            {
                                recarga[i, j] = Convert.ToString(proc.retornaSet().Tables[0].Rows[i][j]);
                            }
                        }
                    }

                    proc.fechaConexao();

                    if (auxConsistencia == 0 && countRows > 0)
                    {
                        for (int i = 0; i < rows; i++)//Linha
                        {
                            string test = String.Format("{0:yyyyMMdd}", Convert.ToDateTime(fiscal_data_movimento.Substring(2, 2) + "/" + fiscal_data_movimento.Substring(0, 2) + "/" + String.Format("{0:ddMMyyyy}", DateTime.Now).Substring(4, 2) + fiscal_data_printer.Substring(4, 2)));
                            //conectorPDV_inc_cupom_detalhes(fiscal_Cupom.Replace("\0", "").Trim(), fiscal_numero_caixa.Replace("\0", "").Trim(), produto_chave, produto_barra, produto_descricao, produto_qtty.Replace(".", ","), Math.Round(Decimal.Parse(produto_valor_unitario.Replace(",", ".")), 2).ToString().Replace(".", ","), "0", (Math.Round(Decimal.Parse(produto_valor_unitario.Replace(",", ".")), 2) * Math.Round(Decimal.Parse(produto_qtty.Replace(",", ".")), 3)).ToString(), lbOperadorConectorCF.Text /*rever*/, produto_tipo_quantidade, produto_unidade, "0,00", null, null, produto_tributacao, produto_price_custo.Replace(",", "."), "0.00", "0.00", "0", produto_chave, produto_trunca, produto_ippt);
                            workObject.modoPdv(true); //Para rotina loop
                            strCupom = "";
                            instrucao.setVetorCupom();
                            strCupom = instrucao.getCupomDetalhes(alwaysVariables.UserName, alwaysVariables.Senha, Convert.ToDouble(fiscal_store.Replace("\0", "").Trim()) > 0 ? fiscal_store.Replace("\0", "").Trim() : alwaysVariables.Store, fiscal_Cupom.Replace("\0", "").Trim(), String.Format("{0:yyyyMMdd}", DateTime.Now), fiscal_numero_caixa.Replace("\0", "").Trim(), recarga[i, 0]);
                            instrucao.carregaInstrucaoMovimentoVenda(instrucao._detalhes, strCupom, 1);
                            conector_update_lineMD5_r05(fiscal_Cupom.Replace("\0", "").Trim(), recarga[i, 1], recarga[i, 0], fiscal_numero_caixa.Replace("\0", "").Trim(), conectorPDV_PAFECF_indicador("R05", test, fiscal_store.Replace("\0", "").Trim(), fiscal_numero_caixa.Replace("\0", "").Trim(), fiscal_Cupom.Replace("\0", "").Trim(), recarga[i, 0]));
                            instrucao.compactScript(instrucao._detalhes, "detalhes");
                            workObject.modoPdv(false);
                            conectorPDV_pross_cupom("2", fiscal_Cupom.Replace("\0", "").Trim(), alwaysVariables.Store, fiscal_numero_caixa.Replace("\0", "").Trim(), "0", recarga[i, 0], recarga[i, 1]);
                            arranque = 0;
                        }
                    }
                }
                else
                {
                    proc.fechaConexao();
                    conectorPDV_pross_cupom(cupom, store, cx, find, seq, prd);
                }

            }
        }

        public void conectorPDV_pross_cupom(string tipo, string cupom, string store, string cx, string find, string seq, string prd)
        {
            auxConsistencia = 0;
            try
            {
                if (proc.statusSchema() == 1)
                {
                    return;
                }
                title = proc.abreConexao();
                if (proc.statusSchema() == 1)
                {
                    this.lbStatusBancoConectorCF.Invoke((MethodInvoker)delegate { lbStatusBancoConectorCF.Text = "ON LINE"; });
                    this.lbStatusBancoConectorCF.Invoke((MethodInvoker)delegate { this.lbStatusBancoConectorCF.ForeColor = System.Drawing.Color.Cyan; });
                }
                else
                {
                    this.lbStatusBancoConectorCF.Invoke((MethodInvoker)delegate { lbStatusBancoConectorCF.Text = "OFF LINE"; });
                    this.lbStatusBancoConectorCF.Invoke((MethodInvoker)delegate { this.lbStatusBancoConectorCF.ForeColor = System.Drawing.Color.Red; });
                }
                proc.startTransaction("conectorPDV_pross_cupom");
                proc.addParametro("tipo", tipo);
                proc.addParametro("cupom", cupom.Replace("\0", "").Trim());
                proc.addParametro("store", store.Replace("\0", "").Trim());
                proc.addParametro("cx", cx.Replace("\0", "").Trim());
                //proc.addParametro("dt", String.Format("{0:yyyyMMdd}", Convert.ToDateTime(fiscal_data_printer.Substring(0, 2) + "/" + fiscal_data_printer.Substring(2, 2) + "/" + String.Format("{0:ddMMyyyy}", DateTime.Now).Substring(4, 2) + fiscal_data_printer.Substring(4, 2)))); //String.Format("{0:yyyyMMdd}", DateTime.Now)); //String.Format("{0:yyyyMMdd}", Convert.ToDateTime(alwaysVariables.XDataTime(lbDataMovimentoConectorCF.Text).ToString())));
                proc.addParametro("dt", String.Format("{0:yyyyMMdd}", Convert.ToDateTime(fiscal_data_movimento.Substring(0, 2) + "/" + fiscal_data_movimento.Substring(2, 2) + "/" + String.Format("{0:ddMMyyyy}", DateTime.Now).Substring(4, 2) + fiscal_data_printer.Substring(4, 2)))); //String.Format("{0:yyyyMMdd}", DateTime.Now)); //String.Format("{0:yyyyMMdd}", Convert.ToDateTime(alwaysVariables.XDataTime(lbDataMovimentoConectorCF.Text).ToString())));
                proc.addParametro("find", find.Replace("\0", "").Trim());
                proc.addParametro("seq", seq.Replace("\0", "").Trim());
                proc.addParametro("prd", prd.Replace("\0", "").Trim());
                if (cupom.Replace("\0", "").Trim() != "")
                {
                    proc.procedimentoRead();
                    if (proc.retornaRead().Read() == true)
                    {
                    }
                }
                else
                {
                    auxConsistencia = 1;
                }
            }
            catch (Exception erro)
            {
                //msgInfo msg = new msgInfo(1, "Caro Cliente - " + erro.Message); msg.ShowDialog(); 
                auxConsistencia = 1;
                proc.fechaConexao();
                conectorPDV_pross_cupom(tipo, cupom, store, cx, find, seq, prd);
            }
            finally
            {
                proc.fechaConexao();
            }
        }
        public void conectorPDV_load_cupom(string cupom, string store, string cx, int canc)
        {
            string[,] recarga; //Matriz Bidimencionada
            string[,] recarga1 = new string[0, 0]; //Matriz Bidimencionada
            int rows = 0;
            auxConsistencia = 0;
            resetVariable();
            try
            {
                title = banco.abreConexao();
                if (banco.statusSchema() == 1)
                {
                    this.lbStatusBancoConectorCF.Invoke((MethodInvoker)delegate { lbStatusBancoConectorCF.Text = "ON LINE"; });
                    this.lbStatusBancoConectorCF.Invoke((MethodInvoker)delegate { this.lbStatusBancoConectorCF.ForeColor = System.Drawing.Color.Cyan; });
                }
                else
                {
                    this.lbStatusBancoConectorCF.Invoke((MethodInvoker)delegate { lbStatusBancoConectorCF.Text = "OFF LINE"; });
                    this.lbStatusBancoConectorCF.Invoke((MethodInvoker)delegate { this.lbStatusBancoConectorCF.ForeColor = System.Drawing.Color.Red; });
                }
                banco.startTransaction("conectorPDV_load_cupom");
                banco.addParametro("cupom", cupom.Replace("\0", "").Trim());
                banco.addParametro("store", store.Replace("\0", "").Trim());
                banco.addParametro("cx", cx.Replace("\0", "").Trim());
                //banco.addParametro("dt", String.Format("{0:yyyyMMdd}", Convert.ToDateTime(fiscal_data_printer.Substring(0, 2) + "/" + fiscal_data_printer.Substring(2, 2) + "/" + String.Format("{0:ddMMyyyy}", DateTime.Now).Substring(4, 2) + fiscal_data_printer.Substring(4, 2)))); //String.Format("{0:yyyyMMdd}", DateTime.Now)); //String.Format("{0:yyyyMMdd}", Convert.ToDateTime(alwaysVariables.XDataTime(lbDataMovimentoConectorCF.Text).ToString())));
                banco.addParametro("dt", String.Format("{0:yyyyMMdd}", Convert.ToDateTime(fiscal_data_movimento.Substring(0, 2) + "/" + fiscal_data_movimento.Substring(2, 2) + "/" + String.Format("{0:ddMMyyyy}", DateTime.Now).Substring(4, 2) + fiscal_data_printer.Substring(4, 2)))); //String.Format("{0:yyyyMMdd}", DateTime.Now)); //String.Format("{0:yyyyMMdd}", Convert.ToDateTime(alwaysVariables.XDataTime(lbDataMovimentoConectorCF.Text).ToString())));
                if (cupom.Replace("\0", "").Trim() != "")
                {
                    banco.procedimentoSet();
                }
                else
                {
                    auxConsistencia = 1;
                }
            }
            catch (Exception erro)
            {
                 msgInfo msg = new msgInfo(1,"Caro Cliente - " + erro.Message); msg.ShowDialog();  auxConsistencia = 1;
            }
            finally
            {
                if (auxConsistencia == 0 && canc == 0)
                {
                    countField = banco.retornaSet().Tables[0].Columns.Count;
                    countRows = banco.retornaSet().Tables[0].DefaultView.Count;
                    recarga = new string[countRows, countField];
                    if (countRows > 0)
                    {
                        ltbDetalhesConectorCF.Clear();
                        ltbDetalhesConectorCF.Text = " ITEM  CÓDIGO  DESCRIÇÃO QTD  UN VL UNIT(R$) ST VL ITEM(R$)" + "\r\n" +
                                                     "===========================================================";
                        for (i = 0; i < countRows; i++)
                        {
                            sequenciaItem = Convert.ToString(banco.retornaSet().Tables[0].Rows[i][0]).PadLeft(3, '0');
                            last_item_barra = Convert.ToString(banco.retornaSet().Tables[0].Rows[i][2]);
                            last_item_chave = Convert.ToString(banco.retornaSet().Tables[0].Rows[i][1]);
                            last_item_descricao = Convert.ToString(banco.retornaSet().Tables[0].Rows[i][4]);
                            last_item_tributacao_mq = Convert.ToString(banco.retornaSet().Tables[0].Rows[i][3]);
                            last_item_tipo_quantidade = Convert.ToString(banco.retornaSet().Tables[0].Rows[i][9]);
                            last_item_pesavel = Convert.ToString(banco.retornaSet().Tables[0].Rows[i][13]);
                            last_item_qtty = Convert.ToString(banco.retornaSet().Tables[0].Rows[i][8]).Replace(",",".");
                            last_item_casa_decimal = 2;
                            last_item_valor_unitario = Convert.ToString(banco.retornaSet().Tables[0].Rows[i][7]);
                            last_item_tipo_desconto = "%";
                            last_item_desconto = Convert.ToString(banco.retornaSet().Tables[0].Rows[i][12]);
                            last_item_unidade = Convert.ToString(banco.retornaSet().Tables[0].Rows[i][5]);
                            last_item_price_venda = Convert.ToString(banco.retornaSet().Tables[0].Rows[i][7]);

                            if (Convert.ToInt16(banco.retornaSet().Tables[0].Rows[i][15]) == 0)
                            {
                                ltbDetalhesConectorCF.Text += Convert.ToString(banco.retornaSet().Tables[0].Rows[i][0]).PadLeft(3, '0') + "    "
                                        + Convert.ToString(banco.retornaSet().Tables[0].Rows[i][2]) + "    "
                                        + Convert.ToString(banco.retornaSet().Tables[0].Rows[i][4]) + "    "
                                        + (Convert.ToString(banco.retornaSet().Tables[0].Rows[i][13]) == "0" ? String.Format("{0:F0}", Convert.ToString(banco.retornaSet().Tables[0].Rows[i][8]).Replace(",", ".")) : "    ") + "    "
                                        + Convert.ToString(banco.retornaSet().Tables[0].Rows[i][5]) + "    "
                                        + (Convert.ToString(banco.retornaSet().Tables[0].Rows[i][13]) == "0" ? Math.Round(Convert.ToDecimal((Convert.ToString(banco.retornaSet().Tables[0].Rows[i][8]).Replace(",", ".")))) + Convert.ToString(banco.retornaSet().Tables[0].Rows[i][5]) : String.Format("{0:F3}", Decimal.Parse(Convert.ToString(banco.retornaSet().Tables[0].Rows[i][8]).Replace(",", ".")), 3).ToString().Replace(".", ",") + Convert.ToString(banco.retornaSet().Tables[0].Rows[i][5]) + " X " + Convert.ToString(banco.retornaSet().Tables[0].Rows[i][7]).Replace(".", ",")) + "    "
                                        + Convert.ToString(banco.retornaSet().Tables[0].Rows[i][14]) + "    "
                                        + Math.Round((Decimal.Parse(Convert.ToString(banco.retornaSet().Tables[0].Rows[i][8]).Replace(",", ".")) * Decimal.Parse(Convert.ToString(banco.retornaSet().Tables[0].Rows[i][7]).Replace(",", "."))), 2).ToString().Replace(".", ",")
                                        + "\r\n";
                                this.ltbDetalhesConectorCF.ForeColor = System.Drawing.Color.Yellow;
                                if (Convert.ToDecimal(banco.retornaSet().Tables[0].Rows[i][16]) > 0)
                                {
                                    ltbDetalhesConectorCF.Text += "                                     DESCONTO ITEM => " + sequenciaItem + "   " + String.Format("{0:F2}", Convert.ToDecimal(banco.retornaSet().Tables[0].Rows[i][16])) + "% (R$ " + String.Format("{0:F2}", Convert.ToDecimal(banco.retornaSet().Tables[0].Rows[i][17])).Replace(".",",") + ")" + "\r\n";
                                }
                                if (Convert.ToDecimal(banco.retornaSet().Tables[0].Rows[i][18]) > 0)
                                {
                                    ltbDetalhesConectorCF.Text += "                                     ACRESCIMO ITEM => " + sequenciaItem + "   " + String.Format("{0:F2}", Convert.ToDecimal(banco.retornaSet().Tables[0].Rows[i][18])) + "% R$ " + String.Format("{0:F2}", Convert.ToDecimal(banco.retornaSet().Tables[0].Rows[i][19])).Replace(".", ",") + "\r\n";
                                }
                                this.ltbDetalhesConectorCF.ForeColor = System.Drawing.Color.White;
                                ltbDetalhesConectorCF.Text += "___________________________________________________________" + "\r\n";
                                ltbDetalhesConectorCF.Select(ltbDetalhesConectorCF.Text.Length, 0);
                                ltbDetalhesConectorCF.ScrollToCaret();
                            }
                            else
                            {
                                this.ltbDetalhesConectorCF.ForeColor = System.Drawing.Color.Red;
                                ltbDetalhesConectorCF.Text += Convert.ToString(banco.retornaSet().Tables[0].Rows[i][0]).PadLeft(3, '0') + "    "
                                        + Convert.ToString(banco.retornaSet().Tables[0].Rows[i][2]) + "    "
                                        + Convert.ToString(banco.retornaSet().Tables[0].Rows[i][4]) + " [CANCELADO] " + "    "
                                        + (Convert.ToString(banco.retornaSet().Tables[0].Rows[i][13]) == "0" ? String.Format("{0:F0}", Convert.ToString(banco.retornaSet().Tables[0].Rows[i][8]).Replace(",", ".")) : "    ") + "    "
                                        + Convert.ToString(banco.retornaSet().Tables[0].Rows[i][5]) + "    "
                                        + (Convert.ToString(banco.retornaSet().Tables[0].Rows[i][13]) == "0" ? Math.Round(Convert.ToDecimal((Convert.ToString(banco.retornaSet().Tables[0].Rows[i][8]).Replace(",", ".")))) + Convert.ToString(banco.retornaSet().Tables[0].Rows[i][5]) : String.Format("{0:F3}", Decimal.Parse(Convert.ToString(banco.retornaSet().Tables[0].Rows[i][8]).Replace(",", ".")), 3).ToString().Replace(".", ",") + Convert.ToString(banco.retornaSet().Tables[0].Rows[i][5]) + " X " + Convert.ToString(banco.retornaSet().Tables[0].Rows[i][7]).Replace(".", ",")) + "    "
                                        + Convert.ToString(banco.retornaSet().Tables[0].Rows[i][14]) + "    "
                                        + Math.Round((Decimal.Parse(Convert.ToString(banco.retornaSet().Tables[0].Rows[i][8]).Replace(",", ".")) * Decimal.Parse(Convert.ToString(banco.retornaSet().Tables[0].Rows[i][7]).Replace(",", "."))), 2).ToString().Replace(".", ",")
                                        + "\r\n";
                                this.ltbDetalhesConectorCF.ForeColor = System.Drawing.Color.White;
                                ltbDetalhesConectorCF.Text += "___________________________________________________________" + "\r\n";
                                ltbDetalhesConectorCF.Select(ltbDetalhesConectorCF.Text.Length, 0);
                                ltbDetalhesConectorCF.ScrollToCaret();
                            }
                        }
                    }
                    else
                    {
                        txtVisorMsgConectorCF.Text = "CUPOM FISCAL ABERTO";
                        ltbDetalhesConectorCF.Clear();
                        ltbDetalhesConectorCF.Text = " ITEM  CÓDIGO  DESCRIÇÃO QTD  UN VL UNIT(R$) ST VL ITEM(R$)" + "\r\n" +
                                                     "===========================================================";//ALT
                        
                    }
                }
                else if (auxConsistencia == 0 && canc == 1)
                {
                    countField = banco.retornaSet().Tables[0].Columns.Count;
                    rows = countRows = banco.retornaSet().Tables[0].DefaultView.Count;
                    recarga = new string[countRows, countField];
                    if (countRows > 0)
                    {
                        for (i = 0; i < countRows; i++)
                        {
                            for (int j = 0; j < countField; j++)
                            {
                                recarga[i, j] = Convert.ToString(banco.retornaSet().Tables[0].Rows[i][j]);
                            }
                        }
                        recarga1 = recarga;
                    }
                }
                banco.fechaConexao(); if (title != "") { this.txtTitleCupomFiscalConectorCF.Invoke((MethodInvoker)delegate { txtTitleCupomFiscalConectorCF.Text = title; }); }
                if (auxConsistencia == 0 && canc == 0)
                {
                    if (countRows > 0)
                    {
                        conector_find_subFull("1");
                    }
                    call_pdv = 0;
                    txtAutorizacaoUsuarioConectorCF.CausesValidation = false;
                    txtEntradaDadosConectorCF.Enabled = true;
                    txtEntradaDadosConectorCF.CausesValidation = true;
                    txtEntradaDadosConectorCF.ReadOnly = false;
                    if (alwaysVariables.ModoOperacao == 1)
                    {
                        txtEntradaDadosConectorCF.Select();
                    }
                    else
                    {
                        txtEntradaDadosNF.Select();
                    }
                }
                else if (auxConsistencia == 0 && canc == 1)
                {
                    for (int i = 0; i < rows; i++)//Linha
                    {
                        conectorPDV_PAFECF_exe("R05", cupom.Replace(",", "").Trim(), 4, recarga1[i, 2], recarga1[i, 0]);
                    }
                }
            }
        }
        public int conectorPDV_verifica_exits_pepleo(string pepleo)
        {
            auxConsistencia = 0;
            int result = -1;
            try
            {
                title = banco.abreConexao();
                banco.singleTransaction("select count(*) as exits from conectorPDV.cliente where idCliente=?pepleo");
                banco.addParametro("?pepleo", pepleo);
                banco.procedimentoRead();
                if (banco.retornaRead().Read() == true)
                {
                    result = Convert.ToInt32(banco.retornaRead().GetString(0));
                }
            }
            catch (Exception e)
            {
                auxConsistencia = 1;
                msgInfo msg = new msgInfo(1,"Caro Cliente - " + e.Message); msg.ShowDialog(); auxConsistencia = 1;
            }
            finally
            {
                banco.fechaConexao(); if (title != "") { this.txtTitleCupomFiscalConectorCF.Invoke((MethodInvoker)delegate { txtTitleCupomFiscalConectorCF.Text = title; }); }
                if (auxConsistencia == 1)
                {
                    result = -1;
                }
            }
            return result;
        }
        public int conectorPDV_local_verifica_status_pedido(string reserva, string store) //Função 1 
        {
            auxConsistencia = 0;
            int result = -1;
            try
            {
                title = banco.abreConexao();
                banco.singleTransaction("select status from conectorPDV.pedido where idPedido=?pedido and idLoja=?store");
                banco.addParametro("?pedido", reserva);
                banco.addParametro("?store", store);
                banco.procedimentoRead();
                if (banco.retornaRead().Read() == true)
                {
                    result = Convert.ToInt32(banco.retornaRead().GetString(0));
                }
            }
            catch (Exception e)
            {
                auxConsistencia = 1;
                msgInfo msg = new msgInfo(1,"Caro Cliente - " + e.Message); msg.ShowDialog(); auxConsistencia = 1;
            }
            finally
            {
                banco.fechaConexao(); if (title != "") { this.txtTitleCupomFiscalConectorCF.Invoke((MethodInvoker)delegate { txtTitleCupomFiscalConectorCF.Text = title; }); }
                if (auxConsistencia == 1)
                {
                    result = -1;
                }
            }
            return result;
        }
        public DataSet conectorPDV_local_find_pedido(string reserva, string store) //Função 2
        {
            try
            {
                title = banco.abreConexao();
                banco.singleTransaction("select * from conectorPDV.pedido where idPedido=?pedido and idLoja=?store");
                banco.addParametro("?pedido", reserva);
                banco.addParametro("?store", store);
                banco.procedimentoSet();
                matriz = banco.retornaSet();
            }
            catch (Exception e)
            {
                msgInfo msg = new msgInfo(1,"Caro Cliente - " + e.Message); msg.ShowDialog(); auxConsistencia = 1;
            }
            finally
            {
                banco.fechaConexao(); if (title != "") { this.txtTitleCupomFiscalConectorCF.Invoke((MethodInvoker)delegate { txtTitleCupomFiscalConectorCF.Text = title; }); }
            }
            return matriz;
        }
        public DataSet conectorPDV_local_find_pedidoItens(string reserva, string store) //Funcao 3
        {
            try
            {
                title = banco.abreConexao();
                banco.singleTransaction("select * from pedidoItens where idPedido=?pedido and idLoja=?store");
                banco.addParametro("?pedido", reserva);
                banco.addParametro("?store", store);
                banco.procedimentoSet();
                matriz = banco.retornaSet();
            }
            catch (Exception e)
            {
                msgInfo msg = new msgInfo(1,"Caro Cliente - " + e.Message); msg.ShowDialog(); auxConsistencia = 1;
            }
            finally
            {
                banco.fechaConexao(); if (title != "") { this.txtTitleCupomFiscalConectorCF.Invoke((MethodInvoker)delegate { txtTitleCupomFiscalConectorCF.Text = title; }); }
            }
            return matriz;
        }

        public DataSet conectorPDV_local_find_pedidoFinanceiro(string reserva, string store) //Função 4
        {
            try
            {
                title = banco.abreConexao();
                banco.singleTransaction("select * from pedidofinanceiro where idPedido=?pedido and idLoja=?store");
                banco.addParametro("?pedido", reserva);
                banco.addParametro("?store", store);
                banco.procedimentoSet();
                matriz = banco.retornaSet();
            }
            catch (Exception e)
            {
                msgInfo msg = new msgInfo(1,"Caro Cliente - " + e.Message); msg.ShowDialog(); auxConsistencia = 1;
            }
            finally
            {
                banco.fechaConexao(); if (title != "") { this.txtTitleCupomFiscalConectorCF.Invoke((MethodInvoker)delegate { txtTitleCupomFiscalConectorCF.Text = title; }); }
            }
            return matriz;
        }

        public DataSet conectorPDV_local_find_pedidoCrediario(string reserva, string store) //Função 4.1
        {
            try
            {
                title = banco.abreConexao();
                banco.singleTransaction("select * from pedidoCrediario where idPedido=?pedido and idLoja=?store");
                banco.addParametro("?pedido", reserva);
                banco.addParametro("?store", store);
                banco.procedimentoSet();
                matriz = banco.retornaSet();
            }
            catch (Exception e)
            {
                msgInfo msg = new msgInfo(1,"Caro Cliente - " + e.Message); msg.ShowDialog(); auxConsistencia = 1;
            }
            finally
            {
                banco.fechaConexao(); if (title != "") { this.txtTitleCupomFiscalConectorCF.Invoke((MethodInvoker)delegate { txtTitleCupomFiscalConectorCF.Text = title; }); }
            }
            return matriz;
        }

        public DataSet conectorPDV_local_find_pedidoConvenio(string reserva, string store)//Função 4.2
        {
            try
            {
                title = banco.abreConexao();
                banco.singleTransaction("select * from pedidoConvenio where idPedido=?pedido and idLoja=?store");
                banco.addParametro("?pedido", reserva);
                banco.addParametro("?store", store);
                banco.procedimentoSet();
                matriz = banco.retornaSet();
            }
            catch (Exception e)
            {
                msgInfo msg = new msgInfo(1,"Caro Cliente - " + e.Message); msg.ShowDialog(); auxConsistencia = 1;
            }
            finally
            {
                banco.fechaConexao(); if (title != "") { this.txtTitleCupomFiscalConectorCF.Invoke((MethodInvoker)delegate { txtTitleCupomFiscalConectorCF.Text = title; }); }
            }
            return matriz;
        }
        public DataSet conectorPDV_local_find_pedidoCheque(string reserva, string store) //Função 4.4
        {
            try
            {
                title = banco.abreConexao();
                banco.singleTransaction("select * from pedidoCheque where idPedido=?pedido and idLoja=?store");
                banco.addParametro("?pedido", reserva);
                banco.addParametro("?store", store);
                banco.procedimentoSet();
                matriz = banco.retornaSet();
            }
            catch (Exception e)
            {
                msgInfo msg = new msgInfo(1,"Caro Cliente - " + e.Message); msg.ShowDialog(); auxConsistencia = 1;
            }
            finally
            {
                banco.fechaConexao(); if (title != "") { this.txtTitleCupomFiscalConectorCF.Invoke((MethodInvoker)delegate { txtTitleCupomFiscalConectorCF.Text = title; }); }
            }
            return matriz;
        }
        public DataSet conectorPDV_local_find_pedidoBoleto(string reserva, string store) //Função 4.5
        {
            try
            {
                title = banco.abreConexao();
                banco.singleTransaction("select * from pedidoBoleto where idPedido=?pedido and cedente=?store");
                banco.addParametro("?pedido", reserva);
                banco.addParametro("?store", store);
                banco.procedimentoSet();
                matriz = banco.retornaSet();
            }
            catch (Exception e)
            {
                msgInfo msg = new msgInfo(1,"Caro Cliente - " + e.Message); msg.ShowDialog(); auxConsistencia = 1;
            }
            finally
            {
                banco.fechaConexao(); if (title != "") { this.txtTitleCupomFiscalConectorCF.Invoke((MethodInvoker)delegate { txtTitleCupomFiscalConectorCF.Text = title; }); }
            }
            return matriz;
        }
        public DataSet conectorPDV_local_find_pedidoCartao(string reserva, string store) //Função 4.6
        {
            try
            {
                title = banco.abreConexao();
                banco.singleTransaction("select * from pedidoCartao where idPedido=?pedido and idLoja=?store");
                banco.addParametro("?pedido", reserva);
                banco.addParametro("?store", store);
                banco.procedimentoSet();
                matriz = banco.retornaSet();
            }
            catch (Exception e)
            {
                msgInfo msg = new msgInfo(1,"Caro Cliente - " + e.Message); msg.ShowDialog(); auxConsistencia = 1;
            }
            finally
            {
                banco.fechaConexao(); if (title != "") { this.txtTitleCupomFiscalConectorCF.Invoke((MethodInvoker)delegate { txtTitleCupomFiscalConectorCF.Text = title; }); }
            }
            return matriz;
        }
        public DataSet conectorPDV_local_find_pedidoParcelaCartao(string reserva, string store) //Função 4.7
        {
            try
            {
                title = banco.abreConexao();
                banco.singleTransaction("select * from pedidoParcelaCartao where idPedido=?pedido and idLoja=?store");
                banco.addParametro("?pedido", reserva);
                banco.addParametro("?store", store);
                banco.procedimentoSet();
                matriz = banco.retornaSet();
            }
            catch (Exception e)
            {
                msgInfo msg = new msgInfo(1,"Caro Cliente - " + e.Message); msg.ShowDialog(); auxConsistencia = 1;
            }
            finally
            {
                banco.fechaConexao(); if (title != "") { this.txtTitleCupomFiscalConectorCF.Invoke((MethodInvoker)delegate { txtTitleCupomFiscalConectorCF.Text = title; }); }
            }
            return matriz;
        }
        public DataSet conectorPDV_local_find_pedidoParcelaBoleto(string reserva, string store)//Função 4.8
        {
            try
            {
                title = banco.abreConexao();
                banco.singleTransaction("select * from pedidoParcelaBoleto where idPedido=?pedido and idLoja=?store");
                banco.addParametro("?pedido", reserva);
                banco.addParametro("?store", store);
                banco.procedimentoSet();
                matriz = banco.retornaSet();
            }
            catch (Exception e)
            {
                msgInfo msg = new msgInfo(1,"Caro Cliente - " + e.Message); msg.ShowDialog(); auxConsistencia = 1;
            }
            finally
            {
                banco.fechaConexao(); if (title != "") { this.txtTitleCupomFiscalConectorCF.Invoke((MethodInvoker)delegate { txtTitleCupomFiscalConectorCF.Text = title; }); }
            }
            return matriz;
        }
        public DataSet conectorPDV_local_find_pedidoParcelaCheque(string reserva, string store) //Função 4.9
        {
            try
            {
                title = banco.abreConexao();
                banco.singleTransaction("select * from pedidoParcelaCheque where idPedido=?pedido and idLoja=?store");
                banco.addParametro("?pedido", reserva);
                banco.addParametro("?store", store);
                banco.procedimentoSet();
                matriz = banco.retornaSet();
            }
            catch (Exception e)
            {
                msgInfo msg = new msgInfo(1,"Caro Cliente - " + e.Message); msg.ShowDialog(); auxConsistencia = 1;
            }
            finally
            {
                banco.fechaConexao(); if (title != "") { this.txtTitleCupomFiscalConectorCF.Invoke((MethodInvoker)delegate { txtTitleCupomFiscalConectorCF.Text = title; }); }
            }
            return matriz;
        }
        public DataSet conectorPDV_local_find_pedidoParcelaConvenio(string reserva, string store) //Função 4.10
        {
            try
            {
                title = banco.abreConexao();
                banco.singleTransaction("select * from pedidoParcelaConvenio where idPedido=?pedido and idLoja=?store");
                banco.addParametro("?pedido", reserva);
                banco.addParametro("?store", store);
                banco.procedimentoSet();
                matriz = banco.retornaSet();
            }
            catch (Exception e)
            {
                msgInfo msg = new msgInfo(1,"Caro Cliente - " + e.Message); msg.ShowDialog(); auxConsistencia = 1;
            }
            finally
            {
                banco.fechaConexao(); if (title != "") { this.txtTitleCupomFiscalConectorCF.Invoke((MethodInvoker)delegate { txtTitleCupomFiscalConectorCF.Text = title; }); }
            }
            return matriz;
        }
        public DataSet conectorPDV_local_find_pedidoParcelaCrediario(string reserva, string store) //Função 4.11
        {
            try
            {
                title = banco.abreConexao();
                banco.singleTransaction("select * from pedidoParcelaCrediario where idPedido=?pedido and idLoja=?store");
                banco.addParametro("?pedido", reserva);
                banco.addParametro("?store", store);
                banco.procedimentoSet();
                matriz = banco.retornaSet();
            }
            catch (Exception e)
            {
                msgInfo msg = new msgInfo(1,"Caro Cliente - " + e.Message); msg.ShowDialog(); auxConsistencia = 1;
            }
            finally
            {
                banco.fechaConexao(); if (title != "") { this.txtTitleCupomFiscalConectorCF.Invoke((MethodInvoker)delegate { txtTitleCupomFiscalConectorCF.Text = title; }); }
            }
            return matriz;
        }
        public DataSet ObterPedidoParcelamento(int escolha, string pedido, string store)
        {
            switch (escolha)
            {
                case 1:
                    break;
                case 2:
                    matriz = conectorPDV_local_find_pedidoCheque(pedido, store);
                    break;
                case 3:
                    matriz = conectorPDV_local_find_pedidoCrediario(pedido, store);
                    break;
                case 4:
                    matriz = conectorPDV_local_find_pedidoConvenio(pedido, store);
                    break;
                case 5:
                    matriz = conectorPDV_local_find_pedidoCartao(pedido, store);
                    break;
                case 6:
                    matriz = conectorPDV_local_find_pedidoCartao(pedido, store);
                    break;
                case 7:
                    matriz = conectorPDV_local_find_pedidoBoleto(pedido, store);
                    break;
                case 8:
                    break;
                case 9:
                    break;
                case 10:
                    break;
                default:
                    break;
            }
            return matriz;
        }
        public void conectorPDV_find_finalizadora(string aux)
        {
            auxConsistencia = 0;
            try
            {
                if (rmais.statusSchema() == 1)
                {
                    return;
                }
                title = banco.abreConexao();
                banco.startTransaction("conectorPDV_find_finalizadora");
                banco.addParametro("tipo", "1");
                banco.addParametro("find", aux);
                banco.procedimentoRead();
                if (banco.retornaRead().Read() == true)
                {
                    auxDescricaoFinalizadora = (banco.retornaRead().GetString(1));
                }
            }
            catch (Exception erro)
            {
                msg = new msgInfo(1, "Erro não identificado, entre contato como revendedor! " + erro.Message); msg.ShowDialog();
                auxConsistencia = 1;
            }
            finally
            {
                if (auxConsistencia == 0)
                {
                }
                banco.fechaConexao(); if (title != "") 
                {
                    this.txtTitleCupomFiscalConectorCF.Invoke((MethodInvoker)delegate { this.txtTitleCupomFiscalConectorCF.Invoke((MethodInvoker)delegate { txtTitleCupomFiscalConectorCF.Text = title; }); });
                }
            }
        }

        #endregion 
        //###########################################################END Procedimento de Banco ###############################################################
        #region 
        //###########################################################Procedimento de Banco WEBSERVICE ########################################################
        protected int conectorPDV_replace_contrato(
                                                    string contrato,
                                                    string store,
                                                    string metodo,
                                                    string pessoa,
                                                    string funcionario,
                                                    string emissao,
                                                    string valueEntry,
                                                    string valorTotal,
                                                    string encargos,
                                                    string status,
                                                    string observacao,
                                                    string entrada,
                                                    string tac, 
                                                    string cet, 
                                                    string taxa,
                                                    string conferencia, 
                                                    string pedido, 
                                                    string batimento,
                                                    string parcelamento, 
                                                    string docFiscal, 
                                                    string terminalContrato)
        {
            try
            {
                auxConsistencia = 0;
                title = banco.abreConexao();
                banco.startTransaction("conectorPDV_replace_contrato");
                banco.addParametro("replace_contrato", contrato);
                banco.addParametro("replace_idloja", store);
                banco.addParametro("replace_idmetodo", metodo);
                banco.addParametro("replace_idcliente", pessoa);
                banco.addParametro("replace_idfuncionario", funcionario);
                banco.addParametro("replace_emissao", String.Format("{0:yyyyMMdd}", Convert.ToDateTime(emissao)));
                banco.addParametro("replace_valueEntry", valueEntry);
                banco.addParametro("replace_total", valorTotal);
                banco.addParametro("replace_encargos", encargos);
                banco.addParametro("replace_status", status);
                banco.addParametro("replace_observacao", observacao);
                banco.addParametro("replace_entrada", entrada);
                banco.addParametro("replace_tac", tac);
                banco.addParametro("replace_cet", cet);
                banco.addParametro("replace_taxa", taxa);
                banco.addParametro("replace_conferencia", conferencia);
                banco.addParametro("replace_pedido", pedido);
                banco.addParametro("replace_batimento", batimento);
                banco.addParametro("replace_parcelamento", parcelamento);//17
                banco.addParametro("replace_doc", docFiscal);
                banco.addParametro("replace_terminal", terminalContrato);
                banco.procedimentoRead();

            }
            catch (Exception erro)
            {
                msg = new msgInfo(1,erro.Message); msg.ShowDialog(); auxConsistencia = 1;
            }
            finally
            {
                banco.fechaConexao(); if (title != "") { this.txtTitleCupomFiscalConectorCF.Invoke((MethodInvoker)delegate { this.txtTitleCupomFiscalConectorCF.Invoke((MethodInvoker)delegate { txtTitleCupomFiscalConectorCF.Text = title; }); }); }
            }
            return auxConsistencia;
        }
        protected int conectorPDV_replace_parcela2(string parcela,
                                              string contrato,
                                              string store,
                                              string nr_parcela,
                                              string idTerminal,
                                              string funcionario,
                                              string vencimento,
                                              string pagamento,
                                              string status,
                                              string observacao,
                                              string valorFinanceiro,
                                              string valorPago,
                                              string prazo,
                                              string acrescimo,
                                              string desconto)
        {
            try
            {
                auxConsistencia = 0;
                title = banco.abreConexao();
                banco.startTransaction("conectorPDV_replace_parcela2");
                banco.addParametro("replace_idParcela", parcela);
                banco.addParametro("replace_idcrediario", contrato);
                banco.addParametro("replace_idloja", store);
                banco.addParametro("replace_nr_parcela", nr_parcela);
                banco.addParametro("replace_idterminal", idTerminal);
                banco.addParametro("replace_funcionario", funcionario);
                banco.addParametro("replace_vencimento", String.Format("{0:yyyyMMdd}", Convert.ToDateTime(vencimento)));
                banco.addParametro("replace_status", status);
                banco.addParametro("replace_observacao", observacao);
                banco.addParametro("replace_valorFinanceiro", valorFinanceiro);
                banco.addParametro("replace_valorPago",valorPago);
                banco.addParametro("replace_prazo", prazo);
                banco.addParametro("replace_acrescimo", acrescimo);
                banco.addParametro("replace_desconto", desconto);
                banco.procedimentoRead();

            }
            catch (Exception erro)
            {
                msg = new msgInfo(1,erro.Message); msg.ShowDialog(); auxConsistencia = 1;
            }
            finally
            {
                banco.fechaConexao(); if (title != "") { this.txtTitleCupomFiscalConectorCF.Invoke((MethodInvoker)delegate { txtTitleCupomFiscalConectorCF.Text = title; }); }

            }
            return auxConsistencia;
        }

        protected int conectorPDV_replace_pedidoItens(string idPedido,
                                      string idLoja,
                                      string idProduto,
                                      string sequencial,
                                      string idfuncionario,
                                      string situacao,
                                      string quantidade,
                                      string priceLiquido,
                                      string price,
                                      string valorDiscount,
                                      string priceFull,
                                      string idEan,
                                      string codigoBarra,
                                      string idUnidadeMedida, string promocional)
        {
            try
            {
                auxConsistencia = 0;
                title = banco.abreConexao();
                banco.startTransaction("conectorPDV_replace_pedidoItens");
                banco.addParametro("replace_idpedido", idPedido);
                banco.addParametro("replace_idLoja", idLoja);
                banco.addParametro("replace_idProduto", idProduto);
                banco.addParametro("replace_sequencial", sequencial);
                banco.addParametro("replace_idfuncionario", idfuncionario);
                banco.addParametro("replace_situacao", situacao);
                banco.addParametro("replace_quantidade", quantidade);
                banco.addParametro("replace_priceLiquido", priceLiquido);
                banco.addParametro("replace_price", price);
                banco.addParametro("replace_valorDiscount", valorDiscount);
                banco.addParametro("replace_priceFull", priceFull);
                banco.addParametro("replace_idEan", idEan);
                banco.addParametro("replace_codigoBarra", codigoBarra);
                banco.addParametro("replace_idunidadeMedida", idUnidadeMedida);
                banco.addParametro("replace_promocional", promocional);
                banco.procedimentoRead();
            }
            catch (Exception erro)
            {
                msg = new msgInfo(1,erro.Message); msg.ShowDialog(); auxConsistencia = 1;
            }
            finally
            {
                banco.fechaConexao(); if (title != "") { this.txtTitleCupomFiscalConectorCF.Invoke((MethodInvoker)delegate { txtTitleCupomFiscalConectorCF.Text = title; }); }
                if (auxConsistencia == 0)
                {
                    conector_update_lineMD5_d03_descricaoItem(idPedido, idLoja, conectorPDV_PAFECF_indicador_DAV("A", idPedido, String.Format("{0:yyyyMMdd}", DateTime.Now),idLoja,idProduto,sequencial),idProduto,sequencial);
                    reserva_item_idProduto = idProduto;
                    reserva_item_qtty_itens = quantidade;
                    reserva_item_preciLiquido = priceLiquido;
                    reserva_item_price_venda = priceFull;
                    reserva_item_desconto = valorDiscount;
                    reserva_item_barra = codigoBarra;
                    reserva_item_valor_unitario = price;
                }
            }
            return auxConsistencia;

        }


        protected int conectorPDV_replace_pedido_log(string idPedido,
                                      string idLoja,
                                      string idProduto,
                                      string sequencial,
                                      string idfuncionario,
                                      string situacao,
                                      string quantidade,
                                      string priceLiquido,
                                      string price,
                                      string valorDiscount,
                                      string priceFull,
                                      string idprodutoEmbalagem,
                                      string barra,
                                      string idUnidadeMedida, 
                                      string data_alteracao, 
                                      string hora_alteracao, 
                                      string descricaoitem, 
                                       string acrescimoItem, 
                                       string aliquota, 
                                       string tipoAlteracao, 
                                       string situacaoTributaria, 
                                       string indicador_canc )
        {
            try
            {
                auxConsistencia = 0;
                title = banco.abreConexao();
                banco.startTransaction("conectorPDV_replace_pedido_log");
                banco.addParametro("replace_idpedido", idPedido);
                banco.addParametro("replace_idLoja", idLoja);
                banco.addParametro("replace_idProduto", idProduto);
                banco.addParametro("replace_sequencial", sequencial);
                banco.addParametro("replace_idfuncionario", idfuncionario);
                banco.addParametro("replace_situacao", situacao);
                banco.addParametro("replace_quantidade", quantidade);
                banco.addParametro("replace_priceLiquido", priceLiquido);
                banco.addParametro("replace_price", price);
                banco.addParametro("replace_valorDiscount", valorDiscount);
                banco.addParametro("replace_priceFull", priceFull);
                banco.addParametro("replace_idEan", idprodutoEmbalagem);
                banco.addParametro("replace_codigoBarra", barra);
                banco.addParametro("replace_idunidadeMedida", idUnidadeMedida);
                banco.addParametro("replace_data_alteracao", String.Format("{0:yyyyMMdd}",Convert.ToDateTime(data_alteracao)));
                banco.addParametro("replace_hora_alteracao", String.Format("{0:HHmmss}", Convert.ToDateTime(hora_alteracao)));
                banco.addParametro("replace_descricaoitem", descricaoitem);
                banco.addParametro("replace_acrescimoItem", acrescimoItem);
                banco.addParametro("replace_aliquota", aliquota);
                banco.addParametro("replace_tipoAlteracao", tipoAlteracao);
                banco.addParametro("replace_situacaoTributaria", situacaoTributaria);
                banco.addParametro("replace_indicador_canc", indicador_canc); 
                banco.procedimentoRead();
            }
            catch (Exception erro)
            {
                msg = new msgInfo(1,erro.Message); msg.ShowDialog(); auxConsistencia = 1;
            }
            finally
            {
                banco.fechaConexao(); if (title != "") { this.txtTitleCupomFiscalConectorCF.Invoke((MethodInvoker)delegate { txtTitleCupomFiscalConectorCF.Text = title; }); }
                if (auxConsistencia == 0)
                {
                    conector_update_lineMD5_d03_descricaoItem(idPedido, idLoja, conectorPDV_PAFECF_indicador_DAV("A", idPedido, String.Format("{0:yyyyMMdd}", DateTime.Now), idLoja, idProduto, sequencial), idProduto, sequencial);
                }
            }
            return auxConsistencia;

        }

        protected int conectorPDV_replace_reserva(string idPedido,
                              string idLoja,
                              string idfuncionario,
                              string idcliente,
                              string pdv,
                              string idparamentro,
                              string idmetodo,
                              string status,
                              string usuario,
                              string emissao,
                              string expiracao,
                              string discount,
                              string valorLiquido,
                              string valorTotal,
                              string qttyItens,
                              string frete,
                              string observacao,
                              string geraEntrega,
                              string geraMontagem,
                              string sinal,
                              string flagCaixa,
                              string final,
                              string impresso,
                              string entrada,
                              string flag,
                              string dav,
                              string prevenda)
        {
            try
            {
                auxConsistencia = 0;
                title = banco.abreConexao();
                banco.startTransaction("conectorPDV_replace_reserva");
                banco.addParametro("replace_idpedido", idPedido);
                banco.addParametro("replace_idLoja", idLoja);
                banco.addParametro("replace_idfuncionario", idfuncionario);
                banco.addParametro("replace_idcliente", idcliente);
                banco.addParametro("replace_pdv", pdv.Replace("\0", "").Trim());
                banco.addParametro("replace_idparamentro", idparamentro);
                banco.addParametro("replace_idmetodo", idmetodo);
                banco.addParametro("replace_status", status);
                banco.addParametro("replace_usuario", usuario);
                banco.addParametro("replace_emissao", String.Format("{0:yyyyMMdd}", Convert.ToDateTime(emissao)));
                banco.addParametro("replace_expiracao", String.Format("{0:yyyyMMdd}", Convert.ToDateTime(expiracao)));
                banco.addParametro("replace_discount", discount.Replace(",", "."));
                banco.addParametro("replace_valorLiquido", valorLiquido.Replace(",", "."));
                banco.addParametro("replace_valorTotal", valorTotal.Replace(",", "."));
                banco.addParametro("replace_qttyItens", qttyItens.Replace(",", "."));
                banco.addParametro("replace_frete", frete.Replace(",", "."));
                banco.addParametro("replace_observacao", observacao);
                banco.addParametro("replace_geraEntrega", geraEntrega);
                banco.addParametro("replace_geraMontagem", geraMontagem);
                banco.addParametro("replace_sinal", sinal);
                banco.addParametro("replace_flagCaixa", flagCaixa);
                banco.addParametro("replace_final", final);
                banco.addParametro("replace_impresso", impresso);
                banco.addParametro("replace_entrada", String.Format("{0:yyyyMMdd}", Convert.ToDateTime(entrada.Replace(",", ".") == "" ? DateTime.Now.ToShortDateString() : entrada.Replace(",", "."))));
                banco.addParametro("replace_flagFormaFinalizacao", flag);
                banco.addParametro("replace_sequenciaDav", dav == "" ? "0" : dav);
                banco.addParametro("replace_sequenciaPreVenda", prevenda == "" ? "0" : prevenda);
                banco.procedimentoRead();
            }
            catch (Exception erro)
            {
                msg = new msgInfo(1,erro.Message); msg.ShowDialog(); auxConsistencia = 1;
            }
            finally
            {
                banco.fechaConexao(); if (title != "") { this.txtTitleCupomFiscalConectorCF.Invoke((MethodInvoker)delegate { txtTitleCupomFiscalConectorCF.Text = title; }); }
                if (auxConsistencia == 0)
                {
                    flagFormaFinalizacao = flag;
                    flagDav = dav;
                    flagPreVenda = prevenda;
                    auxConsistencia = conector_load_reserva_pessoa(idLoja, idcliente);
                    reserva_metodo = idmetodo;
                    if (flagFormaFinalizacao == "D")
                    {
                        conector_update_lineMD5_d02_dav(idPedido, idLoja, conectorPDV_PAFECF_indicador_DAV("D02", idPedido, String.Format("{0:yyyyMMdd}", Convert.ToDateTime(emissao)), idLoja, "0", "0"));
                    }

                }
            }
            return auxConsistencia;
        }
        protected int conectorPDV_replace_pedidoFinanceiro(string idPedido,
                      string idLoja,
                      string idFinalizadora,
                      string idMetodo,
                      string idTerminal,
                      string idfuncionario,
                      string emissao,
                      string referencia,
                      string encargos,
                      string entrada,
                      string parcelas,
                      string observacao)
        {
            try
            {
                auxConsistencia = 0;
                title = banco.abreConexao();
                banco.startTransaction("conectorPDV_replace_pedidoFinanceiro");
                banco.addParametro("replace_idpedido", idPedido);
                banco.addParametro("replace_idLoja", idLoja);
                banco.addParametro("replace_idFinalizadora", idFinalizadora);
                banco.addParametro("replace_idMetodo", idMetodo);
                banco.addParametro("replace_idTerminal", idTerminal);
                banco.addParametro("replace_idFuncionario", idfuncionario);
                banco.addParametro("replace_emissao", String.Format("{0:yyyyMMdd}", Convert.ToDateTime(emissao)));
                banco.addParametro("replace_referencia", referencia);
                banco.addParametro("replace_encargos", encargos);
                banco.addParametro("replace_entrada", entrada);
                banco.addParametro("replace_numeroParcelas", parcelas);
                banco.addParametro("replace_observacao", observacao);
                banco.procedimentoRead();
            }
            catch (Exception erro)
            {
                msg = new msgInfo(1,erro.Message); msg.ShowDialog(); auxConsistencia = 1;
            }
            finally
            {
                banco.fechaConexao(); if (title != "") { this.txtTitleCupomFiscalConectorCF.Invoke((MethodInvoker)delegate { txtTitleCupomFiscalConectorCF.Text = title; }); }
            }
            return auxConsistencia;
        }
        protected int conectorPDV_replace_pedidoCheque(string idPedido,
              string idLoja,
              string idFinalizadora,
              string idCliente,
              string idMetodo,
              string referencia,
              string encargos,
              string parcelas,
              string emissao,
              string _finally,
              string observacao)
        {
            try
            {
                auxConsistencia = 0;
                title = banco.abreConexao();
                banco.startTransaction("conectorPDV_replace_pedidoCheque");
                banco.addParametro("replace_idpedido", idPedido);
                banco.addParametro("replace_idLoja", idLoja);
                banco.addParametro("replace_idFinalizadora", idFinalizadora);
                banco.addParametro("replace_idCliente", idCliente);
                banco.addParametro("replace_idMetodo", idMetodo);
                banco.addParametro("replace_referencia", referencia);
                banco.addParametro("replace_encargos", encargos);
                banco.addParametro("replace_numeroCheques", parcelas);
                banco.addParametro("replace_emissao", String.Format("{0:yyyyMMdd}", Convert.ToDateTime(emissao)));
                banco.addParametro("replace_finally", _finally);
                banco.addParametro("replace_observacao", observacao);
                banco.procedimentoRead();
            }
            catch (Exception erro)
            {
                msg = new msgInfo(1,erro.Message); msg.ShowDialog(); auxConsistencia = 1;
            }
            finally
            {
                banco.fechaConexao(); if (title != "") { this.txtTitleCupomFiscalConectorCF.Invoke((MethodInvoker)delegate { txtTitleCupomFiscalConectorCF.Text = title; }); }
            }
            return auxConsistencia;
        }
        protected int conectorPDV_replace_pedidoBoleto(string idPedido,
                    string cedente,
                    string idFinalizadora,
                    string sacador,
                    string idMetodo,
                    string referencia,
                    string encargos,
                    string parcelas,
                    string emissao,
                    string idFuncionario)
        {
            try
            {
                auxConsistencia = 0;
                title = banco.abreConexao();
                banco.startTransaction("conectorPDV_replace_pedidoBoleto");
                banco.addParametro("replace_idpedido", idPedido);
                banco.addParametro("replace_cedente", cedente);
                banco.addParametro("replace_idFinalizadora", idFinalizadora);
                banco.addParametro("replace_sacador", sacador);
                banco.addParametro("replace_idMetodo", idMetodo);
                banco.addParametro("replace_referencia", referencia);
                banco.addParametro("replace_encargos", encargos);
                banco.addParametro("replace_numeroParcelas", parcelas);
                banco.addParametro("replace_emissao", String.Format("{0:yyyyMMdd}", Convert.ToDateTime(emissao)));
                banco.addParametro("replace_funcionario", idFuncionario);
                banco.procedimentoRead();
            }
            catch (Exception erro)
            {
                msg = new msgInfo(1,erro.Message); msg.ShowDialog(); auxConsistencia = 1;
            }
            finally
            {
                banco.fechaConexao(); if (title != "") { this.txtTitleCupomFiscalConectorCF.Invoke((MethodInvoker)delegate { txtTitleCupomFiscalConectorCF.Text = title; }); }
            }
            return auxConsistencia;
        }
        protected int conectorPDV_replace_pedidoCartao(string idPedido,
                string idLoja,
                string idFinalizadora,
                string idAdministradora,
                string idMetodo,
                string parcelas,
                string emissao,
                string referencia,
                string encargos)
        {
            try
            {
                auxConsistencia = 0;
                title = banco.abreConexao();
                banco.startTransaction("conectorPDV_replace_pedidoCartao");
                banco.addParametro("replace_idpedido", idPedido);
                banco.addParametro("replace_idLoja", idLoja);
                banco.addParametro("replace_idFinalizadora", idFinalizadora);
                banco.addParametro("replace_idAdministradora", idAdministradora);
                banco.addParametro("replace_idMetodo", idMetodo);
                banco.addParametro("replace_numeroParcelas", parcelas);
                banco.addParametro("replace_emissao", String.Format("{0:yyyyMMdd}", Convert.ToDateTime(emissao)));
                banco.addParametro("replace_referencia", referencia);
                banco.addParametro("replace_encargos", encargos);
                banco.procedimentoRead();
            }
            catch (Exception erro)
            {
                msg = new msgInfo(1,erro.Message); msg.ShowDialog(); auxConsistencia = 1;
            }
            finally
            {
                banco.fechaConexao(); if (title != "") { this.txtTitleCupomFiscalConectorCF.Invoke((MethodInvoker)delegate { txtTitleCupomFiscalConectorCF.Text = title; }); }
            }
            return auxConsistencia;
        }
        protected int conectorPDV_replace_pedidoConvenio(string idPedido,
                    string idLoja,
                    string idFinalizadora,
                    string idCliente,
                    string idConvenio,
                    string idMetodo,
                    string parcelas,
                    string emissao,
                    string referencia,
                    string encargos)
        {
            try
            {
                auxConsistencia = 0;
                title = banco.abreConexao();
                banco.startTransaction("conectorPDV_replace_pedidoConvenio");
                banco.addParametro("replace_idpedido", idPedido);
                banco.addParametro("replace_idLoja", idLoja);
                banco.addParametro("replace_idFinalizadora", idFinalizadora);
                banco.addParametro("replace_idCliente", idCliente);
                banco.addParametro("replace_convenio", idConvenio);
                banco.addParametro("replace_idMetodo", idMetodo);
                banco.addParametro("replace_numeroParcelas", parcelas);
                banco.addParametro("replace_emissao", String.Format("{0:yyyyMMdd}", Convert.ToDateTime(emissao)));
                banco.addParametro("replace_referencia", referencia);
                banco.addParametro("replace_encargos", encargos);
                banco.procedimentoRead();
            }
            catch (Exception erro)
            {
                msg = new msgInfo(erro.Message); msg.ShowDialog(); auxConsistencia = 1;
            }
            finally
            {
                banco.fechaConexao(); if (title != "") { this.txtTitleCupomFiscalConectorCF.Invoke((MethodInvoker)delegate { txtTitleCupomFiscalConectorCF.Text = title; }); }
            }
            return auxConsistencia;
        }
        protected int conectorPDV_replace_pedidoCrediario(string idPedido,
                    string idLoja,
                    string idFinalizadora,
                    string idCliente,
                    string idMetodo,
                    string idFuncionario,
                    string parcelas,
                    string emissao,
                    string entrada,
                    string encargos,
                    string referencia,
                    string observacao,
                    string _finally)
        {
            try
            {
                auxConsistencia = 0;
                title = banco.abreConexao();
                banco.startTransaction("conectorPDV_replace_pedidoCrediario");
                banco.addParametro("replace_idpedido", idPedido);
                banco.addParametro("replace_idLoja", idLoja);
                banco.addParametro("replace_idFinalizadora", idFinalizadora);
                banco.addParametro("replace_idCliente", idCliente);
                banco.addParametro("replace_idMetodo", idMetodo);
                banco.addParametro("replace_idFuncionario", idFuncionario);
                banco.addParametro("replace_numeroParcelas", parcelas);
                banco.addParametro("replace_emissao", String.Format("{0:yyyyMMdd}", Convert.ToDateTime(emissao)));
                banco.addParametro("replace_entrada", entrada);
                banco.addParametro("replace_encargos", encargos);
                banco.addParametro("replace_referencia", referencia);
                banco.addParametro("replace_observacao", observacao);
                banco.addParametro("replace_finally", _finally);
                banco.procedimentoRead();
            }
            catch (Exception erro)
            {
                msg = new msgInfo(erro.Message); msg.ShowDialog(); auxConsistencia = 1;
            }
            finally
            {
                banco.fechaConexao(); if (title != "") { this.txtTitleCupomFiscalConectorCF.Invoke((MethodInvoker)delegate { txtTitleCupomFiscalConectorCF.Text = title; }); }
            }
            return auxConsistencia;
        }
        protected int conectorPDV_replace_cliente(string idCliente,
                    string idLoja,
                    string idTipoPessoa,
                    string idUsuario,
                    string idAtividade,
                    string observacao,
                    string dataEmissao,
                    string dataAlteracao,
                    string idEstado,
                    string uf,
                    string status,
                    string idSpedMunicipio,
                    string idPais, 
                    string liberacao)
        {
            try
            {
                auxConsistencia = 0;
                title = banco.abreConexao();
                banco.startTransaction("conectorPDV_replace_cliente");
                banco.addParametro("replace_idcliente", idCliente);
                banco.addParametro("replace_idloja", idLoja);
                banco.addParametro("replace_idtipoPessoa", idTipoPessoa);
                banco.addParametro("replace_idusuario", idUsuario);
                banco.addParametro("replace_idatividade", idAtividade);
                banco.addParametro("replace_observacao", observacao);
                banco.addParametro("replace_dataEmissao", String.Format("{0:yyyyMMdd}", Convert.ToDateTime(dataEmissao)));
                banco.addParametro("replace_dataAlteracao", String.Format("{0:yyyyMMdd}", Convert.ToDateTime(dataAlteracao)));
                banco.addParametro("replace_idestado", idEstado);
                banco.addParametro("replace_uf", uf);
                banco.addParametro("replace_status", status);
                banco.addParametro("replace_idSpedMunicipio", idSpedMunicipio);
                banco.addParametro("replace_idPais", idPais);
                banco.addParametro("replace_liberacao", liberacao);
                banco.procedimentoRead();
            }
            catch (Exception erro)
            {
                msg = new msgInfo(erro.Message); msg.ShowDialog(); auxConsistencia = 1;
            }
            finally
            {
                banco.fechaConexao(); if (title != "") { this.txtTitleCupomFiscalConectorCF.Invoke((MethodInvoker)delegate { txtTitleCupomFiscalConectorCF.Text = title; }); }
            }
            return auxConsistencia;
        }
        protected int conectorPDV_replace_fisica(string idCliente,
            string cpf,
            string idAtividade,
            string nome,
            string nascimento,
            string idSexo,
            string idEntidade,
            string idCivil)
        {
            try
            {
                auxConsistencia = 0;
                title = banco.abreConexao();
                banco.startTransaction("conectorPDV_replace_fisica");
                banco.addParametro("replace_idcliente", idCliente);
                banco.addParametro("replace_cpf", cpf);
                banco.addParametro("replace_idAtividade",idAtividade);
                banco.addParametro("replace_nome",nome);
                banco.addParametro("replace_nascimento", String.Format("{0:yyyyMMdd}", Convert.ToDateTime(nascimento)));
                banco.addParametro("replace_idSexo", idSexo);
                banco.addParametro("replace_idEntidade", idEntidade);
                banco.addParametro("replace_idCivil", idCivil);
                banco.procedimentoRead();
            }
            catch (Exception erro)
            {
                msg = new msgInfo(erro.Message); msg.ShowDialog(); auxConsistencia = 1;
            }
            finally
            {
                banco.fechaConexao(); if (title != "") { this.txtTitleCupomFiscalConectorCF.Invoke((MethodInvoker)delegate { txtTitleCupomFiscalConectorCF.Text = title; }); }
            }
            return auxConsistencia;
        }

        protected int conectorPDV_replace_rural(string idCliente,
                        string cpf,
                        string idAtividade,
                        string nome,
                        string ie,
                        string idEntidade,
                        string nascimento,
                        string idSexo,
                        string idCivil)
        {
            try
            {
                auxConsistencia = 0;
                title = banco.abreConexao();
                banco.startTransaction("conectorPDV_replace_rural");
                banco.addParametro("replace_idcliente", idCliente);
                banco.addParametro("replace_cpf", cpf);
                banco.addParametro("replace_idAtividade", idAtividade);
                banco.addParametro("replace_nome", nome);
                banco.addParametro("replace_ie", ie);
                banco.addParametro("replace_idEntidade", idEntidade);
                banco.addParametro("replace_nascimento", String.Format("{0:yyyyMMdd}", Convert.ToDateTime(nascimento)));
                banco.addParametro("replace_idSexo", idSexo);
                banco.addParametro("replace_idCivil", idCivil);
                banco.procedimentoRead();
            }
            catch (Exception erro)
            {
                msg = new msgInfo(erro.Message); msg.ShowDialog(); auxConsistencia = 1;
            }
            finally
            {
                banco.fechaConexao(); if (title != "") { this.txtTitleCupomFiscalConectorCF.Invoke((MethodInvoker)delegate { txtTitleCupomFiscalConectorCF.Text = title; }); }
            }
            return auxConsistencia;
        }
        protected int conectorPDV_replace_juridica(string idCliente,
                        string cnpj,
                        string idAtividade,
                        string razao,
                        string fantasia,
                        string ie,
                        string dataAbertura,
                        string idTipofornecedor)
        {
            try
            {
                auxConsistencia = 0;
                title = banco.abreConexao();
                banco.startTransaction("conectorPDV_replace_juridica");
                banco.addParametro("replace_idcliente", idCliente);
                banco.addParametro("replace_cnpj", cnpj);
                banco.addParametro("replace_idAtividade", idAtividade);
                banco.addParametro("replace_razao", razao);
                banco.addParametro("replace_fantasia", fantasia);
                banco.addParametro("replace_ie", ie);
                banco.addParametro("replace_dataAbertura", String.Format("{0:yyyyMMdd}", Convert.ToDateTime(dataAbertura)));
                banco.addParametro("replace_idTipoFornecedor", idTipofornecedor);
                banco.procedimentoRead();
            }
            catch (Exception erro)
            {
                msg = new msgInfo(erro.Message); msg.ShowDialog(); auxConsistencia = 1;
            }
            finally
            {
                banco.fechaConexao(); if (title != "") { this.txtTitleCupomFiscalConectorCF.Invoke((MethodInvoker)delegate { txtTitleCupomFiscalConectorCF.Text = title; }); }
            }
            return auxConsistencia;
        }
        protected int conectorPDV_replace_fone(string fone, string idCliente,
                string idAtividade,
                string ddd,
                string telefone,
                string ie,
                string idTypeFone,
                string complemento,
                string priori)
        {
            try
            {
                auxConsistencia = 0;
                title = banco.abreConexao();
                banco.startTransaction("conectorPDV_replace_fone");
                banco.addParametro("replace_idFone", fone);
                banco.addParametro("replace_idcliente", idCliente);
                banco.addParametro("replace_idAtividade", idAtividade);
                banco.addParametro("replace_ddd", ddd);
                banco.addParametro("replace_telefone", telefone);
                banco.addParametro("replace_ramal", ie);
                banco.addParametro("replace_idTypeFone",idTypeFone);
                banco.addParametro("replace_complemento", complemento);
                banco.addParametro("replace_priori",priori);
                banco.procedimentoRead();
            }
            catch (Exception erro)
            {
                msg = new msgInfo(erro.Message); msg.ShowDialog(); auxConsistencia = 1;
            }
            finally
            {
                banco.fechaConexao(); if (title != "") { this.txtTitleCupomFiscalConectorCF.Invoke((MethodInvoker)delegate { txtTitleCupomFiscalConectorCF.Text = title; }); }
            }
            return auxConsistencia;
        }
        protected int conectorPDV_replace_endereco(string idEndereco, 
                    string idCliente,
                    string sequencia,
                    string cep,
                    string idcepbairro,
                    string idEnderecoType,
                    string bairro,
                    string logradouro,
                    string complemento,
                    string municipio,
                    string estado,
                    string numero)
        {
            try
            {
                auxConsistencia = 0;
                title = banco.abreConexao();
                banco.startTransaction("conectorPDV_replace_endereco");
                banco.addParametro("replace_idEndereco", idEndereco);
                banco.addParametro("replace_idcliente", idCliente);
                banco.addParametro("replace_sequencia", sequencia);
                banco.addParametro("replace_cep",cep);
                banco.addParametro("replace_idcepbairro", idcepbairro);
                banco.addParametro("replace_idEnderecoType", idEnderecoType);
                banco.addParametro("replace_bairro", bairro);
                banco.addParametro("replace_logradouro",logradouro);
                banco.addParametro("replace_complemento",complemento);
                banco.addParametro("replace_municipio", municipio);
                banco.addParametro("replace_estado", estado);
                banco.addParametro("replace_numero", numero);
                banco.procedimentoRead();
            }
            catch (Exception erro)
            {
                msg = new msgInfo(erro.Message); msg.ShowDialog(); auxConsistencia = 1;
            }
            finally
            {
                banco.fechaConexao(); if (title != "") { this.txtTitleCupomFiscalConectorCF.Invoke((MethodInvoker)delegate { txtTitleCupomFiscalConectorCF.Text = title; }); }
            }
            return auxConsistencia;
        }

        protected int conectorPDV_replace_clienteProfissional(string clienteProfissional, string idCliente,
            string idEndereco,
            string empresa,
            string salarioDeclarado,
            string salarioComprovado,
            string idprofissao,
            string idEscolaridade,
            string default1)
        {
            try
            {
                auxConsistencia = 0;
                title = banco.abreConexao();
                banco.startTransaction("conectorPDV_replace_clienteProfissional");
                banco.addParametro("replace_idClienteProfissional", clienteProfissional);
                banco.addParametro("replace_idcliente", idCliente);
                banco.addParametro("replace_idendereco", idEndereco);
                banco.addParametro("replace_empresa", empresa);
                banco.addParametro("replace_salarioDeclarado", salarioDeclarado);
                banco.addParametro("replace_salarioComprovado", salarioComprovado);
                banco.addParametro("replace_idprofissao", idprofissao);
                banco.addParametro("replace_idEscolaridade", idEscolaridade);
                banco.addParametro("replace_default1", default1);
                banco.procedimentoRead();
            }
            catch (Exception erro)
            {
                msg = new msgInfo(erro.Message); msg.ShowDialog(); auxConsistencia = 1;
            }
            finally
            {
                banco.fechaConexao(); if (title != "") { this.txtTitleCupomFiscalConectorCF.Invoke((MethodInvoker)delegate { txtTitleCupomFiscalConectorCF.Text = title; }); }
            }
            return auxConsistencia;
        }

        protected int conectorPDV_replace_clienteReferencia(string clienteReferencia, string idCliente,
                            string idtypeReferencia,
                            string empresaContato,
                            string contato,
                            string ddd,
                            string fone,
                            string ramal,
                            string data, string observacao)
        {
            try
            {
                auxConsistencia = 0;
                title = banco.abreConexao();
                banco.startTransaction("conectorPDV_replace_clienteReferencia");
                banco.addParametro("replace_idReferencia", clienteReferencia);
                banco.addParametro("replace_idcliente", idCliente);
                banco.addParametro("replace_idtypeReferencia",idtypeReferencia);
                banco.addParametro("replace_empresaContato", empresaContato);
                banco.addParametro("replace_Contato", contato);
                banco.addParametro("replace_ddd",ddd);
                banco.addParametro("replace_fone", fone);
                banco.addParametro("replace_ramal", ramal);
                banco.addParametro("replace_data",  String.Format("{0:yyyyMMdd}", Convert.ToDateTime(data)));
                banco.addParametro("replace_observacao", observacao);   
                banco.procedimentoRead();
            }
            catch (Exception erro)
            {
                msg = new msgInfo(erro.Message); msg.ShowDialog(); auxConsistencia = 1;
            }
            finally
            {
                banco.fechaConexao(); if (title != "") { this.txtTitleCupomFiscalConectorCF.Invoke((MethodInvoker)delegate { txtTitleCupomFiscalConectorCF.Text = title; }); }
            }
            return auxConsistencia;
        }
        protected int conectorPDV_replace_clienteEntrega(string clienteEntrega,
                    string endereco,
                    string pessoa,
                    string seq,
                    string default1
)
        {
            try
            {
                auxConsistencia = 0;
                title = banco.abreConexao();
                banco.startTransaction("conectorPDV_replace_clienteEntrega");
                banco.addParametro("replace_idClienteEntrega", clienteEntrega);
                banco.addParametro("replace_idEndereco", endereco);
                banco.addParametro("replace_idCliente", pessoa);
                banco.addParametro("replace_sequencia", seq);
                banco.addParametro("replace_default1", default1);
                banco.procedimentoRead();
            }
            catch (Exception erro)
            {
                msg = new msgInfo(erro.Message); msg.ShowDialog(); auxConsistencia = 1;
            }
            finally
            {
                banco.fechaConexao(); if (title != "") { this.txtTitleCupomFiscalConectorCF.Invoke((MethodInvoker)delegate { txtTitleCupomFiscalConectorCF.Text = title; }); }
            }
            return auxConsistencia;
        }
        protected int conectorPDV_replace_clienteCobranca(string clienteCobranca,
                            string endereco,
                            string pessoa,
                            string seq,
                            string default1
        )
        {
            try
            {
                auxConsistencia = 0;
                title = banco.abreConexao();
                banco.startTransaction("conectorPDV_replace_clienteCobranca");
                banco.addParametro("replace_idClienteCobranca", clienteCobranca);
                banco.addParametro("replace_idEndereco", endereco);
                banco.addParametro("replace_idCliente", pessoa);
                banco.addParametro("replace_sequencia", seq);
                banco.addParametro("replace_default1", default1);
                banco.procedimentoRead();
            }
            catch (Exception erro)
            {
                msg = new msgInfo(erro.Message); msg.ShowDialog(); auxConsistencia = 1;
            }
            finally
            {
                banco.fechaConexao(); if (title != "") { this.txtTitleCupomFiscalConectorCF.Invoke((MethodInvoker)delegate { txtTitleCupomFiscalConectorCF.Text = title; }); }
            }
            return auxConsistencia;
        }

        protected int conectorPDV_replace_clienteRisco(string risco, string idCliente,
                    string cooperado,
                    string preferencial,
                    string limiteCheque,
                    string onlyHourCheque,
                    string convenio,
                    string pagador,
                    string limiteEstouro, 
            string limiteConvenio, 
            string noteCobrancaConvenio, 
            string typePrazo, 
            string diaEncerramento, string diaFechamento, string prazoDias, string motivo)
        {
            try
            {
                auxConsistencia = 0;
                title = banco.abreConexao();
                banco.startTransaction("conectorPDV_replace_clienteRisco");
                banco.addParametro("replace_idclienteRisco", risco);
                banco.addParametro("replace_idcliente", idCliente);
                banco.addParametro("replace_cooperado", cooperado);
                banco.addParametro("replace_preferencial", preferencial);
                banco.addParametro("replace_limiteCheque", limiteCheque);
                banco.addParametro("replace_onlyHourCheque", onlyHourCheque);
                banco.addParametro("replace_convenio", convenio);
                banco.addParametro("replace_pagador", pagador);
                banco.addParametro("replace_limiteEstouro", limiteEstouro);
                banco.addParametro("replace_limiteConvenio", limiteConvenio);
                banco.addParametro("replace_noteCobrancaConvenio", noteCobrancaConvenio);
                banco.addParametro("replace_typePrazo", typePrazo);
                banco.addParametro("replace_diaEncerramento", diaEncerramento);
                banco.addParametro("replace_diaFechamento", diaFechamento);
                banco.addParametro("replace_prazoDias", prazoDias);
                banco.addParametro("replace_motivo", motivo);
                banco.procedimentoRead();
            }
            catch (Exception erro)
            {
                msg = new msgInfo(erro.Message); msg.ShowDialog(); auxConsistencia = 1;
            }
            finally
            {
                banco.fechaConexao(); if (title != "") { this.txtTitleCupomFiscalConectorCF.Invoke((MethodInvoker)delegate { txtTitleCupomFiscalConectorCF.Text = title; }); }
            }
            return auxConsistencia;
        }
        //###########################################################END Procedimento de Banco WEBSERVICE ####################################################
        #endregion
        private void ConectorCF_KeyDown(object sender, KeyEventArgs e)
        {

            #region
            if (!((e.KeyCode == Keys.F11 ||
                            e.KeyCode == Keys.F1 ||
                            e.KeyCode == Keys.F2 ||
                            e.KeyCode == Keys.F3 ||
                            e.KeyCode == Keys.F4 ||
                            e.KeyCode == Keys.F5 ||
                            e.KeyCode == Keys.F6 ||
                            e.KeyCode == Keys.F7 ||
                            e.KeyCode == Keys.F8 ||
                            e.KeyCode == Keys.F9 ||
                            e.KeyCode == Keys.F10 ||
                            e.KeyCode == Keys.F11 ||
                            e.KeyCode == Keys.F13 ||
                            e.KeyCode == Keys.Enter ||
                            e.KeyCode == Keys.End ||
                            e.KeyCode == Keys.Shift ||
                            e.KeyCode == Keys.Home ||
                            e.KeyCode == Keys.M ||
                            e.KeyCode == Keys.F ||
                            e.KeyCode == Keys.W ||
                            e.KeyCode == Keys.Delete ||
                            e.KeyCode == Keys.Space ||
                            e.KeyCode == Keys.Escape || e.KeyCode == Keys.H) && call_pdv == 0))
            {
                if (call_pdv == 0)
                {
                    return;
                }
            }
            
            if (e.KeyValue == 49 || e.KeyValue == 50 || e.KeyValue == 51 ||
                e.KeyValue == 52 || e.KeyValue == 53 || e.KeyValue == 54 ||
                e.KeyValue == 55 || e.KeyValue == 56 || e.KeyValue == 57 ||
                e.KeyValue == 48 || e.KeyValue == 188 || e.KeyValue == 190)
            {
                return;
            }
            if (pnlAutorizacaoPDVConectorCF.Visible == true && txtAutorizacaoUsuarioConectorCF.Text.Replace("\r\n", "").Trim() != "" && txtAutorizacaoSenhaConectorCF.Text.Replace("\r\n", "").Trim().Length > 0)
            {//conector_valida_pass()
                return;
            }
            #endregion



            if (alwaysVariables.ModoOperacao == 1)
            {
                if (fiscal_data_movimento.Trim() != "" && fiscal_data_movimento == "000000")
                {
                    functionECF.conectorECF_DataMovimento(alwaysVariables.ModeloEcf, ref fiscal_data_movimento, ref fiscal_MSG, ref fiscal_retorno, alwaysVariables.ECF_Ligada);
                    //fiscal_retorno = conectorECF.Bematech_FI_DataMovimento(ref fiscal_data_movimento);
                    //conectorECF.Analisa_iRetorno(fiscal_retorno, ref fiscal_MSG);
                    if (fiscal_retorno != 1)
                    {
                        functionECF.conectorECF_Analisa_RetornoImpressora(alwaysVariables.ModeloEcf, ref ACK, ref ST1, ref ST2, ref ST3, ref fiscal_MSG);
                    }
                }
                if (call_pdv == 0 || (call_pdv == 10 && pnlAutorizacaoPDVConectorCF.Visible == false) || call_pdv == 1 && (txtEntradaDadosConectorCF.Text == String.Format("{0:MMyyyydd}", DateTime.Now)) || (call_pdv == 1 && txtEntradaDadosConectorCF.Text == "10") || pnlAutorizacaoPDVConectorCF.Visible == true || (fiscal_retorno == 1 || call_pdv == 8 || call_pdv == 9 || call_pdv == 1) && (arranqueTotal == 1 || File.Exists(folderMFDGrand + "\\grandFullPDV" + ".enc")) ||
                    ((call_pdv == 8) || ((call_pdv == 0 && e.KeyCode == Keys.Escape) && (arranqueTotal == 1 || File.Exists(folderMFDGrand + "\\grandFullPDV" + ".enc")))))
                {
                    if (ST1 != null)
                    {
                        txtVisorMsgConectorCF.Text = ST1;
                        ST1 = null;
                    }
                    flagParada = 0;
                    /*
                     * Função da variavel call_pdv
                     * 0 - Caixa Aberto pronto para processar vendas pós entrada do operador
                     * 1 - Menu de opção do supervisor do PDV
                     * 
                     */
                    if (/*((arranqueTotal == 1) || File.Exists(folderMFDGrand + "\\grandFullPDV" + ".enc")) ||*/
                        (call_pdv == 0 || (alwaysVariables.flagHomologacao == "0")) ||
                        ((alwaysVariables.flagHomologacao == "1") || ((arranqueTotal == 1) || File.Exists(folderMFDGrand + "\\grandFullPDV" + ".enc"))) ||
                        ((arranqueTotal == 1) || File.Exists(folderMFDGrand + "\\grandFullPDV" + ".enc")) || 
                        (call_pdv == 1 && txtEntradaDadosConectorCF.Text == "10" || call_pdv == 1 && call_funcao == 10) || pnlAutorizacaoPDVConectorCF.Visible == true || call_pdv == 8)
                    {
                        switch (call_pdv)
                        {
                            case 0:
                                #region
                                if (e.KeyCode == Keys.Enter && call_pdv == 0)
                                {
                                    fiscal_MSG = "";
                                    //Teste conectorPDV_acion_cupom();
                                    //break;
                                    if (call_pdv == 0)
                                    {
                                        #region
                                        int test = conector_verifica_exits_itens(fiscal_Cupom.Replace("\0", "").Trim(), fiscal_store.Replace("\0", "").Trim() == "" ? alwaysVariables.Store : fiscal_store, fiscal_numero_caixa.Replace("\0", "").Trim());
                                        if (test <= 0 && arranqueTotal == 0) { conectorPDV_acion_gt_cryt(); }
                                        if (fiscal_retorno == 1)
                                        { // Comparação entre o atual e o grande total guardado 
                                            //Flavio
                                            if (1 == 1 || pnlAutorizacaoPDVConectorCF.Visible == true || (alwaysVariables.Serie.Replace("\"", "").Trim() == "\"EMULADOR       \"".Replace("\"", "").Trim()) || 
                                                (test > 0) || 
                                                (Convert.ToDecimal(String.Format("{0:F2}", Convert.ToDecimal(fiscal_GT_compare.Replace("\0", "").Trim() == "" ? "1" : fiscal_GT_compare.Replace("\0", "").Trim()))) / 100) == 
                                                (Convert.ToDecimal(String.Format("{0:F2}", Convert.ToDecimal(fiscal_GT.Replace("\0", "").Trim() == "" ? "1" : fiscal_GT.Replace("\0", "").Trim()))) / 100))
                                            {
                                                /*if (alwaysVariables.flagHomologacao == "0")
                                                {
                                                    conectorPDV_acion_cupom();
                                                }
                                                else
                                                {
                                                    conectorPDV_acion_funcao();
                                                }*/
                                                //ProcessTabKey(true);
                                                switch (call_funcao)
                                                {
                                                    case 0:
                                                        if (alwaysVariables.flagHomologacao == "0")
                                                        {
                                                            conectorPDV_acion_cupom();
                                                        }
                                                        else
                                                        {
                                                            conectorPDV_acion_funcao();
                                                        }
                                                        File.Delete(@"C:\conector\nfce_temp.txt");
                                                        break;
                                                    case 1:
                                                        if (Convert.ToInt32(sequenciaItemAle.Trim() == "" ? "0" : sequenciaItemAle) > 0)
                                                        {
                                                            functionECF.conectorECF_fiscal_flag(alwaysVariables.ModeloEcf, ref fiscal_flag, ref fiscal_MSG, ref fiscal_retorno, alwaysVariables.ECF_Ligada);
                                                            call_pdv = 0;
                                                            if (fiscal_retorno == 1)
                                                            {
                                                                if (String.Format("{0:ddMMyy}", DateTime.Now) == fiscal_data_movimento)
                                                                {
                                                                    if (Convert.ToDouble(pedido) == 0)
                                                                    {

                                                                        if (fiscal_flag == 33 || fiscal_flag == 37)
                                                                        {
                                                                            //fiscal_retorno = conectorECF.Bematech_FI_CancelaItemGenerico(sequenciaItemAle);
                                                                            functionECF.conectorECF_CancelaItemGenerico(alwaysVariables.ModeloEcf, sequenciaItemAle, ref fiscal_MSG, ref fiscal_retorno, alwaysVariables.ECF_Ligada);
                                                                            //conectorECF.Analisa_iRetorno(fiscal_retorno, ref fiscal_MSG);
                                                                            if (fiscal_retorno != 1)
                                                                            { txtVisorMsgConectorCF.Text = fiscal_MSG; }
                                                                            else
                                                                            {
                                                                                this.ltbDetalhesConectorCF.ForeColor = System.Drawing.Color.Red;
                                                                                ltbDetalhesConectorCF.Text += " [ ITEM CANCELADO ] " + sequenciaItemAle.PadLeft(3, '0') + "    "
                                                                                            + produto_barra + "    "//produto_barra.PadLeft(12, '0') + "    "
                                                                                            + produto_descricao + "    " + "\r\n";
                                                                                            /*+ (produto_pesavel == "0" ? produto_qtty : "    ") + "    "
                                                                                            + produto_unidade + "    "
                                                                                            + (produto_pesavel == "0" ? produto_qtty + produto_unidade : String.Format("{0:F3}", Decimal.Parse(produto_qtty.Replace(",", ".")), 3).ToString().Replace(".", ",") + produto_unidade + " X " + produto_price_venda.Replace(".", ",")) + "    "
                                                                                            + Math.Round(Decimal.Parse(produto_valor_unitario.Replace(",", ".")), 2).ToString().Replace(".", ",") + "      "
                                                                                            + produto_tributacao + "    "
                                                                                            + Math.Round((Decimal.Parse(produto_qtty.Replace(",", ".")) * Decimal.Parse(produto_valor_unitario)), 2).ToString().Replace(".", ",") + "\r\n";
                                                                                //+ txtEntradaDadosConectorCF.Text + "\r\n";
                                                                                ltbDetalhesConectorCF.Text += "___________________________________________________________" + "\r\n";*/
                                                                                ltbDetalhesConectorCF.Select(ltbDetalhesConectorCF.Text.Length, 0);
                                                                                ltbDetalhesConectorCF.ScrollToCaret();
                                                                                this.ltbDetalhesConectorCF.ForeColor = System.Drawing.Color.White;
                                                                                conectorPDV_exe_cupomGenericoItem(fiscal_Cupom, fiscal_numero_caixa.Replace("\0", "").Trim(), produto_barra, sequenciaItemAle);
                                                                                call_funcao = 0;
                                                                                valuesAcresDesc = "    ";
                                                                                sequenciaItemAle = "   ";
                                                                                resetLabel();
                                                                                resetVariable();
                                                                                conector_find_subFull("1");
                                                                                txtVisorMsgConectorCF.Text = "CUPOM FISCAL ABERTO";
                                                                                txtEntradaDadosConectorCF.CausesValidation = true;
                                                                                txtDescricaoItemConectorCF.Select();
                                                                                txtEntradaDadosConectorCF.Select();
                                                                            }
                                                                        }
                                                                        else
                                                                        {
                                                                            msg = new msgInfo("FUNÇÃO NÃO PERMITIDA"); msg.ShowDialog();
                                                                        }
                                                                    }
                                                                    else
                                                                    {
                                                                        msg = new msgInfo("RESERVA CARREGADA NÃO PODE SER ALTERADA..!"); msg.ShowDialog();
                                                                    }
                                                                }
                                                                else
                                                                {
                                                                    msg = new msgInfo(1, "DATA DA IMPRESSORA DIFERENTE DA DATA DO SISTEMA,\n VERIFIQUE O STATUS DA IMPRESSORA,\n MOVIMENTO DO DIA VESUS DATA IMPRESSORA,\n AGUARDANDO EMISSÃO DA LEITURA Z."); conector_stop_thread(); msg.ShowDialog(); this.Dispose();
                                                                    txtEntradaDadosConectorCF.Select();
                                                                }

                                                            }
                                                            else
                                                            {
                                                                msg = new msgInfo(1, fiscal_MSG + " - IMPOSSÍVEL EXECUTAR ESSA FUNÇÃO"); msg.ShowDialog();
                                                                resetLabel();
                                                                txtEntradaDadosConectorCF.Clear();
                                                                conector_find_subFull("1");
                                                                txtEntradaDadosConectorCF.Select();
                                                                valuesAcresDesc = "    ";
                                                                acresDesc = " ";
                                                                sequenciaItemAle = "    ";
                                                            }

                                                        }
                                                        else
                                                        {
                                                            sequenciaItemAle = "   ";
                                                        }
                                                        txtEntradaDadosConectorCF.Select();
                                                        break;
                                                }
                                            }
                                            else
                                            {
                                                if (call_pdv == 0)
                                                {
                                                    functionECF.conectorECF_fiscal_flag(alwaysVariables.ModeloEcf, ref fiscal_flag, ref fiscal_MSG, ref fiscal_retorno, alwaysVariables.ECF_Ligada);
                                                    if (fiscal_flag == 1 || fiscal_flag == 33 || fiscal_flag == 32)
                                                    {
                                                        msgInfo msg = new msgInfo(1, "Caro Cliente - " + "ERRO FATAL GRANDE TOTAL INVÁLIDO OU NÃO ENCONTRADO! SOLICITE A AUTORIZAÇÃO PARA GERAÇÃO DO GRANDE TOTAL"); msg.ShowDialog();
                                                        conector_acao_cancelaCupom();
                                                        conector_acao_controleMenu();
                                                        txtEntradaDadosConectorCF.CausesValidation = true;
                                                        call_pdv = 1;
                                                        call_funcao = 0;
                                                    }
                                                    else
                                                    {
                                                        call_funcao = 0;
                                                    }
                                                }
                                                txtEntradaDadosConectorCF.Select();
                                            }
                                        #endregion
                                        }
                                        else
                                        {
                                            if (call_pdv == 0)
                                            {
                                                functionECF.conectorECF_fiscal_flag(alwaysVariables.ModeloEcf, ref fiscal_flag, ref fiscal_MSG, ref fiscal_retorno, alwaysVariables.ECF_Ligada);
                                                if (fiscal_flag == 1 || fiscal_flag == 33 || fiscal_flag == 32 || fiscal_flag == 37)
                                                {
                                                    msgInfo msg = new msgInfo(1, "Caro Cliente - " + "ERRO FATAL GRANDE TOTAL INVÁLIDO OU NÃO ENCONTRADO! SOLICITE A AUTORIZAÇÃO PARA GERAÇÃO DO GRANDE TOTAL"); msg.ShowDialog();
                                                    conector_acao_cancelaCupom();
                                                    conector_acao_controleMenu();
                                                    txtEntradaDadosConectorCF.CausesValidation = true;
                                                    call_pdv = 1;
                                                    call_funcao = 0;
                                                }
                                            }
                                            else
                                            {
                                                call_pdv = 1;
                                                call_funcao = 0;
                                            }
                                            txtEntradaDadosConectorCF.Select();
                                        }
                                    }
                                    if (pnlAutorizacaoPDVConectorCF.Visible == true)
                                    {
                                        conector_valida_pass();
                                    }
                                }
                                else if (e.KeyCode == Keys.Delete && call_pdv == 0 && pnlAutorizacaoPDVConectorCF.Visible == true)
                                {
                                    txtAutorizacaoSenhaConectorCF.Clear();
                                    txtAutorizacaoUsuarioConectorCF.Clear();
                                    txtAutorizacaoUsuarioConectorCF.Select();
                                    if (e.KeyCode == Keys.Delete && call_pdv == 1 && pnlAutorizacaoPDVConectorCF.Visible == false)
                                    {
                                        txtVisorMsgConectorCF.Text = "MENU CONECTORPDV";
                                        call_funcao = 0;
                                        lblVisorEntradaDadosConectorCF.Text = "ENTRADA DE DADOS";
                                        conector_reset_MFD();
                                        txtEntradaDadosConectorCF.CausesValidation = true;
                                        txtEntradaDadosConectorCF.Clear();
                                        txtEntradaDadosConectorCF.Select();
                                    }
                                }
                                else if (call_pdv == 0 && e.KeyCode == Keys.M && pnlAutorizacaoPDVConectorCF.Visible == false)
                                {
                                    fiscal_flag = 0;
                                    functionECF.conectorECF_fiscal_flag(alwaysVariables.ModeloEcf, ref fiscal_flag, ref fiscal_MSG, ref fiscal_retorno, alwaysVariables.ECF_Ligada);
                                    if (fiscal_flag == 0 || fiscal_flag == 32 || fiscal_flag == 36)//fiscal_flag == 1 || fiscal_flag == 33 || fiscal_flag == 32)
                                    {
                                        conectorPDV_resumo_venda(true);
                                    }
                                }
                                else if (call_pdv == 0 && e.KeyCode == Keys.M && pnlAutorizacaoPDVConectorCF.Visible == false)
                                {
                                    fiscal_flag = 0;
                                    functionECF.conectorECF_fiscal_flag(alwaysVariables.ModeloEcf, ref fiscal_flag, ref fiscal_MSG, ref fiscal_retorno, alwaysVariables.ECF_Ligada);
                                    if (fiscal_flag == 0 || fiscal_flag == 32 || fiscal_flag == 36)//fiscal_flag == 1 || fiscal_flag == 33 || fiscal_flag == 32)
                                    {
                                        conectorPDV_resumo_venda(true);
                                    }
                                }
                                else if (e.KeyCode == Keys.F1 && call_pdv == 0)
                                {
                                    if (call_pdv == 0)
                                    {
                                        functionECF.conectorECF_fiscal_flag(alwaysVariables.ModeloEcf, ref fiscal_flag, ref fiscal_MSG, ref fiscal_retorno, alwaysVariables.ECF_Ligada);
                                        if (fiscal_flag == 32 || fiscal_flag == 0 || fiscal_flag == 4 || fiscal_flag == 36 || fiscal_flag == 37)
                                        {
                                            call_pdv = 4;
                                            txtEntradaDadosConectorCF.MaxLength = 30;
                                            txtVisorMsgConectorCF.Text = "INFORMAÇÕES DO CLIENTE";
                                            //input_find = null;
                                            //input_cliente = null;
                                            this.lblVisorEntradaDadosConectorCF.Location = new System.Drawing.Point(195, 511);//(130, 514);
                                            lblVisorEntradaDadosConectorCF.Text = " [ 0 ] - CODIGO DO CLIENTE  [ 1 ] - CPF   [ 2 ] - CNPJ";
                                            txtEntradaDadosConectorCF.Clear();
                                            txtEntradaDadosConectorCF.ReadOnly = false;
                                            txtEntradaDadosConectorCF.Select();
                                        }
                                        else
                                        {
                                            txtVisorMsgConectorCF.Text = "VENDA INICIADA";
                                            input_find = null;
                                            input_cliente = null;
                                        }
                                    }
                                }
                                else if (e.KeyCode == Keys.F2 && call_pdv == 0)
                                {
                                    if (cryptografia.conectorPDV_verifica_serial() == true)
                                    {
                                        if (pnlAutorizacaoPDVConectorCF.Visible == false)
                                        {
                                            conector_acao_cancelaCupom();
                                            if (retornoPedido > 0)
                                            {
                                                conector_webservice_preVenda_retorno_pedido(alwaysVariables.Store, pedido.ToString());
                                                retornoPedido = 0;
                                            }
                                        }
                                    }
                                }
                                else if (e.KeyCode == Keys.F3 && call_pdv == 0)
                                {
                                    if (String.Format("{0:ddMMyy}", DateTime.Now) == fiscal_data_movimento)
                                    {
                                        if (Convert.ToDouble(pedido) == 0)
                                        {
                                            functionECF.conectorECF_fiscal_flag(alwaysVariables.ModeloEcf, ref fiscal_flag, ref fiscal_MSG, ref fiscal_retorno, alwaysVariables.ECF_Ligada);

                                            if (fiscal_flag == 33 || fiscal_flag == 37)
                                            {
                                                //fiscal_retorno = conectorECF.Bematech_FI_CancelaItemAnterior();
                                                functionECF.conectorECF_CancelaItemAnterior(alwaysVariables.ModeloEcf, ref fiscal_MSG, ref fiscal_retorno, alwaysVariables.ECF_Ligada);
                                                //conectorECF.Analisa_iRetorno(fiscal_retorno, ref fiscal_MSG);
                                                if (fiscal_retorno != 1)
                                                { txtVisorMsgConectorCF.Text = fiscal_MSG; }
                                                else
                                                {
                                                    this.ltbDetalhesConectorCF.ForeColor = System.Drawing.Color.Red;

                                                    ltbDetalhesConectorCF.Text += sequenciaItem + "    "
                                                                + last_item_chave + "    "//produto_barra.PadLeft(12, '0') + "    "
                                                                + last_item_descricao + "    " + " [CANCELADO]" + "    "
                                                                + (last_item_pesavel == "0" ? last_item_qtty : "    ") + "    "
                                                                + last_item_unidade + "    "
                                                                + (last_item_pesavel == "0" ? last_item_qtty + last_item_unidade : String.Format("{0:F3}", Decimal.Parse(last_item_qtty.Replace(",", ".")), 3).ToString().Replace(".", ",") + last_item_unidade + " X " + last_item_price_venda.Replace(".", ",")) + "    "
                                                                + Math.Round(Decimal.Parse(last_item_valor_unitario.Replace(",", ".")), 2).ToString().Replace(".", ",") + "      "
                                                                + last_item_tributacao + "    "
                                                                + Math.Round((Decimal.Parse(last_item_qtty.Replace(",", ".")) * Decimal.Parse(last_item_valor_unitario)), 2).ToString().Replace(".", ",") + "\r\n";
                                                    ltbDetalhesConectorCF.Text += "___________________________________________________________" + "\r\n";
                                                    ltbDetalhesConectorCF.Select(ltbDetalhesConectorCF.Text.Length, 0);
                                                    ltbDetalhesConectorCF.ScrollToCaret();
                                                    this.ltbDetalhesConectorCF.ForeColor = System.Drawing.Color.White;
                                                    conectorPDV_exe_cupomlastItem(fiscal_Cupom.Replace("\0", "").Trim(), fiscal_numero_caixa.Replace("\0", "").Trim(), last_item_chave, sequenciaItem);
                                                }
                                            }
                                            else
                                            {
                                                msg = new msgInfo("FUNÇÃO NÃO PERMITIDA"); msg.ShowDialog();
                                            }
                                        }
                                        else
                                        {
                                            msg = new msgInfo("RESERVA CARREGADA NÃO PODE SER ALTERADA..!"); msg.ShowDialog();
                                        }
                                    }
                                    else
                                    {
                                        msg = new msgInfo("DATA DA IMPRESSORA DIFERENTE DA DATA DO SISTEMA,\n VERIFIQUE O STATUS DA IMPRESSORA,\n MOVIMENTO DO DIA VESUS DATA IMPRESSORA,\n AGUARDANDO EMISSÃO DA LEITURA Z."); msg.ShowDialog(); //this.Dispose();
                                        txtEntradaDadosConectorCF.Select();
                                    }

                                }
                                else
                                    if (e.KeyCode == Keys.F9 && call_pdv == 0)
                                    {
                                        pgbWaitReservaConectorCF.Value = 0;
                                        valuesAcresDesc = "    ";
                                        acresDesc = " ";
                                        if (String.Format("{0:ddMMyy}", DateTime.Now) == fiscal_data_movimento)
                                        {
                                            fiscal_flag = 0;
                                            functionECF.conectorECF_fiscal_flag(alwaysVariables.ModeloEcf, ref fiscal_flag, ref fiscal_MSG, ref fiscal_retorno, alwaysVariables.ECF_Ligada);
                                            if (fiscal_flag == 32 || fiscal_flag == 0 || fiscal_flag == 4 || fiscal_flag == 36 || fiscal_flag == 37)
                                            {
                                                if (pnlAutorizacaoPDVConectorCF.Visible == false)
                                                {
                                                    modoPedido = 0;
                                                    NotaNumber = null;
                                                    conector_reset_reserva();
                                                    call_pdv = 6;
                                                    pnlReservaConectorCF.Visible = true;
                                                    this.pnlReservaConectorCF.Location = new System.Drawing.Point(262, 232);
                                                    this.pnlReservaConectorCF.Size = new System.Drawing.Size(757, 262);
                                                    txtEntradaDadosConectorCF.CausesValidation = false;
                                                    txtNumeroReservaConectorCF.Select();
                                                    txtNumeroReservaConectorCF.ReadOnly = true;
                                                    txtEntradaDadosConectorCF.CausesValidation = true;
                                                    txtVisorMsgConectorCF.Text = "SOLICITANDO REQUESICAO";
                                                    sequenciaItem = "0".PadLeft(3, '0');
                                                }
                                            }
                                            else
                                            {
                                                msg = new msgInfo("FUNÇÃO NÃO PERMITIDA, \n CUPOM INICIADO, \n IMPOSSÍVEL PROSSEGUIR."); msg.ShowDialog();
                                            }
                                        }
                                        else
                                        {
                                            msg = new msgInfo("DATA DA IMPRESSORA DIFERENTE DA DATA DO SISTEMA,\n VERIFIQUE O STATUS DA IMPRESSORA,\n MOVIMENTO DO DIA VESUS DATA IMPRESSORA,\n AGUARDANDO EMISSÃO DA LEITURA Z."); msg.ShowDialog();
                                            txtEntradaDadosConectorCF.Select();
                                        }
                                    }
                                    else if (e.KeyCode == Keys.F4 && call_pdv == 0)
                                    {
                                        if (fiscal_flag == 35)
                                        {
                                            msg = new msgInfo("FORMA DE PAGAMENTO INICIALIZADA NO ECF, FINALIZE O CUPOM FISCAL...!"); msg.ShowDialog();
                                        }
                                        else
                                        {
                                            if (Convert.ToDecimal(lblRecebidoMoneyConectorCF.Text.Replace(",", ".")) == 0)
                                            {
                                                if (Convert.ToDouble(fiscal_Cupom.Trim()) > 0 && fiscal_Cupom.Trim() != "")
                                                {
                                                    txtEntradaDadosConectorCF.Clear();
                                                    txtDescricaoItemConectorCF.Select();
                                                    fiscal_flag = 0;
                                                    functionECF.conectorECF_fiscal_flag(alwaysVariables.ModeloEcf, ref fiscal_flag, ref fiscal_MSG, ref fiscal_retorno, alwaysVariables.ECF_Ligada);
                                                    if (fiscal_flag == 33 || fiscal_flag == 37)
                                                    {
                                                        if (Convert.ToInt32(sequenciaItem) > 0 && sequenciaItem != "")
                                                        {
                                                            if (conector_verifica_exits_itens(fiscal_Cupom.Replace("\0", "").Trim(), fiscal_store.Replace("\0", "").Trim() == "" ? alwaysVariables.Store : fiscal_store, fiscal_numero_caixa.Replace("\0", "").Trim()) >= 1)
                                                            {
                                                                resetLabel();
                                                                lbQttyConectorCF.Text = "0,000";
                                                                txtVisorMsgConectorCF.Text = " INFORME O ITEM [ CANCELAMENTO ]";
                                                                txtDescricaoItemConectorCF.Text = "[ DIGITE O ITEM ]";
                                                                txtEntradaDadosConectorCF.Clear();
                                                                call_funcao = 1;
                                                                txtEntradaDadosConectorCF.CausesValidation = true;
                                                                txtEntradaDadosConectorCF.Select();
                                                            }
                                                            else
                                                            {
                                                                msg = new msgInfo("NÃO EXISTE ITEM NO CUPOM FISCAL."); msg.ShowDialog();
                                                            }
                                                        }
                                                        else
                                                        {
                                                            msg = new msgInfo("ITEM INVÁLIDO, OU NÃO EXISTE."); msg.ShowDialog();
                                                        }
                                                        txtEntradaDadosConectorCF.Select();
                                                    }
                                                    else if (fiscal_flag == 35) //Desconto para subtotal=condição 'O cupom deve estar subtotalizado'
                                                    {
                                                        functionECF.conectorECF_AcrescimoDescontoSubtotal(alwaysVariables.ModeloEcf, "D", "%", String.Format("{0:F2}", (Convert.ToDecimal(txtEntradaDadosConectorCF.Text))), ref fiscal_MSG, ref fiscal_retorno, alwaysVariables.ECF_Ligada);
                                                        //fiscal_retorno = conectorECF.Bematech_FI_AcrescimoDescontoSubtotalMFD("D", "%", String.Format("{0:F2}", (Convert.ToDecimal(txtEntradaDadosConectorCF.Text))));
                                                    }
                                                    else
                                                    {
                                                        msg = new msgInfo("NÃO FOI ENCONTRADO NENHUM ITEM PARA SER APLICADO O DESCONTO."); msg.ShowDialog();
                                                    }
                                                }
                                                else
                                                {
                                                    msg = new msgInfo("ERRO CUPOM FISCAL NÃO INFORMADO."); msg.ShowDialog();
                                                }

                                            }
                                            else
                                            {
                                                msg = new msgInfo("FORMA DE PAGAMENTO INICIALIZADA, ZERE OU REINICIALIZE A FORMA DE PAGAMENTO PARA DAR O DESCONTO...!"); msg.ShowDialog();
                                            }
                                        }
                                    }
                                    else if (call_pdv == 0 && e.KeyCode == Keys.H)
                                    {
                                        msg = new msgInfo(1, "", 0); msg.ShowDialog();
                                    }
                                    else if (e.Control && e.KeyCode == Keys.F && call_pdv == 0)
                                    {
                                        conector_call_consulta();
                                    }
                                    else if (e.KeyCode == Keys.F10 && call_pdv == 0)
                                    {
                                        
                                        conector_reset_card();
                                        arranqueMov = 1;
                                        if (backgroundConectorCupomMovimento.IsBusy != true)
                                        {
                                            // Start the asynchronous operation.
                                            backgroundConectorCupomMovimento.RunWorkerAsync();
                                        }
                                        arranque = 1;
                                        if (backgroundConectorCupom.IsBusy != true)
                                        {
                                            // Start the asynchronous operation.
                                            backgroundConectorCupom.RunWorkerAsync();
                                        }

                                        //Flavio Atualiza o grande total
                                        conectorPDV_acion_gt_cryt();
                                        if (fiscal_flag == 35)
                                        {
                                            txtVisorMsgConectorCF.Text = "PAGAMENTO INICIADO";
                                            typeDescAcre = 1;
                                            conector_call_pgto();
                                            tefRows = 0;
                                            tefRows1 = 0;
                                            tefFields = 0;
                                            if (conector_verifica_exits_financeiro(fiscal_Cupom.Replace("\0", "").Trim(), fiscal_store.Replace("\0", "").Trim() == "" ? alwaysVariables.Store : fiscal_store, fiscal_numero_caixa.Replace("\0", "").Trim()) > 0)
                                            {
                                                conector_load_financeiro(fiscal_Cupom.Replace("\0", "").Trim(), fiscal_store.Replace("\0", "").Trim() == "" ? alwaysVariables.Store : fiscal_store, fiscal_numero_caixa.Replace("\0", "").Trim());
                                            }
                                        }
                                        else
                                        {
                                            conector_call_pgto();
                                            conector_load_subTotais(fiscal_Cupom.Replace("\0", "").Trim(), fiscal_store.Replace("\0", "").Trim() == "" ? alwaysVariables.Store : fiscal_store, fiscal_numero_caixa.Replace("\0", "").Trim());
                                            tefRows = 0;
                                            tefRows1 = 0;
                                            tefFields = 0;
                                            vetorTefDebito = new string[1, 10]; //Dez possibilidades de passagem de cartão
                                            vetorTefCredito = new string[1, 10]; //Dez possibilidades de passagem de cartão
                                        }
                                    }
                                    else if (e.KeyCode == Keys.F11 && call_pdv == 0)
                                    {
                                        functionECF.conectorECF_fiscal_flag(alwaysVariables.ModeloEcf, ref fiscal_flag, ref fiscal_MSG, ref fiscal_retorno, alwaysVariables.ECF_Ligada);
                                        if (fiscal_flag == 32 || fiscal_flag == 0 || fiscal_flag == 4 || fiscal_flag == 36)
                                        {
                                            if (pnlConsultaProduto.Visible == false && pnlAutorizacaoPDVConectorCF.Visible == false && pnlCrediarioConectorCF.Visible == false && pnlTotalConectorCF.Visible == false)
                                            {
                                                if (pnlReservaConectorCF.Visible == false)
                                                {
                                                    if (String.Format("{0:ddMMyy}", DateTime.Now) == fiscal_data_movimento)
                                                    {
                                                        if (call_pdv == 3)
                                                        {
                                                            conector_stop_thread();
                                                            msg = new msgInfo("FORMA DE PAGAMENTO INICIADA, IMPOSSÍVEL SAIR DO SISTEMA...!"); msg.ShowDialog(); this.Dispose();
                                                        }
                                                        else
                                                        {
                                                            if (backgroundReprocesso.IsBusy != true)
                                                            {
                                                                // Start the asynchronous operation.
                                                                backgroundReprocesso.RunWorkerAsync();
                                                            }
                                                            msg = new msgInfo("ENCERRANDO CONECTORPDV...!");
                                                            msg.ShowDialog();
                                                            conector_stop_thread();
                                                            this.DialogResult = DialogResult.Cancel;
                                                            this.Dispose();
                                                            Environment.Exit(0);
                                                        }
                                                    }
                                                    else
                                                    {
                                                        msg = new msgInfo("DATA DA IMPRESSORA DIFERENTE DA DATA DO SISTEMA,\n VERIFIQUE O STATUS DA IMPRESSORA,\n MOVIMENTO DO DIA VESUS DATA IMPRESSORA,\n AGUARDANDO EMISSÃO DA LEITURA Z."); msg.ShowDialog();
                                                        txtEntradaDadosConectorCF.Select();
                                                    }
                                                }
                                            }
                                        }
                                        else
                                        {
                                            msg = new msgInfo("OPERAÇÃO CANCELADA...!"); msg.ShowDialog();
                                        }
                                    }
                                    else if (e.KeyCode == Keys.F5 && call_pdv == 0)
                                    {//Acrescimo Item
                                        if (validaDesc == true)
                                        {
                                            if (Convert.ToDouble(fiscal_Cupom.Trim()) > 0 && fiscal_Cupom.Trim() != "")
                                            {
                                                fiscal_flag = 0;
                                                functionECF.conectorECF_fiscal_flag(alwaysVariables.ModeloEcf, ref fiscal_flag, ref fiscal_MSG, ref fiscal_retorno, alwaysVariables.ECF_Ligada);
                                                if (fiscal_flag == 33 || fiscal_flag == 36 || fiscal_flag == 37)
                                                {
                                                    if (Convert.ToInt32(sequenciaItem) > 0 && sequenciaItem != "")
                                                    {
                                                        if (conector_verifica_exits_itens(fiscal_Cupom.Replace("\0", "").Trim(), fiscal_store.Replace("\0", "").Trim() == "" ? alwaysVariables.Store : fiscal_store, fiscal_numero_caixa.Replace("\0", "").Trim()) >= 1)
                                                        {
                                                            resetLabel();
                                                            txtVisorMsgConectorCF.Text = " INFORME O ACRESCIMO ";
                                                            txtDescricaoItemConectorCF.Text = "[ PORCENTAGEM ]";
                                                            txtEntradaDadosConectorCF.Clear();
                                                            call_pdv = 7;
                                                            call_funcao = 3;
                                                            txtEntradaDadosConectorCF.CausesValidation = true;
                                                            txtEntradaDadosConectorCF.Select();
                                                        }
                                                        else
                                                        {
                                                            msg = new msgInfo("NÃO EXISTE ITEM NO CUPOM FISCAL."); msg.ShowDialog();
                                                        }
                                                    }
                                                    else
                                                    {
                                                        msg = new msgInfo("ITEM INVÁLIDO, OU NÃO EXISTE."); msg.ShowDialog();
                                                    }
                                                }
                                                else if (fiscal_flag == 35) //Acrescimo para subtotal=condição 'O cupom deve estar subtotalizado'
                                                {
                                                    functionECF.conectorECF_AcrescimoDescontoSubtotal(alwaysVariables.ModeloEcf, "A", "%", String.Format("{0:F2}", (Convert.ToDecimal(txtEntradaDadosConectorCF.Text))), ref fiscal_MSG, ref fiscal_retorno, alwaysVariables.ECF_Ligada);
                                                    //fiscal_retorno = conectorECF.Bematech_FI_AcrescimoDescontoSubtotalMFD("A", "%", String.Format("{0:F2}", (Convert.ToDecimal(txtEntradaDadosConectorCF.Text))));
                                                }
                                                else
                                                {
                                                    msg = new msgInfo("NÃO FOI ENCONTRADO NENHUM ITEM PARA SER APLICADO O ACRESCIMO."); msg.ShowDialog();
                                                }
                                            }
                                            else
                                            {
                                                msg = new msgInfo("ERRO CUPOM FISCAL NÃO INFORMADO."); msg.ShowDialog();
                                            }
                                        }
                                        else
                                        {
                                            msg = new msgInfo("CARO USUÁRIO: INSTRUÇÃO NEGADA."); msg.ShowDialog();
                                        }
                                    }
                                    else if (e.KeyCode == Keys.F6 && call_pdv == 0)
                                    {//Desconto Item
                                        if (validaDesc == true)
                                        {
                                            if (Convert.ToDouble(fiscal_Cupom.Trim()) > 0 && fiscal_Cupom.Trim() != "")
                                            {
                                                fiscal_flag = 0;
                                                functionECF.conectorECF_fiscal_flag(alwaysVariables.ModeloEcf, ref fiscal_flag, ref fiscal_MSG, ref fiscal_retorno, alwaysVariables.ECF_Ligada);
                                                if (fiscal_flag == 33 || fiscal_flag == 36 || fiscal_flag == 37)
                                                {
                                                    if (Convert.ToInt32(sequenciaItem) > 0 && sequenciaItem != "")
                                                    {
                                                        if (conector_verifica_exits_itens(fiscal_Cupom.Replace("\0", "").Trim(), fiscal_store.Replace("\0", "").Trim() == "" ? alwaysVariables.Store : fiscal_store, fiscal_numero_caixa.Replace("\0", "").Trim()) >= 1)
                                                        {
                                                            resetLabel();
                                                            txtVisorMsgConectorCF.Text = " INFORME O DESCONTO ";
                                                            txtDescricaoItemConectorCF.Text = "[ PORCENTAGEM ]";
                                                            txtEntradaDadosConectorCF.Clear();
                                                            call_pdv = 7;
                                                            call_funcao = 1;

                                                            txtEntradaDadosConectorCF.CausesValidation = true;
                                                            txtEntradaDadosConectorCF.Select();
                                                        }
                                                        else
                                                        {
                                                            msg = new msgInfo("NÃO EXISTE ITEM NO CUPOM FISCAL."); msg.ShowDialog();
                                                        }
                                                    }
                                                    else
                                                    {
                                                        msg = new msgInfo("ITEM INVÁLIDO, OU NÃO EXISTE."); msg.ShowDialog();
                                                    }
                                                }
                                                else if (fiscal_flag == 35) //Desconto para subtotal=condição 'O cupom deve estar subtotalizado'
                                                {
                                                    functionECF.conectorECF_AcrescimoDescontoSubtotal(alwaysVariables.ModeloEcf, "D", "%", String.Format("{0:F2}", (Convert.ToDecimal(txtEntradaDadosConectorCF.Text))), ref fiscal_MSG, ref fiscal_retorno, alwaysVariables.ECF_Ligada);
                                                    //fiscal_retorno = conectorECF.Bematech_FI_AcrescimoDescontoSubtotalMFD("D", "%", String.Format("{0:F2}", (Convert.ToDecimal(txtEntradaDadosConectorCF.Text))));
                                                }
                                                else
                                                {
                                                    msg = new msgInfo("NÃO FOI ENCONTRADO NENHUM ITEM PARA SER APLICADO O DESCONTO."); msg.ShowDialog();
                                                }
                                            }
                                            else
                                            {
                                                msg = new msgInfo("ERRO CUPOM FISCAL NÃO INFORMADO."); msg.ShowDialog();
                                            }
                                        }
                                        else
                                        {
                                            msg = new msgInfo("CARO USUÁRIO: INSTRUÇÃO NEGADA."); msg.ShowDialog();
                                        }
                                    }
                                    else if (e.KeyCode == Keys.F8 && call_pdv == 0)
                                    {//Acrescimo Item Aleatorio no corpo do cupom
                                        sequenciaItemAle = "   ";
                                        if (Convert.ToDouble(fiscal_Cupom.Trim()) > 0 && fiscal_Cupom.Trim() != "")
                                        {
                                            txtEntradaDadosConectorCF.Clear();
                                            txtDescricaoItemConectorCF.Select();
                                            fiscal_flag = 0;
                                            functionECF.conectorECF_fiscal_flag(alwaysVariables.ModeloEcf, ref fiscal_flag, ref fiscal_MSG, ref fiscal_retorno, alwaysVariables.ECF_Ligada);
                                            if (fiscal_flag == 33 || fiscal_flag == 36 || fiscal_flag == 37)
                                            {
                                                if (Convert.ToInt32(sequenciaItem == "   " ? "0" : sequenciaItem) > 0 && sequenciaItem != "   ")
                                                {
                                                    if (conector_verifica_exits_itens(fiscal_Cupom.Replace("\0", "").Trim(), fiscal_store.Replace("\0", "").Trim() == "" ? alwaysVariables.Store : fiscal_store, fiscal_numero_caixa.Replace("\0", "").Trim()) >= 1)
                                                    {
                                                        resetLabel();
                                                        lbQttyConectorCF.Text = "0,000";
                                                        txtVisorMsgConectorCF.Text = " INFORME O ITEM [ACRESCIMO]";
                                                        txtDescricaoItemConectorCF.Text = "[ CODIGO DO ITEM ]";
                                                        txtEntradaDadosConectorCF.Clear();
                                                        call_pdv = 7;
                                                        call_funcao = 4;
                                                        txtEntradaDadosConectorCF.CausesValidation = true;
                                                        txtEntradaDadosConectorCF.Select();
                                                    }
                                                    else
                                                    {
                                                        msg = new msgInfo("NÃO EXISTE ITEM NO CUPOM FISCAL."); msg.ShowDialog();
                                                    }
                                                }
                                                else
                                                {
                                                    msg = new msgInfo("ITEM INVÁLIDO, OU NÃO EXISTE."); msg.ShowDialog();
                                                }
                                                txtEntradaDadosConectorCF.Select();
                                            }
                                            else if (fiscal_flag == 35) //Acrescimo para subtotal=condição 'O cupom deve estar subtotalizado'
                                            {
                                                functionECF.conectorECF_AcrescimoDescontoSubtotal(alwaysVariables.ModeloEcf, "A", "%", String.Format("{0:F2}", (Convert.ToDecimal(txtEntradaDadosConectorCF.Text))), ref fiscal_MSG, ref fiscal_retorno, alwaysVariables.ECF_Ligada);
                                                //fiscal_retorno = conectorECF.Bematech_FI_AcrescimoDescontoSubtotalMFD("A", "%", String.Format("{0:F2}", (Convert.ToDecimal(txtEntradaDadosConectorCF.Text))));
                                            }
                                            else
                                            {
                                                msg = new msgInfo("NÃO FOI ENCONTRADO NENHUM ITEM PARA SER APLICADO O ACRESCIMO."); msg.ShowDialog();
                                            }
                                        }
                                        else
                                        {
                                            msg = new msgInfo("ERRO CUPOM FISCAL NÃO INFORMADO."); msg.ShowDialog();
                                        }
                                    }
                                    else if (e.KeyCode == Keys.F7 && call_pdv == 0)
                                    {//Desconto Item Aleatorio no corpo do cupom
                                        sequenciaItemAle = "   ";
                                        if (Convert.ToDouble(fiscal_Cupom.Trim()) > 0 && fiscal_Cupom.Trim() != "")
                                        {
                                            txtEntradaDadosConectorCF.Clear();
                                            txtDescricaoItemConectorCF.Select();
                                            fiscal_flag = 0;
                                            functionECF.conectorECF_fiscal_flag(alwaysVariables.ModeloEcf, ref fiscal_flag, ref fiscal_MSG, ref fiscal_retorno, alwaysVariables.ECF_Ligada);
                                            if (fiscal_flag == 33 || fiscal_flag == 36 || fiscal_flag == 37)
                                            {
                                                if (Convert.ToInt32(sequenciaItem == "   " ? "0" : sequenciaItem) > 0 && sequenciaItem != "   ")
                                                {
                                                    if (conector_verifica_exits_itens(fiscal_Cupom.Replace("\0", "").Trim(), fiscal_store.Replace("\0", "").Trim() == "" ? alwaysVariables.Store : fiscal_store, fiscal_numero_caixa.Replace("\0", "").Trim()) >= 1)
                                                    {
                                                        resetLabel();
                                                        lbQttyConectorCF.Text = "0,000";
                                                        txtVisorMsgConectorCF.Text = " INFORME O ITEM [DESCONTO]";
                                                        txtDescricaoItemConectorCF.Text = "[ ITEM - SEQUENCIA DO CUPOM ]";
                                                        txtEntradaDadosConectorCF.Clear();
                                                        call_pdv = 7;
                                                        call_funcao = 2;
                                                        txtEntradaDadosConectorCF.CausesValidation = true;
                                                        txtEntradaDadosConectorCF.Select();
                                                    }
                                                    else
                                                    {
                                                        msg = new msgInfo("NÃO EXISTE ITEM NO CUPOM FISCAL."); msg.ShowDialog();
                                                    }
                                                }
                                                else
                                                {
                                                    msg = new msgInfo("ITEM INVÁLIDO, OU NÃO EXISTE."); msg.ShowDialog();
                                                }
                                                txtEntradaDadosConectorCF.Select();
                                            }
                                            else if (fiscal_flag == 35) //Desconto para subtotal=condição 'O cupom deve estar subtotalizado'
                                            {
                                                functionECF.conectorECF_AcrescimoDescontoSubtotal(alwaysVariables.ModeloEcf, "D", "%", String.Format("{0:F2}", (Convert.ToDecimal(txtEntradaDadosConectorCF.Text))), ref fiscal_MSG, ref fiscal_retorno, alwaysVariables.ECF_Ligada);
                                                //fiscal_retorno = conectorECF.Bematech_FI_AcrescimoDescontoSubtotalMFD("D", "%", String.Format("{0:F2}", (Convert.ToDecimal(txtEntradaDadosConectorCF.Text))));
                                            }
                                            else
                                            {
                                                msg = new msgInfo("NÃO FOI ENCONTRADO NENHUM ITEM PARA SER APLICADO O DESCONTO."); msg.ShowDialog();
                                            }
                                        }
                                        else
                                        {
                                            msg = new msgInfo("ERRO CUPOM FISCAL NÃO INFORMADO."); msg.ShowDialog();
                                        }
                                    }
                                    else if (e.KeyCode == Keys.Escape && call_pdv == 0)
                                    {
                                        conector_acao_controleMenu();
                                    }
                                #endregion
                                break;
                            case 1:
                                #region
                                if (((e.KeyCode == Keys.Delete && call_pdv == 1) ||
                                     (e.KeyCode == Keys.Delete && call_pdv == 1 && pnlAutorizacaoPDVConectorCF.Visible == true)))
                                {
                                    txtAutorizacaoSenhaConectorCF.Clear();
                                    txtAutorizacaoUsuarioConectorCF.Clear();
                                    txtAutorizacaoUsuarioConectorCF.Select();
                                    if (e.KeyCode == Keys.Delete && call_pdv == 1 && pnlAutorizacaoPDVConectorCF.Visible == false)
                                    {
                                        txtVisorMsgConectorCF.Text = "MENU CONECTORPDV";
                                        call_funcao = 0;
                                        lblVisorEntradaDadosConectorCF.Text = "ENTRADA DE DADOS";
                                        conector_reset_MFD();
                                        txtEntradaDadosConectorCF.CausesValidation = true;
                                        txtEntradaDadosConectorCF.Clear();
                                        txtEntradaDadosConectorCF.Select();
                                    }
                                }
                                else if (e.KeyCode == Keys.Enter && call_pdv == 1)
                                {
                                    if (call_pdv == 1)
                                    {
                                        ProcessTabKey(true);

                                        functionECF.conectorECF_fiscal_flag(alwaysVariables.ModeloEcf, ref fiscal_flag, ref fiscal_MSG, ref fiscal_retorno, alwaysVariables.ECF_Ligada);

                                        if (fiscal_flag == 8)
                                        {
                                            if (acessoMenuFiscal == 1 || operador_funcao == "5")
                                            {
                                                if (txtEntradaDadosConectorCF.Text == "8" && txtEntradaDadosConectorCF.Text != "")
                                                {
                                                    //Chamada de saida do PDV - Aceita
                                                    conector_stop_thread();
                                                    this.DialogResult = DialogResult.OK;
                                                    this.Dispose();
                                                }
                                                txtVisorMsgConectorCF.Text = "LEITURA Z JÁ PROCESSADA...! ";
                                                txtEntradaDadosConectorCF.ReadOnly = false;
                                                txtEntradaDadosConectorCF.Clear();
                                                txtEntradaDadosConectorCF.Select();
                                            }
                                            else
                                            {
                                                txtVisorMsgConectorCF.Text = "OPERADOR SEM PERMISSÃO - CAIXA! ";
                                                txtAutorizacaoUsuarioConectorCF.Select();
                                            }
                                        }
                                        else
                                        {
                                            conectorPDV_acion_menu_operacional_funcoes();
                                        }

                                        if (fiscal_data_movimento.Trim() != "" && Convert.ToDouble(fiscal_data_movimento.Replace("\0", "").Trim() == "" ? "0" : fiscal_data_movimento.Trim()) == 0) { call_pdv = 1; }
                                    }
                                    conector_valida_pass();
                                }
                                else if (e.Control && e.KeyCode == Keys.O && call_pdv == 1 && pnlAutorizacaoPDVConectorCF.Visible == false)
                                {
                                    functionECF.conectorECF_fiscal_flag(alwaysVariables.ModeloEcf, ref fiscal_flag, ref fiscal_MSG, ref fiscal_retorno, alwaysVariables.ECF_Ligada);
                                    if (fiscal_flag == 8)
                                    {
                                        if (alwaysVariables.Perfil == "Y" || alwaysVariables.Perfil == "Z")
                                        {
                                            conectorPDV_interface_notaFiscalD(true);
                                        }
                                        else
                                        {
                                            msg = new msgInfo(1, "PERFIL EXIGE NOTA EMITIDA PÓS REDUÇÃO Z, INTERFACE NÃO LIBERADA...!"); msg.ShowDialog();
                                            txtEntradaDadosConectorCF.Clear();
                                            txtEntradaDadosConectorCF.ReadOnly = false;
                                            txtEntradaDadosConectorCF.CausesValidation = true;
                                            txtEntradaDadosConectorCF.Select();
                                        }
                                    }
                                    else
                                    {
                                        if (alwaysVariables.ECF_Ligada == -6)
                                        {
                                            msg = new msgInfo(1, "ECF DESLIGADO OU NÁO CONECTADO, IMPOSSIVEL PROSSEGUIR...!"); msg.ShowDialog();
                                        }
                                        else if (fiscal_flag != 8)
                                        {
                                            msg = new msgInfo(1, "MODO ECF DESBLOQUEADO, IMPOSSIVEL PROSSEGUIR...!"); msg.ShowDialog();
                                        }
                                        else
                                        {
                                            msg = new msgInfo(1, "INSTRUÇÃO NÃO PERMITIDA, IMPOSSIVEL PROSSEGUIR...!"); msg.ShowDialog();
                                        }
                                        txtEntradaDadosConectorCF.Clear();
                                        txtEntradaDadosConectorCF.ReadOnly = false;
                                        txtEntradaDadosConectorCF.CausesValidation = true;
                                        txtEntradaDadosConectorCF.Select();
                                    }
                                }
                                else if (e.KeyCode == Keys.Escape && call_pdv == 1)
                                {
                                    conector_acao_controleMenu();
                                }
                                #endregion
                                break;
                            case 2:
                                #region
                                #endregion
                                break;
                            case 3:
                                #region
                                    if (e.KeyCode == Keys.Space && call_pdv == 3)
                                    {
                                        this.lblVisorEntradaDadosConectorCF.Location = new System.Drawing.Point(235, 511);
                                        if (String.Format("{0:ddMMyy}", DateTime.Now) == fiscal_data_movimento)
                                        {
                                            /*Responsavel por arquivar os movimentos
                                                                                    Cria senao existir
                                                                                 */
                                            Directory.CreateDirectory(folderMaster);
                                            Directory.CreateDirectory(folderMFD);
                                            Directory.CreateDirectory(folderMFDGrand);
                                            Directory.CreateDirectory(folderSlave);
                                            Directory.CreateDirectory(folderSlave + "\\" + fiscal_data_movimento);

                                            txtAutorizacaoUsuarioConectorCF.CausesValidation = true;
                                            if (Convert.ToDecimal(lblRestanteMoneyConectorCF.Text.Replace(",", ".")) == 0 && call_pdv == 3)
                                            {
                                                if (Convert.ToDecimal(lblRecebidoMoneyConectorCF.Text.Replace(",", ".")) >= Convert.ToDecimal(lblTotalMoneyConectorCF.Text.Replace(",", ".")))
                                                {
                                                    flag_tela = false;
                                                    //conector_pgto_ecf(vetorTotal, lblTotalMoneyConectorCF.Text, String.Format("{0:F2}", (Convert.ToDecimal(lblRecebidoMoneyConectorCF.Text.Replace(",", ".")) - Convert.ToDecimal(lblMoneyTrocoConectorCF.Text.Replace(",", ".")))), lblMoneyTrocoConectorCF.Text);
                                                    conector_pgto_ecf(vetorTotal, lblTotalMoneyConectorCF.Text.Replace(",", "."), lblRecebidoMoneyConectorCF.Text.Replace(",", "."), lblMoneyTrocoConectorCF.Text.Replace(",", "."));
                                                    if (flag_tela == true)
                                                    {
                                                        ltbDetalhesConectorCF.Clear();
                                                        ltbDetalhesConectorCF.Text = " ITEM  CÓDIGO  DESCRIÇÃO QTD  UN VL UNIT(R$) ST VL ITEM(R$)" + "\r\n" +
                                                                                      "========================================================";
                                                        rtbVisualizacaoDadosNf.Clear();
                                                        rtbVisualizacaoDadosNf.Text = " ITEM  CÓDIGO  DESCRIÇÃO QTD  UN VL UNIT(R$) ST VL ITEM(R$)" + "\r\n" +
                                                                                                                                                                                 "===========================================================";

                                                        resetLabel();
                                                        resetVariable();
                                                        call_funcao = 0;
                                                        lbQttyConectorCF.Text = "0,000";
                                                        txtVisorMsgConectorCF.Text = "CUPOM FISCAL ENCERRADO";
                                                        this.pnlTotalConectorCF.Size = new System.Drawing.Size(1, 1);
                                                        this.pnlTotalConectorCF.Location = new System.Drawing.Point(746, 607);
                                                        pnlTotalConectorCF.Visible = false;
                                                        txtSubTotalConectorCF.Clear();
                                                        txtSubTotalConectorCF.Text = "0,00";
                                                        lblTotalMoneyConectorCF.Text = "0,00";
                                                        call_pdv = 0;
                                                        txtDescricaoItemConectorCF.Enabled = true;
                                                        txtEntradaDadosConectorCF.CausesValidation = false;
                                                        if (alwaysVariables.ModoOperacao == 1)
                                                        {
                                                            txtEntradaDadosConectorCF.Select();
                                                        }
                                                        else
                                                        {
                                                            txtEntradaDadosNF.Select();
                                                        }
                                                        txtEntradaDadosConectorCF.CausesValidation = true;
                                                        txtTitleCupomFiscalConectorCF.Text = "CUPOM FISCAL";
                                                        flag_tela = false;
                                                    }
                                                    File.Delete(@"C:\conector\nfce_temp.txt");
                                                    File.Delete(folderMFDGrand + "\\temp" + ".txt");
                                                    conector_verifica_venda_bruta(ref fiscal_banco_venda);
                                                    functionECF.conectorECF_GrandeTotal(alwaysVariables.ModeloEcf, ref fiscal_GT, ref fiscal_MSG, ref fiscal_retorno, alwaysVariables.ECF_Ligada);
                                                    //fiscal_retorno = conectorECF.Bematech_FI_GrandeTotal(ref fiscal_GT);
                                                    resetFinanceiro();
                                                    this.pnlTotalConectorCF.Visible = false;
                                                    lblVisorEntradaDadosConectorCF.Text = "ENTRADA DE DADOS";
                                                    pedido = "0";
                                                    vetorReservaFinanceiro = null;
                                                    vetorReservaFinanceiro = new string[12] { "#", "#", "#", "#", "#", "#", "#", "#", "#", "#", "#", "#" };
                                                    txtDescricaoItemConectorCF.Enabled = true;
                                                    txtEntradaDadosConectorCF.ReadOnly = false;
                                                    txtEntradaDadosConectorCF.Clear();
                                                    txtEntradaDadosConectorCF.Enabled = true;
                                                    if (alwaysVariables.ModoOperacao == 1)
                                                    {
                                                        txtEntradaDadosConectorCF.Select();
                                                    }
                                                    else
                                                    {
                                                        txtEntradaDadosNF.Select();
                                                    }//Faz a saida do financeiro
                                                    call_pdv = 3;
                                                    ProcessTabKey(true);
                                                    call_pdv = 0;
                                                    call_funcao = 0;
                                                    sequenciaItem = "0".PadLeft(3, '0');
                                                    sequenciaItemAle = "0".PadLeft(3, '0');
                                                    last_valor_item = "";
                                                    last_qtty_item = "";
                                                    typeDescAcre = 0;
                                                    /*if (backgroundConectorCupom.IsBusy != true)
                                                    {
                                                        // Start the asynchronous operation.
                                                        backgroundConectorCupom.RunWorkerAsync();
                                                    }
                                                    arranque = 1;*/
                                                    txtEntradaDadosConectorCF.CausesValidation = true;
                                                    txtEntradaDadosConectorCF.Select();
                                                    //lock table (controle de transação)
                                                    if (fiscal_flag == 33 || fiscal_flag == 1 || fiscal_flag == 37)
                                                    {
                                                        txtVisorMsgConectorCF.Text = "CUPOM FISCAL ABERTO";
                                                    }
                                                    else if (fiscal_flag == 32)
                                                    {
                                                        txtVisorMsgConectorCF.Text = "CAIXA ABERTO";
                                                    }
                                                }
                                                
                                                msg = new msgInfo(1, "...PROCESSANDO...!"); msg.ShowDialog();
                                                conector_reset_input();
                                            }

                                            else if ((call_pdv == 0 || call_pdv == 1) && pnlAutorizacaoPDVConectorCF.Visible == true)
                                            {
                                                txtAutorizacaoSenhaConectorCF.CausesValidation = false;
                                                txtAutorizacaoUsuarioConectorCF.CausesValidation = false;
                                                txtAutorizacaoSenhaConectorCF.Text = "";
                                                txtAutorizacaoUsuarioConectorCF.Text = "";
                                                txtAutorizacaoUsuarioConectorCF.Select();
                                                txtAutorizacaoSenhaConectorCF.CausesValidation = true;
                                                txtAutorizacaoUsuarioConectorCF.CausesValidation = true;
                                            }
                                        }
                                        else
                                        {
                                            msg = new msgInfo("DATA DA IMPRESSORA DIFERENTE DA DATA DO SISTEMA,\n VERIFIQUE O STATUS DA IMPRESSORA,\n MOVIMENTO DO DIA VESUS DATA IMPRESSORA,\n AGUARDANDO EMISSÃO DA LEITURA Z."); msg.ShowDialog();
                                            txtEntradaDadosConectorCF.Select();
                                        }
                                    }else if (e.KeyCode == Keys.Enter && call_pdv == 3)
                                {
                                    if (call_pdv == 3)
                                    {
                                        ProcessTabKey(true);
                                        switch (call_finalizadora)
                                        {
                                            case "D":
                                                conector_finalizadora_dinheiro();
                                                break;
                                            case "H":
                                                conector_finalizadora_cheque();
                                                break;
                                            case "O":
                                                conector_finalizadora_convenio();
                                                break;
                                            case "C": // FINALIZADORA CREDIARIO
                                                conector_finalizadora_crediario();
                                                break;
                                            case "V": //FINALIZADORA VALE
                                                conector_finalizadora_vale();
                                                break;
                                            case "R": //FINALIZADORA RECEBIMENTO
                                                conector_finalizadora_recebimento();
                                                break;
                                            case "B": //FINALIZADORA BOLETO
                                                conector_finalizadora_boleto();
                                                break;
                                            case "U": //FINALIZADORA DUPLICATA
                                                conector_finalizadora_duplicata();
                                                break;
                                            case "E": //FINALIZADORA CARTAO CREDITO
                                                if (input_find == null)
                                                {
                                                    input_find = txtEntradaDadosConectorCF.Text;
                                                    this.lblVisorEntradaDadosConectorCF.Location = new System.Drawing.Point(135, 511);
                                                    if (input_find == "1" || (input_find == null || input_find == ""))
                                                    {
                                                        input_find = txtEntradaDadosConectorCF.Text = "1";
                                                        cartao_numero_parcelas = txtEntradaDadosConectorCF.Text;
                                                        conector_finalizadora_cartaoCredito(cartao_numero_parcelas, "1");
                                                        txtVisorMsgConectorCF.Text = "TRANSAÇÃO POS";
                                                        pnlTotalConectorCF.Size = new System.Drawing.Size(650, 527);
                                                        txtEntradaDadosConectorCF.Clear();
                                                        lblVisorEntradaDadosConectorCF.Text = "TRANSAÇÃO POS - CREDITO";
                                                        conector_reset_card();
                                                    }
                                                    else
                                                    {
                                                        lblVisorEntradaDadosConectorCF.Text = "CONFIRMA - [ ENTER ] - NUMERO DE PARCELAS";
                                                        txtEntradaDadosConectorCF.Clear();
                                                        cartao_numero_parcelas = null;
                                                    }
                                                }
                                                else if (cartao_numero_parcelas == null && txtEntradaDadosConectorCF.Text != "")
                                                {
                                                    cartao_numero_parcelas = txtEntradaDadosConectorCF.Text;
                                                    conector_finalizadora_cartaoCredito(cartao_numero_parcelas,"1");
                                                    txtVisorMsgConectorCF.Text = "TRANSAÇÃO POS - CREDITO";
                                                    pnlTotalConectorCF.Size = new System.Drawing.Size(650, 527);
                                                    lblVisorEntradaDadosConectorCF.Text = "TRANSAÇÃO POS - CREDITO";
                                                }
                                                break;
                                            case "A": //FINALIZADORA CARTAO DEBITO
                                                conector_finalizadora_cartaoDebito();
                                                break;
                                        }
                                    }
                                }
                                else if (e.KeyCode == Keys.F5 && call_pdv == 3)
                                {
                                    //Acrescimo SubTotal
                                    //fiscal_retorno = conectorECF.Bematech_FI_SubTotalizaCupomMFD();
                                    //fiscal_retorno = conectorECF.Bematech_FI_AcrescimoDescontoSubtotalMFD("D", "%", "1000");
                                    if (typeDescAcre == 0)
                                    {
                                        if (fiscal_flag == 35)
                                        {
                                            msg = new msgInfo("FORMA DE PAGAMENTO INICIALIZADA NO ECF, FINALIZE O CUPOM FISCAL...!"); msg.ShowDialog();
                                        }
                                        else
                                        {
                                            if (Convert.ToDecimal(lblRecebidoMoneyConectorCF.Text.Replace(",", ".")) == 0)
                                            {
                                                this.pnlTotalConectorCF.Size = new System.Drawing.Size(701, 422);
                                                lblVisorEntradaDadosConectorCF.Text = "INFORME A PORCENTAGEM DO ACRESCIMO [%]";
                                                txtEntradaDadosConectorCF.ReadOnly = false;
                                                txtEntradaDadosConectorCF.CausesValidation = true;
                                                txtEntradaDadosConectorCF.Select();
                                                call_funcao = 2;
                                                valuesAcresDesc = "    ";
                                                acresDesc = " ";
                                            }
                                            else
                                            {
                                                msg = new msgInfo("FORMA DE PAGAMENTO INICIALIZADA, ZERE OU REINICIALIZE A FORMA DE PAGAMENTO PARA DAR O DESCONTO...!"); msg.ShowDialog();
                                            }
                                        }
                                    }
                                    else
                                    {
                                        msg = new msgInfo("[ DESCONTO ] OU [ ACRESCIMO ] FOI INICIALIZADO, PARA PROSSEGUIR, DEVE-SE CANCELAR O INSTRUÇÃO ATUAL, VERIFIQUE COM O ADMINISTRADOR DO SISTEMA...!"); msg.ShowDialog();
                                    }
                                }
                                else if (e.KeyCode == Keys.F6 && call_pdv == 3)
                                {
                                    //Desconto SubTotal
                                    //fiscal_retorno = conectorECF.Bematech_FI_SubTotalizaCupomMFD();
                                    //fiscal_retorno = conectorECF.Bematech_FI_AcrescimoDescontoSubtotalMFD("D", "%", "1000");
                                    if (typeDescAcre == 0)
                                    {
                                        if (fiscal_flag == 35)
                                        {
                                            msg = new msgInfo("FORMA DE PAGAMENTO INICIALIZADA NO ECF, FINALIZE O CUPOM FISCAL...!"); msg.ShowDialog();
                                        }
                                        else
                                        {

                                            ProcessTabKey(true);

                                            if (Convert.ToDecimal(lblRecebidoMoneyConectorCF.Text.Replace(",", ".")) == 0)
                                            {
                                                this.pnlTotalConectorCF.Size = new System.Drawing.Size(650, 527);
                                                txtDinheiroConectorCF.Select();
                                                call_finalizadora = "D";
                                                acionaComandoPagamento();
                                                txtCartaoCreditoConectorCF.Text = "0.00";
                                                txtCartaoDebitoConectorCF.Text = "0.00";
                                                this.pnlTotalConectorCF.Size = new System.Drawing.Size(701, 422);
                                                lblVisorEntradaDadosConectorCF.Text = "INFORME A PORCENTAGEM DO DESCONTO [%]";
                                                txtEntradaDadosConectorCF.ReadOnly = false;
                                                txtEntradaDadosConectorCF.CausesValidation = true;
                                                txtEntradaDadosConectorCF.Select();
                                                call_funcao = 1;
                                                valuesAcresDesc = "    ";
                                                acresDesc = " ";
                                            }
                                            else
                                            {
                                                msg = new msgInfo("FORMA DE PAGAMENTO INICIALIZADA, ZERE OU REINICIALIZE A FORMA DE PAGAMENTO PARA DAR O DESCONTO...!"); msg.ShowDialog();
                                            }
                                        }
                                    }
                                    else
                                    {
                                        msg = new msgInfo("[ DESCONTO ] OU [ ACRESCIMO ] FOI INICIALIZADO, PARA PROSSEGUIR, DEVE-SE CANCELAR O INSTRUÇÃO ATUAL, VERIFIQUE COM O ADMINISTRADOR DO SISTEMA...!"); msg.ShowDialog();
                                    }
                                }
                                else if (e.KeyCode == Keys.D && call_pdv == 3)
                                {
                                    acionaComandoPagamento();
                                    if (fiscal_flag == 35 && Convert.ToDecimal(txtDinheiroConectorCF.Text.Replace(",", ".")) > 0)
                                    {
                                        msg = new msgInfo("FORMA DE PAGAMENTO INICIADA NO ECF,\n FINALIZE O CUPOM FISCAL."); msg.ShowDialog();
                                        txtDinheiroConectorCF.ReadOnly = true;
                                    }
                                    else
                                    {
                                        this.pnlTotalConectorCF.Size = new System.Drawing.Size(650, 527);
                                        txtDinheiroConectorCF.Select();
                                        call_finalizadora = "D";
                                    }
                                }
                                else if (e.KeyCode == Keys.H && call_pdv == 3)
                                {
                                    acionaComandoPagamento();
                                    if (fiscal_flag == 35 && Convert.ToDecimal(txtChequeConectorCF.Text.Replace(",", ".")) > 0)
                                    {
                                        msg = new msgInfo("FORMA DE PAGAMENTO INICIADA NO ECF,\n FINALIZE O CUPOM FISCAL."); msg.ShowDialog();
                                        txtChequeConectorCF.ReadOnly = true;
                                    }
                                    else
                                    {
                                        //validaFinalizadoras(false, "H");
                                        //txtChequeConectorCF.Select();
                                        conector_reset_cheque();
                                        this.pnlTotalConectorCF.Size = new System.Drawing.Size(701, 422);
                                        lblVisorEntradaDadosConectorCF.Text = "CPF ou CNPJ DO CLIENTE";
                                        call_finalizadora = "H";
                                        txtEntradaDadosConectorCF.ReadOnly = false;
                                        txtEntradaDadosConectorCF.CausesValidation = false;
                                        txtEntradaDadosConectorCF.Select();
                                        txtEntradaDadosConectorCF.CausesValidation = true;
                                        //validaFinalizadoras(true, "h");
                                    }
                                }
                                else if (e.KeyCode == Keys.C && call_pdv == 3)
                                {
                                    acionaComandoPagamento();
                                    this.lblVisorEntradaDadosConectorCF.Location = new System.Drawing.Point(235, 511);
                                    if (fiscal_flag == 35 && Convert.ToDecimal(txtCrediarioConectorCF.Text.Replace(",", ".")) > 0)
                                    {
                                        msg = new msgInfo("FORMA DE PAGAMENTO INICIADA NO ECF,\n FINALIZE O CUPOM FISCAL."); msg.ShowDialog();
                                        txtCrediarioConectorCF.ReadOnly = true;
                                    }
                                    else
                                    {
                                        conector_reset_pessoa();
                                        if (reserva_number == null || Convert.ToDouble(reserva_number == null ? "0" : reserva_number) == 0)
                                        {
                                            conector_reset_reserva();
                                        }
                                        pnlTotalConectorCF.Size = new System.Drawing.Size(650, 422);
                                        this.lblVisorEntradaDadosConectorCF.Location = new System.Drawing.Point(135, 511);
                                        lblVisorEntradaDadosConectorCF.Text = "INFORME A LOJA DE CADASTRO DO CLIENTE";
                                        call_finalizadora = "C";
                                        txtEntradaDadosConectorCF.ReadOnly = false;
                                        txtEntradaDadosConectorCF.CausesValidation = false;
                                        txtEntradaDadosConectorCF.Select();
                                        txtEntradaDadosConectorCF.CausesValidation = true;
                                    }
                                }
                                else if (e.KeyCode == Keys.O && call_pdv == 3)
                                {
                                    acionaComandoPagamento();
                                    this.lblVisorEntradaDadosConectorCF.Location = new System.Drawing.Point(235, 511);
                                    if (fiscal_flag == 35 && Convert.ToDecimal(txtConvenioConectorCF.Text.Replace(",", ".")) > 0)
                                    {
                                        msg = new msgInfo("FORMA DE PAGAMENTO INICIADA NO ECF,\n FINALIZE O CUPOM FISCAL."); msg.ShowDialog();
                                        txtConvenioConectorCF.ReadOnly = true;
                                    }
                                    else
                                    {
                                        conector_reset_convenio();
                                        pnlTotalConectorCF.Size = new System.Drawing.Size(650, 422);
                                        this.lblVisorEntradaDadosConectorCF.Location = new System.Drawing.Point(195, 511);
                                        lblVisorEntradaDadosConectorCF.Text = "INFORME A EMPRESA CONVENIADA";
                                        call_finalizadora = "O";
                                        txtEntradaDadosConectorCF.ReadOnly = false;
                                        txtEntradaDadosConectorCF.CausesValidation = false;
                                        txtEntradaDadosConectorCF.Select();
                                        txtEntradaDadosConectorCF.CausesValidation = true;
                                    }
                                }
                                else if (e.KeyCode == Keys.A && call_pdv == 3)
                                {
                                    acionaComandoPagamento();

                                    this.lblVisorEntradaDadosConectorCF.Location = new System.Drawing.Point(235, 511);
                                    if (fiscal_flag == 35 && Convert.ToDecimal(txtCartaoDebitoConectorCF.Text.Replace(",", ".")) > 0)
                                    {
                                        msg = new msgInfo("FORMA DE PAGAMENTO INICIADA NO ECF,\n FINALIZE O CUPOM FISCAL."); msg.ShowDialog();
                                        txtCartaoDebitoConectorCF.ReadOnly = true;
                                    }
                                    else
                                    {
                                        conector_reset_card();
                                        if (alwaysVariables.UtilizaTef == "0")
                                        {
                                            txtVisorMsgConectorCF.Text = "TRANSAÇÃO POS";
                                            pnlTotalConectorCF.Size = new System.Drawing.Size(650, 527);
                                            lblVisorEntradaDadosConectorCF.Text = "INICIANDO TRANSAÇÃO POS";
                                        }
                                        else
                                        {
                                            txtVisorMsgConectorCF.Text = "TRANSAÇÃO TEF";
                                            pnlTotalConectorCF.Size = new System.Drawing.Size(650, 527);
                                            lblVisorEntradaDadosConectorCF.Text = "INICIANDO TRANSAÇÃO TEF";
                                        }
                                        /* -------- Trecho apos TEF ------*/
                                        //cartao_value = txtEntradaDadosConectorCF.Text;
                                        txtEntradaDadosConectorCF.Text = txtCartaoDebitoConectorCF.Text = lblRestanteMoneyConectorCF.Text; //Provisorio
                                        this.lblVisorEntradaDadosConectorCF.Location = new System.Drawing.Point(135, 511);
                                        lblVisorEntradaDadosConectorCF.Text = "CONFIRMA - [ ENTER ] - VALOR A SER TRANSMITIDO";
                                        //txtEntradaDadosConectorCF.CausesValidation = false;
                                        //txtEntradaDadosConectorCF.Select();
                                        //this.pnlTotalConectorCF.Size = new System.Drawing.Size(650, 527);
                                        txtCartaoDebitoConectorCF.Select();
                                        call_finalizadora = "A";
                                        cartao_type = "2";
                                    }
                                }
                                else if (e.KeyCode == Keys.E && call_pdv == 3)
                                {
                                    acionaComandoPagamento();
                                    /*  this.lblVisorEntradaDadosConectorCF.Location = new System.Drawing.Point(235, 511);
                                      if (fiscal_flag == 35 && Convert.ToDecimal(txtCartaoCreditoConectorCF.Text) > 0)
                                      {
                                          msg = new msgInfo("FORMA DE PAGAMENTO INICIADA NO ECF,\n FINALIZE O CUPOM FISCAL."); msg.ShowDialog();
                                          txtCartaoCreditoConectorCF.ReadOnly = true;
                                      }
                                      else
                                      {
                                          txtVisorMsgConectorCF.Text = "TRANSAÇÃO TEF";
                                          pnlTotalConectorCF.Size = new System.Drawing.Size(650, 527);
                                          lblVisorEntradaDadosConectorCF.Text = "INICIANDO TRANSAÇÃO TEF";
                                          //this.pnlTotalConectorCF.Size = new System.Drawing.Size(650, 527);
                                          txtCartaoCreditoConectorCF.Select();
                                          call_finalizadora = "E";
                                      }*/
                                    this.lblVisorEntradaDadosConectorCF.Location = new System.Drawing.Point(235, 511);
                                    if (fiscal_flag == 35 && Convert.ToDecimal(txtCartaoCreditoConectorCF.Text.Replace(",", ".")) > 0)
                                    {
                                        msg = new msgInfo("FORMA DE PAGAMENTO INICIADA NO ECF,\n FINALIZE O CUPOM FISCAL."); msg.ShowDialog();
                                        txtCartaoCreditoConectorCF.ReadOnly = true;
                                    }
                                    else
                                    {
                                        conector_reset_card();
                                        if (alwaysVariables.UtilizaTef == "0")
                                        {
                                            txtVisorMsgConectorCF.Text = "TRANSAÇÃO POS";
                                            pnlTotalConectorCF.Size = new System.Drawing.Size(650, 527);
                                            lblVisorEntradaDadosConectorCF.Text = "INICIANDO TRANSAÇÃO POS";
                                        }
                                        else
                                        {
                                            txtVisorMsgConectorCF.Text = "TRANSAÇÃO TEF";
                                            pnlTotalConectorCF.Size = new System.Drawing.Size(650, 527);
                                            lblVisorEntradaDadosConectorCF.Text = "INICIANDO TRANSAÇÃO TEF";
                                        }
                                        //Thread.Sleep(5000); //Teste
                                        /* -------- Trecho apos TEF ------*/
                                        //cartao_value = txtEntradaDadosConectorCF.Text;
                                        txtEntradaDadosConectorCF.Text = txtCartaoCreditoConectorCF.Text = lblRestanteMoneyConectorCF.Text; //Provisorio
                                        this.lblVisorEntradaDadosConectorCF.Location = new System.Drawing.Point(135, 511);
                                        lblVisorEntradaDadosConectorCF.Text = "CONFIRMA - [ ENTER ] - VALOR A SER TRANSMITIDO";
                                        //txtEntradaDadosConectorCF.CausesValidation = false;
                                        //txtEntradaDadosConectorCF.Select();
                                        //this.pnlTotalConectorCF.Size = new System.Drawing.Size(650, 527);
                                        txtCartaoCreditoConectorCF.Select();
                                        //ALteracao Flavio
                                        this.pnlTotalConectorCF.Size = new System.Drawing.Size(701, 422);
                                        lblVisorEntradaDadosConectorCF.Text = "1 - CREDITO A VISTA  2 - PARCELADO";

                                        txtEntradaDadosConectorCF.ReadOnly = false;
                                        txtEntradaDadosConectorCF.CausesValidation = false;
                                        txtEntradaDadosConectorCF.Clear();
                                        txtEntradaDadosConectorCF.Select();
                                        txtEntradaDadosConectorCF.CausesValidation = true;
                                        call_finalizadora = "E";
                                        cartao_type = "1";
                                    }
                                }
                                else if (e.KeyCode == Keys.B && call_pdv == 3)
                                {
                                    acionaComandoPagamento();
                                    this.lblVisorEntradaDadosConectorCF.Location = new System.Drawing.Point(235, 511);
                                    if (fiscal_flag == 35 && Convert.ToDecimal(txtBoletoConectorCF.Text.Replace(",", ".")) > 0)
                                    {
                                        msg = new msgInfo("FORMA DE PAGAMENTO INICIADA NO ECF,\n FINALIZE O CUPOM FISCAL."); msg.ShowDialog();
                                        txtBoletoConectorCF.ReadOnly = true;
                                    }
                                    else
                                    {
                                        this.pnlTotalConectorCF.Size = new System.Drawing.Size(650, 527);
                                        txtBoletoConectorCF.Select();
                                        call_finalizadora = "B";
                                    }
                                }
                                else if (e.KeyCode == Keys.U && call_pdv == 3)
                                {
                                    acionaComandoPagamento();
                                    this.lblVisorEntradaDadosConectorCF.Location = new System.Drawing.Point(235, 511);
                                    if (fiscal_flag == 35 && Convert.ToDecimal(txtDuplicataConectorCF.Text.Replace(",", ".")) > 0)
                                    {
                                        msg = new msgInfo("FORMA DE PAGAMENTO INICIADA NO ECF,\n FINALIZE O CUPOM FISCAL."); msg.ShowDialog();
                                        txtDuplicataConectorCF.ReadOnly = true;
                                    }
                                    else
                                    {
                                        this.pnlTotalConectorCF.Size = new System.Drawing.Size(650, 527);
                                        txtDuplicataConectorCF.Select();
                                        call_finalizadora = "U";
                                    }
                                }
                                else if (e.KeyCode == Keys.R && call_pdv == 3)
                                {
                                    acionaComandoPagamento();
                                    this.lblVisorEntradaDadosConectorCF.Location = new System.Drawing.Point(235, 511);
                                    if (fiscal_flag == 35 && Convert.ToDecimal(txtRecebimentoConectorCF.Text.Replace(",", ".")) > 0)
                                    {
                                        msg = new msgInfo("FORMA DE PAGAMENTO INICIADA NO ECF,\n FINALIZE O CUPOM FISCAL."); msg.ShowDialog();
                                        txtRecebimentoConectorCF.ReadOnly = true;
                                    }
                                    else
                                    {
                                        this.pnlTotalConectorCF.Size = new System.Drawing.Size(650, 527);
                                        txtRecebimentoConectorCF.Select();
                                        call_finalizadora = "R";
                                    }
                                }
                                else if (e.KeyCode == Keys.V && call_pdv == 3)
                                {
                                    acionaComandoPagamento();
                                    this.lblVisorEntradaDadosConectorCF.Location = new System.Drawing.Point(235, 511);
                                    if (fiscal_flag == 35 && Convert.ToDecimal(txtValeConectorCF.Text.Replace(",", ".")) > 0)
                                    {
                                        msg = new msgInfo("FORMA DE PAGAMENTO INICIADA NO ECF,\n FINALIZE O CUPOM FISCAL."); msg.ShowDialog();
                                        txtValeConectorCF.ReadOnly = true;
                                    }
                                    else
                                    {
                                        this.pnlTotalConectorCF.Size = new System.Drawing.Size(650, 527);
                                        txtValeConectorCF.Select();
                                        call_finalizadora = "V";
                                    }
                                }
                                    else if (e.KeyCode == Keys.Escape && call_pdv == 3)
                                    {
                                        conector_acao_controleMenu();
                                    }
                                    else if (e.KeyCode == Keys.Delete && call_pdv == 3)
                                    {
                                        this.pnlTotalConectorCF.Size = new System.Drawing.Size(650, 527);
                                        txtDinheiroConectorCF.Select();
                                    }
                                #endregion
                                break;
                            case 4:
                                #region
                                if (e.KeyCode == Keys.Enter && call_pdv == 4)
                                {
                                    if (call_pdv == 4)
                                    {
                                        if (input_find == null)
                                        {
                                            if (txtEntradaDadosConectorCF.Text != "")
                                            {
                                                input_find = txtEntradaDadosConectorCF.Text;
                                                txtEntradaDadosConectorCF.Clear();
                                                if (input_find == "0")
                                                {
                                                    consultaCliente consulta = new consultaCliente(alwaysVariables.Store, alwaysVariables.Usuario, fiscal_numero_caixa);

                                                    if (consulta.ShowDialog() == DialogResult.OK)
                                                    {
                                                        auxIdCliente = consulta.GridCodigo;
                                                        auxNomeRazao = consulta.GridNome;
                                                        if (consulta.GridTypePessoa == 2)
                                                        {
                                                            auxNomeRazao = consulta.GridRazao;
                                                            auxCPFCNPJ = consulta.GridCNPJ;
                                                        }
                                                        else
                                                        {
                                                            auxNomeRazao = consulta.GridNome;
                                                            auxCPFCNPJ = consulta.GridCPF;
                                                        }
                                                        if (auxIdCliente != "")
                                                        {
                                                            lblNoClienteConectorCF.Text = auxIdCliente;
                                                        }
                                                        #region //Modulo Cliente
                                                        if (auxCPFCNPJ.Length == 14)
                                                        {
                                                            input_find = "2";
                                                        }
                                                        else
                                                        {
                                                            input_find = "1";
                                                        }
                                                        int resultado = conectorPDV_find_cliente(input_find,  auxCPFCNPJ.Replace(",", "").Replace(".", "").Replace("-", "").Replace("/", ""));
                                                        if (resultado == 0)
                                                        {
                                                            call_pdv = 0;
                                                            //fiscal_retorno = conectorECF.Bematech_FI_AbreCupom(input_cliente);
                                                            functionECF.conectorECF_AbreCupomMFD(alwaysVariables.ModeloEcf, input_cliente, pessoa_nome, pessoa_endereco, ref fiscal_MSG, ref fiscal_retorno, alwaysVariables.ECF_Ligada);
                                                            if (backgroundConectorCupom.IsBusy != true)
                                                            {
                                                                // Start the asynchronous operation.
                                                                backgroundConectorCupom.RunWorkerAsync();
                                                            }
                                                            //conectorECF.Analisa_iRetorno(fiscal_retorno, ref fiscal_MSG);
                                                            if (fiscal_retorno == 1)
                                                            {
                                                                functionECF.conectorECF_NumeroCupom(alwaysVariables.ModeloEcf, ref fiscal_Cupom, ref fiscal_MSG, ref fiscal_retorno, alwaysVariables.ECF_Ligada);
                                                                //fiscal_retorno = conectorECF.Bematech_FI_NumeroCupom(ref fiscal_Cupom);
                                                                //conectorECF.Analisa_iRetorno(fiscal_retorno, ref fiscal_MSG);
                                                                if (fiscal_retorno == 1)
                                                                {
                                                                    conectorPDV_inc_cupom_cabecalho(fiscal_Cupom, fiscal_numero_caixa, txtEntradaDadosConectorCF.Text, lbOperadorConectorCF.Text, input_cliente, null, null, null, null, DateTime.Now, null, 0, null, 0, "0", null, null, null, null, null, null, pedido, "1");
                                                                }
                                                                else { txtVisorMsgConectorCF.Text = fiscal_MSG; }
                                                                if (fiscal_MSG != "" && fiscal_retorno != 1)
                                                                {
                                                                    txtVisorMsgConectorCF.Text = fiscal_MSG;
                                                                }
                                                            }
                                                            txtVisorMsgConectorCF.Select();
                                                            txtTotalDevidoConectorCF.Select();
                                                            ltbDetalhesConectorCF.Clear();
                                                            ltbDetalhesConectorCF.Text = " ITEM  CÓDIGO  DESCRIÇÃO QTD  UN VL UNIT(R$) ST VL ITEM(R$)" + "\r\n" +
                                                                                         "===========================================================";

                                                            if (fiscal_retorno != 1) { txtVisorMsgConectorCF.Text = fiscal_MSG; }
                                                            //input_cliente = null;
                                                            lblVisorEntradaDadosConectorCF.Text = "ENTRADA DE DADOS";
                                                            txtEntradaDadosConectorCF.CausesValidation = true;
                                                            txtEntradaDadosConectorCF.ReadOnly = false;
                                                            txtEntradaDadosConectorCF.Clear();
                                                            txtEntradaDadosConectorCF.Select();
                                                            txtEntradaDadosConectorCF.CausesValidation = true;
                                                            return;
                                                            /* 
                                                             * msg = new msgInfo("Cliente não encontrado [ F12 ] para abandonar e abrir o cupom sem os dados cliente ou [ F11 ] ou [ ESPACE ] para retorna a consulta.");
                                                            if (msg.ShowDialog() == DialogResult.Yes)
                                                            {
                                                            }
                                                            else
                                                            {
                                                                lblVisorEntradaDadosConectorCF.Text = " [ 0 ] - CODIGO DO CLIENTE  [ 1 ] - CPF   [ 2 ] - CNPJ";
                                                                txtEntradaDadosConectorCF.Clear();
                                                                input_cliente = null;
                                                                input_find = null;
                                                            }
                                                             */
                                                        }
                                                        else
                                                        {
                                                            lblVisorEntradaDadosConectorCF.Text = "DADOS INVÁLIDO - DIGITE NOVAMENTE";
                                                            txtEntradaDadosConectorCF.Select();
                                                            txtEntradaDadosConectorCF.Clear();
                                                            input_cliente = null;

                                                        }
                                                        #endregion
                                                    }
                                                    else
                                                    {
                                                        lblNoClienteConectorCF.Text = "0";
                                                        auxIdCliente = "";
                                                    }
                                                    this.lblVisorEntradaDadosConectorCF.Location = new System.Drawing.Point(180, 511);
                                                    lblVisorEntradaDadosConectorCF.Text = "DIGITE CODIGO DO CLIENTE";
                                                }
                                                else if (input_find == "1")
                                                {
                                                    this.lblVisorEntradaDadosConectorCF.Location = new System.Drawing.Point(175, 511);
                                                    lblVisorEntradaDadosConectorCF.Text = "DIGITE CPF DO CLIENTE";
                                                }
                                                else if (input_find == "2")
                                                {
                                                    this.lblVisorEntradaDadosConectorCF.Location = new System.Drawing.Point(175, 511);
                                                    lblVisorEntradaDadosConectorCF.Text = "DIGITE CNPJ DO CLIENTE";
                                                }
                                                else
                                                {
                                                    input_find = null;
                                                    txtEntradaDadosConectorCF.Clear();
                                                }
                                                txtEntradaDadosConectorCF.CausesValidation = false;
                                                txtEntradaDadosConectorCF.Select();
                                            }
                                            else
                                            {
                                                lblVisorEntradaDadosConectorCF.Text = " [ 0 ] - CODIGO DO CLIENTE  [ 1 ] - CPF   [ 2 ] - CNPJ";
                                                txtEntradaDadosConectorCF.Clear();
                                                input_cliente = null;
                                            }
                                        }
                                        else if (input_cliente == null)
                                        {
                                            int resultado = conectorPDV_find_cliente(
                                                input_find, 
                                                txtEntradaDadosConectorCF.Text.Replace(",", "").Replace(".", "").Replace("-", "").Replace("/", ""));
                                            if (resultado == 0)
                                            {
                                                call_pdv = 0;
                                                //fiscal_retorno = conectorECF.Bematech_FI_AbreCupom(input_cliente);
                                                functionECF.conectorECF_AbreCupomMFD(alwaysVariables.ModeloEcf, input_cliente, pessoa_nome, pessoa_endereco, ref fiscal_MSG, ref fiscal_retorno, alwaysVariables.ECF_Ligada);
                                                if (backgroundConectorCupom.IsBusy != true)
                                                {
                                                    // Start the asynchronous operation.
                                                    backgroundConectorCupom.RunWorkerAsync();
                                                }
                                                //conectorECF.Analisa_iRetorno(fiscal_retorno, ref fiscal_MSG);
                                                if (fiscal_retorno == 1)
                                                {
                                                    functionECF.conectorECF_NumeroCupom(alwaysVariables.ModeloEcf, ref fiscal_Cupom, ref fiscal_MSG, ref fiscal_retorno, alwaysVariables.ECF_Ligada);
                                                    //fiscal_retorno = conectorECF.Bematech_FI_NumeroCupom(ref fiscal_Cupom);
                                                    //conectorECF.Analisa_iRetorno(fiscal_retorno, ref fiscal_MSG);
                                                    if (fiscal_retorno == 1)
                                                    {
                                                        conectorPDV_inc_cupom_cabecalho(fiscal_Cupom, fiscal_numero_caixa, txtEntradaDadosConectorCF.Text, lbOperadorConectorCF.Text, input_cliente, null, null, null, null, DateTime.Now, null, 0, null, 0, "0", null, null, null, null, null, null, pedido,"1");
                                                    }
                                                    else { txtVisorMsgConectorCF.Text = fiscal_MSG; }
                                                    if (fiscal_MSG != "" && fiscal_retorno != 1)
                                                    {
                                                        txtVisorMsgConectorCF.Text = fiscal_MSG;
                                                    }
                                                }
                                                txtVisorMsgConectorCF.Select();
                                                txtTotalDevidoConectorCF.Select();
                                                ltbDetalhesConectorCF.Clear();
                                                ltbDetalhesConectorCF.Text = " ITEM  CÓDIGO  DESCRIÇÃO QTD  UN VL UNIT(R$) ST VL ITEM(R$)" + "\r\n" +
                                                                             "===========================================================";

                                                if (fiscal_retorno != 1) { txtVisorMsgConectorCF.Text = fiscal_MSG; }
                                                //input_cliente = null;
                                                lblVisorEntradaDadosConectorCF.Text = "ENTRADA DE DADOS";
                                                txtEntradaDadosConectorCF.CausesValidation = true;
                                                txtEntradaDadosConectorCF.ReadOnly = false;
                                                txtEntradaDadosConectorCF.Clear();
                                                txtEntradaDadosConectorCF.Select();
                                                txtEntradaDadosConectorCF.CausesValidation = true;
                                                /* 
                                                 * msg = new msgInfo("Cliente não encontrado [ F12 ] para abandonar e abrir o cupom sem os dados cliente ou [ F11 ] ou [ ESPACE ] para retorna a consulta.");
                                                if (msg.ShowDialog() == DialogResult.Yes)
                                                {
                                                }
                                                else
                                                {
                                                    lblVisorEntradaDadosConectorCF.Text = " [ 0 ] - CODIGO DO CLIENTE  [ 1 ] - CPF   [ 2 ] - CNPJ";
                                                    txtEntradaDadosConectorCF.Clear();
                                                    input_cliente = null;
                                                    input_find = null;
                                                }
                                                 */
                                            }
                                            else
                                            {
                                                lblVisorEntradaDadosConectorCF.Text = "DADOS INVÁLIDO - DIGITE NOVAMENTE";
                                                txtEntradaDadosConectorCF.Select();
                                                txtEntradaDadosConectorCF.Clear();
                                                input_cliente = null;

                                            }
                                        }
                                    }
                                }
                                else if (e.KeyCode == Keys.Escape && call_pdv == 4)
                                {
                                    conector_acao_controleMenu();
                                }
                                #endregion
                                break;
                            case 5:
                                #region
                                if ((e.Control && e.KeyCode == Keys.N) && call_pdv == 5)
                                {
                                    if (Convert.ToDecimal(txtValorPagoConectorCF.Text.Replace(",", ".")) == 0)
                                    {
                                        returnDefaultPDV();
                                    }
                                    else
                                    {
                                        msg = new msgInfo("RECEBIMENTO INICIALIZADO, PROSSIGA OU RETORNE O RECEBIMENTO...!"); msg.ShowDialog();
                                    }
                                }
                                else if (e.KeyCode == Keys.Space && call_pdv == 5)
                                {
                                    if (txtNumeroContratoConectorCF.SelectionLength > 0 && Convert.ToDecimal(txtValorPagoConectorCF.Text.Replace(",", ".")) == 0)
                                    {
                                        txtNumeroContratoConectorCF.ReadOnly = false;
                                    }
                                }
                                else if (e.KeyCode == Keys.Escape && call_pdv == 5)
                                {
                                    this.lblVisorEntradaDadosConectorCF.Location = new System.Drawing.Point(235, 511);
                                    if (Convert.ToDecimal(txtValorPagoConectorCF.Text.Replace(",", ".")) > 0)
                                    {
                                        if (txtValorTrocoConectorCF.Text != "" && Convert.ToDecimal(txtValorTrocoConectorCF.Text.Replace(",", ".")) > 0)
                                        {
                                            auxTypeHistory = "12";
                                            conectorPDV_inc_historicoCrediario("TROCO", txtValorTrocoConectorCF.Text, 0);
                                        }
                                        conectorPDV_alt_parcela();
                                        int tam = 0;
                                        tam = cmbSituacaoContratoConectorCF.Text.Length;
                                        msgInfo msg = new msgInfo(1, "Caro Cliente - " + "Conforme foi pago o valor de R$ " + txtValorPagoConectorCF.Text + " do contrato N.o " + txtNumeroContratoConectorCF.Text + " da parcela " + txtParcelaConectorCF.Text + ", foi baixado como " + cmbSituacaoContratoConectorCF.Text.Substring(3, (tam - 3)) + ", com isso verifique o historico."); msg.ShowDialog();
                                        returnDefaultPDV();
                                        conector_stop_thread();
                                        this.Dispose();
                                    }
                                    else
                                    {
                                        //this.Dispose();
                                    }
                                }//##################################################BEGIN CREDIARIO################################################################################
                                else if (e.KeyCode == Keys.Left && call_pdv == 5)
                                {
                                    txtLojaConectorCF.Select();
                                }
                                else if (e.KeyCode == Keys.Right && call_pdv == 5)
                                {
                                    txtParcelaConectorCF.Select();
                                }
                                else if (e.KeyCode == Keys.Up && call_pdv == 5)
                                {
                                    txtNumeroContratoConectorCF.Select();
                                }
                                else if (e.KeyCode == Keys.Enter && call_pdv == 5)
                                {
                                    ProcessTabKey(true);
                                }
                                /*else if (e.KeyCode == Keys.Enter && call_pdv == 7)
                                {
                
                                }*/
                                else if (e.KeyValue == 40 && call_pdv == 5)
                                {
                                    SendKeys.Send("{TAB}");
                                }
                                else if (e.KeyValue == 38 && call_pdv == 5)
                                {
                                    SendKeys.Send("+{TAB}");
                                }
                                else if (e.KeyCode == Keys.F8 && call_pdv == 5)
                                {

                                }
                                else if (e.KeyCode == Keys.F2 && call_pdv == 5)
                                {
                                    if (String.Format("{0:ddMMyy}", DateTime.Now) == fiscal_data_movimento)
                                    {
                                        if (Convert.ToDecimal(txtTotalDevidoConectorCF.Text.Replace(",", ".")) > 0)
                                        {
                                            txtValorMontanteConectorCF.ReadOnly = false;
                                            txtValorMontanteConectorCF.Select();
                                            auxIdFinalizadora = "1";
                                            auxTypeHistory = "7";
                                        }
                                        else
                                        {
                                            msgInfo msg = new msgInfo(1, "Caro Cliente - " + "Valor nulo ou igual a ZERO para o total devido impossível prosseguir."); msg.ShowDialog();
                                            returnDefaultPDV();
                                        }
                                    }
                                    else
                                    {
                                        msg = new msgInfo(1, "DATA DA IMPRESSORA DIFERENTE DA DATA DO SISTEMA,\n VERIFIQUE O STATUS DA IMPRESSORA,\n MOVIMENTO DO DIA VESUS DATA IMPRESSORA,\n AGUARDANDO EMISSÃO DA LEITURA Z."); msg.ShowDialog();
                                        txtEntradaDadosConectorCF.Select();
                                    }


                                }
                                else if (e.KeyCode == Keys.F8 && call_pdv == 5)
                                {
                                    if (txtValorPrestacaoConectorCF.Text != "" && txtValorPrestacaoConectorCF.Text != "0,00" && Convert.ToDecimal(txtValorPrestacaoConectorCF.Text) > 0)
                                    {
                                        txtSenhaLiberacaoDescontoConectorCF.CausesValidation = false;
                                        txtValorDescontoConectorCF.Text = "0,00";
                                        txtValorDescontoConectorCF.ReadOnly = false;
                                        txtValorDescontoConectorCF.Select();
                                        txtSenhaLiberacaoDescontoConectorCF.CausesValidation = true;
                                    }
                                    else
                                    {
                                        msgInfo msg = new msgInfo(1, "Caro Cliente - " + "Valor da Prestação não informado, ou igual a zero."); msg.ShowDialog();
                                        txtValorPrestacaoConectorCF.Select();
                                    }
                                }
                                else if (e.KeyCode == Keys.F9 && call_pdv == 5)
                                {
                                    if (String.Format("{0:ddMMyy}", DateTime.Now) == fiscal_data_movimento)
                                    {
                                        if (fiscal_flag == 32 || fiscal_flag == 0 || fiscal_flag == 4 || fiscal_flag == 36)
                                        {
                                            if (txtLojaConectorCF.Text != "" && txtLojaConectorCF.Text != "0")
                                            {
                                                if (txtNumeroContratoConectorCF.Text != "" && txtNumeroContratoConectorCF.Text != "000000000000000000000" && Convert.ToDouble(txtNumeroContratoConectorCF.Text) > 0)
                                                {
                                                    if (txtParcelaConectorCF.Text != "")
                                                    {
                                                        conector_webservice_crediario(txtLojaConectorCF.Text, txtNumeroContratoConectorCF.Text, txtParcelaConectorCF.Text);
                                                    }
                                                    else
                                                    {
                                                        msgInfo msg = new msgInfo(1, "Caro Cliente - " + "Parcela inválida."); msg.ShowDialog();
                                                        txtNumeroContratoConectorCF.Select();
                                                    }
                                                }
                                                else
                                                {
                                                    //PARADA ERRO MSG
                                                    msgInfo msg = new msgInfo(1, "Caro Cliente - " + "Contrato inválido, ou não existe."); msg.ShowDialog();
                                                    txtNumeroContratoConectorCF.Select();
                                                }
                                            }
                                            else
                                            {
                                                msgInfo msg = new msgInfo(1, "Caro Cliente - " + "Loja inválida, ou não existe."); msg.ShowDialog();
                                                txtLojaConectorCF.Select();
                                            }
                                        }
                                        else
                                        {
                                            msgInfo msg = new msgInfo(1, "Caro Cliente - " + "Verifique se alguem documento fiscal iniciado na impressora fiscal, impossível prosseguir."); msg.ShowDialog();
                                            txtEntradaDadosConectorCF.Select();
                                        }
                                    }
                                    else
                                    {
                                        msg = new msgInfo("DATA DA IMPRESSORA DIFERENTE DA DATA DO SISTEMA,\n VERIFIQUE O STATUS DA IMPRESSORA,\n MOVIMENTO DO DIA VESUS DATA IMPRESSORA,\n AGUARDANDO EMISSÃO DA LEITURA Z."); msg.ShowDialog();
                                        txtEntradaDadosConectorCF.Select();
                                    }
                                }
                                else if (e.KeyCode == Keys.F11 && call_pdv == 5)
                                {
                                    if (String.Format("{0:ddMMyy}", DateTime.Now) == fiscal_data_movimento)
                                    {
                                        if (ataque == 0)
                                        {
                                            conectorPDV_talk_pessoa();
                                        }
                                    }
                                    else
                                    {
                                        msg = new msgInfo("DATA DA IMPRESSORA DIFERENTE DA DATA DO SISTEMA,\n VERIFIQUE O STATUS DA IMPRESSORA,\n MOVIMENTO DO DIA VESUS DATA IMPRESSORA,\n AGUARDANDO EMISSÃO DA LEITURA Z."); msg.ShowDialog();
                                        txtEntradaDadosConectorCF.Select();
                                    }
                                }
                                else if (e.KeyCode == Keys.F8 && call_pdv == 5)
                                {
                                    conector_calc_desconto();
                                }
                                else if (e.KeyCode == Keys.F3 && call_pdv == 5)
                                {
                                    conector_calc_money();
                                }
                                else if (e.KeyCode == Keys.F4 && call_pdv == 5)
                                {
                                    conector_calc_cheque();
                                }
                                else if (e.KeyCode == Keys.F5 && call_pdv == 5)
                                {
                                    conector_calc_cartao();
                                }
                                else if (e.KeyCode == Keys.F6 && call_pdv == 5)
                                {
                                    conector_calc_vale();
                                }
                                else if (e.KeyCode == Keys.F10 && call_pdv == 5)
                                {
                                    valuesAcresDesc = "    ";
                                    acresDesc = " ";
                                    conector_aut_recebimento();
                                }
                                else if (e.KeyCode == Keys.Escape && call_pdv == 5)
                                {
                                    conector_acao_controleMenu();
                                }
                                #endregion
                                break;
                            case 6:
                                #region
                                if (e.KeyCode == Keys.F1 && call_pdv == 6)
                                {
                                    txtNumeroReservaConectorCF.ReadOnly = false;
                                    modoPedido = 0;//Dav
                                    txtVisorMsgConectorCF.Text = "DAV";
                                    txtNumeroReservaConectorCF.Select();
                                }
                                else if (e.KeyCode == Keys.F2 && call_pdv == 6)
                                {
                                    txtNumeroReservaConectorCF.ReadOnly = false;
                                    modoPedido = 1;//Pre Venda
                                    txtVisorMsgConectorCF.Text = "PRÉ-VENDA";
                                    txtNumeroReservaConectorCF.Select();
                                }
                                else if (e.KeyCode == Keys.F3 && call_pdv == 6)
                                {
                                    if (alwaysVariables.Perfil == "W" || alwaysVariables.Perfil == "V" || alwaysVariables.Perfil == "X")
                                    {
                                        txtNumeroReservaConectorCF.ReadOnly = false;
                                        modoPedido = 3;//NOTA
                                        txtVisorMsgConectorCF.Text = "NOTA FISCAL";
                                        txtNumeroReservaConectorCF.Select();
                                    }
                                    else
                                    {
                                        msg = new msgInfo("PERFIL '" + alwaysVariables.Perfil + "' NÃO PERMITIDO...!"); msg.ShowDialog();
                                        conector_reset_reserva();
                                        modoPedido = 0;
                                        call_pdv = 0;
                                        pnlReservaConectorCF.Visible = false;
                                        if (alwaysVariables.ModoOperacao == 1)
                                        {
                                            txtEntradaDadosConectorCF.Select();
                                        }
                                        else
                                        {
                                            txtEntradaDadosNF.Select();
                                        }
                                    }
                                }
                                else if (e.KeyCode == Keys.Enter && call_pdv == 6)
                                {
                                    if ((NotaNumber == null || NotaNumber == "0") && modoPedido == 3)
                                    {
                                        NotaNumber = txtNumeroReservaConectorCF.Text;
                                        lblInforReservaConectorCF.Text = "INFORME O CODIGO DO CLIENTE";
                                        txtNumeroReservaConectorCF.Clear();
                                        txtNumeroReservaConectorCF.Select();
                                    }
                                    else
                                        if (reserva_number == null && (modoPedido == 0 || modoPedido == 1))
                                        {
                                            if (txtNumeroReservaConectorCF.Text.Trim() != "")
                                            {
                                                reserva_number = txtNumeroReservaConectorCF.Text;
                                                //ALT MG.001 lblInforReservaConectorCF.Text = "INFORME  O  NUMERO  A  LOJA";
                                                lblInforReservaConectorCF.Text = "LOJA";
                                            }
                                            else
                                            {
                                                reserva_number = null;
                                            }
                                            txtNumeroReservaConectorCF.Clear();
                                            txtNumeroReservaConectorCF.Text = "";
                                        }
                                    // Alt MG.001 else if (reserva_loja == null)
                                    if (reserva_loja == null)
                                    {
                                        if (alwaysVariables.Store != "")
                                        {
                                            reserva_loja = txtNumeroReservaConectorCF.Text = alwaysVariables.Store;
                                        }
                                        if (modoPedido == 3)
                                        {
                                            conectorPDV_inc_notad(NotaNumber, txtNumeroReservaConectorCF.Text.Replace("\r\n", "").Trim());
                                            if (call_pdv == 6)
                                            {
                                                txtNumeroReservaConectorCF.Clear();
                                                txtNumeroReservaConectorCF.Text = "";
                                                call_pdv = 0;
                                                txtVisorMsgConectorCF.Text = "CAIXA ABERTO";
                                                lblVisorEntradaDadosConectorCF.Text = "ENTRADA DE DADOS";
                                                pnlReservaConectorCF.Visible = false;
                                                txtEntradaDadosConectorCF.Select();
                                            }
                                        }
                                        else
                                        {
                                            if (txtNumeroReservaConectorCF.Text != "")
                                            {
                                                pgbWaitReservaConectorCF.Maximum = 14;
                                                reserva_loja = txtNumeroReservaConectorCF.Text;
                                                txtNumeroReservaConectorCF.Clear();
                                                if (reserva_loja.Replace("\r\n", "").Trim() != "")
                                                {
                                                    if (reserva_number == null)
                                                    {
                                                        reserva_number = reserva_loja.Replace("\r\n", "").Trim();
                                                    }
                                                    if (reserva_number.Replace("\0", "").Trim() != "")
                                                    {
                                                        txtVisorMsgConectorCF.Text = "CARREGANDO RESERVA, AGUARDE...!";
                                                        string test = reserva_number;
                                                        pedido = conector_webservice_preVenda(reserva_loja.Replace("\r\n", "").Trim(), reserva_number.Trim(), 0);
                                                        if (pedido != "" && pedido != "0")
                                                        {
                                                            conectorPDV_index(pedido);
                                                        }
                                                        if (flagFormaFinalizacao == "D" && Convert.ToDouble(test.Trim()) > 0 && Convert.ToDouble(pedido) > 0)
                                                        {
                                                            conectorPDV_carrega_registroD(1, Convert.ToDouble(test.Trim()).ToString());
                                                        }
                                                    }
                                                    else
                                                    {
                                                        msg = new msgInfo("RESERVA INVÁLIDA...!"); msg.ShowDialog();
                                                        vetorTotal = null;
                                                        fechaMoneyObj(true);
                                                        if (call_pdv == 6)
                                                        {
                                                            txtNumeroReservaConectorCF.Clear();
                                                            txtNumeroReservaConectorCF.Text = "";
                                                            call_pdv = 0;
                                                            txtVisorMsgConectorCF.Text = "CAIXA ABERTO";
                                                            lblVisorEntradaDadosConectorCF.Text = "ENTRADA DE DADOS";
                                                            pnlReservaConectorCF.Visible = false;
                                                            txtEntradaDadosConectorCF.Select();
                                                        }
                                                    }
                                                }
                                                else
                                                {
                                                    msg = new msgInfo("LOJA NÃO INFORMADA...!"); msg.ShowDialog();
                                                    vetorTotal = null;
                                                    fechaMoneyObj(true);
                                                    if (call_pdv == 6)
                                                    {
                                                        txtNumeroReservaConectorCF.Clear();
                                                        txtNumeroReservaConectorCF.Text = "";
                                                        call_pdv = 0;
                                                        txtVisorMsgConectorCF.Text = "CAIXA ABERTO";
                                                        lblVisorEntradaDadosConectorCF.Text = "ENTRADA DE DADOS";
                                                        pnlReservaConectorCF.Visible = false;
                                                        txtEntradaDadosConectorCF.Select();
                                                    }
                                                }
                                                if (Convert.ToDouble(pedido) > 0)
                                                {
                                                    pnlReservaConectorCF.Visible = false;
                                                }
                                            }
                                            else
                                            {
                                                reserva_loja = null;
                                            }
                                            txtNumeroReservaConectorCF.Clear();
                                            txtNumeroReservaConectorCF.Text = "";
                                        }
                                    }
                                }
                                else if (e.KeyCode == Keys.F2 && call_pdv == 6)
                                {
                                }
                                else if (e.KeyCode == Keys.F3 && call_pdv == 6)
                                {
                                }
                                else if (e.KeyCode == Keys.F5 && call_pdv == 6)
                                {
                                    //if (Convert.ToDouble(txtNumeroReservaConectorCF.Text) > 0)
                                    {
                                        call_pdv = 0;
                                        txtVisorMsgConectorCF.Text = "CUPOM ABERTO";
                                        lblVisorEntradaDadosConectorCF.Text = "ENTRADA DE DADOS";
                                        pnlReservaConectorCF.Visible = false;
                                        txtEntradaDadosConectorCF.Select();
                                    }
                                }
                                else if (e.KeyCode == Keys.Escape && call_pdv == 6)
                                {
                                    conector_acao_controleMenu();
                                }
                                #endregion
                                break;
                            case 7:
                                #region
                                if (e.KeyCode == Keys.Enter && call_pdv == 7)
                                {
                                    if (call_pdv == 7)
                                    {
                                        ProcessTabKey(true);
                                        if (call_funcao == 2)
                                        {
                                            //if (Convert.ToDecimal(acresDesc.Replace(",", ".") == " " ? "0" : acresDesc.Replace(",", ".")) > 0)
                                            if (Convert.ToDecimal(valuesAcresDesc.Replace(",", ".") == "    " ? "0" : valuesAcresDesc.Replace(",", ".")) > 0)
                                            {
                                                decimal test = conector_verifica_desconto_item(sequenciaItemAle, fiscal_store.Replace("\0", "").Trim() == "" ? alwaysVariables.Store : fiscal_store, produto_barra, String.Format("{0:yyyyMMdd}", Convert.ToDateTime(fiscal_data_movimento.Substring(0, 2) + "/" + fiscal_data_movimento.Substring(2, 2) + "/" + String.Format("{0:ddMMyyyy}", DateTime.Now).Substring(4, 2) + fiscal_data_printer.Substring(4, 2))), fiscal_numero_caixa.Replace("\0", "").Trim(), fiscal_Cupom.Replace("\0", "").Trim());
                                                decimal test1 = conector_verifica_acrescimo_item(sequenciaItemAle, fiscal_store.Replace("\0", "").Trim() == "" ? alwaysVariables.Store : fiscal_store, produto_barra, String.Format("{0:yyyyMMdd}", Convert.ToDateTime(fiscal_data_movimento.Substring(0, 2) + "/" + fiscal_data_movimento.Substring(2, 2) + "/" + String.Format("{0:ddMMyyyy}", DateTime.Now).Substring(4, 2) + fiscal_data_printer.Substring(4, 2))), fiscal_numero_caixa.Replace("\0", "").Trim(), fiscal_Cupom.Replace("\0", "").Trim());
                                                if (test == 0 && test1 == 0)
                                                {
                                                    if (sequenciaItemAle == "000" || sequenciaItemAle == "    " || sequenciaItemAle.Trim() == "")
                                                    {
                                                        msg = new msgInfo(fiscal_MSG + " - ITEM NÃO LOCALIZADO"); msg.ShowDialog();
                                                        fiscal_retorno = -1;
                                                        produto_barra = "";
                                                        valuesAcresDesc = "    ";
                                                        acresDesc = " ";
                                                        sequenciaItemAle = "    ";
                                                    }
                                                    else
                                                    {
                                                        functionECF.conectorECF_AcrescimoDescontoItem(alwaysVariables.ModeloEcf, sequenciaItemAle, "D", produto_tipo_desconto, String.Format("{0:F2}", Math.Round((Convert.ToDecimal(valuesAcresDesc.Replace(",", ".")) * 100)).ToString()), ref fiscal_MSG, ref fiscal_retorno, alwaysVariables.ECF_Ligada);
                                                        //fiscal_retorno = conectorECF.Bematech_FI_AcrescimoDescontoItemMFD(sequenciaItemAle, "D", produto_tipo_desconto, String.Format("{0:F2}", Math.Round((Convert.ToDecimal(valuesAcresDesc.Replace(",", ".")) * 100)).ToString()));
                                                        if (fiscal_retorno == 1)
                                                        {
                                                            conectorPDV_PAFECF_exe("R04", fiscal_Cupom.Replace(",", "").Trim(), 5, produto_barra.Replace("\0", "").Trim(), sequenciaItemAle);
                                                            conectorPDV_PAFECF_exe("R05", fiscal_Cupom.Replace(",", "").Trim(), 4, produto_barra.Replace("\0", "").Trim(), sequenciaItemAle);
                                                        }
                                                    }
                                                    call_pdv = 0;
                                                    if (fiscal_retorno == 1 && functionECF.conectorECF_Analisa_RetornoImpressora(alwaysVariables.ModeloEcf, ref ACK, ref ST1, ref ST2, ref ST3, ref fiscal_MSG))
                                                    {
                                                        txtVisorMsgConectorCF.Text = "CUPOM FISCAL ABERTO";
                                                        this.ltbDetalhesConectorCF.ForeColor = System.Drawing.Color.Yellow;
                                                        ltbDetalhesConectorCF.Text += "                                     DESCONTO ITEM => " + sequenciaItemAle + "   " + String.Format("{0:F2}", (Convert.ToDecimal(valuesAcresDesc.Replace(",", ".")))).Replace(".", ",") + "% R$ " + String.Format("{0:F2}", (Convert.ToDecimal(acresDesc.Replace(",", ".")) * Convert.ToDecimal(valuesAcresDesc.Replace(",", "."))) / 100).Replace(".", ",") + "\r\n";
                                                        this.ltbDetalhesConectorCF.ForeColor = System.Drawing.Color.White;
                                                        conector_desconto_item(fiscal_Cupom, fiscal_store, fiscal_numero_caixa, sequenciaItemAle, valuesAcresDesc);
                                                        resetLabel();
                                                        txtEntradaDadosConectorCF.Clear();
                                                        conector_find_subFull("1");
                                                        txtEntradaDadosConectorCF.Select();
                                                        valuesAcresDesc = "    ";
                                                        acresDesc = "0";
                                                        produto_barra = "";
                                                        call_funcao = 0;
                                                        call_pdv = 0;
                                                    }
                                                    else
                                                    {
                                                        txtVisorMsgConectorCF.Text = "OPERAÇÃO CANCELADA - [DESCONTO]";
                                                        msg = new msgInfo(fiscal_MSG + functionECF.conectorECF_Erros(alwaysVariables.ModeloEcf)); msg.ShowDialog();
                                                        resetLabel();
                                                        txtEntradaDadosConectorCF.Clear();
                                                        conector_find_subFull("1");
                                                        txtEntradaDadosConectorCF.Select();
                                                        produto_barra = "";
                                                        valuesAcresDesc = "    ";
                                                        acresDesc = " ";
                                                        sequenciaItemAle = "    ";
                                                        call_funcao = 0;
                                                        call_pdv = 0;
                                                    }
                                                }
                                                else
                                                {
                                                    txtVisorMsgConectorCF.Text = "OPERAÇÃO CANCELADA - [ACRESCIMO/DESCONTO]";
                                                    msg = new msgInfo(fiscal_MSG + " - ITEM JÁ RECEBEU O ACRESCIMO/DESCONTO"); msg.ShowDialog();
                                                    resetLabel();
                                                    txtEntradaDadosConectorCF.Clear();
                                                    conector_find_subFull("1");
                                                    txtEntradaDadosConectorCF.Select();
                                                    produto_barra = "";
                                                    valuesAcresDesc = "    ";
                                                    acresDesc = " ";
                                                    sequenciaItemAle = "    ";
                                                    call_funcao = 0;
                                                    call_pdv = 0;
                                                }
                                            }
                                            else
                                            {
                                                if (Convert.ToInt32(sequenciaItemAle.Trim() == "" ? "0" : sequenciaItemAle.Trim()) <= 0)
                                                {
                                                    sequenciaItemAle = "    ";
                                                }
                                            }
                                        }
                                        else if (call_funcao == 4)
                                        {
                                            if (Convert.ToDecimal(valuesAcresDesc.Replace(",", ".") == "    " ? "0" : valuesAcresDesc.Replace(",", ".")) > 0)
                                            {
                                                decimal test = conector_verifica_desconto_item(sequenciaItemAle, fiscal_store.Replace("\0", "").Trim() == "" ? alwaysVariables.Store : fiscal_store, produto_barra, String.Format("{0:yyyyMMdd}", Convert.ToDateTime(fiscal_data_movimento.Substring(0, 2) + "/" + fiscal_data_movimento.Substring(2, 2) + "/" + String.Format("{0:ddMMyyyy}", DateTime.Now).Substring(4, 2) + fiscal_data_printer.Substring(4, 2))), fiscal_numero_caixa.Replace("\0", "").Trim(), fiscal_Cupom.Replace("\0", "").Trim());
                                                decimal test1 = conector_verifica_acrescimo_item(sequenciaItemAle, fiscal_store.Replace("\0", "").Trim() == "" ? alwaysVariables.Store : fiscal_store, produto_barra, String.Format("{0:yyyyMMdd}", Convert.ToDateTime(fiscal_data_movimento.Substring(0, 2) + "/" + fiscal_data_movimento.Substring(2, 2) + "/" + String.Format("{0:ddMMyyyy}", DateTime.Now).Substring(4, 2) + fiscal_data_printer.Substring(4, 2))), fiscal_numero_caixa.Replace("\0", "").Trim(), fiscal_Cupom.Replace("\0", "").Trim());
                                                if (test == 0 && test1 == 0)
                                                {
                                                    if (sequenciaItemAle == "000" || sequenciaItemAle == "    " || sequenciaItemAle.Trim() == "")
                                                    {
                                                        msg = new msgInfo(fiscal_MSG + " - ITEM NÃO LOCALIZADO"); msg.ShowDialog();
                                                        fiscal_retorno = -1;
                                                        produto_barra = "";
                                                        valuesAcresDesc = "    ";
                                                        acresDesc = " ";
                                                        sequenciaItemAle = "    ";
                                                    }
                                                    else
                                                    {
                                                        functionECF.conectorECF_AcrescimoDescontoItem(alwaysVariables.ModeloEcf, sequenciaItemAle, "A", produto_tipo_desconto, String.Format("{0:F2}", Math.Round((Convert.ToDecimal(valuesAcresDesc.Replace(",", ".")) * 100)).ToString()), ref fiscal_MSG, ref fiscal_retorno, alwaysVariables.ECF_Ligada);
                                                        //fiscal_retorno = conectorECF.Bematech_FI_AcrescimoDescontoItemMFD(sequenciaItemAle, "A", produto_tipo_desconto, String.Format("{0:F2}", Math.Round((Convert.ToDecimal(valuesAcresDesc.Replace(",", ".")) * 100)).ToString()));

                                                        if (fiscal_retorno == 1)
                                                        {
                                                            conectorPDV_PAFECF_exe("R04", fiscal_Cupom.Replace(",", "").Trim(), 5, produto_barra.Replace("\0", "").Trim(), sequenciaItemAle);
                                                            conectorPDV_PAFECF_exe("R05", fiscal_Cupom.Replace(",", "").Trim(), 4, produto_barra.Replace("\0", "").Trim(), sequenciaItemAle);
                                                        }
                                                    }
                                                    call_pdv = 0;
                                                    if (fiscal_retorno == 1 && functionECF.conectorECF_Analisa_RetornoImpressora(alwaysVariables.ModeloEcf, ref ACK, ref ST1, ref ST2, ref ST3, ref fiscal_MSG))
                                                    {
                                                        if (fiscal_retorno == 1)
                                                        {
                                                            if (File.Exists(folderMFDGrand + "\\grandFullPDV" + ".enc"))
                                                            {
                                                                if (backgroundConectorGrandeTotal.IsBusy != true)
                                                                {
                                                                    // Start the asynchronous operation.
                                                                    backgroundConectorGrandeTotal.RunWorkerAsync();
                                                                }
                                                                arranqueTotal = 1;
                                                                /*
                                                                if (File.Exists(folderMFDGrand + "\\grandFullPDV" + ".enc"))
                                                                {//Atualiza Grande Total
                                                                    fiscal_GT_Crypt = new string('\x20', 20);
                                                                    File.Delete(folderMFDGrand + "\\grandFullPDV" + ".enc");
                                                                    functionECF.conectorECF_GrandeTotal_Crypt(alwaysVariables.ModeloEcf, ref fiscal_GT_Crypt, ref fiscal_MSG, ref fiscal_retorno, alwaysVariables.ECF_Ligada);
                                                                    cryptografia.conectorPDV_serie(alwaysVariables.PAF_total + "\\grandFullPDV" + ".txt", "0");
                                                                    File.Delete(alwaysVariables.PAF_total + "\\grandFullPDV" + ".txt");
                                                                }*/
                                                            }
                                                        }
                                                        txtVisorMsgConectorCF.Text = "CUPOM FISCAL ABERTO";
                                                        this.ltbDetalhesConectorCF.ForeColor = System.Drawing.Color.Yellow;
                                                        //ltbDetalhesConectorCF.Text += "                                     DESCONTO ITEM => " + sequenciaItemAle + "   " + String.Format("{0:F2}", (Convert.ToDecimal(valuesAcresDesc.Replace(",", ".")))) + "% R$ " + String.Format("{0:F2}", (Convert.ToDecimal(acresDesc.Replace(",", ".")) * Convert.ToDecimal(valuesAcresDesc.Replace(",", "."))) / 100).Replace(",", ".") + "\r\n";
                                                        ltbDetalhesConectorCF.Text += "                                     ACRESCIMO ITEM => " + sequenciaItemAle + "   " + String.Format("{0:F2}", (Convert.ToDecimal(valuesAcresDesc.Replace(",", ".")))) + "% R$ " + String.Format("{0:F2}", (Convert.ToDecimal(acresDesc.Replace(",", ".")) * Convert.ToDecimal(valuesAcresDesc.Replace(",", "."))) / 100).Replace(",", ".") + "\r\n";
                                                        this.ltbDetalhesConectorCF.ForeColor = System.Drawing.Color.White;
                                                        conector_acrescimo_item(fiscal_Cupom, fiscal_store, fiscal_numero_caixa, sequenciaItemAle, valuesAcresDesc);
                                                        resetLabel();
                                                        txtEntradaDadosConectorCF.Clear();
                                                        conector_find_subFull("1");
                                                        txtEntradaDadosConectorCF.Select();
                                                        valuesAcresDesc = "    ";
                                                        acresDesc = "0";
                                                        produto_barra = "";
                                                        call_funcao = 0;
                                                        call_pdv = 0;
                                                    }
                                                    else
                                                    {
                                                        txtVisorMsgConectorCF.Text = "OPERAÇÃO CANCELADA - [ ACRESCIMO ]";
                                                        msg = new msgInfo(fiscal_MSG + functionECF.conectorECF_Erros(alwaysVariables.ModeloEcf)); msg.ShowDialog();
                                                        resetLabel();
                                                        txtEntradaDadosConectorCF.Clear();
                                                        conector_find_subFull("1");
                                                        txtEntradaDadosConectorCF.Select();
                                                        produto_barra = "";
                                                        valuesAcresDesc = "    ";
                                                        acresDesc = " ";
                                                        sequenciaItemAle = "    ";
                                                        call_funcao = 0;
                                                        call_pdv = 0;
                                                    }
                                                }
                                                else
                                                {
                                                    txtVisorMsgConectorCF.Text = "OPERAÇÃO CANCELADA - [ACRESCIMO/DESCONTO]";
                                                    msg = new msgInfo(fiscal_MSG + " - ITEM JÁ RECEBEU O ACRESCIMO/DESCONTO"); msg.ShowDialog();
                                                    resetLabel();
                                                    txtEntradaDadosConectorCF.Clear();
                                                    conector_find_subFull("1");
                                                    txtEntradaDadosConectorCF.Select();
                                                    produto_barra = "";
                                                    valuesAcresDesc = "    ";
                                                    acresDesc = " ";
                                                    sequenciaItemAle = "    ";
                                                    call_funcao = 0;
                                                    call_pdv = 0;
                                                }
                                            }
                                            else
                                            {
                                                if (Convert.ToInt32(sequenciaItemAle.Trim() == "" ? "0" : sequenciaItemAle.Trim()) <= 0)
                                                {
                                                    sequenciaItemAle = "    ";
                                                }
                                            }

                                            /*
                                            if (Convert.ToDecimal(acresDesc.Replace(",", ".") == " " ? "0" : acresDesc.Replace(",", ".")) > 0)
                                            {
                                                decimal test = conector_verifica_acrescimo_item(sequenciaItem, fiscal_store.Replace("\0", "").Trim(), produto_barra, String.Format("{0:yyyyMMdd}", Convert.ToDateTime(fiscal_data_movimento.Substring(0, 2) + "/" + fiscal_data_movimento.Substring(2, 2) + "/" + String.Format("{0:ddMMyyyy}", DateTime.Now).Substring(4, 2) + fiscal_data_printer.Substring(4, 2))), fiscal_numero_caixa.Replace("\0", "").Trim(), fiscal_Cupom.Replace("\0", "").Trim());

                                                if (test == 0)
                                                {
                                                    if (sequenciaItemAle == "000" || sequenciaItemAle == "    ")
                                                    {
                                                        msg = new msgInfo(fiscal_MSG + " CARO CLIENTE - ITEM NÃO LOCALIZADO"); msg.ShowDialog();
                                                        fiscal_retorno = -1;
                                                        produto_barra = "";
                                                        valuesAcresDesc = "    ";
                                                        acresDesc = " ";
                                                        sequenciaItemAle = "    ";
                                                    }
                                                    else
                                                    {
                                                        fiscal_retorno = conectorECF.Bematech_FI_AcrescimoDescontoItemMFD(sequenciaItemAle, "A", produto_tipo_desconto, String.Format("{0:F2}", Math.Round((Convert.ToDecimal(acresDesc.Replace(",", ".")) * 100)).ToString()));
                                                        conectorECF.Analisa_iRetorno(fiscal_retorno, ref fiscal_MSG);
                                                    }
                                                    call_pdv = 0;
                                                    if (fiscal_retorno == 1)
                                                    {
                                                        if (fiscal_retorno == 1)
                                                        {
                                                            if (File.Exists(folderMFDGrand + "\\grandFullPDV" + ".enc"))
                                                            {//Atualiza Grande Total
                                                                File.Delete(folderMFDGrand + "\\grandFullPDV" + ".enc");
                                                                fiscal_retorno = conectorECF.Bematech_FI_GrandeTotalCriptografado(ref fiscal_GT_Crypt);
                                                                cryptografia.encryptFile(fiscal_GT_Crypt.Trim(), "grandFullPDV", 0);
                                                            }
                                                        }

                                                        txtVisorMsgConectorCF.Text = "CUPOM FISCAL ABERTO";
                                                        this.ltbDetalhesConectorCF.ForeColor = System.Drawing.Color.Yellow;
                                                        ltbDetalhesConectorCF.Text += "                                     ACRESCIMO ITEM => " + sequenciaItemAle + "   " + String.Format("{0:F2}", (Convert.ToDecimal(acresDesc.Replace(",", ".")))) + "% R$ " + String.Format("{0:F2}", (Convert.ToDecimal(valuesAcresDesc.Replace(",", ".")) * Convert.ToDecimal(acresDesc.Replace(",", "."))) / 100).Replace(",", ".") + "\r\n";
                                                        this.ltbDetalhesConectorCF.ForeColor = System.Drawing.Color.White;
                                                        conector_acrescimo_item(fiscal_Cupom, fiscal_store, fiscal_numero_caixa, sequenciaItemAle, acresDesc);
                                                        resetLabel();
                                                        txtEntradaDadosConectorCF.Clear();
                                                        conector_find_subFull("1");
                                                        txtEntradaDadosConectorCF.Select();
                                                        valuesAcresDesc = "    ";
                                                        acresDesc = "0";
                                                        produto_barra = "";
                                                        call_funcao = 0;
                                                        call_pdv = 0;
                                                    }
                                                    else
                                                    {
                                                        txtVisorMsgConectorCF.Text = "OPERAÇÃO CANCELADA - [ACRESCIMO]";
                                                        msg = new msgInfo(fiscal_MSG + " - IMPOSSÍVEL EXECUTAR ESSA FUNÇÃO"); msg.ShowDialog();
                                                        resetLabel();
                                                        txtEntradaDadosConectorCF.Clear();
                                                        conector_find_subFull("1");
                                                        txtEntradaDadosConectorCF.Select();
                                                        produto_barra = "";
                                                        valuesAcresDesc = "    ";
                                                        acresDesc = " ";
                                                        sequenciaItemAle = "    ";
                                                        call_funcao = 0;
                                                        call_pdv = 0;
                                                    }
                                                }
                                                else
                                                {
                                                    txtVisorMsgConectorCF.Text = "OPERAÇÃO CANCELADA - [ACRESCIMO]";
                                                    msg = new msgInfo(fiscal_MSG + " - ITEM JÁ RECEBEU O ACRESCIMO"); msg.ShowDialog();
                                                    resetLabel();
                                                    txtEntradaDadosConectorCF.Clear();
                                                    conector_find_subFull("1");
                                                    txtEntradaDadosConectorCF.Select();
                                                    valuesAcresDesc = "    ";
                                                    acresDesc = " ";
                                                    sequenciaItemAle = "    ";
                                                    call_funcao = 0;
                                                    call_pdv = 0;
                                                }
                                            }
                                            else
                                            {
                                                sequenciaItemAle = "    ";
                                            }*/
                                        }
                                        txtEntradaDadosConectorCF.Select();
                                    }
                                }
                                else if (e.KeyCode == Keys.Escape && call_pdv == 7)
                                {
                                    conector_acao_controleMenu();
                                }
                                #endregion
                                break;
                            case 8:
                                #region
                                if (e.KeyCode == Keys.Enter && call_pdv == 8)
                                {
                                    if (call_pdv == 8)
                                    {

                                        functionECF.conectorECF_DataMovimento(alwaysVariables.ModeloEcf, ref fiscal_data_movimento, ref fiscal_MSG, ref fiscal_retorno, alwaysVariables.ECF_Ligada);
                                        //fiscal_retorno = conectorECF.Bematech_FI_DataMovimento(ref fiscal_data_movimento);

                                        ProcessTabKey(true);

                                        functionECF.conectorECF_fiscal_flag(alwaysVariables.ModeloEcf, ref fiscal_flag, ref fiscal_MSG, ref fiscal_retorno, alwaysVariables.ECF_Ligada);
                                        switch (call_funcao)
                                        {
                                            case 2:
                                                if (alwaysVariables.ECF_Ligada != -6)//Confere se impressora esta desconectada
                                                {
                                                    if (input_tipo_lmf == null)
                                                    {
                                                        if ((txtEntradaDadosConectorCF.Text != "" && txtEntradaDadosConectorCF.Text == "1") || (txtEntradaDadosConectorCF.Text != "" && txtEntradaDadosConectorCF.Text == "2"))
                                                        {
                                                            lblVisorEntradaDadosConectorCF.Text = "TIPO DOWNLOAD MFD [ 0 - DATA   1 - COO ]";

                                                            if (txtEntradaDadosConectorCF.Text == "1")
                                                            {
                                                                input_tipo_lmf = "c";
                                                            }
                                                            else
                                                            {
                                                                input_tipo_lmf = "s";
                                                            }

                                                            txtEntradaDadosConectorCF.Clear();
                                                            txtEntradaDadosConectorCF.Select();

                                                            input_tipo_down = null;
                                                        }
                                                        else
                                                        {
                                                            input_tipo_lmf = null;
                                                        }
                                                    }
                                                    else
                                                        if (input_tipo_down == null)
                                                        {
                                                            if (txtEntradaDadosConectorCF.Text != "")
                                                            {
                                                                txtVisorMsgConectorCF.Text = "GERACAO LEITURA FISCAL - SELECIONE O FILTRO";
                                                                if (txtEntradaDadosConectorCF.Text == "0")
                                                                {
                                                                    lblVisorEntradaDadosConectorCF.Text = "DATA INICIAL - ddMMyyyy";
                                                                    input_tipo_down = "D";
                                                                }
                                                                else if (txtEntradaDadosConectorCF.Text == "1")
                                                                {
                                                                    lblVisorEntradaDadosConectorCF.Text = "INFORME O NUMERO DO CUPOM - 1.o";
                                                                    input_tipo_down = "C";
                                                                }
                                                                else
                                                                {
                                                                    lblVisorEntradaDadosConectorCF.Text = "DATA INICIAL - ddMMyyyy";
                                                                    input_tipo_down = "D";
                                                                }
                                                                txtEntradaDadosConectorCF.Clear();
                                                                txtEntradaDadosConectorCF.CausesValidation = false;
                                                                txtEntradaDadosConectorCF.Select();
                                                            }
                                                            else
                                                            {
                                                                input_tipo_down = null;
                                                                txtEntradaDadosConectorCF.Clear();
                                                                txtEntradaDadosConectorCF.CausesValidation = false;
                                                                txtEntradaDadosConectorCF.Select();
                                                            }
                                                        }
                                                    if (input_coo_first == null)
                                                    {
                                                        if (txtEntradaDadosConectorCF.Text != "")
                                                        {
                                                            input_coo_first = txtEntradaDadosConectorCF.Text;
                                                            txtEntradaDadosConectorCF.Clear();
                                                            txtVisorMsgConectorCF.Text = "GERACAO DA LEITURA FISCAL";
                                                            //this.lblVisorEntradaDadosConectorCF.Location = new System.Drawing.Point(157, 511);
                                                            if (input_tipo_down == "D")
                                                            {
                                                                input_coo_first = input_coo_first.Insert(2, "/");
                                                                input_coo_first = input_coo_first.Insert(5, "/");
                                                                lblVisorEntradaDadosConectorCF.Text = "DATA FINAL - ddMMyyyy";
                                                            }
                                                            else if (input_tipo_down == "C")
                                                            {
                                                                lblVisorEntradaDadosConectorCF.Text = "INFORME O NUMERO DO CUPOM - 2.o";
                                                            }
                                                            txtEntradaDadosConectorCF.CausesValidation = false;
                                                            txtEntradaDadosConectorCF.Select();
                                                        }
                                                        else
                                                        {
                                                            input_coo_first = null;
                                                        }
                                                    }
                                                    if (input_coo_last == null)
                                                    {
                                                        if (txtEntradaDadosConectorCF.Text != "")
                                                        {
                                                            input_coo_last = txtEntradaDadosConectorCF.Text;
                                                            if (input_tipo_down == "D")
                                                            {
                                                                try
                                                                {

                                                                    input_coo_last = input_coo_last.Insert(2, "/");
                                                                    input_coo_last = input_coo_last.Insert(5, "/");

                                                                }
                                                                catch (Exception)
                                                                {


                                                                }
                                                            }
                                                            txtEntradaDadosConectorCF.Clear();
                                                            //this.lblVisorEntradaDadosConectorCF.Location = new System.Drawing.Point(157, 511);
                                                            lblVisorEntradaDadosConectorCF.Text = "[ENTER] - CONFIRMA A GERACAO DA LEITURA";
                                                            txtEntradaDadosConectorCF.CausesValidation = false;
                                                            txtEntradaDadosConectorCF.Select();
                                                        }
                                                        else
                                                        {
                                                            input_coo_last = null;
                                                        }
                                                    }
                                                    else if (input_tipo_down != null && input_coo_last != null && input_coo_first != null && input_tipo_lmf != null)
                                                    //else  if (input_df.Length == 10 && input_di.Length == 10)
                                                    {
                                                        if (input_tipo_down == "D")
                                                        {
                                                            functionECF.conectorECF_LeituraMemoriaFiscalData(alwaysVariables.ModeloEcf, input_coo_first, input_coo_last, input_tipo_lmf, ref fiscal_MSG, ref fiscal_retorno, alwaysVariables.ECF_Ligada);
                                                            //fiscal_retorno = conectorECF.Bematech_FI_LeituraMemoriaFiscalDataMFD(input_coo_first, input_coo_last, "c");
                                                        }
                                                        else
                                                        {
                                                            functionECF.conectorECF_LeituraMemoriaFiscalData(alwaysVariables.ModeloEcf, input_coo_first, input_coo_last, input_tipo_lmf, ref fiscal_MSG, ref fiscal_retorno, alwaysVariables.ECF_Ligada);
                                                            //fiscal_retorno = conectorECF.Bematech_FI_LeituraMemoriaFiscalReducaoMFD(input_coo_first, input_coo_last, "c");
                                                        }

                                                        functionECF.conectorECF_Analisa_RetornoImpressora(alwaysVariables.ModeloEcf, ref ACK, ref ST1, ref ST2, ref ST3, ref fiscal_MSG);
                                                        conector_retorno_ack();
                                                        txtVisorMsgConectorCF.Text = "MENU FISCAL";
                                                        lblVisorEntradaDadosConectorCF.Text = "ENTRADA DE DADOS";
                                                        conector_reset_lmfc();
                                                        call_funcao = 0;
                                                        txtEntradaDadosConectorCF.CausesValidation = true;
                                                        txtEntradaDadosConectorCF.Select();
                                                    }
                                                    else
                                                    {
                                                        txtVisorMsgConectorCF.Text = "TENTATIVA INVÁLIDA - REPITA A OPERAÇÃO";
                                                        conector_reset_lmfc();
                                                        call_funcao = 0;
                                                        txtEntradaDadosConectorCF.CausesValidation = true;
                                                        txtEntradaDadosConectorCF.Select();
                                                    }
                                                }
                                                break;
                                            case 3:
                                                if (alwaysVariables.ECF_Ligada != -6)//Confere se impressora esta desconectada
                                                {
                                                    if (input_tipo_down == null)
                                                    {
                                                        if (txtEntradaDadosConectorCF.Text != "")
                                                        {
                                                            txtVisorMsgConectorCF.Text = "GERACAO LMFS - SELECIONE O FILTRO";
                                                            if (txtEntradaDadosConectorCF.Text == "0")
                                                            {
                                                                lblVisorEntradaDadosConectorCF.Text = "DATA INICIAL - ddMMyyyy";
                                                                input_tipo_down = "D";
                                                            }
                                                            else if (txtEntradaDadosConectorCF.Text == "1")
                                                            {
                                                                lblVisorEntradaDadosConectorCF.Text = "INFORME O NUMERO DO CUPOM - 1.o";
                                                                input_tipo_down = "C";
                                                            }
                                                            else
                                                            {
                                                                lblVisorEntradaDadosConectorCF.Text = "DATA INICIAL - ddMMyyyy";
                                                                input_tipo_down = "D";
                                                            }
                                                            txtEntradaDadosConectorCF.Clear();
                                                            txtEntradaDadosConectorCF.CausesValidation = false;
                                                            txtEntradaDadosConectorCF.Select();
                                                        }
                                                        else
                                                        {
                                                            input_tipo_down = null;
                                                            txtEntradaDadosConectorCF.Clear();
                                                            txtEntradaDadosConectorCF.CausesValidation = false;
                                                            txtEntradaDadosConectorCF.Select();
                                                        }
                                                    }
                                                    if (input_coo_first == null)
                                                    {
                                                        if (txtEntradaDadosConectorCF.Text != "")
                                                        {
                                                            input_coo_first = txtEntradaDadosConectorCF.Text;
                                                            txtEntradaDadosConectorCF.Clear();
                                                            txtVisorMsgConectorCF.Text = "GERACAO LMFC";
                                                            //this.lblVisorEntradaDadosConectorCF.Location = new System.Drawing.Point(157, 511);
                                                            if (input_tipo_down == "D")
                                                            {
                                                                input_coo_first = input_coo_first.Insert(2, "/");
                                                                input_coo_first = input_coo_first.Insert(5, "/");
                                                                lblVisorEntradaDadosConectorCF.Text = "DATA FINAL - ddMMyyyy";
                                                            }
                                                            else if (input_tipo_down == "C")
                                                            {
                                                                lblVisorEntradaDadosConectorCF.Text = "INFORME O NUMERO DO CUPOM - 2.o";
                                                            }
                                                            txtEntradaDadosConectorCF.CausesValidation = false;
                                                            txtEntradaDadosConectorCF.Select();
                                                        }
                                                        else
                                                        {
                                                            input_coo_first = null;
                                                        }
                                                    }
                                                    if (input_coo_last == null)
                                                    {
                                                        if (txtEntradaDadosConectorCF.Text != "")
                                                        {
                                                            input_coo_last = txtEntradaDadosConectorCF.Text;
                                                            if (input_tipo_down == "D")
                                                            {
                                                                input_coo_last = input_coo_last.Insert(2, "/");
                                                                input_coo_last = input_coo_last.Insert(5, "/");
                                                            }
                                                            txtEntradaDadosConectorCF.Clear();
                                                            //this.lblVisorEntradaDadosConectorCF.Location = new System.Drawing.Point(157, 511);
                                                            lblVisorEntradaDadosConectorCF.Text = "[ENTER] - CONFIRMA A GERACAO DO LMCS";
                                                            txtEntradaDadosConectorCF.CausesValidation = false;
                                                            txtEntradaDadosConectorCF.Select();
                                                        }
                                                        else
                                                        {
                                                            input_coo_last = null;
                                                        }
                                                    }
                                                    else if (input_tipo_down != null && input_coo_last != null && input_coo_first != null)
                                                    {
                                                        if (input_tipo_down == "D")
                                                        {
                                                            functionECF.conectorECF_LeituraMemoriaFiscalData(alwaysVariables.ModeloEcf, input_coo_first, input_coo_last, "s", ref fiscal_MSG, ref fiscal_retorno, alwaysVariables.ECF_Ligada);
                                                            //fiscal_retorno = conectorECF.Bematech_FI_LeituraMemoriaFiscalDataMFD(input_coo_first, input_coo_last, "s");
                                                        }
                                                        else
                                                        {
                                                            functionECF.conectorECF_LeituraMemoriaFiscalData(alwaysVariables.ModeloEcf, input_coo_first, input_coo_last, "s", ref fiscal_MSG, ref fiscal_retorno, alwaysVariables.ECF_Ligada);
                                                            //fiscal_retorno = conectorECF.Bematech_FI_LeituraMemoriaFiscalReducaoMFD(input_coo_first, input_coo_last, "s");
                                                        }

                                                        functionECF.conectorECF_Analisa_RetornoImpressora(alwaysVariables.ModeloEcf, ref ACK, ref ST1, ref ST2, ref ST3, ref fiscal_MSG);
                                                        conector_retorno_ack();
                                                        txtVisorMsgConectorCF.Text = "MENU FISCAL";
                                                        lblVisorEntradaDadosConectorCF.Text = "ENTRADA DE DADOS";
                                                        conector_reset_lmfc();
                                                        call_funcao = 0;
                                                        txtEntradaDadosConectorCF.CausesValidation = true;
                                                        txtEntradaDadosConectorCF.Select();
                                                    }
                                                    else
                                                    {
                                                        txtVisorMsgConectorCF.Text = "TENTATIVA INVÁLIDA - REPITA A OPERAÇÃO";
                                                        conector_reset_lmfc();
                                                        call_funcao = 0;
                                                        txtEntradaDadosConectorCF.CausesValidation = true;
                                                        txtEntradaDadosConectorCF.Select();
                                                    }
                                                }
                                                break;
                                            case 4:
                                                if (keys_valida_private == "                                                                                                                                                                                                                                                                " || keys_valida_publica == "                                                                                                                                                                                                                                                                ")
                                                {
                                                    if (txtEntradaDadosConectorCF.Text == "")
                                                    {
                                                        //this.lblVisorEntradaDadosConectorCF.Location = new System.Drawing.Point(157, 511);
                                                        lblVisorEntradaDadosConectorCF.Text = "TIPO DOWNLOAD MFD [ 0 - DATA   1 - COO ]";
                                                        if (alwaysVariables.KeysPrivate.Length == 255 && alwaysVariables.KeysPublica.Length == 255)
                                                        {
                                                            keys_valida_private = alwaysVariables.KeysPrivate;
                                                            keys_valida_publica = alwaysVariables.KeysPublica;
                                                        }
                                                        else
                                                        {
                                                            //fiscal_retorno = conectorECF.genkkey(ref keys_valida_publica, ref keys_valida_private);
                                                            functionECF.conectorECF_genkey(alwaysVariables.ModeloEcf, ref keys_valida_publica, ref keys_valida_private, fiscal_retorno, ref fiscal_MSG);
                                                        }
                                                        if (fiscal_retorno == 1)
                                                        {
                                                            txtEntradaDadosConectorCF.Clear();
                                                            txtVisorMsgConectorCF.Text = "KEY PRIVADA E KEY PUBLICA OK!";
                                                            txtEntradaDadosConectorCF.CausesValidation = false;
                                                            txtEntradaDadosConectorCF.Select();
                                                        }
                                                        else
                                                        {
                                                            txtVisorMsgConectorCF.Text = "KEYS INVALID...!";
                                                            functionECF.conectorECF_Analisa_RetornoImpressora(alwaysVariables.ModeloEcf, ref ACK, ref ST1, ref ST2, ref ST3, ref fiscal_MSG);
                                                            conector_retorno_ack();
                                                            conector_reset_MFD();
                                                        }
                                                    }
                                                    else
                                                    {
                                                        txtEntradaDadosConectorCF.Clear();
                                                        txtEntradaDadosConectorCF.Select();
                                                    }
                                                }

                                                if (input_tipo_down == null)
                                                {
                                                    if (txtEntradaDadosConectorCF.Text != "")
                                                    {
                                                        txtVisorMsgConectorCF.Text = "ESPELHO MFD - SELECIONE O FILTRO";
                                                        //this.lblVisorEntradaDadosConectorCF.Location = new System.Drawing.Point(175, 511);
                                                        if (txtEntradaDadosConectorCF.Text == "0")
                                                        {
                                                            lblVisorEntradaDadosConectorCF.Text = "DATA INICIAL - ddMMyyyy";
                                                            input_tipo_down = "D";
                                                        }
                                                        else if (txtEntradaDadosConectorCF.Text == "1")
                                                        {
                                                            lblVisorEntradaDadosConectorCF.Text = "INFORME O NUMERO DO CUPOM - 1.o";
                                                            input_tipo_down = "C";
                                                        }
                                                        else
                                                        {
                                                            lblVisorEntradaDadosConectorCF.Text = "DATA INICIAL - ddMMyyyy";
                                                            input_tipo_down = "D";
                                                        }
                                                        txtEntradaDadosConectorCF.Clear();
                                                        txtEntradaDadosConectorCF.CausesValidation = false;
                                                        txtEntradaDadosConectorCF.Select();
                                                    }
                                                    else
                                                    {
                                                        input_tipo_down = null;
                                                    }
                                                }
                                                if (input_coo_first == null)
                                                {
                                                    if (txtEntradaDadosConectorCF.Text != "")
                                                    {
                                                        input_coo_first = txtEntradaDadosConectorCF.Text;
                                                        txtEntradaDadosConectorCF.Clear();
                                                        txtVisorMsgConectorCF.Text = "GERAÇÃO ESPELHO MFD";
                                                        if (input_tipo_down == "D")
                                                        {
                                                            input_coo_first = input_coo_first.Insert(2, "/");
                                                            input_coo_first = input_coo_first.Insert(5, "/");
                                                            lblVisorEntradaDadosConectorCF.Text = "DATA FINAL - ddMMyyyy";
                                                        }
                                                        else if (input_tipo_down == "C")
                                                        {
                                                            lblVisorEntradaDadosConectorCF.Text = "INFORME O NUMERO DO CUPOM - 2.o";
                                                        }
                                                        txtEntradaDadosConectorCF.CausesValidation = false;
                                                        txtEntradaDadosConectorCF.Select();
                                                    }
                                                    else
                                                    {
                                                        input_coo_first = null;
                                                    }
                                                }
                                                if (input_coo_last == null)
                                                {
                                                    if (txtEntradaDadosConectorCF.Text != "")
                                                    {
                                                        input_coo_last = txtEntradaDadosConectorCF.Text;
                                                        if (input_tipo_down == "D")
                                                        {
                                                            input_coo_last = input_coo_last.Insert(2, "/");
                                                            input_coo_last = input_coo_last.Insert(5, "/");
                                                        }
                                                        txtEntradaDadosConectorCF.Clear();
                                                        //this.lblVisorEntradaDadosConectorCF.Location = new System.Drawing.Point(157, 511);
                                                        lblVisorEntradaDadosConectorCF.Text = "[ENTER] - CONFIRMA A ASSINATURA DO ARQUIVO";
                                                        txtEntradaDadosConectorCF.CausesValidation = false;
                                                        txtEntradaDadosConectorCF.Select();
                                                    }
                                                    else
                                                    {
                                                        input_coo_last = null;
                                                    }
                                                }
                                                else if (input_tipo_down != null && keys_valida_publica != null && keys_valida_private != null && input_coo_last != null && input_coo_first != null)
                                                {
                                                    //Arq. MF
                                                    functionECF.conectorECF_ArquivoMFD(alwaysVariables.ModeloEcf, "", input_coo_first, input_coo_last, input_tipo_down, banco_operado, Convert.ToInt32(input_tipo_geracao), "BE011B465E262EE8FE5AC862A0EDFDC2AA61FDB4C8B14D1C86C8258835DB57B18E065EF0FA533A894C79E6A172EB52ACD81A47967263FBA133B558796B500E3B82011B6A2228A91EA04A125E16F2CE5C2E7DD13A32EE39B386F5493AA35AC248582C7309B5F75A4105045DC39C5C2696797280467457663D1D79A00B52A609EB", "E88EA74E25FAFBF91E28456B39AA0208F9A669D2214A676B9CB87E62FB5F414EFFB8213A7FDB731F8C06BE286E57FE7CB9D2AFC7CF3DA082F6E982F3C72B21F7D128564C824F3C96B3ED26BAD26534FC88646A6C9AAD43B83AF56F243D514B98FD9CF1A1C3A155F0460E8CF95E66A4F1FFC773C60405AD321C5898BE5C1B1AAD", 0, ref fiscal_MSG, ref fiscal_retorno, alwaysVariables.ECF_Ligada);
                                                    //Arq. MFD Arq. 1704
                                                    functionECF.conectorECF_ArquivoMFD(alwaysVariables.ModeloEcf, "", input_coo_first, input_coo_last, input_tipo_down, banco_operado, Convert.ToInt32(input_tipo_geracao), "BE011B465E262EE8FE5AC862A0EDFDC2AA61FDB4C8B14D1C86C8258835DB57B18E065EF0FA533A894C79E6A172EB52ACD81A47967263FBA133B558796B500E3B82011B6A2228A91EA04A125E16F2CE5C2E7DD13A32EE39B386F5493AA35AC248582C7309B5F75A4105045DC39C5C2696797280467457663D1D79A00B52A609EB", "E88EA74E25FAFBF91E28456B39AA0208F9A669D2214A676B9CB87E62FB5F414EFFB8213A7FDB731F8C06BE286E57FE7CB9D2AFC7CF3DA082F6E982F3C72B21F7D128564C824F3C96B3ED26BAD26534FC88646A6C9AAD43B83AF56F243D514B98FD9CF1A1C3A155F0460E8CF95E66A4F1FFC773C60405AD321C5898BE5C1B1AAD", 1, ref fiscal_MSG, ref fiscal_retorno, alwaysVariables.ECF_Ligada);
                                                    //Arq. ESPELHO
                                                    functionECF.conectorECF_EspelhoMFD(alwaysVariables.ModeloEcf, folderMFD + "\\espelho-" + String.Format("{0:yyyyMMdd-HHmmss}", DateTime.Now) + ".txt", input_coo_first, input_coo_last, input_tipo_down, lbOperadorConectorCF.Text, "BE011B465E262EE8FE5AC862A0EDFDC2AA61FDB4C8B14D1C86C8258835DB57B18E065EF0FA533A894C79E6A172EB52ACD81A47967263FBA133B558796B500E3B82011B6A2228A91EA04A125E16F2CE5C2E7DD13A32EE39B386F5493AA35AC248582C7309B5F75A4105045DC39C5C2696797280467457663D1D79A00B52A609EB", "E88EA74E25FAFBF91E28456B39AA0208F9A669D2214A676B9CB87E62FB5F414EFFB8213A7FDB731F8C06BE286E57FE7CB9D2AFC7CF3DA082F6E982F3C72B21F7D128564C824F3C96B3ED26BAD26534FC88646A6C9AAD43B83AF56F243D514B98FD9CF1A1C3A155F0460E8CF95E66A4F1FFC773C60405AD321C5898BE5C1B1AAD", ref fiscal_MSG, ref fiscal_retorno, alwaysVariables.ECF_Ligada);

                                                    conector_reset_MFD();
                                                    msgInfo msg = new msgInfo(1, "Caro Usuário: Arquivo gerado, local: " + folderMFD + "\\espelho-" + String.Format("{0:yyyyMMdd-HHmmss}", DateTime.Now) + ".txt"); msg.ShowDialog();
                                                    call_funcao = 0;
                                                    txtVisorMsgConectorCF.Text = "MENU FISCAL";
                                                    //this.lblVisorEntradaDadosConectorCF.Location = new System.Drawing.Point(284, 511);
                                                    lblVisorEntradaDadosConectorCF.Text = "ENTRADA DE DADOS";
                                                    txtEntradaDadosConectorCF.CausesValidation = true;
                                                    txtEntradaDadosConectorCF.Select();
                                                }
                                                break;
                                            case 5:
                                                if (keys_valida_private == "                                                                                                                                                                                                                                                                " || keys_valida_publica == "                                                                                                                                                                                                                                                                ")
                                                {
                                                    if (txtEntradaDadosConectorCF.Text == "")
                                                    {
                                                        //this.lblVisorEntradaDadosConectorCF.Location = new System.Drawing.Point(157, 511);
                                                        lblVisorEntradaDadosConectorCF.Text = "TIPO DOWNLOAD MFD [ 0 - DATA   1 - COO ]";
                                                        //keys_valida_private = alwaysVariables.KeysPrivate;
                                                        //keys_valida_publica = alwaysVariables.KeysPublica;
                                                        if (alwaysVariables.KeysPrivate.Length == 256 && alwaysVariables.KeysPublica.Length == 256)
                                                        {//Pego a catalogada
                                                            keys_valida_private = alwaysVariables.KeysPrivate;
                                                            keys_valida_publica = alwaysVariables.KeysPublica;
                                                        }
                                                        else
                                                        {//Gero a nova caso nao existe
                                                            //fiscal_retorno = conectorECF.genkkey(ref keys_valida_publica, ref keys_valida_private);
                                                            functionECF.conectorECF_genkey(alwaysVariables.ModeloEcf, ref keys_valida_publica, ref keys_valida_private, fiscal_retorno, ref fiscal_MSG);
                                                        }
                                                        if (fiscal_retorno == 1)
                                                        {
                                                            txtEntradaDadosConectorCF.Clear();
                                                            txtVisorMsgConectorCF.Text = "KEY PRIVADA E KEY PUBLICA OK!";
                                                            txtEntradaDadosConectorCF.CausesValidation = false;
                                                            txtEntradaDadosConectorCF.Select();
                                                        }
                                                        else
                                                        {
                                                            txtVisorMsgConectorCF.Text = "KEYS INVALID...!";
                                                            conector_reset_MFD();
                                                        }

                                                        if (fiscal_retorno == 1)
                                                        {
                                                            txtEntradaDadosConectorCF.Clear();
                                                            txtVisorMsgConectorCF.Text = "KEY PRIVADA E KEY PUBLICA OK!";
                                                            txtEntradaDadosConectorCF.CausesValidation = false;
                                                            txtEntradaDadosConectorCF.Select();
                                                        }
                                                        else
                                                        {
                                                            txtVisorMsgConectorCF.Text = "KEYS INVALID...!";
                                                            conector_reset_MFD();
                                                        }
                                                    }
                                                    else
                                                    {
                                                        txtEntradaDadosConectorCF.Clear();
                                                        txtEntradaDadosConectorCF.Select();
                                                    }
                                                }
                                                if (input_tipo_down == null)
                                                {
                                                    if (txtEntradaDadosConectorCF.Text != "")
                                                    {
                                                        txtVisorMsgConectorCF.Text = "SELECIONE O FILTRO";
                                                        //this.lblVisorEntradaDadosConectorCF.Location = new System.Drawing.Point(157, 511);
                                                        if (txtEntradaDadosConectorCF.Text == "0")
                                                        {
                                                            lblVisorEntradaDadosConectorCF.Text = "DATA INICIAL - ddMMyy";
                                                            input_tipo_down = "D";
                                                        }
                                                        else if (txtEntradaDadosConectorCF.Text == "1")
                                                        {
                                                            lblVisorEntradaDadosConectorCF.Text = "INFORME O NUMERO DO CUPOM - 1.o";
                                                            input_tipo_down = "C";
                                                        }
                                                        else
                                                        {
                                                            lblVisorEntradaDadosConectorCF.Text = "DATA INICIAL - ddMMyy";
                                                            input_tipo_down = "D";
                                                        }
                                                        txtEntradaDadosConectorCF.Clear();
                                                        txtEntradaDadosConectorCF.CausesValidation = false;
                                                        txtEntradaDadosConectorCF.Select();
                                                    }
                                                    else
                                                    {
                                                        input_tipo_down = null;
                                                    }
                                                }
                                                if (input_coo_first == null)
                                                {
                                                    if (txtEntradaDadosConectorCF.Text != "")
                                                    {
                                                        input_coo_first = txtEntradaDadosConectorCF.Text;
                                                        txtEntradaDadosConectorCF.Clear();
                                                        txtVisorMsgConectorCF.Text = "ARQUIVO MFD";
                                                        //this.lblVisorEntradaDadosConectorCF.Location = new System.Drawing.Point(157, 511);
                                                        /*if (input_tipo_down == "D")
                                                        {
                                                            try
                                                            {
                                                                input_coo_first = input_coo_first.Insert(2, "/");
                                                                input_coo_first = input_coo_first.Insert(5, "/");
                                                                lblVisorEntradaDadosConectorCF.Text = "DATA FINAL - ddMMyyyy";
                                                            }
                                                            catch (Exception)
                                                            {
                                                            }
                                                        }*/
                                                        if (input_tipo_down == "D")
                                                        {
                                                            input_tipo_geracao = "1";
                                                            input_coo_first = input_coo_first;
                                                            input_coo_first = input_coo_first;
                                                            lblVisorEntradaDadosConectorCF.Text = "DATA FINAL - ddMMyy";
                                                        }
                                                        else if (input_tipo_down == "C")
                                                        {
                                                            input_tipo_geracao = "2";
                                                            lblVisorEntradaDadosConectorCF.Text = "INFORME O NUMERO DO CUPOM - 2.o";
                                                        }
                                                        txtEntradaDadosConectorCF.CausesValidation = false;
                                                        txtEntradaDadosConectorCF.Select();
                                                    }
                                                    else
                                                    {
                                                        input_coo_first = null;
                                                    }
                                                }
                                                if (input_coo_last == null)
                                                {
                                                    if (txtEntradaDadosConectorCF.Text != "")
                                                    {
                                                        input_coo_last = txtEntradaDadosConectorCF.Text;
                                                        if (input_tipo_down == "D")
                                                        {
                                                            try
                                                            {
                                                                input_coo_last = input_coo_last.Insert(2, "/");
                                                                input_coo_last = input_coo_last.Insert(5, "/");
                                                            }
                                                            catch (Exception)
                                                            {

                                                            }
                                                        }
                                                        txtEntradaDadosConectorCF.Clear();
                                                        txtVisorMsgConectorCF.Text = "ARQUIVO BINARIO";
                                                        //this.lblVisorEntradaDadosConectorCF.Location = new System.Drawing.Point(157, 511);
                                                        //lblVisorEntradaDadosConectorCF.Text = "TIPO DE GERAÇÃO [0 - MF, 1 - MFD, 2 - TDM, 3 - RZ, 4 - RFD]";
                                                        //lblVisorEntradaDadosConectorCF.Text = "TIPO DE GERAÇÃO [0 - TOTAL, 1 - DATA, 2 - COMPROVANTE VENDA]";
                                                        txtEntradaDadosConectorCF.CausesValidation = false;
                                                        txtEntradaDadosConectorCF.Select();
                                                    }
                                                    else
                                                    {
                                                        input_coo_last = null;
                                                    }
                                                }
                                                if (input_tipo_geracao == null)
                                                {
                                                    if (txtEntradaDadosConectorCF.Text != "")
                                                    {
                                                        input_tipo_geracao = txtEntradaDadosConectorCF.Text;
                                                        txtEntradaDadosConectorCF.Clear();
                                                        txtVisorMsgConectorCF.Text = "ARQUIVO BINARIO";
                                                        //this.lblVisorEntradaDadosConectorCF.Location = new System.Drawing.Point(157, 511);
                                                        lblVisorEntradaDadosConectorCF.Text = "FORMATO ARQUIVO - [1 UNICO   0 MULTIPLOS]";
                                                        txtEntradaDadosConectorCF.CausesValidation = false;
                                                        txtEntradaDadosConectorCF.Select();
                                                    }
                                                    else
                                                    {
                                                        input_tipo_geracao = null;
                                                    }
                                                }
                                                if (input_unico_arquivo == null)
                                                {
                                                    if (txtEntradaDadosConectorCF.Text != "")
                                                    {
                                                        //input_unico_arquivo = txtEntradaDadosConectorCF.Text;
                                                        input_unico_arquivo = "1";
                                                        txtEntradaDadosConectorCF.Clear();
                                                        txtVisorMsgConectorCF.Text = "ARQUIVO BINARIO";
                                                        //this.lblVisorEntradaDadosConectorCF.Location = new System.Drawing.Point(157, 511);
                                                        lblVisorEntradaDadosConectorCF.Text = "[ ENTER ] - CONFIRMA A GERAÇÃO DO ARQUIVO";
                                                        txtEntradaDadosConectorCF.CausesValidation = false;
                                                        txtEntradaDadosConectorCF.Select();
                                                    }
                                                    else
                                                    {
                                                        input_unico_arquivo = null;
                                                    }
                                                }
                                                else if (input_unico_arquivo != null && input_tipo_geracao != null && input_tipo_down != null && keys_valida_publica != null && keys_valida_private != null && input_coo_last != null && input_coo_first != null)
                                                {
                                                    string registroEAD = new string('\x20', 256);
                                                    //chama a função com o parâmetro
                                                    /*functionECF.conectorPDV_DownloadMFD(alwaysVariables.ModeloEcf, "C:\\DOWNLOAD1.MFD", input_tipo_geracao, input_coo_first, input_coo_last, "1", ref fiscal_MSG, ref fiscal_retorno, alwaysVariables.ECF_Ligada);
                                                    */
                                                    functionECF.conectorECF_ArquivoMFD(alwaysVariables.ModeloEcf, "", input_coo_first, input_coo_last, input_tipo_down, banco_operado, Convert.ToInt32(input_tipo_geracao), "BE011B465E262EE8FE5AC862A0EDFDC2AA61FDB4C8B14D1C86C8258835DB57B18E065EF0FA533A894C79E6A172EB52ACD81A47967263FBA133B558796B500E3B82011B6A2228A91EA04A125E16F2CE5C2E7DD13A32EE39B386F5493AA35AC248582C7309B5F75A4105045DC39C5C2696797280467457663D1D79A00B52A609EB", "E88EA74E25FAFBF91E28456B39AA0208F9A669D2214A676B9CB87E62FB5F414EFFB8213A7FDB731F8C06BE286E57FE7CB9D2AFC7CF3DA082F6E982F3C72B21F7D128564C824F3C96B3ED26BAD26534FC88646A6C9AAD43B83AF56F243D514B98FD9CF1A1C3A155F0460E8CF95E66A4F1FFC773C60405AD321C5898BE5C1B1AAD", 1, ref fiscal_MSG, ref fiscal_retorno, alwaysVariables.ECF_Ligada);

                                                    if (!File.Exists(@"C:\conector\MFD\Download.MF"))
                                                    {
                                                        functionECF.conectorPDV_DownloadMF(alwaysVariables.ModeloEcf, "", ref fiscal_MSG, ref fiscal_retorno, alwaysVariables.ECF_Ligada);
                                                    }
                                                    functionECF.conectorECF_GenerateEAD(alwaysVariables.ModeloEcf, @"C:\conector\MFD\Download.MF", "BE011B465E262EE8FE5AC862A0EDFDC2AA61FDB4C8B14D1C86C8258835DB57B18E065EF0FA533A894C79E6A172EB52ACD81A47967263FBA133B558796B500E3B82011B6A2228A91EA04A125E16F2CE5C2E7DD13A32EE39B386F5493AA35AC248582C7309B5F75A4105045DC39C5C2696797280467457663D1D79A00B52A609EB", "E88EA74E25FAFBF91E28456B39AA0208F9A669D2214A676B9CB87E62FB5F414EFFB8213A7FDB731F8C06BE286E57FE7CB9D2AFC7CF3DA082F6E982F3C72B21F7D128564C824F3C96B3ED26BAD26534FC88646A6C9AAD43B83AF56F243D514B98FD9CF1A1C3A155F0460E8CF95E66A4F1FFC773C60405AD321C5898BE5C1B1AAD", ref registroEAD, fiscal_retorno, ref fiscal_MSG);
                                                    StreamWriter sw1 = new StreamWriter(@"C:\conector\MFD\DownloadMF.txt", true, Encoding.ASCII);

                                                    if (registroEAD != "")
                                                    {
                                                        sw1.Write("EAD" + registroEAD);
                                                        msgInfo msg = new msgInfo(1, "Caro Usuário: Arquivo gerado, local: " + @"C:\conector\MFD\DownloadMF.txt"); msg.ShowDialog();
                                                    }
                                                    else
                                                    {
                                                        msgInfo msg1 = new msgInfo(1, "ARQUIVO NÃO GERADO."); msg1.ShowDialog();
                                                    }
                                                    sw1.Close();

                                                    registroEAD = new string('\x20', 256);

                                                    functionECF.conectorPDV_DownloadMFD(alwaysVariables.ModeloEcf, @"C:\conector\MFD\DOWNLOAD.MFD", input_tipo_geracao, input_coo_first, input_coo_last, "1", ref fiscal_MSG, ref fiscal_retorno, alwaysVariables.ECF_Ligada);
                                                    functionECF.conectorECF_GenerateEAD(alwaysVariables.ModeloEcf, @"C:\conector\MFD\DOWNLOAD.MFD", "BE011B465E262EE8FE5AC862A0EDFDC2AA61FDB4C8B14D1C86C8258835DB57B18E065EF0FA533A894C79E6A172EB52ACD81A47967263FBA133B558796B500E3B82011B6A2228A91EA04A125E16F2CE5C2E7DD13A32EE39B386F5493AA35AC248582C7309B5F75A4105045DC39C5C2696797280467457663D1D79A00B52A609EB", "E88EA74E25FAFBF91E28456B39AA0208F9A669D2214A676B9CB87E62FB5F414EFFB8213A7FDB731F8C06BE286E57FE7CB9D2AFC7CF3DA082F6E982F3C72B21F7D128564C824F3C96B3ED26BAD26534FC88646A6C9AAD43B83AF56F243D514B98FD9CF1A1C3A155F0460E8CF95E66A4F1FFC773C60405AD321C5898BE5C1B1AAD", ref registroEAD, fiscal_retorno, ref fiscal_MSG);
                                                    //fiscal_retorno = conectorECF.Bematech_FI_ArquivoMFD("", input_coo_first, input_coo_last, input_tipo_down, banco_operado, Convert.ToDouble(input_tipo_geracao), "BE011B465E262EE8FE5AC862A0EDFDC2AA61FDB4C8B14D1C86C8258835DB57B18E065EF0FA533A894C79E6A172EB52ACD81A47967263FBA133B558796B500E3B82011B6A2228A91EA04A125E16F2CE5C2E7DD13A32EE39B386F5493AA35AC248582C7309B5F75A4105045DC39C5C2696797280467457663D1D79A00B52A609EB", "E88EA74E25FAFBF91E28456B39AA0208F9A669D2214A676B9CB87E62FB5F414EFFB8213A7FDB731F8C06BE286E57FE7CB9D2AFC7CF3DA082F6E982F3C72B21F7D128564C824F3C96B3ED26BAD26534FC88646A6C9AAD43B83AF56F243D514B98FD9CF1A1C3A155F0460E8CF95E66A4F1FFC773C60405AD321C5898BE5C1B1AAD", 1);

                                                    StreamWriter sw = new StreamWriter(@"C:\conector\MFD\DownloadMFD.txt", true, Encoding.ASCII);

                                                    if (registroEAD != "")
                                                    {
                                                        sw.Write("EAD" + registroEAD);
                                                        msgInfo msg = new msgInfo(1, "Caro Usuário: Arquivo gerado, local: " + @"C:\conector\MFD\DownloadMFD.txt"); msg.ShowDialog();
                                                    }
                                                    else
                                                    {
                                                        msgInfo msg1 = new msgInfo(1, "ARQUIVO NÃO GERADO."); msg1.ShowDialog();
                                                    }
                                                    sw.Close();
                                                    conector_reset_MFD();
                                                    call_funcao = 0;
                                                    txtVisorMsgConectorCF.Text = "MENU FISCAL";
                                                    lblVisorEntradaDadosConectorCF.Text = "ENTRADA DE DADOS";
                                                    txtEntradaDadosConectorCF.CausesValidation = true;
                                                    txtEntradaDadosConectorCF.Select();
                                                }
                                                break;
                                            case 6:
                                                if (auxConsistencia == 0)
                                                {
                                                    string[] vetor = new string[1] { "P2" };
                                                    string[,] recarga; //Matriz Bidimencionada
                                                    if (File.Exists(caminho))
                                                    {
                                                        StreamWriter sw = new StreamWriter(caminho, true, Encoding.ASCII);

                                                        //################################################################Instrução Banco
                                                        auxConsistencia = 0;
                                                        countField = 0;
                                                        countRows = 0;

                                                        for (int m = 0; m < vetor.Length; m++)
                                                        {
                                                            if (vetor[m] != "#")
                                                            {
                                                                try
                                                                {
                                                                    auxConsistencia = 0;
                                                                    title = banco.abreConexao();
                                                                    banco.startTransaction("conectorPDV_PAFECF_Tabela");
                                                                    banco.addParametro("varType", vetor[m]);
                                                                    banco.addParametro("store", alwaysVariables.Store);
                                                                    banco.procedimentoSet();

                                                                }
                                                                catch (Exception erro) { auxConsistencia = 1; }
                                                                finally
                                                                {
                                                                    if (auxConsistencia == 0)
                                                                    {
                                                                        countField = banco.retornaSet().Tables[0].Columns.Count;
                                                                        countRows = banco.retornaSet().Tables[0].DefaultView.Count;
                                                                        if (countRows > 0)
                                                                        {
                                                                            recarga = new string[countRows, countField];
                                                                            for (int i = 0; i < countRows; i++)//Linha
                                                                            {
                                                                                for (int j = 0; j < countField; j++) //Coluna
                                                                                {
                                                                                    recarga[i, j] = Convert.ToString(banco.retornaSet().Tables[0].Rows[i][j]);
                                                                                }
                                                                                switch (vetor[m])
                                                                                {
                                                                                    case "P2":
                                                                                        sw.Write(export.registro_tipo_p2(vetor[m], recarga[i, 0], recarga[i, 1], recarga[i, 2], recarga[i, 3], recarga[i, 4], recarga[i, 5], recarga[i, 6], recarga[i, 7], recarga[i, 8]) + "\r\n");
                                                                                        //conector_update_lineMD5_P2(export.registro_tipo_p2(vetor[m], recarga[i, 0], recarga[i, 1], recarga[i, 2], recarga[i, 3], recarga[i, 4], recarga[i, 5], recarga[i, 6], recarga[i, 7], recarga[i, 8]), recarga[i, 1]);
                                                                                        break;
                                                                                }
                                                                            }
                                                                            banco.fechaConexao(); if (title != "") { this.txtTitleCupomFiscalConectorCF.Invoke((MethodInvoker)delegate { txtTitleCupomFiscalConectorCF.Text = title; }); }
                                                                            for (int i = 0; i < recarga.GetLength(0) + 1; i++)//Linha
                                                                            {   //20150520
                                                                                conector_update_lineMD5_P2(recarga[i, 1], key.GetMd5Sum(export.registro_tipo_p2("P2", recarga[i, 0], recarga[i, 1], recarga[i, 2], recarga[i, 3], recarga[i, 4], recarga[i, 5], recarga[i, 6], recarga[i, 7], recarga[i, 8])));
                                                                            }
                                                                        }
                                                                    }
                                                                    banco.fechaConexao();
                                                                }
                                                            }
                                                        }
                                                        sw.Close();
                                                        lblVisorEntradaDadosConectorCF.Text = "ENTRADA DE DADOS";
                                                        txtVisorMsgConectorCF.Text = "ARQ. GERADO COM SUCESSO...!";
                                                        msgInfo msg = new msgInfo(1, "Caro Usuário: Arquivo gerado, caminho: " + caminho); msg.ShowDialog();
                                                        txtEntradaDadosConectorCF.CausesValidation = true;
                                                        txtEntradaDadosConectorCF.Clear();
                                                        txtEntradaDadosConectorCF.Select();
                                                    }
                                                }
                                                else
                                                {
                                                    auxConsistencia = 0;
                                                }
                                                break;
                                            case 7:
                                                conectorPDV_geracao_estoque();
                                                break;
                                            case 8:
                                                if (input_find == null)
                                                {
                                                    if (txtEntradaDadosConectorCF.Text != "")
                                                    {
                                                        input_find = txtEntradaDadosConectorCF.Text;
                                                        txtEntradaDadosConectorCF.Clear();
                                                        //this.lblVisorEntradaDadosConectorCF.Location = new System.Drawing.Point(157, 511);
                                                        lblVisorEntradaDadosConectorCF.Text = "INFORME A DATA INICIAL - ddMMyyyy";
                                                        txtEntradaDadosConectorCF.CausesValidation = false;
                                                        txtEntradaDadosConectorCF.Select();
                                                    }
                                                    else
                                                    {
                                                        input_find = null;
                                                    }
                                                }
                                                else
                                                    if (input_di == null && txtEntradaDadosConectorCF.Text.Length == 8)
                                                    {
                                                        if (txtEntradaDadosConectorCF.Text != "")
                                                        {
                                                            input_di = txtEntradaDadosConectorCF.Text;
                                                            input_di = input_di.Insert(2, "/");
                                                            input_di = input_di.Insert(5, "/");
                                                            txtEntradaDadosConectorCF.Clear();
                                                            //this.lblVisorEntradaDadosConectorCF.Location = new System.Drawing.Point(157, 511);
                                                            lblVisorEntradaDadosConectorCF.Text = "INFORME A DATA FINAL - ddMMyyyy";
                                                            txtEntradaDadosConectorCF.CausesValidation = false;
                                                            txtEntradaDadosConectorCF.Select();
                                                        }
                                                        else
                                                        {
                                                            input_di = null;
                                                        }
                                                    }
                                                    else if (input_df == null && txtEntradaDadosConectorCF.Text.Length == 8)
                                                    {
                                                        if (txtEntradaDadosConectorCF.Text != "")
                                                        {
                                                            input_df = txtEntradaDadosConectorCF.Text;
                                                            input_df = input_df.Insert(2, "/");
                                                            input_df = input_df.Insert(5, "/");
                                                            txtEntradaDadosConectorCF.Clear();
                                                            //this.lblVisorEntradaDadosConectorCF.Location = new System.Drawing.Point(157, 511);
                                                            lblVisorEntradaDadosConectorCF.Text = "[ ENTER ] - CONFIRMA A GERAÇÃO DO ARQUIVO";
                                                            txtEntradaDadosConectorCF.CausesValidation = false;
                                                            txtEntradaDadosConectorCF.Select();
                                                            auxConsistencia = 0;
                                                        }
                                                        else
                                                        {
                                                            input_df = null;
                                                        }
                                                    }
                                                    else
                                                        if (auxConsistencia == 0 && input_find != null && input_di != null && input_df != null)
                                                        {
                                                            string[] vetor = new string[7] { "R01", "R02", "R03", "R04", "R05", "R06", "R07" };
                                                            string[,] recarga; //Matriz Bidimencionada
                                                            if (File.Exists(caminho))
                                                            {
                                                                StreamWriter sw = new StreamWriter(caminho, true, Encoding.ASCII);

                                                                //################################################################Instrução Banco
                                                                auxConsistencia = 0;
                                                                countField = 0;
                                                                countRows = 0;

                                                                for (int m = 0; m < vetor.Length; m++)
                                                                {
                                                                    if (vetor[m] != "#")
                                                                    {
                                                                        try
                                                                        {
                                                                            //private void conectorPDV
                                                                            auxConsistencia = 0;
                                                                            title = banco.abreConexao();
                                                                            banco.startTransaction("conectorPDV_PAFECF_Movimento");
                                                                            banco.addParametro("tipo", vetor[m]);
                                                                            banco.addParametro("di", String.Format("{0:yyyyMMdd}", Convert.ToDateTime(input_di)));
                                                                            banco.addParametro("df", String.Format("{0:yyyyMMdd}", Convert.ToDateTime(input_df)));
                                                                            banco.addParametro("store", alwaysVariables.Store);
                                                                            banco.addParametro("cx", input_find);
                                                                            banco.addParametro("find", "0");
                                                                            banco.addParametro("seq", "0");
                                                                            banco.procedimentoSet();

                                                                        }
                                                                        catch (Exception erro) { msgInfo msg = new msgInfo("Caro Cliente - " + erro.Message); msg.ShowDialog(); auxConsistencia = 1; }
                                                                        finally
                                                                        {
                                                                            if (auxConsistencia == 0)
                                                                            {
                                                                                countField = banco.retornaSet().Tables[0].Columns.Count;
                                                                                countRows = banco.retornaSet().Tables[0].DefaultView.Count;
                                                                                if (countRows > 0)
                                                                                {
                                                                                    recarga = new string[countRows, countField];
                                                                                    for (int i = 0; i < countRows; i++)//Linha
                                                                                    {
                                                                                        for (int j = 0; j < countField; j++) //Coluna
                                                                                        {
                                                                                            recarga[i, j] = Convert.ToString(banco.retornaSet().Tables[0].Rows[i][j]);
                                                                                        }
                                                                                        switch (vetor[m])
                                                                                        {
                                                                                            case "R01":
                                                                                                //sw.Write(export.registro_tipo_r01(vetor[m], fiscal_numero_serie, fiscal_letramf_adicional.Replace("\0", "").Trim(), fiscal_tipo_ecf.Replace("\0", "").Trim(), fiscal_marca.Replace("\0", "").Trim(), fiscal_modelo.Replace("\0", "").Trim(), fiscal_VersaoFirmware, String.Format("{0:yyyyMMdd}", Convert.ToDateTime(fiscal_dtsoft_basico)), String.Format("{0:hhmmss}", Convert.ToDateTime(fiscal_dtsoft_basico)), fiscal_numero_caixa.Replace("\0", "").Trim(), recarga[i, 0], recarga[i, 1], alwaysVariables.PAF_CNPJ, alwaysVariables.PAF_IE, alwaysVariables.PAF_IM, alwaysVariables.PAF_RAZAO, alwaysVariables.PAF_NumeroAplicativo, alwaysVariables.PAF_Versao, alwaysVariables.MD5_Main, input_di, input_df, alwaysVariables.PAF_Versao_Spec) + "\r\n");
                                                                                                sw.Write(export.registro_tipo_r01(vetor[m], recarga[i, 0],
                                        recarga[i, 1],
                                        recarga[i, 2],
                                        recarga[i, 3],
                                        recarga[i, 4],
                                        recarga[i, 5],
                                        recarga[i, 6],
                                        recarga[i, 7],
                                        recarga[i, 8],
                                        recarga[i, 9],
                                        recarga[i, 10],
                                        recarga[i, 11],
                                        recarga[i, 12],
                                        recarga[i, 13],
                                        recarga[i, 14],
                                        recarga[i, 15],
                                        recarga[i, 16],
                                        recarga[i, 17], "", "", recarga[i, 18]) + "\r\n");
                                                                                                break;
                                                                                            case "R02":
                                                                                                //sw.Write(export.registro_tipo_r02(vetor[m], fiscal_numero_serie, fiscal_letramf_adicional.Replace("\0", "").Trim(), fiscal_modelo.Replace("\0", "").Trim(), recarga[i, 3], recarga[i, 7], recarga[i, 8], recarga[i, 9], recarga[i, 2], recarga[i, 10], recarga[i, 11], recarga[i, 12], recarga[i, 13]) + "\r\n");
                                                                                                sw.Write(export.registro_tipo_r02(vetor[m], recarga[i, 04].Replace("\0", "").Trim(), recarga[i, 05].Replace("\0", "").Trim(), recarga[i, 6].Replace("\0", "").Trim(), recarga[i, 3], recarga[i, 7], recarga[i, 8], recarga[i, 9], recarga[i, 2], recarga[i, 10], recarga[i, 11], recarga[i, 12], recarga[i, 13]) + "\r\n");
                                                                                                break;
                                                                                            case "R03":
                                                                                                //sw.Write(export.registro_tipo_r03(vetor[m], fiscal_numero_serie, fiscal_letramf_adicional.Replace("\0", "").Trim(), fiscal_modelo.Replace("\0", "").Trim(), recarga[i, 3], recarga[i, 4], recarga[i, 5], recarga[i, 6]) + "\r\n");
                                                                                                sw.Write(export.registro_tipo_r03(vetor[m], recarga[i, 0].Replace("\0", "").Trim(), recarga[i, 1].Replace("\0", "").Trim(), recarga[i, 2].Replace("\0", "").Trim(), recarga[i, 3], recarga[i, 4], recarga[i, 5], recarga[i, 6]) + "\r\n");
                                                                                                break;
                                                                                            case "R04":
                                                                                                //sw.Write(export.registro_tipo_r04(vetor[m], fiscal_numero_serie, fiscal_letramf_adicional.Replace("\0", "").Trim(), fiscal_modelo.Replace("\0", "").Trim(), lbOperadorConectorCF.Text, recarga[i, 0], recarga[i, 1], recarga[i, 2], recarga[i, 3], recarga[i, 4], recarga[i, 5], recarga[i, 6], recarga[i, 7], recarga[i, 8], recarga[i, 9], recarga[i, 10], recarga[i, 11], recarga[i, 12], recarga[i, 13]) + "\r\n");
                                                                                                sw.Write(export.registro_tipo_r04(vetor[m], recarga[i, 16].Replace("\0", "").Trim(),
                                                   recarga[i, 17].Replace("\0", "").Trim(),
                                                   recarga[i, 15].Replace("\0", "").Trim(),
                                                   recarga[i, 14],
                                                   recarga[i, 0],
                                                   recarga[i, 1],
                                                   recarga[i, 2],
                                                   recarga[i, 3],
                                                   recarga[i, 4],
                                                   recarga[i, 5],
                                                   recarga[i, 6],
                                                   recarga[i, 7],
                                                   recarga[i, 8],
                                                   recarga[i, 9],
                                                   recarga[i, 10],
                                                   recarga[i, 11],
                                                   recarga[i, 12],
                                                   recarga[i, 13]) + "\r\n");
                                                                                                break;
                                                                                            case "R05":
                                                                                                //sw.Write(export.registro_tipo_r05(vetor[m], fiscal_numero_serie, fiscal_letramf_adicional.Replace("\0", "").Trim(), fiscal_modelo.Replace("\0", "").Trim(), lbOperadorConectorCF.Text, recarga[i, 1], recarga[i, 0], recarga[i, 2], recarga[i, 3], recarga[i, 5], recarga[i, 6], recarga[i, 7], recarga[i, 8], recarga[i, 9], recarga[i, 10], recarga[i, 11], recarga[i, 12], recarga[i, 13], recarga[i, 14], recarga[i, 15], recarga[i, 16], recarga[i, 17], recarga[i, 18], "3", "2") + "\r\n");
                                                                                                sw.Write(export.registro_tipo_r05(vetor[m], recarga[i, 0].Replace("\0", "").Trim(),
                                               recarga[i, 1].Replace("\0", "").Trim(),
                                               recarga[i, 2].Replace("\0", "").Trim(),
                                               recarga[i, 3],
                                               recarga[i, 4],
                                               recarga[i, 5],
                                               recarga[i, 6],
                                               recarga[i, 7],
                                               recarga[i, 8],
                                               recarga[i, 9],
                                               recarga[i, 10],
                                               recarga[i, 11],
                                               recarga[i, 12],
                                               recarga[i, 13],
                                               recarga[i, 14],
                                               recarga[i, 15],
                                               recarga[i, 16],
                                               recarga[i, 17],
                                               recarga[i, 18],
                                               recarga[i, 19],
                                               recarga[i, 20], recarga[i, 21], recarga[i, 22], recarga[i, 23]) + "\r\n");
                                                                                                break;
                                                                                            case "R06":
                                                                                                //sw.Write(export.registro_tipo_r06(vetor[m], fiscal_numero_serie, fiscal_letramf_adicional.Replace("\0", "").Trim(), fiscal_modelo.Replace("\0", "").Trim(), lbOperadorConectorCF.Text, recarga[i, 0], recarga[i, 1], recarga[i, 2], recarga[i, 3], recarga[i, 4], recarga[i, 5], recarga[i, 6]) + "\r\n");
                                                                                                sw.Write(export.registro_tipo_r06(vetor[m], recarga[i, 0].Replace("\0", "").Trim(),
                                                   recarga[i, 1].Replace("\0", "").Trim(),
                                                   recarga[i, 2].Replace("\0", "").Trim(),
                                                   recarga[i, 3],
                                                   recarga[i, 4],
                                                   recarga[i, 5],
                                                   recarga[i, 6],
                                                   recarga[i, 7],
                                                   recarga[i, 8],
                                                   recarga[i, 9],
                                                   recarga[i, 10]) + "\r\n");
                                                                                                break;
                                                                                            case "R07":
                                                                                                //sw.Write(export.registro_tipo_r07(vetor[m], fiscal_numero_serie, fiscal_letramf_adicional.Replace("\0", "").Trim(), fiscal_modelo.Replace("\0", "").Trim(), banco_operado, recarga[i, 0], recarga[i, 1], recarga[i, 2], recarga[i, 3], recarga[i, 4], recarga[i, 5], recarga[i, 6]) + "\r\n");
                                                                                                sw.Write(export.registro_tipo_r07(vetor[m], recarga[i, 0].Replace("\0", "").Trim(),
                                                   recarga[i, 1].Replace("\0", "").Trim(),
                                                   recarga[i, 2].Replace("\0", "").Trim(),
                                                   recarga[i, 3],
                                                   recarga[i, 4],
                                                   recarga[i, 5],
                                                   recarga[i, 6],
                                                   recarga[i, 7],
                                                   recarga[i, 8],
                                                   recarga[i, 9],
                                                   recarga[i, 10]) + "\r\n");
                                                                                                break;
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                            banco.fechaConexao(); if (title != "") { this.txtTitleCupomFiscalConectorCF.Invoke((MethodInvoker)delegate { txtTitleCupomFiscalConectorCF.Text = title; }); }
                                                                        }
                                                                    }
                                                                }//End For
                                                                sw.Close();
                                                                if (auxConsistencia == 0)
                                                                {
                                                                    lblVisorEntradaDadosConectorCF.Text = "ENTRADA DE DADOS";
                                                                    txtVisorMsgConectorCF.Text = "ARQ. GERADO COM SUCESSO...!";
                                                                    msgInfo msg = new msgInfo(1, "Caro Usuário: Arquivo gerado, caminho: " + caminho); msg.ShowDialog();
                                                                    txtEntradaDadosConectorCF.CausesValidation = true;
                                                                    txtEntradaDadosConectorCF.Clear();
                                                                    txtEntradaDadosConectorCF.Select();
                                                                }
                                                                else
                                                                {
                                                                    lblVisorEntradaDadosConectorCF.Text = "ENTRADA DE DADOS";
                                                                    txtVisorMsgConectorCF.Text = "FALHA NA GERAÇÃO DO ARQ...!";
                                                                    txtEntradaDadosConectorCF.CausesValidation = true;
                                                                    txtEntradaDadosConectorCF.Clear();
                                                                    txtEntradaDadosConectorCF.Select();
                                                                }

                                                            }
                                                        }
                                                break;
                                            case 9:
                                                if (input_find == null)
                                                {

                                                    if (auxConsistencia == 0 && Convert.ToDouble(txtEntradaDadosConectorCF.Text == "" ? "0" : txtEntradaDadosConectorCF.Text) > 0)
                                                    {
                                                        input_find = txtEntradaDadosConectorCF.Text;
                                                        txtEntradaDadosConectorCF.Clear();
                                                        //this.lblVisorEntradaDadosConectorCF.Location = new System.Drawing.Point(157, 511);
                                                        lblVisorEntradaDadosConectorCF.Text = " INFORMAÇÃO CORRETA [ENTER] PROSSEGUIR";
                                                        txtEntradaDadosConectorCF.CausesValidation = false;
                                                        txtEntradaDadosConectorCF.Select();
                                                    }
                                                    else
                                                    {
                                                        auxConsistencia = 0;
                                                        input_find = null;
                                                    }
                                                }
                                                else
                                                {
                                                    if (txtEntradaDadosConectorCF.Text == "" && (lblVisorEntradaDadosConectorCF.Text != "INFORME O COD. FINALIZADORA - [ENTER] - TODOS"))
                                                    {
                                                        lblVisorEntradaDadosConectorCF.Text = "TIPO RELATORIO [ 0 - EXTRAIDO   1 - INFORMADO  2 - IMPRESSO ]";
                                                    }
                                                    else
                                                    {
                                                        txtEntradaDadosConectorCF.CausesValidation = false;
                                                        txtEntradaDadosConectorCF.Select();
                                                    }
                                                    if (input_tipo_geracao == null || input_tipo_geracao == "")
                                                    {
                                                        if (txtEntradaDadosConectorCF.Text != "")
                                                        {
                                                            txtVisorMsgConectorCF.Text = "RELATORIO DE MEIOS DE PAGAMENTO";
                                                            input_tipo_geracao = txtEntradaDadosConectorCF.Text;
                                                            txtEntradaDadosConectorCF.Clear();
                                                            if (input_tipo_geracao == "1")
                                                            {
                                                                lblVisorEntradaDadosConectorCF.Text = "INFORME O VALOR ACUMULADO";
                                                            }
                                                            else if (input_tipo_geracao == "0")
                                                            {
                                                                lblVisorEntradaDadosConectorCF.Text = "INFORME O COD. FINALIZADORA - [ENTER] - TODOS";
                                                            }
                                                            else if (input_tipo_geracao == "2")
                                                            {
                                                                txtVisorMsgConectorCF.Text = " RELATORIO PAF - ECF ";
                                                                lblVisorEntradaDadosConectorCF.Text = "INFORMA A DATA  - ddMMyyyy";
                                                                input_tipo_down = txtEntradaDadosConectorCF.Text;
                                                                input_df = null;
                                                            }

                                                            txtEntradaDadosConectorCF.CausesValidation = false;
                                                            txtEntradaDadosConectorCF.Select();
                                                        }
                                                        else
                                                        {
                                                            input_tipo_geracao = null;
                                                        }

                                                    }
                                                    if (input_tipo_geracao == "2")
                                                    {
                                                        if (input_di == null && txtEntradaDadosConectorCF.Text.Length == 8)
                                                        {
                                                            if (txtEntradaDadosConectorCF.Text != "")
                                                            {
                                                                input_di = txtEntradaDadosConectorCF.Text;
                                                                input_di = input_di.Insert(2, "/");
                                                                input_di = input_di.Insert(5, "/");
                                                                txtEntradaDadosConectorCF.Clear();
                                                                //this.lblVisorEntradaDadosConectorCF.Location = new System.Drawing.Point(157, 511);
                                                                lblVisorEntradaDadosConectorCF.Text = "INFORME A DATA FINAL - ddMMyyyy";
                                                                txtEntradaDadosConectorCF.CausesValidation = false;
                                                                txtEntradaDadosConectorCF.Select();
                                                            }
                                                            else
                                                            {
                                                                input_di = null;
                                                            }
                                                        }
                                                        else if (input_df == null && txtEntradaDadosConectorCF.Text.Length == 8)
                                                        {
                                                            if (txtEntradaDadosConectorCF.Text != "")
                                                            {
                                                                input_df = txtEntradaDadosConectorCF.Text;
                                                                input_df = input_df.Insert(2, "/");
                                                                input_df = input_df.Insert(5, "/");
                                                                txtEntradaDadosConectorCF.Clear();
                                                                //this.lblVisorEntradaDadosConectorCF.Location = new System.Drawing.Point(157, 511);
                                                                lblVisorEntradaDadosConectorCF.Text = "[ ENTER ] - CONFIRMA A IMPRESSÃO DO DOCUMENTO";
                                                                txtEntradaDadosConectorCF.CausesValidation = false;
                                                                txtEntradaDadosConectorCF.Select();
                                                                auxConsistencia = 0;
                                                            }
                                                            else
                                                            {
                                                                input_df = null;
                                                            }
                                                        }
                                                        else if (input_di != null && input_df != null && input_tipo_geracao == "2")
                                                        {
                                                            conectorPDV_find_relation_pgto(1, Convert.ToDateTime(input_di), Convert.ToDateTime(input_df), 1, 0, input_find);
                                                            if (fiscal_retorno == 1 && auxConsistencia == 0)
                                                            {
                                                                txtEntradaDadosConectorCF.Clear();
                                                                txtEntradaDadosConectorCF.CausesValidation = true;
                                                                txtEntradaDadosConectorCF.Select();
                                                                conector_interface_menuFiscal(true);
                                                                conector_reset_meioPgto();
                                                            }
                                                            else
                                                            {
                                                                txtEntradaDadosConectorCF.Select();
                                                            }
                                                        }
                                                    }
                                                    else
                                                    {
                                                        if (input_tipo_down == null)
                                                        {
                                                            if (txtEntradaDadosConectorCF.Text != "")
                                                            {
                                                                txtVisorMsgConectorCF.Text = "RELATORIO DE MEIOS DE PAGAMENTO";
                                                                //lblVisorEntradaDadosConectorCF.Text = "CONFIRMA EMISSÃO DO RELATORIO - [ENTER]";
                                                                lblVisorEntradaDadosConectorCF.Text = "INFORME A FINALIZADORA";
                                                                input_tipo_down = txtEntradaDadosConectorCF.Text;
                                                                txtEntradaDadosConectorCF.Clear();
                                                                txtEntradaDadosConectorCF.CausesValidation = false;
                                                                txtEntradaDadosConectorCF.Select();
                                                            }
                                                            else
                                                            {
                                                                if (lblVisorEntradaDadosConectorCF.Text == "INFORME O COD. FINALIZADORA - [ENTER] - TODOS")
                                                                {
                                                                    txtVisorMsgConectorCF.Text = "RELATORIO DE MEIOS DE PAGAMENTO";
                                                                    lblVisorEntradaDadosConectorCF.Text = "INFORMA A DATA  - ddMMyyyy";
                                                                    input_tipo_down = "0";
                                                                    input_finalizadora = "0";
                                                                }
                                                                else
                                                                {
                                                                    input_tipo_down = null;
                                                                }
                                                            }

                                                        }
                                                        if (input_finalizadora == null)
                                                        {
                                                            if (txtEntradaDadosConectorCF.Text != "" && lblVisorEntradaDadosConectorCF.Text != "INFORMA A DATA  - ddMMyyyy")
                                                            {
                                                                txtVisorMsgConectorCF.Text = "RELATORIO DE MEIOS DE PAGAMENTO";
                                                                lblVisorEntradaDadosConectorCF.Text = "INFORMA A DATA  - ddMMyyyy";
                                                                switch (txtEntradaDadosConectorCF.Text)
                                                                {
                                                                    case "1":
                                                                        input_finalizadora = "Dinheiro";
                                                                        break;
                                                                    case "3":
                                                                        input_finalizadora = "Crediario";
                                                                        break;
                                                                    case "4":
                                                                        input_finalizadora = "Convenio";
                                                                        break;
                                                                    case "5":
                                                                        input_finalizadora = "Cartao Crediario";
                                                                        break;
                                                                    case "6":
                                                                        input_finalizadora = "Cartao Debito";
                                                                        break;
                                                                    case "7":
                                                                        input_finalizadora = "Boleto";
                                                                        break;
                                                                    case "8":
                                                                        input_finalizadora = "Duplicata";
                                                                        break;
                                                                    case "9":
                                                                        input_finalizadora = "Recebimento";
                                                                        break;
                                                                    case "10":
                                                                        input_finalizadora = "Vale";
                                                                        break;
                                                                    case "11":
                                                                        input_finalizadora = "POS";
                                                                        break;
                                                                    default:
                                                                        input_finalizadora = "Dinheiro";
                                                                        break;
                                                                }
                                                                txtEntradaDadosConectorCF.Clear();
                                                                txtEntradaDadosConectorCF.CausesValidation = false;
                                                                txtEntradaDadosConectorCF.Select();
                                                            }
                                                            else
                                                            {
                                                                input_finalizadora = null;
                                                            }

                                                        }

                                                        if (input_di == null)
                                                        {
                                                            if (txtEntradaDadosConectorCF.Text != "")
                                                            {
                                                                input_di = txtEntradaDadosConectorCF.Text;
                                                                txtEntradaDadosConectorCF.Clear();
                                                                txtVisorMsgConectorCF.Text = "RELATORIO DE MEIOS DE PAGAMENTO";
                                                                input_di = input_di.Insert(2, "/");
                                                                input_di = input_di.Insert(5, "/");
                                                                lblVisorEntradaDadosConectorCF.Text = "CONFIRME A EMISSAO DO RELATORIO - [ENTER]";
                                                                txtEntradaDadosConectorCF.CausesValidation = false;
                                                                txtEntradaDadosConectorCF.Select();
                                                            }
                                                            else
                                                            {
                                                                input_di = null;
                                                            }
                                                        }
                                                        else if (input_tipo_down != null && input_tipo_geracao != null && input_finalizadora != null && input_di != null)
                                                        {
                                                            //fiscal_retorno = conectorECF.Bematech_FI_AbreRelatorioMeiosPagamento(input_find);
                                                            functionECF.conectorECF_AbreRelatorioMeiosPagamento(alwaysVariables.ModeloEcf, input_find, ref fiscal_MSG, ref fiscal_retorno, alwaysVariables.ECF_Ligada);
                                                            if (fiscal_retorno == 1)
                                                            {
                                                                if (input_tipo_geracao == "1")
                                                                {
                                                                    functionECF.conectorECF_UsaRelatorioMeiosPagamento(alwaysVariables.ModeloEcf, input_finalizadora, "Resumo", input_tipo_down, input_di, ref fiscal_MSG, ref fiscal_retorno, alwaysVariables.ECF_Ligada);
                                                                    //fiscal_retorno = conectorECF.Bematech_FI_UsaRelatorioMeiosPagamento(input_finalizadora, "Resumo", input_tipo_down, input_di);
                                                                    functionECF.conectorECF_FechaRelatorioMeiosPagamento(alwaysVariables.ModeloEcf, ref fiscal_MSG, ref fiscal_retorno, alwaysVariables.ECF_Ligada);
                                                                    //fiscal_retorno = conectorECF.Bematech_FI_FechaRelatorioMeiosPagamento();

                                                                }
                                                                else
                                                                {
                                                                    string[,] matriz = new string[52, 2]; //Matriz Bidimencionada
                                                                    string[,] retorno = new string[52, 2]; //Matriz Bidimencionada
                                                                    int j = 0;
                                                                    int w = 15;
                                                                    string fiscal_formas_pgto = new string('\x20', 3016);
                                                                    functionECF.conectorECF_VerificaFormasPagamento(alwaysVariables.ModeloEcf, ref fiscal_formas_pgto, ref fiscal_MSG, ref fiscal_retorno, alwaysVariables.ECF_Ligada);

                                                                    for (int t = 0; t < fiscal_formas_pgto.Length; t++)
                                                                    {
                                                                        if (t <= w)
                                                                        {
                                                                            matriz[j, 0] = matriz[j, 0] + fiscal_formas_pgto[t];
                                                                        }
                                                                        else
                                                                        {
                                                                            if (fiscal_formas_pgto[t].ToString() != ",")
                                                                            {
                                                                                matriz[j, 1] = (matriz[j, 1] + fiscal_formas_pgto[t]).Trim();
                                                                            }
                                                                            else
                                                                            {
                                                                                w = t + 15;
                                                                                j++;
                                                                            }
                                                                        }
                                                                    }

                                                                    for (int i = 0; i < (matriz.Length / 2) - 1; i++)
                                                                    {
                                                                        for (int r = 0; r < 2; r++)
                                                                        {
                                                                            if (r == 0)
                                                                            {
                                                                                input_finalizadora = matriz[i, r];
                                                                            }
                                                                            else
                                                                            {
                                                                                if (Convert.ToDecimal(matriz[i, r].Substring(1, 39)) > 0)
                                                                                {
                                                                                    input_tipo_down = String.Format("{0:F2}", Convert.ToDecimal(matriz[i, r].Substring(1, 39)) / 100).Replace(".", ",");
                                                                                    functionECF.conectorECF_UsaRelatorioMeiosPagamento(alwaysVariables.ModeloEcf, input_finalizadora, "Resumo", input_tipo_down, input_di, ref fiscal_MSG, ref fiscal_retorno, alwaysVariables.ECF_Ligada);
                                                                                    //fiscal_retorno = conectorECF.Bematech_FI_UsaRelatorioMeiosPagamento(input_finalizadora, "Resumo", input_tipo_down, input_di);
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                    functionECF.conectorECF_FechaRelatorioMeiosPagamento(alwaysVariables.ModeloEcf, ref fiscal_MSG, ref fiscal_retorno, alwaysVariables.ECF_Ligada);
                                                                    //fiscal_retorno = conectorECF.Bematech_FI_FechaRelatorioMeiosPagamento();
                                                                }
                                                                if (fiscal_retorno == 1)
                                                                {
                                                                    txtEntradaDadosConectorCF.Clear();
                                                                    txtEntradaDadosConectorCF.CausesValidation = true;
                                                                    txtEntradaDadosConectorCF.Select();
                                                                    conector_interface_menuFiscal(true);
                                                                    conector_reset_meioPgto();
                                                                    if (fiscal_retorno == 1 && functionECF.conectorECF_Analisa_RetornoImpressora(alwaysVariables.ModeloEcf, ref ACK, ref ST1, ref ST2, ref ST3, ref fiscal_MSG))
                                                                    {
                                                                        conectorPDV_inc_cupom_relatorio("RG", null);
                                                                    }
                                                                }
                                                                else
                                                                {
                                                                    txtEntradaDadosConectorCF.Select();
                                                                }
                                                            }
                                                            else
                                                            {
                                                                msgInfo msg = new msgInfo("Caro Cliente - " + "FATAL NA EXECUÇÃO DO PROGRAMA...!"); msg.ShowDialog();
                                                            }
                                                        }
                                                    }
                                                    /*
                                                     * if (txtEntradaDadosConectorCF.Text == "" && (lblVisorEntradaDadosConectorCF.Text != "INFORME O COD. FINALIZADORA - [ENTER] - TODOS"))
                                                    {
                                                        lblVisorEntradaDadosConectorCF.Text = "TIPO RELATORIO [ 0 - EXTRAIDO   1 - INFORMADO ]";
                                                        fiscal_retorno = conectorECF.Bematech_FI_AbreRelatorioMeiosPagamento("04");
                                                    }
                                                    else
                                                    {
                                                        txtEntradaDadosConectorCF.CausesValidation = false;
                                                        txtEntradaDadosConectorCF.Select();
                                                    }
                                                    if (input_tipo_geracao == null)
                                                    {
                                                        if (txtEntradaDadosConectorCF.Text != "")
                                                        {
                                                            txtVisorMsgConectorCF.Text = "RELATORIO DE MEIOS DE PAGAMENTO";
                                                            input_tipo_geracao = txtEntradaDadosConectorCF.Text;
                                                            txtEntradaDadosConectorCF.Clear();
                                                            if (input_tipo_geracao == "1")
                                                            {
                                                                lblVisorEntradaDadosConectorCF.Text = "INFORME O VALOR ACUMULADO";
                                                            }
                                                            else
                                                            {
                                                                lblVisorEntradaDadosConectorCF.Text = "INFORME O COD. FINALIZADORA - [ENTER] - TODOS";
                                                            }

                                                            txtEntradaDadosConectorCF.CausesValidation = false;
                                                            txtEntradaDadosConectorCF.Select();
                                                        }
                                                        else
                                                        {
                                                            input_tipo_geracao = null;
                                                        }

                                                    }
                                                    if (input_tipo_down == null)
                                                    {
                                                        if (txtEntradaDadosConectorCF.Text != "")
                                                        {
                                                            txtVisorMsgConectorCF.Text = "RELATORIO DE MEIOS DE PAGAMENTO";
                                                            //lblVisorEntradaDadosConectorCF.Text = "CONFIRMA EMISSÃO DO RELATORIO - [ENTER]";
                                                            lblVisorEntradaDadosConectorCF.Text = "INFORME A FINALIZADORA";
                                                            input_tipo_down = txtEntradaDadosConectorCF.Text;
                                                            txtEntradaDadosConectorCF.Clear();
                                                            txtEntradaDadosConectorCF.CausesValidation = false;
                                                            txtEntradaDadosConectorCF.Select();
                                                        }
                                                        else
                                                        {
                                                            if (lblVisorEntradaDadosConectorCF.Text == "INFORME O COD. FINALIZADORA - [ENTER] - TODOS")
                                                            {
                                                                txtVisorMsgConectorCF.Text = "RELATORIO DE MEIOS DE PAGAMENTO";
                                                                lblVisorEntradaDadosConectorCF.Text = "INFORMA A DATA  - ddMMyyyy";
                                                                input_tipo_down = "0";
                                                                input_finalizadora = "0";
                                                            }
                                                            else
                                                            {
                                                                input_tipo_down = null;
                                                            }
                                                        }

                                                    }
                                                    if (input_finalizadora == null)
                                                    {
                                                        if (txtEntradaDadosConectorCF.Text != "" && lblVisorEntradaDadosConectorCF.Text != "INFORMA A DATA  - ddMMyyyy")
                                                        {
                                                            txtVisorMsgConectorCF.Text = "RELATORIO DE MEIOS DE PAGAMENTO";
                                                            lblVisorEntradaDadosConectorCF.Text = "INFORMA A DATA  - ddMMyyyy";
                                                            switch (txtEntradaDadosConectorCF.Text)
                                                            {
                                                                case "1":
                                                                    input_finalizadora = "Dinheiro";
                                                                    break;
                                                                case "3":
                                                                    input_finalizadora = "Crediario";
                                                                    break;
                                                                case "4":
                                                                    input_finalizadora = "Convenio";
                                                                    break;
                                                                case "5":
                                                                    input_finalizadora = "Cartao Crediario";
                                                                    break;
                                                                case "6":
                                                                    input_finalizadora = "Cartao Debito";
                                                                    break;
                                                                case "7":
                                                                    input_finalizadora = "Boleto";
                                                                    break;
                                                                case "8":
                                                                    input_finalizadora = "Duplicata";
                                                                    break;
                                                                case "9":
                                                                    input_finalizadora = "Recebimento";
                                                                    break;
                                                                case "10":
                                                                    input_finalizadora = "Vale";
                                                                    break;
                                                                case "11":
                                                                    input_finalizadora = "POS";
                                                                    break;
                                                                default:
                                                                    input_finalizadora = "Dinheiro";
                                                                    break;
                                                            }
                                                            txtEntradaDadosConectorCF.Clear();
                                                            txtEntradaDadosConectorCF.CausesValidation = false;
                                                            txtEntradaDadosConectorCF.Select();
                                                        }
                                                        else
                                                        {
                                                            input_finalizadora = null;
                                                        }

                                                    }

                                                    if (input_di == null)
                                                    {
                                                        if (txtEntradaDadosConectorCF.Text != "")
                                                        {
                                                            input_di = txtEntradaDadosConectorCF.Text;
                                                            txtEntradaDadosConectorCF.Clear();
                                                            txtVisorMsgConectorCF.Text = "RELATORIO DE MEIOS DE PAGAMENTO";
                                                            input_di = input_di.Insert(2, "/");
                                                            input_di = input_di.Insert(5, "/");
                                                            lblVisorEntradaDadosConectorCF.Text = "CONFIRME A EMISSAO DO RELATORIO - [ENTER]";
                                                            txtEntradaDadosConectorCF.CausesValidation = false;
                                                            txtEntradaDadosConectorCF.Select();
                                                        }
                                                        else
                                                        {
                                                            input_di = null;
                                                        }
                                                    }
                                                    else if (input_tipo_down != null && input_tipo_geracao != null && input_finalizadora != null && input_di != null)
                                                    {
                                                        if (input_tipo_geracao == "1")
                                                        {
                                                            fiscal_retorno = conectorECF.Bematech_FI_UsaRelatorioMeiosPagamento(input_finalizadora, "Resumo", input_tipo_down, input_di);
                                                            fiscal_retorno = conectorECF.Bematech_FI_FechaRelatorioMeiosPagamento();
                                                        }
                                                        else
                                                        {
                                                            string[,] matriz = new string[52, 2]; //Matriz Bidimencionada
                                                            string[,] retorno = new string[52, 2]; //Matriz Bidimencionada
                                                            int j = 0;
                                                            int w = 15;
                                                            string fiscal_formas_pgto = new string('\x20', 3016);
                                                            fiscal_retorno = conectorECF.Bematech_FI_VerificaFormasPagamento(ref fiscal_formas_pgto);

                                                            for (int t = 0; t < fiscal_formas_pgto.Length; t++)
                                                            {
                                                                if (t <= w)
                                                                {
                                                                    matriz[j, 0] = matriz[j, 0] + fiscal_formas_pgto[t];
                                                                }
                                                                else
                                                                {
                                                                    if (fiscal_formas_pgto[t].ToString() != ",")
                                                                    {
                                                                        matriz[j, 1] = (matriz[j, 1] + fiscal_formas_pgto[t]).Trim();
                                                                    }
                                                                    else
                                                                    {
                                                                        w = t + 15;
                                                                        j++;
                                                                    }
                                                                }
                                                            }

                                                            for (int i = 0; i < (matriz.Length / 2) - 1; i++)
                                                            {
                                                                for (int r = 0; r < 2; r++)
                                                                {
                                                                    if (r == 0)
                                                                    {
                                                                        input_finalizadora = matriz[i, r];
                                                                    }
                                                                    else
                                                                    {
                                                                        if (Convert.ToDecimal(matriz[i, r].Substring(1, 39)) > 0)
                                                                        {
                                                                            input_tipo_down = String.Format("{0:F2}", Convert.ToDecimal(matriz[i, r].Substring(1, 39)) / 100).Replace(".", ",");
                                                                            fiscal_retorno = conectorECF.Bematech_FI_UsaRelatorioMeiosPagamento(input_finalizadora, "Resumo", input_tipo_down, input_di);
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                            fiscal_retorno = conectorECF.Bematech_FI_FechaRelatorioMeiosPagamento();
                                                        }
                                                        if (fiscal_retorno == 1)
                                                        {
                                                            txtEntradaDadosConectorCF.Clear();
                                                            txtEntradaDadosConectorCF.CausesValidation = true;
                                                            txtEntradaDadosConectorCF.Select();
                                                            conector_interface_menuFiscal(true);
                                                            conector_reset_meioPgto();
                                                        }
                                                        else
                                                        {
                                                            txtEntradaDadosConectorCF.Select();
                                                        }
                                                    }
                                                     */
                                                }
                                                break;
                                            case 10:
                                                /* Fechado Homologacao if (input_find == null)
                                                {
                                                    if (auxConsistencia == 0 && Convert.ToDouble(txtEntradaDadosConectorCF.Text == "" ? "0" : txtEntradaDadosConectorCF.Text) > 0)
                                                    {
                                                        input_find = txtEntradaDadosConectorCF.Text;
                                                        txtEntradaDadosConectorCF.Clear();
                                                        //this.lblVisorEntradaDadosConectorCF.Location = new System.Drawing.Point(157, 511);
                                                        lblVisorEntradaDadosConectorCF.Text = "INFORME A DATA INICIAL - ddMMyyyy";
                                                        txtEntradaDadosConectorCF.CausesValidation = false;
                                                        txtEntradaDadosConectorCF.Select();
                                                    }
                                                    else
                                                    {
                                                        auxConsistencia = 0;
                                                        input_find = null;
                                                    }

                                                    /*if (auxConsistencia == 0)
                                                    {
                                                        input_find = txtEntradaDadosConectorCF.Text;
                                                        txtEntradaDadosConectorCF.Clear();
                                                        //this.lblVisorEntradaDadosConectorCF.Location = new System.Drawing.Point(157, 511);
                                                        lblVisorEntradaDadosConectorCF.Text = "INFORME A DATA INICIAL - ddMMyyyy";
                                                        txtEntradaDadosConectorCF.CausesValidation = false;
                                                        txtEntradaDadosConectorCF.Select();
                                                    }
                                                    else
                                                    {
                                                        auxConsistencia = 0;
                                                        input_find = null;
                                                    }*/
                                                /*}
                                                else
                                                    if (input_di == null && txtEntradaDadosConectorCF.Text.Length == 8)
                                                    {
                                                        if (txtEntradaDadosConectorCF.Text != "")
                                                        {
                                                            input_di = txtEntradaDadosConectorCF.Text;
                                                            input_di = input_di.Insert(2, "/");
                                                            input_di = input_di.Insert(5, "/");
                                                            txtEntradaDadosConectorCF.Clear();
                                                            //this.lblVisorEntradaDadosConectorCF.Location = new System.Drawing.Point(157, 511);
                                                            lblVisorEntradaDadosConectorCF.Text = "INFORME A DATA FINAL - ddMMyyyy";
                                                            txtEntradaDadosConectorCF.CausesValidation = false;
                                                            txtEntradaDadosConectorCF.Select();
                                                        }
                                                        else
                                                        {
                                                            input_di = null;
                                                        }
                                                    }
                                                    else if (input_df == null && txtEntradaDadosConectorCF.Text.Length == 8)
                                                    {
                                                        if (txtEntradaDadosConectorCF.Text != "")
                                                        {
                                                            input_df = txtEntradaDadosConectorCF.Text;
                                                            input_df = input_df.Insert(2, "/");
                                                            input_df = input_df.Insert(5, "/");
                                                            txtEntradaDadosConectorCF.Clear();
                                                            //this.lblVisorEntradaDadosConectorCF.Location = new System.Drawing.Point(157, 511);
                                                            lblVisorEntradaDadosConectorCF.Text = "[ ENTER ] - CONFIRMA A GERAÇÃO DO ARQUIVO";
                                                            txtEntradaDadosConectorCF.CausesValidation = false;
                                                            txtEntradaDadosConectorCF.Select();
                                                            auxConsistencia = 0;
                                                        }
                                                        else
                                                        {
                                                            input_df = null;
                                                        }
                                                    }
                                                    else
                                                        if (auxConsistencia == 0 && input_find != null && input_di != null && input_df != null)
                                                        {
                                                            string[] vetor = new string[5] { "D01", "D02", "D03", "D04", "D09" };
                                                            string[,] recarga; //Matriz Bidimencionada
                                                            if (File.Exists(caminho))
                                                            {
                                                                StreamWriter sw = new StreamWriter(caminho, true, Encoding.ASCII);

                                                                //################################################################Instrução Banco
                                                                auxConsistencia = 0;
                                                                countField = 0;
                                                                countRows = 0;

                                                                for (int m = 0; m < vetor.Length; m++)
                                                                {
                                                                    if (vetor[m] != "#")
                                                                    {
                                                                        try
                                                                        {
                                                                            auxConsistencia = 0;
                                                                            title = banco.abreConexao();
                                                                            banco.startTransaction("conectorPDV_PAFECF_DAV");
                                                                            banco.addParametro("tipo", vetor[m]);
                                                                            banco.addParametro("di", String.Format("{0:yyyyMMdd}", Convert.ToDateTime(input_di)));
                                                                            banco.addParametro("df", String.Format("{0:yyyyMMdd}", Convert.ToDateTime(input_df)));
                                                                            banco.addParametro("store", alwaysVariables.Store);
                                                                            banco.addParametro("reserva", "0");
                                                                            banco.addParametro("prod", "0");
                                                                            banco.addParametro("seq", "0");
                                                                            banco.procedimentoSet();

                                                                        }
                                                                        catch (Exception erro) { msgInfo msg = new msgInfo("Caro Cliente - " + erro.Message); msg.ShowDialog(); auxConsistencia = 1; }
                                                                        finally
                                                                        {
                                                                            if (auxConsistencia == 0)
                                                                            {
                                                                                countField = banco.retornaSet().Tables[0].Columns.Count;
                                                                                countRows = banco.retornaSet().Tables[0].DefaultView.Count;
                                                                                if (countRows > 0)
                                                                                {
                                                                                    recarga = new string[countRows, countField];
                                                                                    for (int i = 0; i < countRows; i++)//Linha
                                                                                    {
                                                                                        for (int j = 0; j < countField; j++) //Coluna
                                                                                        {
                                                                                            recarga[i, j] = Convert.ToString(banco.retornaSet().Tables[0].Rows[i][j]);
                                                                                        }
                                                                                        switch (vetor[m])
                                                                                        {
                                                                                            case "D01":
                                                                                                sw.Write(export.registro_tipo_d01(vetor[m], recarga[i, 0], recarga[i, 1], recarga[i, 2], recarga[i, 3]) + "\r\n");
                                                                                                break;
                                                                                            case "D02":
                                                                                                sw.Write(export.registro_tipo_d02(vetor[m], fiscal_CGC, fiscal_numero_serie, fiscal_letramf_adicional, fiscal_tipo_ecf, fiscal_marca, fiscal_modelo, recarga[i, 0], recarga[i, 1], recarga[i, 2], recarga[i, 3], recarga[i, 4], recarga[i, 5], recarga[i, 6], recarga[i, 7], recarga[i, 8]) + "\r\n");
                                                                                                break;
                                                                                            case "D03":
                                                                                                sw.Write(export.registro_tipo_d03(vetor[m], recarga[i, 0], recarga[i, 1], recarga[i, 2], recarga[i, 3], recarga[i, 4], recarga[i, 5], recarga[i, 6], recarga[i, 7], recarga[i, 8], recarga[i, 9], recarga[i, 10], recarga[i, 11], recarga[i, 12], recarga[i, 13], recarga[i, 14], recarga[i, 15]) + "\r\n");
                                                                                                break;
                                                                                            case "D04":
                                                                                                sw.Write(export.registro_tipo_d04(vetor[m], recarga[i, 0], recarga[i, 1], recarga[i, 2], recarga[i, 3], recarga[i, 4], recarga[i, 5], recarga[i, 6], recarga[i, 7], recarga[i, 8], recarga[i, 9], recarga[i, 10], recarga[i, 11], recarga[i, 12], recarga[i, 13], recarga[i, 14], recarga[i, 15], recarga[i, 16]) + "\r\n");
                                                                                                break;
                                                                                            case "D09":
                                                                                                sw.Write(export.registro_tipo_d09(vetor[m], recarga[i, 0], recarga[i, 1], recarga[i, 2], recarga[i, 3]) + "\r\n");
                                                                                                break;
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                            banco.fechaConexao(); if (title != "") { this.txtTitleCupomFiscalConectorCF.Invoke((MethodInvoker)delegate { txtTitleCupomFiscalConectorCF.Text = title; }); }
                                                                        }
                                                                    }
                                                                }
                                                                sw.Close();
                                                                if (auxConsistencia == 0)
                                                                {
                                                                    conectorPDV_PAFECF_DAV("Rel", Convert.ToDateTime(input_di), Convert.ToDateTime(input_df));

                                                                    lblVisorEntradaDadosConectorCF.Text = "ENTRADA DE DADOS";
                                                                    txtVisorMsgConectorCF.Text = "ARQ. GERADO COM SUCESSO...!";
                                                                    msgInfo msg = new msgInfo(1, "Caro Usuário: Arquivo gerado, caminho: " + caminho); msg.ShowDialog();
                                                                    txtEntradaDadosConectorCF.CausesValidation = true;
                                                                    txtEntradaDadosConectorCF.Clear();
                                                                    txtEntradaDadosConectorCF.Select();
                                                                }
                                                                else
                                                                {
                                                                    lblVisorEntradaDadosConectorCF.Text = "ENTRADA DE DADOS";
                                                                    txtVisorMsgConectorCF.Text = "FALHA NA GERAÇÃO DO ARQ...!";
                                                                    txtEntradaDadosConectorCF.CausesValidation = true;
                                                                    txtEntradaDadosConectorCF.Clear();
                                                                    txtEntradaDadosConectorCF.Select();
                                                                }

                                                            }
                                                        }*/
                                                if (keys_valida_private == "                                                                                                                                                                                                                                                                " || keys_valida_publica == "                                                                                                                                                                                                                                                                ")
                                                {
                                                    if (txtEntradaDadosConectorCF.Text == "")
                                                    {

                                                        lblVisorEntradaDadosConectorCF.Text = "TIPO DOWNLOAD MFD [ 0 - DATA   1 - COO ]";
                                                        if (alwaysVariables.KeysPrivate.Length == 256 && alwaysVariables.KeysPublica.Length == 256)
                                                        {//Pego a catalogada
                                                            keys_valida_private = alwaysVariables.KeysPrivate;
                                                            keys_valida_publica = alwaysVariables.KeysPublica;
                                                        }
                                                        else
                                                        {//Gero a nova caso nao existe
                                                            //fiscal_retorno = conectorECF.genkkey(ref keys_valida_publica, ref keys_valida_private);
                                                            functionECF.conectorECF_genkey(alwaysVariables.ModeloEcf, ref keys_valida_publica, ref keys_valida_private, fiscal_retorno, ref fiscal_MSG);
                                                        }
                                                        if (fiscal_retorno == 1)
                                                        {
                                                            txtEntradaDadosConectorCF.Clear();
                                                            txtVisorMsgConectorCF.Text = "KEY PRIVADA E KEY PUBLICA OK!";
                                                            txtEntradaDadosConectorCF.CausesValidation = false;
                                                            txtEntradaDadosConectorCF.Select();
                                                        }
                                                        else
                                                        {
                                                            txtVisorMsgConectorCF.Text = "KEYS INVALID...!";
                                                            conector_reset_MFD();
                                                        }

                                                        if (fiscal_retorno == 1)
                                                        {
                                                            txtEntradaDadosConectorCF.Clear();
                                                            txtVisorMsgConectorCF.Text = "KEY PRIVADA E KEY PUBLICA OK!";
                                                            txtEntradaDadosConectorCF.CausesValidation = false;
                                                            txtEntradaDadosConectorCF.Select();
                                                        }
                                                        else
                                                        {
                                                            txtVisorMsgConectorCF.Text = "KEYS INVALID...!";
                                                            conector_reset_MFD();
                                                        }
                                                    }
                                                    else
                                                    {
                                                        txtEntradaDadosConectorCF.Clear();
                                                        txtEntradaDadosConectorCF.Select();
                                                    }
                                                }
                                                if (input_tipo_down == null)
                                                {
                                                    if (txtEntradaDadosConectorCF.Text != "")
                                                    {
                                                        txtVisorMsgConectorCF.Text = "SELECIONE O FILTRO";
                                                        //this.lblVisorEntradaDadosConectorCF.Location = new System.Drawing.Point(157, 511);
                                                        if (txtEntradaDadosConectorCF.Text == "0")
                                                        {
                                                            lblVisorEntradaDadosConectorCF.Text = "DATA INICIAL - ddMMyyyy";
                                                            input_tipo_down = "D";
                                                        }
                                                        else if (txtEntradaDadosConectorCF.Text == "1")
                                                        {
                                                            lblVisorEntradaDadosConectorCF.Text = "INFORME O NUMERO DO CUPOM - 1.o";
                                                            input_tipo_down = "C";
                                                        }
                                                        else
                                                        {
                                                            lblVisorEntradaDadosConectorCF.Text = "DATA INICIAL - ddMMyyyy";
                                                            input_tipo_down = "D";
                                                        }
                                                        txtEntradaDadosConectorCF.Clear();
                                                        txtEntradaDadosConectorCF.CausesValidation = false;
                                                        txtEntradaDadosConectorCF.Select();
                                                    }
                                                    else
                                                    {
                                                        input_tipo_down = null;
                                                    }
                                                }
                                                if (input_coo_first == null)
                                                {
                                                    if (txtEntradaDadosConectorCF.Text != "")
                                                    {
                                                        input_coo_first = txtEntradaDadosConectorCF.Text;
                                                        txtEntradaDadosConectorCF.Clear();
                                                        txtVisorMsgConectorCF.Text = "ARQUIVO MFD";
                                                        //this.lblVisorEntradaDadosConectorCF.Location = new System.Drawing.Point(157, 511);
                                                        if (input_tipo_down == "D")
                                                        {
                                                            try
                                                            {
                                                                input_coo_first = input_coo_first.Insert(2, "/");
                                                                input_coo_first = input_coo_first.Insert(5, "/");
                                                                lblVisorEntradaDadosConectorCF.Text = "DATA FINAL - ddMMyyyy";
                                                            }
                                                            catch (Exception)
                                                            {
                                                            }
                                                        }
                                                        else if (input_tipo_down == "C")
                                                        {
                                                            lblVisorEntradaDadosConectorCF.Text = "INFORME O NUMERO DO CUPOM - 2.o";
                                                        }
                                                        txtEntradaDadosConectorCF.CausesValidation = false;
                                                        txtEntradaDadosConectorCF.Select();
                                                    }
                                                    else
                                                    {
                                                        input_coo_first = null;
                                                    }
                                                }
                                                if (input_coo_last == null)
                                                {
                                                    if (txtEntradaDadosConectorCF.Text != "")
                                                    {
                                                        input_coo_last = txtEntradaDadosConectorCF.Text;
                                                        if (input_tipo_down == "D")
                                                        {
                                                            input_coo_last = input_coo_last.Insert(2, "/");
                                                            input_coo_last = input_coo_last.Insert(5, "/");
                                                        }
                                                        txtEntradaDadosConectorCF.Clear();
                                                        txtVisorMsgConectorCF.Text = "ARQUIVO BINARIO";
                                                        //this.lblVisorEntradaDadosConectorCF.Location = new System.Drawing.Point(157, 511);
                                                        lblVisorEntradaDadosConectorCF.Text = "TIPO DE GERAÇÃO [0 - MF, 1 - MFD, 2 - TDM, 3 - RZ, 4 - RFD]";
                                                        txtEntradaDadosConectorCF.CausesValidation = false;
                                                        txtEntradaDadosConectorCF.Select();
                                                    }
                                                    else
                                                    {
                                                        input_coo_last = null;
                                                    }
                                                }
                                                if (input_tipo_geracao == null)
                                                {
                                                    if (txtEntradaDadosConectorCF.Text != "")
                                                    {
                                                        input_tipo_geracao = txtEntradaDadosConectorCF.Text;
                                                        txtEntradaDadosConectorCF.Clear();
                                                        txtVisorMsgConectorCF.Text = "ARQUIVO BINARIO";
                                                        //this.lblVisorEntradaDadosConectorCF.Location = new System.Drawing.Point(157, 511);
                                                        lblVisorEntradaDadosConectorCF.Text = "FORMATO ARQUIVO - [1 UNICO   0 MULTIPLOS]";
                                                        txtEntradaDadosConectorCF.CausesValidation = false;
                                                        txtEntradaDadosConectorCF.Select();
                                                    }
                                                    else
                                                    {
                                                        input_tipo_geracao = null;
                                                    }
                                                }
                                                if (input_unico_arquivo == null)
                                                {
                                                    if (txtEntradaDadosConectorCF.Text != "")
                                                    {
                                                        input_unico_arquivo = txtEntradaDadosConectorCF.Text;
                                                        txtEntradaDadosConectorCF.Clear();
                                                        txtVisorMsgConectorCF.Text = "ARQUIVO BINARIO";
                                                        //this.lblVisorEntradaDadosConectorCF.Location = new System.Drawing.Point(157, 511);
                                                        lblVisorEntradaDadosConectorCF.Text = "[ ENTER ] - CONFIRMA A GERAÇÃO DO ARQUIVO";
                                                        txtEntradaDadosConectorCF.CausesValidation = false;
                                                        txtEntradaDadosConectorCF.Select();
                                                    }
                                                    else
                                                    {
                                                        input_unico_arquivo = null;
                                                    }
                                                }
                                                else if (input_unico_arquivo != null && input_tipo_geracao != null && input_tipo_down != null && keys_valida_publica != null && keys_valida_private != null && input_coo_last != null && input_coo_first != null)
                                                {

                                                    string registroEAD = new string('\x20', 256);
                                                    //chama a função com o parâmetro
                                                    if (alwaysVariables.KeysPrivate.Trim().Length == 256 && alwaysVariables.KeysPublica.Trim().Length == 256)
                                                    {
                                                        //functionECF.conectorECF_ArquivoMFD(alwaysVariables.ModeloEcf, "", input_coo_first, input_coo_last, input_tipo_down, banco_operado, Convert.ToDouble(input_tipo_geracao), alwaysVariables.KeysPublica, alwaysVariables.KeysPrivate, 1, ref fiscal_MSG, ref fiscal_retorno, alwaysVariables.ECF_Ligada);
                                                        //fiscal_retorno = conectorECF.Bematech_FI_ArquivoMFD("", input_coo_first, input_coo_last, input_tipo_down, banco_operado, Convert.ToDouble(input_tipo_geracao), "BE011B465E262EE8FE5AC862A0EDFDC2AA61FDB4C8B14D1C86C8258835DB57B18E065EF0FA533A894C79E6A172EB52ACD81A47967263FBA133B558796B500E3B82011B6A2228A91EA04A125E16F2CE5C2E7DD13A32EE39B386F5493AA35AC248582C7309B5F75A4105045DC39C5C2696797280467457663D1D79A00B52A609EB", "E88EA74E25FAFBF91E28456B39AA0208F9A669D2214A676B9CB87E62FB5F414EFFB8213A7FDB731F8C06BE286E57FE7CB9D2AFC7CF3DA082F6E982F3C72B21F7D128564C824F3C96B3ED26BAD26534FC88646A6C9AAD43B83AF56F243D514B98FD9CF1A1C3A155F0460E8CF95E66A4F1FFC773C60405AD321C5898BE5C1B1AAD", 1);

                                                        functionECF.conectorECF_GenerateEAD(alwaysVariables.ModeloEcf, @"C:\Download.MFD", "BE011B465E262EE8FE5AC862A0EDFDC2AA61FDB4C8B14D1C86C8258835DB57B18E065EF0FA533A894C79E6A172EB52ACD81A47967263FBA133B558796B500E3B82011B6A2228A91EA04A125E16F2CE5C2E7DD13A32EE39B386F5493AA35AC248582C7309B5F75A4105045DC39C5C2696797280467457663D1D79A00B52A609EB", "E88EA74E25FAFBF91E28456B39AA0208F9A669D2214A676B9CB87E62FB5F414EFFB8213A7FDB731F8C06BE286E57FE7CB9D2AFC7CF3DA082F6E982F3C72B21F7D128564C824F3C96B3ED26BAD26534FC88646A6C9AAD43B83AF56F243D514B98FD9CF1A1C3A155F0460E8CF95E66A4F1FFC773C60405AD321C5898BE5C1B1AAD", ref registroEAD, fiscal_retorno, ref fiscal_MSG);

                                                        //functionECF.conectorECF_ArquivoMFD(alwaysVariables.ModeloEcf, "", input_coo_first, input_coo_last, input_tipo_down, banco_operado, Convert.ToDouble(input_tipo_geracao), "BE011B465E262EE8FE5AC862A0EDFDC2AA61FDB4C8B14D1C86C8258835DB57B18E065EF0FA533A894C79E6A172EB52ACD81A47967263FBA133B558796B500E3B82011B6A2228A91EA04A125E16F2CE5C2E7DD13A32EE39B386F5493AA35AC248582C7309B5F75A4105045DC39C5C2696797280467457663D1D79A00B52A609EB", "E88EA74E25FAFBF91E28456B39AA0208F9A669D2214A676B9CB87E62FB5F414EFFB8213A7FDB731F8C06BE286E57FE7CB9D2AFC7CF3DA082F6E982F3C72B21F7D128564C824F3C96B3ED26BAD26534FC88646A6C9AAD43B83AF56F243D514B98FD9CF1A1C3A155F0460E8CF95E66A4F1FFC773C60405AD321C5898BE5C1B1AAD", 1, ref fiscal_MSG, ref fiscal_retorno, alwaysVariables.ECF_Ligada);
                                                    }
                                                    else
                                                    {//Gero a nova caso nao existe
                                                        //functionECF.conectorECF_genkey(alwaysVariables.ModeloEcf, ref keys_valida_publica, ref keys_valida_private, fiscal_retorno, ref fiscal_MSG);
                                                        functionECF.conectorECF_ArquivoMFD(alwaysVariables.ModeloEcf, "", input_coo_first, input_coo_last, input_tipo_down, banco_operado, Convert.ToInt32(input_tipo_geracao), "BE011B465E262EE8FE5AC862A0EDFDC2AA61FDB4C8B14D1C86C8258835DB57B18E065EF0FA533A894C79E6A172EB52ACD81A47967263FBA133B558796B500E3B82011B6A2228A91EA04A125E16F2CE5C2E7DD13A32EE39B386F5493AA35AC248582C7309B5F75A4105045DC39C5C2696797280467457663D1D79A00B52A609EB", "E88EA74E25FAFBF91E28456B39AA0208F9A669D2214A676B9CB87E62FB5F414EFFB8213A7FDB731F8C06BE286E57FE7CB9D2AFC7CF3DA082F6E982F3C72B21F7D128564C824F3C96B3ED26BAD26534FC88646A6C9AAD43B83AF56F243D514B98FD9CF1A1C3A155F0460E8CF95E66A4F1FFC773C60405AD321C5898BE5C1B1AAD", 1, ref fiscal_MSG, ref fiscal_retorno, alwaysVariables.ECF_Ligada);
                                                        functionECF.conectorECF_GenerateEAD(alwaysVariables.ModeloEcf, @"C:\Download.MFD", "BE011B465E262EE8FE5AC862A0EDFDC2AA61FDB4C8B14D1C86C8258835DB57B18E065EF0FA533A894C79E6A172EB52ACD81A47967263FBA133B558796B500E3B82011B6A2228A91EA04A125E16F2CE5C2E7DD13A32EE39B386F5493AA35AC248582C7309B5F75A4105045DC39C5C2696797280467457663D1D79A00B52A609EB", "E88EA74E25FAFBF91E28456B39AA0208F9A669D2214A676B9CB87E62FB5F414EFFB8213A7FDB731F8C06BE286E57FE7CB9D2AFC7CF3DA082F6E982F3C72B21F7D128564C824F3C96B3ED26BAD26534FC88646A6C9AAD43B83AF56F243D514B98FD9CF1A1C3A155F0460E8CF95E66A4F1FFC773C60405AD321C5898BE5C1B1AAD", ref registroEAD, fiscal_retorno, ref fiscal_MSG);

                                                    }
                                                    StreamWriter sw = new StreamWriter(@"C:\Download.txt", true, Encoding.ASCII);

                                                    if (registroEAD != "")
                                                    {
                                                        sw.Write("EAD" + registroEAD);
                                                        msgInfo msg = new msgInfo(1, "Caro Usuário: Arquivo gerado, local: " + "C:\\"); msg.ShowDialog();
                                                    }
                                                    else
                                                    {
                                                        msgInfo msg1 = new msgInfo(1, "ARQUIVO NÃO GERADO."); msg1.ShowDialog();
                                                    }
                                                    sw.Close();
                                                    conector_reset_MFD();
                                                    call_funcao = 0;
                                                    txtVisorMsgConectorCF.Text = "MENU FISCAL";
                                                    lblVisorEntradaDadosConectorCF.Text = "ENTRADA DE DADOS";
                                                    txtEntradaDadosConectorCF.CausesValidation = true;
                                                    txtEntradaDadosConectorCF.Select();
                                                }
                                                break;
                                            case 11:
                                                if (alwaysVariables.ECF_Ligada != -6)//Confere se impressora esta desconectada
                                                {
                                                    if (input_find == null)
                                                    {
                                                        if (auxConsistencia == 0 && Convert.ToDouble(txtEntradaDadosConectorCF.Text == "" ? "0" : txtEntradaDadosConectorCF.Text) > 0)
                                                        {
                                                            input_find = txtEntradaDadosConectorCF.Text;
                                                            txtEntradaDadosConectorCF.Clear();
                                                            //this.lblVisorEntradaDadosConectorCF.Location = new System.Drawing.Point(157, 511);
                                                            lblVisorEntradaDadosConectorCF.Text = "CONFIRMA A GERAÇÃO DA INFORMAÇÃO - [ENTER]";
                                                            txtVisorMsgConectorCF.Text = "IDENTIFICAÇÃO DO PAF-ECF";
                                                            txtEntradaDadosConectorCF.CausesValidation = false;
                                                            txtEntradaDadosConectorCF.Select();
                                                        }
                                                        else
                                                        {
                                                            auxConsistencia = 0;
                                                            input_find = null;
                                                        }

                                                    }
                                                    else
                                                    {
                                                        if (txtVisorMsgConectorCF.Text == "IDENTIFICAÇÃO DO PAF-ECF")
                                                        {
                                                            string test = Application.ExecutablePath;
                                                            if (input_find != null || input_find != "")
                                                            {
                                                                identificacaoECF(input_find);

                                                                if (fiscal_retorno == 1)
                                                                {
                                                                    txtEntradaDadosConectorCF.Clear();
                                                                    txtEntradaDadosConectorCF.CausesValidation = true;
                                                                    txtEntradaDadosConectorCF.Select();
                                                                    conector_interface_menuFiscal(true);
                                                                }
                                                            }
                                                            else
                                                            {
                                                                functionECF.conectorECF_IdentificacaoPAFECF(alwaysVariables.ModeloEcf, "02", alwaysVariables.PAF_laudo, alwaysVariables.PAF_CNPJ, alwaysVariables.PAF_RAZAO, alwaysVariables.PAF_Endereco, alwaysVariables.PAF_TELEFONE, alwaysVariables.PAF_Contato, alwaysVariables.PAF_contatoCom, alwaysVariables.PAF_Versao, test, alwaysVariables.MD5_Main, "", "", fiscal_numero_serie, ref fiscal_MSG, ref fiscal_retorno, alwaysVariables.ECF_Ligada);
                                                                //fiscal_retorno = conectorECF.Bematech_FI_IdentificacaoPAFECF("02", alwaysVariables.PAF_laudo, alwaysVariables.PAF_CNPJ, alwaysVariables.PAF_RAZAO, alwaysVariables.PAF_Endereco, alwaysVariables.PAF_TELEFONE, alwaysVariables.PAF_Contato, alwaysVariables.PAF_contatoCom, alwaysVariables.PAF_Versao, test, alwaysVariables.MD5_Main, "", "", fiscal_numero_serie);
                                                            }
                                                        }
                                                        else if (auxConsistencia == 1)
                                                        {
                                                            txtVisorMsgConectorCF.Text = "IDENTIFICAÇÃO DO PAF-ECF";
                                                            auxConsistencia = 0;
                                                        }
                                                        else
                                                        {
                                                            txtVisorMsgConectorCF.Text = "ERRO NA EMISSAO DA IDENTIFICAÇÃO DO PAF-ECF";
                                                        }
                                                    }
                                                }
                                                break;
                                            case 12:
                                                conectorPDV_acion_sintegra();
                                                break;
                                            case 14:
                                                if (input_find == null)
                                                {
                                                    txtVisorMsgConectorCF.Text = "GERAÇÃO DE ARQUIVO";
                                                    if (auxConsistencia == 0 && Convert.ToDouble(txtEntradaDadosConectorCF.Text == "" ? "0" : txtEntradaDadosConectorCF.Text) > 0)
                                                    {
                                                        input_find = txtEntradaDadosConectorCF.Text;
                                                        txtEntradaDadosConectorCF.Clear();
                                                        //this.lblVisorEntradaDadosConectorCF.Location = new System.Drawing.Point(157, 511);
                                                        lblVisorEntradaDadosConectorCF.Text = "CONFIRMA A GERAÇÃO DA INFORMAÇÃO - [ENTER]";
                                                        txtEntradaDadosConectorCF.CausesValidation = false;
                                                        txtEntradaDadosConectorCF.Select();
                                                    }
                                                    else
                                                    {
                                                        auxConsistencia = 0;
                                                        input_find = null;
                                                    }
                                                }
                                                else
                                                {
                                                    if (input_find != null)
                                                    {
                                                        //fiscal_retorno = conectorECF.Bematech_FI_ImprimeConfiguracoesImpressora();
                                                        functionECF.conectorECF_AbreRelatorioGerencial(alwaysVariables.ModeloEcf, input_find, ref fiscal_MSG, ref fiscal_retorno, alwaysVariables.ECF_Ligada);
                                                        //fiscal_retorno = conectorECF.Bematech_FI_AbreRelatorioGerencialMFD(input_find);
                                                        functionECF.conectorECF_RelatorioGerencial(alwaysVariables.ModeloEcf, "Perfil de requisitos configurado: X", ref fiscal_MSG, ref fiscal_retorno, alwaysVariables.ECF_Ligada);
                                                        //fiscal_retorno = conectorECF.Bematech_FI_RelatorioGerencial("Perfil de requisitos configurado: X");
                                                        functionECF.conectorECF_FechaRelatorioGerencial(alwaysVariables.ModeloEcf, ref fiscal_MSG, ref fiscal_retorno, alwaysVariables.ECF_Ligada);
                                                        //fiscal_retorno = conectorECF.Bematech_FI_FechaRelatorioGerencial();
                                                        if (fiscal_retorno == 1)
                                                        {
                                                            lblVisorEntradaDadosConectorCF.Text = "ENTRADA DE DADOS";
                                                            txtVisorMsgConectorCF.Text = "CONFIRA O RELATORIO...!";
                                                            txtEntradaDadosConectorCF.CausesValidation = true;
                                                            txtEntradaDadosConectorCF.Clear();
                                                            txtEntradaDadosConectorCF.Select();
                                                        }
                                                        else
                                                        {
                                                            auxConsistencia = 1;
                                                            txtVisorMsgConectorCF.Text = "ERRO NA EMISSAO DO DOCUMENTO...!";

                                                        }
                                                    }
                                                }


                                                break;
                                            case 18:
                                                conectorPDV_acion_sped();
                                                break;
                                            case 17:
                                                if (input_find == null)
                                                {
                                                    if (auxConsistencia == 0)
                                                    {
                                                        input_find = txtEntradaDadosConectorCF.Text;
                                                        txtEntradaDadosConectorCF.Clear();
                                                        //this.lblVisorEntradaDadosConectorCF.Location = new System.Drawing.Point(157, 511);
                                                        lblVisorEntradaDadosConectorCF.Text = "INFORME A DATA INICIAL - ddMMyyyy";
                                                        txtEntradaDadosConectorCF.CausesValidation = false;
                                                        txtEntradaDadosConectorCF.Select();
                                                    }
                                                    else
                                                    {
                                                        auxConsistencia = 0;
                                                        input_find = null;
                                                    }
                                                }
                                                else
                                                    if (input_di == null && txtEntradaDadosConectorCF.Text.Length == 8)
                                                    {
                                                        if (txtEntradaDadosConectorCF.Text != "")
                                                        {
                                                            input_di = txtEntradaDadosConectorCF.Text;
                                                            input_di = input_di.Insert(2, "/");
                                                            input_di = input_di.Insert(5, "/");
                                                            txtEntradaDadosConectorCF.Clear();
                                                            //this.lblVisorEntradaDadosConectorCF.Location = new System.Drawing.Point(157, 511);
                                                            lblVisorEntradaDadosConectorCF.Text = "INFORME A DATA FINAL - ddMMyyyy";
                                                            txtEntradaDadosConectorCF.CausesValidation = false;
                                                            txtEntradaDadosConectorCF.Select();
                                                        }
                                                        else
                                                        {
                                                            input_di = null;
                                                        }
                                                    }
                                                    else if (input_df == null && txtEntradaDadosConectorCF.Text.Length == 8)
                                                    {
                                                        if (txtEntradaDadosConectorCF.Text != "")
                                                        {
                                                            input_df = txtEntradaDadosConectorCF.Text;
                                                            input_df = input_df.Insert(2, "/");
                                                            input_df = input_df.Insert(5, "/");
                                                            txtEntradaDadosConectorCF.Clear();
                                                            //this.lblVisorEntradaDadosConectorCF.Location = new System.Drawing.Point(157, 511);
                                                            lblVisorEntradaDadosConectorCF.Text = "[ ENTER ] - CONFIRMA A GERAÇÃO DO ARQUIVO";
                                                            txtEntradaDadosConectorCF.CausesValidation = false;
                                                            txtEntradaDadosConectorCF.Select();
                                                            auxConsistencia = 0;
                                                        }
                                                        else
                                                        {
                                                            input_df = null;
                                                        }
                                                    }
                                                    else
                                                        if (auxConsistencia == 0 && input_find != null && input_di != null && input_df != null)
                                                        {
                                                            conector_main_PDVECF(fiscal_store, Convert.ToDateTime(input_di), Convert.ToDateTime(input_df), fiscal_numero_serie.Replace("\0", "").Trim(), 0, 0, 0);
                                                            txtEntradaDadosConectorCF.CausesValidation = true;
                                                            txtEntradaDadosConectorCF.Clear();
                                                            txtEntradaDadosConectorCF.Select();
                                                        }
                                                break;
                                        }

                                        txtEntradaDadosConectorCF.Select();
                                    }
                                }
                                else if (e.KeyCode == Keys.Escape && call_pdv == 8)
                                {
                                    conector_acao_controleMenu();
                                }
                                #endregion
                                break;
                            case 9:
                                #region
                                if (e.KeyCode == Keys.Enter && call_pdv == 9)
                                {
                                    if (txtPesquisaProduto.Text != "")
                                    {
                                        conectorPDV_find_consultaProduto(auxTipoConsulta);
                                    }
                                    else
                                    {
                                        txtPesquisaProduto.Select();
                                    }
                                }
                                else if (e.KeyCode == Keys.F2 && call_pdv == 9)
                                {
                                    conector_limpa_consulta();
                                    lblPesquisaDescricao.Text = "F5 - DESCRIÇÃO";
                                    lblPesquisaCodigo.Text = "F2 - CODIGO *";
                                    auxTipoConsulta = "2";
                                    txtPesquisaProduto.Select();
                                }
                                else if (e.KeyCode == Keys.F5 && call_pdv == 9)
                                {
                                    conector_limpa_consulta();
                                    lblPesquisaDescricao.Text = "F5 - DESCRIÇÃO *";
                                    lblPesquisaCodigo.Text = "F2 - CODIGO";
                                    auxTipoConsulta = "1";
                                    txtPesquisaProduto.Select();
                                }
                                else if (e.KeyCode == Keys.Back && call_pdv == 9)
                                {
                                    txtPesquisaProduto.Clear();
                                    txtPesquisaProduto.Select();
                                }
                                else if (e.KeyCode == Keys.F3 && call_pdv == 9)
                                {
                                    conector_limpa_consulta();
                                    txtPesquisaProduto.Select();
                                }
                                else if ((e.Control && e.KeyCode == Keys.W) && call_pdv == 9)
                                {
                                    pnlTotalConectorCF.Visible = false;
                                    txtEntradaDadosConectorCF.Clear();
                                    txtEntradaDadosConectorCF.Select();
                                    conector_load_PAFECF();
                                    auxConsistencia = 0;
                                    call_pdv = 8;
                                }
                                else if (e.KeyCode == Keys.Escape && call_pdv == 9)
                                {
                                    conector_acao_controleMenu();
                                }
                                #endregion
                                break;
                            case 10:
                                #region
                                if (call_pdv == 10 && txtNumeroNotaNFDEmitida.Text == "")
                                {
                                    txtNumeroNotaNFDEmitida.Select();
                                }
                                else if (call_pdv == 10 && e.KeyCode == Keys.Enter)
                                {
                                    if (txtNumeroNotaNFDEmitida.Text != "")
                                    {
                                        ProcessTabKey(true);
                                    }
                                }
                                else if (call_pdv == 10 && e.KeyCode == Keys.F9)
                                {
                                    if (auxIdCliente != "")
                                    {
                                        conectorPDV_inc_notad_item(txtNumeroNotaNFDEmitida.Text, txtItensNFDEmitida.Text, produto_descricao, txtQuantidadeNFDEmitida.Text.Replace(",", "."), produto_valor_unitario.Replace(",", "."), (Convert.ToDecimal(txtQuantidadeNFDEmitida.Text.Replace(",", ".")) * Convert.ToDecimal(produto_valor_unitario.Replace(",", "."))).ToString(), produto_unidade);
                                        if (auxConsistencia == 0)
                                        {
                                            conectorPDV_find_notad_itensD("2", txtNumeroNotaNFDEmitida.Text, 0);
                                            //POLIMIG conector_load_nota_D_itens(alwaysVariables.Store, txtItensNFDEmitida.Text, txtQuantidadeNFDEmitida.Text.Replace(",", "."), produto_valor_unitario, "0");
                                        }
                                    }
                                    txtQuantidadeNFDEmitida.Text = "0,000";
                                    txtItensNFDEmitida.Clear();
                                    txtItensNFDEmitida.Select();
                                }
                                else if (call_pdv == 10 && e.KeyCode == Keys.F10)
                                {
                                    if (lblNoClienteConectorCF.Text == "0")
                                    {
                                        consultaCliente consulta = new consultaCliente(alwaysVariables.Store, alwaysVariables.Usuario, fiscal_numero_caixa);

                                        if (consulta.ShowDialog() == DialogResult.OK)
                                        {
                                            auxIdCliente = consulta.GridCodigo;
                                            auxNomeRazao = consulta.GridNome;
                                            if (consulta.GridTypePessoa == 2)
                                            {
                                                auxNomeRazao = consulta.GridRazao;
                                                auxCPFCNPJ = consulta.GridCNPJ;
                                            }
                                            else
                                            {
                                                auxNomeRazao = consulta.GridNome;
                                                auxCPFCNPJ = consulta.GridCPF;
                                            }
                                            if (auxIdCliente != "")
                                            {
                                                lblNoClienteConectorCF.Text = auxIdCliente;
                                            }
                                            txtNumeroNotaNFDEmitida.Select();
                                        }
                                        else
                                        {
                                            lblNoClienteConectorCF.Text = "0";
                                            auxIdCliente = "";
                                        }
                                    }
                                    else
                                    {

                                    }
                                }
                                else if (e.Control && e.KeyCode == Keys.O && call_pdv == 10 && pnlNotaDConectorCF.Visible == true)
                                {
                                    if (lblNoClienteConectorCF.Text != "0" && lblNoClienteConectorCF.Text != "" && txtNumeroNotaNFDEmitida.Text != "")
                                    {
                                        if (alwaysVariables.Perfil == "W" || alwaysVariables.Perfil == "V")
                                        {
                                            NotaNumber = txtNumeroNotaNFDEmitida.Text.PadLeft(10, '0');
                                            txtVisorMsgConectorCF.Text = "MENU";
                                            this.pnlNotaDConectorCF.Size = new System.Drawing.Size(1, 1);
                                            this.pnlNotaDConectorCF.Location = new System.Drawing.Point(1266, 603);
                                            this.pnlNotaDConectorCF.Visible = false;
                                            resetLabel_interface();
                                            txtEntradaDadosConectorCF.Clear();
                                            txtEntradaDadosConectorCF.ReadOnly = false;
                                            txtEntradaDadosConectorCF.CausesValidation = true;
                                            txtEntradaDadosConectorCF.Select();
                                            call_pdv = 0;
                                            return;
                                        }
                                        else
                                        {
                                            conectorPDV_interface_notaFiscalD(false);
                                            txtEntradaDadosConectorCF.Clear();
                                            txtEntradaDadosConectorCF.ReadOnly = false;
                                            txtEntradaDadosConectorCF.CausesValidation = true;
                                            txtEntradaDadosConectorCF.Select();
                                            call_pdv = 1;
                                            /*if (fiscal_data_movimento.Trim() == "")
                                            {
                                                if (Convert.ToDouble(conectorPDV_find_itensD(txtNumeroNotaNFDEmitida.Text)) > 0)
                                                {
                                                    conectorPDV_interface_notaFiscalD(false);

                                                }
                                            }
                                            else
                                            {
                                                txtVisorMsgConectorCF.Text = "CAIXA ABERTO";
                                                this.pnlNotaDConectorCF.Size = new System.Drawing.Size(1, 1);
                                                this.pnlNotaDConectorCF.Location = new System.Drawing.Point(1266, 603);
                                                this.pnlNotaDConectorCF.Visible = false;
                                                txtEntradaDadosConectorCF.Clear();
                                                txtEntradaDadosConectorCF.ReadOnly = false;
                                                txtEntradaDadosConectorCF.CausesValidation = true;
                                                txtEntradaDadosConectorCF.Select();
                                                call_pdv = 0;
                                            }*/
                                        }
                                    }
                                    else
                                    {
                                        msg = new msgInfo("CABEÇALHO INCOMPLETO...!"); msg.ShowDialog();
                                        txtNumeroNotaNFDEmitida.Select();
                                    }
                                }
                                else if (e.Control && e.KeyCode == Keys.F10 && call_pdv == 10)
                                {
                                    if (Convert.ToDouble(conectorPDV_find_itensD(txtNumeroNotaNFDEmitida.Text.Replace(",", ".") == "" ? "0" : txtNumeroNotaNFDEmitida.Text.Replace(",", "."))) > 0)
                                    {
                                        conectorPDV_inc_notad_item(txtNumeroNotaNFDEmitida.Text, txtItensNFDEmitida.Text, produto_descricao, produto_qtty, produto_valor_unitario, (Convert.ToDecimal(produto_qtty.Replace(",", "")) * Convert.ToDecimal(produto_valor_unitario.Replace(",", ""))).ToString(), produto_unidade);
                                    }
                                    else
                                    {
                                        msg = new msgInfo("CABEÇALHO INCOMPLETO...!"); msg.ShowDialog();
                                        txtNumeroNotaNFDEmitida.Select();
                                    }
                                }
                                else if (e.KeyCode == Keys.F2 && call_pdv == 10)
                                {
                                    if (lblNoClienteConectorCF.Text != "0" && lblNoClienteConectorCF.Text != "" && txtNumeroNotaNFDEmitida.Text != "")
                                    {
                                        txtItensNFDEmitida.Select();
                                        txtItensNFDEmitida.Enabled = true;
                                    }
                                    else
                                    {
                                        msg = new msgInfo("CABEÇALHO INCOMPLETO...!"); msg.ShowDialog();
                                        txtNumeroNotaNFDEmitida.Select();
                                    }
                                }
                                else if (e.KeyCode == Keys.F3 && call_pdv == 10)
                                {
                                    if (lblNoClienteConectorCF.Text != "0" && lblNoClienteConectorCF.Text != "" && txtNumeroNotaNFDEmitida.Text != "")
                                    {
                                        txtQuantidadeNFDEmitida.Select();
                                    }
                                    else
                                    {

                                    }
                                }
                                else if ((e.Control && e.KeyCode == Keys.W) && call_pdv == 10)
                                {
                                    conector_load_PAFECF();
                                }
                                else if (call_pdv == 10 && e.KeyCode == Keys.Escape)
                                {
                                    txtAutorizacaoSenhaConectorCF.CausesValidation = false;
                                    txtAutorizacaoUsuarioConectorCF.CausesValidation = false;
                                    txtAutorizacaoSenhaConectorCF.Text = "";
                                    txtAutorizacaoUsuarioConectorCF.Text = "";
                                    txtAutorizacaoUsuarioConectorCF.Select();
                                    txtAutorizacaoSenhaConectorCF.CausesValidation = true;
                                    txtAutorizacaoUsuarioConectorCF.CausesValidation = true;
                                    conector_acao_controleMenu();
                                    conectorPDV_interface_notaFiscalD(false);
                                    call_pdv = 1;
                                }
                                else if (e.KeyCode == Keys.Escape && call_pdv == 10)
                                {
                                    conector_acao_controleMenu();
                                }
                                else
                                {
                                    conector_acao_controleMenu();
                                }
                                #endregion
                                break;
                            case 11:
                                #region
                                if ((e.Control && e.KeyCode == Keys.W) && call_pdv == 11)
                                {
                                    conector_load_PAFECF();
                                }
                                #endregion
                                break;
                            case 12:
                                break;
                            default:
                                break;
                        }


                        #region
                        if (e.KeyCode == Keys.Escape)
                        {
                            txtEntradaDadosConectorCF.MaxLength = 14;//MG.011
                            if (pnlNfce.Visible == true)
                            {
                                /*if (call_pdv == 7)
                                {
                                    conector_acao_controleMenu();
                                }else*/
                                if (call_pdv == 8)
                                {
                                    conector_interface_menuFiscal(false);
                                    call_pdv = 12;
                                    txtEntradaDadosConectorCF.Visible = false;
                                    lblVisorEntradaDadosConectorCF.Visible = false;
                                    call_funcao = 0;
                                    pnlConsultaProduto.Visible = false;
                                    this.pnlConsultaProduto.Size = new System.Drawing.Size(1, 1);
                                    this.pnlConsultaProduto.Location = new System.Drawing.Point(1268, 608);
                                    pgbWaitReservaConectorCF.Minimum = 0;
                                    flagDataAtual = String.Format("{0:ddMMyy}", DateTime.Now);
                                    call_finalizadora = null;
                                    resetFinanceiro();
                                    //this.pnlNfce.Size = new System.Drawing.Size(1277, 700);
                                    this.pnlNfce.Size = new System.Drawing.Size(1150, 526);
                                    this.pnlNfce.Location = new System.Drawing.Point(0, 0);
                                    this.pnlNfce.Visible = true;
                                    pnlModoOperacao.Visible = false;
                                    txtVisorNfce.Text = "MODO NFCe";
                                    alwaysVariables.ModoOperacao = 0;
                                    txtEntradaDadosNF.Select();
                                }
                                else
                                {
                                    conector_acao_controleMenu();
                                }
                            }
                        }
                        else if (e.KeyCode == Keys.End)
                        {//Provisorio Akitem
                            functionECF.conectorECF_AcionaGaveta(alwaysVariables.ModeloEcf, ref fiscal_MSG, ref fiscal_retorno, alwaysVariables.ECF_Ligada);
                            functionECF.VerificaEstadoGaveta(alwaysVariables.ModeloEcf, ref fiscal_MSG, ref gaveta, ref fiscal_retorno, alwaysVariables.ECF_Ligada);
                            if (gaveta == 0)
                            {
                                //Estado = 1 sensor em nível 1 (fechada)
                                //Estado = 0 sensor em nível 0 (aberta)
                                msg = new msgInfo("INFORMAÇÃO DO SISTEMA! GAVETA ABERTA."); msg.ShowDialog(); auxConsistencia = 1;
                            }
                        }
                        else if (e.KeyCode == Keys.F12 && alwaysVariables.Recebimento == "s")
                        {
                            valuesAcresDesc = "    ";
                            acresDesc = " ";
                            ataque = 0;
                            if (String.Format("{0:ddMMyy}", DateTime.Now) == fiscal_data_movimento)
                            {
                                if (Convert.ToInt32(lbOperadorConectorCF.Text == "" ? "0" : lbOperadorConectorCF.Text) > 0)
                                {
                                    if (Convert.ToDouble(fiscal_data_movimento.Replace("\0", "").Trim() == "" ? "0" : fiscal_data_movimento) > 0)
                                    {
                                        if (fiscal_flag == 32 || fiscal_flag == 0 || fiscal_flag == 4 || fiscal_flag == 36)
                                        {
                                            if (pnlTotalConectorCF.Visible == false)
                                            {
                                                if (pnlAutorizacaoPDVConectorCF.Visible == false && pnlConsultaProduto.Visible == false)
                                                {
                                                    if (call_pdv == 0)
                                                    {
                                                        txtEntradaDadosConectorCF.CausesValidation = false;
                                                        returnDefaultPDV();
                                                        conector_interface_crediario(false);
                                                        txtEntradaDadosConectorCF.CausesValidation = true;
                                                        txtLojaConectorCF.Select();
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                            else
                            {
                                msg = new msgInfo("DATA DA IMPRESSORA DIFERENTE DA DATA DO SISTEMA,\n VERIFIQUE O STATUS DA IMPRESSORA,\n MOVIMENTO DO DIA VESUS DATA IMPRESSORA,\n AGUARDANDO EMISSÃO DA LEITURA Z."); msg.ShowDialog();
                                txtEntradaDadosConectorCF.Select();
                            }
                        }
                        else if (e.Control && e.KeyCode == Keys.W)
                        {
                            conector_load_PAFECF();
                        }
                        #endregion //Flavio

                    }
                    else
                    {
                        if (call_pdv == 0)
                        {
                            functionECF.conectorECF_fiscal_flag(alwaysVariables.ModeloEcf, ref fiscal_flag, ref fiscal_MSG, ref fiscal_retorno, alwaysVariables.ECF_Ligada);
                            if (fiscal_flag == 1 || fiscal_flag == 33 || fiscal_flag == 32 || fiscal_flag == 0)
                            {
                                msgInfo msg = new msgInfo(1, "Caro Cliente - " + "ERRO FATAL GRANDE TOTAL INVÁLIDO OU NÃO ENCONTRADO! SOLICITE A AUTORIZAÇÃO PARA GERAÇÃO DO GRANDE TOTAL"); msg.ShowDialog();
                                conector_acao_cancelaCupom();
                                conector_acao_controleMenu();
                                txtEntradaDadosConectorCF.CausesValidation = true;
                                call_pdv = 1;
                                call_funcao = 0;
                            }
                            else
                            {
                                call_pdv = 1;
                                call_funcao = 0;
                            }
                        }
                        else
                        {
                            if (call_pdv != 1 && call_pdv != 8)
                            {
                                msgInfo msg = new msgInfo(1, "Caro Cliente - " + "ERRO FATAL GRANDE TOTAL INVÁLIDO OU NÃO ENCONTRADO! SOLICITE A AUTORIZAÇÃO PARA GERAÇÃO DO GRANDE TOTAL");
                                if(alwaysVariables.flagHomologacao == "1"){ msg.ShowDialog();}
                                txtVisorMsgConectorCF.Text = "ERRO GRANDE TOTAL";
                            }
                            else
                            {
                                txtVisorMsgConectorCF.Text = "ERRO GRANDE TOTAL";
                            }
                        }
                        txtEntradaDadosConectorCF.Select();
                    }
                }
                else if (!File.Exists(folderMFDGrand + "\\grandFullPDV" + ".enc") && e.KeyCode == Keys.Escape && arranqueTotal == 0)
                {
                    fiscal_flag = 0;
                    functionECF.conectorECF_fiscal_flag(alwaysVariables.ModeloEcf, ref fiscal_flag, ref fiscal_MSG, ref fiscal_retorno, alwaysVariables.ECF_Ligada);
                    if (fiscal_flag == 0 || fiscal_flag == 32)
                    {
                        conector_acao_controleMenu();
                    }
                }
                else if (!File.Exists(folderMFDGrand + "\\grandFullPDV" + ".enc") && e.KeyCode == Keys.W && arranqueTotal == 0)
                {
                    if (fiscal_flag != 1 && fiscal_flag != 35 && fiscal_flag != 33)
                    {
                        conector_load_PAFECF();
                    }
                }
                else if (!File.Exists(folderMFDGrand + "\\grandFullPDV" + ".enc") && e.KeyCode == Keys.Enter && call_pdv != 1 && arranqueTotal == 0)
                {
                    
                    conectorPDV_find_operador();
                    cryptografia.conectorPDV_GT(String.Format("{0:yyyyMMdd}", Convert.ToDateTime(fiscal_data_movimento.Substring(0, 2) + "/" + fiscal_data_movimento.Substring(2, 2) + "/" + String.Format("{0:ddMMyyyy}", DateTime.Now).Substring(4, 2) + fiscal_data_printer.Substring(4, 2))), fiscal_store, fiscal_numero_caixa, banco_sequencia, banco_operado, fiscal_numero_serie);
                    functionECF.conectorECF_GrandeTotal(alwaysVariables.ModeloEcf, ref fiscal_GT, ref fiscal_MSG, ref fiscal_retorno, alwaysVariables.ECF_Ligada);
                    //fiscal_retorno = conectorECF.Bematech_FI_GrandeTotal(ref fiscal_GT);
                    if (arranqueTotal == 0 || cryptografia.conectorPDV_aut_grandTotal(fiscal_GT) == true)
                    {
                        msg = new msgInfo(1, "OPERACAO CANCELADA."); msg.ShowDialog();
                        txtVisorMsgConectorCF.Text = "ERRO GRANDE TOTAL";
                        txtEntradaDadosConectorCF.Clear();
                        txtEntradaDadosConectorCF.Select();
                    }
                    else
                    {
                        txtVisorMsgConectorCF.Text = "GRANDE TOTAL - REPARADO";
                        cryptografia.conectorPDV_serie(alwaysVariables.PAF_total + "\\grandFullPDV" + ".txt", "1");
                    }
                }
                else
                {
                    if (call_pdv != 8 && call_pdv != 9)
                    {
                        if (e.Control && e.KeyCode == Keys.F || e.KeyCode == Keys.F)
                        {
                            conector_call_consulta();
                        }
                        else if ((!(e.Control && e.KeyCode == Keys.W) && !(e.Control)) || (e.KeyCode == Keys.Enter))
                        {
                            if (call_pdv != 0 || (e.KeyCode == Keys.Enter))
                            {
                                conector_retorno_ack();
                            }

                            flagParada++;

                            if (flagParada >= 22)
                            {
                                conector_retorno_ack();
                                msg = new msgInfo(1,"POR QUESTÃO DE SEGURANÇA O PROGRAMA SERÁ ENCERRADO, VERIFIQUE OS PERIFERICOS."); msg.ShowDialog();
                                this.DialogResult = DialogResult.Cancel;
                                conector_stop_thread();
                                this.Dispose();
                            }
                            else if (!File.Exists(folderMFDGrand + "\\grandFullPDV" + ".enc") && arranqueTotal == 0)
                            {
                                if (!File.Exists(folderMFDGrand + "\\grandFullPDV" + ".enc") && arranqueTotal == 0)
                                {
                                    txtVisorMsgConectorCF.Text = "ERRO GRANDE TOTAL";
                                    cryptografia.conectorPDV_serie(alwaysVariables.PAF_total + "\\grandFullPDV" + ".txt", "1");
                                    txtVisorMsgConectorCF.Text = "GRANDE TOTAL REPARADO";
                                }
                            }
                        }
                        else
                        {
                            fiscal_flag = 0;
                            functionECF.conectorECF_fiscal_flag(alwaysVariables.ModeloEcf, ref fiscal_flag, ref fiscal_MSG, ref fiscal_retorno, alwaysVariables.ECF_Ligada);

                            if (fiscal_flag != 1 && fiscal_flag != 35 && fiscal_flag != 33)
                            {
                                conector_load_PAFECF();
                            }
                        }
                    }
                }
            }
            else
            {
                if ((e.KeyCode == Keys.Enter && call_pdv == 12) || (e.KeyCode == Keys.Enter && call_pdv == 0) || (e.KeyCode == Keys.Enter && call_pdv == 1) || (e.KeyCode == Keys.Enter && call_pdv == 3) || (e.KeyCode == Keys.Enter && call_pdv == 4) || (e.KeyCode == Keys.Enter && call_pdv == 7) || (e.KeyCode == Keys.Enter && call_pdv == 8))
                {
                    ProcessTabKey(true);
                    if (IsConnected() == true)
                    {
                        this.lblConexaoRede.ForeColor = System.Drawing.Color.Green;
                        lblConexaoRede.Text = "ON-LINE";
                    }
                    else
                    {
                        this.lblConexaoRede.ForeColor = System.Drawing.Color.Red;
                        lblConexaoRede.Text = "OFF-LINE";
                    }
                    if (pnlAutorizacaoPDVConectorCF.Visible == false)
                    {
                        if (lblStatusNfce.Text == "FECHADA")
                        {
                            txtEntradaDadosNF.ReadOnly = true;
                        }
                        else
                        {
                            txtEntradaDadosNF.ReadOnly = false;
                        }
                        if (call_pdv != 3)
                        {
                            txtEntradaDadosNF.Select();   
                        }

                        if (call_pdv == 3)
                        {
                            ProcessTabKey(true);
                            switch (call_finalizadora)
                            {
                                case "D":
                                    conector_finalizadora_dinheiro();
                                    break;
                                case "H":
                                    conector_finalizadora_cheque();
                                    break;
                                case "O":
                                    conector_finalizadora_convenio();
                                    break;
                                case "C": // FINALIZADORA CREDIARIO
                                    conector_finalizadora_crediario();
                                    break;
                                case "V": //FINALIZADORA VALE
                                    conector_finalizadora_vale();
                                    break;
                                case "R": //FINALIZADORA RECEBIMENTO
                                    conector_finalizadora_recebimento();
                                    break;
                                case "B": //FINALIZADORA BOLETO
                                    conector_finalizadora_boleto();
                                    break;
                                case "U": //FINALIZADORA DUPLICATA
                                    conector_finalizadora_duplicata();
                                    break;
                                case "E": //FINALIZADORA CARTAO CREDITO
                                    conector_finalizadora_cartaoCredito("1", "1");
                                    break;
                                case "A": //FINALIZADORA CARTAO DEBITO
                                    conector_finalizadora_cartaoDebito();
                                    break;
                            }
                        }
                    }
                }
                else if (e.KeyCode == Keys.Escape && alwaysVariables.ModoOperacao == 0)
                {
                    if (call_pdv == 3)
                    {
                        call_finalizadora = null;
                        typeDescAcre = 0;
                        conector_reset_discount();
                        fechaMoneyObj(false);
                        resetFinanceiro();
                        call_pdv = 12;
                        btnFinalizadoraDinheiroConectorCF.Select();
                        ProcessTabKey(true);
                        this.pnlTotalConectorCF.Size = new System.Drawing.Size(1, 1);
                        this.pnlTotalConectorCF.Location = new System.Drawing.Point(746, 607);
                        this.pnlTotalConectorCF.Visible = false;
                        lblVisorEntradaDadosConectorCF.Text = "ENTRADA DE DADOS";
                        txtDescricaoNf.Enabled = true;
                        txtEntradaDadosNF.Enabled = true;
                        txtEntradaDadosNF.ReadOnly = false;
                        txtEntradaDadosNF.Clear();
                        //txtEntradaDadosConectorCF.CausesValidation = false;
                        txtEntradaDadosNF.CausesValidation = true;
                        if (alwaysVariables.ModoOperacao == 1)
                        {
                            txtEntradaDadosConectorCF.Select();
                        }
                        else
                        {
                            txtEntradaDadosNF.Select();
                        }
                        /* Verifica status da ECF */
                        txtVisorNfce.Text = "NFC-e";
                    }
                }else if (e.KeyCode == Keys.Space && call_pdv == 3  && alwaysVariables.ModoOperacao == 0)
                {
                    if (Convert.ToDecimal(lblRestanteMoneyConectorCF.Text.Replace(",",".")) == 0 && call_pdv == 3 && alwaysVariables.ModoOperacao == 0)
                    {
                        /* Trecho NFC-e*/
                        msg = new msgInfo(1, "INICIO DA GERAÇÃO NFC-e"); msg.ShowDialog();
                        auxNumeroNota = null;
                        auxSerieNota = null;
                        auxLoteNota = null;
                        auxChaveNota = null;
                        if(conector_webservice_nfce_numeroNota(alwaysVariables.Store, ref auxNumeroNota, ref auxSerieNota, ref auxLoteNota, ref auxChaveNota))
                        {//Atualiza numero nota e serie loja //Flavio Obs.:
                            if (auxSerieNota != "")
                            {
                                if (auxNumeroNota != "")
                                {
                                    conectorPDV_gera_nfItemTwo(pedido, "1", auxChaveNota);
                                    //Homologacao Eric/Lisiane d2-d3 conectorPDV_find_dav(1, reserva_number);
                                    if (auxConsistencia == 0)
                                    {
                                        #region
                                        this.lblVisorEntradaDadosConectorCF.Location = new System.Drawing.Point(235, 511);
                                        if (String.Format("{0:ddMMyy}", DateTime.Now) == fiscal_data_movimento || alwaysVariables.ModoOperacao == 0)
                                        {
                                            /*Responsavel por arquivar os movimentos
                                                                                    Cria senao existir
                                                                                 */
                                            Directory.CreateDirectory(folderMaster);
                                            Directory.CreateDirectory(folderMFD);
                                            Directory.CreateDirectory(folderMFDGrand);
                                            Directory.CreateDirectory(folderSlave);
                                            Directory.CreateDirectory(folderSlave + "\\" + fiscal_data_movimento);

                                            txtAutorizacaoUsuarioConectorCF.CausesValidation = true;
                                            if (Convert.ToDecimal(lblRestanteMoneyConectorCF.Text.Replace(",",".")) == 0 && call_pdv == 3)
                                            {
                                                if (Convert.ToDecimal(lblRecebidoMoneyConectorCF.Text.Replace(",", ".")) >= Convert.ToDecimal(lblTotalMoneyConectorCF.Text.Replace(",", ".")))
                                                {   
                                                    conector_pgto_NFCe(vetorTotal, lblTotalMoneyConectorCF.Text.Replace(",", "."), lblRecebidoMoneyConectorCF.Text.Replace(",", "."), lblMoneyTrocoConectorCF.Text.Replace(",", "."));
                                                    resetFinanceiro();
                                                    this.pnlTotalConectorCF.Visible = false;
                                                    lblVisorEntradaDadosConectorCF.Text = "ENTRADA DE DADOS";
                                                    //Flavio = pedido = "0";
                                                    vetorReservaFinanceiro = null;
                                                    vetorReservaFinanceiro = new string[12] { "#", "#", "#", "#", "#", "#", "#", "#", "#", "#", "#", "#" };
                                                    txtDescricaoItemConectorCF.Enabled = true;
                                                    txtEntradaDadosConectorCF.ReadOnly = false;
                                                    txtEntradaDadosConectorCF.Clear();
                                                    txtEntradaDadosConectorCF.Enabled = true;
                                                    if (alwaysVariables.ModoOperacao == 1)
                                                    {
                                                        txtEntradaDadosConectorCF.Select();
                                                    }
                                                    else
                                                    {
                                                        txtEntradaDadosNF.Select();
                                                    }//Faz a saida do financeiro
                                                    call_pdv = 3;
                                                    ProcessTabKey(true);
                                                    call_pdv = 0;
                                                    call_funcao = 0;
                                                    sequenciaItem = "0".PadLeft(3, '0');
                                                    sequenciaItemAle = "0".PadLeft(3, '0');
                                                    last_valor_item = "";
                                                    last_qtty_item = "";
                                                    typeDescAcre = 0;
                                                    txtEntradaDadosConectorCF.CausesValidation = true;
                                                    txtEntradaDadosConectorCF.Select();
                                                    if (fiscal_flag == 33 || fiscal_flag == 1)
                                                    {
                                                        txtVisorMsgConectorCF.Text = "CUPOM FISCAL ABERTO";
                                                    }
                                                    else if (fiscal_flag == 32)
                                                    {
                                                        txtVisorMsgConectorCF.Text = "CAIXA ABERTO";
                                                    }
                                                }
                                                conector_reset_input();
                                            }

                                            else if ((call_pdv == 0 || call_pdv == 1) && pnlAutorizacaoPDVConectorCF.Visible == true)
                                            {
                                                txtAutorizacaoSenhaConectorCF.CausesValidation = false;
                                                txtAutorizacaoUsuarioConectorCF.CausesValidation = false;
                                                txtAutorizacaoSenhaConectorCF.Text = "";
                                                txtAutorizacaoUsuarioConectorCF.Text = "";
                                                txtAutorizacaoUsuarioConectorCF.Select();
                                                txtAutorizacaoSenhaConectorCF.CausesValidation = true;
                                                txtAutorizacaoUsuarioConectorCF.CausesValidation = true;
                                            }
                                        }
                                        else
                                        {
                                            msg = new msgInfo("DATA DA IMPRESSORA DIFERENTE DA DATA DO SISTEMA,\n VERIFIQUE O STATUS DA IMPRESSORA,\n MOVIMENTO DO DIA VESUS DATA IMPRESSORA,\n AGUARDANDO EMISSÃO DA LEITURA Z."); msg.ShowDialog();
                                            /*listaFormasPagamento.Add(FormasPagamento);
                                            listaFormasPagamento[0].pag_tPag = "01";
                                            listaFormasPagamento[0].pag_vPag = lblRecebidoMoneyConectorCF.Text.Replace(",", ".");
                                            listaFormasPagamento[0].numeroNotaFiscal = auxNumeroNota;*/
                                            txtEntradaDadosConectorCF.Select();
                                        }
                                        #endregion
                                        listaEnviaLote.Add(EnvioNfeLote);
                                        listaEnviaLote[0].idlote = auxLoteNota;
                                        listaEnviaLote[0].indSinc = "1";


                                        /*Export Item NfImposto*/
                                        workObject.modoPdv(true); //Para rotina loop
                                        strCupom = "";
                                        instrucao.setVetorCupom();
                                        strCupom = instrucao.getNfImposto(alwaysVariables.UserName, alwaysVariables.Senha, auxChaveNota, String.Format("{0:yyyyMMdd}", DateTime.Now), auxLoteNota);
                                        instrucao.carregaInstrucaoMovimentoVenda(instrucao._nfImposto, strCupom, 0);
                                        instrucao.compactScript(instrucao._nfImposto, "nfImposto");
                                        /**End Impostos*/
                                        if (alwaysVariables.ModoOperacao == 0)
                                        {
                                            string MSG = "MD-5: " + alwaysVariables.MD5VALIDO.Replace("\0", "").Trim();
                                            MSG = MSG.Replace("\0", "").Trim().Substring(0, 37);
                                            listaInformacoesAdicionaisNFe.Add(new dadosInformacoesAdicionaisNFe(null, MSG, null, null, null, null, null, null, auxChaveNota));
                                        }

                                        geraNFe geraNotaFiscalEletronica = new geraNFe();
                                        geraNotaFiscalEletronica.geraNotaFiscalEletronica(1, listaIdentificacaoNfe, listaDocumentoFiscalDiferenciado, listaIdentificacaoEmitenteNfe,
                                            listaIdentificacaoDestinatarioNfe, listaIdentificacaoLocalRetirada, listaIdentificacaoLocalEntrega, listaAutorizacaoObterXml,
                                            listaDetalhamentoProdutosNfe, listaProdutosServicosNfe, listaProdutosServicosDeclaracaoImportacao, listaProdutosServicosGrupoExportacao,
                                            listaProdutosServicosPedidoCompra, listaProdutosServicosGrupoDiversos, listaDetalhamentoEspecificoVeiculosNovos, listaDetalhamentoEspecificoMedicamentoMateriasPrimasFarmaceuticas,
                                            listaDetalhamentoEspecificoArmamentos, listaDetalhamentoEspecificoCombustiveis, listaDetalhamentoEspecificoOperacaoPapelImune, listaTributosIncidentesProdutoServico,
                                            listaICMSNormalST, listaImpostoProdutosIndustrializados, listaImpostoImportacao, listaPis, listaPisST, listaCofins, listaCofinsST, listaISSQN,
                                            listaTributosDevolvidos, listaInformacoesAdicionais, listaTotalNFe, listaTotalNFeISSQN, listaTotalNFeRetencaoTributos, listaInformacoesTransporteNFe,
                                            listaDadosCobranca, listaFormasPagamento, listaInformacoesAdicionaisNFe, listaInformacoesComercioExterior, listaInformacoesCompras,
                                            listaInformacoesRegistroAquisicaoCana, listaAssinatura, listaEnviaLote);

                                        workObject.modoPdv(false); //Libera rotina loop

                                        if (alwaysVariables.CodigoMsg.Trim() == "104" || alwaysVariables.CodigoMsg.Trim() == "100")
                                        {
                                            byte[] dataNew = Encoding.Default.GetBytes(listaIdentificacaoNfe[0].ide_dhEmi);
                                            var hexDataString = BitConverter.ToString(dataNew);
                                            hexDataString = hexDataString.Replace("-", "");

                                            byte[] digestNew = Encoding.Default.GetBytes(alwaysVariables.DigestValue);
                                            var hexDisgestString = BitConverter.ToString(digestNew);
                                            hexDisgestString = hexDisgestString.Replace("-", "");

                                            alwaysVariables.Link_Code_QR = "chNFe=" + alwaysVariables.chaveNfce + "&nVersao=100" + "&tpAmb=" + listaIdentificacaoNfe[0].ide_tpAmb + "&cDest=" + auxCPFCNPJ + "&dhEmi=" + hexDataString + "&vNF=" + listaTotalNFe[0].total_ICMSTot_vNF + "&vICMS=" + listaTotalNFe[0].total_ICMSTot_vICMS + "&digVal=" + hexDisgestString + "&cIdToken=000001";

                                            byte[] data = ASCIIEncoding.ASCII.GetBytes(alwaysVariables.Link_Code_QR);// new byte[1024];
                                            byte[] result;
                                            SHA1 sha = new SHA1CryptoServiceProvider();

                                            result = sha.ComputeHash(Encoding.Default.GetBytes(alwaysVariables.Link_Code_QR));

                                            string retorno = BitConverter.ToString(sha.ComputeHash(result)).Replace("-", "").ToUpper();

                                            alwaysVariables.Link_Code_QR = alwaysVariables.Link_Code_QR + "&cIdToken=000001&cHashQRCode=" + retorno;

                                            conectorPDV_update_status_reservaTemp(pedido, alwaysVariables.Store, "5", "4");

                                            //conector_update_lineMD5_d03_descricaoItem(idPedido, idLoja, conectorPDV_PAFECF_indicador_DAV("A", idPedido, String.Format("{0:yyyyMMdd}", DateTime.Now), idLoja, idProduto, sequencial), idProduto, sequencial);

                                            auxIdCliente = "";
                                            pedido = "";
                                            lblNomeRazaoNfce.Text = "";
                                            lblTotalNfec.Text = "0,00";
                                            lblCodigoConsumidorNfce.Text = "";
                                            lblEnderecoPessoaNfce.Text = "";
                                            this.lblStatusNfce.ForeColor = System.Drawing.Color.Red;
                                            lblStatusNfce.Text = "FECHADA";
                                            txtTitleNFce.Clear();
                                            txtDescricaoNf.Clear();
                                        }
                                        else
                                        {
                                            msg = new msgInfo("Caro usuário: " + alwaysVariables.MotivoNfce); msg.ShowDialog();
                                            if (flagFormaFinalizacao == "D" && Convert.ToDouble(flagDav.Trim()) > 0)
                                            {
                                                conectorPDV_carrega_registroD(1, Convert.ToDouble(flagDav.Trim()).ToString());
                                            }
                                            //Cancelamento reserva
                                            auxIdCliente = "";
                                            pedido = "";
                                            lblNomeRazaoNfce.Text = "";
                                            lblTotalNfec.Text = "0,00";
                                            lblCodigoConsumidorNfce.Text = "";
                                            lblEnderecoPessoaNfce.Text = "";
                                            this.lblStatusNfce.ForeColor = System.Drawing.Color.Red;
                                            lblStatusNfce.Text = "FECHADA";
                                            txtTitleNFce.Clear();
                                            txtDescricaoNf.Clear();
                                            conectorPDV_update_status_reservaTemp(pedido == "0" ? reserva_number : pedido, alwaysVariables.Store, "5", "4");
                                            auxConsistencia = 1;
                                            conector_reset_listas();
                                        }

                                    }
                                    else
                                    {
                                        msg = new msgInfo(1, "NFC-e rejeitada pelo serviço, verifique o protocolo de retorno...!"); msg.ShowDialog();
                                        conector_clear_reserva_nfce(0);
                                        if (flagFormaFinalizacao == "D" && Convert.ToDouble(flagDav.Trim()) > 0)
                                        {
                                            conectorPDV_carrega_registroD(1, Convert.ToDouble(flagDav.Trim()).ToString());
                                        }
                                    }
                                    if (auxConsistencia == 0 &&
                                        (alwaysVariables.CodigoMsg.Trim() == "104" || alwaysVariables.CodigoMsg.Trim() == "100"))
                                    {
                                        conector_update_notaFiscal(auxNumeroNota, auxSerieNota, auxChaveNota, alwaysVariables.chaveNfce, alwaysVariables.Store,alwaysVariables.ProtocoloNfce,alwaysVariables.MotivoNfce,alwaysVariables.versaoNfce,alwaysVariables.dataAutorizaNfce,"","","");
                                    }
                                    conector_reset_listas(); conector_clear_reserva_nfce(0);

                                    alwaysVariables.MotivoNfce = "";
                                    alwaysVariables.CodigoMsg = "";

                                }
                                else
                                {
                                    msg = new msgInfo(1, "Nota fora de alcance tente novamente, caso persista entre em contato com o administrador...!"); msg.ShowDialog();
                                    conector_reset_listas();
                                    auxIdCliente = "";
                                    pedido = "";
                                    flagPreVenda = "0";
                                    flagDav = "0";
                                    lblNomeRazaoNfce.Text = "";
                                    lblTotalNfec.Text = "0,00";
                                    lblCodigoConsumidorNfce.Text = "";
                                    lblEnderecoPessoaNfce.Text = "";
                                    this.lblStatusNfce.ForeColor = System.Drawing.Color.Red;
                                    lblStatusNfce.Text = "FECHADA";
                                    txtTitleNFce.Clear();
                                    txtDescricaoNf.Clear();
                                }
                            }
                            else
                            {
                                msg = new msgInfo(1, "Serie da nota não definida, operação cancelada...!"); msg.ShowDialog();
                            }

                        }
                        else
                        {
                            msg = new msgInfo(1, "TERMINAL FORA DO ALCANCE DO SERVIÇO WEB, A CONTINGENCIA SERÁ ACIONADA..."); msg.ShowDialog();
                            if (flagFormaFinalizacao == "D" && Convert.ToDouble(flagDav.Trim()) > 0)
                            {
                                conectorPDV_carrega_registroD(1, Convert.ToDouble(flagDav.Trim()).ToString());
                            }
                            conector_clear_reserva_nfce(1);
                        }
                        /* End Treco NFC-e*/
                        resetFinanceiro();
                        this.pnlTotalConectorCF.Visible = false;
                        lblVisorEntradaDadosConectorCF.Text = "ENTRADA DE DADOS";
                        pedido = "0";
                        flagPreVenda = "0";
                        flagDav = "0";
                        this.lblStatusNfce.ForeColor = System.Drawing.Color.Red;
                        lblStatusNfce.Text = "FECHADA";
                        txtTitleNFce.Clear();
                        txtDescricaoNf.Clear();
                        txtVisorNfce.Text = "CAIXA LIVRE";
                        txtSubTotalNfce.Text = "0,00";
                        vetorReservaFinanceiro = null;
                        vetorReservaFinanceiro = new string[12] { "#", "#", "#", "#", "#", "#", "#", "#", "#", "#", "#", "#" };
                        txtDescricaoNf.Enabled = true;
                        txtEntradaDadosNF.ReadOnly = true;
                        txtEntradaDadosNF.Clear();
                        txtEntradaDadosNF.Enabled = true;
                        if (alwaysVariables.ModoOperacao == 1)
                        {
                            txtEntradaDadosConectorCF.Select();
                        }
                        else
                        {
                            txtEntradaDadosNF.Select();
                        }//Faz a saida do financeiro
                        call_pdv = 3;
                        ProcessTabKey(true);
                        call_pdv = 12;
                        call_funcao = 0;
                        sequenciaItem = "0".PadLeft(3, '0');
                        sequenciaItemAle = "0".PadLeft(3, '0');
                        last_valor_item = "";
                        last_qtty_item = "";
                        typeDescAcre = 0;
                        txtEntradaDadosNF.CausesValidation = true;
                        txtEntradaDadosNF.Select();
                        txtVisorNfce.Text = "NFC-e";
                        rtbVisualizacaoDadosNf.Clear();
                        rtbVisualizacaoDadosNf.Text = " ITEM  CÓDIGO  DESCRIÇÃO QTD  UN VL UNIT(R$) ST VL ITEM(R$)" + "\r\n" +
                                                                                                                                                 "===========================================================";
                        resetLabel();
                        resetVariable();
                        call_funcao = 0;
                        lbQttyConectorCF.Text = "0,000";
                    }
                }
                else if (e.KeyCode == Keys.F10 && alwaysVariables.ModoOperacao == 0)
                {
                    if (lblStatusNfce.Text != "FECHADA")
                    {
                        if (fiscal_flag == 35)
                        {
                            functionECF.conectorECF_fiscal_flag(alwaysVariables.ModeloEcf, ref fiscal_flag, ref fiscal_MSG, ref fiscal_retorno, alwaysVariables.ECF_Ligada);
                        }
                        conector_call_pgtoReserva();
                        //conector_load_subTotais(fiscal_Cupom.Replace("\0", "").Trim(), fiscal_store.Replace("\0", "").Trim(), fiscal_numero_caixa.Replace("\0", "").Trim());
                        tefRows = 0;
                        tefRows1 = 0;
                        tefFields = 0;
                        vetorTefDebito = new string[1, 10]; //Dez possibilidades de passagem de cartão
                        vetorTefCredito = new string[1, 10]; //Dez possibilidades de passagem de cartão*/
                    }
                }
                else if (e.KeyCode == Keys.F2 && alwaysVariables.ModoOperacao == 0) {
                    if (lblStatusNfce.Text == "FECHADA" && (pedido == "0" || pedido == null))
                    {
                        conectorPDV_update_status_reservaTemp(pedido, alwaysVariables.Store, "6", "5");
                    }
                    else
                    {
                        msg = new msgInfo(1, "NÃO EXISTE DAV CARREGADA PARA CANCELADA!"); msg.ShowDialog();
                    }
                }
                else if (e.KeyCode == Keys.F4 && alwaysVariables.ModoOperacao == 0) {
                    if (conector_verifica_exits_itens_nfce(pedido.Replace("\0", "").Trim(), alwaysVariables.Store.Replace("\0", "").Trim()) >= 1)
                    {
                        resetLabel();
                        txtVisorNfce.Text = " INFORME O ITEM [ CANCELAMENTO ]";
                        txtDescricaoNf.Text = "[ DIGITE O ITEM ]";
                        txtEntradaDadosNF.Clear();
                        call_funcao = 1;

                        txtEntradaDadosNF.CausesValidation = true;
                        txtEntradaDadosNF.Select();
                    }
                    else
                    {
                        msg = new msgInfo("NÃO EXISTE ITEM NO DOCUMENTO PARA REALIZAR DESCONTO."); msg.ShowDialog();
                    }

                }
                else if (e.KeyCode == Keys.F6 && alwaysVariables.ModoOperacao == 0) {
                    if (conector_verifica_exits_itens_nfce(pedido.Replace("\0", "").Trim(), alwaysVariables.Store.Replace("\0", "").Trim()) >= 1)
                    {
                        resetLabel();
                        txtVisorNfce.Text = " INFORME O DESCONTO ";
                        txtDescricaoNf.Text = "[ PORCENTAGEM ]";
                        txtEntradaDadosNF.Clear();
                        call_pdv = 7;
                        call_funcao = 1;

                        txtEntradaDadosNF.CausesValidation = true;
                        txtEntradaDadosNF.Select();
                    }
                    else
                    {
                        msg = new msgInfo("NÃO EXISTE ITEM NO DOCUMENTO PARA REALIZAR DESCONTO."); msg.ShowDialog();
                    }

                }
                else 
                    if (e.KeyCode == Keys.F3 && alwaysVariables.ModoOperacao == 0)
                {
                    geraNFe geraNotaFiscalEletronica = new geraNFe();
                   geraNotaFiscalEletronica.cancelaNFe(new dadosCancelaNfe("ID"+alwaysVariables.chaveNfce,"2","CANCELAR",alwaysVariables.chaveNfce,alwaysVariables.ProtocoloNfce,"ERRO DE OPERAÇÃO",null));
                }
                    else if ((e.Control && e.KeyCode == Keys.W) && alwaysVariables.ModoOperacao == 0)
                    {
                        if (pedido == null || pedido == "" || Convert.ToDouble(pedido) <= 0)
                        {
                            conector_load_PAFECF();
                        }
                        else
                        {
                            msg = new msgInfo(1, "NFC-e ABERTO NÃO PODE SER VIOLADO! CONCLUA A OPERAÇÃO...!"); msg.ShowDialog();
                        }
                    }
                    else if (e.KeyCode == Keys.F12 && alwaysVariables.ModoOperacao == 0)
                {
                    if (lblStatusNfce.Text == "FECHADA" && (pedido == "0" || pedido == null))
                    {
                        if (auxIdCliente != null && auxIdCliente != "")
                        {
                            flagDav = "0";
                            flagPreVenda = "0";
                            flagFormaFinalizacao = "D";
                            conector_reset_listas();
                            conectorPDV_inc_reserva(banco_operado, alwaysVariables.Terminal, alwaysVariables.FlagParametro, "1", "4", auxIdCliente);
                            alwaysVariables.Link_Danfe = "";
                            alwaysVariables.Link_Code_QR = "";
                            call_pdv = 12;
                            call_funcao = 0;
                        }
                        else
                        {
                            msg = new msgInfo(1,"Cliente invalido, ou não informado!"); msg.ShowDialog();
                        }
                    }
                    else
                    {
                        msg = new msgInfo(1, "Venda não iniciada!"); msg.ShowDialog();
                    }
                }
                else if (e.KeyCode == Keys.F5 && alwaysVariables.ModoOperacao == 0)
                {
                    if ((functionECF.conectorECF_Analisa_RetornoImpressora(alwaysVariables.ModeloEcf, ref ACK, ref ST1, ref ST2, ref ST3, ref fiscal_MSG) == false) || alwaysVariables.ModoOperacao == 0)
                    {
                        if (alwaysVariables.ModoOperacao == 1) { conector_retorno_ack(); }
                    }
                    string nome;
                    consultaCliente consulta = new consultaCliente(alwaysVariables.Store, alwaysVariables.Usuario, fiscal_numero_caixa);

                    if (consulta.ShowDialog() == DialogResult.OK)
                    {
                        auxIdCliente = consulta.GridCodigo;
                        auxNomeRazao = nome = consulta.GridNome;
                        auxLogradouro = consulta.GridLogradouro + ", " + consulta.GridNumero + " " + consulta.GridCidade + " UF: " + " " + consulta.GridEstado;
                        auxTipoPessoa = consulta.GridTypePessoa.ToString();
                        if (consulta.GridTypePessoa == 2)
                        {
                            auxNomeRazao = consulta.GridRazao;
                            auxCPFCNPJ = consulta.GridCNPJ;
                        }
                        else
                        {
                            auxNomeRazao = consulta.GridNome;
                            auxCPFCNPJ = consulta.GridCPF;
                        }
                        if (auxIdCliente != "")
                        {
                            string store = "";
                            if (txtLojaConectorCF.Text != "")
                            {
                                store = alwaysVariables.Store;
                            }
                            else
                            {
                                store = txtLojaConectorCF.Text;
                            }
                        }
                        lblCodigoConsumidorNfce.Text = auxIdCliente;
                        lblNomeRazaoNfce.Text = auxNomeRazao;
                        lblEnderecoPessoaNfce.Text = auxLogradouro;
                        //txtEntradaDadosNF.ReadOnly = false;
                        txtEntradaDadosNF.Select();
                    }
                }
                else if (e.KeyCode == Keys.D && call_pdv == 3)
                {
                    acionaComandoPagamento();
                    if (fiscal_flag == 35 && Convert.ToDecimal(txtDinheiroConectorCF.Text.Replace(",", ".")) > 0)
                    {
                        msg = new msgInfo("FORMA DE PAGAMENTO INICIADA NO ECF,\n FINALIZE O CUPOM FISCAL."); msg.ShowDialog();
                        txtDinheiroConectorCF.ReadOnly = true;
                    }
                    else
                    {
                        this.pnlTotalConectorCF.Size = new System.Drawing.Size(650, 527);
                        txtDinheiroConectorCF.Select();
                        call_finalizadora = "D";
                    }
                }
                else if (e.KeyCode == Keys.H && call_pdv == 3)
                {
                    acionaComandoPagamento();
                    if (fiscal_flag == 35 && Convert.ToDecimal(txtChequeConectorCF.Text.Replace(",", ".")) > 0)
                    {
                        msg = new msgInfo("FORMA DE PAGAMENTO INICIADA NO ECF,\n FINALIZE O CUPOM FISCAL."); msg.ShowDialog();
                        txtChequeConectorCF.ReadOnly = true;
                    }
                    else
                    {
                        //validaFinalizadoras(false, "H");
                        //txtChequeConectorCF.Select();
                        conector_reset_cheque();
                        pnlTotalConectorCF.Size = new System.Drawing.Size(650, 527);
                        lblVisorEntradaDadosConectorCF.Text = "CPF ou CNPJ DO CLIENTE";
                        call_finalizadora = "H";
                        txtEntradaDadosConectorCF.ReadOnly = false;
                        txtEntradaDadosConectorCF.CausesValidation = false;
                        txtEntradaDadosConectorCF.Select();
                        txtEntradaDadosConectorCF.CausesValidation = true;
                        //validaFinalizadoras(true, "h");
                    }
                }
                else if (e.KeyCode == Keys.C && call_pdv == 3)
                {
                    acionaComandoPagamento();
                    this.lblVisorEntradaDadosConectorCF.Location = new System.Drawing.Point(235, 511);
                    if (fiscal_flag == 35 && Convert.ToDecimal(txtCrediarioConectorCF.Text.Replace(",", ".")) > 0)
                    {
                        msg = new msgInfo("FORMA DE PAGAMENTO INICIADA NO ECF,\n FINALIZE O CUPOM FISCAL."); msg.ShowDialog();
                        txtCrediarioConectorCF.ReadOnly = true;
                    }
                    else
                    {
                        conector_reset_pessoa();
                        if (reserva_number == null || Convert.ToDouble(reserva_number == null ? "0" : reserva_number) == 0)
                        {
                            conector_reset_reserva();
                        }
                        pnlTotalConectorCF.Size = new System.Drawing.Size(650, 527);
                        this.lblVisorEntradaDadosConectorCF.Location = new System.Drawing.Point(135, 511);
                        lblVisorEntradaDadosConectorCF.Text = "INFORME A LOJA DE CADASTRO DO CLIENTE";
                        call_finalizadora = "C";
                        txtEntradaDadosConectorCF.ReadOnly = false;
                        txtEntradaDadosConectorCF.CausesValidation = false;
                        txtEntradaDadosConectorCF.Select();
                        txtEntradaDadosConectorCF.CausesValidation = true;
                    }
                }
                else if (e.KeyCode == Keys.O && call_pdv == 3)
                {
                    acionaComandoPagamento();
                    this.lblVisorEntradaDadosConectorCF.Location = new System.Drawing.Point(235, 511);
                    if (fiscal_flag == 35 && Convert.ToDecimal(txtConvenioConectorCF.Text.Replace(",", ".")) > 0)
                    {
                        msg = new msgInfo("FORMA DE PAGAMENTO INICIADA NO ECF,\n FINALIZE O CUPOM FISCAL."); msg.ShowDialog();
                        txtConvenioConectorCF.ReadOnly = true;
                    }
                    else
                    {
                        conector_reset_convenio();
                        pnlTotalConectorCF.Size = new System.Drawing.Size(650, 527);
                        this.lblVisorEntradaDadosConectorCF.Location = new System.Drawing.Point(195, 511);
                        lblVisorEntradaDadosConectorCF.Text = "INFORME A EMPRESA CONVENIADA";
                        call_finalizadora = "O";
                        txtEntradaDadosConectorCF.ReadOnly = false;
                        txtEntradaDadosConectorCF.CausesValidation = false;
                        txtEntradaDadosConectorCF.Select();
                        txtEntradaDadosConectorCF.CausesValidation = true;
                    }
                }
                else if (e.KeyCode == Keys.A && call_pdv == 3)
                {
                    acionaComandoPagamento();
                    this.lblVisorEntradaDadosConectorCF.Location = new System.Drawing.Point(235, 511);
                    if (fiscal_flag == 35 && Convert.ToDecimal(txtCartaoDebitoConectorCF.Text.Replace(",", ".")) > 0)
                    {
                        msg = new msgInfo("FORMA DE PAGAMENTO INICIADA NO ECF,\n FINALIZE O CUPOM FISCAL."); msg.ShowDialog();
                        txtCartaoDebitoConectorCF.ReadOnly = true;
                    }
                    else
                    {
                        conector_reset_card();
                        txtVisorMsgConectorCF.Text = "TRANSAÇÃO TEF";
                        pnlTotalConectorCF.Size = new System.Drawing.Size(650, 527);
                        lblVisorEntradaDadosConectorCF.Text = "INICIANDO TRANSAÇÃO TEF";
                        /* -------- Trecho apos TEF ------*/
                        //cartao_value = txtEntradaDadosConectorCF.Text;
                        txtEntradaDadosConectorCF.Text = txtCartaoDebitoConectorCF.Text = lblRestanteMoneyConectorCF.Text; //Provisorio
                        this.lblVisorEntradaDadosConectorCF.Location = new System.Drawing.Point(135, 511);
                        lblVisorEntradaDadosConectorCF.Text = "CONFIRMA - [ ENTER ] - VALOR A SER TRANSMITIDO";
                        //txtEntradaDadosConectorCF.CausesValidation = false;
                        //txtEntradaDadosConectorCF.Select();
                        //this.pnlTotalConectorCF.Size = new System.Drawing.Size(650, 527);
                        txtCartaoDebitoConectorCF.Select();
                        call_finalizadora = "A";
                        cartao_type = "2";
                    }
                }
                else if (e.KeyCode == Keys.E && call_pdv == 3)
                {
                    acionaComandoPagamento();
                    /*  this.lblVisorEntradaDadosConectorCF.Location = new System.Drawing.Point(235, 511);
                      if (fiscal_flag == 35 && Convert.ToDecimal(txtCartaoCreditoConectorCF.Text) > 0)
                      {
                          msg = new msgInfo("FORMA DE PAGAMENTO INICIADA NO ECF,\n FINALIZE O CUPOM FISCAL."); msg.ShowDialog();
                          txtCartaoCreditoConectorCF.ReadOnly = true;
                      }
                      else
                      {
                          txtVisorMsgConectorCF.Text = "TRANSAÇÃO TEF";
                          pnlTotalConectorCF.Size = new System.Drawing.Size(650, 527);
                          lblVisorEntradaDadosConectorCF.Text = "INICIANDO TRANSAÇÃO TEF";
                          //this.pnlTotalConectorCF.Size = new System.Drawing.Size(650, 527);
                          txtCartaoCreditoConectorCF.Select();
                          call_finalizadora = "E";
                      }*/
                    this.lblVisorEntradaDadosConectorCF.Location = new System.Drawing.Point(235, 511);
                    if (fiscal_flag == 35 && Convert.ToDecimal(txtCartaoCreditoConectorCF.Text.Replace(",", ".")) > 0)
                    {
                        msg = new msgInfo("FORMA DE PAGAMENTO INICIADA NO ECF,\n FINALIZE O CUPOM FISCAL."); msg.ShowDialog();
                        txtCartaoCreditoConectorCF.ReadOnly = true;
                    }
                    else
                    {
                        conector_reset_card();
                        txtVisorMsgConectorCF.Text = "TRANSAÇÃO TEF";
                        pnlTotalConectorCF.Size = new System.Drawing.Size(650, 527);
                        lblVisorEntradaDadosConectorCF.Text = "INICIANDO TRANSAÇÃO TEF";
                        //Thread.Sleep(5000); //Teste
                        /* -------- Trecho apos TEF ------*/
                        //cartao_value = txtEntradaDadosConectorCF.Text;
                        txtEntradaDadosConectorCF.Text = txtCartaoCreditoConectorCF.Text = lblRestanteMoneyConectorCF.Text; //Provisorio
                        this.lblVisorEntradaDadosConectorCF.Location = new System.Drawing.Point(135, 511);
                        lblVisorEntradaDadosConectorCF.Text = "CONFIRMA - [ ENTER ] - VALOR A SER TRANSMITIDO";
                        //txtEntradaDadosConectorCF.CausesValidation = false;
                        //txtEntradaDadosConectorCF.Select();
                        //this.pnlTotalConectorCF.Size = new System.Drawing.Size(650, 527);
                        txtCartaoCreditoConectorCF.Select();
                        call_finalizadora = "E";
                        cartao_type = "1";
                    }
                }
                else if (e.KeyCode == Keys.B && call_pdv == 3)
                {
                    acionaComandoPagamento();
                    this.lblVisorEntradaDadosConectorCF.Location = new System.Drawing.Point(235, 511);
                    if (fiscal_flag == 35 && Convert.ToDecimal(txtBoletoConectorCF.Text.Replace(",", ".")) > 0)
                    {
                        msg = new msgInfo("FORMA DE PAGAMENTO INICIADA NO ECF,\n FINALIZE O CUPOM FISCAL."); msg.ShowDialog();
                        txtBoletoConectorCF.ReadOnly = true;
                    }
                    else
                    {
                        this.pnlTotalConectorCF.Size = new System.Drawing.Size(650, 527);
                        txtBoletoConectorCF.Select();
                        call_finalizadora = "B";
                    }
                }
                else if (e.KeyCode == Keys.U && call_pdv == 3)
                {
                    acionaComandoPagamento();
                    this.lblVisorEntradaDadosConectorCF.Location = new System.Drawing.Point(235, 511);
                    if (fiscal_flag == 35 && Convert.ToDecimal(txtDuplicataConectorCF.Text.Replace(",", ".")) > 0)
                    {
                        msg = new msgInfo("FORMA DE PAGAMENTO INICIADA NO ECF,\n FINALIZE O CUPOM FISCAL."); msg.ShowDialog();
                        txtDuplicataConectorCF.ReadOnly = true;
                    }
                    else
                    {
                        this.pnlTotalConectorCF.Size = new System.Drawing.Size(650, 527);
                        txtDuplicataConectorCF.Select();
                        call_finalizadora = "U";
                    }
                }
                else if (e.KeyCode == Keys.R && call_pdv == 3)
                {
                    acionaComandoPagamento();
                    this.lblVisorEntradaDadosConectorCF.Location = new System.Drawing.Point(235, 511);
                    if (fiscal_flag == 35 && Convert.ToDecimal(txtRecebimentoConectorCF.Text.Replace(",", ".")) > 0)
                    {
                        msg = new msgInfo("FORMA DE PAGAMENTO INICIADA NO ECF,\n FINALIZE O CUPOM FISCAL."); msg.ShowDialog();
                        txtRecebimentoConectorCF.ReadOnly = true;
                    }
                    else
                    {
                        this.pnlTotalConectorCF.Size = new System.Drawing.Size(650, 527);
                        txtRecebimentoConectorCF.Select();
                        call_finalizadora = "R";
                    }
                }
                else if (e.KeyCode == Keys.V && call_pdv == 3)
                {
                    acionaComandoPagamento();
                    this.lblVisorEntradaDadosConectorCF.Location = new System.Drawing.Point(235, 511);
                    if (fiscal_flag == 35 && Convert.ToDecimal(txtValeConectorCF.Text.Replace(",", ".")) > 0)
                    {
                        msg = new msgInfo("FORMA DE PAGAMENTO INICIADA NO ECF,\n FINALIZE O CUPOM FISCAL."); msg.ShowDialog();
                        txtValeConectorCF.ReadOnly = true;
                    }
                    else
                    {
                        this.pnlTotalConectorCF.Size = new System.Drawing.Size(650, 527);
                        txtValeConectorCF.Select();
                        call_finalizadora = "V";
                    }
                }
            }
        }

        private void txtCupomFiscal_Validated(object sender, EventArgs e)
        {
            if (txtEntradaDadosConectorCF.Text != "" && txtEntradaDadosConectorCF.Text.Length > 12)//Ean 13 
            {
                if (txtEntradaDadosConectorCF.Text.Substring(0, 1) == "3")//Nacionalidade Brasil
                {//3000000105597
                    System.Text.StringBuilder sbjoin1 = new System.Text.StringBuilder(txtEntradaDadosConectorCF.Text);
                    string test = ean13.extraiPrdConector(sbjoin1);
                    txtEntradaDadosConectorCF.Text = test;
                }
            }
            conectorPDV_acion_funcao();
        }//txtCupomFiscal_Validated

        private void ConectorCF_Load(object sender, EventArgs e)
        {
            lblVersao.Text = alwaysVariables.PAF_Versao_Spec;
            instrucao.carregaListaReparo();//Reprocesso

            if (backgroundProdutoCrypt.IsBusy != true)
            {
                // Start the asynchronous operation.
                backgroundProdutoCrypt.RunWorkerAsync();
            }

            if (backgroundConectorCartao.IsBusy != true)
            {
                // Start the asynchronous operation.
                backgroundConectorCartao.RunWorkerAsync();
            }
            if (backgroundConectorCupomMovimento.IsBusy != true)
            {
                // Start the asynchronous operation.
                backgroundConectorCupomMovimento.RunWorkerAsync();
            }

            if (backgroundConectorGrandeTotal.IsBusy != true)
            {
                // Start the asynchronous operation.
                backgroundConectorGrandeTotal.RunWorkerAsync();
            }
            if (backgroundConectorCupom.IsBusy != true)
            {
                // Start the asynchronous operation.
                backgroundConectorCupom.RunWorkerAsync();
            }

            if (alwaysVariables.ConectorServer != null && alwaysVariables.ConectorServer.Length > 10)
            {
                lbBaseDadosMainConectorCf.Text = lbRouteConectorCF.Text = alwaysVariables.ConectorServer;
            }
            else
            {
                lbBaseDadosMainConectorCf.Text = lbRouteConectorCF.Text = "0.0.0.0";
            }
            lbIpCaixaConectorCF.Text = alwaysVariables.IpCaixa;


            if (!File.Exists(@"C:\conector\nfce_temp.txt"))
            {
                conectorPDV_clear_log_pedido();
            }

            conectorPDV_inc_estoque_geracao(fiscal_numero_serie);//Flash ESTOQUE

            conector_update_lineMD5_r01_fiscal(fiscal_numero_serie, conectorPDV_PAFECF_indicador("R01", String.Format("{0:yyyyMMdd}", DateTime.Now), alwaysVariables.Store, fiscal_numero_serie, alwaysVariables.Terminal, "0")); //Retirar teste

            if (cryptografia == null)
            {
                cryptografia = new crypt();
            }
            conector_verifica_crz_cro(ref fiscal_banco_crz, ref fiscal_banco_cro);
            arquivo_crz_cro(0);
            conector_verifica_venda_bruta(ref fiscal_banco_venda);
            functionECF.conectorECF_GrandeTotal(alwaysVariables.ModeloEcf, ref fiscal_GT, ref fiscal_MSG, ref fiscal_retorno, alwaysVariables.ECF_Ligada);
            //fiscal_retorno = conectorECF.Bematech_FI_GrandeTotal(ref fiscal_GT);
            conector_reset_listas();
            if (call_pdv != 3)
            {
                this.pnlTotalConectorCF.Size = new System.Drawing.Size(1, 1);
                this.pnlTotalConectorCF.Location = new System.Drawing.Point(746, 607);
                this.pnlTotalConectorCF.Visible = false;
            }

            auxIdLoja = alwaysVariables.Store;
            conector_carrega_loja(alwaysVariables.Store);

            if (alwaysVariables.ModoOperacao == 1 && alwaysVariables.ECF_Ligada != -6)
            {
                cryptografia = new crypt(fiscal_last_reducao_crz, fiscal_last_reducao_cro);
                functionECF.conectorECF_HabilitaDesabilitaRetornoEstendidoMFD(alwaysVariables.ModeloEcf, "1", ref fiscal_MSG, ref fiscal_retorno);

                //if (alwaysVariables.flagHomologacao == "1") { conector_geracao_md5(folderEletronico + "\\" + "crytECF-" + fiscal_numero_serie.Replace("\0", "").Trim() + "-" + fiscal_data_movimento, alwaysVariables.MD5_Main); } else { conector_geracao_md5(folderEletronico + "\\" + "crytECF-" + fiscal_numero_serie.Replace("\0", "").Trim() + "-" + fiscal_data_movimento, alwaysVariables.MD5VALIDO); }
                conector_geracao_md5(folderEletronico + "\\" + "crytECF", alwaysVariables.MD5_Main_conectorEXE);

                /*if (File.Exists(@"C:\0.0"))
                {
                    using (StreamReader texto = new StreamReader(@"C:\0.0"))
                    {
                        string mensagem = "";
                        string rede = "";
                        while ((mensagem = texto.ReadLine()) != null)
                        {
                            if (mensagem.Substring(0, 3) == "010")
                            {
                                rede = mensagem.Substring(10, mensagem.Length - 10);
                            }else if(mensagem.Substring(0, 3) == "027")
                            {
                                if (tef.NaoConfirmaTransacao(mensagem.Substring(10, mensagem.Length - 10), rede))
                                {
                                    //File.Delete(@"C:\0.0");
                                }
                            }
                            //mensagemLinha.Add(mensagem);
                        }
                   
                    }
                    File.Delete(@"C:\0.0");
                }*/
                bancoEs = new dados(alwaysVariables.UserName, alwaysVariables.LocalHost, alwaysVariables.Senha, "conector");

                conectorPDV_find_credenciadora();
                conector_interface_menuFiscal(false);
                typeDescAcre = 0;
                conector_reset_recebimento();
                /*try
                {
                    conectorBalanca.Open();
                }
                catch (Exception)
                {
                    msg = new msgInfo(1, "CARO USUÁRIO: 'ERRO BALANÇA' - ACESSO A PORTA " + conectorBalanca.PortName.ToString() + " NEGADO, PORTA FECHADA PARA EVENTUAIS TRANSMISSÕES DE DADOS."); msg.ShowDialog();
                }*/

                timer_conector.Start();

                /*if (flag != 8 && Convert.ToDouble(mov) <= 0)
                {
                    msgInfo msg = new msgInfo("ERRO AO CARREGAR OS DEVICES DA IMPRESSORA FISCAL REINCIALIZE O SISTEMA - SE PERSISTIR ACIONE O SUPORTE TECNICO..!"); msg.ShowDialog(); this.Dispose();
                }*/

                /*
                    ltbDetalhesConectorCF.SelectionLength = 0;
                    ltbDetalhesConectorCF.SelectionStart = ltbDetalhesConectorCF.Text.Length;
                    ltbDetalhesConectorCF.ScrollToCaret();
                 * 
                 * normal
                    this.pnlTotalConectorCF.Size = new System.Drawing.Size(650, 527);
                    this.pnlTotalConectorCF.Location = new System.Drawing.Point(1, 91);
                    anormal
                    this.pnlTotalConectorCF.Size = new System.Drawing.Size(1, 1);
                    this.pnlTotalConectorCF.Location = new System.Drawing.Point(746; 607);
                 */
                call_funcao = 0;
                pnlConsultaProduto.Visible = false;
                this.pnlConsultaProduto.Size = new System.Drawing.Size(1, 1);
                this.pnlConsultaProduto.Location = new System.Drawing.Point(1268, 608);
                pgbWaitReservaConectorCF.Minimum = 0;
                flagDataAtual = String.Format("{0:ddMMyy}", DateTime.Now);
                call_finalizadora = null;
                resetFinanceiro();
                conector_reset_z();
                sequenciaItem = "0".PadLeft(3, '0');
                sequenciaItemAle = "0".PadLeft(3, '0');
                lblNumeroDeSerieNFCe.Text = lbINumeroSerieConectorCF.Text = fiscal_numero_serie;
                if (Convert.ToInt32(banco_operado) > 0)
                {
                    txtEntradaDadosConectorCF.CausesValidation = false;
                    lblOperadorNfce.Text = lbOperadorConectorCF.Text = banco_operado;
                    txtAutorizacaoUsuarioConectorCF.Select();
                    txtEntradaDadosConectorCF.CausesValidation = true;
                    rtbVisualizacaoDadosNf.Text = " ITEM  CÓDIGO  DESCRIÇÃO QTD  UN VL UNIT(R$) ST VL ITEM(R$)" + "\r\n" +
                                                                                                                                                 "===========================================================";

                    ltbDetalhesConectorCF.Text = " ITEM  CÓDIGO  DESCRIÇÃO QTD  UN VL UNIT(R$) ST VL ITEM(R$)" + "\r\n" +
                                                  "=======================================================";
                    call_pdv = 0;
                    txtVisorMsgConectorCF.Text = "PDV - BLOQUEADO";
                    lblVisorEntradaDadosConectorCF.Text = "ENTRADA DE DADOS";
                    txtEntradaDadosConectorCF.CausesValidation = false;
                    txtEntradaDadosConectorCF.ReadOnly = true;
                }
                else
                {
                    workObject.modoPdv(true); //Para rotina loop
                    call_pdv = 1;
                    txtVisorMsgConectorCF.Text = "SEM OPERADOR";
                }
                if (Convert.ToDouble(fiscal_data_movimento.Replace("\0", "").Trim() == "" ? "0" : fiscal_data_movimento) > 0)
                {
                    //lbMarcaPrinterFiscalConectorCF.Text = fiscal_numero_serie;
                    lbldataMovimentoNfce.Text = lbDataMovimentoConectorCF.Text = fiscal_data_movimento.Substring(0, 2) + "/" + fiscal_data_movimento.Substring(2, 2) + "/" + String.Format("{0:ddMMyyyy}", DateTime.Now).Substring(4, 2) + fiscal_data_movimento.Substring(4, 2);
                    lbMarcaPrinterFiscalConectorCF.Text = fiscal_numero_caixa.Replace("\0", "").Trim();
                    lblOperadorNfce.Text = lbOperadorConectorCF.Text = banco_operado;
                    rtbVisualizacaoDadosNf.Text = " ITEM  CÓDIGO  DESCRIÇÃO QTD  UN VL UNIT(R$) ST VL ITEM(R$)" + "\r\n" +
                                                                                                                                                 "===========================================================";

                    ltbDetalhesConectorCF.Text = " ITEM  CÓDIGO  DESCRIÇÃO QTD  UN VL UNIT(R$) ST VL ITEM(R$)" + "\r\n" +
                                                 "===========================================================";
                }
                else
                {
                    lbldataMovimentoNfce.Text = lbDataMovimentoConectorCF.Text = "00/00/0000";
                    txtVisorMsgConectorCF.Text = "CAIXA FECHADO";
                    lbMarcaPrinterFiscalConectorCF.Text = fiscal_numero_caixa.Replace("\0", "").Trim();
                    lblOperadorNfce.Text = lbOperadorConectorCF.Text = banco_operado;
                }
                this.pnlTotalConectorCF.Visible = false;
                this.pnlCrediarioConectorCF.Visible = false;
                if (fiscal_numero_serie.Trim() == "" && fiscal_CGC.Trim() == "" && fiscal_marca.Trim() == "" && fiscal_data_movimento.Trim() == "" && fiscal_data_printer.Trim() == "")
                {
                    conector_carrega_variavel();
                }
                if ((Convert.ToInt32(banco_operado) <= 0) || (Convert.ToDouble(fiscal_data_movimento.Replace("\0", "").Trim() == "" ? "0" : fiscal_data_movimento) <= 0))
                {
                    fechaObj(true);
                    conector_acao_carregaMenu();
                    txtEntradaDadosConectorCF.CausesValidation = false;
                    txtAutorizacaoUsuarioConectorCF.CausesValidation = false;
                    txtAutorizacaoUsuarioConectorCF.Select();
                    txtAutorizacaoUsuarioConectorCF.CausesValidation = true;
                    txtEntradaDadosConectorCF.CausesValidation = true;
                    workObject.modoPdv(true); //Para rotina loop

                }
                else if (fiscal_flag == 33 || fiscal_flag == 37)//Cancelamento do ultimo cupom liberado/Cupom atual aberto
                {
                    workObject.modoPdv(true);
                    conectorPDV_load_cupom(fiscal_Cupom.Replace("\0", "").Trim(), fiscal_store.Replace("\0", "").Trim(), fiscal_numero_caixa.Replace("\0", "").Trim(), 0);
                    pedido = conector_verifica_exits_pedido(fiscal_Cupom.Replace("\0", "").Trim());
                    txtDescricaoItemConectorCF.Select();
                    if (Convert.ToDouble(pedido) > 0)
                    {
                        conector_load_pedidoFinanceiro(pedido);
                    }
                    txtVisorMsgConectorCF.Text = "CUPOM FISCAL ABERTO";
                    txtEntradaDadosConectorCF.CausesValidation = true;
                    txtEntradaDadosConectorCF.Select();
                }
                else if (fiscal_flag == 35)//Cancelamento do ultimo cupom liberado/Cupom atual aberto/Pagamento Iniciado
                {
                    workObject.modoPdv(true);
                    txtVisorMsgConectorCF.Text = "PAGAMENTO";
                    conectorPDV_load_cupom(fiscal_Cupom.Replace("\0", "").Trim(), alwaysVariables.Store, fiscal_numero_caixa.Replace("\0", "").Trim(), 0);
                    conector_call_pgto();
                    if (conector_verifica_exits_financeiro(fiscal_Cupom.Replace("\0", "").Trim(), fiscal_store.Replace("\0", "").Trim() == "" ? alwaysVariables.Store : fiscal_store, fiscal_numero_caixa.Replace("\0", "").Trim()) > 0)
                    {
                        conector_load_financeiro(fiscal_Cupom.Replace("\0", "").Trim(), fiscal_store.Replace("\0", "").Trim() == "" ? alwaysVariables.Store : fiscal_store, fiscal_numero_caixa.Replace("\0", "").Trim());
                    }
                    pedido = conector_verifica_exits_pedido(fiscal_Cupom.Replace("\0", "").Trim());
                    //fiscal_retorno =  conectorECF.Bematech_FI_TerminaFechamentoCupom(msgFinalCupom);
                    //functionECF.conectorECF_TerminaFechamentoCupom(alwaysVariables.ModeloEcf, msgFinalCupom.Replace("\0",""), ref fiscal_MSG, ref fiscal_retorno, alwaysVariables.ECF_Ligada);
                    string fiscal_SubTotal = new string('\x20', 14);
                    functionECF.conectorECF_SubTotal(alwaysVariables.ModeloEcf, ref fiscal_SubTotal, ref fiscal_MSG, ref fiscal_retorno, alwaysVariables.ECF_Ligada);
                    string sub = fiscal_SubTotal.Insert(12, ".");
                    if (sub.Trim() != "" && Convert.ToDecimal(sub) == Convert.ToDecimal(txtSubTotalConectorCF.Text.Replace(",", ".")))
                    {
                        functionECF.conectorECF_TerminaFechamentoCupom(alwaysVariables.ModeloEcf, msgFinalCupom.Replace("\0", ""), ref fiscal_MSG, ref fiscal_retorno, alwaysVariables.ECF_Ligada);
                        this.backgroundConectorCupom.CancelAsync();
                        if (fiscal_retorno == 1)
                        {
                            functionECF.conectorECF_AcionaGaveta(alwaysVariables.ModeloEcf, ref fiscal_MSG, ref fiscal_retorno, alwaysVariables.ECF_Ligada);
                            functionECF.VerificaEstadoGaveta(alwaysVariables.ModeloEcf, ref fiscal_MSG, ref gaveta, ref fiscal_retorno, alwaysVariables.ECF_Ligada);
                            if (gaveta == 0)
                            {
                                //Estado = 1 sensor em nível 1 (fechada)
                                //Estado = 0 sensor em nível 0 (aberta)
                                msg = new msgInfo("INFORMAÇÃO DO SISTEMA! GAVETA ABERTA."); msg.ShowDialog();
                            }
                        }
                        workObject.modoPdv(false);
                        if (fiscal_retorno == 1)
                        {
                            conector_acao_controleMenu();
                            pedido = "0";
                            resetLabel();
                            resetVariable();
                            ltbDetalhesConectorCF.Clear();
                            ltbDetalhesConectorCF.Text = " ITEM  CÓDIGO  DESCRIÇÃO QTD  UN VL UNIT(R$) ST VL ITEM(R$)" + "\r\n" +
                                                         "===========================================================";
                            rtbVisualizacaoDadosNf.Clear();
                            rtbVisualizacaoDadosNf.Text = " ITEM  CÓDIGO  DESCRIÇÃO QTD  UN VL UNIT(R$) ST VL ITEM(R$)" + "\r\n" +
                                                                                                                                                 "===========================================================";

                        }
                    }
                    else
                    {
                        msg = new msgInfo(1,"Cupom inconsistente com a informação...!"); msg.ShowDialog();
                        conector_acao_cancelaCupom();
                    }
                }
                else if (File.Exists(@"C:\conector\nfce_temp.txt"))
                {
                    workObject.modoPdv(true);
                    using (StreamReader texto = new StreamReader(@"C:\conector\nfce_temp.txt"))
                    {
                        string mensagem = "";
                        pedido = "0";
                        while ((mensagem = texto.ReadLine()) != null)
                        {
                            pedido = mensagem;
                        }

                    }
                    File.Delete(@"C:\conector\nfce_temp.txt");
                    txtEntradaDadosConectorCF.ReadOnly = false;
                    if (pedido != "0" && pedido != null)
                    {
                        conectorPDV_load_pedido_temp(pedido, 1);
                        conectorPDV_clear_log_pedido();
                    }
                    else
                    {
                        pnlAutorizacaoPDVConectorCF.Visible = true;
                        this.pnlAutorizacaoPDVConectorCF.Location = new System.Drawing.Point(0, 92);
                        this.pnlAutorizacaoPDVConectorCF.Size = new System.Drawing.Size(649, 233);
                        txtAutorizacaoUsuarioConectorCF.Select();
                    }
                }
                else
                {
                    pnlAutorizacaoPDVConectorCF.Visible = true;
                    this.pnlAutorizacaoPDVConectorCF.Location = new System.Drawing.Point(0, 92);
                    this.pnlAutorizacaoPDVConectorCF.Size = new System.Drawing.Size(649, 233);
                    txtAutorizacaoUsuarioConectorCF.Select();
                }

                if (fiscal_retorno != 1) { msg = new msgInfo(fiscal_MSG); msg.ShowDialog(); conector_stop_thread(); this.Dispose(); }
                conectorPDV_find_operador();
                string test = "00000000";
                try
                {
                    if (fiscal_last_reducao_dataMovimento.Trim() != "" && fiscal_last_reducao_dataMovimento != "000000")
                    {
                        test = String.Format("{0:yyyyMMdd}", Convert.ToDateTime(fiscal_last_reducao_dataMovimento.Substring(0, 2) + "/" + fiscal_last_reducao_dataMovimento.Substring(2, 2) + "/" + String.Format("{0:ddMMyyyy}", DateTime.Now).Substring(4, 2) + fiscal_data_printer.Substring(4, 2)));
                    }
                    else
                    {
                        test = String.Format("{0:yyyyMMdd}", Convert.ToDateTime(fiscal_data_movimento.Substring(0, 2) + "/" + fiscal_data_movimento.Substring(2, 2) + "/" + String.Format("{0:ddMMyyyy}", DateTime.Now).Substring(4, 2) + fiscal_data_printer.Substring(4, 2)));
                    }
                }
                catch (Exception)
                {

                }
                if (Convert.ToInt32(banco_operado) > 0 && fiscal_last_reducao_dataMovimento.Trim() != "")
                {
                    cryptografia.conectorPDV_GT(test, fiscal_store, fiscal_numero_caixa, banco_sequencia, banco_operado, fiscal_numero_serie);
                }
            }
            else
            {
                bancoEs = new dados(alwaysVariables.UserName, alwaysVariables.LocalHost, alwaysVariables.Senha, "conector");
                call_funcao = 0;
                pnlConsultaProduto.Visible = false;
                this.pnlConsultaProduto.Size = new System.Drawing.Size(1, 1);
                this.pnlConsultaProduto.Location = new System.Drawing.Point(1268, 608);
                pgbWaitReservaConectorCF.Minimum = 0;
                flagDataAtual = String.Format("{0:ddMMyy}", DateTime.Now);
                call_finalizadora = null;
                resetFinanceiro();
                this.pnlNfce.Size = new System.Drawing.Size(1150, 526);
                this.pnlNfce.Location = new System.Drawing.Point(0, 0);
                if (alwaysVariables.ModoOperacao == 0)
                {
                    pnlNfce.Visible = true;
                }
                else
                {
                    pnlNfce.Visible = false;
                }
                pnlAutorizacaoPDVConectorCF.Visible = true;
                this.pnlAutorizacaoPDVConectorCF.Location = new System.Drawing.Point(0, 92);
                this.pnlAutorizacaoPDVConectorCF.Size = new System.Drawing.Size(649, 233);
                pnlMenuFiscalConectorCF.Visible = false;
                pnlCrediarioConectorCF.Visible = false;
                pnlModoOperacao.Visible = false;
                txtAutorizacaoUsuarioConectorCF.Select();
            }
            //alwaysVariables.MD5_Main = key.retornoFileMD5(folderEletronico + "\\" + "crytECF-" + fiscal_numero_serie.Replace("\0", "").Trim());
            alwaysVariables.MD5_Main = key.retornoFileMD5(folderEletronico + "\\" + "crytECF");

            functionECF.conectorECF_DataMovimento(alwaysVariables.ModeloEcf, ref fiscal_data_movimento, ref fiscal_MSG, ref fiscal_retorno, alwaysVariables.ECF_Ligada);
            //conectorECF.Analisa_iRetorno(fiscal_retorno, ref fiscal_MSG);
            functionECF.conectorECF_fiscal_flag(alwaysVariables.ModeloEcf, ref fiscal_flag, ref fiscal_MSG, ref fiscal_retorno, alwaysVariables.ECF_Ligada);
            //conectorECF.Analisa_iRetorno(fiscal_retorno, ref fiscal_MSG);
            if (fiscal_data_movimento != null && Convert.ToDouble(fiscal_data_movimento.Replace("\0", "").Trim() == "" ? "0" : fiscal_data_movimento) <= 0 && fiscal_flag != 8)
            {
                if (banco_operado == null || banco_operado == "0")
                {
                    banco_operado = input_operador = alwaysVariables.Desconhecido;
                }

                if ((conector_webservice_preVenda_count_expire(alwaysVariables.Store, "0", "4", "1") > 0) && fiscal_flag != 8 && alwaysVariables.ECF_Ligada != -6)
                {
                    txtVisorMsgConectorCF.Text = "CAIXA NÃO INICIALIZADO";
                    msg = new msgInfo("ABERTURA PREMATURA EM EXECUÇÃO, PRÉ-VENDAS EM ABERTO - FUNÇÃO COMPLEMENTAR ATO COTEPE [ F11 ] - SAIR"); msg.ShowDialog();
                    functionECF.conectorECF_AberturaDoDia(alwaysVariables.ModeloEcf, "1,00", "Dinheiro", ref fiscal_MSG, ref fiscal_retorno, alwaysVariables.ECF_Ligada);
                    conectorPDV_inc_cupom_relatorio("CN", null);

                    msg = new msgInfo("PRIMEIRA EXECUÇÃO DIARIA, CONFERÊNCIA DO ESTOQUE [ F11 ] - SAIR"); msg.ShowDialog();
                    if (fiscal_retorno == 1 && functionECF.conectorECF_Analisa_RetornoImpressora(alwaysVariables.ModeloEcf, ref ACK, ref ST1, ref ST2, ref ST3, ref fiscal_MSG))
                    {
                        conectorPDV_inc_estoque_geracao(fiscal_numero_serie);//Flash ESTOQUE
                        //conectorPDV_inc_cupom_relatorio("RG");
                    }
                    else
                    {
                        txtVisorMsgConectorCF.Text = functionECF.conectorECF_Erros(alwaysVariables.ModeloEcf);
                    }
                    functionECF.conectorECF_DataMovimento(alwaysVariables.ModeloEcf, ref fiscal_data_movimento, ref fiscal_MSG, ref fiscal_retorno, alwaysVariables.ECF_Ligada);
                    if (Convert.ToDouble(fiscal_data_movimento.Replace("\0", "").Trim() == "" ? "0" : fiscal_data_movimento) >= 0 && fiscal_flag != 8)
                    {
                        lbDataMovimentoConectorCF.Text = fiscal_data_movimento.Substring(0, 2) + "/" + fiscal_data_movimento.Substring(2, 2) + "/" + String.Format("{0:ddMMyyyy}", DateTime.Now).Substring(4, 2) + fiscal_data_movimento.Substring(4, 2);
                        conectorPDV_inc_fechamentoCaixa();
                        conectorPDV_inc_movimentocaixa("0.00", "0.00", "0.00", "0.00", "1.00", "0.00", 1.ToString(), "0.00", "0.00", "0.00", 1.ToString(), banco_operado, "0,00", 0, "0,00");

                        txtVisorMsgConectorCF.Text = "CONFERINDO PRÉ-VENDAS PENDENTES";
                        ataque = 0;
                        msg = new msgInfo("Uma conferencia na base de retaguarda foi verificada e constatou-se " + countRowsWeb.ToString() + " pré-vendas pedentes, deseja atualiza-lás [ F12 ] antes da emissão da leitura Z ou cancela-las [ F11 ] ou [ ESPACE ].");
                        msg.ShowDialog();
                        int count = countRowsWeb;
                        modoPedido = 1;
                        txtEntradaDadosConectorCF.Text = countRowsWeb.ToString();
                        for (int i = 0; i < count; i++)
                        {
                            modoPedido = 1;
                            conector_webservice_preVenda(alwaysVariables.Store.ToString(), dsRReservaEx.Tables[0].Rows[i][0].ToString(), 1);
                            ataque = 1;
                        }
                        if (lbOperadorConectorCF.Text == "")
                        {
                            lblOperadorNfce.Text = lbOperadorConectorCF.Text = "0";
                        }
                        txtAutorizacaoUsuarioConectorCF.Select();
                    }
                    else
                    {
                        txtVisorMsgConectorCF.Text = "CONFERINDO PRÉ-VENDAS PENDENTES";
                        ataque = 0;
                        msg = new msgInfo("Uma conferencia na base de retaguarda foi verificada e constatou-se " + countRowsWeb.ToString() + " pré-vendas pedentes, deseja atualiza-lás [ F12 ] antes da emissão da leitura Z ou cancela-las [ F11 ] ou [ ESPACE ].");
                        msg.ShowDialog();
                        int count = countRowsWeb;
                        modoPedido = 1;
                        txtEntradaDadosConectorCF.Text = countRowsWeb.ToString();
                        for (int i = 0; i < count; i++)
                        {
                            modoPedido = 1;
                            conector_webservice_preVenda(alwaysVariables.Store.ToString(), dsRReservaEx.Tables[0].Rows[i][0].ToString(), 1);
                            ataque = 1;
                        }
                    }
                }
                conectorPDV_find_fechamentoOp("1");
                lbOperadorConectorCF.Text = "0";
                banco_operado = "0";
                banco_sequencia = "0";
                input_operador = null;
            }
            conector_start_thread();
            if (pnlAutorizacaoPDVConectorCF.Visible == false)
            {
                conector_start_thread_balanca();
            }
            
            
        }

        private void txtEntradaDadosConectorCF_KeyPress(object sender, KeyPressEventArgs e)
        {
            bool valida = false;

            if (e.KeyChar == '.') // Se for digitado "," ser  alterado para "."
                e.KeyChar = ',';

            if (txtEntradaDadosConectorCF.Text.Contains('*') == true) // Se for digitado "*" altera maxlenght
                txtEntradaDadosConectorCF.MaxLength = 100;
            else txtEntradaDadosConectorCF.MaxLength = 14;

            if (input_find == "2")
            {
                txtEntradaDadosConectorCF.MaxLength = 20;
            }

            if (e.KeyChar == (Char)Keys.Back)
            {
                lbQttyConectorCF.Text = "0,000";
                lbPrecoCalculadoItensConectorCF.Text = "0,00" ;
                lbPrecoUnitarioConectorCF.Text = "0,00";
                txtEntradaDadosConectorCF.Clear();
                txtEntradaDadosConectorCF.Select();
            }

            if (txtEntradaDadosConectorCF.Text.Length > 0)
            {
                if (e.KeyChar == '*')
                {
                    posSeparator = txtEntradaDadosConectorCF.Text.IndexOf("*");
                    if (posSeparator == -1)
                    {
                        valida = true;
                    }
                    else
                    {
                        valida = false;
                    }
                }
                else if (e.KeyChar == ',')
                {
                    posSeparator = txtEntradaDadosConectorCF.Text.IndexOf(",");
                    if (posSeparator == -1)
                    {
                        valida = true;
                    }
                    else
                    {
                        valida = false;
                    }
                    
                }
                else
                {
                    valida = false;
                }
            }
            else
            {
                if (lblVisorEntradaDadosConectorCF.Text != "PERFIL 'A'  OU  'B'")
                {
                    txtEntradaDadosConectorCF.Clear();
                }
            }

            //Se não for um numero e não  tecla backspace e nao for mult, barra:
            if (lblVisorEntradaDadosConectorCF.Text != "PERFIL 'A'  OU  'B'")
            {
                if (valida == false)
                {
                    if ((!Char.IsDigit(e.KeyChar) && e.KeyChar != (Char)Keys.Back && e.KeyChar != '*') || (!Char.IsDigit(e.KeyChar) && e.KeyChar != (Char)Keys.Back && e.KeyChar != ','))
                    {
                        e.Handled = true;
                        return;
                    }
                    if (e.KeyChar == '*' && posSeparator > -1)
                    {
                        e.Handled = true;
                        return;
                    }
                }
                else if (e.KeyChar == '*')
                {
                    if (txtEntradaDadosConectorCF.Text != "")
                    {
                        auxNumeric = Convert.ToDecimal(txtEntradaDadosConectorCF.Text.Replace(",", ".").Substring(0, txtEntradaDadosConectorCF.TextLength));//currency
                        flagNumeric = String.Format("{0:F3}", auxNumeric);
                        lbQttyConectorCF.Text = flagNumeric.Replace(".", ",");
                    }
                    else
                    {
                        txtEntradaDadosConectorCF.Clear();

                    }
                }
            }
        }

        private void txtAutorizacaoUsuarioConectorCF_Validated(object sender, EventArgs e)
        {
            conector_valida_user();
        }

        private void txtAutorizacaoSenhaConectorCF_Validated(object sender, EventArgs e)
        {

            this.lblVisorEntradaDadosConectorCF.Location = new System.Drawing.Point(284, 511);
            
            if (txtAutorizacaoUsuarioConectorCF.Text != "")
            {
                if (txtVisorMsgConectorCF.Text != "USUÁRIO INVÁLIDO, OU NÃO EXISTE.")
                {
                    if (txtAutorizacaoSenhaConectorCF.Text.Replace("\r\n", "") != "")
                    {

                        txtVisorNfce.Text = txtVisorMsgConectorCF.Text = "LONGANDO...!";
                        validaPass = (verifica_passwd(txtAutorizacaoSenhaConectorCF.Text.Replace("\r\n", ""), key.getHash, txtAutorizacaoUsuarioConectorCF.Text));

                        if ((Convert.ToDecimal(String.Format("{0:F2}", Convert.ToDecimal(fiscal_GT_compare.Replace("\0", "").Trim() == "" ? "1" : fiscal_GT_compare.Replace("\0", "").Trim()))) / 100) !=
                        (Convert.ToDecimal(String.Format("{0:F2}", Convert.ToDecimal(fiscal_GT.Replace("\0", "").Trim() == "" ? "1" : fiscal_GT.Replace("\0", "").Trim()))) / 100))
                        {
                            conectorPDV_acion_gt_cryt();
                            cryptografia.conectorPDV_serie(alwaysVariables.PAF_total + "\\grandFullPDV" + ".txt", "-1");
                        }

                        if ((acessoFiscal == 1 || acessoMenuFiscal == 1)) //&& (lbOperadorConectorCF.Text != "" && Convert.ToDecimal(lbOperadorConectorCF.Text == "" ? "0" : lbOperadorConectorCF.Text) > 0))
                        {
                            if (validaPass == 1)
                            {
                                if ((String.Format("{0:ddMMyy}", DateTime.Now) == fiscal_data_movimento || Convert.ToDouble(fiscal_data_movimento.Replace("\0", "").Trim() == "" ? "0" : fiscal_data_movimento) == 0) || alwaysVariables.ModoOperacao == 0)
                                {
                                    
                                    if ((txtAutorizacaoUsuarioConectorCF.Text == lbOperadorConectorCF.Text) && (call_pdv == 0) && Convert.ToInt32(fiscal_data_movimento) > 0)//Call pdv 1 funcao 0 pdv
                                    {
                                        if (acessoFiscal == 1 || (operador_funcao == "5" || operador_funcao == "4"))
                                        {
                                            conector_verifica_crz_cro(ref fiscal_banco_crz, ref fiscal_banco_cro);
                                            conector_verifica_venda_bruta(ref fiscal_banco_venda);   
                                            txtEntradaDadosConectorCF.Select();
                                            txtEntradaDadosConectorCF.ReadOnly = false;
                                            if (fiscal_flag != 33 && fiscal_flag != 1 && fiscal_flag != 35)
                                            {
                                                resetVariable();
                                                resetLabel();
                                                ltbDetalhesConectorCF.Clear();
                                                ltbDetalhesConectorCF.Text = " ITEM  CÓDIGO  DESCRIÇÃO QTD  UN VL UNIT(R$) ST VL ITEM(R$)" + "\r\n" +
                                                                             "===========================================================";
                                                rtbVisualizacaoDadosNf.Clear();
                                                rtbVisualizacaoDadosNf.Text = " ITEM  CÓDIGO  DESCRIÇÃO QTD  UN VL UNIT(R$) ST VL ITEM(R$)" + "\r\n" +
                                                                                                                                                 "===========================================================";

                                                txtVisorMsgConectorCF.Text = "CAIXA ABERTO";
                                                call_pdv = 0;
                                                call_funcao = 0;
                                            }
                                            else if (fiscal_flag == 33 || fiscal_flag == 1 || fiscal_flag == 37)
                                            {
                                                conectorPDV_load_cupom(fiscal_Cupom, alwaysVariables.Store, fiscal_numero_caixa,0);
                                                call_pdv = 0;
                                            }
                                            else if (fiscal_flag == 35)
                                            {
                                                //desenvolver
                                            }
                                            else
                                            {
                                                txtVisorMsgConectorCF.Text = "CAIXA ABERTO";
                                            }
                                            pnlAutorizacaoPDVConectorCF.Visible = false;
                                            //pnlModoOperacao.Visible = true; MG.001
                                            pnlModoOperacao.Visible = false;
                                            if (call_pdv == 0)
                                            {
                                                conector_start_thread_balanca();
                                                txtEntradaDadosConectorCF.CausesValidation = true;
                                                txtEntradaDadosConectorCF.Select();
                                                if (pnlModoOperacao.Visible == true)
                                                {
                                                    this.pnlModoOperacao.Size = new System.Drawing.Size(700, 233);
                                                    this.pnlModoOperacao.Location = new System.Drawing.Point(213, 234);
                                                    call_pdv = 11;
                                                    rdbECF.Checked = true;
                                                    rdbECF.Select();
                                                }
                                            }
                                        }
                                        else
                                        {
                                            txtAutorizacaoSenhaConectorCF.Clear();
                                            txtAutorizacaoSenhaConectorCF.Text = "";
                                            txtVisorMsgConectorCF.Text = "OPERADOR SEM PEMISSÃO - CAIXA";
                                        }
                                    }
                                    else
                                    {
                                        if (acessoMenuFiscal == 1 || operador_funcao == "5")
                                        {
                                            if (alwaysVariables.ModoOperacao == 1)
                                            {
                                                conector_acao_carregaMenu();
                                            }
                                            resetVariable();
                                            resetLabel();
                                            if (alwaysVariables.ModoOperacao == 1)
                                            {
                                                txtVisorMsgConectorCF.Text = "MENU";
                                            }
                                            else
                                            {
                                                txtVisorNfce.Text = "NFC-e";
                                            }
                                            pnlAutorizacaoPDVConectorCF.Visible = false;
                                            call_pdv = 1;
                                        }
                                        else
                                        {
                                            txtAutorizacaoSenhaConectorCF.Clear();
                                            txtAutorizacaoSenhaConectorCF.Text = "";
                                            txtAutorizacaoUsuarioConectorCF.Select();
                                            txtVisorMsgConectorCF.Text = "OPERADOR SEM PEMISSÃO - MENU FISCAL";
                                        }
                                    }
                                }
                                else
                                {
                                    msg = new msgInfo("DATA DA IMPRESSORA DIFERENTE DA DATA DO SISTEMA,\n VERIFIQUE O STATUS DA IMPRESSORA,\n MOVIMENTO DO DIA VERSUS DATA IMPRESSORA,\n AGUARDANDO EMISSÃO DA LEITURA Z."); msg.ShowDialog();
                                    conector_acao_carregaMenu();
                                    functionECF.conectorECF_Analisa_RetornoImpressora(alwaysVariables.ModeloEcf, ref ACK, ref ST1, ref ST2, ref ST3, ref fiscal_MSG);
                                    conector_retorno_ack();
                                    resetVariable();
                                    resetLabel();
                                    txtVisorMsgConectorCF.Text = "MENU";
                                    pnlAutorizacaoPDVConectorCF.Visible = false;
                                    call_pdv = 1;
                                }
                                txtAutorizacaoSenhaConectorCF.Clear();
                                txtAutorizacaoUsuarioConectorCF.Clear();
                                if (pnlAutorizacaoPDVConectorCF.Visible == true)
                                {
                                    txtAutorizacaoUsuarioConectorCF.Select();   
                                }
                            }
                            else
                            {
                                txtAutorizacaoSenhaConectorCF.Clear();
                                txtAutorizacaoSenhaConectorCF.Text = "";
                                txtVisorMsgConectorCF.Text = "SENHA INVÁLIDA";
                            }
                        }
                        else
                        {
                            txtAutorizacaoSenhaConectorCF.Clear();
                            txtAutorizacaoSenhaConectorCF.Text = "";
                            if (alwaysVariables.ModoOperacao == 1)
                            {
                                txtVisorMsgConectorCF.Text = "OPERADOR SEM PEMISSÃO - CAIXA";
                            }
                            else
                            {
                                txtVisorNfce.Text = "OPERADOR SEM PEMISSÃO - CAIXA";
                                txtAutorizacaoSenhaConectorCF.Select();
                            }
                        }
                    }
                    else
                    {
                        if (acessoFiscal == 0 && txtAutorizacaoSenhaConectorCF.Text != "" && (operador_funcao != "4") && (operador_funcao != "5"))
                        {
                            txtVisorMsgConectorCF.Text = "OPERADOR SEM PEMISSÃO - CAIXA";
                            txtAutorizacaoSenhaConectorCF.Select();
                        }
                        else
                        {
                            txtVisorMsgConectorCF.Text = "AGUARDANDO SENHA...!";
                            txtAutorizacaoSenhaConectorCF.Select();
                        }
                    }
                }
                else
                {
                    txtAutorizacaoSenhaConectorCF.Clear();
                    txtAutorizacaoUsuarioConectorCF.Select();
                }
            }
            else
            {
                txtAutorizacaoSenhaConectorCF.Clear();
                txtAutorizacaoUsuarioConectorCF.Select();
            }
        }

        private void txtAutorizacaoUsuarioConectorCF_KeyPress(object sender, KeyPressEventArgs e)
        {
            posSeparator = txtAutorizacaoSenhaConectorCF.Text.IndexOf(".");
            if (e.KeyChar == ',') // Se for digitado "," ser  alterado para "."
                e.KeyChar = '.';
            //Se não for um numero e não  tecla backspace e nao for virgula, barra:
            if (!Char.IsDigit(e.KeyChar) && e.KeyChar != (Char)Keys.Back && e.KeyChar != '.')
            {
                e.Handled = true;
                return;
            }
            if (e.KeyChar == '.' && posSeparator > -1)
            {
                e.Handled = true;
                return;
            }
        }

        private void txtDinheiroConectorCF_KeyPress(object sender, KeyPressEventArgs e)
        {
            posSeparator = txtDinheiroConectorCF.Text.IndexOf(",");
            if (e.KeyChar == '.') // Se for digitado "," ser  alterado para "."
                e.KeyChar = ',';
            //Se não for um numero e não  tecla backspace e nao for virgula, barra:
            if (!Char.IsDigit(e.KeyChar) && e.KeyChar != (Char)Keys.Back && e.KeyChar != ',')
            {
                e.Handled = true;
                return;
            }
            if (e.KeyChar == ',' && posSeparator > -1)
            {
                e.Handled = true;
                return;
            }
        }

        private void txtChequeConectorCF_KeyPress(object sender, KeyPressEventArgs e)
        {
            posSeparator = txtChequeConectorCF.Text.IndexOf(",");
            if (e.KeyChar == '.') // Se for digitado "," ser  alterado para "."
                e.KeyChar = ',';
            //Se não for um numero e não  tecla backspace e nao for virgula, barra:
            if (!Char.IsDigit(e.KeyChar) && e.KeyChar != (Char)Keys.Back && e.KeyChar != ',')
            {
                e.Handled = true;
                return;
            }
            if (e.KeyChar == ',' && posSeparator > -1)
            {
                e.Handled = true;
                return;
            }
        }

        private void txtCrediarioConectorCF_KeyPress(object sender, KeyPressEventArgs e)
        {
            posSeparator = txtCrediarioConectorCF.Text.IndexOf(",");
            if (e.KeyChar == '.') // Se for digitado "," ser  alterado para "."
                e.KeyChar = ',';
            //Se não for um numero e não  tecla backspace e nao for virgula, barra:
            if (!Char.IsDigit(e.KeyChar) && e.KeyChar != (Char)Keys.Back && e.KeyChar != ',')
            {
                e.Handled = true;
                return;
            }
            if (e.KeyChar == ',' && posSeparator > -1)
            {
                e.Handled = true;
                return;
            }
        }

        private void txtConvenioConectorCF_KeyPress(object sender, KeyPressEventArgs e)
        {
            posSeparator = txtConvenioConectorCF.Text.IndexOf(",");
            if (e.KeyChar == '.') // Se for digitado "," ser  alterado para "."
                e.KeyChar = ',';
            //Se não for um numero e não  tecla backspace e nao for virgula, barra:
            if (!Char.IsDigit(e.KeyChar) && e.KeyChar != (Char)Keys.Back && e.KeyChar != ',')
            {
                e.Handled = true;
                return;
            }
            if (e.KeyChar == ',' && posSeparator > -1)
            {
                e.Handled = true;
                return;
            }
        }

        private void txtCartaoDebitoConectorCF_KeyPress(object sender, KeyPressEventArgs e)
        {
            posSeparator = txtCartaoDebitoConectorCF.Text.IndexOf(",");
            if (e.KeyChar == '.') // Se for digitado "," ser  alterado para "."
                e.KeyChar = ',';
            //Se não for um numero e não  tecla backspace e nao for virgula, barra:
            if (!Char.IsDigit(e.KeyChar) && e.KeyChar != (Char)Keys.Back && e.KeyChar != ',')
            {
                e.Handled = true;
                return;
            }
            if (e.KeyChar == ',' && posSeparator > -1)
            {
                e.Handled = true;
                return;
            }
        }

        private void txtCartaoCreditoConectorCF_KeyPress(object sender, KeyPressEventArgs e)
        {
            posSeparator = txtCartaoCreditoConectorCF.Text.IndexOf(",");
            if (e.KeyChar == '.') // Se for digitado "," ser  alterado para "."
                e.KeyChar = ',';
            //Se não for um numero e não  tecla backspace e nao for virgula, barra:
            if (!Char.IsDigit(e.KeyChar) && e.KeyChar != (Char)Keys.Back && e.KeyChar != ',')
            {
                e.Handled = true;
                return;
            }
            if (e.KeyChar == ',' && posSeparator > -1)
            {
                e.Handled = true;
                return;
            }
        }

        private void txtBoletoConectorCF_KeyPress(object sender, KeyPressEventArgs e)
        {
            posSeparator = txtBoletoConectorCF.Text.IndexOf(",");
            if (e.KeyChar == '.') // Se for digitado "," ser  alterado para "."
                e.KeyChar = ',';
            //Se não for um numero e não  tecla backspace e nao for virgula, barra:
            if (!Char.IsDigit(e.KeyChar) && e.KeyChar != (Char)Keys.Back && e.KeyChar != ',')
            {
                e.Handled = true;
                return;
            }
            if (e.KeyChar == ',' && posSeparator > -1)
            {
                e.Handled = true;
                return;
            }
        }

        private void txtDuplicataConectorCF_KeyPress(object sender, KeyPressEventArgs e)
        {
            posSeparator = txtDuplicataConectorCF.Text.IndexOf(",");
            if (e.KeyChar == '.') // Se for digitado "," ser  alterado para "."
                e.KeyChar = ',';
            //Se não for um numero e não  tecla backspace e nao for virgula, barra:
            if (!Char.IsDigit(e.KeyChar) && e.KeyChar != (Char)Keys.Back && e.KeyChar != ',')
            {
                e.Handled = true;
                return;
            }
            if (e.KeyChar == ',' && posSeparator > -1)
            {
                e.Handled = true;
                return;
            }
        }

        private void txtRecebimentoConectorCF_KeyPress(object sender, KeyPressEventArgs e)
        {
            posSeparator = txtRecebimentoConectorCF.Text.IndexOf(",");
            if (e.KeyChar == '.') // Se for digitado "," ser  alterado para "."
                e.KeyChar = ',';
            //Se não for um numero e não  tecla backspace e nao for virgula, barra:
            if (!Char.IsDigit(e.KeyChar) && e.KeyChar != (Char)Keys.Back && e.KeyChar != ',')
            {
                e.Handled = true;
                return;
            }
            if (e.KeyChar == ',' && posSeparator > -1)
            {
                e.Handled = true;
                return;
            }
        }

        private void txtValeConectorCF_KeyPress(object sender, KeyPressEventArgs e)
        {
            posSeparator = txtValeConectorCF.Text.IndexOf(",");
            if (e.KeyChar == '.') // Se for digitado "," ser  alterado para "."
                e.KeyChar = ',';
            //Se não for um numero e não  tecla backspace e nao for virgula, barra:
            if (!Char.IsDigit(e.KeyChar) && e.KeyChar != (Char)Keys.Back && e.KeyChar != ',')
            {
                e.Handled = true;
                return;
            }
            if (e.KeyChar == ',' && posSeparator > -1)
            {
                e.Handled = true;
                return;
            }
        }
        private void txtSubTotalConectorCF_Validated(object sender, EventArgs e)
        {

        }
        private void btnFinalizadoraDinheiroConectorCF_MouseClick(object sender, MouseEventArgs e)
        {
            conector_finalizadora_dinheiro();
            txtDinheiroConectorCF.Select();
        }

        private void btnFinalizadoraChequeConectorCF_MouseClick(object sender, MouseEventArgs e)
        {
            conector_finalizadora_cheque();
            txtChequeConectorCF.Select();
        }

        private void btnFinalizadoraCrediarioConectorCF_MouseClick(object sender, MouseEventArgs e)
        {
            conector_finalizadora_crediario();
            txtCrediarioConectorCF.Select();
        }

        private void btnFinalizadoraConvenioConectorCF_MouseClick(object sender, MouseEventArgs e)
        {
            conector_finalizadora_convenio();
            txtConvenioConectorCF.Select();
        }

        private void btnFinalizadoraCartaoDebitoConectorCF_MouseClick(object sender, MouseEventArgs e)
        {
            conector_finalizadora_cartaoDebito();
            txtCartaoDebitoConectorCF.Select();
        }

        private void btnFinalizadoraCartaoCreditoConectorCF_MouseClick(object sender, MouseEventArgs e)
        {
            conector_finalizadora_cartaoCredito("1", "1");
            txtCartaoCreditoConectorCF.Select();
        }

        private void btnFinalizadoraValeConectorCF_MouseClick(object sender, MouseEventArgs e)
        {
            conector_finalizadora_vale();
            txtValeConectorCF.Select();
        }

        private void btnFinalizadoraRecebimentoConectorCF_MouseClick(object sender, MouseEventArgs e)
        {
            conector_finalizadora_recebimento();
            txtRecebimentoConectorCF.Select();
        }

        private void btnFinalizadoraDuplicataConectorCF_MouseClick(object sender, MouseEventArgs e)
        {
            conector_finalizadora_duplicata();
            txtDuplicataConectorCF.Select();
        }

        private void btnFinalizadoraBoletoConectorCF_MouseClick(object sender, MouseEventArgs e)
        {
            conector_finalizadora_boleto();
            txtBoletoConectorCF.Select();
        }

        private void cmbSituacaoContratoConectorCF_SelectedIndexChanged(object sender, EventArgs e)
        {
            if (cmbSituacaoContratoConectorCF.Text != "")
            {
                auxStatusParcela = (cmbSituacaoContratoConectorCF.Text.Substring(0, 1));
            }
        }

        private void txtLojaConectorCF_KeyPress(object sender, KeyPressEventArgs e)
        {
            if (e.KeyChar == ',') // Se for digitado "," ser  alterado para "."
                e.KeyChar = '.';
            //Se não for um numero e não  tecla backspace e nao for virgula, barra:
            if (!Char.IsDigit(e.KeyChar) && e.KeyChar != (Char)Keys.Back && e.KeyChar != '.')
            {
                e.Handled = true;
                return;
            }
            if (e.KeyChar == '.' && posSeparator > -1)
            {
                e.Handled = true;
                return;
            }
        }

        private void txtNumeroContratoConectorCF_KeyPress(object sender, KeyPressEventArgs e)
        {
            if (e.KeyChar == ',') // Se for digitado "," ser  alterado para "."
                e.KeyChar = '.';
            //Se não for um numero e não  tecla backspace e nao for virgula, barra:
            if (!Char.IsDigit(e.KeyChar) && e.KeyChar != (Char)Keys.Back && e.KeyChar != '.')
            {
                e.Handled = true;
                return;
            }
            if (e.KeyChar == '.' && posSeparator > -1)
            {
                e.Handled = true;
                return;
            }
        }

        private void txtParcelaConectorCF_KeyPress(object sender, KeyPressEventArgs e)
        {
            if (e.KeyChar == ',') // Se for digitado "," ser  alterado para "."
                e.KeyChar = '.';
            //Se não for um numero e não  tecla backspace e nao for virgula, barra:
            if (!Char.IsDigit(e.KeyChar) && e.KeyChar != (Char)Keys.Back && e.KeyChar != '.')
            {
                e.Handled = true;
                return;
            }
            if (e.KeyChar == '.' && posSeparator > -1)
            {
                e.Handled = true;
                return;
            }
        }

        private void txtDiasAtrasoConectorCF_KeyPress(object sender, KeyPressEventArgs e)
        {
            if (e.KeyChar == ',') // Se for digitado "," ser  alterado para "."
                e.KeyChar = '.';
            //Se não for um numero e não  tecla backspace e nao for virgula, barra:
            if (!Char.IsDigit(e.KeyChar) && e.KeyChar != (Char)Keys.Back && e.KeyChar != '.')
            {
                e.Handled = true;
                return;
            }
            if (e.KeyChar == '.' && posSeparator > -1)
            {
                e.Handled = true;
                return;
            }
        }

        private void txtValorPrestacaoConectorCF_KeyPress(object sender, KeyPressEventArgs e)
        {
            posSeparator = txtValorPrestacaoConectorCF.Text.IndexOf(".");
            if (e.KeyChar == ',') // Se for digitado "," ser  alterado para "."
                e.KeyChar = '.';
            //Se não for um numero e não  tecla backspace e nao for virgula, barra:
            if (!Char.IsDigit(e.KeyChar) && e.KeyChar != (Char)Keys.Back && e.KeyChar != '.')
            {
                e.Handled = true;
                return;
            }
            if (e.KeyChar == '.' && posSeparator > -1)
            {
                e.Handled = true;
                return;
            }
        }

        private void txtArmotizadoConectorCF_KeyPress(object sender, KeyPressEventArgs e)
        {
            posSeparator = txtArmotizadoConectorCF.Text.IndexOf(".");
            if (e.KeyChar == ',') // Se for digitado "," ser  alterado para "."
                e.KeyChar = '.';
            //Se não for um numero e não  tecla backspace e nao for virgula, barra:
            if (!Char.IsDigit(e.KeyChar) && e.KeyChar != (Char)Keys.Back && e.KeyChar != '.')
            {
                e.Handled = true;
                return;
            }
            if (e.KeyChar == '.' && posSeparator > -1)
            {
                e.Handled = true;
                return;
            }
        }

        private void txtAcrescimoConectorCF_KeyPress(object sender, KeyPressEventArgs e)
        {
            posSeparator = txtAcrescimoConectorCF.Text.IndexOf(".");
            if (e.KeyChar == ',') // Se for digitado "," ser  alterado para "."
                e.KeyChar = '.';
            //Se não for um numero e não  tecla backspace e nao for virgula, barra:
            if (!Char.IsDigit(e.KeyChar) && e.KeyChar != (Char)Keys.Back && e.KeyChar != '.')
            {
                e.Handled = true;
                return;
            }
            if (e.KeyChar == '.' && posSeparator > -1)
            {
                e.Handled = true;
                return;
            }
        }

        private void txtValorReajustadoConectorCF_KeyPress(object sender, KeyPressEventArgs e)
        {
            posSeparator = txtValorReajustadoConectorCF.Text.IndexOf(".");
            if (e.KeyChar == ',') // Se for digitado "," ser  alterado para "."
                e.KeyChar = '.';
            //Se não for um numero e não  tecla backspace e nao for virgula, barra:
            if (!Char.IsDigit(e.KeyChar) && e.KeyChar != (Char)Keys.Back && e.KeyChar != '.')
            {
                e.Handled = true;
                return;
            }
            if (e.KeyChar == '.' && posSeparator > -1)
            {
                e.Handled = true;
                return;
            }
        }

        private void txtComissaoCobradorConectorCF_KeyPress(object sender, KeyPressEventArgs e)
        {
            posSeparator = txtComissaoCobradorConectorCF.Text.IndexOf(".");
            if (e.KeyChar == ',') // Se for digitado "," ser  alterado para "."
                e.KeyChar = '.';
            //Se não for um numero e não  tecla backspace e nao for virgula, barra:
            if (!Char.IsDigit(e.KeyChar) && e.KeyChar != (Char)Keys.Back && e.KeyChar != '.')
            {
                e.Handled = true;
                return;
            }
            if (e.KeyChar == '.' && posSeparator > -1)
            {
                e.Handled = true;
                return;
            }
        }

        private void txtTotalDevidoConectorCF_KeyPress(object sender, KeyPressEventArgs e)
        {
            posSeparator = txtTotalDevidoConectorCF.Text.IndexOf(".");
            if (e.KeyChar == ',') // Se for digitado "," ser  alterado para "."
                e.KeyChar = '.';
            //Se não for um numero e não  tecla backspace e nao for virgula, barra:
            if (!Char.IsDigit(e.KeyChar) && e.KeyChar != (Char)Keys.Back && e.KeyChar != '.')
            {
                e.Handled = true;
                return;
            }
            if (e.KeyChar == '.' && posSeparator > -1)
            {
                e.Handled = true;
                return;
            }
        }

        private void txtCodigoCobradorConectorCF_KeyPress(object sender, KeyPressEventArgs e)
        {
            if (e.KeyChar == ',') // Se for digitado "," ser  alterado para "."
                e.KeyChar = '.';
            //Se não for um numero e não  tecla backspace e nao for virgula, barra:
            if (!Char.IsDigit(e.KeyChar) && e.KeyChar != (Char)Keys.Back && e.KeyChar != '.')
            {
                e.Handled = true;
                return;
            }
            if (e.KeyChar == '.' && posSeparator > -1)
            {
                e.Handled = true;
                return;
            }
        }

        private void txtCodigoAvalistaConectorCF_KeyPress(object sender, KeyPressEventArgs e)
        {
            if (e.KeyChar == ',') // Se for digitado "," ser  alterado para "."
                e.KeyChar = '.';
            //Se não for um numero e não  tecla backspace e nao for virgula, barra:
            if (!Char.IsDigit(e.KeyChar) && e.KeyChar != (Char)Keys.Back && e.KeyChar != '.')
            {
                e.Handled = true;
                return;
            }
            if (e.KeyChar == '.' && posSeparator > -1)
            {
                e.Handled = true;
                return;
            }
        }

        private void txtValorDescontoConectorCF_KeyPress(object sender, KeyPressEventArgs e)
        {
            posSeparator = txtValorDescontoConectorCF.Text.IndexOf(".");
            if (e.KeyChar == ',') // Se for digitado "," ser  alterado para "."
                e.KeyChar = '.';
            //Se não for um numero e não  tecla backspace e nao for virgula, barra:
            if (!Char.IsDigit(e.KeyChar) && e.KeyChar != (Char)Keys.Back && e.KeyChar != '.')
            {
                e.Handled = true;
                return;
            }
            if (e.KeyChar == '.' && posSeparator > -1)
            {
                e.Handled = true;
                return;
            }
        }

        private void txtValorPagoConectorCF_KeyPress(object sender, KeyPressEventArgs e)
        {
            posSeparator = txtValorPagoConectorCF.Text.IndexOf(".");
            if (e.KeyChar == ',') // Se for digitado "," ser  alterado para "."
                e.KeyChar = '.';
            //Se não for um numero e não  tecla backspace e nao for virgula, barra:
            if (!Char.IsDigit(e.KeyChar) && e.KeyChar != (Char)Keys.Back && e.KeyChar != '.')
            {
                e.Handled = true;
                return;
            }
            if (e.KeyChar == '.' && posSeparator > -1)
            {
                e.Handled = true;
                return;
            }
        }

        private void txtRestanteConectorCF_KeyPress(object sender, KeyPressEventArgs e)
        {
            posSeparator = txtRestanteConectorCF.Text.IndexOf(".");
            if (e.KeyChar == ',') // Se for digitado "," ser  alterado para "."
                e.KeyChar = '.';
            //Se não for um numero e não  tecla backspace e nao for virgula, barra:
            if (!Char.IsDigit(e.KeyChar) && e.KeyChar != (Char)Keys.Back && e.KeyChar != '.')
            {
                e.Handled = true;
                return;
            }
            if (e.KeyChar == '.' && posSeparator > -1)
            {
                e.Handled = true;
                return;
            }
        }

        private void txtValorTrocoConectorCF_KeyPress(object sender, KeyPressEventArgs e)
        {
            posSeparator = txtValorTrocoConectorCF.Text.IndexOf(".");
            if (e.KeyChar == ',') // Se for digitado "," ser  alterado para "."
                e.KeyChar = '.';
            //Se não for um numero e não  tecla backspace e nao for virgula, barra:
            if (!Char.IsDigit(e.KeyChar) && e.KeyChar != (Char)Keys.Back && e.KeyChar != '.')
            {
                e.Handled = true;
                return;
            }
            if (e.KeyChar == '.' && posSeparator > -1)
            {
                e.Handled = true;
                return;
            }
        }

        private void txtLojaConectorCF_Validated(object sender, EventArgs e)
        {
            if (String.Format("{0:ddMMyy}", DateTime.Now) == fiscal_data_movimento)
            {
                if (txtLojaConectorCF.Text == "")
                {
                    txtLojaConectorCF.Text = "0";
                }
                else
                {
                    if (txtParcelaConectorCF.Text != "" && txtParcelaConectorCF.Text != "0")
                    {
                        conectorPDV_talk_parcela();
                    }
                }
            }
        }

        private void txtNumeroContratoConectorCF_Validated(object sender, EventArgs e)
        {
            if (String.Format("{0:ddMMyy}", DateTime.Now) == fiscal_data_movimento)
            {
                if (txtNumeroContratoConectorCF.Text != "" && Convert.ToDouble(txtNumeroContratoConectorCF.Text) > 0)
                {
                    auxNumeric = Convert.ToDecimal(txtNumeroContratoConectorCF.Text);//currency
                    flagNumeric = String.Format("{0:F0}", auxNumeric);
                    txtNumeroContratoConectorCF.Text = flagNumeric.Replace(",", ".").Trim();
                    if (txtParcelaConectorCF.Text != "" && txtParcelaConectorCF.Text != "0")
                    {
                        conectorPDV_talk_parcela();
                    }
                }
                else
                {
                    txtNumeroContratoConectorCF.Text = "000000000000000000000";
                }
            }
        }

        private void txtParcelaConectorCF_Validated(object sender, EventArgs e)
        {
            if (String.Format("{0:ddMMyy}", DateTime.Now) == fiscal_data_movimento)
            {
                if (txtParcelaConectorCF.Text != "")
                {
                    auxNumeric = Convert.ToDecimal(txtParcelaConectorCF.Text);//currency
                    flagNumeric = String.Format("{0:F0}", auxNumeric);
                    txtParcelaConectorCF.Text = flagNumeric.Replace(",", ".").Trim();
                    conectorPDV_talk_parcela();
                }
                else
                {
                    txtParcelaConectorCF.Text = "0";
                }
            }
        }

        private void txtDiasAtrasoConectorCF_Validated(object sender, EventArgs e)
        {
            if (String.Format("{0:ddMMyy}", DateTime.Now) == fiscal_data_movimento)
            {
                if (txtDiasAtrasoConectorCF.Text != "")
                {
                    auxNumeric = Convert.ToDecimal(txtDiasAtrasoConectorCF.Text);//currency
                    flagNumeric = String.Format("{0:F0}", auxNumeric);
                    txtDiasAtrasoConectorCF.Text = flagNumeric.Replace(",", ".").Trim();
                }
                else
                {
                    txtDiasAtrasoConectorCF.Text = "0";
                }
            }
        }

        private void txtValorPrestacaoConectorCF_Validated(object sender, EventArgs e)
        {
            if (String.Format("{0:ddMMyy}", DateTime.Now) == fiscal_data_movimento)
            {
                if (txtValorPrestacaoConectorCF.Text != "")
                {
                    auxNumeric = Convert.ToDecimal(txtValorPrestacaoConectorCF.Text);//currency
                    flagNumeric = String.Format("{0:F2}", auxNumeric);
                    txtValorPrestacaoConectorCF.Text = flagNumeric.Replace(",", ".").Trim();
                }
                else
                {
                    txtValorPrestacaoConectorCF.Text = "0,00";
                }
            }
        }

        private void txtArmotizadoConectorCF_Validated(object sender, EventArgs e)
        {
            if (String.Format("{0:ddMMyy}", DateTime.Now) == fiscal_data_movimento)
            {
                if (txtArmotizadoConectorCF.Text != "")
                {
                    auxNumeric = Convert.ToDecimal(txtArmotizadoConectorCF.Text);//currency
                    flagNumeric = String.Format("{0:F2}", auxNumeric);
                    txtArmotizadoConectorCF.Text = flagNumeric.Replace(",", ".").Trim();
                }
                else
                {
                    txtArmotizadoConectorCF.Text = "0,00";
                }
            }
        }

        private void txtAcrescimoConectorCF_Validated(object sender, EventArgs e)
        {
            if (txtAcrescimoConectorCF.Text != "")
            {
                auxNumeric = Convert.ToDecimal(txtAcrescimoConectorCF.Text);//currency
                flagNumeric = String.Format("{0:F2}", auxNumeric);
                txtAcrescimoConectorCF.Text = flagNumeric.Replace(",", ".").Trim();
            }
            else
            {
                txtAcrescimoConectorCF.Text = "0,00";
            }
        }

        private void txtValorReajustadoConectorCF_Validated(object sender, EventArgs e)
        {
            if (String.Format("{0:ddMMyy}", DateTime.Now) == fiscal_data_movimento)
            {
                if (txtValorReajustadoConectorCF.Text != "")
                {
                    auxNumeric = Convert.ToDecimal(txtValorReajustadoConectorCF.Text);//currency
                    flagNumeric = String.Format("{0:F2}", auxNumeric);
                    txtValorReajustadoConectorCF.Text = flagNumeric.Replace(",", ".").Trim();
                }
                else
                {
                    txtValorReajustadoConectorCF.Text = "0,00";
                }
            }
        }

        private void txtComissaoCobradorConectorCF_Validated(object sender, EventArgs e)
        {
            if (txtComissaoCobradorConectorCF.Text != "")
            {
                auxNumeric = Convert.ToDecimal(txtComissaoCobradorConectorCF.Text);//currency
                flagNumeric = String.Format("{0:F2}", auxNumeric);
                txtComissaoCobradorConectorCF.Text = flagNumeric.Replace(",", ".").Trim();
            }
            else
            {
                txtComissaoCobradorConectorCF.Text = "0,00";
            }
        }

        private void txtTotalDevidoConectorCF_Validated(object sender, EventArgs e)
        {
            if (String.Format("{0:ddMMyy}", DateTime.Now) == fiscal_data_movimento)
            {
                if (txtTotalDevidoConectorCF.Text != "")
                {
                    auxNumeric = Convert.ToDecimal(txtTotalDevidoConectorCF.Text);//currency
                    flagNumeric = String.Format("{0:F2}", auxNumeric);
                    txtTotalDevidoConectorCF.Text = flagNumeric.Replace(",", ".").Trim();
                }
                else
                {
                    txtTotalDevidoConectorCF.Text = "0,00";
                }
            }
        }

        private void txtCodigoCobradorConectorCF_Validated(object sender, EventArgs e)
        {
            if (txtCodigoCobradorConectorCF.Text != "")
            {
                auxNumeric = Convert.ToDecimal(txtCodigoCobradorConectorCF.Text);//currency
                flagNumeric = String.Format("{0:F0}", auxNumeric);
                txtCodigoCobradorConectorCF.Text = flagNumeric.Replace(",", ".").Trim();
            }
            else
            {
                txtCodigoCobradorConectorCF.Text = "0";
            }
        }

        private void txtCodigoAvalistaConectorCF_Validated(object sender, EventArgs e)
        {
            if (txtCodigoAvalistaConectorCF.Text != "")
            {
                auxNumeric = Convert.ToDecimal(txtCodigoAvalistaConectorCF.Text);//currency
                flagNumeric = String.Format("{0:F0}", auxNumeric);
                txtCodigoAvalistaConectorCF.Text = flagNumeric.Replace(",", ".").Trim();
            }
            else
            {
                txtCodigoAvalistaConectorCF.Text = "0";
            }
        }

        private void txtNumeroUsuarioConectorCF_Validated(object sender, EventArgs e)
        {
            txtSenhaLiberacaoDescontoConectorCF.ReadOnly = false;
        }

        private void txtSenhaLiberacaoDescontoConectorCF_Validated(object sender, EventArgs e)
        {
            if (String.Format("{0:ddMMyy}", DateTime.Now) == fiscal_data_movimento)
            {
                verifica_passwd_crediario(txtSenhaLiberacaoDescontoConectorCF.Text, key.getHash);
            }
        }

        private void txtValorDescontoConectorCF_Validated(object sender, EventArgs e)
        {
            if (String.Format("{0:ddMMyy}", DateTime.Now) == fiscal_data_movimento)
            {
                if (txtValorDescontoConectorCF.Text != "")
                {
                    auxNumeric = Convert.ToDecimal(txtValorDescontoConectorCF.Text);//currency
                    flagNumeric = String.Format("{0:F2}", auxNumeric);
                    txtValorDescontoConectorCF.Text = flagNumeric.Replace(",", ".").Trim();

                    //#########################Solicita liberacao desconto
                    txtSenhaLiberacaoDescontoConectorCF.CausesValidation = false;
                    txtValorDescontoConectorCF.ReadOnly = true;
                    //txtValorDescontoCaixaCrediario.Text = "0,00";
                    txtNumeroUsuarioConectorCF.Text = "";
                    lbNomeUsuarioConectorCF.Text = "";
                    lbMensagemConectorCF.Text = "DIGITE A SENHA PARA LIBERAÇÃO DO DESCONTO.";
                    lbMensagemConectorCF.ForeColor = Color.Yellow;
                    txtNumeroUsuarioConectorCF.ReadOnly = true;
                    txtSenhaLiberacaoDescontoConectorCF.Clear();
                    txtSenhaLiberacaoDescontoConectorCF.ReadOnly = false;
                    txtSenhaLiberacaoDescontoConectorCF.Select();
                    txtSenhaLiberacaoDescontoConectorCF.CausesValidation = true;
                    //#########################End Desconto
                }
                else
                {
                    txtValorDescontoConectorCF.Text = "0,00";
                }
            }
        }

        private void txtValorPagoConectorCF_Validated(object sender, EventArgs e)
        {
            if (String.Format("{0:ddMMyy}", DateTime.Now) == fiscal_data_movimento)
            {
                if (txtValorPagoConectorCF.Text != "")
                {
                    auxNumeric = Convert.ToDecimal(txtValorPagoConectorCF.Text);//currency
                    flagNumeric = String.Format("{0:F2}", auxNumeric);
                    txtValorPagoConectorCF.Text = flagNumeric.Replace(",", ".").Trim();
                }
                else
                {
                    txtValorPagoConectorCF.Text = "0,00";
                }
            }
        }

        private void txtRestanteConectorCF_Validated(object sender, EventArgs e)
        {
            if (String.Format("{0:ddMMyy}", DateTime.Now) == fiscal_data_movimento)
            {
                if (txtRestanteConectorCF.Text != "")
                {
                    auxNumeric = Convert.ToDecimal(txtRestanteConectorCF.Text);//currency
                    flagNumeric = String.Format("{0:F2}", auxNumeric);
                    txtRestanteConectorCF.Text = flagNumeric.Replace(",", ".").Trim();
                }
                else
                {
                    txtRestanteConectorCF.Text = "0,00";
                }
            }
        }

        private void txtValorTrocoConectorCF_Validated(object sender, EventArgs e)
        {
            if (String.Format("{0:ddMMyy}", DateTime.Now) == fiscal_data_movimento)
            {
                if (txtValorTrocoConectorCF.Text != "")
                {
                    auxNumeric = Convert.ToDecimal(txtValorTrocoConectorCF.Text);//currency
                    flagNumeric = String.Format("{0:F2}", auxNumeric);
                    txtValorTrocoConectorCF.Text = flagNumeric.Replace(",", ".").Trim();
                }
                else
                {
                    txtValorTrocoConectorCF.Text = "0,00";
                }
            }
        }

        private void btnTotalConectorCF_Click(object sender, EventArgs e)
        {
            if (String.Format("{0:ddMMyy}", DateTime.Now) == fiscal_data_movimento)
            {
                if (Convert.ToDecimal(txtTotalDevidoConectorCF.Text) > 0)
                {
                    txtValorMontanteConectorCF.ReadOnly = false;
                    txtValorMontanteConectorCF.Select();
                    auxIdFinalizadora = "1";
                    auxTypeHistory = "7";
                }
                else
                {
                    msgInfo msg = new msgInfo(1,"Caro Cliente - " + "Valor nulo ou igual a ZERO para o total devido impossível prosseguir."); msg.ShowDialog();
                    returnDefaultPDV();
                }
            }
            else
            {
                msg = new msgInfo(1,"DATA DA IMPRESSORA DIFERENTE DA DATA DO SISTEMA,\n VERIFIQUE O STATUS DA IMPRESSORA,\n MOVIMENTO DO DIA VESUS DATA IMPRESSORA,\n AGUARDANDO EMISSÃO DA LEITURA Z."); msg.ShowDialog();
                txtEntradaDadosConectorCF.Select();
            }
        }

        private void btnDinheiroConectorCF_Click(object sender, EventArgs e)
        {
            conector_calc_money();
        }

        private void btnChequeConectorCF_Click(object sender, EventArgs e)
        {
            conector_calc_cheque();
        }

        private void btnCartaoConectorCF_Click(object sender, EventArgs e)
        {
            conector_calc_cartao();
        }

        private void btnValeConectorCF_Click(object sender, EventArgs e)
        {
            conector_calc_vale();
        }

        private void btnDescontoConectorCF_Click(object sender, EventArgs e)
        {
            conector_calc_desconto();
        }

        private void txtValorMontanteConectorCF_Validated(object sender, EventArgs e)
        {
            if (String.Format("{0:ddMMyy}", DateTime.Now) == fiscal_data_movimento)
            {
                if (txtValorMontanteConectorCF.Text != "")
                {
                    auxNumeric = Convert.ToDecimal(txtValorMontanteConectorCF.Text);//currency
                    flagNumeric = String.Format("{0:F2}", auxNumeric);
                    txtValorMontanteConectorCF.Text = flagNumeric.Replace(",", ".").Trim();
                }
                else
                {
                    txtValorMontanteConectorCF.Text = "0,00";
                }
            }
            else
            {
                msg = new msgInfo("DATA DA IMPRESSORA DIFERENTE DA DATA DO SISTEMA,\n VERIFIQUE O STATUS DA IMPRESSORA,\n MOVIMENTO DO DIA VESUS DATA IMPRESSORA,\n AGUARDANDO EMISSÃO DA LEITURA Z."); msg.ShowDialog();
                txtEntradaDadosConectorCF.Select();
            }
        }

        private void txtValorMontanteConectorCF_KeyPress(object sender, KeyPressEventArgs e)
        {
            posSeparator = txtValorMontanteConectorCF.Text.IndexOf(".");
            if (e.KeyChar == ',') // Se for digitado "," ser  alterado para "."
                e.KeyChar = '.';
            //Se não for um numero e não  tecla backspace e nao for virgula, barra:
            if (!Char.IsDigit(e.KeyChar) && e.KeyChar != (Char)Keys.Back && e.KeyChar != '.')
            {
                e.Handled = true;
                return;
            }
            if (e.KeyChar == '.' && posSeparator > -1)
            {
                e.Handled = true;
                return;
            }
        }

        private void btnConfirmaConectorCF_Click(object sender, EventArgs e)
        {
            conector_aut_recebimento();
        }

        private void btnControleParcelaConectorCF_Click(object sender, EventArgs e)
        {
            txtParcelaConectorCF.Select();
        }

        private void btnControleContratoConectorCF_Click(object sender, EventArgs e)
        {
            txtNumeroContratoConectorCF.Select();
        }

        private void btnControleLojaConectorCF_Click(object sender, EventArgs e)
        {
            txtLojaConectorCF.Select();
        }

        private void btnPesquisaConectorCF_Click(object sender, EventArgs e)
        {
            if (txtLojaConectorCF.Text != "" && txtLojaConectorCF.Text != "0") //Ação com informações
            {
                if (txtNumeroContratoConectorCF.Text != "" && txtNumeroContratoConectorCF.Text != "000000000000000000000" && Convert.ToDouble(txtNumeroContratoConectorCF.Text) > 0)
                {
                    if (txtParcelaConectorCF.Text != "")
                    {
                        int test = conector_verifica_exits_contrato(txtNumeroContratoConectorCF.Text, txtParcelaConectorCF.Text, txtLojaConectorCF.Text);
                        if (test == 1)
                        {
                            conectorPDV_exe_parcela();
                        }
                        else if (test == 0)
                        {
                            msgInfo msg = new msgInfo(1,"Caro Operador - " + "Uma consulta web ao servidor será realizada, caso obtenha sucesso a sua será atualizada...!"); msg.ShowDialog();
                            conector_webservice_crediario(txtLojaConectorCF.Text, txtNumeroContratoConectorCF.Text, txtParcelaConectorCF.Text);
                        }
                    }
                    else
                    {
                        msgInfo msg = new msgInfo(1,"Caro Operador - " + "Parcela inválida."); msg.ShowDialog();
                        txtNumeroContratoConectorCF.Select();
                    }
                }
                else
                {
                    msgInfo msg = new msgInfo("Caro Operador - " + "Contrato inválido, ou não existe."); msg.ShowDialog();
                    txtNumeroContratoConectorCF.Select();
                }
            }
            else
            {
                msgInfo msg = new msgInfo("Caro Operador - " + "Loja inválida, ou não existe."); msg.ShowDialog();
                txtLojaConectorCF.Select();
            }
        }

        private void txtDinheiroConectorCF_Click(object sender, EventArgs e)
        {
            if (fiscal_flag == 35 && Convert.ToDecimal(txtDinheiroConectorCF.Text) > 0)
            {
                msg = new msgInfo("FORMA DE PAGAMENTO INICIADA NO ECF,\n FINALIZE O CUPOM FISCAL."); msg.ShowDialog();
                txtDinheiroConectorCF.ReadOnly = true;
            }
            else
            {
                this.pnlTotalConectorCF.Size = new System.Drawing.Size(650, 527);
                txtDinheiroConectorCF.Select();
                call_finalizadora = "D";
            }
        }

        private void txtChequeConectorCF_Click(object sender, EventArgs e)
        {
            if (fiscal_flag == 35 && Convert.ToDecimal(txtChequeConectorCF.Text) > 0)
            {
                msg = new msgInfo("FORMA DE PAGAMENTO INICIADA NO ECF,\n FINALIZE O CUPOM FISCAL."); msg.ShowDialog();
                txtChequeConectorCF.ReadOnly = true;
            }
            else
            {
                //validaFinalizadoras(false, "H");
                //txtChequeConectorCF.Select();
                conector_reset_cheque();
                pnlTotalConectorCF.Size = new System.Drawing.Size(650, 527);
                lblVisorEntradaDadosConectorCF.Text = "CPF ou CNPJ DO CLIENTE";
                call_finalizadora = "H";
                txtEntradaDadosConectorCF.ReadOnly = false;
                txtEntradaDadosConectorCF.CausesValidation = false;
                txtEntradaDadosConectorCF.Select();
                txtEntradaDadosConectorCF.CausesValidation = true;
                //validaFinalizadoras(true, "h");
            }
        }

        private void txtCrediarioConectorCF_Click(object sender, EventArgs e)
        {
            if (fiscal_flag == 35 && Convert.ToDecimal(txtCrediarioConectorCF.Text) > 0)
            {
                msg = new msgInfo("FORMA DE PAGAMENTO INICIADA NO ECF,\n FINALIZE O CUPOM FISCAL."); msg.ShowDialog();
                txtCrediarioConectorCF.ReadOnly = true;
            }
            else
            {
                conector_reset_pessoa();
                pnlTotalConectorCF.Size = new System.Drawing.Size(650, 527);
                lblVisorEntradaDadosConectorCF.Text = "INFORME A LOJA DE CADASTRO DO CLIENTE";
                call_finalizadora = "C";
                txtEntradaDadosConectorCF.ReadOnly = false;
                txtEntradaDadosConectorCF.CausesValidation = false;
                txtEntradaDadosConectorCF.Select();
                txtEntradaDadosConectorCF.CausesValidation = true;
            }
        }

        private void txtConvenioConectorCF_Click(object sender, EventArgs e)
        {
            if (fiscal_flag == 35 && Convert.ToDecimal(txtConvenioConectorCF.Text) > 0)
            {
                msg = new msgInfo("FORMA DE PAGAMENTO INICIADA NO ECF,\n FINALIZE O CUPOM FISCAL."); msg.ShowDialog();
                txtConvenioConectorCF.ReadOnly = true;
            }
            else
            {
                conector_reset_convenio();
                this.pnlTotalConectorCF.Size = new System.Drawing.Size(701, 422);
                lblVisorEntradaDadosConectorCF.Text = "INFORME A EMPRESA CONVENIADA";
                call_finalizadora = "O";
                txtEntradaDadosConectorCF.ReadOnly = false;
                txtEntradaDadosConectorCF.CausesValidation = false;
                txtEntradaDadosConectorCF.Select();
                txtEntradaDadosConectorCF.CausesValidation = true;
            }
        }

        private void txtCartaoDebitoConectorCF_Click(object sender, EventArgs e)
        {
            if (fiscal_flag == 35 && Convert.ToDecimal(txtCartaoDebitoConectorCF.Text) > 0)
            {
                msg = new msgInfo("FORMA DE PAGAMENTO INICIADA NO ECF,\n FINALIZE O CUPOM FISCAL."); msg.ShowDialog();
                txtCartaoDebitoConectorCF.ReadOnly = true;
            }
            else
            {
                txtVisorMsgConectorCF.Text = "TRANSAÇÃO TEF";
                this.pnlTotalConectorCF.Size = new System.Drawing.Size(701, 422);
                lblVisorEntradaDadosConectorCF.Text = "INICIANDO TRANSAÇÃO TEF";
                //this.pnlTotalConectorCF.Size = new System.Drawing.Size(650, 527);
                txtCartaoDebitoConectorCF.Select();
                call_finalizadora = "A";
            }
        }

        private void txtCartaoCreditoConectorCF_Click(object sender, EventArgs e)
        {
            if (fiscal_flag == 35 && Convert.ToDecimal(txtCartaoCreditoConectorCF.Text) > 0)
            {
                msg = new msgInfo("FORMA DE PAGAMENTO INICIADA NO ECF,\n FINALIZE O CUPOM FISCAL."); msg.ShowDialog();
                txtCartaoCreditoConectorCF.ReadOnly = true;
            }
            else
            {
                txtVisorMsgConectorCF.Text = "TRANSAÇÃO TEF";
                this.pnlTotalConectorCF.Size = new System.Drawing.Size(701, 422);
                lblVisorEntradaDadosConectorCF.Text = "INICIANDO TRANSAÇÃO TEF";
                //this.pnlTotalConectorCF.Size = new System.Drawing.Size(650, 527);
                txtCartaoCreditoConectorCF.Select();
                call_finalizadora = "E";
            }
        }

        private void txtBoletoConectorCF_Click(object sender, EventArgs e)
        {
            if (fiscal_flag == 35 && Convert.ToDecimal(txtBoletoConectorCF.Text) > 0)
            {
                msg = new msgInfo("FORMA DE PAGAMENTO INICIADA NO ECF,\n FINALIZE O CUPOM FISCAL."); msg.ShowDialog();
                txtBoletoConectorCF.ReadOnly = true;
            }
            else
            {
                this.pnlTotalConectorCF.Size = new System.Drawing.Size(650, 527);
                txtBoletoConectorCF.Select();
                call_finalizadora = "B";
            }
        }

        private void txtDuplicataConectorCF_Click(object sender, EventArgs e)
        {
            if (fiscal_flag == 35 && Convert.ToDecimal(txtDuplicataConectorCF.Text) > 0)
            {
                msg = new msgInfo("FORMA DE PAGAMENTO INICIADA NO ECF,\n FINALIZE O CUPOM FISCAL."); msg.ShowDialog();
                txtDuplicataConectorCF.ReadOnly = true;
            }
            else
            {
                this.pnlTotalConectorCF.Size = new System.Drawing.Size(650, 527);
                txtDuplicataConectorCF.Select();
                call_finalizadora = "U";
            }
        }

        private void txtRecebimentoConectorCF_Click(object sender, EventArgs e)
        {
            if (fiscal_flag == 35 && Convert.ToDecimal(txtRecebimentoConectorCF.Text) > 0)
            {
                msg = new msgInfo("FORMA DE PAGAMENTO INICIADA NO ECF,\n FINALIZE O CUPOM FISCAL."); msg.ShowDialog();
                txtRecebimentoConectorCF.ReadOnly = true;
            }
            else
            {
                this.pnlTotalConectorCF.Size = new System.Drawing.Size(650, 527);
                txtRecebimentoConectorCF.Select();
                call_finalizadora = "R";
            }
        }

        private void txtValeConectorCF_Click(object sender, EventArgs e)
        {
            if (fiscal_flag == 35 && Convert.ToDecimal(txtValeConectorCF.Text.Replace(",", ".")) > 0)
            {
                msg = new msgInfo("FORMA DE PAGAMENTO INICIADA NO ECF,\n FINALIZE O CUPOM FISCAL."); msg.ShowDialog();
                txtValeConectorCF.ReadOnly = true;
            }
            else
            {
                this.pnlTotalConectorCF.Size = new System.Drawing.Size(650, 527);
                txtValeConectorCF.Select();
                call_finalizadora = "V";
            }
        }

        private void btnCancelamentoConectorCF_Click(object sender, EventArgs e)
        {
            if (fiscal_flag == 1 || fiscal_flag == 0)
            {
                functionECF.conectorECF_CancelaRecebimentoNaoFiscalMFD(alwaysVariables.ModeloEcf, auxCPFCNPJ, auxNomeRazao, auxLogradouro, ref fiscal_MSG, ref fiscal_retorno, alwaysVariables.ECF_Ligada);
                //conectorECF.Bematech_FI_CancelaRecebimentoNaoFiscalMFD(auxCPFCNPJ, auxNomeRazao, auxLogradouro);
                //conectorECF.Analisa_iRetorno(fiscal_retorno, ref fiscal_MSG);

                vetorRecebimento = new string[12] { "#", "#", "#", "#", "#", "#", "#", "#", "#", "#", "#", "#" };
                returnDefaultPDV();

            }
        }

        private void pnlCrediarioConectorCF_Paint(object sender, PaintEventArgs e)
        {

        }

        private void label1_Click(object sender, EventArgs e)
        {

        }

        private void btnLeituraXMenuFiscal_Click(object sender, EventArgs e)
        {
            call_funcao = 1;
            txtVisorMsgConectorCF.Text = "EMISSÃO DE LEITURA X";
            //fiscal_retorno = conectorECF.Bematech_FI_LeituraX();
            functionECF.conectorECF_LeituraX(alwaysVariables.ModeloEcf, ref fiscal_MSG, ref fiscal_retorno, alwaysVariables.ECF_Ligada);

            if (fiscal_retorno == 1)
            {
                conectorPDV_inc_cupom_relatorio("RG",null);
            }
            //conectorECF.Analisa_iRetorno(fiscal_retorno, ref fiscal_MSG);
        }

        private void btnLMFCMenuFiscal_Click(object sender, EventArgs e)
        {
            call_funcao = 2;
            txtVisorMsgConectorCF.Text = "Emissão de Memoria Fiscal por data";
        }

        private void btnLMFSMenuFiscal_Click(object sender, EventArgs e)
        {
            call_funcao = 3;
        }

        private void btnEspelhoMFDMenuFiscal_Click(object sender, EventArgs e)
        {
            call_funcao = 4;
        }

        private void btnArquivoMfdMenuFiscal_Click(object sender, EventArgs e)
        {
            call_funcao = 5;
        }

        private void btnTabProdutoMenuFiscal_Click(object sender, EventArgs e)
        {
            call_funcao = 6;
        }

        private void btnEstoqueMenuFiscal_Click(object sender, EventArgs e)
        {
            call_funcao = 7;
        }

        private void btnMovimentoECFMenuFiscal_Click(object sender, EventArgs e)
        {
            call_funcao = 8;
        }

        private void btnMeioPgtoMenuFiscal_Click(object sender, EventArgs e)
        {
            call_funcao = 9;
        }

        private void btnDAVEmitidosMenuFiscal_Click(object sender, EventArgs e)
        {
            call_funcao = 10;
        }

        private void btnIdentificacaoPAFECFMenuFiscal_Click(object sender, EventArgs e)
        {
            call_funcao = 11;
        }

        private void btnVendaDoPeriodoMenuFiscal_Click(object sender, EventArgs e)
        {
            call_funcao = 12;
        }

        private void btnTabIndiceTecnicoProdutoMenuFiscal_Click(object sender, EventArgs e)
        {
            call_funcao = 13;
        }

        private void btnParamentroConfiguracaoMenuFiscal_Click(object sender, EventArgs e)
        {
            call_funcao = 13;
        }

        private static void DataReceivedHandler(
                     object sender,
                     SerialDataReceivedEventArgs e)
        {
            SerialPort sp = (SerialPort)sender;
            string indata = sp.ReadExisting();
            Console.WriteLine("Data Received:");
            Console.Write(indata);
        }
        private void timer_conector_Tick(object sender, EventArgs e)
        {
            
            conector_process_venda();
        }

        private void btnPesquisaProduto_Click(object sender, EventArgs e)
        {
            conectorPDV_find_consultaProduto(auxTipoConsulta);
        }

        private void btnLimpaProduto_Click(object sender, EventArgs e)
        {
            conector_limpa_consulta();
        }

        private void txtPesquisaProduto_KeyPress(object sender, KeyPressEventArgs e)
        {
            if (auxTipoConsulta == "2")
            {
                posSeparator = txtAutorizacaoSenhaConectorCF.Text.IndexOf(".");
                if (e.KeyChar == ',') // Se for digitado "," ser  alterado para "."
                    e.KeyChar = '.';
                //Se não for um numero e não  tecla backspace e nao for virgula, barra:
                if (!Char.IsDigit(e.KeyChar) && e.KeyChar != (Char)Keys.Back && e.KeyChar != '.')
                {
                    e.Handled = true;
                    return;
                }
                if (e.KeyChar == '.' && posSeparator > -1)
                {
                    e.Handled = true;
                    return;
                }
            }
        }

        private void btnNomeiaRelatorioConectorPDV_Click(object sender, EventArgs e)
        {
            //Caso queira usar todos de uma so vez = Bematech_FI_NomeiaRelatoriosPAFECF();
            //fiscal_retorno = conectorECF.Bematech_FI_NomeiaRelatorioGerencialMFD("06", "PARAM. CONFIG.");
            functionECF.conectorECF_NomeiaRelatorioGerencial(alwaysVariables.ModeloEcf, "06", "PARAM. CONFIG.", ref fiscal_MSG, ref fiscal_retorno, alwaysVariables.ECF_Ligada);
        }

        private void btnConfirmaNFDEmitida_Click(object sender, EventArgs e)
        {

        }

        private void txtNumeroNotaNFDEmitida_KeyPress(object sender, KeyPressEventArgs e)
        {
            posSeparator = txtNumeroContratoConectorCF.Text.IndexOf(".");
            if (e.KeyChar == ',') // Se for digitado "," ser  alterado para "."
                e.KeyChar = '.';
            //Se não for um numero e não  tecla backspace e nao for virgula, barra:
            if (!Char.IsDigit(e.KeyChar) && e.KeyChar != (Char)Keys.Back && e.KeyChar != '.')
            {
                e.Handled = true;
                return;
            }
            if (e.KeyChar == '.' && posSeparator > -1)
            {
                e.Handled = true;
                return;
            }
        }

        private void txtNumeroNotaNFDEmitida_Validated(object sender, EventArgs e)
        {

            if (txtNumeroNotaNFDEmitida.Text != "" && (lblNoClienteConectorCF.Text != "0" && lblNoClienteConectorCF.Text != ""))
            {
                    if (txtNumeroNotaNFDEmitida.ReadOnly == false && Convert.ToDouble(txtNumeroNotaNFDEmitida.Text) > 0 && (MessageBox.Show("Confirma a inclusão da Nota Serie 'D'numero " + txtNumeroNotaNFDEmitida.Text + "?", "Observação", MessageBoxButtons.YesNo, MessageBoxIcon.Question) == System.Windows.Forms.DialogResult.Yes))
                    {
                        conectorPDV_inc_notad(txtNumeroNotaNFDEmitida.Text, auxIdCliente);
                        if (auxConsistencia == 0)
                        {
                            txtNumeroNotaNFDEmitida.ReadOnly = true;
                            txtQuantidadeNFDEmitida.ReadOnly = false;
                            txtItensNFDEmitida.ReadOnly = false;
                            txtItensNFDEmitida.Select();
                        }
                    }
                    else
                    {
                        txtNumeroNotaNFDEmitida.ReadOnly = false;
                        txtNumeroNotaNFDEmitida.Clear();
                        txtNumeroNotaNFDEmitida.Select();
                    }
            }
            else
            {
                if(lblNoClienteConectorCF.Text != "0" && lblNoClienteConectorCF.Text != "" && call_pdv == 10)
                {
                    msgInfo msg = new msgInfo("PRESSIONE F10 PARA SELECIONAR UM CLIENTE");
                }
                else
                {
                    if (call_pdv == 10)
                    {
                        txtNumeroNotaNFDEmitida.Select();
                    }
                    else if (pnlAutorizacaoPDVConectorCF.Visible == true)
                    {
                        txtAutorizacaoSenhaConectorCF.CausesValidation = true;
                        txtAutorizacaoSenhaConectorCF.Select();
                    }
                    else if (call_pdv == 0 || (pnlAutorizacaoPDVConectorCF.Visible == false && call_pdv == 1))
                    {
                        txtEntradaDadosConectorCF.CausesValidation = true;
                        txtEntradaDadosConectorCF.Clear();
                        txtEntradaDadosConectorCF.Select();
                    }
                }
            }
        }

        private void txtItensNFDEmitida_Validated(object sender, EventArgs e)
        {
            if (txtItensNFDEmitida.Text != "") 
            {
                conectorPDV_find_Produto(3.ToString(), txtItensNFDEmitida.Text);
                if (txtItensNFDEmitida.Text != "" && auxConsistencia == 0)
                {
                    txtQuantidadeNFDEmitida.Select();
                }
            }
           
        }

        private void txtQuantidadeNFDEmitida_Validated(object sender, EventArgs e)
        {
            if (txtItensNFDEmitida.Text != "" && txtNumeroNotaNFDEmitida.Text != "")
            {
                auxNumeric = Convert.ToDecimal(txtQuantidadeNFDEmitida.Text.Replace(",", ".").Substring(0, txtQuantidadeNFDEmitida.TextLength));//currency
                flagNumeric = String.Format("{0:F3}", auxNumeric);
                txtQuantidadeNFDEmitida.Text = flagNumeric.Replace(".", ",");
                produto_qtty = txtQuantidadeNFDEmitida.Text;
                txtItensNFDEmitida.Select();
            }
            else
            {
                //msgInfo msg = new msgInfo("Quantidade não aceita, informe o itens.");
                txtQuantidadeNFDEmitida.Text = "0,000";
                txtItensNFDEmitida.ReadOnly = false;
                txtItensNFDEmitida.Select();
            }
        }

        private void txtEntradaDadosConectorCF_TextChanged(object sender, EventArgs e)
        {
            if (call_pdv == 4)
            {
                if (input_find == "1")
                {
                    if (txtEntradaDadosConectorCF.Text.Length == 3)
                    {
                        txtEntradaDadosConectorCF.Text += ".";
                    }
                    else
                        if (txtEntradaDadosConectorCF.Text.Length == 7)
                        {
                            txtEntradaDadosConectorCF.Text += ".";
                        }
                        else
                            if (txtEntradaDadosConectorCF.Text.Length == 7)
                            {
                                txtEntradaDadosConectorCF.Text += ".";
                            }
                            else
                                if (txtEntradaDadosConectorCF.Text.Length == 11)
                                {
                                    txtEntradaDadosConectorCF.Text += "-";
                                }
                    txtEntradaDadosConectorCF.Select(txtEntradaDadosConectorCF.Text.Length,1);
                }
                else if (input_find == "2")
                {
                    if (txtEntradaDadosConectorCF.Text.Length == 2)
                    {
                        txtEntradaDadosConectorCF.Text += ".";
                    }
                    else
                        if (txtEntradaDadosConectorCF.Text.Length == 6)
                        {
                            txtEntradaDadosConectorCF.Text += ".";
                        }
                        else
                            if (txtEntradaDadosConectorCF.Text.Length == 10)
                            {
                                txtEntradaDadosConectorCF.Text += "/";
                            }
                            else
                                if (txtEntradaDadosConectorCF.Text.Length == 15)
                                {
                                    txtEntradaDadosConectorCF.Text += "-";
                                }
                    txtEntradaDadosConectorCF.Select(txtEntradaDadosConectorCF.Text.Length, 1);
                }
            }
        }

        private void button15_Click(object sender, EventArgs e)
        {

        }

        private void btnPesquisaCliente_Click(object sender, EventArgs e)
        {
            string nome;
            consultaCliente consulta = new consultaCliente(alwaysVariables.Store, alwaysVariables.Usuario, fiscal_numero_caixa);

            if (consulta.ShowDialog() == DialogResult.OK)
            {
                auxIdCliente = consulta.GridCodigo;
                auxNomeRazao = nome = consulta.GridNome;
                auxLogradouro = consulta.GridLogradouro + ", " + consulta.GridNumero + " " + consulta.GridCidade + " UF: " + " " + consulta.GridEstado;
                if (consulta.GridTypePessoa == 2)
                {
                    auxNomeRazao = consulta.GridRazao;
                    auxCPFCNPJ = consulta.GridCNPJ;
                }
                else
                {
                    auxNomeRazao = consulta.GridNome;
                    auxCPFCNPJ = consulta.GridCPF;
                }
                if (auxIdCliente != "")
                {
                    string store = "";
                    if (txtLojaConectorCF.Text != "")
                    {
                        store = alwaysVariables.Store;
                    }
                    else
                    {
                        store = txtLojaConectorCF.Text;
                    }
                }
                lblCodigoConsumidorNfce.Text = auxIdCliente;
                lblNomeRazaoNfce.Text = auxNomeRazao;
                lblEnderecoPessoaNfce.Text = auxLogradouro;
                //txtEntradaDadosNF.ReadOnly = false;
                txtEntradaDadosNF.Select();
            }
        }

        private void txtEntradaDadosNF_Validated(object sender, EventArgs e)
        {
            if ((functionECF.conectorECF_Analisa_RetornoImpressora(alwaysVariables.ModeloEcf, ref ACK, ref ST1, ref ST2, ref ST3, ref fiscal_MSG) == false) || alwaysVariables.ModoOperacao == 0)
            {
                switch (call_pdv)
                {
                    case 12:
                        switch (call_funcao)
                        {
                            case 1:
                                conector_cancela_item_nfce(pedido, alwaysVariables.Store, newseq);
                                break;
                            default :
                                if (alwaysVariables.ModoOperacao == 1) { conector_retorno_ack(); }
                                if (txtEntradaDadosNF.Text.Replace("\r", "").Replace("\n", "").Trim() != "")
                                {
                                    conectorPDV_find_produto(txtEntradaDadosNF.Text, alwaysVariables.Store);
                                }
                                break;
                        }
                        break;
                    case 7:
                        switch (call_funcao)
                        {
                            case 1:
                                conector_desconto_item_nfce(pedido, alwaysVariables.Store, newseq, txtEntradaDadosNF.Text);
                                break;
                        }
                        break;
                }
            }
        }

        private void txtEntradaDadosNF_KeyPress(object sender, KeyPressEventArgs e)
        {
            bool valida = false;

            if (e.KeyChar == '.') // Se for digitado "," ser  alterado para "."
                e.KeyChar = ',';

            if (e.KeyChar == (Char)Keys.Back)
            {
                lblQttyNfec.Text = "0,000";
                lblPrecoUnitarioNfec.Text = "0,00";
                lblTotalNfec.Text = "0,00";
                txtEntradaDadosNF.Clear();
                txtEntradaDadosNF.Select();
            }

            if (txtEntradaDadosNF.Text.Length > 0)
            {
                if (e.KeyChar == '*')
                {
                    posSeparator = txtEntradaDadosNF.Text.IndexOf("*");
                    if (posSeparator == -1)
                    {
                        valida = true;
                    }
                    else
                    {
                        valida = false;
                    }
                }
                else if (e.KeyChar == ',')
                {
                    posSeparator = txtEntradaDadosNF.Text.IndexOf(",");
                    if (posSeparator == -1)
                    {
                        valida = true;
                    }
                    else
                    {
                        valida = false;
                    }

                }
                else
                {
                    valida = false;
                }

                if (valida == false)
                {
                    if ((!Char.IsDigit(e.KeyChar) && e.KeyChar != (Char)Keys.Back && e.KeyChar != '*') || (!Char.IsDigit(e.KeyChar) && e.KeyChar != (Char)Keys.Back && e.KeyChar != ','))
                    {
                        e.Handled = true;
                        return;
                    }
                    if (e.KeyChar == '*' && posSeparator > -1)
                    {
                        e.Handled = true;
                        return;
                    }
                }
                else if (e.KeyChar == '*')
                {
                    if (txtEntradaDadosNF.Text != "")
                    {
                        auxNumeric = Convert.ToDecimal(txtEntradaDadosNF.Text.Replace(",", ".").Substring(0, txtEntradaDadosNF.TextLength));//currency
                        flagNumeric = String.Format("{0:F3}", auxNumeric);
                        lblQttyNfec.Text = flagNumeric.Replace(".", ",");
                    }
                    else
                    {
                        txtEntradaDadosNF.Clear();

                    }
                }
            }
        }

        private void btnContigencia_Click(object sender, EventArgs e)
        {
            if (pnlAutorizacaoPDVConectorCF.Visible == false)
            {
                this.Hide();
                mainConfig retorno = new mainConfig(1);
                this.Close();
                retorno.ShowDialog();
            }
            else
            {
                msgInfo msg = new msgInfo(1,"LOGON NÃO EXECUTADO, AÇÃO NÃO PERMITIDA.");
                msg.Show();
            }
        }

        private void button18_Click(object sender, EventArgs e)
        {
            if (rdbNFCe.Visible == true)
            {
                call_funcao = 0;
                pnlConsultaProduto.Visible = false;
                this.pnlConsultaProduto.Size = new System.Drawing.Size(1, 1);
                this.pnlConsultaProduto.Location = new System.Drawing.Point(1268, 608);
                pgbWaitReservaConectorCF.Minimum = 0;
                flagDataAtual = String.Format("{0:ddMMyy}", DateTime.Now);
                call_finalizadora = null;
                resetFinanceiro();
                this.pnlNfce.Size = new System.Drawing.Size(1150, 526);
                this.pnlNfce.Location = new System.Drawing.Point(0, 0);
                this.pnlNfce.Visible = true;
                pnlModoOperacao.Visible = false;
                txtVisorNfce.Text = "MODO NFCe";
                alwaysVariables.ModoOperacao = 0;
                txtEntradaDadosNF.Select();
            }
            else
            {
                call_pdv = 0;
                call_funcao = 0;
                pnlNfce.Visible = false;
                txtEntradaDadosConectorCF.CausesValidation = true;
                txtEntradaDadosConectorCF.Select();
            }
        }

        private void rdbECF_CheckedChanged(object sender, EventArgs e)
        {

        }

        private void btnTransmiteNfce_Click(object sender, EventArgs e)
        {
            string test = "Host Unavailable";
            if (IsConnected() == true)
            {
                if (alwaysVariables.Link_Danfe != "")
                {
                    test = PingHost(alwaysVariables.Link_Danfe);
                    if (test == null)
                    {
                        test = "Host Unavailable";
                        msgInfo msg = new msgInfo(1, "Caro Operador - " + " CONEXÃO COM A SEFAZ FALHOU! IMPOSSIVEL CONTINUAR...!"); msg.ShowDialog();

                    }
                    else
                    {
                        if (alwaysVariables.Link_Danfe != null)
                        {
                            ProcessStartInfo sInfo = new ProcessStartInfo(alwaysVariables.Link_Danfe);
                            Process.Start(sInfo);
                            alwaysVariables.Link_Danfe = "";
                            alwaysVariables.Link_Code_QR = "";
                        }
                        else
                        {
                            msgInfo msg = new msgInfo(1, "Caro Operador - " + " NENHUMA NOTA PROCESSADA."); msg.ShowDialog();
                        }
                    }
                }
                else
                {
                    msgInfo msg = new msgInfo(1, "Caro Operador - " + " NOTA FISCAL DO CONSUMIDOR, BLOQUEADA PARA EMISSÃO DE DANFES, PROSSIGA COM A VENDA."); msg.ShowDialog();
                }
                
            }
            else
            {
                msgInfo msg = new msgInfo(1,"Caro Operador - " + " CONEXÃO COM A INTERNET FALHOU! IMPOSSIVEL CONEXAO COM A SEFAZ...!"); msg.ShowDialog();
            }
        }

        private void button5_Click(object sender, EventArgs e)
        {

        }

        private void pnlMenuFiscalConectorCF_Paint(object sender, PaintEventArgs e)
        {

        }

        private void label93_Click(object sender, EventArgs e)
        {

        }

        private void pnlAutorizacaoPDVConectorCF_Click(object sender, EventArgs e)
        {
            if (pnlAutorizacaoPDVConectorCF.Visible == true)
            {
                if (workBalanca != null)
                {
                    workBalanca.RequestStop(true);
                }
            }
        }

        private void btnFinalizadoraConvenioConectorCF_Click(object sender, EventArgs e)
        {

        }

        private void btnFinalizadoraCrediarioConectorCF_Click(object sender, EventArgs e)
        {

        }

        private void backgroundConectorCupom_DoWork(object sender, DoWorkEventArgs e)
        {   
            //while (true)
            {
                if (arranque == 1)
                {
                    //string test = String.Format("{0:yyyyMMdd}", Convert.ToDateTime(fiscal_data_movimento.Substring(2, 2) + "/" + fiscal_data_movimento.Substring(0, 2) + "/" + String.Format("{0:ddMMyyyy}", DateTime.Now).Substring(4, 2) + fiscal_data_printer.Substring(4, 2)));
                    workObject.modoPdv(true); //Para rotina loop
                    conectorPDV_pross_cupom(fiscal_Cupom.Replace("\0", "").Trim(), alwaysVariables.Store, fiscal_numero_caixa.Replace("\0", "").Trim(), "0", "0", "0");
                    workObject.modoPdv(false);
                    /*
                    strCupom = "";
                    instrucao.setVetorCupom();
                    strCupom = instrucao.getCupomDetalhes(alwaysVariables.UserName, alwaysVariables.Senha, Convert.ToDouble(fiscal_store.Replace("\0", "").Trim()) > 0 ? fiscal_store.Replace("\0", "").Trim() : alwaysVariables.Store, fiscal_Cupom_coo.Replace("\0", "").Trim(), String.Format("{0:yyyyMMdd}", DateTime.Now), fiscal_numero_caixa.Replace("\0", "").Trim(), seq);
                    instrucao.carregaInstrucaoMovimentoVenda(instrucao._detalhes, strCupom, 1);
                    conector_update_lineMD5_r05(fiscal_Cupom.Replace("\0", "").Trim(), produto_chave, sequenciaItem, fiscal_numero_caixa.Replace("\0", "").Trim(), conectorPDV_PAFECF_indicador("R05", test, fiscal_store.Replace("\0", "").Trim(), fiscal_numero_caixa.Replace("\0", "").Trim(), fiscal_Cupom.Replace("\0", "").Trim(), sequenciaItem));
                    instrucao.compactScript(instrucao._detalhes, "detalhes");
                    workObject.modoPdv(false);
                    arranque = 0;*/
                }
            }
            arranque = 0;
            
            this.backgroundConectorCupom.CancelAsync();
            this.backgroundConectorCupom.Dispose();
            //this.backgroundConectorCupom = null;
            GC.Collect();
        }

        private void backgroundConectorGrandeTotal_DoWork(object sender, DoWorkEventArgs e)
        {
            //while (true)
            {
                if (arranqueTotal == 1)
                {
                    fiscal_GT_Crypt = new string('\x20', 20);
                    if (File.Exists(folderMFDGrand + "\\grandFullPDV" + ".enc"))
                    {//Atualiza Grande Total
                        fiscal_GT_Crypt = new string('\x20', 20);
                        File.Delete(folderMFDGrand + "\\grandFullPDV" + ".enc");
                        functionECF.conectorECF_GrandeTotal_Crypt(alwaysVariables.ModeloEcf, ref fiscal_GT_Crypt, ref fiscal_MSG, ref fiscal_retorno, alwaysVariables.ECF_Ligada);
                        cryptografia.conectorPDV_serie(alwaysVariables.PAF_total + "\\grandFullPDV" + ".txt", "0");
                        File.Delete(alwaysVariables.PAF_total + "\\grandFullPDV" + ".txt");
                    }
                    arranqueTotal = 0;
                }
            }
        }

        private void backgroundConectorCupomMovimento_DoWork(object sender, DoWorkEventArgs e)
        {
            //while (true)
            {
                if (arranqueMov == 1)
                {
                    workObject.modoPdv(true); //Para rotina loop
                    try
                    {
                        if (vetorTotal != null)
                        {
                            for (int u = 0; u < vetorTotal.Length; u++)
                            {
                                if (vetorTotal[u] != "#")
                                {
                                    auxformPgto = u.ToString();
                                    auxValor = vetorTotal[u].Replace(",", ".");
                                    arranque = 0;
                                    string[,] recaga; //Matriz Bidimencionada
                                    string test = String.Format("{0:yyyyMMdd}", Convert.ToDateTime(fiscal_data_movimento.Substring(2, 2) + "/" + fiscal_data_movimento.Substring(0, 2) + "/" + String.Format("{0:ddMMyyyy}", DateTime.Now).Substring(4, 2) + fiscal_data_printer.Substring(4, 2)));
                                    if (Convert.ToDouble(fiscal_data_movimento.Trim() == "" ? "0" : fiscal_data_movimento.Trim()) > 0)
                                    {
                                        try
                                        {
                                            countField = 0;
                                            countRows = 0;
                                            auxConsistencia = 0;
                                            if (proc.statusSchema() == 1)
                                            {
                                                return;
                                            }
                                            title = proc.abreConexao();
                                            proc.singleTransaction("select sequencia, finalizadora from conectorpdv.cupom_movimento where loja=?var and numeroCupom=?var2 and  terminal=?var1 and dataVenda=?var3");
                                            proc.addParametro("?var", fiscal_store.Replace("\0", "").Trim());
                                            proc.addParametro("?var1", fiscal_numero_caixa.Replace("\0", "").Trim());
                                            proc.addParametro("?var2", fiscal_Cupom.Replace("\0", "").Trim());
                                            proc.addParametro("?var3", test);
                                            proc.procedimentoSet();
                                        }
                                        catch (Exception erro)
                                        {
                                            auxConsistencia = 1;
                                        }
                                        finally
                                        {
                                            countField = proc.retornaSet().Tables[0].Columns.Count;
                                            countRows = proc.retornaSet().Tables[0].DefaultView.Count;
                                            recaga = new string[countRows, countField];
                                            if (auxConsistencia == 0)
                                            {
                                                if (countRows > 0)
                                                {
                                                    for (int i = 0; i < countRows; i++)//Linha
                                                    {
                                                        for (int j = 0; j < countField; j++)
                                                        {
                                                            recaga[i, j] = Convert.ToString(proc.retornaSet().Tables[0].Rows[i][j]);
                                                        }
                                                    }
                                                }
                                            }
                                            proc.fechaConexao(); if (title != "") { this.txtTitleCupomFiscalConectorCF.Invoke((MethodInvoker)delegate { txtTitleCupomFiscalConectorCF.Text = title; }); }
                                            workObject.modoPdv(true); //Para rotina loop
                                            for (int i = 0; i < recaga.GetLength(0); i++)//Linha
                                            {
                                                strCupom = "";
                                                workObject.modoPdv(true); //Para rotina loop
                                                instrucao.setVetorCupom();
                                                strCupom = instrucao.getCupomMovimento(alwaysVariables.UserName, alwaysVariables.Senha, Convert.ToDouble(fiscal_store.Replace("\0", "").Trim()) > 0 ? fiscal_store.Replace("\0", "").Trim() : alwaysVariables.Store, fiscal_Cupom.Replace("\0", "").Trim(), String.Format("{0:yyyyMMdd}", DateTime.Now), fiscal_numero_caixa.Replace("\0", "").Trim(), recaga[i, 0]);
                                                instrucao.carregaInstrucaoMovimentoVenda(instrucao._movimento, strCupom, 0);
                                                instrucao.compactScript(instrucao._movimento, "financeiro");
                                                conector_update_lineMD5_r07_fiscal(fiscal_Cupom.Replace("\0", "").Trim(), recaga[i, 1], recaga[i, 0], fiscal_numero_caixa.Replace("\0", "").Trim(), conectorPDV_PAFECF_indicador("R07", test, fiscal_store.Replace("\0", "").Trim(), fiscal_numero_caixa.Replace("\0", "").Trim(), fiscal_Cupom.Replace("\0", "").Trim(), recaga[i, 0]), conectorPDV_PAFECF_indicador("RA7", test, fiscal_store.Replace("\0", "").Trim(), fiscal_numero_caixa.Replace("\0", "").Trim(), fiscal_Cupom.Replace("\0", "").Trim(), recaga[i, 0]));
                                            }
                                        }

                                        conectorPDV_PAFECF_exe("R04", fiscal_Cupom.Replace(",", "").Trim(), 5, "0", "0");

                                        if (Convert.ToDecimal(auxTroco.Replace(",", ".")) > 0)
                                        {
                                            if ((auxformPgto == "5" || auxformPgto == "6") && alwaysVariables.TrocoCard == "s")
                                            {
                                                if (input_cliente != "")
                                                {
                                                    conectorPDV_inc_identificacao_desconto(alwaysVariables.CardCnpj, fiscal_numero_serie, fiscal_letramf_adicional, fiscal_tipo_ecf, fiscal_marca, fiscal_modelo, fiscal_Cupom, fiscal_Cupom_ccf, lblTrocoConectorCF.Text.Replace(",", "."), String.Format("{0:yyyy-MM-dd HH%:mm%:ss}", DateTime.Now), input_cliente, alwaysVariables.CardTitle);
                                                }
                                            }
                                        }

                                        //conector_update_lineMD5_A2(alwaysVariables.Store, formPgto, String.Format("{0:yyyyMMdd}", DateTime.Now), key.GetMd5Sum(export.registro_tipo_a2("A2", String.Format("{0:yyyyMMdd}", DateTime.Now), auxDescricaoFinalizadora, formPgto, conectorPDV_soma_a2(formPgto))));
                                        conector_update_lineMD5_A2(alwaysVariables.Store, auxformPgto, String.Format("{0:yyyy-MM-dd}", DateTime.Now), conectorPDV_PAFECF_indicador("A2", test, fiscal_store.Replace("\0", "").Trim(), fiscal_numero_caixa.Replace("\0", "").Trim(), fiscal_Cupom.Replace("\0", "").Trim(), auxformPgto));

                                        conector_reset_cheque();
                                        conector_reset_card();
                                        //workObject.modoPdv(false); //Libera rotina loop
                                    }

                                    if (Convert.ToDecimal(acresDesc.Trim() == "" ? "0" : acresDesc) > 0)
                                    {
                                        //Rafazer atualização do desconto
                                        string[,] recarga; //Matriz Bidimencionada

                                        try
                                        {
                                            countField = 0;
                                            countRows = 0;
                                            auxConsistencia = 0;
                                            title = proc.abreConexao();
                                            proc.singleTransaction("select * from cupom_detalhes where numeroCupom=?var and desconto > 0");
                                            proc.addParametro("?var", fiscal_Cupom.Replace("\0", "").Trim());
                                            proc.procedimentoSet();
                                        }
                                        catch (Exception erro)
                                        {
                                            auxConsistencia = 1;
                                        }
                                        finally
                                        {
                                            countField = proc.retornaSet().Tables[0].Columns.Count;
                                            countRows = proc.retornaSet().Tables[0].DefaultView.Count;
                                            recarga = new string[countRows, countField];
                                            if (auxConsistencia == 0)
                                            {
                                                if (countRows > 0)
                                                {
                                                    for (int i = 0; i < countRows; i++)//Linha
                                                    {
                                                        for (int j = 0; j < countField; j++)
                                                        {
                                                            recarga[i, j] = Convert.ToString(proc.retornaSet().Tables[0].Rows[i][j]);
                                                        }
                                                    }
                                                }
                                            }
                                            proc.fechaConexao(); if (title != "") { this.txtTitleCupomFiscalConectorCF.Invoke((MethodInvoker)delegate { txtTitleCupomFiscalConectorCF.Text = title; }); }
                                            workObject.modoPdv(true); //Para rotina loop
                                            for (int i = 0; i < recarga.GetLength(0); i++)//Linha
                                            {
                                                strCupom = "";
                                                instrucao.setVetorCupom();
                                                strCupom = instrucao.getCupomDetalhes(alwaysVariables.UserName, alwaysVariables.Senha, recarga[i, 1].Trim(), recarga[i, 0].Trim(), String.Format("{0:yyyyMMdd}", Convert.ToDateTime(recarga[i, 3].Trim())), recarga[i, 2].Trim(), recarga[i, 4].Trim());
                                                instrucao.carregaInstrucaoMovimentoVenda(instrucao._detalhes, strCupom, 1);
                                                //conector_update_lineMD5_r05(fiscal_Cupom.Replace("\0", "").Trim(), prod, sequenciaItem, fiscal_numero_caixa.Replace("\0", "").Trim(), conectorPDV_PAFECF_indicador("R05", test, fiscal_store.Replace("\0", "").Trim(), fiscal_numero_caixa.Replace("\0", "").Trim(), fiscal_Cupom.Replace("\0", "").Trim(), sequenciaItem));
                                                instrucao.compactScript(instrucao._detalhes, "detalhes");
                                            }
                                        }
                                    }

                                    /* New trecho */
                                    workObject.modoPdv(true); //Para rotina loop
                                    strCupom = "";
                                    instrucao.setVetorCupom();
                                    strCupom = instrucao.getCupomCabecalho(alwaysVariables.UserName, alwaysVariables.Senha, Convert.ToDouble(fiscal_store.Replace("\0", "").Trim()) > 0 ? fiscal_store.Replace("\0", "").Trim() : alwaysVariables.Store, fiscal_Cupom.Replace("\0", "").Trim(), String.Format("{0:yyyyMMdd}", DateTime.Now), banco_operado, fiscal_numero_caixa.Replace("\0", "").Trim(), "2");
                                    instrucao.carregaInstrucaoMovimentoVenda(instrucao._cabecalho, strCupom, 0);
                                    instrucao.compactScript(instrucao._cabecalho, "cabecalho");
                                    workObject.modoPdv(true); //Para rotina loop
                                    conectorPDV_inc_cupom_relatorio_meio_pgto(auxformPgto, auxValor, "0", "N");
                                    arranqueMov = 0;
                                    if (backgroundConectorCupom.IsBusy != true)
                                    {
                                        // Start the asynchronous operation.
                                        backgroundConectorCupom.RunWorkerAsync();
                                    }
                                }
                            }
                        }
                    }
                    catch (Exception)
                    {
                    }
                    //workObject.Varrefolder();
                    workObject.modoPdv(false); //Para rotina loop
                    arranque = 1;
                }
            }//End While
        }

        private void txtAutorizacaoSenhaConectorCF_KeyDown(object sender, KeyEventArgs e)
        {
            if (!((e.KeyCode == Keys.F11 ||
e.KeyCode == Keys.F1 ||
e.KeyCode == Keys.F2 ||
e.KeyCode == Keys.F3 ||
e.KeyCode == Keys.F4 ||
e.KeyCode == Keys.F5 ||
e.KeyCode == Keys.F6 ||
e.KeyCode == Keys.F7 ||
e.KeyCode == Keys.F8 ||
e.KeyCode == Keys.F9 ||
e.KeyCode == Keys.F10 ||
e.KeyCode == Keys.F11 ||
e.KeyCode == Keys.F13 ||
e.KeyCode == Keys.Enter ||
e.KeyCode == Keys.End ||
e.KeyCode == Keys.Shift ||
e.KeyCode == Keys.Home ||
e.KeyCode == Keys.M ||
e.KeyCode == Keys.F ||
e.KeyCode == Keys.W ||
e.KeyCode == Keys.Delete ||
e.KeyCode == Keys.Space ||
e.KeyCode == Keys.Escape || e.KeyCode == Keys.H) && call_pdv == 0))
            {
                if (call_pdv == 0)
                {
                    return;
                }


                if ((call_pdv == 10 && pnlAutorizacaoPDVConectorCF.Visible == false) || call_pdv == 1 && (txtEntradaDadosConectorCF.Text == String.Format("{0:MMyyyydd}", DateTime.Now)) || (call_pdv == 1 && txtEntradaDadosConectorCF.Text == "10") || pnlAutorizacaoPDVConectorCF.Visible == true || (fiscal_retorno == 1 || call_pdv == 8 || call_pdv == 9 || call_pdv == 1) && File.Exists(folderMFDGrand + "\\grandFullPDV" + ".enc") ||
           ((call_pdv == 8) || ((call_pdv == 0 && e.KeyCode == Keys.Escape) && File.Exists(folderMFDGrand + "\\grandFullPDV" + ".enc"))))
                {
                    if (pnlAutorizacaoPDVConectorCF.Visible == true && txtAutorizacaoUsuarioConectorCF.Text.Replace("\r\n", "").Trim() != "" && txtAutorizacaoSenhaConectorCF.Text.Replace("\r\n", "").Trim().Length > 0 && e.KeyCode == Keys.Enter)
                        conector_valida_pass();
                }
            }
            else if ((call_pdv == 10 && pnlAutorizacaoPDVConectorCF.Visible == false) || call_pdv == 1 && (txtEntradaDadosConectorCF.Text == String.Format("{0:MMyyyydd}", DateTime.Now)) || (call_pdv == 1 && txtEntradaDadosConectorCF.Text == "10") || pnlAutorizacaoPDVConectorCF.Visible == true || (fiscal_retorno == 1 || call_pdv == 8 || call_pdv == 9 || call_pdv == 1) && File.Exists(folderMFDGrand + "\\grandFullPDV" + ".enc") ||
          ((call_pdv == 8) || ((call_pdv == 0 && e.KeyCode == Keys.Escape) && File.Exists(folderMFDGrand + "\\grandFullPDV" + ".enc"))))
            {
                if (pnlAutorizacaoPDVConectorCF.Visible == true && txtAutorizacaoUsuarioConectorCF.Text.Replace("\r\n", "").Trim() != "" && txtAutorizacaoSenhaConectorCF.Text.Replace("\r\n", "").Trim().Length > 0 && e.KeyCode == Keys.Enter)
                    conector_valida_pass();
            } 
        }

        private void backgroundConectorCartao_DoWork(object sender, DoWorkEventArgs e)
        {
            if (arranqueCartao == 1)
            {
                workObject.modoPdv(true); //Para rotina loop
                string strCard = "";
                instrucao.setVetorCupom();
                strCard = instrucao.getCartao(alwaysVariables.UserName, alwaysVariables.Senha, Convert.ToDouble(fiscal_store.Replace("\0", "").Trim()) > 0 ? fiscal_store.Replace("\0", "").Trim() : alwaysVariables.Store, fiscal_Cupom_coo.Replace("\0", "").Trim(), String.Format("{0:yyyyMMdd}", DateTime.Now), fiscal_numero_caixa.Replace("\0", "").Trim());
                instrucao.carregaInstrucaoMovimentoVenda(instrucao._cartao, strCard, 0);
                instrucao.compactScript(instrucao._cartao, "cartao");
                workObject.modoPdv(false); //Libera rotina loop
            }
            arranqueCartao = 0;
            this.backgroundConectorCartao.CancelAsync();
            this.backgroundConectorCartao.Dispose();
            //this.backgroundConectorCupom = null;
            //GC.Collect();
        }

        private void backgroundConectorCabecalho_DoWork(object sender, DoWorkEventArgs e)
        {
            if (arranqueCabeca == 1)
            {
                string test = String.Format("{0:yyyyMMdd}", Convert.ToDateTime(fiscal_data_movimento.Substring(2, 2) + "/" + fiscal_data_movimento.Substring(0, 2) + "/" + String.Format("{0:ddMMyyyy}", DateTime.Now).Substring(4, 2) + fiscal_data_printer.Substring(4, 2)));
                   workObject.modoPdv(true); //Para rotina loop
                   fiscal_flag = 1;
                   strCupom = "";
                   instrucao.setVetorCupom();
                   strCupom = instrucao.getCupomCabecalho(alwaysVariables.UserName, alwaysVariables.Senha, Convert.ToDouble(fiscal_store.Replace("\0", "").Trim()) > 0 ? fiscal_store.Replace("\0", "").Trim() : alwaysVariables.Store, fiscal_Cupom.Replace("\0", "").Trim(), String.Format("{0:yyyyMMdd}", DateTime.Now), lbOperadorConectorCF.Text, fiscal_numero_caixa.Replace("\0", "").Trim(),"1");
                   instrucao.carregaInstrucaoMovimentoVenda(instrucao._cabecalho,strCupom,0);
                   instrucao.compactScript(instrucao._cabecalho,"cabecalho");
                   conector_update_lineMD5_r04(fiscal_Cupom, fiscal_numero_caixa, conectorPDV_PAFECF_indicador("R04", test, fiscal_store.Replace("\0", "").Trim(), fiscal_numero_caixa.Replace("\0", "").Trim(), fiscal_Cupom.Replace("\0", "").Trim(), "0"));
                   workObject.modoPdv(false); //Libera rotina loop
            }
            arranqueCabeca = 0;
            /*this.backgroundConectorCabecalho.CancelAsync();
            this.backgroundConectorCabecalho.Dispose();
            GC.Collect();*/
        }

        private void backgroundConectorReducaoZ_DoWork(object sender, DoWorkEventArgs e)
        {
            conector_complemento_reducaoZ();
        }

        private void backgroundProdutoCrypt_DoWork(object sender, DoWorkEventArgs e)
        {
            conectorPDV_gera_crypt_produto();

            conectorPDV_gera_crypt_estoque("E2");
            conectorPDV_gera_crypt_estoque("E3");

            conectorPDV_gera_crypt_dav("D02", "0", "0", "0");
            conectorPDV_gera_crypt_dav("D03", "0", "0", "0");
            conectorPDV_gera_crypt_dav("D04", "0", "0", "0");
        }

        private void backgroundConectorGrandeTotalPgto_DoWork(object sender, DoWorkEventArgs e)
        {
            {
                if (arranqueTotalPgto == 1)
                {
                    conector_last_gt();
                    File.Delete(folderMFDGrand + "\\temp" + ".txt");
                    arranqueTotalPgto = 0;
                }
            }
        }

        private void backgroundConectorRelatorioCCartao_DoWork(object sender, DoWorkEventArgs e)
        {
            if (arranqueRelatorioCC == 1)
            {
                conectorPDV_inc_cupom_relatorio("CC", null);
                File.Delete(folderMFDGrand + "\\temp" + ".txt");
                arranqueRelatorioCC = 0;
            }
        }

        private void backgroundConectorBalanca_DoWork(object sender, DoWorkEventArgs e)
        {
            //backgroundConectorBalanca
            if (arranqueBalanca == 1)
            {
                conector_start_thread_balanca();    
                arranqueBalanca = 0;
            }
        }

        private void backgroundReprocesso_DoWork(object sender, DoWorkEventArgs e)
        {
            instrucao.carregaListaReparo();//Reprocesso
        }

    }
}
