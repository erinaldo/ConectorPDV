//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.34209
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This source code was auto-generated by Microsoft.VSDesigner, Version 4.0.30319.34209.
// 
#pragma warning disable 1591

namespace conectorPDV001.WebConectorServer {
    using System;
    using System.Web.Services;
    using System.Diagnostics;
    using System.Web.Services.Protocols;
    using System.Xml.Serialization;
    using System.ComponentModel;
    using System.Data;
    
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="ServiceSoap", Namespace="http://tempuri.org/")]
    public partial class Service : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        private System.Threading.SendOrPostCallback InserirSpedNcmOperationCompleted;
        
        private System.Threading.SendOrPostCallback InserirProdutoOperationCompleted;
        
        private System.Threading.SendOrPostCallback AlterarSpedNcmOperationCompleted;
        
        private System.Threading.SendOrPostCallback AlterarProdutoPriceOperationCompleted;
        
        private System.Threading.SendOrPostCallback AlterarProdutoOperationCompleted;
        
        private System.Threading.SendOrPostCallback AlterarProdutoImpostosOperationCompleted;
        
        private System.Threading.SendOrPostCallback AlterarProdutoPriceFullOperationCompleted;
        
        private System.Threading.SendOrPostCallback AlterarEANOperationCompleted;
        
        private System.Threading.SendOrPostCallback InserirEANOperationCompleted;
        
        private System.Threading.SendOrPostCallback InserirUsuarioOperationCompleted;
        
        private System.Threading.SendOrPostCallback AlterarUsuarioOperationCompleted;
        
        private System.Threading.SendOrPostCallback AlterarConfiguracaoUsuarioOperationCompleted;
        
        private System.Threading.SendOrPostCallback AlterarConfiguracaoUsuarioAllOperationCompleted;
        
        private System.Threading.SendOrPostCallback InserirConfiguracaoUsuarioOperationCompleted;
        
        private System.Threading.SendOrPostCallback InserirFuncionarioOperationCompleted;
        
        private System.Threading.SendOrPostCallback AlterarFuncionarioOperationCompleted;
        
        private System.Threading.SendOrPostCallback InserirTerminalOperationCompleted;
        
        private System.Threading.SendOrPostCallback InserirCepOperationCompleted;
        
        private System.Threading.SendOrPostCallback AlterarTerminalOperationCompleted;
        
        private System.Threading.SendOrPostCallback AlterarTerminalConfigEcfOperationCompleted;
        
        private System.Threading.SendOrPostCallback ObterResultChequeOperationCompleted;
        
        private System.Threading.SendOrPostCallback ObterPedidoOperationCompleted;
        
        private System.Threading.SendOrPostCallback ObterPedidoLogOperationCompleted;
        
        private System.Threading.SendOrPostCallback ObterPedidoExpireOperationCompleted;
        
        private System.Threading.SendOrPostCallback ObterPedidoItensOperationCompleted;
        
        private System.Threading.SendOrPostCallback ObterPedidoFinanceiroOperationCompleted;
        
        private System.Threading.SendOrPostCallback ObterPedidoParcelamentoOperationCompleted;
        
        private System.Threading.SendOrPostCallback ObterPedidoEntregaOperationCompleted;
        
        private System.Threading.SendOrPostCallback AlteraStatusPedidoOperationCompleted;
        
        private System.Threading.SendOrPostCallback AlteraStatusPedidoFinalOperationCompleted;
        
        private System.Threading.SendOrPostCallback VerificaStatusPedidoOperationCompleted;
        
        private System.Threading.SendOrPostCallback VerificaFinalPedidoOperationCompleted;
        
        private System.Threading.SendOrPostCallback VerificaFinalizadoraPedidoOperationCompleted;
        
        private System.Threading.SendOrPostCallback ObterCrediarioOperationCompleted;
        
        private System.Threading.SendOrPostCallback ObterParcelamentoOperationCompleted;
        
        private System.Threading.SendOrPostCallback ObterParcelaOperationCompleted;
        
        private System.Threading.SendOrPostCallback ObterDividentoOperationCompleted;
        
        private System.Threading.SendOrPostCallback ObterHistoricoFullOperationCompleted;
        
        private System.Threading.SendOrPostCallback AlteraStatusParcelaCrediarioOperationCompleted;
        
        private System.Threading.SendOrPostCallback verificaStatusParcelaCrediarioOperationCompleted;
        
        private System.Threading.SendOrPostCallback verificaStatusCrediarioOperationCompleted;
        
        private System.Threading.SendOrPostCallback verificaExitsPepleoOperationCompleted;
        
        private System.Threading.SendOrPostCallback ObterPepleoSingleOperationCompleted;
        
        private System.Threading.SendOrPostCallback ObterMainPepleoOperationCompleted;
        
        private System.Threading.SendOrPostCallback ObterMainPepleoWorkingOperationCompleted;
        
        private System.Threading.SendOrPostCallback ObterMainPepleoFisicaOperationCompleted;
        
        private System.Threading.SendOrPostCallback ObterMainPepleoRuralOperationCompleted;
        
        private System.Threading.SendOrPostCallback ObterMainPepleoJuridicaOperationCompleted;
        
        private System.Threading.SendOrPostCallback ObterFoneOperationCompleted;
        
        private System.Threading.SendOrPostCallback ObterFoneFuncionarioOperationCompleted;
        
        private System.Threading.SendOrPostCallback ObterStoreOperationCompleted;
        
        private System.Threading.SendOrPostCallback fornecedor_comercialOperationCompleted;
        
        private System.Threading.SendOrPostCallback fornecedorFiscalOperationCompleted;
        
        private System.Threading.SendOrPostCallback fornecedorInfoOperationCompleted;
        
        private System.Threading.SendOrPostCallback ObterEnderecoOperationCompleted;
        
        private System.Threading.SendOrPostCallback ObterEnderecoFuncionarioOperationCompleted;
        
        private System.Threading.SendOrPostCallback ObterPepleoCobrancaOperationCompleted;
        
        private System.Threading.SendOrPostCallback ObterPepleoEntregaOperationCompleted;
        
        private System.Threading.SendOrPostCallback ObterPepleoProfissionalOperationCompleted;
        
        private System.Threading.SendOrPostCallback ObterPepleoReferenciaOperationCompleted;
        
        private System.Threading.SendOrPostCallback ObterPepleoRiscoOperationCompleted;
        
        private System.Threading.SendOrPostCallback ObterNumNrOperationCompleted;
        
        private System.Threading.SendOrPostCallback ObterEstoqueOperationCompleted;
        
        private System.Threading.SendOrPostCallback ObterTerminalOperationCompleted;
        
        private System.Threading.SendOrPostCallback ObterCepOperationCompleted;
        
        private System.Threading.SendOrPostCallback ObterMainTerminalWorkingOperationCompleted;
        
        private System.Threading.SendOrPostCallback ObterFuncionarioDocumentoOperationCompleted;
        
        private System.Threading.SendOrPostCallback ObterUsuarioOperationCompleted;
        
        private System.Threading.SendOrPostCallback ObterPessoaDocumentoOperationCompleted;
        
        private System.Threading.SendOrPostCallback InserirFornecedorComercialOperationCompleted;
        
        private System.Threading.SendOrPostCallback InserirFornecedorFiscalOperationCompleted;
        
        private System.Threading.SendOrPostCallback InserirFornecedorInfoOperationCompleted;
        
        private System.Threading.SendOrPostCallback InserirPessoaOperationCompleted;
        
        private System.Threading.SendOrPostCallback AlteraPessoaOperationCompleted;
        
        private System.Threading.SendOrPostCallback AlteraFisicaOperationCompleted;
        
        private System.Threading.SendOrPostCallback AlteraJuridicaOperationCompleted;
        
        private System.Threading.SendOrPostCallback AlteraRuralOperationCompleted;
        
        private System.Threading.SendOrPostCallback InserirFisicaOperationCompleted;
        
        private System.Threading.SendOrPostCallback InserirRuralOperationCompleted;
        
        private System.Threading.SendOrPostCallback InserirJuridicaOperationCompleted;
        
        private System.Threading.SendOrPostCallback InserirEnderecoOperationCompleted;
        
        private System.Threading.SendOrPostCallback InserirEnderecoFuncionarioOperationCompleted;
        
        private System.Threading.SendOrPostCallback conector_passwdOperationCompleted;
        
        private bool useDefaultCredentialsSetExplicitly;
        
        /// <remarks/>
        public Service() {
            this.Url = "http://localhost:49159/Service.asmx";
            if ((this.IsLocalFileSystemWebService(this.Url) == true)) {
                this.UseDefaultCredentials = true;
                this.useDefaultCredentialsSetExplicitly = false;
            }
            else {
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }

        public Service(string webconector)
        {
            this.Url = webconector;
            if ((this.IsLocalFileSystemWebService(this.Url) == true))
            {
                this.UseDefaultCredentials = true;
                this.useDefaultCredentialsSetExplicitly = false;
            }
            else
            {
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }      
        public new string Url {
            get {
                return base.Url;
            }
            set {
                if ((((this.IsLocalFileSystemWebService(base.Url) == true) 
                            && (this.useDefaultCredentialsSetExplicitly == false)) 
                            && (this.IsLocalFileSystemWebService(value) == false))) {
                    base.UseDefaultCredentials = false;
                }
                base.Url = value;
            }
        }
        
        public new bool UseDefaultCredentials {
            get {
                return base.UseDefaultCredentials;
            }
            set {
                base.UseDefaultCredentials = value;
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        /// <remarks/>
        public event InserirSpedNcmCompletedEventHandler InserirSpedNcmCompleted;
        
        /// <remarks/>
        public event InserirProdutoCompletedEventHandler InserirProdutoCompleted;
        
        /// <remarks/>
        public event AlterarSpedNcmCompletedEventHandler AlterarSpedNcmCompleted;
        
        /// <remarks/>
        public event AlterarProdutoPriceCompletedEventHandler AlterarProdutoPriceCompleted;
        
        /// <remarks/>
        public event AlterarProdutoCompletedEventHandler AlterarProdutoCompleted;
        
        /// <remarks/>
        public event AlterarProdutoImpostosCompletedEventHandler AlterarProdutoImpostosCompleted;
        
        /// <remarks/>
        public event AlterarProdutoPriceFullCompletedEventHandler AlterarProdutoPriceFullCompleted;
        
        /// <remarks/>
        public event AlterarEANCompletedEventHandler AlterarEANCompleted;
        
        /// <remarks/>
        public event InserirEANCompletedEventHandler InserirEANCompleted;
        
        /// <remarks/>
        public event InserirUsuarioCompletedEventHandler InserirUsuarioCompleted;
        
        /// <remarks/>
        public event AlterarUsuarioCompletedEventHandler AlterarUsuarioCompleted;
        
        /// <remarks/>
        public event AlterarConfiguracaoUsuarioCompletedEventHandler AlterarConfiguracaoUsuarioCompleted;
        
        /// <remarks/>
        public event AlterarConfiguracaoUsuarioAllCompletedEventHandler AlterarConfiguracaoUsuarioAllCompleted;
        
        /// <remarks/>
        public event InserirConfiguracaoUsuarioCompletedEventHandler InserirConfiguracaoUsuarioCompleted;
        
        /// <remarks/>
        public event InserirFuncionarioCompletedEventHandler InserirFuncionarioCompleted;
        
        /// <remarks/>
        public event AlterarFuncionarioCompletedEventHandler AlterarFuncionarioCompleted;
        
        /// <remarks/>
        public event InserirTerminalCompletedEventHandler InserirTerminalCompleted;
        
        /// <remarks/>
        public event InserirCepCompletedEventHandler InserirCepCompleted;
        
        /// <remarks/>
        public event AlterarTerminalCompletedEventHandler AlterarTerminalCompleted;
        
        /// <remarks/>
        public event AlterarTerminalConfigEcfCompletedEventHandler AlterarTerminalConfigEcfCompleted;
        
        /// <remarks/>
        public event ObterResultChequeCompletedEventHandler ObterResultChequeCompleted;
        
        /// <remarks/>
        public event ObterPedidoCompletedEventHandler ObterPedidoCompleted;
        
        /// <remarks/>
        public event ObterPedidoLogCompletedEventHandler ObterPedidoLogCompleted;
        
        /// <remarks/>
        public event ObterPedidoExpireCompletedEventHandler ObterPedidoExpireCompleted;
        
        /// <remarks/>
        public event ObterPedidoItensCompletedEventHandler ObterPedidoItensCompleted;
        
        /// <remarks/>
        public event ObterPedidoFinanceiroCompletedEventHandler ObterPedidoFinanceiroCompleted;
        
        /// <remarks/>
        public event ObterPedidoParcelamentoCompletedEventHandler ObterPedidoParcelamentoCompleted;
        
        /// <remarks/>
        public event ObterPedidoEntregaCompletedEventHandler ObterPedidoEntregaCompleted;
        
        /// <remarks/>
        public event AlteraStatusPedidoCompletedEventHandler AlteraStatusPedidoCompleted;
        
        /// <remarks/>
        public event AlteraStatusPedidoFinalCompletedEventHandler AlteraStatusPedidoFinalCompleted;
        
        /// <remarks/>
        public event VerificaStatusPedidoCompletedEventHandler VerificaStatusPedidoCompleted;
        
        /// <remarks/>
        public event VerificaFinalPedidoCompletedEventHandler VerificaFinalPedidoCompleted;
        
        /// <remarks/>
        public event VerificaFinalizadoraPedidoCompletedEventHandler VerificaFinalizadoraPedidoCompleted;
        
        /// <remarks/>
        public event ObterCrediarioCompletedEventHandler ObterCrediarioCompleted;
        
        /// <remarks/>
        public event ObterParcelamentoCompletedEventHandler ObterParcelamentoCompleted;
        
        /// <remarks/>
        public event ObterParcelaCompletedEventHandler ObterParcelaCompleted;
        
        /// <remarks/>
        public event ObterDividentoCompletedEventHandler ObterDividentoCompleted;
        
        /// <remarks/>
        public event ObterHistoricoFullCompletedEventHandler ObterHistoricoFullCompleted;
        
        /// <remarks/>
        public event AlteraStatusParcelaCrediarioCompletedEventHandler AlteraStatusParcelaCrediarioCompleted;
        
        /// <remarks/>
        public event verificaStatusParcelaCrediarioCompletedEventHandler verificaStatusParcelaCrediarioCompleted;
        
        /// <remarks/>
        public event verificaStatusCrediarioCompletedEventHandler verificaStatusCrediarioCompleted;
        
        /// <remarks/>
        public event verificaExitsPepleoCompletedEventHandler verificaExitsPepleoCompleted;
        
        /// <remarks/>
        public event ObterPepleoSingleCompletedEventHandler ObterPepleoSingleCompleted;
        
        /// <remarks/>
        public event ObterMainPepleoCompletedEventHandler ObterMainPepleoCompleted;
        
        /// <remarks/>
        public event ObterMainPepleoWorkingCompletedEventHandler ObterMainPepleoWorkingCompleted;
        
        /// <remarks/>
        public event ObterMainPepleoFisicaCompletedEventHandler ObterMainPepleoFisicaCompleted;
        
        /// <remarks/>
        public event ObterMainPepleoRuralCompletedEventHandler ObterMainPepleoRuralCompleted;
        
        /// <remarks/>
        public event ObterMainPepleoJuridicaCompletedEventHandler ObterMainPepleoJuridicaCompleted;
        
        /// <remarks/>
        public event ObterFoneCompletedEventHandler ObterFoneCompleted;
        
        /// <remarks/>
        public event ObterFoneFuncionarioCompletedEventHandler ObterFoneFuncionarioCompleted;
        
        /// <remarks/>
        public event ObterStoreCompletedEventHandler ObterStoreCompleted;
        
        /// <remarks/>
        public event fornecedor_comercialCompletedEventHandler fornecedor_comercialCompleted;
        
        /// <remarks/>
        public event fornecedorFiscalCompletedEventHandler fornecedorFiscalCompleted;
        
        /// <remarks/>
        public event fornecedorInfoCompletedEventHandler fornecedorInfoCompleted;
        
        /// <remarks/>
        public event ObterEnderecoCompletedEventHandler ObterEnderecoCompleted;
        
        /// <remarks/>
        public event ObterEnderecoFuncionarioCompletedEventHandler ObterEnderecoFuncionarioCompleted;
        
        /// <remarks/>
        public event ObterPepleoCobrancaCompletedEventHandler ObterPepleoCobrancaCompleted;
        
        /// <remarks/>
        public event ObterPepleoEntregaCompletedEventHandler ObterPepleoEntregaCompleted;
        
        /// <remarks/>
        public event ObterPepleoProfissionalCompletedEventHandler ObterPepleoProfissionalCompleted;
        
        /// <remarks/>
        public event ObterPepleoReferenciaCompletedEventHandler ObterPepleoReferenciaCompleted;
        
        /// <remarks/>
        public event ObterPepleoRiscoCompletedEventHandler ObterPepleoRiscoCompleted;
        
        /// <remarks/>
        public event ObterNumNrCompletedEventHandler ObterNumNrCompleted;
        
        /// <remarks/>
        public event ObterEstoqueCompletedEventHandler ObterEstoqueCompleted;
        
        /// <remarks/>
        public event ObterTerminalCompletedEventHandler ObterTerminalCompleted;
        
        /// <remarks/>
        public event ObterCepCompletedEventHandler ObterCepCompleted;
        
        /// <remarks/>
        public event ObterMainTerminalWorkingCompletedEventHandler ObterMainTerminalWorkingCompleted;
        
        /// <remarks/>
        public event ObterFuncionarioDocumentoCompletedEventHandler ObterFuncionarioDocumentoCompleted;
        
        /// <remarks/>
        public event ObterUsuarioCompletedEventHandler ObterUsuarioCompleted;
        
        /// <remarks/>
        public event ObterPessoaDocumentoCompletedEventHandler ObterPessoaDocumentoCompleted;
        
        /// <remarks/>
        public event InserirFornecedorComercialCompletedEventHandler InserirFornecedorComercialCompleted;
        
        /// <remarks/>
        public event InserirFornecedorFiscalCompletedEventHandler InserirFornecedorFiscalCompleted;
        
        /// <remarks/>
        public event InserirFornecedorInfoCompletedEventHandler InserirFornecedorInfoCompleted;
        
        /// <remarks/>
        public event InserirPessoaCompletedEventHandler InserirPessoaCompleted;
        
        /// <remarks/>
        public event AlteraPessoaCompletedEventHandler AlteraPessoaCompleted;
        
        /// <remarks/>
        public event AlteraFisicaCompletedEventHandler AlteraFisicaCompleted;
        
        /// <remarks/>
        public event AlteraJuridicaCompletedEventHandler AlteraJuridicaCompleted;
        
        /// <remarks/>
        public event AlteraRuralCompletedEventHandler AlteraRuralCompleted;
        
        /// <remarks/>
        public event InserirFisicaCompletedEventHandler InserirFisicaCompleted;
        
        /// <remarks/>
        public event InserirRuralCompletedEventHandler InserirRuralCompleted;
        
        /// <remarks/>
        public event InserirJuridicaCompletedEventHandler InserirJuridicaCompleted;
        
        /// <remarks/>
        public event InserirEnderecoCompletedEventHandler InserirEnderecoCompleted;
        
        /// <remarks/>
        public event InserirEnderecoFuncionarioCompletedEventHandler InserirEnderecoFuncionarioCompleted;
        
        /// <remarks/>
        public event conector_passwdCompletedEventHandler conector_passwdCompleted;
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/InserirSpedNcm", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void InserirSpedNcm(string ncm, string descricao, string mva, string interestadual, string interna, string ajuste) {
            this.Invoke("InserirSpedNcm", new object[] {
                        ncm,
                        descricao,
                        mva,
                        interestadual,
                        interna,
                        ajuste});
        }
        
        /// <remarks/>
        public void InserirSpedNcmAsync(string ncm, string descricao, string mva, string interestadual, string interna, string ajuste) {
            this.InserirSpedNcmAsync(ncm, descricao, mva, interestadual, interna, ajuste, null);
        }
        
        /// <remarks/>
        public void InserirSpedNcmAsync(string ncm, string descricao, string mva, string interestadual, string interna, string ajuste, object userState) {
            if ((this.InserirSpedNcmOperationCompleted == null)) {
                this.InserirSpedNcmOperationCompleted = new System.Threading.SendOrPostCallback(this.OnInserirSpedNcmOperationCompleted);
            }
            this.InvokeAsync("InserirSpedNcm", new object[] {
                        ncm,
                        descricao,
                        mva,
                        interestadual,
                        interna,
                        ajuste}, this.InserirSpedNcmOperationCompleted, userState);
        }
        
        private void OnInserirSpedNcmOperationCompleted(object arg) {
            if ((this.InserirSpedNcmCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.InserirSpedNcmCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/InserirProduto", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string InserirProduto(string auxTipoCodigo, string descricao) {
            object[] results = this.Invoke("InserirProduto", new object[] {
                        auxTipoCodigo,
                        descricao});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void InserirProdutoAsync(string auxTipoCodigo, string descricao) {
            this.InserirProdutoAsync(auxTipoCodigo, descricao, null);
        }
        
        /// <remarks/>
        public void InserirProdutoAsync(string auxTipoCodigo, string descricao, object userState) {
            if ((this.InserirProdutoOperationCompleted == null)) {
                this.InserirProdutoOperationCompleted = new System.Threading.SendOrPostCallback(this.OnInserirProdutoOperationCompleted);
            }
            this.InvokeAsync("InserirProduto", new object[] {
                        auxTipoCodigo,
                        descricao}, this.InserirProdutoOperationCompleted, userState);
        }
        
        private void OnInserirProdutoOperationCompleted(object arg) {
            if ((this.InserirProdutoCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.InserirProdutoCompleted(this, new InserirProdutoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/AlterarSpedNcm", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void AlterarSpedNcm(string ncm, string descricao, string mva, string interestadual, string interna, string ajuste) {
            this.Invoke("AlterarSpedNcm", new object[] {
                        ncm,
                        descricao,
                        mva,
                        interestadual,
                        interna,
                        ajuste});
        }
        
        /// <remarks/>
        public void AlterarSpedNcmAsync(string ncm, string descricao, string mva, string interestadual, string interna, string ajuste) {
            this.AlterarSpedNcmAsync(ncm, descricao, mva, interestadual, interna, ajuste, null);
        }
        
        /// <remarks/>
        public void AlterarSpedNcmAsync(string ncm, string descricao, string mva, string interestadual, string interna, string ajuste, object userState) {
            if ((this.AlterarSpedNcmOperationCompleted == null)) {
                this.AlterarSpedNcmOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAlterarSpedNcmOperationCompleted);
            }
            this.InvokeAsync("AlterarSpedNcm", new object[] {
                        ncm,
                        descricao,
                        mva,
                        interestadual,
                        interna,
                        ajuste}, this.AlterarSpedNcmOperationCompleted, userState);
        }
        
        private void OnAlterarSpedNcmOperationCompleted(object arg) {
            if ((this.AlterarSpedNcmCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.AlterarSpedNcmCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/AlterarProdutoPrice", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void AlterarProdutoPrice(string chave, string store, string custo, string price, string status, string lucroliquido, string lucroBruto, string margem, string margemLiquida, string margemBruta, string sugestao, string pendente) {
            this.Invoke("AlterarProdutoPrice", new object[] {
                        chave,
                        store,
                        custo,
                        price,
                        status,
                        lucroliquido,
                        lucroBruto,
                        margem,
                        margemLiquida,
                        margemBruta,
                        sugestao,
                        pendente});
        }
        
        /// <remarks/>
        public void AlterarProdutoPriceAsync(string chave, string store, string custo, string price, string status, string lucroliquido, string lucroBruto, string margem, string margemLiquida, string margemBruta, string sugestao, string pendente) {
            this.AlterarProdutoPriceAsync(chave, store, custo, price, status, lucroliquido, lucroBruto, margem, margemLiquida, margemBruta, sugestao, pendente, null);
        }
        
        /// <remarks/>
        public void AlterarProdutoPriceAsync(string chave, string store, string custo, string price, string status, string lucroliquido, string lucroBruto, string margem, string margemLiquida, string margemBruta, string sugestao, string pendente, object userState) {
            if ((this.AlterarProdutoPriceOperationCompleted == null)) {
                this.AlterarProdutoPriceOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAlterarProdutoPriceOperationCompleted);
            }
            this.InvokeAsync("AlterarProdutoPrice", new object[] {
                        chave,
                        store,
                        custo,
                        price,
                        status,
                        lucroliquido,
                        lucroBruto,
                        margem,
                        margemLiquida,
                        margemBruta,
                        sugestao,
                        pendente}, this.AlterarProdutoPriceOperationCompleted, userState);
        }
        
        private void OnAlterarProdutoPriceOperationCompleted(object arg) {
            if ((this.AlterarProdutoPriceCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.AlterarProdutoPriceCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/AlterarProduto", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void AlterarProduto(
                    string new_idProduto, 
                    string new_idloja, 
                    string new_nome, 
                    string new_nomePdv, 
                    string new_nomeFull, 
                    string new_observacao, 
                    string new_status, 
                    string new_dataAlteracao, 
                    string new_idSetor, 
                    string new_idGrupo, 
                    string new_idCategoria, 
                    string new_idfornecedor, 
                    string new_idUsuarioAlt, 
                    string new_qttyObrigatoria, 
                    string new_qttyMaximaVenda, 
                    string new_descontoIndividual, 
                    string new_restrito, 
                    string new_idunidade, 
                    string new_tipo, 
                    string new_incideIpi, 
                    string new_inputCfop, 
                    string new_outputCfop, 
                    string new_permitiMultiplicacao, 
                    string new_marca, 
                    string new_referencia) {
            this.Invoke("AlterarProduto", new object[] {
                        new_idProduto,
                        new_idloja,
                        new_nome,
                        new_nomePdv,
                        new_nomeFull,
                        new_observacao,
                        new_status,
                        new_dataAlteracao,
                        new_idSetor,
                        new_idGrupo,
                        new_idCategoria,
                        new_idfornecedor,
                        new_idUsuarioAlt,
                        new_qttyObrigatoria,
                        new_qttyMaximaVenda,
                        new_descontoIndividual,
                        new_restrito,
                        new_idunidade,
                        new_tipo,
                        new_incideIpi,
                        new_inputCfop,
                        new_outputCfop,
                        new_permitiMultiplicacao,
                        new_marca,
                        new_referencia});
        }
        
        /// <remarks/>
        public void AlterarProdutoAsync(
                    string new_idProduto, 
                    string new_idloja, 
                    string new_nome, 
                    string new_nomePdv, 
                    string new_nomeFull, 
                    string new_observacao, 
                    string new_status, 
                    string new_dataAlteracao, 
                    string new_idSetor, 
                    string new_idGrupo, 
                    string new_idCategoria, 
                    string new_idfornecedor, 
                    string new_idUsuarioAlt, 
                    string new_qttyObrigatoria, 
                    string new_qttyMaximaVenda, 
                    string new_descontoIndividual, 
                    string new_restrito, 
                    string new_idunidade, 
                    string new_tipo, 
                    string new_incideIpi, 
                    string new_inputCfop, 
                    string new_outputCfop, 
                    string new_permitiMultiplicacao, 
                    string new_marca, 
                    string new_referencia) {
            this.AlterarProdutoAsync(new_idProduto, new_idloja, new_nome, new_nomePdv, new_nomeFull, new_observacao, new_status, new_dataAlteracao, new_idSetor, new_idGrupo, new_idCategoria, new_idfornecedor, new_idUsuarioAlt, new_qttyObrigatoria, new_qttyMaximaVenda, new_descontoIndividual, new_restrito, new_idunidade, new_tipo, new_incideIpi, new_inputCfop, new_outputCfop, new_permitiMultiplicacao, new_marca, new_referencia, null);
        }
        
        /// <remarks/>
        public void AlterarProdutoAsync(
                    string new_idProduto, 
                    string new_idloja, 
                    string new_nome, 
                    string new_nomePdv, 
                    string new_nomeFull, 
                    string new_observacao, 
                    string new_status, 
                    string new_dataAlteracao, 
                    string new_idSetor, 
                    string new_idGrupo, 
                    string new_idCategoria, 
                    string new_idfornecedor, 
                    string new_idUsuarioAlt, 
                    string new_qttyObrigatoria, 
                    string new_qttyMaximaVenda, 
                    string new_descontoIndividual, 
                    string new_restrito, 
                    string new_idunidade, 
                    string new_tipo, 
                    string new_incideIpi, 
                    string new_inputCfop, 
                    string new_outputCfop, 
                    string new_permitiMultiplicacao, 
                    string new_marca, 
                    string new_referencia, 
                    object userState) {
            if ((this.AlterarProdutoOperationCompleted == null)) {
                this.AlterarProdutoOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAlterarProdutoOperationCompleted);
            }
            this.InvokeAsync("AlterarProduto", new object[] {
                        new_idProduto,
                        new_idloja,
                        new_nome,
                        new_nomePdv,
                        new_nomeFull,
                        new_observacao,
                        new_status,
                        new_dataAlteracao,
                        new_idSetor,
                        new_idGrupo,
                        new_idCategoria,
                        new_idfornecedor,
                        new_idUsuarioAlt,
                        new_qttyObrigatoria,
                        new_qttyMaximaVenda,
                        new_descontoIndividual,
                        new_restrito,
                        new_idunidade,
                        new_tipo,
                        new_incideIpi,
                        new_inputCfop,
                        new_outputCfop,
                        new_permitiMultiplicacao,
                        new_marca,
                        new_referencia}, this.AlterarProdutoOperationCompleted, userState);
        }
        
        private void OnAlterarProdutoOperationCompleted(object arg) {
            if ((this.AlterarProdutoCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.AlterarProdutoCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/AlterarProdutoImpostos", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void AlterarProdutoImpostos(
                    string newImpidProduto, 
                    string newImpidloja, 
                    string newImptributacao, 
                    string newImptributacao1, 
                    string newImptributacao2, 
                    string newImpidpisCofins, 
                    string newImpcst, 
                    string newImpcstSaida, 
                    string newImpcstEntrada, 
                    string newImppauta, 
                    string newImpipi, 
                    string newImpipiValor, 
                    string newImpspedNcm, 
                    string newImpimpMercadoInterno, 
                    string newImpcsosn, 
                    string newImpidtypeItem, 
                    string newImpidGenero, 
                    string newreducaoCalcEspecial, 
                    string newippt) {
            this.Invoke("AlterarProdutoImpostos", new object[] {
                        newImpidProduto,
                        newImpidloja,
                        newImptributacao,
                        newImptributacao1,
                        newImptributacao2,
                        newImpidpisCofins,
                        newImpcst,
                        newImpcstSaida,
                        newImpcstEntrada,
                        newImppauta,
                        newImpipi,
                        newImpipiValor,
                        newImpspedNcm,
                        newImpimpMercadoInterno,
                        newImpcsosn,
                        newImpidtypeItem,
                        newImpidGenero,
                        newreducaoCalcEspecial,
                        newippt});
        }
        
        /// <remarks/>
        public void AlterarProdutoImpostosAsync(
                    string newImpidProduto, 
                    string newImpidloja, 
                    string newImptributacao, 
                    string newImptributacao1, 
                    string newImptributacao2, 
                    string newImpidpisCofins, 
                    string newImpcst, 
                    string newImpcstSaida, 
                    string newImpcstEntrada, 
                    string newImppauta, 
                    string newImpipi, 
                    string newImpipiValor, 
                    string newImpspedNcm, 
                    string newImpimpMercadoInterno, 
                    string newImpcsosn, 
                    string newImpidtypeItem, 
                    string newImpidGenero, 
                    string newreducaoCalcEspecial, 
                    string newippt) {
            this.AlterarProdutoImpostosAsync(newImpidProduto, newImpidloja, newImptributacao, newImptributacao1, newImptributacao2, newImpidpisCofins, newImpcst, newImpcstSaida, newImpcstEntrada, newImppauta, newImpipi, newImpipiValor, newImpspedNcm, newImpimpMercadoInterno, newImpcsosn, newImpidtypeItem, newImpidGenero, newreducaoCalcEspecial, newippt, null);
        }
        
        /// <remarks/>
        public void AlterarProdutoImpostosAsync(
                    string newImpidProduto, 
                    string newImpidloja, 
                    string newImptributacao, 
                    string newImptributacao1, 
                    string newImptributacao2, 
                    string newImpidpisCofins, 
                    string newImpcst, 
                    string newImpcstSaida, 
                    string newImpcstEntrada, 
                    string newImppauta, 
                    string newImpipi, 
                    string newImpipiValor, 
                    string newImpspedNcm, 
                    string newImpimpMercadoInterno, 
                    string newImpcsosn, 
                    string newImpidtypeItem, 
                    string newImpidGenero, 
                    string newreducaoCalcEspecial, 
                    string newippt, 
                    object userState) {
            if ((this.AlterarProdutoImpostosOperationCompleted == null)) {
                this.AlterarProdutoImpostosOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAlterarProdutoImpostosOperationCompleted);
            }
            this.InvokeAsync("AlterarProdutoImpostos", new object[] {
                        newImpidProduto,
                        newImpidloja,
                        newImptributacao,
                        newImptributacao1,
                        newImptributacao2,
                        newImpidpisCofins,
                        newImpcst,
                        newImpcstSaida,
                        newImpcstEntrada,
                        newImppauta,
                        newImpipi,
                        newImpipiValor,
                        newImpspedNcm,
                        newImpimpMercadoInterno,
                        newImpcsosn,
                        newImpidtypeItem,
                        newImpidGenero,
                        newreducaoCalcEspecial,
                        newippt}, this.AlterarProdutoImpostosOperationCompleted, userState);
        }
        
        private void OnAlterarProdutoImpostosOperationCompleted(object arg) {
            if ((this.AlterarProdutoImpostosCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.AlterarProdutoImpostosCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/AlterarProdutoPriceFull", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void AlterarProdutoPriceFull(
                    string newidProduto, 
                    string newidloja, 
                    string newpriceFull, 
                    string newpriceVenda, 
                    string newpricePendente, 
                    string newcreditoIcms, 
                    string newcreditoRedIcms, 
                    string newcreditoPis, 
                    string newcreditoCofins, 
                    string newcreditoOutros, 
                    string newprimeiroDesconto, 
                    string newsegundoDesconto, 
                    string newterceiroDesconto, 
                    string newdebitoIcms, 
                    string newdebitoRedIcms, 
                    string newlucroLiquido, 
                    string newlucroBruto, 
                    string newcustoBruto, 
                    string newcustoliquido, 
                    string newcustoMedio, 
                    string newIpiPorcentagem, 
                    string newmoedaIpi, 
                    string newmoedaFrete, 
                    string newfretePorcentagem, 
                    string newcomissao, 
                    string newpriceSugestao, 
                    string newsubstituicaoPorcetagem, 
                    string newacrescimoSubstituicao, 
                    string newmoedaSubstituicao, 
                    string newbonificacaoDesconto, 
                    string newmoedaBonificacao, 
                    string newmargem, 
                    string newdescontoMaximo, 
                    string newdespesasTributadas, 
                    string newdespesaNaoTributadas, 
                    string newcontribuicao, 
                    string newvendo, 
                    string newfinanceiro, 
                    string newdespesaFixa, 
                    string newstatusPrice, 
                    string newdescontoValor, 
                    string newMargemBruta, 
                    string newMargemLiquida, 
                    string newtrunca) {
            this.Invoke("AlterarProdutoPriceFull", new object[] {
                        newidProduto,
                        newidloja,
                        newpriceFull,
                        newpriceVenda,
                        newpricePendente,
                        newcreditoIcms,
                        newcreditoRedIcms,
                        newcreditoPis,
                        newcreditoCofins,
                        newcreditoOutros,
                        newprimeiroDesconto,
                        newsegundoDesconto,
                        newterceiroDesconto,
                        newdebitoIcms,
                        newdebitoRedIcms,
                        newlucroLiquido,
                        newlucroBruto,
                        newcustoBruto,
                        newcustoliquido,
                        newcustoMedio,
                        newIpiPorcentagem,
                        newmoedaIpi,
                        newmoedaFrete,
                        newfretePorcentagem,
                        newcomissao,
                        newpriceSugestao,
                        newsubstituicaoPorcetagem,
                        newacrescimoSubstituicao,
                        newmoedaSubstituicao,
                        newbonificacaoDesconto,
                        newmoedaBonificacao,
                        newmargem,
                        newdescontoMaximo,
                        newdespesasTributadas,
                        newdespesaNaoTributadas,
                        newcontribuicao,
                        newvendo,
                        newfinanceiro,
                        newdespesaFixa,
                        newstatusPrice,
                        newdescontoValor,
                        newMargemBruta,
                        newMargemLiquida,
                        newtrunca});
        }
        
        /// <remarks/>
        public void AlterarProdutoPriceFullAsync(
                    string newidProduto, 
                    string newidloja, 
                    string newpriceFull, 
                    string newpriceVenda, 
                    string newpricePendente, 
                    string newcreditoIcms, 
                    string newcreditoRedIcms, 
                    string newcreditoPis, 
                    string newcreditoCofins, 
                    string newcreditoOutros, 
                    string newprimeiroDesconto, 
                    string newsegundoDesconto, 
                    string newterceiroDesconto, 
                    string newdebitoIcms, 
                    string newdebitoRedIcms, 
                    string newlucroLiquido, 
                    string newlucroBruto, 
                    string newcustoBruto, 
                    string newcustoliquido, 
                    string newcustoMedio, 
                    string newIpiPorcentagem, 
                    string newmoedaIpi, 
                    string newmoedaFrete, 
                    string newfretePorcentagem, 
                    string newcomissao, 
                    string newpriceSugestao, 
                    string newsubstituicaoPorcetagem, 
                    string newacrescimoSubstituicao, 
                    string newmoedaSubstituicao, 
                    string newbonificacaoDesconto, 
                    string newmoedaBonificacao, 
                    string newmargem, 
                    string newdescontoMaximo, 
                    string newdespesasTributadas, 
                    string newdespesaNaoTributadas, 
                    string newcontribuicao, 
                    string newvendo, 
                    string newfinanceiro, 
                    string newdespesaFixa, 
                    string newstatusPrice, 
                    string newdescontoValor, 
                    string newMargemBruta, 
                    string newMargemLiquida, 
                    string newtrunca) {
            this.AlterarProdutoPriceFullAsync(newidProduto, newidloja, newpriceFull, newpriceVenda, newpricePendente, newcreditoIcms, newcreditoRedIcms, newcreditoPis, newcreditoCofins, newcreditoOutros, newprimeiroDesconto, newsegundoDesconto, newterceiroDesconto, newdebitoIcms, newdebitoRedIcms, newlucroLiquido, newlucroBruto, newcustoBruto, newcustoliquido, newcustoMedio, newIpiPorcentagem, newmoedaIpi, newmoedaFrete, newfretePorcentagem, newcomissao, newpriceSugestao, newsubstituicaoPorcetagem, newacrescimoSubstituicao, newmoedaSubstituicao, newbonificacaoDesconto, newmoedaBonificacao, newmargem, newdescontoMaximo, newdespesasTributadas, newdespesaNaoTributadas, newcontribuicao, newvendo, newfinanceiro, newdespesaFixa, newstatusPrice, newdescontoValor, newMargemBruta, newMargemLiquida, newtrunca, null);
        }
        
        /// <remarks/>
        public void AlterarProdutoPriceFullAsync(
                    string newidProduto, 
                    string newidloja, 
                    string newpriceFull, 
                    string newpriceVenda, 
                    string newpricePendente, 
                    string newcreditoIcms, 
                    string newcreditoRedIcms, 
                    string newcreditoPis, 
                    string newcreditoCofins, 
                    string newcreditoOutros, 
                    string newprimeiroDesconto, 
                    string newsegundoDesconto, 
                    string newterceiroDesconto, 
                    string newdebitoIcms, 
                    string newdebitoRedIcms, 
                    string newlucroLiquido, 
                    string newlucroBruto, 
                    string newcustoBruto, 
                    string newcustoliquido, 
                    string newcustoMedio, 
                    string newIpiPorcentagem, 
                    string newmoedaIpi, 
                    string newmoedaFrete, 
                    string newfretePorcentagem, 
                    string newcomissao, 
                    string newpriceSugestao, 
                    string newsubstituicaoPorcetagem, 
                    string newacrescimoSubstituicao, 
                    string newmoedaSubstituicao, 
                    string newbonificacaoDesconto, 
                    string newmoedaBonificacao, 
                    string newmargem, 
                    string newdescontoMaximo, 
                    string newdespesasTributadas, 
                    string newdespesaNaoTributadas, 
                    string newcontribuicao, 
                    string newvendo, 
                    string newfinanceiro, 
                    string newdespesaFixa, 
                    string newstatusPrice, 
                    string newdescontoValor, 
                    string newMargemBruta, 
                    string newMargemLiquida, 
                    string newtrunca, 
                    object userState) {
            if ((this.AlterarProdutoPriceFullOperationCompleted == null)) {
                this.AlterarProdutoPriceFullOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAlterarProdutoPriceFullOperationCompleted);
            }
            this.InvokeAsync("AlterarProdutoPriceFull", new object[] {
                        newidProduto,
                        newidloja,
                        newpriceFull,
                        newpriceVenda,
                        newpricePendente,
                        newcreditoIcms,
                        newcreditoRedIcms,
                        newcreditoPis,
                        newcreditoCofins,
                        newcreditoOutros,
                        newprimeiroDesconto,
                        newsegundoDesconto,
                        newterceiroDesconto,
                        newdebitoIcms,
                        newdebitoRedIcms,
                        newlucroLiquido,
                        newlucroBruto,
                        newcustoBruto,
                        newcustoliquido,
                        newcustoMedio,
                        newIpiPorcentagem,
                        newmoedaIpi,
                        newmoedaFrete,
                        newfretePorcentagem,
                        newcomissao,
                        newpriceSugestao,
                        newsubstituicaoPorcetagem,
                        newacrescimoSubstituicao,
                        newmoedaSubstituicao,
                        newbonificacaoDesconto,
                        newmoedaBonificacao,
                        newmargem,
                        newdescontoMaximo,
                        newdespesasTributadas,
                        newdespesaNaoTributadas,
                        newcontribuicao,
                        newvendo,
                        newfinanceiro,
                        newdespesaFixa,
                        newstatusPrice,
                        newdescontoValor,
                        newMargemBruta,
                        newMargemLiquida,
                        newtrunca}, this.AlterarProdutoPriceFullOperationCompleted, userState);
        }
        
        private void OnAlterarProdutoPriceFullOperationCompleted(object arg) {
            if ((this.AlterarProdutoPriceFullCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.AlterarProdutoPriceFullCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/AlterarEAN", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void AlterarEAN(string newIdProduto, string newBarra, string oldBarra, string newIdUnidadeMedida, string newquantidade, string newDefaultVenda, string newDefaultCompra, string newDefaultTransferencia, string newTypeEan) {
            this.Invoke("AlterarEAN", new object[] {
                        newIdProduto,
                        newBarra,
                        oldBarra,
                        newIdUnidadeMedida,
                        newquantidade,
                        newDefaultVenda,
                        newDefaultCompra,
                        newDefaultTransferencia,
                        newTypeEan});
        }
        
        /// <remarks/>
        public void AlterarEANAsync(string newIdProduto, string newBarra, string oldBarra, string newIdUnidadeMedida, string newquantidade, string newDefaultVenda, string newDefaultCompra, string newDefaultTransferencia, string newTypeEan) {
            this.AlterarEANAsync(newIdProduto, newBarra, oldBarra, newIdUnidadeMedida, newquantidade, newDefaultVenda, newDefaultCompra, newDefaultTransferencia, newTypeEan, null);
        }
        
        /// <remarks/>
        public void AlterarEANAsync(string newIdProduto, string newBarra, string oldBarra, string newIdUnidadeMedida, string newquantidade, string newDefaultVenda, string newDefaultCompra, string newDefaultTransferencia, string newTypeEan, object userState) {
            if ((this.AlterarEANOperationCompleted == null)) {
                this.AlterarEANOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAlterarEANOperationCompleted);
            }
            this.InvokeAsync("AlterarEAN", new object[] {
                        newIdProduto,
                        newBarra,
                        oldBarra,
                        newIdUnidadeMedida,
                        newquantidade,
                        newDefaultVenda,
                        newDefaultCompra,
                        newDefaultTransferencia,
                        newTypeEan}, this.AlterarEANOperationCompleted, userState);
        }
        
        private void OnAlterarEANOperationCompleted(object arg) {
            if ((this.AlterarEANCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.AlterarEANCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/InserirEAN", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void InserirEAN(string inc_idproduto, string inc_barra, string inc_idunidadeMedida, string inc_quantidade, string inc_defaultVenda, string inc_defaultCompra, string inc_defaultTransferencia, string inc_typeEan) {
            this.Invoke("InserirEAN", new object[] {
                        inc_idproduto,
                        inc_barra,
                        inc_idunidadeMedida,
                        inc_quantidade,
                        inc_defaultVenda,
                        inc_defaultCompra,
                        inc_defaultTransferencia,
                        inc_typeEan});
        }
        
        /// <remarks/>
        public void InserirEANAsync(string inc_idproduto, string inc_barra, string inc_idunidadeMedida, string inc_quantidade, string inc_defaultVenda, string inc_defaultCompra, string inc_defaultTransferencia, string inc_typeEan) {
            this.InserirEANAsync(inc_idproduto, inc_barra, inc_idunidadeMedida, inc_quantidade, inc_defaultVenda, inc_defaultCompra, inc_defaultTransferencia, inc_typeEan, null);
        }
        
        /// <remarks/>
        public void InserirEANAsync(string inc_idproduto, string inc_barra, string inc_idunidadeMedida, string inc_quantidade, string inc_defaultVenda, string inc_defaultCompra, string inc_defaultTransferencia, string inc_typeEan, object userState) {
            if ((this.InserirEANOperationCompleted == null)) {
                this.InserirEANOperationCompleted = new System.Threading.SendOrPostCallback(this.OnInserirEANOperationCompleted);
            }
            this.InvokeAsync("InserirEAN", new object[] {
                        inc_idproduto,
                        inc_barra,
                        inc_idunidadeMedida,
                        inc_quantidade,
                        inc_defaultVenda,
                        inc_defaultCompra,
                        inc_defaultTransferencia,
                        inc_typeEan}, this.InserirEANOperationCompleted, userState);
        }
        
        private void OnInserirEANOperationCompleted(object arg) {
            if ((this.InserirEANCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.InserirEANCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/InserirUsuario", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int InserirUsuario(string replace_idusuario, string replace_descricao, string replace_login, string replace_passwd, string replace_terminalVenda, string replace_terminalConsulta, string replace_terminalECF, string replace_terminalAnaliseCredito, string replace_terminalMataBurro, string replace_status, string replace_supervisor, string replace_cadastro, string replace_onlyLogon, string replace_defaultLoja) {
            object[] results = this.Invoke("InserirUsuario", new object[] {
                        replace_idusuario,
                        replace_descricao,
                        replace_login,
                        replace_passwd,
                        replace_terminalVenda,
                        replace_terminalConsulta,
                        replace_terminalECF,
                        replace_terminalAnaliseCredito,
                        replace_terminalMataBurro,
                        replace_status,
                        replace_supervisor,
                        replace_cadastro,
                        replace_onlyLogon,
                        replace_defaultLoja});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void InserirUsuarioAsync(string replace_idusuario, string replace_descricao, string replace_login, string replace_passwd, string replace_terminalVenda, string replace_terminalConsulta, string replace_terminalECF, string replace_terminalAnaliseCredito, string replace_terminalMataBurro, string replace_status, string replace_supervisor, string replace_cadastro, string replace_onlyLogon, string replace_defaultLoja) {
            this.InserirUsuarioAsync(replace_idusuario, replace_descricao, replace_login, replace_passwd, replace_terminalVenda, replace_terminalConsulta, replace_terminalECF, replace_terminalAnaliseCredito, replace_terminalMataBurro, replace_status, replace_supervisor, replace_cadastro, replace_onlyLogon, replace_defaultLoja, null);
        }
        
        /// <remarks/>
        public void InserirUsuarioAsync(string replace_idusuario, string replace_descricao, string replace_login, string replace_passwd, string replace_terminalVenda, string replace_terminalConsulta, string replace_terminalECF, string replace_terminalAnaliseCredito, string replace_terminalMataBurro, string replace_status, string replace_supervisor, string replace_cadastro, string replace_onlyLogon, string replace_defaultLoja, object userState) {
            if ((this.InserirUsuarioOperationCompleted == null)) {
                this.InserirUsuarioOperationCompleted = new System.Threading.SendOrPostCallback(this.OnInserirUsuarioOperationCompleted);
            }
            this.InvokeAsync("InserirUsuario", new object[] {
                        replace_idusuario,
                        replace_descricao,
                        replace_login,
                        replace_passwd,
                        replace_terminalVenda,
                        replace_terminalConsulta,
                        replace_terminalECF,
                        replace_terminalAnaliseCredito,
                        replace_terminalMataBurro,
                        replace_status,
                        replace_supervisor,
                        replace_cadastro,
                        replace_onlyLogon,
                        replace_defaultLoja}, this.InserirUsuarioOperationCompleted, userState);
        }
        
        private void OnInserirUsuarioOperationCompleted(object arg) {
            if ((this.InserirUsuarioCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.InserirUsuarioCompleted(this, new InserirUsuarioCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/AlterarUsuario", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void AlterarUsuario(string auxIdUsuario, string descricao, string login, string passwd, string terminalVenda, string terminalConsulta, string terminalECF, string terminalAnaliseCredito, string terminalMataBurro, string status, string supervisor, string onlyLogon, string defaultLoja, string key) {
            this.Invoke("AlterarUsuario", new object[] {
                        auxIdUsuario,
                        descricao,
                        login,
                        passwd,
                        terminalVenda,
                        terminalConsulta,
                        terminalECF,
                        terminalAnaliseCredito,
                        terminalMataBurro,
                        status,
                        supervisor,
                        onlyLogon,
                        defaultLoja,
                        key});
        }
        
        /// <remarks/>
        public void AlterarUsuarioAsync(string auxIdUsuario, string descricao, string login, string passwd, string terminalVenda, string terminalConsulta, string terminalECF, string terminalAnaliseCredito, string terminalMataBurro, string status, string supervisor, string onlyLogon, string defaultLoja, string key) {
            this.AlterarUsuarioAsync(auxIdUsuario, descricao, login, passwd, terminalVenda, terminalConsulta, terminalECF, terminalAnaliseCredito, terminalMataBurro, status, supervisor, onlyLogon, defaultLoja, key, null);
        }
        
        /// <remarks/>
        public void AlterarUsuarioAsync(string auxIdUsuario, string descricao, string login, string passwd, string terminalVenda, string terminalConsulta, string terminalECF, string terminalAnaliseCredito, string terminalMataBurro, string status, string supervisor, string onlyLogon, string defaultLoja, string key, object userState) {
            if ((this.AlterarUsuarioOperationCompleted == null)) {
                this.AlterarUsuarioOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAlterarUsuarioOperationCompleted);
            }
            this.InvokeAsync("AlterarUsuario", new object[] {
                        auxIdUsuario,
                        descricao,
                        login,
                        passwd,
                        terminalVenda,
                        terminalConsulta,
                        terminalECF,
                        terminalAnaliseCredito,
                        terminalMataBurro,
                        status,
                        supervisor,
                        onlyLogon,
                        defaultLoja,
                        key}, this.AlterarUsuarioOperationCompleted, userState);
        }
        
        private void OnAlterarUsuarioOperationCompleted(object arg) {
            if ((this.AlterarUsuarioCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.AlterarUsuarioCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/AlterarConfiguracaoUsuario", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void AlterarConfiguracaoUsuario(
                    string auxIdUsuarioConfig, 
                    string auxidconfiguracao, 
                    string auxidusuario, 
                    string auxadministradoraCartao, 
                    string auxbanco, 
                    string auxcaixa, 
                    string auxcargo, 
                    string auxcep, 
                    string auxconvenios, 
                    string auxcodicaoPgto, 
                    string auxcontaCorrente, 
                    string auxcomplementoFiscal, 
                    string auxcliente, 
                    string auxescolaridade, 
                    string auxferiados, 
                    string auxfinalizadoras, 
                    string auxfornecedor, 
                    string auxfuncionario, 
                    string auxloja, 
                    string auxmetodos, 
                    string auxprofissao, 
                    string auxrepresentante, 
                    string auxtelefone, 
                    string auxterminal, 
                    string auxtransportadora, 
                    string auxusuario, 
                    string auxveiculo, 
                    string auxproduto, 
                    string auxsetor, 
                    string auxgrupo, 
                    string auxcategoria, 
                    string auxcompra, 
                    string auxmaximo, 
                    string auxentrada, 
                    string auxprecificacao, 
                    string auxtransferencia, 
                    string auxmovimentacaoEstoque, 
                    string auxsaldoEstoque, 
                    string auxzeraEstoque, 
                    string auxoperacaoEntrada, 
                    string auxtipoProduto, 
                    string auxtrocaProduto, 
                    string auxcontasReceber, 
                    string auxcartaoCredito, 
                    string auxcheque, 
                    string auxcrediario, 
                    string auxdevolucao, 
                    string auxcaixaCadastro, 
                    string auxsitegra, 
                    string auxnotaFiscal, 
                    string auxsped, 
                    string auxapuracaoImposto, 
                    string auxmapaResumo, 
                    string auxcfop, 
                    string auxaliquotaFiscal, 
                    string auxoperacaoFaturamento, 
                    string auxmataBurro, 
                    string auxconfiguraNotaFiscal, 
                    string auxprocessamento, 
                    string auxtesouraria, 
                    string auxcupomFiscal, 
                    string auxcontroleReservas, 
                    string auxanaliseCredito, 
                    string auxpdvSingle, 
                    string auxcontasPagar, 
                    string auxtrocaSenha, 
                    string auxliberacao, 
                    string auxcargas, 
                    string auxinterfacePdv, 
                    string auxdre, 
                    string auxfluxoCaixa, 
                    string auxflashReserva, 
                    string auxflashVenda, 
                    string auxrelatorios, 
                    string auxchequeDevolvido, 
                    string auxconvenio, 
                    string auxlog, 
                    string auxinclusao, 
                    string auxalteracao, 
                    string auxmenuCadastro, 
                    string auxmenuProduto, 
                    string auxmenuFinanceiro, 
                    string auxmenuFiscal, 
                    string auxmenuFaturamento, 
                    string auxmenuPagar, 
                    string auxmenuUtilitario, 
                    string auxmenuContabil, 
                    string auxmenuVenda, 
                    string auxmenuRelatorio, 
                    string auxinventario, 
                    string auxestoqueRede, 
                    string auxsaldoCrediario, 
                    string auxCrediarioContrato, 
                    string auxCrediarioResumoContabil, 
                    string auxCrediarioInadimplencia, 
                    string auxCrediarioConfiguracao, 
                    string auxmenuBoletos, 
                    string auxtableFiscal, 
                    string auxprecoIndividual, 
                    string auxcomposto, 
                    string auxmovimentoEstoque, 
                    string auxtipoPromocao, 
                    string auxpromocao, 
                    string auxprecoGrupo, 
                    string auxrota, 
                    string auxboletoBancario) {
            this.Invoke("AlterarConfiguracaoUsuario", new object[] {
                        auxIdUsuarioConfig,
                        auxidconfiguracao,
                        auxidusuario,
                        auxadministradoraCartao,
                        auxbanco,
                        auxcaixa,
                        auxcargo,
                        auxcep,
                        auxconvenios,
                        auxcodicaoPgto,
                        auxcontaCorrente,
                        auxcomplementoFiscal,
                        auxcliente,
                        auxescolaridade,
                        auxferiados,
                        auxfinalizadoras,
                        auxfornecedor,
                        auxfuncionario,
                        auxloja,
                        auxmetodos,
                        auxprofissao,
                        auxrepresentante,
                        auxtelefone,
                        auxterminal,
                        auxtransportadora,
                        auxusuario,
                        auxveiculo,
                        auxproduto,
                        auxsetor,
                        auxgrupo,
                        auxcategoria,
                        auxcompra,
                        auxmaximo,
                        auxentrada,
                        auxprecificacao,
                        auxtransferencia,
                        auxmovimentacaoEstoque,
                        auxsaldoEstoque,
                        auxzeraEstoque,
                        auxoperacaoEntrada,
                        auxtipoProduto,
                        auxtrocaProduto,
                        auxcontasReceber,
                        auxcartaoCredito,
                        auxcheque,
                        auxcrediario,
                        auxdevolucao,
                        auxcaixaCadastro,
                        auxsitegra,
                        auxnotaFiscal,
                        auxsped,
                        auxapuracaoImposto,
                        auxmapaResumo,
                        auxcfop,
                        auxaliquotaFiscal,
                        auxoperacaoFaturamento,
                        auxmataBurro,
                        auxconfiguraNotaFiscal,
                        auxprocessamento,
                        auxtesouraria,
                        auxcupomFiscal,
                        auxcontroleReservas,
                        auxanaliseCredito,
                        auxpdvSingle,
                        auxcontasPagar,
                        auxtrocaSenha,
                        auxliberacao,
                        auxcargas,
                        auxinterfacePdv,
                        auxdre,
                        auxfluxoCaixa,
                        auxflashReserva,
                        auxflashVenda,
                        auxrelatorios,
                        auxchequeDevolvido,
                        auxconvenio,
                        auxlog,
                        auxinclusao,
                        auxalteracao,
                        auxmenuCadastro,
                        auxmenuProduto,
                        auxmenuFinanceiro,
                        auxmenuFiscal,
                        auxmenuFaturamento,
                        auxmenuPagar,
                        auxmenuUtilitario,
                        auxmenuContabil,
                        auxmenuVenda,
                        auxmenuRelatorio,
                        auxinventario,
                        auxestoqueRede,
                        auxsaldoCrediario,
                        auxCrediarioContrato,
                        auxCrediarioResumoContabil,
                        auxCrediarioInadimplencia,
                        auxCrediarioConfiguracao,
                        auxmenuBoletos,
                        auxtableFiscal,
                        auxprecoIndividual,
                        auxcomposto,
                        auxmovimentoEstoque,
                        auxtipoPromocao,
                        auxpromocao,
                        auxprecoGrupo,
                        auxrota,
                        auxboletoBancario});
        }
        
        /// <remarks/>
        public void AlterarConfiguracaoUsuarioAsync(
                    string auxIdUsuarioConfig, 
                    string auxidconfiguracao, 
                    string auxidusuario, 
                    string auxadministradoraCartao, 
                    string auxbanco, 
                    string auxcaixa, 
                    string auxcargo, 
                    string auxcep, 
                    string auxconvenios, 
                    string auxcodicaoPgto, 
                    string auxcontaCorrente, 
                    string auxcomplementoFiscal, 
                    string auxcliente, 
                    string auxescolaridade, 
                    string auxferiados, 
                    string auxfinalizadoras, 
                    string auxfornecedor, 
                    string auxfuncionario, 
                    string auxloja, 
                    string auxmetodos, 
                    string auxprofissao, 
                    string auxrepresentante, 
                    string auxtelefone, 
                    string auxterminal, 
                    string auxtransportadora, 
                    string auxusuario, 
                    string auxveiculo, 
                    string auxproduto, 
                    string auxsetor, 
                    string auxgrupo, 
                    string auxcategoria, 
                    string auxcompra, 
                    string auxmaximo, 
                    string auxentrada, 
                    string auxprecificacao, 
                    string auxtransferencia, 
                    string auxmovimentacaoEstoque, 
                    string auxsaldoEstoque, 
                    string auxzeraEstoque, 
                    string auxoperacaoEntrada, 
                    string auxtipoProduto, 
                    string auxtrocaProduto, 
                    string auxcontasReceber, 
                    string auxcartaoCredito, 
                    string auxcheque, 
                    string auxcrediario, 
                    string auxdevolucao, 
                    string auxcaixaCadastro, 
                    string auxsitegra, 
                    string auxnotaFiscal, 
                    string auxsped, 
                    string auxapuracaoImposto, 
                    string auxmapaResumo, 
                    string auxcfop, 
                    string auxaliquotaFiscal, 
                    string auxoperacaoFaturamento, 
                    string auxmataBurro, 
                    string auxconfiguraNotaFiscal, 
                    string auxprocessamento, 
                    string auxtesouraria, 
                    string auxcupomFiscal, 
                    string auxcontroleReservas, 
                    string auxanaliseCredito, 
                    string auxpdvSingle, 
                    string auxcontasPagar, 
                    string auxtrocaSenha, 
                    string auxliberacao, 
                    string auxcargas, 
                    string auxinterfacePdv, 
                    string auxdre, 
                    string auxfluxoCaixa, 
                    string auxflashReserva, 
                    string auxflashVenda, 
                    string auxrelatorios, 
                    string auxchequeDevolvido, 
                    string auxconvenio, 
                    string auxlog, 
                    string auxinclusao, 
                    string auxalteracao, 
                    string auxmenuCadastro, 
                    string auxmenuProduto, 
                    string auxmenuFinanceiro, 
                    string auxmenuFiscal, 
                    string auxmenuFaturamento, 
                    string auxmenuPagar, 
                    string auxmenuUtilitario, 
                    string auxmenuContabil, 
                    string auxmenuVenda, 
                    string auxmenuRelatorio, 
                    string auxinventario, 
                    string auxestoqueRede, 
                    string auxsaldoCrediario, 
                    string auxCrediarioContrato, 
                    string auxCrediarioResumoContabil, 
                    string auxCrediarioInadimplencia, 
                    string auxCrediarioConfiguracao, 
                    string auxmenuBoletos, 
                    string auxtableFiscal, 
                    string auxprecoIndividual, 
                    string auxcomposto, 
                    string auxmovimentoEstoque, 
                    string auxtipoPromocao, 
                    string auxpromocao, 
                    string auxprecoGrupo, 
                    string auxrota, 
                    string auxboletoBancario) {
            this.AlterarConfiguracaoUsuarioAsync(auxIdUsuarioConfig, auxidconfiguracao, auxidusuario, auxadministradoraCartao, auxbanco, auxcaixa, auxcargo, auxcep, auxconvenios, auxcodicaoPgto, auxcontaCorrente, auxcomplementoFiscal, auxcliente, auxescolaridade, auxferiados, auxfinalizadoras, auxfornecedor, auxfuncionario, auxloja, auxmetodos, auxprofissao, auxrepresentante, auxtelefone, auxterminal, auxtransportadora, auxusuario, auxveiculo, auxproduto, auxsetor, auxgrupo, auxcategoria, auxcompra, auxmaximo, auxentrada, auxprecificacao, auxtransferencia, auxmovimentacaoEstoque, auxsaldoEstoque, auxzeraEstoque, auxoperacaoEntrada, auxtipoProduto, auxtrocaProduto, auxcontasReceber, auxcartaoCredito, auxcheque, auxcrediario, auxdevolucao, auxcaixaCadastro, auxsitegra, auxnotaFiscal, auxsped, auxapuracaoImposto, auxmapaResumo, auxcfop, auxaliquotaFiscal, auxoperacaoFaturamento, auxmataBurro, auxconfiguraNotaFiscal, auxprocessamento, auxtesouraria, auxcupomFiscal, auxcontroleReservas, auxanaliseCredito, auxpdvSingle, auxcontasPagar, auxtrocaSenha, auxliberacao, auxcargas, auxinterfacePdv, auxdre, auxfluxoCaixa, auxflashReserva, auxflashVenda, auxrelatorios, auxchequeDevolvido, auxconvenio, auxlog, auxinclusao, auxalteracao, auxmenuCadastro, auxmenuProduto, auxmenuFinanceiro, auxmenuFiscal, auxmenuFaturamento, auxmenuPagar, auxmenuUtilitario, auxmenuContabil, auxmenuVenda, auxmenuRelatorio, auxinventario, auxestoqueRede, auxsaldoCrediario, auxCrediarioContrato, auxCrediarioResumoContabil, auxCrediarioInadimplencia, auxCrediarioConfiguracao, auxmenuBoletos, auxtableFiscal, auxprecoIndividual, auxcomposto, auxmovimentoEstoque, auxtipoPromocao, auxpromocao, auxprecoGrupo, auxrota, auxboletoBancario, null);
        }
        
        /// <remarks/>
        public void AlterarConfiguracaoUsuarioAsync(
                    string auxIdUsuarioConfig, 
                    string auxidconfiguracao, 
                    string auxidusuario, 
                    string auxadministradoraCartao, 
                    string auxbanco, 
                    string auxcaixa, 
                    string auxcargo, 
                    string auxcep, 
                    string auxconvenios, 
                    string auxcodicaoPgto, 
                    string auxcontaCorrente, 
                    string auxcomplementoFiscal, 
                    string auxcliente, 
                    string auxescolaridade, 
                    string auxferiados, 
                    string auxfinalizadoras, 
                    string auxfornecedor, 
                    string auxfuncionario, 
                    string auxloja, 
                    string auxmetodos, 
                    string auxprofissao, 
                    string auxrepresentante, 
                    string auxtelefone, 
                    string auxterminal, 
                    string auxtransportadora, 
                    string auxusuario, 
                    string auxveiculo, 
                    string auxproduto, 
                    string auxsetor, 
                    string auxgrupo, 
                    string auxcategoria, 
                    string auxcompra, 
                    string auxmaximo, 
                    string auxentrada, 
                    string auxprecificacao, 
                    string auxtransferencia, 
                    string auxmovimentacaoEstoque, 
                    string auxsaldoEstoque, 
                    string auxzeraEstoque, 
                    string auxoperacaoEntrada, 
                    string auxtipoProduto, 
                    string auxtrocaProduto, 
                    string auxcontasReceber, 
                    string auxcartaoCredito, 
                    string auxcheque, 
                    string auxcrediario, 
                    string auxdevolucao, 
                    string auxcaixaCadastro, 
                    string auxsitegra, 
                    string auxnotaFiscal, 
                    string auxsped, 
                    string auxapuracaoImposto, 
                    string auxmapaResumo, 
                    string auxcfop, 
                    string auxaliquotaFiscal, 
                    string auxoperacaoFaturamento, 
                    string auxmataBurro, 
                    string auxconfiguraNotaFiscal, 
                    string auxprocessamento, 
                    string auxtesouraria, 
                    string auxcupomFiscal, 
                    string auxcontroleReservas, 
                    string auxanaliseCredito, 
                    string auxpdvSingle, 
                    string auxcontasPagar, 
                    string auxtrocaSenha, 
                    string auxliberacao, 
                    string auxcargas, 
                    string auxinterfacePdv, 
                    string auxdre, 
                    string auxfluxoCaixa, 
                    string auxflashReserva, 
                    string auxflashVenda, 
                    string auxrelatorios, 
                    string auxchequeDevolvido, 
                    string auxconvenio, 
                    string auxlog, 
                    string auxinclusao, 
                    string auxalteracao, 
                    string auxmenuCadastro, 
                    string auxmenuProduto, 
                    string auxmenuFinanceiro, 
                    string auxmenuFiscal, 
                    string auxmenuFaturamento, 
                    string auxmenuPagar, 
                    string auxmenuUtilitario, 
                    string auxmenuContabil, 
                    string auxmenuVenda, 
                    string auxmenuRelatorio, 
                    string auxinventario, 
                    string auxestoqueRede, 
                    string auxsaldoCrediario, 
                    string auxCrediarioContrato, 
                    string auxCrediarioResumoContabil, 
                    string auxCrediarioInadimplencia, 
                    string auxCrediarioConfiguracao, 
                    string auxmenuBoletos, 
                    string auxtableFiscal, 
                    string auxprecoIndividual, 
                    string auxcomposto, 
                    string auxmovimentoEstoque, 
                    string auxtipoPromocao, 
                    string auxpromocao, 
                    string auxprecoGrupo, 
                    string auxrota, 
                    string auxboletoBancario, 
                    object userState) {
            if ((this.AlterarConfiguracaoUsuarioOperationCompleted == null)) {
                this.AlterarConfiguracaoUsuarioOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAlterarConfiguracaoUsuarioOperationCompleted);
            }
            this.InvokeAsync("AlterarConfiguracaoUsuario", new object[] {
                        auxIdUsuarioConfig,
                        auxidconfiguracao,
                        auxidusuario,
                        auxadministradoraCartao,
                        auxbanco,
                        auxcaixa,
                        auxcargo,
                        auxcep,
                        auxconvenios,
                        auxcodicaoPgto,
                        auxcontaCorrente,
                        auxcomplementoFiscal,
                        auxcliente,
                        auxescolaridade,
                        auxferiados,
                        auxfinalizadoras,
                        auxfornecedor,
                        auxfuncionario,
                        auxloja,
                        auxmetodos,
                        auxprofissao,
                        auxrepresentante,
                        auxtelefone,
                        auxterminal,
                        auxtransportadora,
                        auxusuario,
                        auxveiculo,
                        auxproduto,
                        auxsetor,
                        auxgrupo,
                        auxcategoria,
                        auxcompra,
                        auxmaximo,
                        auxentrada,
                        auxprecificacao,
                        auxtransferencia,
                        auxmovimentacaoEstoque,
                        auxsaldoEstoque,
                        auxzeraEstoque,
                        auxoperacaoEntrada,
                        auxtipoProduto,
                        auxtrocaProduto,
                        auxcontasReceber,
                        auxcartaoCredito,
                        auxcheque,
                        auxcrediario,
                        auxdevolucao,
                        auxcaixaCadastro,
                        auxsitegra,
                        auxnotaFiscal,
                        auxsped,
                        auxapuracaoImposto,
                        auxmapaResumo,
                        auxcfop,
                        auxaliquotaFiscal,
                        auxoperacaoFaturamento,
                        auxmataBurro,
                        auxconfiguraNotaFiscal,
                        auxprocessamento,
                        auxtesouraria,
                        auxcupomFiscal,
                        auxcontroleReservas,
                        auxanaliseCredito,
                        auxpdvSingle,
                        auxcontasPagar,
                        auxtrocaSenha,
                        auxliberacao,
                        auxcargas,
                        auxinterfacePdv,
                        auxdre,
                        auxfluxoCaixa,
                        auxflashReserva,
                        auxflashVenda,
                        auxrelatorios,
                        auxchequeDevolvido,
                        auxconvenio,
                        auxlog,
                        auxinclusao,
                        auxalteracao,
                        auxmenuCadastro,
                        auxmenuProduto,
                        auxmenuFinanceiro,
                        auxmenuFiscal,
                        auxmenuFaturamento,
                        auxmenuPagar,
                        auxmenuUtilitario,
                        auxmenuContabil,
                        auxmenuVenda,
                        auxmenuRelatorio,
                        auxinventario,
                        auxestoqueRede,
                        auxsaldoCrediario,
                        auxCrediarioContrato,
                        auxCrediarioResumoContabil,
                        auxCrediarioInadimplencia,
                        auxCrediarioConfiguracao,
                        auxmenuBoletos,
                        auxtableFiscal,
                        auxprecoIndividual,
                        auxcomposto,
                        auxmovimentoEstoque,
                        auxtipoPromocao,
                        auxpromocao,
                        auxprecoGrupo,
                        auxrota,
                        auxboletoBancario}, this.AlterarConfiguracaoUsuarioOperationCompleted, userState);
        }
        
        private void OnAlterarConfiguracaoUsuarioOperationCompleted(object arg) {
            if ((this.AlterarConfiguracaoUsuarioCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.AlterarConfiguracaoUsuarioCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/AlterarConfiguracaoUsuarioAll", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void AlterarConfiguracaoUsuarioAll(
                    string replace_idconfiguracao, 
                    string replace_idusuario, 
                    string replace_administradoraCartao, 
                    string replace_banco, 
                    string replace_caixa, 
                    string replace_cargo, 
                    string replace_cep, 
                    string replace_convenios, 
                    string replace_codicaoPgto, 
                    string replace_contaCorrente, 
                    string replace_complementoFiscal, 
                    string replace_cliente, 
                    string replace_escolaridade, 
                    string replace_feriados, 
                    string replace_finalizadoras, 
                    string replace_fornecedor, 
                    string replace_funcionario, 
                    string replace_loja, 
                    string replace_metodos, 
                    string replace_profissao, 
                    string replace_representante, 
                    string replace_telefone, 
                    string replace_terminal, 
                    string replace_transportadora, 
                    string replace_usuario, 
                    string replace_veiculo, 
                    string replace_produto, 
                    string replace_setor, 
                    string replace_grupo, 
                    string replace_categoria, 
                    string replace_compra, 
                    string replace_maximo, 
                    string replace_entrada, 
                    string replace_precificacao, 
                    string replace_transferencia, 
                    string replace_movimentacaoEstoque, 
                    string replace_saldoEstoque, 
                    string replace_zeraEstoque, 
                    string replace_operacaoEntrada, 
                    string replace_tipoProduto, 
                    string replace_trocaProduto, 
                    string replace_contasReceber, 
                    string replace_cartaoCredito, 
                    string replace_cheque, 
                    string replace_crediario, 
                    string replace_devolucao, 
                    string replace_caixaCadastro, 
                    string replace_sitegra, 
                    string replace_notaFiscal, 
                    string replace_sped, 
                    string replace_apuracaoImposto, 
                    string replace_mapaResumo, 
                    string replace_cfop, 
                    string replace_aliquotaFiscal, 
                    string replace_operacaoFaturamento, 
                    string replace_mataBurro, 
                    string replace_configuraNotaFiscal, 
                    string replace_processamento, 
                    string replace_tesouraria, 
                    string replace_cupomFiscal, 
                    string replace_controleReservas, 
                    string replace_analiseCredito, 
                    string replace_pdvSingle, 
                    string replace_contasPagar, 
                    string replace_trocaSenha, 
                    string replace_liberacao, 
                    string replace_cargas, 
                    string replace_interfacePdv, 
                    string replace_dre, 
                    string replace_fluxoCaixa, 
                    string replace_flashReserva, 
                    string replace_flashVenda, 
                    string replace_relatorios, 
                    string replace_chequeDevolvido, 
                    string replace_convenio, 
                    string replace_log, 
                    string replace_inclusao, 
                    string replace_alteracao, 
                    string replace_menuCadastro, 
                    string replace_menuProduto, 
                    string replace_menuFinanceiro, 
                    string replace_menuFiscal, 
                    string replace_menuFaturamento, 
                    string replace_menuPagar, 
                    string replace_menuUtilitario, 
                    string replace_menuContabil, 
                    string replace_menuVenda, 
                    string replace_menuRelatorio, 
                    string replace_inventario, 
                    string replace_estoqueRede, 
                    string replace_saldoCrediario, 
                    string replace_CrediarioContrato, 
                    string replace_CrediarioResumoContabil, 
                    string replace_CrediarioInadimplencia, 
                    string replace_CrediarioConfiguracao, 
                    string replace_menuBoletos, 
                    string replace_tableFiscal, 
                    string replace_precoIndividual, 
                    string replace_composto, 
                    string replace_movimentoEstoque, 
                    string replace_tipoPromocao, 
                    string replace_promocao, 
                    string replace_precoGrupo, 
                    string replace_rota, 
                    string replace_boletoBancario) {
            this.Invoke("AlterarConfiguracaoUsuarioAll", new object[] {
                        replace_idconfiguracao,
                        replace_idusuario,
                        replace_administradoraCartao,
                        replace_banco,
                        replace_caixa,
                        replace_cargo,
                        replace_cep,
                        replace_convenios,
                        replace_codicaoPgto,
                        replace_contaCorrente,
                        replace_complementoFiscal,
                        replace_cliente,
                        replace_escolaridade,
                        replace_feriados,
                        replace_finalizadoras,
                        replace_fornecedor,
                        replace_funcionario,
                        replace_loja,
                        replace_metodos,
                        replace_profissao,
                        replace_representante,
                        replace_telefone,
                        replace_terminal,
                        replace_transportadora,
                        replace_usuario,
                        replace_veiculo,
                        replace_produto,
                        replace_setor,
                        replace_grupo,
                        replace_categoria,
                        replace_compra,
                        replace_maximo,
                        replace_entrada,
                        replace_precificacao,
                        replace_transferencia,
                        replace_movimentacaoEstoque,
                        replace_saldoEstoque,
                        replace_zeraEstoque,
                        replace_operacaoEntrada,
                        replace_tipoProduto,
                        replace_trocaProduto,
                        replace_contasReceber,
                        replace_cartaoCredito,
                        replace_cheque,
                        replace_crediario,
                        replace_devolucao,
                        replace_caixaCadastro,
                        replace_sitegra,
                        replace_notaFiscal,
                        replace_sped,
                        replace_apuracaoImposto,
                        replace_mapaResumo,
                        replace_cfop,
                        replace_aliquotaFiscal,
                        replace_operacaoFaturamento,
                        replace_mataBurro,
                        replace_configuraNotaFiscal,
                        replace_processamento,
                        replace_tesouraria,
                        replace_cupomFiscal,
                        replace_controleReservas,
                        replace_analiseCredito,
                        replace_pdvSingle,
                        replace_contasPagar,
                        replace_trocaSenha,
                        replace_liberacao,
                        replace_cargas,
                        replace_interfacePdv,
                        replace_dre,
                        replace_fluxoCaixa,
                        replace_flashReserva,
                        replace_flashVenda,
                        replace_relatorios,
                        replace_chequeDevolvido,
                        replace_convenio,
                        replace_log,
                        replace_inclusao,
                        replace_alteracao,
                        replace_menuCadastro,
                        replace_menuProduto,
                        replace_menuFinanceiro,
                        replace_menuFiscal,
                        replace_menuFaturamento,
                        replace_menuPagar,
                        replace_menuUtilitario,
                        replace_menuContabil,
                        replace_menuVenda,
                        replace_menuRelatorio,
                        replace_inventario,
                        replace_estoqueRede,
                        replace_saldoCrediario,
                        replace_CrediarioContrato,
                        replace_CrediarioResumoContabil,
                        replace_CrediarioInadimplencia,
                        replace_CrediarioConfiguracao,
                        replace_menuBoletos,
                        replace_tableFiscal,
                        replace_precoIndividual,
                        replace_composto,
                        replace_movimentoEstoque,
                        replace_tipoPromocao,
                        replace_promocao,
                        replace_precoGrupo,
                        replace_rota,
                        replace_boletoBancario});
        }
        
        /// <remarks/>
        public void AlterarConfiguracaoUsuarioAllAsync(
                    string replace_idconfiguracao, 
                    string replace_idusuario, 
                    string replace_administradoraCartao, 
                    string replace_banco, 
                    string replace_caixa, 
                    string replace_cargo, 
                    string replace_cep, 
                    string replace_convenios, 
                    string replace_codicaoPgto, 
                    string replace_contaCorrente, 
                    string replace_complementoFiscal, 
                    string replace_cliente, 
                    string replace_escolaridade, 
                    string replace_feriados, 
                    string replace_finalizadoras, 
                    string replace_fornecedor, 
                    string replace_funcionario, 
                    string replace_loja, 
                    string replace_metodos, 
                    string replace_profissao, 
                    string replace_representante, 
                    string replace_telefone, 
                    string replace_terminal, 
                    string replace_transportadora, 
                    string replace_usuario, 
                    string replace_veiculo, 
                    string replace_produto, 
                    string replace_setor, 
                    string replace_grupo, 
                    string replace_categoria, 
                    string replace_compra, 
                    string replace_maximo, 
                    string replace_entrada, 
                    string replace_precificacao, 
                    string replace_transferencia, 
                    string replace_movimentacaoEstoque, 
                    string replace_saldoEstoque, 
                    string replace_zeraEstoque, 
                    string replace_operacaoEntrada, 
                    string replace_tipoProduto, 
                    string replace_trocaProduto, 
                    string replace_contasReceber, 
                    string replace_cartaoCredito, 
                    string replace_cheque, 
                    string replace_crediario, 
                    string replace_devolucao, 
                    string replace_caixaCadastro, 
                    string replace_sitegra, 
                    string replace_notaFiscal, 
                    string replace_sped, 
                    string replace_apuracaoImposto, 
                    string replace_mapaResumo, 
                    string replace_cfop, 
                    string replace_aliquotaFiscal, 
                    string replace_operacaoFaturamento, 
                    string replace_mataBurro, 
                    string replace_configuraNotaFiscal, 
                    string replace_processamento, 
                    string replace_tesouraria, 
                    string replace_cupomFiscal, 
                    string replace_controleReservas, 
                    string replace_analiseCredito, 
                    string replace_pdvSingle, 
                    string replace_contasPagar, 
                    string replace_trocaSenha, 
                    string replace_liberacao, 
                    string replace_cargas, 
                    string replace_interfacePdv, 
                    string replace_dre, 
                    string replace_fluxoCaixa, 
                    string replace_flashReserva, 
                    string replace_flashVenda, 
                    string replace_relatorios, 
                    string replace_chequeDevolvido, 
                    string replace_convenio, 
                    string replace_log, 
                    string replace_inclusao, 
                    string replace_alteracao, 
                    string replace_menuCadastro, 
                    string replace_menuProduto, 
                    string replace_menuFinanceiro, 
                    string replace_menuFiscal, 
                    string replace_menuFaturamento, 
                    string replace_menuPagar, 
                    string replace_menuUtilitario, 
                    string replace_menuContabil, 
                    string replace_menuVenda, 
                    string replace_menuRelatorio, 
                    string replace_inventario, 
                    string replace_estoqueRede, 
                    string replace_saldoCrediario, 
                    string replace_CrediarioContrato, 
                    string replace_CrediarioResumoContabil, 
                    string replace_CrediarioInadimplencia, 
                    string replace_CrediarioConfiguracao, 
                    string replace_menuBoletos, 
                    string replace_tableFiscal, 
                    string replace_precoIndividual, 
                    string replace_composto, 
                    string replace_movimentoEstoque, 
                    string replace_tipoPromocao, 
                    string replace_promocao, 
                    string replace_precoGrupo, 
                    string replace_rota, 
                    string replace_boletoBancario) {
            this.AlterarConfiguracaoUsuarioAllAsync(replace_idconfiguracao, replace_idusuario, replace_administradoraCartao, replace_banco, replace_caixa, replace_cargo, replace_cep, replace_convenios, replace_codicaoPgto, replace_contaCorrente, replace_complementoFiscal, replace_cliente, replace_escolaridade, replace_feriados, replace_finalizadoras, replace_fornecedor, replace_funcionario, replace_loja, replace_metodos, replace_profissao, replace_representante, replace_telefone, replace_terminal, replace_transportadora, replace_usuario, replace_veiculo, replace_produto, replace_setor, replace_grupo, replace_categoria, replace_compra, replace_maximo, replace_entrada, replace_precificacao, replace_transferencia, replace_movimentacaoEstoque, replace_saldoEstoque, replace_zeraEstoque, replace_operacaoEntrada, replace_tipoProduto, replace_trocaProduto, replace_contasReceber, replace_cartaoCredito, replace_cheque, replace_crediario, replace_devolucao, replace_caixaCadastro, replace_sitegra, replace_notaFiscal, replace_sped, replace_apuracaoImposto, replace_mapaResumo, replace_cfop, replace_aliquotaFiscal, replace_operacaoFaturamento, replace_mataBurro, replace_configuraNotaFiscal, replace_processamento, replace_tesouraria, replace_cupomFiscal, replace_controleReservas, replace_analiseCredito, replace_pdvSingle, replace_contasPagar, replace_trocaSenha, replace_liberacao, replace_cargas, replace_interfacePdv, replace_dre, replace_fluxoCaixa, replace_flashReserva, replace_flashVenda, replace_relatorios, replace_chequeDevolvido, replace_convenio, replace_log, replace_inclusao, replace_alteracao, replace_menuCadastro, replace_menuProduto, replace_menuFinanceiro, replace_menuFiscal, replace_menuFaturamento, replace_menuPagar, replace_menuUtilitario, replace_menuContabil, replace_menuVenda, replace_menuRelatorio, replace_inventario, replace_estoqueRede, replace_saldoCrediario, replace_CrediarioContrato, replace_CrediarioResumoContabil, replace_CrediarioInadimplencia, replace_CrediarioConfiguracao, replace_menuBoletos, replace_tableFiscal, replace_precoIndividual, replace_composto, replace_movimentoEstoque, replace_tipoPromocao, replace_promocao, replace_precoGrupo, replace_rota, replace_boletoBancario, null);
        }
        
        /// <remarks/>
        public void AlterarConfiguracaoUsuarioAllAsync(
                    string replace_idconfiguracao, 
                    string replace_idusuario, 
                    string replace_administradoraCartao, 
                    string replace_banco, 
                    string replace_caixa, 
                    string replace_cargo, 
                    string replace_cep, 
                    string replace_convenios, 
                    string replace_codicaoPgto, 
                    string replace_contaCorrente, 
                    string replace_complementoFiscal, 
                    string replace_cliente, 
                    string replace_escolaridade, 
                    string replace_feriados, 
                    string replace_finalizadoras, 
                    string replace_fornecedor, 
                    string replace_funcionario, 
                    string replace_loja, 
                    string replace_metodos, 
                    string replace_profissao, 
                    string replace_representante, 
                    string replace_telefone, 
                    string replace_terminal, 
                    string replace_transportadora, 
                    string replace_usuario, 
                    string replace_veiculo, 
                    string replace_produto, 
                    string replace_setor, 
                    string replace_grupo, 
                    string replace_categoria, 
                    string replace_compra, 
                    string replace_maximo, 
                    string replace_entrada, 
                    string replace_precificacao, 
                    string replace_transferencia, 
                    string replace_movimentacaoEstoque, 
                    string replace_saldoEstoque, 
                    string replace_zeraEstoque, 
                    string replace_operacaoEntrada, 
                    string replace_tipoProduto, 
                    string replace_trocaProduto, 
                    string replace_contasReceber, 
                    string replace_cartaoCredito, 
                    string replace_cheque, 
                    string replace_crediario, 
                    string replace_devolucao, 
                    string replace_caixaCadastro, 
                    string replace_sitegra, 
                    string replace_notaFiscal, 
                    string replace_sped, 
                    string replace_apuracaoImposto, 
                    string replace_mapaResumo, 
                    string replace_cfop, 
                    string replace_aliquotaFiscal, 
                    string replace_operacaoFaturamento, 
                    string replace_mataBurro, 
                    string replace_configuraNotaFiscal, 
                    string replace_processamento, 
                    string replace_tesouraria, 
                    string replace_cupomFiscal, 
                    string replace_controleReservas, 
                    string replace_analiseCredito, 
                    string replace_pdvSingle, 
                    string replace_contasPagar, 
                    string replace_trocaSenha, 
                    string replace_liberacao, 
                    string replace_cargas, 
                    string replace_interfacePdv, 
                    string replace_dre, 
                    string replace_fluxoCaixa, 
                    string replace_flashReserva, 
                    string replace_flashVenda, 
                    string replace_relatorios, 
                    string replace_chequeDevolvido, 
                    string replace_convenio, 
                    string replace_log, 
                    string replace_inclusao, 
                    string replace_alteracao, 
                    string replace_menuCadastro, 
                    string replace_menuProduto, 
                    string replace_menuFinanceiro, 
                    string replace_menuFiscal, 
                    string replace_menuFaturamento, 
                    string replace_menuPagar, 
                    string replace_menuUtilitario, 
                    string replace_menuContabil, 
                    string replace_menuVenda, 
                    string replace_menuRelatorio, 
                    string replace_inventario, 
                    string replace_estoqueRede, 
                    string replace_saldoCrediario, 
                    string replace_CrediarioContrato, 
                    string replace_CrediarioResumoContabil, 
                    string replace_CrediarioInadimplencia, 
                    string replace_CrediarioConfiguracao, 
                    string replace_menuBoletos, 
                    string replace_tableFiscal, 
                    string replace_precoIndividual, 
                    string replace_composto, 
                    string replace_movimentoEstoque, 
                    string replace_tipoPromocao, 
                    string replace_promocao, 
                    string replace_precoGrupo, 
                    string replace_rota, 
                    string replace_boletoBancario, 
                    object userState) {
            if ((this.AlterarConfiguracaoUsuarioAllOperationCompleted == null)) {
                this.AlterarConfiguracaoUsuarioAllOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAlterarConfiguracaoUsuarioAllOperationCompleted);
            }
            this.InvokeAsync("AlterarConfiguracaoUsuarioAll", new object[] {
                        replace_idconfiguracao,
                        replace_idusuario,
                        replace_administradoraCartao,
                        replace_banco,
                        replace_caixa,
                        replace_cargo,
                        replace_cep,
                        replace_convenios,
                        replace_codicaoPgto,
                        replace_contaCorrente,
                        replace_complementoFiscal,
                        replace_cliente,
                        replace_escolaridade,
                        replace_feriados,
                        replace_finalizadoras,
                        replace_fornecedor,
                        replace_funcionario,
                        replace_loja,
                        replace_metodos,
                        replace_profissao,
                        replace_representante,
                        replace_telefone,
                        replace_terminal,
                        replace_transportadora,
                        replace_usuario,
                        replace_veiculo,
                        replace_produto,
                        replace_setor,
                        replace_grupo,
                        replace_categoria,
                        replace_compra,
                        replace_maximo,
                        replace_entrada,
                        replace_precificacao,
                        replace_transferencia,
                        replace_movimentacaoEstoque,
                        replace_saldoEstoque,
                        replace_zeraEstoque,
                        replace_operacaoEntrada,
                        replace_tipoProduto,
                        replace_trocaProduto,
                        replace_contasReceber,
                        replace_cartaoCredito,
                        replace_cheque,
                        replace_crediario,
                        replace_devolucao,
                        replace_caixaCadastro,
                        replace_sitegra,
                        replace_notaFiscal,
                        replace_sped,
                        replace_apuracaoImposto,
                        replace_mapaResumo,
                        replace_cfop,
                        replace_aliquotaFiscal,
                        replace_operacaoFaturamento,
                        replace_mataBurro,
                        replace_configuraNotaFiscal,
                        replace_processamento,
                        replace_tesouraria,
                        replace_cupomFiscal,
                        replace_controleReservas,
                        replace_analiseCredito,
                        replace_pdvSingle,
                        replace_contasPagar,
                        replace_trocaSenha,
                        replace_liberacao,
                        replace_cargas,
                        replace_interfacePdv,
                        replace_dre,
                        replace_fluxoCaixa,
                        replace_flashReserva,
                        replace_flashVenda,
                        replace_relatorios,
                        replace_chequeDevolvido,
                        replace_convenio,
                        replace_log,
                        replace_inclusao,
                        replace_alteracao,
                        replace_menuCadastro,
                        replace_menuProduto,
                        replace_menuFinanceiro,
                        replace_menuFiscal,
                        replace_menuFaturamento,
                        replace_menuPagar,
                        replace_menuUtilitario,
                        replace_menuContabil,
                        replace_menuVenda,
                        replace_menuRelatorio,
                        replace_inventario,
                        replace_estoqueRede,
                        replace_saldoCrediario,
                        replace_CrediarioContrato,
                        replace_CrediarioResumoContabil,
                        replace_CrediarioInadimplencia,
                        replace_CrediarioConfiguracao,
                        replace_menuBoletos,
                        replace_tableFiscal,
                        replace_precoIndividual,
                        replace_composto,
                        replace_movimentoEstoque,
                        replace_tipoPromocao,
                        replace_promocao,
                        replace_precoGrupo,
                        replace_rota,
                        replace_boletoBancario}, this.AlterarConfiguracaoUsuarioAllOperationCompleted, userState);
        }
        
        private void OnAlterarConfiguracaoUsuarioAllOperationCompleted(object arg) {
            if ((this.AlterarConfiguracaoUsuarioAllCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.AlterarConfiguracaoUsuarioAllCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/InserirConfiguracaoUsuario", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void InserirConfiguracaoUsuario(
                    string auxidconfiguracao, 
                    string auxidusuario, 
                    string auxadministradoraCartao, 
                    string auxbanco, 
                    string auxcaixa, 
                    string auxcargo, 
                    string auxcep, 
                    string auxconvenios, 
                    string auxcodicaoPgto, 
                    string auxcontaCorrente, 
                    string auxcomplementoFiscal, 
                    string auxcliente, 
                    string auxescolaridade, 
                    string auxferiados, 
                    string auxfinalizadoras, 
                    string auxfornecedor, 
                    string auxfuncionario, 
                    string auxloja, 
                    string auxmetodos, 
                    string auxprofissao, 
                    string auxrepresentante, 
                    string auxtelefone, 
                    string auxterminal, 
                    string auxtransportadora, 
                    string auxusuario, 
                    string auxveiculo, 
                    string auxproduto, 
                    string auxsetor, 
                    string auxgrupo, 
                    string auxcategoria, 
                    string auxcompra, 
                    string auxmaximo, 
                    string auxentrada, 
                    string auxprecificacao, 
                    string auxtransferencia, 
                    string auxmovimentacaoEstoque, 
                    string auxsaldoEstoque, 
                    string auxzeraEstoque, 
                    string auxoperacaoEntrada, 
                    string auxtipoProduto, 
                    string auxtrocaProduto, 
                    string auxcontasReceber, 
                    string auxcartaoCredito, 
                    string auxcheque, 
                    string auxcrediario, 
                    string auxdevolucao, 
                    string auxcaixaCadastro, 
                    string auxsitegra, 
                    string auxnotaFiscal, 
                    string auxsped, 
                    string auxapuracaoImposto, 
                    string auxmapaResumo, 
                    string auxcfop, 
                    string auxaliquotaFiscal, 
                    string auxoperacaoFaturamento, 
                    string auxmataBurro, 
                    string auxconfiguraNotaFiscal, 
                    string auxprocessamento, 
                    string auxtesouraria, 
                    string auxcupomFiscal, 
                    string auxcontroleReservas, 
                    string auxanaliseCredito, 
                    string auxpdvSingle, 
                    string auxcontasPagar, 
                    string auxtrocaSenha, 
                    string auxliberacao, 
                    string auxcargas, 
                    string auxinterfacePdv, 
                    string auxdre, 
                    string auxfluxoCaixa, 
                    string auxflashReserva, 
                    string auxflashVenda, 
                    string auxrelatorios, 
                    string auxchequeDevolvido, 
                    string auxconvenio, 
                    string auxlog, 
                    string auxinclusao, 
                    string auxalteracao, 
                    string auxmenuCadastro, 
                    string auxmenuProduto, 
                    string auxmenuFinanceiro, 
                    string auxmenuFiscal, 
                    string auxmenuFaturamento, 
                    string auxmenuPagar, 
                    string auxmenuUtilitario, 
                    string auxmenuContabil, 
                    string auxmenuVenda, 
                    string auxmenuRelatorio, 
                    string auxinventario, 
                    string auxestoqueRede, 
                    string auxsaldoCrediario, 
                    string auxCrediarioContrato, 
                    string auxCrediarioResumoContabil, 
                    string auxCrediarioInadimplencia, 
                    string auxCrediarioConfiguracao, 
                    string auxmenuBoletos, 
                    string auxtableFiscal, 
                    string auxprecoIndividual, 
                    string auxcomposto, 
                    string auxmovimentoEstoque, 
                    string auxtipoPromocao, 
                    string auxpromocao, 
                    string auxprecoGrupo, 
                    string auxrota, 
                    string auxboletoBancario) {
            this.Invoke("InserirConfiguracaoUsuario", new object[] {
                        auxidconfiguracao,
                        auxidusuario,
                        auxadministradoraCartao,
                        auxbanco,
                        auxcaixa,
                        auxcargo,
                        auxcep,
                        auxconvenios,
                        auxcodicaoPgto,
                        auxcontaCorrente,
                        auxcomplementoFiscal,
                        auxcliente,
                        auxescolaridade,
                        auxferiados,
                        auxfinalizadoras,
                        auxfornecedor,
                        auxfuncionario,
                        auxloja,
                        auxmetodos,
                        auxprofissao,
                        auxrepresentante,
                        auxtelefone,
                        auxterminal,
                        auxtransportadora,
                        auxusuario,
                        auxveiculo,
                        auxproduto,
                        auxsetor,
                        auxgrupo,
                        auxcategoria,
                        auxcompra,
                        auxmaximo,
                        auxentrada,
                        auxprecificacao,
                        auxtransferencia,
                        auxmovimentacaoEstoque,
                        auxsaldoEstoque,
                        auxzeraEstoque,
                        auxoperacaoEntrada,
                        auxtipoProduto,
                        auxtrocaProduto,
                        auxcontasReceber,
                        auxcartaoCredito,
                        auxcheque,
                        auxcrediario,
                        auxdevolucao,
                        auxcaixaCadastro,
                        auxsitegra,
                        auxnotaFiscal,
                        auxsped,
                        auxapuracaoImposto,
                        auxmapaResumo,
                        auxcfop,
                        auxaliquotaFiscal,
                        auxoperacaoFaturamento,
                        auxmataBurro,
                        auxconfiguraNotaFiscal,
                        auxprocessamento,
                        auxtesouraria,
                        auxcupomFiscal,
                        auxcontroleReservas,
                        auxanaliseCredito,
                        auxpdvSingle,
                        auxcontasPagar,
                        auxtrocaSenha,
                        auxliberacao,
                        auxcargas,
                        auxinterfacePdv,
                        auxdre,
                        auxfluxoCaixa,
                        auxflashReserva,
                        auxflashVenda,
                        auxrelatorios,
                        auxchequeDevolvido,
                        auxconvenio,
                        auxlog,
                        auxinclusao,
                        auxalteracao,
                        auxmenuCadastro,
                        auxmenuProduto,
                        auxmenuFinanceiro,
                        auxmenuFiscal,
                        auxmenuFaturamento,
                        auxmenuPagar,
                        auxmenuUtilitario,
                        auxmenuContabil,
                        auxmenuVenda,
                        auxmenuRelatorio,
                        auxinventario,
                        auxestoqueRede,
                        auxsaldoCrediario,
                        auxCrediarioContrato,
                        auxCrediarioResumoContabil,
                        auxCrediarioInadimplencia,
                        auxCrediarioConfiguracao,
                        auxmenuBoletos,
                        auxtableFiscal,
                        auxprecoIndividual,
                        auxcomposto,
                        auxmovimentoEstoque,
                        auxtipoPromocao,
                        auxpromocao,
                        auxprecoGrupo,
                        auxrota,
                        auxboletoBancario});
        }
        
        /// <remarks/>
        public void InserirConfiguracaoUsuarioAsync(
                    string auxidconfiguracao, 
                    string auxidusuario, 
                    string auxadministradoraCartao, 
                    string auxbanco, 
                    string auxcaixa, 
                    string auxcargo, 
                    string auxcep, 
                    string auxconvenios, 
                    string auxcodicaoPgto, 
                    string auxcontaCorrente, 
                    string auxcomplementoFiscal, 
                    string auxcliente, 
                    string auxescolaridade, 
                    string auxferiados, 
                    string auxfinalizadoras, 
                    string auxfornecedor, 
                    string auxfuncionario, 
                    string auxloja, 
                    string auxmetodos, 
                    string auxprofissao, 
                    string auxrepresentante, 
                    string auxtelefone, 
                    string auxterminal, 
                    string auxtransportadora, 
                    string auxusuario, 
                    string auxveiculo, 
                    string auxproduto, 
                    string auxsetor, 
                    string auxgrupo, 
                    string auxcategoria, 
                    string auxcompra, 
                    string auxmaximo, 
                    string auxentrada, 
                    string auxprecificacao, 
                    string auxtransferencia, 
                    string auxmovimentacaoEstoque, 
                    string auxsaldoEstoque, 
                    string auxzeraEstoque, 
                    string auxoperacaoEntrada, 
                    string auxtipoProduto, 
                    string auxtrocaProduto, 
                    string auxcontasReceber, 
                    string auxcartaoCredito, 
                    string auxcheque, 
                    string auxcrediario, 
                    string auxdevolucao, 
                    string auxcaixaCadastro, 
                    string auxsitegra, 
                    string auxnotaFiscal, 
                    string auxsped, 
                    string auxapuracaoImposto, 
                    string auxmapaResumo, 
                    string auxcfop, 
                    string auxaliquotaFiscal, 
                    string auxoperacaoFaturamento, 
                    string auxmataBurro, 
                    string auxconfiguraNotaFiscal, 
                    string auxprocessamento, 
                    string auxtesouraria, 
                    string auxcupomFiscal, 
                    string auxcontroleReservas, 
                    string auxanaliseCredito, 
                    string auxpdvSingle, 
                    string auxcontasPagar, 
                    string auxtrocaSenha, 
                    string auxliberacao, 
                    string auxcargas, 
                    string auxinterfacePdv, 
                    string auxdre, 
                    string auxfluxoCaixa, 
                    string auxflashReserva, 
                    string auxflashVenda, 
                    string auxrelatorios, 
                    string auxchequeDevolvido, 
                    string auxconvenio, 
                    string auxlog, 
                    string auxinclusao, 
                    string auxalteracao, 
                    string auxmenuCadastro, 
                    string auxmenuProduto, 
                    string auxmenuFinanceiro, 
                    string auxmenuFiscal, 
                    string auxmenuFaturamento, 
                    string auxmenuPagar, 
                    string auxmenuUtilitario, 
                    string auxmenuContabil, 
                    string auxmenuVenda, 
                    string auxmenuRelatorio, 
                    string auxinventario, 
                    string auxestoqueRede, 
                    string auxsaldoCrediario, 
                    string auxCrediarioContrato, 
                    string auxCrediarioResumoContabil, 
                    string auxCrediarioInadimplencia, 
                    string auxCrediarioConfiguracao, 
                    string auxmenuBoletos, 
                    string auxtableFiscal, 
                    string auxprecoIndividual, 
                    string auxcomposto, 
                    string auxmovimentoEstoque, 
                    string auxtipoPromocao, 
                    string auxpromocao, 
                    string auxprecoGrupo, 
                    string auxrota, 
                    string auxboletoBancario) {
            this.InserirConfiguracaoUsuarioAsync(auxidconfiguracao, auxidusuario, auxadministradoraCartao, auxbanco, auxcaixa, auxcargo, auxcep, auxconvenios, auxcodicaoPgto, auxcontaCorrente, auxcomplementoFiscal, auxcliente, auxescolaridade, auxferiados, auxfinalizadoras, auxfornecedor, auxfuncionario, auxloja, auxmetodos, auxprofissao, auxrepresentante, auxtelefone, auxterminal, auxtransportadora, auxusuario, auxveiculo, auxproduto, auxsetor, auxgrupo, auxcategoria, auxcompra, auxmaximo, auxentrada, auxprecificacao, auxtransferencia, auxmovimentacaoEstoque, auxsaldoEstoque, auxzeraEstoque, auxoperacaoEntrada, auxtipoProduto, auxtrocaProduto, auxcontasReceber, auxcartaoCredito, auxcheque, auxcrediario, auxdevolucao, auxcaixaCadastro, auxsitegra, auxnotaFiscal, auxsped, auxapuracaoImposto, auxmapaResumo, auxcfop, auxaliquotaFiscal, auxoperacaoFaturamento, auxmataBurro, auxconfiguraNotaFiscal, auxprocessamento, auxtesouraria, auxcupomFiscal, auxcontroleReservas, auxanaliseCredito, auxpdvSingle, auxcontasPagar, auxtrocaSenha, auxliberacao, auxcargas, auxinterfacePdv, auxdre, auxfluxoCaixa, auxflashReserva, auxflashVenda, auxrelatorios, auxchequeDevolvido, auxconvenio, auxlog, auxinclusao, auxalteracao, auxmenuCadastro, auxmenuProduto, auxmenuFinanceiro, auxmenuFiscal, auxmenuFaturamento, auxmenuPagar, auxmenuUtilitario, auxmenuContabil, auxmenuVenda, auxmenuRelatorio, auxinventario, auxestoqueRede, auxsaldoCrediario, auxCrediarioContrato, auxCrediarioResumoContabil, auxCrediarioInadimplencia, auxCrediarioConfiguracao, auxmenuBoletos, auxtableFiscal, auxprecoIndividual, auxcomposto, auxmovimentoEstoque, auxtipoPromocao, auxpromocao, auxprecoGrupo, auxrota, auxboletoBancario, null);
        }
        
        /// <remarks/>
        public void InserirConfiguracaoUsuarioAsync(
                    string auxidconfiguracao, 
                    string auxidusuario, 
                    string auxadministradoraCartao, 
                    string auxbanco, 
                    string auxcaixa, 
                    string auxcargo, 
                    string auxcep, 
                    string auxconvenios, 
                    string auxcodicaoPgto, 
                    string auxcontaCorrente, 
                    string auxcomplementoFiscal, 
                    string auxcliente, 
                    string auxescolaridade, 
                    string auxferiados, 
                    string auxfinalizadoras, 
                    string auxfornecedor, 
                    string auxfuncionario, 
                    string auxloja, 
                    string auxmetodos, 
                    string auxprofissao, 
                    string auxrepresentante, 
                    string auxtelefone, 
                    string auxterminal, 
                    string auxtransportadora, 
                    string auxusuario, 
                    string auxveiculo, 
                    string auxproduto, 
                    string auxsetor, 
                    string auxgrupo, 
                    string auxcategoria, 
                    string auxcompra, 
                    string auxmaximo, 
                    string auxentrada, 
                    string auxprecificacao, 
                    string auxtransferencia, 
                    string auxmovimentacaoEstoque, 
                    string auxsaldoEstoque, 
                    string auxzeraEstoque, 
                    string auxoperacaoEntrada, 
                    string auxtipoProduto, 
                    string auxtrocaProduto, 
                    string auxcontasReceber, 
                    string auxcartaoCredito, 
                    string auxcheque, 
                    string auxcrediario, 
                    string auxdevolucao, 
                    string auxcaixaCadastro, 
                    string auxsitegra, 
                    string auxnotaFiscal, 
                    string auxsped, 
                    string auxapuracaoImposto, 
                    string auxmapaResumo, 
                    string auxcfop, 
                    string auxaliquotaFiscal, 
                    string auxoperacaoFaturamento, 
                    string auxmataBurro, 
                    string auxconfiguraNotaFiscal, 
                    string auxprocessamento, 
                    string auxtesouraria, 
                    string auxcupomFiscal, 
                    string auxcontroleReservas, 
                    string auxanaliseCredito, 
                    string auxpdvSingle, 
                    string auxcontasPagar, 
                    string auxtrocaSenha, 
                    string auxliberacao, 
                    string auxcargas, 
                    string auxinterfacePdv, 
                    string auxdre, 
                    string auxfluxoCaixa, 
                    string auxflashReserva, 
                    string auxflashVenda, 
                    string auxrelatorios, 
                    string auxchequeDevolvido, 
                    string auxconvenio, 
                    string auxlog, 
                    string auxinclusao, 
                    string auxalteracao, 
                    string auxmenuCadastro, 
                    string auxmenuProduto, 
                    string auxmenuFinanceiro, 
                    string auxmenuFiscal, 
                    string auxmenuFaturamento, 
                    string auxmenuPagar, 
                    string auxmenuUtilitario, 
                    string auxmenuContabil, 
                    string auxmenuVenda, 
                    string auxmenuRelatorio, 
                    string auxinventario, 
                    string auxestoqueRede, 
                    string auxsaldoCrediario, 
                    string auxCrediarioContrato, 
                    string auxCrediarioResumoContabil, 
                    string auxCrediarioInadimplencia, 
                    string auxCrediarioConfiguracao, 
                    string auxmenuBoletos, 
                    string auxtableFiscal, 
                    string auxprecoIndividual, 
                    string auxcomposto, 
                    string auxmovimentoEstoque, 
                    string auxtipoPromocao, 
                    string auxpromocao, 
                    string auxprecoGrupo, 
                    string auxrota, 
                    string auxboletoBancario, 
                    object userState) {
            if ((this.InserirConfiguracaoUsuarioOperationCompleted == null)) {
                this.InserirConfiguracaoUsuarioOperationCompleted = new System.Threading.SendOrPostCallback(this.OnInserirConfiguracaoUsuarioOperationCompleted);
            }
            this.InvokeAsync("InserirConfiguracaoUsuario", new object[] {
                        auxidconfiguracao,
                        auxidusuario,
                        auxadministradoraCartao,
                        auxbanco,
                        auxcaixa,
                        auxcargo,
                        auxcep,
                        auxconvenios,
                        auxcodicaoPgto,
                        auxcontaCorrente,
                        auxcomplementoFiscal,
                        auxcliente,
                        auxescolaridade,
                        auxferiados,
                        auxfinalizadoras,
                        auxfornecedor,
                        auxfuncionario,
                        auxloja,
                        auxmetodos,
                        auxprofissao,
                        auxrepresentante,
                        auxtelefone,
                        auxterminal,
                        auxtransportadora,
                        auxusuario,
                        auxveiculo,
                        auxproduto,
                        auxsetor,
                        auxgrupo,
                        auxcategoria,
                        auxcompra,
                        auxmaximo,
                        auxentrada,
                        auxprecificacao,
                        auxtransferencia,
                        auxmovimentacaoEstoque,
                        auxsaldoEstoque,
                        auxzeraEstoque,
                        auxoperacaoEntrada,
                        auxtipoProduto,
                        auxtrocaProduto,
                        auxcontasReceber,
                        auxcartaoCredito,
                        auxcheque,
                        auxcrediario,
                        auxdevolucao,
                        auxcaixaCadastro,
                        auxsitegra,
                        auxnotaFiscal,
                        auxsped,
                        auxapuracaoImposto,
                        auxmapaResumo,
                        auxcfop,
                        auxaliquotaFiscal,
                        auxoperacaoFaturamento,
                        auxmataBurro,
                        auxconfiguraNotaFiscal,
                        auxprocessamento,
                        auxtesouraria,
                        auxcupomFiscal,
                        auxcontroleReservas,
                        auxanaliseCredito,
                        auxpdvSingle,
                        auxcontasPagar,
                        auxtrocaSenha,
                        auxliberacao,
                        auxcargas,
                        auxinterfacePdv,
                        auxdre,
                        auxfluxoCaixa,
                        auxflashReserva,
                        auxflashVenda,
                        auxrelatorios,
                        auxchequeDevolvido,
                        auxconvenio,
                        auxlog,
                        auxinclusao,
                        auxalteracao,
                        auxmenuCadastro,
                        auxmenuProduto,
                        auxmenuFinanceiro,
                        auxmenuFiscal,
                        auxmenuFaturamento,
                        auxmenuPagar,
                        auxmenuUtilitario,
                        auxmenuContabil,
                        auxmenuVenda,
                        auxmenuRelatorio,
                        auxinventario,
                        auxestoqueRede,
                        auxsaldoCrediario,
                        auxCrediarioContrato,
                        auxCrediarioResumoContabil,
                        auxCrediarioInadimplencia,
                        auxCrediarioConfiguracao,
                        auxmenuBoletos,
                        auxtableFiscal,
                        auxprecoIndividual,
                        auxcomposto,
                        auxmovimentoEstoque,
                        auxtipoPromocao,
                        auxpromocao,
                        auxprecoGrupo,
                        auxrota,
                        auxboletoBancario}, this.InserirConfiguracaoUsuarioOperationCompleted, userState);
        }
        
        private void OnInserirConfiguracaoUsuarioOperationCompleted(object arg) {
            if ((this.InserirConfiguracaoUsuarioCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.InserirConfiguracaoUsuarioCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/InserirFuncionario", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int InserirFuncionario(
                    string replace_idfuncionario, 
                    string replace_nome, 
                    string replace_apelido, 
                    string replace_nascimento, 
                    string replace_idloja, 
                    string replace_idfuncao, 
                    string replace_passwd, 
                    string replace_idcivil, 
                    string replace_idsexo, 
                    string replace_inclusao, 
                    string replace_comissaoAvista, 
                    string replace_comissaoAprazo, 
                    string replace_cpf, 
                    string replace_identidade, 
                    string replace_email, 
                    string replace_pis, 
                    string replace_idusuario, 
                    string replace_admissao, 
                    string replace_demissao, 
                    string replace_carteira, 
                    string replace_obs, 
                    string replace_idPremiacao, 
                    string replace_idMetaVenda, 
                    string replace_idprofissao, 
                    string replace_idEscolaridade, 
                    string replace_status, 
                    string replace_acessoFiscal, 
                    string replace_acessoMenuFiscal, 
                    string replace_crc, 
                    string replace_contador_cnpj) {
            object[] results = this.Invoke("InserirFuncionario", new object[] {
                        replace_idfuncionario,
                        replace_nome,
                        replace_apelido,
                        replace_nascimento,
                        replace_idloja,
                        replace_idfuncao,
                        replace_passwd,
                        replace_idcivil,
                        replace_idsexo,
                        replace_inclusao,
                        replace_comissaoAvista,
                        replace_comissaoAprazo,
                        replace_cpf,
                        replace_identidade,
                        replace_email,
                        replace_pis,
                        replace_idusuario,
                        replace_admissao,
                        replace_demissao,
                        replace_carteira,
                        replace_obs,
                        replace_idPremiacao,
                        replace_idMetaVenda,
                        replace_idprofissao,
                        replace_idEscolaridade,
                        replace_status,
                        replace_acessoFiscal,
                        replace_acessoMenuFiscal,
                        replace_crc,
                        replace_contador_cnpj});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void InserirFuncionarioAsync(
                    string replace_idfuncionario, 
                    string replace_nome, 
                    string replace_apelido, 
                    string replace_nascimento, 
                    string replace_idloja, 
                    string replace_idfuncao, 
                    string replace_passwd, 
                    string replace_idcivil, 
                    string replace_idsexo, 
                    string replace_inclusao, 
                    string replace_comissaoAvista, 
                    string replace_comissaoAprazo, 
                    string replace_cpf, 
                    string replace_identidade, 
                    string replace_email, 
                    string replace_pis, 
                    string replace_idusuario, 
                    string replace_admissao, 
                    string replace_demissao, 
                    string replace_carteira, 
                    string replace_obs, 
                    string replace_idPremiacao, 
                    string replace_idMetaVenda, 
                    string replace_idprofissao, 
                    string replace_idEscolaridade, 
                    string replace_status, 
                    string replace_acessoFiscal, 
                    string replace_acessoMenuFiscal, 
                    string replace_crc, 
                    string replace_contador_cnpj) {
            this.InserirFuncionarioAsync(replace_idfuncionario, replace_nome, replace_apelido, replace_nascimento, replace_idloja, replace_idfuncao, replace_passwd, replace_idcivil, replace_idsexo, replace_inclusao, replace_comissaoAvista, replace_comissaoAprazo, replace_cpf, replace_identidade, replace_email, replace_pis, replace_idusuario, replace_admissao, replace_demissao, replace_carteira, replace_obs, replace_idPremiacao, replace_idMetaVenda, replace_idprofissao, replace_idEscolaridade, replace_status, replace_acessoFiscal, replace_acessoMenuFiscal, replace_crc, replace_contador_cnpj, null);
        }
        
        /// <remarks/>
        public void InserirFuncionarioAsync(
                    string replace_idfuncionario, 
                    string replace_nome, 
                    string replace_apelido, 
                    string replace_nascimento, 
                    string replace_idloja, 
                    string replace_idfuncao, 
                    string replace_passwd, 
                    string replace_idcivil, 
                    string replace_idsexo, 
                    string replace_inclusao, 
                    string replace_comissaoAvista, 
                    string replace_comissaoAprazo, 
                    string replace_cpf, 
                    string replace_identidade, 
                    string replace_email, 
                    string replace_pis, 
                    string replace_idusuario, 
                    string replace_admissao, 
                    string replace_demissao, 
                    string replace_carteira, 
                    string replace_obs, 
                    string replace_idPremiacao, 
                    string replace_idMetaVenda, 
                    string replace_idprofissao, 
                    string replace_idEscolaridade, 
                    string replace_status, 
                    string replace_acessoFiscal, 
                    string replace_acessoMenuFiscal, 
                    string replace_crc, 
                    string replace_contador_cnpj, 
                    object userState) {
            if ((this.InserirFuncionarioOperationCompleted == null)) {
                this.InserirFuncionarioOperationCompleted = new System.Threading.SendOrPostCallback(this.OnInserirFuncionarioOperationCompleted);
            }
            this.InvokeAsync("InserirFuncionario", new object[] {
                        replace_idfuncionario,
                        replace_nome,
                        replace_apelido,
                        replace_nascimento,
                        replace_idloja,
                        replace_idfuncao,
                        replace_passwd,
                        replace_idcivil,
                        replace_idsexo,
                        replace_inclusao,
                        replace_comissaoAvista,
                        replace_comissaoAprazo,
                        replace_cpf,
                        replace_identidade,
                        replace_email,
                        replace_pis,
                        replace_idusuario,
                        replace_admissao,
                        replace_demissao,
                        replace_carteira,
                        replace_obs,
                        replace_idPremiacao,
                        replace_idMetaVenda,
                        replace_idprofissao,
                        replace_idEscolaridade,
                        replace_status,
                        replace_acessoFiscal,
                        replace_acessoMenuFiscal,
                        replace_crc,
                        replace_contador_cnpj}, this.InserirFuncionarioOperationCompleted, userState);
        }
        
        private void OnInserirFuncionarioOperationCompleted(object arg) {
            if ((this.InserirFuncionarioCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.InserirFuncionarioCompleted(this, new InserirFuncionarioCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/AlterarFuncionario", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void AlterarFuncionario(
                    string auxidfuncionario, 
                    string auxnome, 
                    string auxapelido, 
                    string auxnascimento, 
                    string auxidloja, 
                    string auxidfuncao, 
                    string auxpasswd, 
                    string auxidcivil, 
                    string auxidsexo, 
                    string auxinclusao, 
                    string auxcomissaoAvista, 
                    string auxcomissaoAprazo, 
                    string auxcpf, 
                    string auxidentidade, 
                    string auxemail, 
                    string auxpis, 
                    string auxidusuario, 
                    string auxAdmissao, 
                    string auxdemissao, 
                    string auxcarteira, 
                    string auxobservacao, 
                    string auxidPremiacao, 
                    string auxidMetaVenda, 
                    string auxidprofissao, 
                    string auxidEscolaridade, 
                    string auxstatus, 
                    string auxacessoFiscal, 
                    string auxacessoMenuFiscal, 
                    string auxcrc, 
                    string auxcontador_cnpj, 
                    string CnpjFuncionario, 
                    string dataNascimento, 
                    string inclusaoFuncionario, 
                    string admissaoFuncionario, 
                    string auxidendereco, 
                    string auxCep, 
                    string idcepBairro, 
                    string bairro, 
                    string complemento, 
                    string municipio, 
                    string estado, 
                    string numero, 
                    string logradouro) {
            this.Invoke("AlterarFuncionario", new object[] {
                        auxidfuncionario,
                        auxnome,
                        auxapelido,
                        auxnascimento,
                        auxidloja,
                        auxidfuncao,
                        auxpasswd,
                        auxidcivil,
                        auxidsexo,
                        auxinclusao,
                        auxcomissaoAvista,
                        auxcomissaoAprazo,
                        auxcpf,
                        auxidentidade,
                        auxemail,
                        auxpis,
                        auxidusuario,
                        auxAdmissao,
                        auxdemissao,
                        auxcarteira,
                        auxobservacao,
                        auxidPremiacao,
                        auxidMetaVenda,
                        auxidprofissao,
                        auxidEscolaridade,
                        auxstatus,
                        auxacessoFiscal,
                        auxacessoMenuFiscal,
                        auxcrc,
                        auxcontador_cnpj,
                        CnpjFuncionario,
                        dataNascimento,
                        inclusaoFuncionario,
                        admissaoFuncionario,
                        auxidendereco,
                        auxCep,
                        idcepBairro,
                        bairro,
                        complemento,
                        municipio,
                        estado,
                        numero,
                        logradouro});
        }
        
        /// <remarks/>
        public void AlterarFuncionarioAsync(
                    string auxidfuncionario, 
                    string auxnome, 
                    string auxapelido, 
                    string auxnascimento, 
                    string auxidloja, 
                    string auxidfuncao, 
                    string auxpasswd, 
                    string auxidcivil, 
                    string auxidsexo, 
                    string auxinclusao, 
                    string auxcomissaoAvista, 
                    string auxcomissaoAprazo, 
                    string auxcpf, 
                    string auxidentidade, 
                    string auxemail, 
                    string auxpis, 
                    string auxidusuario, 
                    string auxAdmissao, 
                    string auxdemissao, 
                    string auxcarteira, 
                    string auxobservacao, 
                    string auxidPremiacao, 
                    string auxidMetaVenda, 
                    string auxidprofissao, 
                    string auxidEscolaridade, 
                    string auxstatus, 
                    string auxacessoFiscal, 
                    string auxacessoMenuFiscal, 
                    string auxcrc, 
                    string auxcontador_cnpj, 
                    string CnpjFuncionario, 
                    string dataNascimento, 
                    string inclusaoFuncionario, 
                    string admissaoFuncionario, 
                    string auxidendereco, 
                    string auxCep, 
                    string idcepBairro, 
                    string bairro, 
                    string complemento, 
                    string municipio, 
                    string estado, 
                    string numero, 
                    string logradouro) {
            this.AlterarFuncionarioAsync(auxidfuncionario, auxnome, auxapelido, auxnascimento, auxidloja, auxidfuncao, auxpasswd, auxidcivil, auxidsexo, auxinclusao, auxcomissaoAvista, auxcomissaoAprazo, auxcpf, auxidentidade, auxemail, auxpis, auxidusuario, auxAdmissao, auxdemissao, auxcarteira, auxobservacao, auxidPremiacao, auxidMetaVenda, auxidprofissao, auxidEscolaridade, auxstatus, auxacessoFiscal, auxacessoMenuFiscal, auxcrc, auxcontador_cnpj, CnpjFuncionario, dataNascimento, inclusaoFuncionario, admissaoFuncionario, auxidendereco, auxCep, idcepBairro, bairro, complemento, municipio, estado, numero, logradouro, null);
        }
        
        /// <remarks/>
        public void AlterarFuncionarioAsync(
                    string auxidfuncionario, 
                    string auxnome, 
                    string auxapelido, 
                    string auxnascimento, 
                    string auxidloja, 
                    string auxidfuncao, 
                    string auxpasswd, 
                    string auxidcivil, 
                    string auxidsexo, 
                    string auxinclusao, 
                    string auxcomissaoAvista, 
                    string auxcomissaoAprazo, 
                    string auxcpf, 
                    string auxidentidade, 
                    string auxemail, 
                    string auxpis, 
                    string auxidusuario, 
                    string auxAdmissao, 
                    string auxdemissao, 
                    string auxcarteira, 
                    string auxobservacao, 
                    string auxidPremiacao, 
                    string auxidMetaVenda, 
                    string auxidprofissao, 
                    string auxidEscolaridade, 
                    string auxstatus, 
                    string auxacessoFiscal, 
                    string auxacessoMenuFiscal, 
                    string auxcrc, 
                    string auxcontador_cnpj, 
                    string CnpjFuncionario, 
                    string dataNascimento, 
                    string inclusaoFuncionario, 
                    string admissaoFuncionario, 
                    string auxidendereco, 
                    string auxCep, 
                    string idcepBairro, 
                    string bairro, 
                    string complemento, 
                    string municipio, 
                    string estado, 
                    string numero, 
                    string logradouro, 
                    object userState) {
            if ((this.AlterarFuncionarioOperationCompleted == null)) {
                this.AlterarFuncionarioOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAlterarFuncionarioOperationCompleted);
            }
            this.InvokeAsync("AlterarFuncionario", new object[] {
                        auxidfuncionario,
                        auxnome,
                        auxapelido,
                        auxnascimento,
                        auxidloja,
                        auxidfuncao,
                        auxpasswd,
                        auxidcivil,
                        auxidsexo,
                        auxinclusao,
                        auxcomissaoAvista,
                        auxcomissaoAprazo,
                        auxcpf,
                        auxidentidade,
                        auxemail,
                        auxpis,
                        auxidusuario,
                        auxAdmissao,
                        auxdemissao,
                        auxcarteira,
                        auxobservacao,
                        auxidPremiacao,
                        auxidMetaVenda,
                        auxidprofissao,
                        auxidEscolaridade,
                        auxstatus,
                        auxacessoFiscal,
                        auxacessoMenuFiscal,
                        auxcrc,
                        auxcontador_cnpj,
                        CnpjFuncionario,
                        dataNascimento,
                        inclusaoFuncionario,
                        admissaoFuncionario,
                        auxidendereco,
                        auxCep,
                        idcepBairro,
                        bairro,
                        complemento,
                        municipio,
                        estado,
                        numero,
                        logradouro}, this.AlterarFuncionarioOperationCompleted, userState);
        }
        
        private void OnAlterarFuncionarioOperationCompleted(object arg) {
            if ((this.AlterarFuncionarioCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.AlterarFuncionarioCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/InserirTerminal", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int InserirTerminal(string replace_idterminal, string replace_idloja, string replace_idtypeTerminal, string replace_descricao, string replace_flagDesconto, string replace_status, string replace_operacao, string replace_multiTarefa) {
            object[] results = this.Invoke("InserirTerminal", new object[] {
                        replace_idterminal,
                        replace_idloja,
                        replace_idtypeTerminal,
                        replace_descricao,
                        replace_flagDesconto,
                        replace_status,
                        replace_operacao,
                        replace_multiTarefa});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void InserirTerminalAsync(string replace_idterminal, string replace_idloja, string replace_idtypeTerminal, string replace_descricao, string replace_flagDesconto, string replace_status, string replace_operacao, string replace_multiTarefa) {
            this.InserirTerminalAsync(replace_idterminal, replace_idloja, replace_idtypeTerminal, replace_descricao, replace_flagDesconto, replace_status, replace_operacao, replace_multiTarefa, null);
        }
        
        /// <remarks/>
        public void InserirTerminalAsync(string replace_idterminal, string replace_idloja, string replace_idtypeTerminal, string replace_descricao, string replace_flagDesconto, string replace_status, string replace_operacao, string replace_multiTarefa, object userState) {
            if ((this.InserirTerminalOperationCompleted == null)) {
                this.InserirTerminalOperationCompleted = new System.Threading.SendOrPostCallback(this.OnInserirTerminalOperationCompleted);
            }
            this.InvokeAsync("InserirTerminal", new object[] {
                        replace_idterminal,
                        replace_idloja,
                        replace_idtypeTerminal,
                        replace_descricao,
                        replace_flagDesconto,
                        replace_status,
                        replace_operacao,
                        replace_multiTarefa}, this.InserirTerminalOperationCompleted, userState);
        }
        
        private void OnInserirTerminalOperationCompleted(object arg) {
            if ((this.InserirTerminalCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.InserirTerminalCompleted(this, new InserirTerminalCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/InserirCep", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int InserirCep(string replace_idcepbairro, string replace_cep, string replace_idcepCity, string replace_idestado, string replace_bairro, string replace_logradouro, string replace_complemento, string replace_uf) {
            object[] results = this.Invoke("InserirCep", new object[] {
                        replace_idcepbairro,
                        replace_cep,
                        replace_idcepCity,
                        replace_idestado,
                        replace_bairro,
                        replace_logradouro,
                        replace_complemento,
                        replace_uf});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void InserirCepAsync(string replace_idcepbairro, string replace_cep, string replace_idcepCity, string replace_idestado, string replace_bairro, string replace_logradouro, string replace_complemento, string replace_uf) {
            this.InserirCepAsync(replace_idcepbairro, replace_cep, replace_idcepCity, replace_idestado, replace_bairro, replace_logradouro, replace_complemento, replace_uf, null);
        }
        
        /// <remarks/>
        public void InserirCepAsync(string replace_idcepbairro, string replace_cep, string replace_idcepCity, string replace_idestado, string replace_bairro, string replace_logradouro, string replace_complemento, string replace_uf, object userState) {
            if ((this.InserirCepOperationCompleted == null)) {
                this.InserirCepOperationCompleted = new System.Threading.SendOrPostCallback(this.OnInserirCepOperationCompleted);
            }
            this.InvokeAsync("InserirCep", new object[] {
                        replace_idcepbairro,
                        replace_cep,
                        replace_idcepCity,
                        replace_idestado,
                        replace_bairro,
                        replace_logradouro,
                        replace_complemento,
                        replace_uf}, this.InserirCepOperationCompleted, userState);
        }
        
        private void OnInserirCepOperationCompleted(object arg) {
            if ((this.InserirCepCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.InserirCepCompleted(this, new InserirCepCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/AlterarTerminal", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void AlterarTerminal(string auxidterminal, string auxidloja, string auxidtypeTerminal, string auxdescricao, string auxflagDesconto, string auxstatus, string auxoperacao, string auxmultiTarefa) {
            this.Invoke("AlterarTerminal", new object[] {
                        auxidterminal,
                        auxidloja,
                        auxidtypeTerminal,
                        auxdescricao,
                        auxflagDesconto,
                        auxstatus,
                        auxoperacao,
                        auxmultiTarefa});
        }
        
        /// <remarks/>
        public void AlterarTerminalAsync(string auxidterminal, string auxidloja, string auxidtypeTerminal, string auxdescricao, string auxflagDesconto, string auxstatus, string auxoperacao, string auxmultiTarefa) {
            this.AlterarTerminalAsync(auxidterminal, auxidloja, auxidtypeTerminal, auxdescricao, auxflagDesconto, auxstatus, auxoperacao, auxmultiTarefa, null);
        }
        
        /// <remarks/>
        public void AlterarTerminalAsync(string auxidterminal, string auxidloja, string auxidtypeTerminal, string auxdescricao, string auxflagDesconto, string auxstatus, string auxoperacao, string auxmultiTarefa, object userState) {
            if ((this.AlterarTerminalOperationCompleted == null)) {
                this.AlterarTerminalOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAlterarTerminalOperationCompleted);
            }
            this.InvokeAsync("AlterarTerminal", new object[] {
                        auxidterminal,
                        auxidloja,
                        auxidtypeTerminal,
                        auxdescricao,
                        auxflagDesconto,
                        auxstatus,
                        auxoperacao,
                        auxmultiTarefa}, this.AlterarTerminalOperationCompleted, userState);
        }
        
        private void OnAlterarTerminalOperationCompleted(object arg) {
            if ((this.AlterarTerminalCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.AlterarTerminalCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/AlterarTerminalConfigEcf", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void AlterarTerminalConfigEcf(
                    string auxterminal, 
                    string auxcaixa, 
                    string auxipCaixa, 
                    string auxabeturaTroco, 
                    string auximprimiCheque, 
                    string auxtimeBlock, 
                    string auxblockTime, 
                    string auxtrocaMercadoria, 
                    string auxcarneRecebe, 
                    string auxcodigoEmpresaTef, 
                    string auxtrocoMax, 
                    string auxserie, 
                    string auxutilizaTeclado, 
                    string auxutilizaTef, 
                    string auxutilizaBalanca, 
                    string auxutilizaEcf, 
                    string auxportTef, 
                    string auxportBalanca, 
                    string auxportEcf, 
                    string auxfuncaoProgramada, 
                    string auxmsgTef, 
                    string auxidModeloEcf, 
                    string auxstatusPdv, 
                    string auxautentica, 
                    string auxemiteVinculo, 
                    string auxvinculoCrediario, 
                    string auxvinculoConvenio, 
                    string auxvinculoCartaoCredito, 
                    string auxvinculoCartaoDebito, 
                    string auxtypeTef, 
                    string auxalertaSangria, 
                    string auxvalueSangria, 
                    string auxIdTypeTerminal) {
            this.Invoke("AlterarTerminalConfigEcf", new object[] {
                        auxterminal,
                        auxcaixa,
                        auxipCaixa,
                        auxabeturaTroco,
                        auximprimiCheque,
                        auxtimeBlock,
                        auxblockTime,
                        auxtrocaMercadoria,
                        auxcarneRecebe,
                        auxcodigoEmpresaTef,
                        auxtrocoMax,
                        auxserie,
                        auxutilizaTeclado,
                        auxutilizaTef,
                        auxutilizaBalanca,
                        auxutilizaEcf,
                        auxportTef,
                        auxportBalanca,
                        auxportEcf,
                        auxfuncaoProgramada,
                        auxmsgTef,
                        auxidModeloEcf,
                        auxstatusPdv,
                        auxautentica,
                        auxemiteVinculo,
                        auxvinculoCrediario,
                        auxvinculoConvenio,
                        auxvinculoCartaoCredito,
                        auxvinculoCartaoDebito,
                        auxtypeTef,
                        auxalertaSangria,
                        auxvalueSangria,
                        auxIdTypeTerminal});
        }
        
        /// <remarks/>
        public void AlterarTerminalConfigEcfAsync(
                    string auxterminal, 
                    string auxcaixa, 
                    string auxipCaixa, 
                    string auxabeturaTroco, 
                    string auximprimiCheque, 
                    string auxtimeBlock, 
                    string auxblockTime, 
                    string auxtrocaMercadoria, 
                    string auxcarneRecebe, 
                    string auxcodigoEmpresaTef, 
                    string auxtrocoMax, 
                    string auxserie, 
                    string auxutilizaTeclado, 
                    string auxutilizaTef, 
                    string auxutilizaBalanca, 
                    string auxutilizaEcf, 
                    string auxportTef, 
                    string auxportBalanca, 
                    string auxportEcf, 
                    string auxfuncaoProgramada, 
                    string auxmsgTef, 
                    string auxidModeloEcf, 
                    string auxstatusPdv, 
                    string auxautentica, 
                    string auxemiteVinculo, 
                    string auxvinculoCrediario, 
                    string auxvinculoConvenio, 
                    string auxvinculoCartaoCredito, 
                    string auxvinculoCartaoDebito, 
                    string auxtypeTef, 
                    string auxalertaSangria, 
                    string auxvalueSangria, 
                    string auxIdTypeTerminal) {
            this.AlterarTerminalConfigEcfAsync(auxterminal, auxcaixa, auxipCaixa, auxabeturaTroco, auximprimiCheque, auxtimeBlock, auxblockTime, auxtrocaMercadoria, auxcarneRecebe, auxcodigoEmpresaTef, auxtrocoMax, auxserie, auxutilizaTeclado, auxutilizaTef, auxutilizaBalanca, auxutilizaEcf, auxportTef, auxportBalanca, auxportEcf, auxfuncaoProgramada, auxmsgTef, auxidModeloEcf, auxstatusPdv, auxautentica, auxemiteVinculo, auxvinculoCrediario, auxvinculoConvenio, auxvinculoCartaoCredito, auxvinculoCartaoDebito, auxtypeTef, auxalertaSangria, auxvalueSangria, auxIdTypeTerminal, null);
        }
        
        /// <remarks/>
        public void AlterarTerminalConfigEcfAsync(
                    string auxterminal, 
                    string auxcaixa, 
                    string auxipCaixa, 
                    string auxabeturaTroco, 
                    string auximprimiCheque, 
                    string auxtimeBlock, 
                    string auxblockTime, 
                    string auxtrocaMercadoria, 
                    string auxcarneRecebe, 
                    string auxcodigoEmpresaTef, 
                    string auxtrocoMax, 
                    string auxserie, 
                    string auxutilizaTeclado, 
                    string auxutilizaTef, 
                    string auxutilizaBalanca, 
                    string auxutilizaEcf, 
                    string auxportTef, 
                    string auxportBalanca, 
                    string auxportEcf, 
                    string auxfuncaoProgramada, 
                    string auxmsgTef, 
                    string auxidModeloEcf, 
                    string auxstatusPdv, 
                    string auxautentica, 
                    string auxemiteVinculo, 
                    string auxvinculoCrediario, 
                    string auxvinculoConvenio, 
                    string auxvinculoCartaoCredito, 
                    string auxvinculoCartaoDebito, 
                    string auxtypeTef, 
                    string auxalertaSangria, 
                    string auxvalueSangria, 
                    string auxIdTypeTerminal, 
                    object userState) {
            if ((this.AlterarTerminalConfigEcfOperationCompleted == null)) {
                this.AlterarTerminalConfigEcfOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAlterarTerminalConfigEcfOperationCompleted);
            }
            this.InvokeAsync("AlterarTerminalConfigEcf", new object[] {
                        auxterminal,
                        auxcaixa,
                        auxipCaixa,
                        auxabeturaTroco,
                        auximprimiCheque,
                        auxtimeBlock,
                        auxblockTime,
                        auxtrocaMercadoria,
                        auxcarneRecebe,
                        auxcodigoEmpresaTef,
                        auxtrocoMax,
                        auxserie,
                        auxutilizaTeclado,
                        auxutilizaTef,
                        auxutilizaBalanca,
                        auxutilizaEcf,
                        auxportTef,
                        auxportBalanca,
                        auxportEcf,
                        auxfuncaoProgramada,
                        auxmsgTef,
                        auxidModeloEcf,
                        auxstatusPdv,
                        auxautentica,
                        auxemiteVinculo,
                        auxvinculoCrediario,
                        auxvinculoConvenio,
                        auxvinculoCartaoCredito,
                        auxvinculoCartaoDebito,
                        auxtypeTef,
                        auxalertaSangria,
                        auxvalueSangria,
                        auxIdTypeTerminal}, this.AlterarTerminalConfigEcfOperationCompleted, userState);
        }
        
        private void OnAlterarTerminalConfigEcfOperationCompleted(object arg) {
            if ((this.AlterarTerminalConfigEcfCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.AlterarTerminalConfigEcfCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/ObterResultCheque", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int ObterResultCheque(string conta, string serie, string agencia, string banco, string numeroCheque) {
            object[] results = this.Invoke("ObterResultCheque", new object[] {
                        conta,
                        serie,
                        agencia,
                        banco,
                        numeroCheque});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void ObterResultChequeAsync(string conta, string serie, string agencia, string banco, string numeroCheque) {
            this.ObterResultChequeAsync(conta, serie, agencia, banco, numeroCheque, null);
        }
        
        /// <remarks/>
        public void ObterResultChequeAsync(string conta, string serie, string agencia, string banco, string numeroCheque, object userState) {
            if ((this.ObterResultChequeOperationCompleted == null)) {
                this.ObterResultChequeOperationCompleted = new System.Threading.SendOrPostCallback(this.OnObterResultChequeOperationCompleted);
            }
            this.InvokeAsync("ObterResultCheque", new object[] {
                        conta,
                        serie,
                        agencia,
                        banco,
                        numeroCheque}, this.ObterResultChequeOperationCompleted, userState);
        }
        
        private void OnObterResultChequeOperationCompleted(object arg) {
            if ((this.ObterResultChequeCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ObterResultChequeCompleted(this, new ObterResultChequeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/ObterPedido", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet ObterPedido(string pedido, string store, string tipo) {
            object[] results = this.Invoke("ObterPedido", new object[] {
                        pedido,
                        store,
                        tipo});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void ObterPedidoAsync(string pedido, string store, string tipo) {
            this.ObterPedidoAsync(pedido, store, tipo, null);
        }
        
        /// <remarks/>
        public void ObterPedidoAsync(string pedido, string store, string tipo, object userState) {
            if ((this.ObterPedidoOperationCompleted == null)) {
                this.ObterPedidoOperationCompleted = new System.Threading.SendOrPostCallback(this.OnObterPedidoOperationCompleted);
            }
            this.InvokeAsync("ObterPedido", new object[] {
                        pedido,
                        store,
                        tipo}, this.ObterPedidoOperationCompleted, userState);
        }
        
        private void OnObterPedidoOperationCompleted(object arg) {
            if ((this.ObterPedidoCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ObterPedidoCompleted(this, new ObterPedidoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/ObterPedidoLog", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet ObterPedidoLog(string pedido, string store) {
            object[] results = this.Invoke("ObterPedidoLog", new object[] {
                        pedido,
                        store});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void ObterPedidoLogAsync(string pedido, string store) {
            this.ObterPedidoLogAsync(pedido, store, null);
        }
        
        /// <remarks/>
        public void ObterPedidoLogAsync(string pedido, string store, object userState) {
            if ((this.ObterPedidoLogOperationCompleted == null)) {
                this.ObterPedidoLogOperationCompleted = new System.Threading.SendOrPostCallback(this.OnObterPedidoLogOperationCompleted);
            }
            this.InvokeAsync("ObterPedidoLog", new object[] {
                        pedido,
                        store}, this.ObterPedidoLogOperationCompleted, userState);
        }
        
        private void OnObterPedidoLogOperationCompleted(object arg) {
            if ((this.ObterPedidoLogCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ObterPedidoLogCompleted(this, new ObterPedidoLogCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/ObterPedidoExpire", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet ObterPedidoExpire(string pedido, string store, string dmais1, string dmais2) {
            object[] results = this.Invoke("ObterPedidoExpire", new object[] {
                        pedido,
                        store,
                        dmais1,
                        dmais2});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void ObterPedidoExpireAsync(string pedido, string store, string dmais1, string dmais2) {
            this.ObterPedidoExpireAsync(pedido, store, dmais1, dmais2, null);
        }
        
        /// <remarks/>
        public void ObterPedidoExpireAsync(string pedido, string store, string dmais1, string dmais2, object userState) {
            if ((this.ObterPedidoExpireOperationCompleted == null)) {
                this.ObterPedidoExpireOperationCompleted = new System.Threading.SendOrPostCallback(this.OnObterPedidoExpireOperationCompleted);
            }
            this.InvokeAsync("ObterPedidoExpire", new object[] {
                        pedido,
                        store,
                        dmais1,
                        dmais2}, this.ObterPedidoExpireOperationCompleted, userState);
        }
        
        private void OnObterPedidoExpireOperationCompleted(object arg) {
            if ((this.ObterPedidoExpireCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ObterPedidoExpireCompleted(this, new ObterPedidoExpireCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/ObterPedidoItens", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet ObterPedidoItens(string pedido, string store) {
            object[] results = this.Invoke("ObterPedidoItens", new object[] {
                        pedido,
                        store});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void ObterPedidoItensAsync(string pedido, string store) {
            this.ObterPedidoItensAsync(pedido, store, null);
        }
        
        /// <remarks/>
        public void ObterPedidoItensAsync(string pedido, string store, object userState) {
            if ((this.ObterPedidoItensOperationCompleted == null)) {
                this.ObterPedidoItensOperationCompleted = new System.Threading.SendOrPostCallback(this.OnObterPedidoItensOperationCompleted);
            }
            this.InvokeAsync("ObterPedidoItens", new object[] {
                        pedido,
                        store}, this.ObterPedidoItensOperationCompleted, userState);
        }
        
        private void OnObterPedidoItensOperationCompleted(object arg) {
            if ((this.ObterPedidoItensCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ObterPedidoItensCompleted(this, new ObterPedidoItensCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/ObterPedidoFinanceiro", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet ObterPedidoFinanceiro(string pedido, string store) {
            object[] results = this.Invoke("ObterPedidoFinanceiro", new object[] {
                        pedido,
                        store});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void ObterPedidoFinanceiroAsync(string pedido, string store) {
            this.ObterPedidoFinanceiroAsync(pedido, store, null);
        }
        
        /// <remarks/>
        public void ObterPedidoFinanceiroAsync(string pedido, string store, object userState) {
            if ((this.ObterPedidoFinanceiroOperationCompleted == null)) {
                this.ObterPedidoFinanceiroOperationCompleted = new System.Threading.SendOrPostCallback(this.OnObterPedidoFinanceiroOperationCompleted);
            }
            this.InvokeAsync("ObterPedidoFinanceiro", new object[] {
                        pedido,
                        store}, this.ObterPedidoFinanceiroOperationCompleted, userState);
        }
        
        private void OnObterPedidoFinanceiroOperationCompleted(object arg) {
            if ((this.ObterPedidoFinanceiroCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ObterPedidoFinanceiroCompleted(this, new ObterPedidoFinanceiroCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/ObterPedidoParcelamento", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet ObterPedidoParcelamento(int escolha, string pedido, string store) {
            object[] results = this.Invoke("ObterPedidoParcelamento", new object[] {
                        escolha,
                        pedido,
                        store});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void ObterPedidoParcelamentoAsync(int escolha, string pedido, string store) {
            this.ObterPedidoParcelamentoAsync(escolha, pedido, store, null);
        }
        
        /// <remarks/>
        public void ObterPedidoParcelamentoAsync(int escolha, string pedido, string store, object userState) {
            if ((this.ObterPedidoParcelamentoOperationCompleted == null)) {
                this.ObterPedidoParcelamentoOperationCompleted = new System.Threading.SendOrPostCallback(this.OnObterPedidoParcelamentoOperationCompleted);
            }
            this.InvokeAsync("ObterPedidoParcelamento", new object[] {
                        escolha,
                        pedido,
                        store}, this.ObterPedidoParcelamentoOperationCompleted, userState);
        }
        
        private void OnObterPedidoParcelamentoOperationCompleted(object arg) {
            if ((this.ObterPedidoParcelamentoCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ObterPedidoParcelamentoCompleted(this, new ObterPedidoParcelamentoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/ObterPedidoEntrega", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet ObterPedidoEntrega(string pedido, string store) {
            object[] results = this.Invoke("ObterPedidoEntrega", new object[] {
                        pedido,
                        store});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void ObterPedidoEntregaAsync(string pedido, string store) {
            this.ObterPedidoEntregaAsync(pedido, store, null);
        }
        
        /// <remarks/>
        public void ObterPedidoEntregaAsync(string pedido, string store, object userState) {
            if ((this.ObterPedidoEntregaOperationCompleted == null)) {
                this.ObterPedidoEntregaOperationCompleted = new System.Threading.SendOrPostCallback(this.OnObterPedidoEntregaOperationCompleted);
            }
            this.InvokeAsync("ObterPedidoEntrega", new object[] {
                        pedido,
                        store}, this.ObterPedidoEntregaOperationCompleted, userState);
        }
        
        private void OnObterPedidoEntregaOperationCompleted(object arg) {
            if ((this.ObterPedidoEntregaCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ObterPedidoEntregaCompleted(this, new ObterPedidoEntregaCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/AlteraStatusPedido", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void AlteraStatusPedido(string pedido, string store) {
            this.Invoke("AlteraStatusPedido", new object[] {
                        pedido,
                        store});
        }
        
        /// <remarks/>
        public void AlteraStatusPedidoAsync(string pedido, string store) {
            this.AlteraStatusPedidoAsync(pedido, store, null);
        }
        
        /// <remarks/>
        public void AlteraStatusPedidoAsync(string pedido, string store, object userState) {
            if ((this.AlteraStatusPedidoOperationCompleted == null)) {
                this.AlteraStatusPedidoOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAlteraStatusPedidoOperationCompleted);
            }
            this.InvokeAsync("AlteraStatusPedido", new object[] {
                        pedido,
                        store}, this.AlteraStatusPedidoOperationCompleted, userState);
        }
        
        private void OnAlteraStatusPedidoOperationCompleted(object arg) {
            if ((this.AlteraStatusPedidoCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.AlteraStatusPedidoCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/AlteraStatusPedidoFinal", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void AlteraStatusPedidoFinal(string reserva, string store, string final, string status, string sinal) {
            this.Invoke("AlteraStatusPedidoFinal", new object[] {
                        reserva,
                        store,
                        final,
                        status,
                        sinal});
        }
        
        /// <remarks/>
        public void AlteraStatusPedidoFinalAsync(string reserva, string store, string final, string status, string sinal) {
            this.AlteraStatusPedidoFinalAsync(reserva, store, final, status, sinal, null);
        }
        
        /// <remarks/>
        public void AlteraStatusPedidoFinalAsync(string reserva, string store, string final, string status, string sinal, object userState) {
            if ((this.AlteraStatusPedidoFinalOperationCompleted == null)) {
                this.AlteraStatusPedidoFinalOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAlteraStatusPedidoFinalOperationCompleted);
            }
            this.InvokeAsync("AlteraStatusPedidoFinal", new object[] {
                        reserva,
                        store,
                        final,
                        status,
                        sinal}, this.AlteraStatusPedidoFinalOperationCompleted, userState);
        }
        
        private void OnAlteraStatusPedidoFinalOperationCompleted(object arg) {
            if ((this.AlteraStatusPedidoFinalCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.AlteraStatusPedidoFinalCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/VerificaStatusPedido", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int VerificaStatusPedido(string pedido, string store) {
            object[] results = this.Invoke("VerificaStatusPedido", new object[] {
                        pedido,
                        store});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void VerificaStatusPedidoAsync(string pedido, string store) {
            this.VerificaStatusPedidoAsync(pedido, store, null);
        }
        
        /// <remarks/>
        public void VerificaStatusPedidoAsync(string pedido, string store, object userState) {
            if ((this.VerificaStatusPedidoOperationCompleted == null)) {
                this.VerificaStatusPedidoOperationCompleted = new System.Threading.SendOrPostCallback(this.OnVerificaStatusPedidoOperationCompleted);
            }
            this.InvokeAsync("VerificaStatusPedido", new object[] {
                        pedido,
                        store}, this.VerificaStatusPedidoOperationCompleted, userState);
        }
        
        private void OnVerificaStatusPedidoOperationCompleted(object arg) {
            if ((this.VerificaStatusPedidoCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.VerificaStatusPedidoCompleted(this, new VerificaStatusPedidoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/VerificaFinalPedido", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int VerificaFinalPedido(string pedido, string store) {
            object[] results = this.Invoke("VerificaFinalPedido", new object[] {
                        pedido,
                        store});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void VerificaFinalPedidoAsync(string pedido, string store) {
            this.VerificaFinalPedidoAsync(pedido, store, null);
        }
        
        /// <remarks/>
        public void VerificaFinalPedidoAsync(string pedido, string store, object userState) {
            if ((this.VerificaFinalPedidoOperationCompleted == null)) {
                this.VerificaFinalPedidoOperationCompleted = new System.Threading.SendOrPostCallback(this.OnVerificaFinalPedidoOperationCompleted);
            }
            this.InvokeAsync("VerificaFinalPedido", new object[] {
                        pedido,
                        store}, this.VerificaFinalPedidoOperationCompleted, userState);
        }
        
        private void OnVerificaFinalPedidoOperationCompleted(object arg) {
            if ((this.VerificaFinalPedidoCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.VerificaFinalPedidoCompleted(this, new VerificaFinalPedidoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/VerificaFinalizadoraPedido", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int VerificaFinalizadoraPedido(string pedido, string store) {
            object[] results = this.Invoke("VerificaFinalizadoraPedido", new object[] {
                        pedido,
                        store});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void VerificaFinalizadoraPedidoAsync(string pedido, string store) {
            this.VerificaFinalizadoraPedidoAsync(pedido, store, null);
        }
        
        /// <remarks/>
        public void VerificaFinalizadoraPedidoAsync(string pedido, string store, object userState) {
            if ((this.VerificaFinalizadoraPedidoOperationCompleted == null)) {
                this.VerificaFinalizadoraPedidoOperationCompleted = new System.Threading.SendOrPostCallback(this.OnVerificaFinalizadoraPedidoOperationCompleted);
            }
            this.InvokeAsync("VerificaFinalizadoraPedido", new object[] {
                        pedido,
                        store}, this.VerificaFinalizadoraPedidoOperationCompleted, userState);
        }
        
        private void OnVerificaFinalizadoraPedidoOperationCompleted(object arg) {
            if ((this.VerificaFinalizadoraPedidoCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.VerificaFinalizadoraPedidoCompleted(this, new VerificaFinalizadoraPedidoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/ObterCrediario", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet ObterCrediario(string crediario, string store) {
            object[] results = this.Invoke("ObterCrediario", new object[] {
                        crediario,
                        store});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void ObterCrediarioAsync(string crediario, string store) {
            this.ObterCrediarioAsync(crediario, store, null);
        }
        
        /// <remarks/>
        public void ObterCrediarioAsync(string crediario, string store, object userState) {
            if ((this.ObterCrediarioOperationCompleted == null)) {
                this.ObterCrediarioOperationCompleted = new System.Threading.SendOrPostCallback(this.OnObterCrediarioOperationCompleted);
            }
            this.InvokeAsync("ObterCrediario", new object[] {
                        crediario,
                        store}, this.ObterCrediarioOperationCompleted, userState);
        }
        
        private void OnObterCrediarioOperationCompleted(object arg) {
            if ((this.ObterCrediarioCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ObterCrediarioCompleted(this, new ObterCrediarioCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/ObterParcelamento", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet ObterParcelamento(string crediario, string store) {
            object[] results = this.Invoke("ObterParcelamento", new object[] {
                        crediario,
                        store});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void ObterParcelamentoAsync(string crediario, string store) {
            this.ObterParcelamentoAsync(crediario, store, null);
        }
        
        /// <remarks/>
        public void ObterParcelamentoAsync(string crediario, string store, object userState) {
            if ((this.ObterParcelamentoOperationCompleted == null)) {
                this.ObterParcelamentoOperationCompleted = new System.Threading.SendOrPostCallback(this.OnObterParcelamentoOperationCompleted);
            }
            this.InvokeAsync("ObterParcelamento", new object[] {
                        crediario,
                        store}, this.ObterParcelamentoOperationCompleted, userState);
        }
        
        private void OnObterParcelamentoOperationCompleted(object arg) {
            if ((this.ObterParcelamentoCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ObterParcelamentoCompleted(this, new ObterParcelamentoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/ObterParcela", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet ObterParcela(string crediario, string store, string parcela) {
            object[] results = this.Invoke("ObterParcela", new object[] {
                        crediario,
                        store,
                        parcela});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void ObterParcelaAsync(string crediario, string store, string parcela) {
            this.ObterParcelaAsync(crediario, store, parcela, null);
        }
        
        /// <remarks/>
        public void ObterParcelaAsync(string crediario, string store, string parcela, object userState) {
            if ((this.ObterParcelaOperationCompleted == null)) {
                this.ObterParcelaOperationCompleted = new System.Threading.SendOrPostCallback(this.OnObterParcelaOperationCompleted);
            }
            this.InvokeAsync("ObterParcela", new object[] {
                        crediario,
                        store,
                        parcela}, this.ObterParcelaOperationCompleted, userState);
        }
        
        private void OnObterParcelaOperationCompleted(object arg) {
            if ((this.ObterParcelaCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ObterParcelaCompleted(this, new ObterParcelaCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/ObterDividento", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet ObterDividento(string pessoa, string store, string carne, string prestacao, string tipo) {
            object[] results = this.Invoke("ObterDividento", new object[] {
                        pessoa,
                        store,
                        carne,
                        prestacao,
                        tipo});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void ObterDividentoAsync(string pessoa, string store, string carne, string prestacao, string tipo) {
            this.ObterDividentoAsync(pessoa, store, carne, prestacao, tipo, null);
        }
        
        /// <remarks/>
        public void ObterDividentoAsync(string pessoa, string store, string carne, string prestacao, string tipo, object userState) {
            if ((this.ObterDividentoOperationCompleted == null)) {
                this.ObterDividentoOperationCompleted = new System.Threading.SendOrPostCallback(this.OnObterDividentoOperationCompleted);
            }
            this.InvokeAsync("ObterDividento", new object[] {
                        pessoa,
                        store,
                        carne,
                        prestacao,
                        tipo}, this.ObterDividentoOperationCompleted, userState);
        }
        
        private void OnObterDividentoOperationCompleted(object arg) {
            if ((this.ObterDividentoCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ObterDividentoCompleted(this, new ObterDividentoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/ObterHistoricoFull", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet ObterHistoricoFull(string tipo, string store, string pessoa, string auxFiltraDate, string di, string df) {
            object[] results = this.Invoke("ObterHistoricoFull", new object[] {
                        tipo,
                        store,
                        pessoa,
                        auxFiltraDate,
                        di,
                        df});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void ObterHistoricoFullAsync(string tipo, string store, string pessoa, string auxFiltraDate, string di, string df) {
            this.ObterHistoricoFullAsync(tipo, store, pessoa, auxFiltraDate, di, df, null);
        }
        
        /// <remarks/>
        public void ObterHistoricoFullAsync(string tipo, string store, string pessoa, string auxFiltraDate, string di, string df, object userState) {
            if ((this.ObterHistoricoFullOperationCompleted == null)) {
                this.ObterHistoricoFullOperationCompleted = new System.Threading.SendOrPostCallback(this.OnObterHistoricoFullOperationCompleted);
            }
            this.InvokeAsync("ObterHistoricoFull", new object[] {
                        tipo,
                        store,
                        pessoa,
                        auxFiltraDate,
                        di,
                        df}, this.ObterHistoricoFullOperationCompleted, userState);
        }
        
        private void OnObterHistoricoFullOperationCompleted(object arg) {
            if ((this.ObterHistoricoFullCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ObterHistoricoFullCompleted(this, new ObterHistoricoFullCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/AlteraStatusParcelaCrediario", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void AlteraStatusParcelaCrediario(string crediario, string store, string parcela, string status) {
            this.Invoke("AlteraStatusParcelaCrediario", new object[] {
                        crediario,
                        store,
                        parcela,
                        status});
        }
        
        /// <remarks/>
        public void AlteraStatusParcelaCrediarioAsync(string crediario, string store, string parcela, string status) {
            this.AlteraStatusParcelaCrediarioAsync(crediario, store, parcela, status, null);
        }
        
        /// <remarks/>
        public void AlteraStatusParcelaCrediarioAsync(string crediario, string store, string parcela, string status, object userState) {
            if ((this.AlteraStatusParcelaCrediarioOperationCompleted == null)) {
                this.AlteraStatusParcelaCrediarioOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAlteraStatusParcelaCrediarioOperationCompleted);
            }
            this.InvokeAsync("AlteraStatusParcelaCrediario", new object[] {
                        crediario,
                        store,
                        parcela,
                        status}, this.AlteraStatusParcelaCrediarioOperationCompleted, userState);
        }
        
        private void OnAlteraStatusParcelaCrediarioOperationCompleted(object arg) {
            if ((this.AlteraStatusParcelaCrediarioCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.AlteraStatusParcelaCrediarioCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/verificaStatusParcelaCrediario", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int verificaStatusParcelaCrediario(string crediario, string store, string parcela) {
            object[] results = this.Invoke("verificaStatusParcelaCrediario", new object[] {
                        crediario,
                        store,
                        parcela});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void verificaStatusParcelaCrediarioAsync(string crediario, string store, string parcela) {
            this.verificaStatusParcelaCrediarioAsync(crediario, store, parcela, null);
        }
        
        /// <remarks/>
        public void verificaStatusParcelaCrediarioAsync(string crediario, string store, string parcela, object userState) {
            if ((this.verificaStatusParcelaCrediarioOperationCompleted == null)) {
                this.verificaStatusParcelaCrediarioOperationCompleted = new System.Threading.SendOrPostCallback(this.OnverificaStatusParcelaCrediarioOperationCompleted);
            }
            this.InvokeAsync("verificaStatusParcelaCrediario", new object[] {
                        crediario,
                        store,
                        parcela}, this.verificaStatusParcelaCrediarioOperationCompleted, userState);
        }
        
        private void OnverificaStatusParcelaCrediarioOperationCompleted(object arg) {
            if ((this.verificaStatusParcelaCrediarioCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.verificaStatusParcelaCrediarioCompleted(this, new verificaStatusParcelaCrediarioCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/verificaStatusCrediario", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int verificaStatusCrediario(string crediario, string store) {
            object[] results = this.Invoke("verificaStatusCrediario", new object[] {
                        crediario,
                        store});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void verificaStatusCrediarioAsync(string crediario, string store) {
            this.verificaStatusCrediarioAsync(crediario, store, null);
        }
        
        /// <remarks/>
        public void verificaStatusCrediarioAsync(string crediario, string store, object userState) {
            if ((this.verificaStatusCrediarioOperationCompleted == null)) {
                this.verificaStatusCrediarioOperationCompleted = new System.Threading.SendOrPostCallback(this.OnverificaStatusCrediarioOperationCompleted);
            }
            this.InvokeAsync("verificaStatusCrediario", new object[] {
                        crediario,
                        store}, this.verificaStatusCrediarioOperationCompleted, userState);
        }
        
        private void OnverificaStatusCrediarioOperationCompleted(object arg) {
            if ((this.verificaStatusCrediarioCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.verificaStatusCrediarioCompleted(this, new verificaStatusCrediarioCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/verificaExitsPepleo", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int verificaExitsPepleo(string pepleo) {
            object[] results = this.Invoke("verificaExitsPepleo", new object[] {
                        pepleo});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void verificaExitsPepleoAsync(string pepleo) {
            this.verificaExitsPepleoAsync(pepleo, null);
        }
        
        /// <remarks/>
        public void verificaExitsPepleoAsync(string pepleo, object userState) {
            if ((this.verificaExitsPepleoOperationCompleted == null)) {
                this.verificaExitsPepleoOperationCompleted = new System.Threading.SendOrPostCallback(this.OnverificaExitsPepleoOperationCompleted);
            }
            this.InvokeAsync("verificaExitsPepleo", new object[] {
                        pepleo}, this.verificaExitsPepleoOperationCompleted, userState);
        }
        
        private void OnverificaExitsPepleoOperationCompleted(object arg) {
            if ((this.verificaExitsPepleoCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.verificaExitsPepleoCompleted(this, new verificaExitsPepleoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/ObterPepleoSingle", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet ObterPepleoSingle(string pessoa) {
            object[] results = this.Invoke("ObterPepleoSingle", new object[] {
                        pessoa});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void ObterPepleoSingleAsync(string pessoa) {
            this.ObterPepleoSingleAsync(pessoa, null);
        }
        
        /// <remarks/>
        public void ObterPepleoSingleAsync(string pessoa, object userState) {
            if ((this.ObterPepleoSingleOperationCompleted == null)) {
                this.ObterPepleoSingleOperationCompleted = new System.Threading.SendOrPostCallback(this.OnObterPepleoSingleOperationCompleted);
            }
            this.InvokeAsync("ObterPepleoSingle", new object[] {
                        pessoa}, this.ObterPepleoSingleOperationCompleted, userState);
        }
        
        private void OnObterPepleoSingleOperationCompleted(object arg) {
            if ((this.ObterPepleoSingleCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ObterPepleoSingleCompleted(this, new ObterPepleoSingleCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/ObterMainPepleo", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet ObterMainPepleo(string pessoa) {
            object[] results = this.Invoke("ObterMainPepleo", new object[] {
                        pessoa});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void ObterMainPepleoAsync(string pessoa) {
            this.ObterMainPepleoAsync(pessoa, null);
        }
        
        /// <remarks/>
        public void ObterMainPepleoAsync(string pessoa, object userState) {
            if ((this.ObterMainPepleoOperationCompleted == null)) {
                this.ObterMainPepleoOperationCompleted = new System.Threading.SendOrPostCallback(this.OnObterMainPepleoOperationCompleted);
            }
            this.InvokeAsync("ObterMainPepleo", new object[] {
                        pessoa}, this.ObterMainPepleoOperationCompleted, userState);
        }
        
        private void OnObterMainPepleoOperationCompleted(object arg) {
            if ((this.ObterMainPepleoCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ObterMainPepleoCompleted(this, new ObterMainPepleoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/ObterMainPepleoWorking", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet ObterMainPepleoWorking(string pessoa) {
            object[] results = this.Invoke("ObterMainPepleoWorking", new object[] {
                        pessoa});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void ObterMainPepleoWorkingAsync(string pessoa) {
            this.ObterMainPepleoWorkingAsync(pessoa, null);
        }
        
        /// <remarks/>
        public void ObterMainPepleoWorkingAsync(string pessoa, object userState) {
            if ((this.ObterMainPepleoWorkingOperationCompleted == null)) {
                this.ObterMainPepleoWorkingOperationCompleted = new System.Threading.SendOrPostCallback(this.OnObterMainPepleoWorkingOperationCompleted);
            }
            this.InvokeAsync("ObterMainPepleoWorking", new object[] {
                        pessoa}, this.ObterMainPepleoWorkingOperationCompleted, userState);
        }
        
        private void OnObterMainPepleoWorkingOperationCompleted(object arg) {
            if ((this.ObterMainPepleoWorkingCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ObterMainPepleoWorkingCompleted(this, new ObterMainPepleoWorkingCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/ObterMainPepleoFisica", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet ObterMainPepleoFisica(string pessoa) {
            object[] results = this.Invoke("ObterMainPepleoFisica", new object[] {
                        pessoa});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void ObterMainPepleoFisicaAsync(string pessoa) {
            this.ObterMainPepleoFisicaAsync(pessoa, null);
        }
        
        /// <remarks/>
        public void ObterMainPepleoFisicaAsync(string pessoa, object userState) {
            if ((this.ObterMainPepleoFisicaOperationCompleted == null)) {
                this.ObterMainPepleoFisicaOperationCompleted = new System.Threading.SendOrPostCallback(this.OnObterMainPepleoFisicaOperationCompleted);
            }
            this.InvokeAsync("ObterMainPepleoFisica", new object[] {
                        pessoa}, this.ObterMainPepleoFisicaOperationCompleted, userState);
        }
        
        private void OnObterMainPepleoFisicaOperationCompleted(object arg) {
            if ((this.ObterMainPepleoFisicaCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ObterMainPepleoFisicaCompleted(this, new ObterMainPepleoFisicaCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/ObterMainPepleoRural", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet ObterMainPepleoRural(string pessoa) {
            object[] results = this.Invoke("ObterMainPepleoRural", new object[] {
                        pessoa});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void ObterMainPepleoRuralAsync(string pessoa) {
            this.ObterMainPepleoRuralAsync(pessoa, null);
        }
        
        /// <remarks/>
        public void ObterMainPepleoRuralAsync(string pessoa, object userState) {
            if ((this.ObterMainPepleoRuralOperationCompleted == null)) {
                this.ObterMainPepleoRuralOperationCompleted = new System.Threading.SendOrPostCallback(this.OnObterMainPepleoRuralOperationCompleted);
            }
            this.InvokeAsync("ObterMainPepleoRural", new object[] {
                        pessoa}, this.ObterMainPepleoRuralOperationCompleted, userState);
        }
        
        private void OnObterMainPepleoRuralOperationCompleted(object arg) {
            if ((this.ObterMainPepleoRuralCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ObterMainPepleoRuralCompleted(this, new ObterMainPepleoRuralCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/ObterMainPepleoJuridica", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet ObterMainPepleoJuridica(string pessoa) {
            object[] results = this.Invoke("ObterMainPepleoJuridica", new object[] {
                        pessoa});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void ObterMainPepleoJuridicaAsync(string pessoa) {
            this.ObterMainPepleoJuridicaAsync(pessoa, null);
        }
        
        /// <remarks/>
        public void ObterMainPepleoJuridicaAsync(string pessoa, object userState) {
            if ((this.ObterMainPepleoJuridicaOperationCompleted == null)) {
                this.ObterMainPepleoJuridicaOperationCompleted = new System.Threading.SendOrPostCallback(this.OnObterMainPepleoJuridicaOperationCompleted);
            }
            this.InvokeAsync("ObterMainPepleoJuridica", new object[] {
                        pessoa}, this.ObterMainPepleoJuridicaOperationCompleted, userState);
        }
        
        private void OnObterMainPepleoJuridicaOperationCompleted(object arg) {
            if ((this.ObterMainPepleoJuridicaCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ObterMainPepleoJuridicaCompleted(this, new ObterMainPepleoJuridicaCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/ObterFone", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet ObterFone(string pessoa) {
            object[] results = this.Invoke("ObterFone", new object[] {
                        pessoa});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void ObterFoneAsync(string pessoa) {
            this.ObterFoneAsync(pessoa, null);
        }
        
        /// <remarks/>
        public void ObterFoneAsync(string pessoa, object userState) {
            if ((this.ObterFoneOperationCompleted == null)) {
                this.ObterFoneOperationCompleted = new System.Threading.SendOrPostCallback(this.OnObterFoneOperationCompleted);
            }
            this.InvokeAsync("ObterFone", new object[] {
                        pessoa}, this.ObterFoneOperationCompleted, userState);
        }
        
        private void OnObterFoneOperationCompleted(object arg) {
            if ((this.ObterFoneCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ObterFoneCompleted(this, new ObterFoneCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/ObterFoneFuncionario", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet ObterFoneFuncionario(string pessoa) {
            object[] results = this.Invoke("ObterFoneFuncionario", new object[] {
                        pessoa});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void ObterFoneFuncionarioAsync(string pessoa) {
            this.ObterFoneFuncionarioAsync(pessoa, null);
        }
        
        /// <remarks/>
        public void ObterFoneFuncionarioAsync(string pessoa, object userState) {
            if ((this.ObterFoneFuncionarioOperationCompleted == null)) {
                this.ObterFoneFuncionarioOperationCompleted = new System.Threading.SendOrPostCallback(this.OnObterFoneFuncionarioOperationCompleted);
            }
            this.InvokeAsync("ObterFoneFuncionario", new object[] {
                        pessoa}, this.ObterFoneFuncionarioOperationCompleted, userState);
        }
        
        private void OnObterFoneFuncionarioOperationCompleted(object arg) {
            if ((this.ObterFoneFuncionarioCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ObterFoneFuncionarioCompleted(this, new ObterFoneFuncionarioCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/ObterStore", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet ObterStore(string store) {
            object[] results = this.Invoke("ObterStore", new object[] {
                        store});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void ObterStoreAsync(string store) {
            this.ObterStoreAsync(store, null);
        }
        
        /// <remarks/>
        public void ObterStoreAsync(string store, object userState) {
            if ((this.ObterStoreOperationCompleted == null)) {
                this.ObterStoreOperationCompleted = new System.Threading.SendOrPostCallback(this.OnObterStoreOperationCompleted);
            }
            this.InvokeAsync("ObterStore", new object[] {
                        store}, this.ObterStoreOperationCompleted, userState);
        }
        
        private void OnObterStoreOperationCompleted(object arg) {
            if ((this.ObterStoreCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ObterStoreCompleted(this, new ObterStoreCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/fornecedor_comercial", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet fornecedor_comercial(string pessoa) {
            object[] results = this.Invoke("fornecedor_comercial", new object[] {
                        pessoa});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void fornecedor_comercialAsync(string pessoa) {
            this.fornecedor_comercialAsync(pessoa, null);
        }
        
        /// <remarks/>
        public void fornecedor_comercialAsync(string pessoa, object userState) {
            if ((this.fornecedor_comercialOperationCompleted == null)) {
                this.fornecedor_comercialOperationCompleted = new System.Threading.SendOrPostCallback(this.Onfornecedor_comercialOperationCompleted);
            }
            this.InvokeAsync("fornecedor_comercial", new object[] {
                        pessoa}, this.fornecedor_comercialOperationCompleted, userState);
        }
        
        private void Onfornecedor_comercialOperationCompleted(object arg) {
            if ((this.fornecedor_comercialCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.fornecedor_comercialCompleted(this, new fornecedor_comercialCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/fornecedorFiscal", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet fornecedorFiscal(string pessoa) {
            object[] results = this.Invoke("fornecedorFiscal", new object[] {
                        pessoa});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void fornecedorFiscalAsync(string pessoa) {
            this.fornecedorFiscalAsync(pessoa, null);
        }
        
        /// <remarks/>
        public void fornecedorFiscalAsync(string pessoa, object userState) {
            if ((this.fornecedorFiscalOperationCompleted == null)) {
                this.fornecedorFiscalOperationCompleted = new System.Threading.SendOrPostCallback(this.OnfornecedorFiscalOperationCompleted);
            }
            this.InvokeAsync("fornecedorFiscal", new object[] {
                        pessoa}, this.fornecedorFiscalOperationCompleted, userState);
        }
        
        private void OnfornecedorFiscalOperationCompleted(object arg) {
            if ((this.fornecedorFiscalCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.fornecedorFiscalCompleted(this, new fornecedorFiscalCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/fornecedorInfo", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet fornecedorInfo(string pessoa) {
            object[] results = this.Invoke("fornecedorInfo", new object[] {
                        pessoa});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void fornecedorInfoAsync(string pessoa) {
            this.fornecedorInfoAsync(pessoa, null);
        }
        
        /// <remarks/>
        public void fornecedorInfoAsync(string pessoa, object userState) {
            if ((this.fornecedorInfoOperationCompleted == null)) {
                this.fornecedorInfoOperationCompleted = new System.Threading.SendOrPostCallback(this.OnfornecedorInfoOperationCompleted);
            }
            this.InvokeAsync("fornecedorInfo", new object[] {
                        pessoa}, this.fornecedorInfoOperationCompleted, userState);
        }
        
        private void OnfornecedorInfoOperationCompleted(object arg) {
            if ((this.fornecedorInfoCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.fornecedorInfoCompleted(this, new fornecedorInfoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/ObterEndereco", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet ObterEndereco(string pessoa) {
            object[] results = this.Invoke("ObterEndereco", new object[] {
                        pessoa});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void ObterEnderecoAsync(string pessoa) {
            this.ObterEnderecoAsync(pessoa, null);
        }
        
        /// <remarks/>
        public void ObterEnderecoAsync(string pessoa, object userState) {
            if ((this.ObterEnderecoOperationCompleted == null)) {
                this.ObterEnderecoOperationCompleted = new System.Threading.SendOrPostCallback(this.OnObterEnderecoOperationCompleted);
            }
            this.InvokeAsync("ObterEndereco", new object[] {
                        pessoa}, this.ObterEnderecoOperationCompleted, userState);
        }
        
        private void OnObterEnderecoOperationCompleted(object arg) {
            if ((this.ObterEnderecoCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ObterEnderecoCompleted(this, new ObterEnderecoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/ObterEnderecoFuncionario", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet ObterEnderecoFuncionario(string pessoa) {
            object[] results = this.Invoke("ObterEnderecoFuncionario", new object[] {
                        pessoa});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void ObterEnderecoFuncionarioAsync(string pessoa) {
            this.ObterEnderecoFuncionarioAsync(pessoa, null);
        }
        
        /// <remarks/>
        public void ObterEnderecoFuncionarioAsync(string pessoa, object userState) {
            if ((this.ObterEnderecoFuncionarioOperationCompleted == null)) {
                this.ObterEnderecoFuncionarioOperationCompleted = new System.Threading.SendOrPostCallback(this.OnObterEnderecoFuncionarioOperationCompleted);
            }
            this.InvokeAsync("ObterEnderecoFuncionario", new object[] {
                        pessoa}, this.ObterEnderecoFuncionarioOperationCompleted, userState);
        }
        
        private void OnObterEnderecoFuncionarioOperationCompleted(object arg) {
            if ((this.ObterEnderecoFuncionarioCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ObterEnderecoFuncionarioCompleted(this, new ObterEnderecoFuncionarioCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/ObterPepleoCobranca", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet ObterPepleoCobranca(string pessoa) {
            object[] results = this.Invoke("ObterPepleoCobranca", new object[] {
                        pessoa});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void ObterPepleoCobrancaAsync(string pessoa) {
            this.ObterPepleoCobrancaAsync(pessoa, null);
        }
        
        /// <remarks/>
        public void ObterPepleoCobrancaAsync(string pessoa, object userState) {
            if ((this.ObterPepleoCobrancaOperationCompleted == null)) {
                this.ObterPepleoCobrancaOperationCompleted = new System.Threading.SendOrPostCallback(this.OnObterPepleoCobrancaOperationCompleted);
            }
            this.InvokeAsync("ObterPepleoCobranca", new object[] {
                        pessoa}, this.ObterPepleoCobrancaOperationCompleted, userState);
        }
        
        private void OnObterPepleoCobrancaOperationCompleted(object arg) {
            if ((this.ObterPepleoCobrancaCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ObterPepleoCobrancaCompleted(this, new ObterPepleoCobrancaCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/ObterPepleoEntrega", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet ObterPepleoEntrega(string pessoa) {
            object[] results = this.Invoke("ObterPepleoEntrega", new object[] {
                        pessoa});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void ObterPepleoEntregaAsync(string pessoa) {
            this.ObterPepleoEntregaAsync(pessoa, null);
        }
        
        /// <remarks/>
        public void ObterPepleoEntregaAsync(string pessoa, object userState) {
            if ((this.ObterPepleoEntregaOperationCompleted == null)) {
                this.ObterPepleoEntregaOperationCompleted = new System.Threading.SendOrPostCallback(this.OnObterPepleoEntregaOperationCompleted);
            }
            this.InvokeAsync("ObterPepleoEntrega", new object[] {
                        pessoa}, this.ObterPepleoEntregaOperationCompleted, userState);
        }
        
        private void OnObterPepleoEntregaOperationCompleted(object arg) {
            if ((this.ObterPepleoEntregaCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ObterPepleoEntregaCompleted(this, new ObterPepleoEntregaCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/ObterPepleoProfissional", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet ObterPepleoProfissional(string pessoa) {
            object[] results = this.Invoke("ObterPepleoProfissional", new object[] {
                        pessoa});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void ObterPepleoProfissionalAsync(string pessoa) {
            this.ObterPepleoProfissionalAsync(pessoa, null);
        }
        
        /// <remarks/>
        public void ObterPepleoProfissionalAsync(string pessoa, object userState) {
            if ((this.ObterPepleoProfissionalOperationCompleted == null)) {
                this.ObterPepleoProfissionalOperationCompleted = new System.Threading.SendOrPostCallback(this.OnObterPepleoProfissionalOperationCompleted);
            }
            this.InvokeAsync("ObterPepleoProfissional", new object[] {
                        pessoa}, this.ObterPepleoProfissionalOperationCompleted, userState);
        }
        
        private void OnObterPepleoProfissionalOperationCompleted(object arg) {
            if ((this.ObterPepleoProfissionalCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ObterPepleoProfissionalCompleted(this, new ObterPepleoProfissionalCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/ObterPepleoReferencia", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet ObterPepleoReferencia(string pessoa) {
            object[] results = this.Invoke("ObterPepleoReferencia", new object[] {
                        pessoa});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void ObterPepleoReferenciaAsync(string pessoa) {
            this.ObterPepleoReferenciaAsync(pessoa, null);
        }
        
        /// <remarks/>
        public void ObterPepleoReferenciaAsync(string pessoa, object userState) {
            if ((this.ObterPepleoReferenciaOperationCompleted == null)) {
                this.ObterPepleoReferenciaOperationCompleted = new System.Threading.SendOrPostCallback(this.OnObterPepleoReferenciaOperationCompleted);
            }
            this.InvokeAsync("ObterPepleoReferencia", new object[] {
                        pessoa}, this.ObterPepleoReferenciaOperationCompleted, userState);
        }
        
        private void OnObterPepleoReferenciaOperationCompleted(object arg) {
            if ((this.ObterPepleoReferenciaCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ObterPepleoReferenciaCompleted(this, new ObterPepleoReferenciaCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/ObterPepleoRisco", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet ObterPepleoRisco(string pessoa) {
            object[] results = this.Invoke("ObterPepleoRisco", new object[] {
                        pessoa});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void ObterPepleoRiscoAsync(string pessoa) {
            this.ObterPepleoRiscoAsync(pessoa, null);
        }
        
        /// <remarks/>
        public void ObterPepleoRiscoAsync(string pessoa, object userState) {
            if ((this.ObterPepleoRiscoOperationCompleted == null)) {
                this.ObterPepleoRiscoOperationCompleted = new System.Threading.SendOrPostCallback(this.OnObterPepleoRiscoOperationCompleted);
            }
            this.InvokeAsync("ObterPepleoRisco", new object[] {
                        pessoa}, this.ObterPepleoRiscoOperationCompleted, userState);
        }
        
        private void OnObterPepleoRiscoOperationCompleted(object arg) {
            if ((this.ObterPepleoRiscoCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ObterPepleoRiscoCompleted(this, new ObterPepleoRiscoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/ObterNumNr", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet ObterNumNr(string store, string tipo) {
            object[] results = this.Invoke("ObterNumNr", new object[] {
                        store,
                        tipo});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void ObterNumNrAsync(string store, string tipo) {
            this.ObterNumNrAsync(store, tipo, null);
        }
        
        /// <remarks/>
        public void ObterNumNrAsync(string store, string tipo, object userState) {
            if ((this.ObterNumNrOperationCompleted == null)) {
                this.ObterNumNrOperationCompleted = new System.Threading.SendOrPostCallback(this.OnObterNumNrOperationCompleted);
            }
            this.InvokeAsync("ObterNumNr", new object[] {
                        store,
                        tipo}, this.ObterNumNrOperationCompleted, userState);
        }
        
        private void OnObterNumNrOperationCompleted(object arg) {
            if ((this.ObterNumNrCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ObterNumNrCompleted(this, new ObterNumNrCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/ObterEstoque", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet ObterEstoque(string find_produto, string tipo, string store) {
            object[] results = this.Invoke("ObterEstoque", new object[] {
                        find_produto,
                        tipo,
                        store});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void ObterEstoqueAsync(string find_produto, string tipo, string store) {
            this.ObterEstoqueAsync(find_produto, tipo, store, null);
        }
        
        /// <remarks/>
        public void ObterEstoqueAsync(string find_produto, string tipo, string store, object userState) {
            if ((this.ObterEstoqueOperationCompleted == null)) {
                this.ObterEstoqueOperationCompleted = new System.Threading.SendOrPostCallback(this.OnObterEstoqueOperationCompleted);
            }
            this.InvokeAsync("ObterEstoque", new object[] {
                        find_produto,
                        tipo,
                        store}, this.ObterEstoqueOperationCompleted, userState);
        }
        
        private void OnObterEstoqueOperationCompleted(object arg) {
            if ((this.ObterEstoqueCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ObterEstoqueCompleted(this, new ObterEstoqueCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/ObterTerminal", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet ObterTerminal(string find_store, string find_terminal) {
            object[] results = this.Invoke("ObterTerminal", new object[] {
                        find_store,
                        find_terminal});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void ObterTerminalAsync(string find_store, string find_terminal) {
            this.ObterTerminalAsync(find_store, find_terminal, null);
        }
        
        /// <remarks/>
        public void ObterTerminalAsync(string find_store, string find_terminal, object userState) {
            if ((this.ObterTerminalOperationCompleted == null)) {
                this.ObterTerminalOperationCompleted = new System.Threading.SendOrPostCallback(this.OnObterTerminalOperationCompleted);
            }
            this.InvokeAsync("ObterTerminal", new object[] {
                        find_store,
                        find_terminal}, this.ObterTerminalOperationCompleted, userState);
        }
        
        private void OnObterTerminalOperationCompleted(object arg) {
            if ((this.ObterTerminalCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ObterTerminalCompleted(this, new ObterTerminalCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/ObterCep", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet ObterCep(string find_cep) {
            object[] results = this.Invoke("ObterCep", new object[] {
                        find_cep});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void ObterCepAsync(string find_cep) {
            this.ObterCepAsync(find_cep, null);
        }
        
        /// <remarks/>
        public void ObterCepAsync(string find_cep, object userState) {
            if ((this.ObterCepOperationCompleted == null)) {
                this.ObterCepOperationCompleted = new System.Threading.SendOrPostCallback(this.OnObterCepOperationCompleted);
            }
            this.InvokeAsync("ObterCep", new object[] {
                        find_cep}, this.ObterCepOperationCompleted, userState);
        }
        
        private void OnObterCepOperationCompleted(object arg) {
            if ((this.ObterCepCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ObterCepCompleted(this, new ObterCepCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/ObterMainTerminalWorking", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet ObterMainTerminalWorking(string find_store, string find_terminal) {
            object[] results = this.Invoke("ObterMainTerminalWorking", new object[] {
                        find_store,
                        find_terminal});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void ObterMainTerminalWorkingAsync(string find_store, string find_terminal) {
            this.ObterMainTerminalWorkingAsync(find_store, find_terminal, null);
        }
        
        /// <remarks/>
        public void ObterMainTerminalWorkingAsync(string find_store, string find_terminal, object userState) {
            if ((this.ObterMainTerminalWorkingOperationCompleted == null)) {
                this.ObterMainTerminalWorkingOperationCompleted = new System.Threading.SendOrPostCallback(this.OnObterMainTerminalWorkingOperationCompleted);
            }
            this.InvokeAsync("ObterMainTerminalWorking", new object[] {
                        find_store,
                        find_terminal}, this.ObterMainTerminalWorkingOperationCompleted, userState);
        }
        
        private void OnObterMainTerminalWorkingOperationCompleted(object arg) {
            if ((this.ObterMainTerminalWorkingCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ObterMainTerminalWorkingCompleted(this, new ObterMainTerminalWorkingCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/ObterFuncionarioDocumento", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet ObterFuncionarioDocumento(string find_doc) {
            object[] results = this.Invoke("ObterFuncionarioDocumento", new object[] {
                        find_doc});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void ObterFuncionarioDocumentoAsync(string find_doc) {
            this.ObterFuncionarioDocumentoAsync(find_doc, null);
        }
        
        /// <remarks/>
        public void ObterFuncionarioDocumentoAsync(string find_doc, object userState) {
            if ((this.ObterFuncionarioDocumentoOperationCompleted == null)) {
                this.ObterFuncionarioDocumentoOperationCompleted = new System.Threading.SendOrPostCallback(this.OnObterFuncionarioDocumentoOperationCompleted);
            }
            this.InvokeAsync("ObterFuncionarioDocumento", new object[] {
                        find_doc}, this.ObterFuncionarioDocumentoOperationCompleted, userState);
        }
        
        private void OnObterFuncionarioDocumentoOperationCompleted(object arg) {
            if ((this.ObterFuncionarioDocumentoCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ObterFuncionarioDocumentoCompleted(this, new ObterFuncionarioDocumentoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/ObterUsuario", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet ObterUsuario(string find) {
            object[] results = this.Invoke("ObterUsuario", new object[] {
                        find});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void ObterUsuarioAsync(string find) {
            this.ObterUsuarioAsync(find, null);
        }
        
        /// <remarks/>
        public void ObterUsuarioAsync(string find, object userState) {
            if ((this.ObterUsuarioOperationCompleted == null)) {
                this.ObterUsuarioOperationCompleted = new System.Threading.SendOrPostCallback(this.OnObterUsuarioOperationCompleted);
            }
            this.InvokeAsync("ObterUsuario", new object[] {
                        find}, this.ObterUsuarioOperationCompleted, userState);
        }
        
        private void OnObterUsuarioOperationCompleted(object arg) {
            if ((this.ObterUsuarioCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ObterUsuarioCompleted(this, new ObterUsuarioCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/ObterPessoaDocumento", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet ObterPessoaDocumento(string find_doc, string tipo) {
            object[] results = this.Invoke("ObterPessoaDocumento", new object[] {
                        find_doc,
                        tipo});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void ObterPessoaDocumentoAsync(string find_doc, string tipo) {
            this.ObterPessoaDocumentoAsync(find_doc, tipo, null);
        }
        
        /// <remarks/>
        public void ObterPessoaDocumentoAsync(string find_doc, string tipo, object userState) {
            if ((this.ObterPessoaDocumentoOperationCompleted == null)) {
                this.ObterPessoaDocumentoOperationCompleted = new System.Threading.SendOrPostCallback(this.OnObterPessoaDocumentoOperationCompleted);
            }
            this.InvokeAsync("ObterPessoaDocumento", new object[] {
                        find_doc,
                        tipo}, this.ObterPessoaDocumentoOperationCompleted, userState);
        }
        
        private void OnObterPessoaDocumentoOperationCompleted(object arg) {
            if ((this.ObterPessoaDocumentoCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ObterPessoaDocumentoCompleted(this, new ObterPessoaDocumentoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/InserirFornecedorComercial", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int InserirFornecedorComercial(string replace_idComercial, string replace_idcliente, string replace_visita, string replace_analiseCompra, string replace_minVolume, string replace_valueBay, string replace_comprador, string replace_prazoEntrega, string replace_formaPgto, string replace_banco, string replace_agencia, string replace_contaCorrente) {
            object[] results = this.Invoke("InserirFornecedorComercial", new object[] {
                        replace_idComercial,
                        replace_idcliente,
                        replace_visita,
                        replace_analiseCompra,
                        replace_minVolume,
                        replace_valueBay,
                        replace_comprador,
                        replace_prazoEntrega,
                        replace_formaPgto,
                        replace_banco,
                        replace_agencia,
                        replace_contaCorrente});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void InserirFornecedorComercialAsync(string replace_idComercial, string replace_idcliente, string replace_visita, string replace_analiseCompra, string replace_minVolume, string replace_valueBay, string replace_comprador, string replace_prazoEntrega, string replace_formaPgto, string replace_banco, string replace_agencia, string replace_contaCorrente) {
            this.InserirFornecedorComercialAsync(replace_idComercial, replace_idcliente, replace_visita, replace_analiseCompra, replace_minVolume, replace_valueBay, replace_comprador, replace_prazoEntrega, replace_formaPgto, replace_banco, replace_agencia, replace_contaCorrente, null);
        }
        
        /// <remarks/>
        public void InserirFornecedorComercialAsync(string replace_idComercial, string replace_idcliente, string replace_visita, string replace_analiseCompra, string replace_minVolume, string replace_valueBay, string replace_comprador, string replace_prazoEntrega, string replace_formaPgto, string replace_banco, string replace_agencia, string replace_contaCorrente, object userState) {
            if ((this.InserirFornecedorComercialOperationCompleted == null)) {
                this.InserirFornecedorComercialOperationCompleted = new System.Threading.SendOrPostCallback(this.OnInserirFornecedorComercialOperationCompleted);
            }
            this.InvokeAsync("InserirFornecedorComercial", new object[] {
                        replace_idComercial,
                        replace_idcliente,
                        replace_visita,
                        replace_analiseCompra,
                        replace_minVolume,
                        replace_valueBay,
                        replace_comprador,
                        replace_prazoEntrega,
                        replace_formaPgto,
                        replace_banco,
                        replace_agencia,
                        replace_contaCorrente}, this.InserirFornecedorComercialOperationCompleted, userState);
        }
        
        private void OnInserirFornecedorComercialOperationCompleted(object arg) {
            if ((this.InserirFornecedorComercialCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.InserirFornecedorComercialCompleted(this, new InserirFornecedorComercialCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/InserirFornecedorFiscal", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int InserirFornecedorFiscal(string replace_idfiscal, string replace_idcliente, string replace_forceIcms, string replace_forcePis, string replace_forceCofins, string replace_descatadaSt, string replace_typeGrade) {
            object[] results = this.Invoke("InserirFornecedorFiscal", new object[] {
                        replace_idfiscal,
                        replace_idcliente,
                        replace_forceIcms,
                        replace_forcePis,
                        replace_forceCofins,
                        replace_descatadaSt,
                        replace_typeGrade});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void InserirFornecedorFiscalAsync(string replace_idfiscal, string replace_idcliente, string replace_forceIcms, string replace_forcePis, string replace_forceCofins, string replace_descatadaSt, string replace_typeGrade) {
            this.InserirFornecedorFiscalAsync(replace_idfiscal, replace_idcliente, replace_forceIcms, replace_forcePis, replace_forceCofins, replace_descatadaSt, replace_typeGrade, null);
        }
        
        /// <remarks/>
        public void InserirFornecedorFiscalAsync(string replace_idfiscal, string replace_idcliente, string replace_forceIcms, string replace_forcePis, string replace_forceCofins, string replace_descatadaSt, string replace_typeGrade, object userState) {
            if ((this.InserirFornecedorFiscalOperationCompleted == null)) {
                this.InserirFornecedorFiscalOperationCompleted = new System.Threading.SendOrPostCallback(this.OnInserirFornecedorFiscalOperationCompleted);
            }
            this.InvokeAsync("InserirFornecedorFiscal", new object[] {
                        replace_idfiscal,
                        replace_idcliente,
                        replace_forceIcms,
                        replace_forcePis,
                        replace_forceCofins,
                        replace_descatadaSt,
                        replace_typeGrade}, this.InserirFornecedorFiscalOperationCompleted, userState);
        }
        
        private void OnInserirFornecedorFiscalOperationCompleted(object arg) {
            if ((this.InserirFornecedorFiscalCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.InserirFornecedorFiscalCompleted(this, new InserirFornecedorFiscalCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/InserirFornecedorInfo", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int InserirFornecedorInfo(
                    string replace_idInformacao, 
                    string replace_idcliente, 
                    string replace_typeTroca, 
                    string replace_typeFrete, 
                    string replace_porcentagemFrete, 
                    string replace_lastVisita, 
                    string replace_nextVisita, 
                    string replace_devPagar, 
                    string replace_bloquearEntregaFiscal, 
                    string replace_representante, 
                    string replace_idoperacao, 
                    string replace_forceCompra, 
                    string replace_nameSugestao, 
                    string replace_passwdSugestao, 
                    string replace_observacao, 
                    string replace_typeFornecedor) {
            object[] results = this.Invoke("InserirFornecedorInfo", new object[] {
                        replace_idInformacao,
                        replace_idcliente,
                        replace_typeTroca,
                        replace_typeFrete,
                        replace_porcentagemFrete,
                        replace_lastVisita,
                        replace_nextVisita,
                        replace_devPagar,
                        replace_bloquearEntregaFiscal,
                        replace_representante,
                        replace_idoperacao,
                        replace_forceCompra,
                        replace_nameSugestao,
                        replace_passwdSugestao,
                        replace_observacao,
                        replace_typeFornecedor});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void InserirFornecedorInfoAsync(
                    string replace_idInformacao, 
                    string replace_idcliente, 
                    string replace_typeTroca, 
                    string replace_typeFrete, 
                    string replace_porcentagemFrete, 
                    string replace_lastVisita, 
                    string replace_nextVisita, 
                    string replace_devPagar, 
                    string replace_bloquearEntregaFiscal, 
                    string replace_representante, 
                    string replace_idoperacao, 
                    string replace_forceCompra, 
                    string replace_nameSugestao, 
                    string replace_passwdSugestao, 
                    string replace_observacao, 
                    string replace_typeFornecedor) {
            this.InserirFornecedorInfoAsync(replace_idInformacao, replace_idcliente, replace_typeTroca, replace_typeFrete, replace_porcentagemFrete, replace_lastVisita, replace_nextVisita, replace_devPagar, replace_bloquearEntregaFiscal, replace_representante, replace_idoperacao, replace_forceCompra, replace_nameSugestao, replace_passwdSugestao, replace_observacao, replace_typeFornecedor, null);
        }
        
        /// <remarks/>
        public void InserirFornecedorInfoAsync(
                    string replace_idInformacao, 
                    string replace_idcliente, 
                    string replace_typeTroca, 
                    string replace_typeFrete, 
                    string replace_porcentagemFrete, 
                    string replace_lastVisita, 
                    string replace_nextVisita, 
                    string replace_devPagar, 
                    string replace_bloquearEntregaFiscal, 
                    string replace_representante, 
                    string replace_idoperacao, 
                    string replace_forceCompra, 
                    string replace_nameSugestao, 
                    string replace_passwdSugestao, 
                    string replace_observacao, 
                    string replace_typeFornecedor, 
                    object userState) {
            if ((this.InserirFornecedorInfoOperationCompleted == null)) {
                this.InserirFornecedorInfoOperationCompleted = new System.Threading.SendOrPostCallback(this.OnInserirFornecedorInfoOperationCompleted);
            }
            this.InvokeAsync("InserirFornecedorInfo", new object[] {
                        replace_idInformacao,
                        replace_idcliente,
                        replace_typeTroca,
                        replace_typeFrete,
                        replace_porcentagemFrete,
                        replace_lastVisita,
                        replace_nextVisita,
                        replace_devPagar,
                        replace_bloquearEntregaFiscal,
                        replace_representante,
                        replace_idoperacao,
                        replace_forceCompra,
                        replace_nameSugestao,
                        replace_passwdSugestao,
                        replace_observacao,
                        replace_typeFornecedor}, this.InserirFornecedorInfoOperationCompleted, userState);
        }
        
        private void OnInserirFornecedorInfoOperationCompleted(object arg) {
            if ((this.InserirFornecedorInfoCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.InserirFornecedorInfoCompleted(this, new InserirFornecedorInfoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/InserirPessoa", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int InserirPessoa(string idCliente, string idLoja, string idTipoPessoa, string idUsuario, string idAtividade, string observacao, string dataEmissao, string dataAlteracao, string idEstado, string uf, string status, string idSpedMunicipio, string idPais, string liberacao) {
            object[] results = this.Invoke("InserirPessoa", new object[] {
                        idCliente,
                        idLoja,
                        idTipoPessoa,
                        idUsuario,
                        idAtividade,
                        observacao,
                        dataEmissao,
                        dataAlteracao,
                        idEstado,
                        uf,
                        status,
                        idSpedMunicipio,
                        idPais,
                        liberacao});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void InserirPessoaAsync(string idCliente, string idLoja, string idTipoPessoa, string idUsuario, string idAtividade, string observacao, string dataEmissao, string dataAlteracao, string idEstado, string uf, string status, string idSpedMunicipio, string idPais, string liberacao) {
            this.InserirPessoaAsync(idCliente, idLoja, idTipoPessoa, idUsuario, idAtividade, observacao, dataEmissao, dataAlteracao, idEstado, uf, status, idSpedMunicipio, idPais, liberacao, null);
        }
        
        /// <remarks/>
        public void InserirPessoaAsync(string idCliente, string idLoja, string idTipoPessoa, string idUsuario, string idAtividade, string observacao, string dataEmissao, string dataAlteracao, string idEstado, string uf, string status, string idSpedMunicipio, string idPais, string liberacao, object userState) {
            if ((this.InserirPessoaOperationCompleted == null)) {
                this.InserirPessoaOperationCompleted = new System.Threading.SendOrPostCallback(this.OnInserirPessoaOperationCompleted);
            }
            this.InvokeAsync("InserirPessoa", new object[] {
                        idCliente,
                        idLoja,
                        idTipoPessoa,
                        idUsuario,
                        idAtividade,
                        observacao,
                        dataEmissao,
                        dataAlteracao,
                        idEstado,
                        uf,
                        status,
                        idSpedMunicipio,
                        idPais,
                        liberacao}, this.InserirPessoaOperationCompleted, userState);
        }
        
        private void OnInserirPessoaOperationCompleted(object arg) {
            if ((this.InserirPessoaCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.InserirPessoaCompleted(this, new InserirPessoaCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/AlteraPessoa", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void AlteraPessoa(
                    string auxIdCliente, 
                    string auxIdLoja, 
                    string flagTipopessoa, 
                    string Usuario, 
                    string flagAtividade, 
                    string obs, 
                    string dataEmissao, 
                    string inclusao, 
                    string auxIdEstado, 
                    string auxuf, 
                    string codMun, 
                    string status, 
                    string auxIdEndereco, 
                    string newGridcepCliente, 
                    string auxIdCepCliente, 
                    string bairro, 
                    string logradouro, 
                    string complemento, 
                    string city, 
                    string ufcliente, 
                    string number) {
            this.Invoke("AlteraPessoa", new object[] {
                        auxIdCliente,
                        auxIdLoja,
                        flagTipopessoa,
                        Usuario,
                        flagAtividade,
                        obs,
                        dataEmissao,
                        inclusao,
                        auxIdEstado,
                        auxuf,
                        codMun,
                        status,
                        auxIdEndereco,
                        newGridcepCliente,
                        auxIdCepCliente,
                        bairro,
                        logradouro,
                        complemento,
                        city,
                        ufcliente,
                        number});
        }
        
        /// <remarks/>
        public void AlteraPessoaAsync(
                    string auxIdCliente, 
                    string auxIdLoja, 
                    string flagTipopessoa, 
                    string Usuario, 
                    string flagAtividade, 
                    string obs, 
                    string dataEmissao, 
                    string inclusao, 
                    string auxIdEstado, 
                    string auxuf, 
                    string codMun, 
                    string status, 
                    string auxIdEndereco, 
                    string newGridcepCliente, 
                    string auxIdCepCliente, 
                    string bairro, 
                    string logradouro, 
                    string complemento, 
                    string city, 
                    string ufcliente, 
                    string number) {
            this.AlteraPessoaAsync(auxIdCliente, auxIdLoja, flagTipopessoa, Usuario, flagAtividade, obs, dataEmissao, inclusao, auxIdEstado, auxuf, codMun, status, auxIdEndereco, newGridcepCliente, auxIdCepCliente, bairro, logradouro, complemento, city, ufcliente, number, null);
        }
        
        /// <remarks/>
        public void AlteraPessoaAsync(
                    string auxIdCliente, 
                    string auxIdLoja, 
                    string flagTipopessoa, 
                    string Usuario, 
                    string flagAtividade, 
                    string obs, 
                    string dataEmissao, 
                    string inclusao, 
                    string auxIdEstado, 
                    string auxuf, 
                    string codMun, 
                    string status, 
                    string auxIdEndereco, 
                    string newGridcepCliente, 
                    string auxIdCepCliente, 
                    string bairro, 
                    string logradouro, 
                    string complemento, 
                    string city, 
                    string ufcliente, 
                    string number, 
                    object userState) {
            if ((this.AlteraPessoaOperationCompleted == null)) {
                this.AlteraPessoaOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAlteraPessoaOperationCompleted);
            }
            this.InvokeAsync("AlteraPessoa", new object[] {
                        auxIdCliente,
                        auxIdLoja,
                        flagTipopessoa,
                        Usuario,
                        flagAtividade,
                        obs,
                        dataEmissao,
                        inclusao,
                        auxIdEstado,
                        auxuf,
                        codMun,
                        status,
                        auxIdEndereco,
                        newGridcepCliente,
                        auxIdCepCliente,
                        bairro,
                        logradouro,
                        complemento,
                        city,
                        ufcliente,
                        number}, this.AlteraPessoaOperationCompleted, userState);
        }
        
        private void OnAlteraPessoaOperationCompleted(object arg) {
            if ((this.AlteraPessoaCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.AlteraPessoaCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/AlteraFisica", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void AlteraFisica(string alt_idcliente, string alt_cpf, string alt_idatividade, string alt_nome, string alt_nascimento, string alt_idsexo, string alt_identidade, string alt_idcivil) {
            this.Invoke("AlteraFisica", new object[] {
                        alt_idcliente,
                        alt_cpf,
                        alt_idatividade,
                        alt_nome,
                        alt_nascimento,
                        alt_idsexo,
                        alt_identidade,
                        alt_idcivil});
        }
        
        /// <remarks/>
        public void AlteraFisicaAsync(string alt_idcliente, string alt_cpf, string alt_idatividade, string alt_nome, string alt_nascimento, string alt_idsexo, string alt_identidade, string alt_idcivil) {
            this.AlteraFisicaAsync(alt_idcliente, alt_cpf, alt_idatividade, alt_nome, alt_nascimento, alt_idsexo, alt_identidade, alt_idcivil, null);
        }
        
        /// <remarks/>
        public void AlteraFisicaAsync(string alt_idcliente, string alt_cpf, string alt_idatividade, string alt_nome, string alt_nascimento, string alt_idsexo, string alt_identidade, string alt_idcivil, object userState) {
            if ((this.AlteraFisicaOperationCompleted == null)) {
                this.AlteraFisicaOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAlteraFisicaOperationCompleted);
            }
            this.InvokeAsync("AlteraFisica", new object[] {
                        alt_idcliente,
                        alt_cpf,
                        alt_idatividade,
                        alt_nome,
                        alt_nascimento,
                        alt_idsexo,
                        alt_identidade,
                        alt_idcivil}, this.AlteraFisicaOperationCompleted, userState);
        }
        
        private void OnAlteraFisicaOperationCompleted(object arg) {
            if ((this.AlteraFisicaCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.AlteraFisicaCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/AlteraJuridica", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void AlteraJuridica(string alt_idcliente, string alt_cnpj, string alt_idatividade, string alt_razao, string alt_fantasia, string alt_ie, string alt_dataAbertura, string alt_idTipoFornecedor) {
            this.Invoke("AlteraJuridica", new object[] {
                        alt_idcliente,
                        alt_cnpj,
                        alt_idatividade,
                        alt_razao,
                        alt_fantasia,
                        alt_ie,
                        alt_dataAbertura,
                        alt_idTipoFornecedor});
        }
        
        /// <remarks/>
        public void AlteraJuridicaAsync(string alt_idcliente, string alt_cnpj, string alt_idatividade, string alt_razao, string alt_fantasia, string alt_ie, string alt_dataAbertura, string alt_idTipoFornecedor) {
            this.AlteraJuridicaAsync(alt_idcliente, alt_cnpj, alt_idatividade, alt_razao, alt_fantasia, alt_ie, alt_dataAbertura, alt_idTipoFornecedor, null);
        }
        
        /// <remarks/>
        public void AlteraJuridicaAsync(string alt_idcliente, string alt_cnpj, string alt_idatividade, string alt_razao, string alt_fantasia, string alt_ie, string alt_dataAbertura, string alt_idTipoFornecedor, object userState) {
            if ((this.AlteraJuridicaOperationCompleted == null)) {
                this.AlteraJuridicaOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAlteraJuridicaOperationCompleted);
            }
            this.InvokeAsync("AlteraJuridica", new object[] {
                        alt_idcliente,
                        alt_cnpj,
                        alt_idatividade,
                        alt_razao,
                        alt_fantasia,
                        alt_ie,
                        alt_dataAbertura,
                        alt_idTipoFornecedor}, this.AlteraJuridicaOperationCompleted, userState);
        }
        
        private void OnAlteraJuridicaOperationCompleted(object arg) {
            if ((this.AlteraJuridicaCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.AlteraJuridicaCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/AlteraRural", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void AlteraRural(string alt_idcliente, string alt_cpf, string alt_idatividade, string alt_nome, string alt_identidade, string alt_ie, string alt_nascimento, string alt_idsexo, string alt_idcivil) {
            this.Invoke("AlteraRural", new object[] {
                        alt_idcliente,
                        alt_cpf,
                        alt_idatividade,
                        alt_nome,
                        alt_identidade,
                        alt_ie,
                        alt_nascimento,
                        alt_idsexo,
                        alt_idcivil});
        }
        
        /// <remarks/>
        public void AlteraRuralAsync(string alt_idcliente, string alt_cpf, string alt_idatividade, string alt_nome, string alt_identidade, string alt_ie, string alt_nascimento, string alt_idsexo, string alt_idcivil) {
            this.AlteraRuralAsync(alt_idcliente, alt_cpf, alt_idatividade, alt_nome, alt_identidade, alt_ie, alt_nascimento, alt_idsexo, alt_idcivil, null);
        }
        
        /// <remarks/>
        public void AlteraRuralAsync(string alt_idcliente, string alt_cpf, string alt_idatividade, string alt_nome, string alt_identidade, string alt_ie, string alt_nascimento, string alt_idsexo, string alt_idcivil, object userState) {
            if ((this.AlteraRuralOperationCompleted == null)) {
                this.AlteraRuralOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAlteraRuralOperationCompleted);
            }
            this.InvokeAsync("AlteraRural", new object[] {
                        alt_idcliente,
                        alt_cpf,
                        alt_idatividade,
                        alt_nome,
                        alt_identidade,
                        alt_ie,
                        alt_nascimento,
                        alt_idsexo,
                        alt_idcivil}, this.AlteraRuralOperationCompleted, userState);
        }
        
        private void OnAlteraRuralOperationCompleted(object arg) {
            if ((this.AlteraRuralCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.AlteraRuralCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/InserirFisica", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int InserirFisica(string idCliente, string cpf, string idAtividade, string nome, string nascimento, string idSexo, string idEntidade, string idCivil) {
            object[] results = this.Invoke("InserirFisica", new object[] {
                        idCliente,
                        cpf,
                        idAtividade,
                        nome,
                        nascimento,
                        idSexo,
                        idEntidade,
                        idCivil});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void InserirFisicaAsync(string idCliente, string cpf, string idAtividade, string nome, string nascimento, string idSexo, string idEntidade, string idCivil) {
            this.InserirFisicaAsync(idCliente, cpf, idAtividade, nome, nascimento, idSexo, idEntidade, idCivil, null);
        }
        
        /// <remarks/>
        public void InserirFisicaAsync(string idCliente, string cpf, string idAtividade, string nome, string nascimento, string idSexo, string idEntidade, string idCivil, object userState) {
            if ((this.InserirFisicaOperationCompleted == null)) {
                this.InserirFisicaOperationCompleted = new System.Threading.SendOrPostCallback(this.OnInserirFisicaOperationCompleted);
            }
            this.InvokeAsync("InserirFisica", new object[] {
                        idCliente,
                        cpf,
                        idAtividade,
                        nome,
                        nascimento,
                        idSexo,
                        idEntidade,
                        idCivil}, this.InserirFisicaOperationCompleted, userState);
        }
        
        private void OnInserirFisicaOperationCompleted(object arg) {
            if ((this.InserirFisicaCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.InserirFisicaCompleted(this, new InserirFisicaCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/InserirRural", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int InserirRural(string idCliente, string cpf, string idAtividade, string nome, string ie, string idEntidade, string nascimento, string idSexo, string idCivil) {
            object[] results = this.Invoke("InserirRural", new object[] {
                        idCliente,
                        cpf,
                        idAtividade,
                        nome,
                        ie,
                        idEntidade,
                        nascimento,
                        idSexo,
                        idCivil});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void InserirRuralAsync(string idCliente, string cpf, string idAtividade, string nome, string ie, string idEntidade, string nascimento, string idSexo, string idCivil) {
            this.InserirRuralAsync(idCliente, cpf, idAtividade, nome, ie, idEntidade, nascimento, idSexo, idCivil, null);
        }
        
        /// <remarks/>
        public void InserirRuralAsync(string idCliente, string cpf, string idAtividade, string nome, string ie, string idEntidade, string nascimento, string idSexo, string idCivil, object userState) {
            if ((this.InserirRuralOperationCompleted == null)) {
                this.InserirRuralOperationCompleted = new System.Threading.SendOrPostCallback(this.OnInserirRuralOperationCompleted);
            }
            this.InvokeAsync("InserirRural", new object[] {
                        idCliente,
                        cpf,
                        idAtividade,
                        nome,
                        ie,
                        idEntidade,
                        nascimento,
                        idSexo,
                        idCivil}, this.InserirRuralOperationCompleted, userState);
        }
        
        private void OnInserirRuralOperationCompleted(object arg) {
            if ((this.InserirRuralCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.InserirRuralCompleted(this, new InserirRuralCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/InserirJuridica", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int InserirJuridica(string idCliente, string cnpj, string idAtividade, string razao, string fantasia, string ie, string dataAbertura, string idTipofornecedor) {
            object[] results = this.Invoke("InserirJuridica", new object[] {
                        idCliente,
                        cnpj,
                        idAtividade,
                        razao,
                        fantasia,
                        ie,
                        dataAbertura,
                        idTipofornecedor});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void InserirJuridicaAsync(string idCliente, string cnpj, string idAtividade, string razao, string fantasia, string ie, string dataAbertura, string idTipofornecedor) {
            this.InserirJuridicaAsync(idCliente, cnpj, idAtividade, razao, fantasia, ie, dataAbertura, idTipofornecedor, null);
        }
        
        /// <remarks/>
        public void InserirJuridicaAsync(string idCliente, string cnpj, string idAtividade, string razao, string fantasia, string ie, string dataAbertura, string idTipofornecedor, object userState) {
            if ((this.InserirJuridicaOperationCompleted == null)) {
                this.InserirJuridicaOperationCompleted = new System.Threading.SendOrPostCallback(this.OnInserirJuridicaOperationCompleted);
            }
            this.InvokeAsync("InserirJuridica", new object[] {
                        idCliente,
                        cnpj,
                        idAtividade,
                        razao,
                        fantasia,
                        ie,
                        dataAbertura,
                        idTipofornecedor}, this.InserirJuridicaOperationCompleted, userState);
        }
        
        private void OnInserirJuridicaOperationCompleted(object arg) {
            if ((this.InserirJuridicaCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.InserirJuridicaCompleted(this, new InserirJuridicaCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/InserirEndereco", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int InserirEndereco(string idEndereco, string idCliente, string sequencia, string cep, string idcepbairro, string idEnderecoType, string bairro, string logradouro, string complemento, string municipio, string estado, string numero) {
            object[] results = this.Invoke("InserirEndereco", new object[] {
                        idEndereco,
                        idCliente,
                        sequencia,
                        cep,
                        idcepbairro,
                        idEnderecoType,
                        bairro,
                        logradouro,
                        complemento,
                        municipio,
                        estado,
                        numero});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void InserirEnderecoAsync(string idEndereco, string idCliente, string sequencia, string cep, string idcepbairro, string idEnderecoType, string bairro, string logradouro, string complemento, string municipio, string estado, string numero) {
            this.InserirEnderecoAsync(idEndereco, idCliente, sequencia, cep, idcepbairro, idEnderecoType, bairro, logradouro, complemento, municipio, estado, numero, null);
        }
        
        /// <remarks/>
        public void InserirEnderecoAsync(string idEndereco, string idCliente, string sequencia, string cep, string idcepbairro, string idEnderecoType, string bairro, string logradouro, string complemento, string municipio, string estado, string numero, object userState) {
            if ((this.InserirEnderecoOperationCompleted == null)) {
                this.InserirEnderecoOperationCompleted = new System.Threading.SendOrPostCallback(this.OnInserirEnderecoOperationCompleted);
            }
            this.InvokeAsync("InserirEndereco", new object[] {
                        idEndereco,
                        idCliente,
                        sequencia,
                        cep,
                        idcepbairro,
                        idEnderecoType,
                        bairro,
                        logradouro,
                        complemento,
                        municipio,
                        estado,
                        numero}, this.InserirEnderecoOperationCompleted, userState);
        }
        
        private void OnInserirEnderecoOperationCompleted(object arg) {
            if ((this.InserirEnderecoCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.InserirEnderecoCompleted(this, new InserirEnderecoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/InserirEnderecoFuncionario", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int InserirEnderecoFuncionario(string replace_idFuncionarioEndereco, string replace_idFuncionario, string replace_sequencia, string replace_cep, string replace_idcepbairro, string replace_idenderecoType, string replace_bairro, string replace_logradouro, string replace_complemento, string replace_municipio, string replace_estado, string replace_numero) {
            object[] results = this.Invoke("InserirEnderecoFuncionario", new object[] {
                        replace_idFuncionarioEndereco,
                        replace_idFuncionario,
                        replace_sequencia,
                        replace_cep,
                        replace_idcepbairro,
                        replace_idenderecoType,
                        replace_bairro,
                        replace_logradouro,
                        replace_complemento,
                        replace_municipio,
                        replace_estado,
                        replace_numero});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void InserirEnderecoFuncionarioAsync(string replace_idFuncionarioEndereco, string replace_idFuncionario, string replace_sequencia, string replace_cep, string replace_idcepbairro, string replace_idenderecoType, string replace_bairro, string replace_logradouro, string replace_complemento, string replace_municipio, string replace_estado, string replace_numero) {
            this.InserirEnderecoFuncionarioAsync(replace_idFuncionarioEndereco, replace_idFuncionario, replace_sequencia, replace_cep, replace_idcepbairro, replace_idenderecoType, replace_bairro, replace_logradouro, replace_complemento, replace_municipio, replace_estado, replace_numero, null);
        }
        
        /// <remarks/>
        public void InserirEnderecoFuncionarioAsync(string replace_idFuncionarioEndereco, string replace_idFuncionario, string replace_sequencia, string replace_cep, string replace_idcepbairro, string replace_idenderecoType, string replace_bairro, string replace_logradouro, string replace_complemento, string replace_municipio, string replace_estado, string replace_numero, object userState) {
            if ((this.InserirEnderecoFuncionarioOperationCompleted == null)) {
                this.InserirEnderecoFuncionarioOperationCompleted = new System.Threading.SendOrPostCallback(this.OnInserirEnderecoFuncionarioOperationCompleted);
            }
            this.InvokeAsync("InserirEnderecoFuncionario", new object[] {
                        replace_idFuncionarioEndereco,
                        replace_idFuncionario,
                        replace_sequencia,
                        replace_cep,
                        replace_idcepbairro,
                        replace_idenderecoType,
                        replace_bairro,
                        replace_logradouro,
                        replace_complemento,
                        replace_municipio,
                        replace_estado,
                        replace_numero}, this.InserirEnderecoFuncionarioOperationCompleted, userState);
        }
        
        private void OnInserirEnderecoFuncionarioOperationCompleted(object arg) {
            if ((this.InserirEnderecoFuncionarioCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.InserirEnderecoFuncionarioCompleted(this, new InserirEnderecoFuncionarioCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/conector_passwd", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int conector_passwd(string newPasswd, string hash, string idFuncionario) {
            object[] results = this.Invoke("conector_passwd", new object[] {
                        newPasswd,
                        hash,
                        idFuncionario});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void conector_passwdAsync(string newPasswd, string hash, string idFuncionario) {
            this.conector_passwdAsync(newPasswd, hash, idFuncionario, null);
        }
        
        /// <remarks/>
        public void conector_passwdAsync(string newPasswd, string hash, string idFuncionario, object userState) {
            if ((this.conector_passwdOperationCompleted == null)) {
                this.conector_passwdOperationCompleted = new System.Threading.SendOrPostCallback(this.Onconector_passwdOperationCompleted);
            }
            this.InvokeAsync("conector_passwd", new object[] {
                        newPasswd,
                        hash,
                        idFuncionario}, this.conector_passwdOperationCompleted, userState);
        }
        
        private void Onconector_passwdOperationCompleted(object arg) {
            if ((this.conector_passwdCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.conector_passwdCompleted(this, new conector_passwdCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
        
        private bool IsLocalFileSystemWebService(string url) {
            if (((url == null) 
                        || (url == string.Empty))) {
                return false;
            }
            System.Uri wsUri = new System.Uri(url);
            if (((wsUri.Port >= 1024) 
                        && (string.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) == 0))) {
                return true;
            }
            return false;
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")]
    public delegate void InserirSpedNcmCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")]
    public delegate void InserirProdutoCompletedEventHandler(object sender, InserirProdutoCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class InserirProdutoCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal InserirProdutoCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")]
    public delegate void AlterarSpedNcmCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")]
    public delegate void AlterarProdutoPriceCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")]
    public delegate void AlterarProdutoCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")]
    public delegate void AlterarProdutoImpostosCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")]
    public delegate void AlterarProdutoPriceFullCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")]
    public delegate void AlterarEANCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")]
    public delegate void InserirEANCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")]
    public delegate void InserirUsuarioCompletedEventHandler(object sender, InserirUsuarioCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class InserirUsuarioCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal InserirUsuarioCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")]
    public delegate void AlterarUsuarioCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")]
    public delegate void AlterarConfiguracaoUsuarioCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")]
    public delegate void AlterarConfiguracaoUsuarioAllCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")]
    public delegate void InserirConfiguracaoUsuarioCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")]
    public delegate void InserirFuncionarioCompletedEventHandler(object sender, InserirFuncionarioCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class InserirFuncionarioCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal InserirFuncionarioCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")]
    public delegate void AlterarFuncionarioCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")]
    public delegate void InserirTerminalCompletedEventHandler(object sender, InserirTerminalCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class InserirTerminalCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal InserirTerminalCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")]
    public delegate void InserirCepCompletedEventHandler(object sender, InserirCepCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class InserirCepCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal InserirCepCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")]
    public delegate void AlterarTerminalCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")]
    public delegate void AlterarTerminalConfigEcfCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")]
    public delegate void ObterResultChequeCompletedEventHandler(object sender, ObterResultChequeCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ObterResultChequeCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ObterResultChequeCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")]
    public delegate void ObterPedidoCompletedEventHandler(object sender, ObterPedidoCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ObterPedidoCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ObterPedidoCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")]
    public delegate void ObterPedidoLogCompletedEventHandler(object sender, ObterPedidoLogCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ObterPedidoLogCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ObterPedidoLogCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")]
    public delegate void ObterPedidoExpireCompletedEventHandler(object sender, ObterPedidoExpireCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ObterPedidoExpireCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ObterPedidoExpireCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")]
    public delegate void ObterPedidoItensCompletedEventHandler(object sender, ObterPedidoItensCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ObterPedidoItensCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ObterPedidoItensCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")]
    public delegate void ObterPedidoFinanceiroCompletedEventHandler(object sender, ObterPedidoFinanceiroCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ObterPedidoFinanceiroCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ObterPedidoFinanceiroCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")]
    public delegate void ObterPedidoParcelamentoCompletedEventHandler(object sender, ObterPedidoParcelamentoCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ObterPedidoParcelamentoCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ObterPedidoParcelamentoCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")]
    public delegate void ObterPedidoEntregaCompletedEventHandler(object sender, ObterPedidoEntregaCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ObterPedidoEntregaCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ObterPedidoEntregaCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")]
    public delegate void AlteraStatusPedidoCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")]
    public delegate void AlteraStatusPedidoFinalCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")]
    public delegate void VerificaStatusPedidoCompletedEventHandler(object sender, VerificaStatusPedidoCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class VerificaStatusPedidoCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal VerificaStatusPedidoCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")]
    public delegate void VerificaFinalPedidoCompletedEventHandler(object sender, VerificaFinalPedidoCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class VerificaFinalPedidoCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal VerificaFinalPedidoCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")]
    public delegate void VerificaFinalizadoraPedidoCompletedEventHandler(object sender, VerificaFinalizadoraPedidoCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class VerificaFinalizadoraPedidoCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal VerificaFinalizadoraPedidoCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")]
    public delegate void ObterCrediarioCompletedEventHandler(object sender, ObterCrediarioCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ObterCrediarioCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ObterCrediarioCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")]
    public delegate void ObterParcelamentoCompletedEventHandler(object sender, ObterParcelamentoCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ObterParcelamentoCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ObterParcelamentoCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")]
    public delegate void ObterParcelaCompletedEventHandler(object sender, ObterParcelaCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ObterParcelaCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ObterParcelaCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")]
    public delegate void ObterDividentoCompletedEventHandler(object sender, ObterDividentoCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ObterDividentoCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ObterDividentoCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")]
    public delegate void ObterHistoricoFullCompletedEventHandler(object sender, ObterHistoricoFullCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ObterHistoricoFullCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ObterHistoricoFullCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")]
    public delegate void AlteraStatusParcelaCrediarioCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")]
    public delegate void verificaStatusParcelaCrediarioCompletedEventHandler(object sender, verificaStatusParcelaCrediarioCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class verificaStatusParcelaCrediarioCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal verificaStatusParcelaCrediarioCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")]
    public delegate void verificaStatusCrediarioCompletedEventHandler(object sender, verificaStatusCrediarioCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class verificaStatusCrediarioCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal verificaStatusCrediarioCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")]
    public delegate void verificaExitsPepleoCompletedEventHandler(object sender, verificaExitsPepleoCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class verificaExitsPepleoCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal verificaExitsPepleoCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")]
    public delegate void ObterPepleoSingleCompletedEventHandler(object sender, ObterPepleoSingleCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ObterPepleoSingleCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ObterPepleoSingleCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")]
    public delegate void ObterMainPepleoCompletedEventHandler(object sender, ObterMainPepleoCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ObterMainPepleoCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ObterMainPepleoCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")]
    public delegate void ObterMainPepleoWorkingCompletedEventHandler(object sender, ObterMainPepleoWorkingCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ObterMainPepleoWorkingCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ObterMainPepleoWorkingCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")]
    public delegate void ObterMainPepleoFisicaCompletedEventHandler(object sender, ObterMainPepleoFisicaCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ObterMainPepleoFisicaCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ObterMainPepleoFisicaCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")]
    public delegate void ObterMainPepleoRuralCompletedEventHandler(object sender, ObterMainPepleoRuralCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ObterMainPepleoRuralCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ObterMainPepleoRuralCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")]
    public delegate void ObterMainPepleoJuridicaCompletedEventHandler(object sender, ObterMainPepleoJuridicaCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ObterMainPepleoJuridicaCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ObterMainPepleoJuridicaCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")]
    public delegate void ObterFoneCompletedEventHandler(object sender, ObterFoneCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ObterFoneCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ObterFoneCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")]
    public delegate void ObterFoneFuncionarioCompletedEventHandler(object sender, ObterFoneFuncionarioCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ObterFoneFuncionarioCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ObterFoneFuncionarioCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")]
    public delegate void ObterStoreCompletedEventHandler(object sender, ObterStoreCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ObterStoreCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ObterStoreCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")]
    public delegate void fornecedor_comercialCompletedEventHandler(object sender, fornecedor_comercialCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class fornecedor_comercialCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal fornecedor_comercialCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")]
    public delegate void fornecedorFiscalCompletedEventHandler(object sender, fornecedorFiscalCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class fornecedorFiscalCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal fornecedorFiscalCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")]
    public delegate void fornecedorInfoCompletedEventHandler(object sender, fornecedorInfoCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class fornecedorInfoCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal fornecedorInfoCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")]
    public delegate void ObterEnderecoCompletedEventHandler(object sender, ObterEnderecoCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ObterEnderecoCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ObterEnderecoCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")]
    public delegate void ObterEnderecoFuncionarioCompletedEventHandler(object sender, ObterEnderecoFuncionarioCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ObterEnderecoFuncionarioCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ObterEnderecoFuncionarioCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")]
    public delegate void ObterPepleoCobrancaCompletedEventHandler(object sender, ObterPepleoCobrancaCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ObterPepleoCobrancaCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ObterPepleoCobrancaCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")]
    public delegate void ObterPepleoEntregaCompletedEventHandler(object sender, ObterPepleoEntregaCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ObterPepleoEntregaCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ObterPepleoEntregaCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")]
    public delegate void ObterPepleoProfissionalCompletedEventHandler(object sender, ObterPepleoProfissionalCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ObterPepleoProfissionalCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ObterPepleoProfissionalCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")]
    public delegate void ObterPepleoReferenciaCompletedEventHandler(object sender, ObterPepleoReferenciaCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ObterPepleoReferenciaCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ObterPepleoReferenciaCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")]
    public delegate void ObterPepleoRiscoCompletedEventHandler(object sender, ObterPepleoRiscoCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ObterPepleoRiscoCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ObterPepleoRiscoCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")]
    public delegate void ObterNumNrCompletedEventHandler(object sender, ObterNumNrCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ObterNumNrCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ObterNumNrCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")]
    public delegate void ObterEstoqueCompletedEventHandler(object sender, ObterEstoqueCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ObterEstoqueCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ObterEstoqueCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")]
    public delegate void ObterTerminalCompletedEventHandler(object sender, ObterTerminalCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ObterTerminalCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ObterTerminalCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")]
    public delegate void ObterCepCompletedEventHandler(object sender, ObterCepCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ObterCepCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ObterCepCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")]
    public delegate void ObterMainTerminalWorkingCompletedEventHandler(object sender, ObterMainTerminalWorkingCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ObterMainTerminalWorkingCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ObterMainTerminalWorkingCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")]
    public delegate void ObterFuncionarioDocumentoCompletedEventHandler(object sender, ObterFuncionarioDocumentoCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ObterFuncionarioDocumentoCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ObterFuncionarioDocumentoCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")]
    public delegate void ObterUsuarioCompletedEventHandler(object sender, ObterUsuarioCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ObterUsuarioCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ObterUsuarioCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")]
    public delegate void ObterPessoaDocumentoCompletedEventHandler(object sender, ObterPessoaDocumentoCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ObterPessoaDocumentoCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ObterPessoaDocumentoCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")]
    public delegate void InserirFornecedorComercialCompletedEventHandler(object sender, InserirFornecedorComercialCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class InserirFornecedorComercialCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal InserirFornecedorComercialCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")]
    public delegate void InserirFornecedorFiscalCompletedEventHandler(object sender, InserirFornecedorFiscalCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class InserirFornecedorFiscalCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal InserirFornecedorFiscalCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")]
    public delegate void InserirFornecedorInfoCompletedEventHandler(object sender, InserirFornecedorInfoCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class InserirFornecedorInfoCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal InserirFornecedorInfoCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")]
    public delegate void InserirPessoaCompletedEventHandler(object sender, InserirPessoaCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class InserirPessoaCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal InserirPessoaCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")]
    public delegate void AlteraPessoaCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")]
    public delegate void AlteraFisicaCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")]
    public delegate void AlteraJuridicaCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")]
    public delegate void AlteraRuralCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")]
    public delegate void InserirFisicaCompletedEventHandler(object sender, InserirFisicaCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class InserirFisicaCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal InserirFisicaCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")]
    public delegate void InserirRuralCompletedEventHandler(object sender, InserirRuralCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class InserirRuralCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal InserirRuralCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")]
    public delegate void InserirJuridicaCompletedEventHandler(object sender, InserirJuridicaCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class InserirJuridicaCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal InserirJuridicaCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")]
    public delegate void InserirEnderecoCompletedEventHandler(object sender, InserirEnderecoCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class InserirEnderecoCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal InserirEnderecoCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")]
    public delegate void InserirEnderecoFuncionarioCompletedEventHandler(object sender, InserirEnderecoFuncionarioCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class InserirEnderecoFuncionarioCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal InserirEnderecoFuncionarioCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")]
    public delegate void conector_passwdCompletedEventHandler(object sender, conector_passwdCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class conector_passwdCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal conector_passwdCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
}

#pragma warning restore 1591